float32x4_t MultiQueryCallback<physx::PxOverlapHit>::invoke(uint64_t a1, float32x4_t result, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long *v9;
  char *v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  int v15;
  __int16 v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t (*v23)(float32x4_t *, long long *, void, void, __int16 *);
  float32x4_t GlobalPose;
  int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t (*v41)(long long *, long long *, void, void, float32x4_t *);
  long long v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  __n128 *v50;
  uint64_t v51;
  long long v52;
  long long v53;
  float32x4_t v54[2];
  long long v55;
  __int16 v56;
  void v57[2];
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x263EF8340];
  v57[0] = 0;
  v57[1] = 0;
  v58 = -1;
  v5 = *a4;
  v6 = a4[1];
  v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v6 + 11) & 0xF) + 3) + v6;
  v8 = v7 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  v9 = (long long *)(*a4 + 32);
  v10 = (char *)v9 + qword_2687A62F0;
  v11 = *(void *)(a1 + 40);
  v12 = *(_WORD *)(v11 + 16);
  if (*(unsigned char *)(a1 + 78)) {
    v13 = 2;
  }
  else {
    v13 = 1;
  }
  if (v12 > -1 && *(_DWORD *)(*(void *)(a1 + 24) + 48) == 0) {
    v15 = 2;
  }
  else {
    v15 = v13;
  }
  if (!*(unsigned char *)(a1 + 78))
  {
    v16 = *(_WORD *)(a1 + 32);
    v17 = *(void *)(a1 + 48);
    v18 = *(void *)(a1 + 64);
    if (!v18)
    {
      v20 = *(_DWORD *)(v11 + 4);
      v21 = *(_DWORD *)(v11 + 8);
      v22 = *(_DWORD *)(v11 + 12);
      if (v20 | *(_DWORD *)v11 | v21 | v22)
      {
        if (!(*(_DWORD *)(v5 + 36) & v20 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v11 | *(_DWORD *)(v5 + 40) & v21 | *(_DWORD *)(v5 + 44) & v22)) {
          return result;
        }
      }
    }
    if ((v12 & 4) != 0 && v17 | v18)
    {
      v56 = v16;
      if (v17)
      {
        v19 = (**(uint64_t (***)(unint64_t))v17)(v17);
      }
      else
      {
        v23 = *(uint64_t (**)(float32x4_t *, long long *, void, void, __int16 *))(v18 + 16);
        if (!v23) {
          goto LABEL_22;
        }
        v54[0] = *(float32x4_t *)v11;
        v55 = *v9;
        v19 = v23(v54, &v55, *(void *)v18, *(unsigned int *)(v18 + 8), &v56);
      }
      v15 = v19;
      if (!v19) {
        return result;
      }
    }
  }
LABEL_22:
  GlobalPose = physx::NpActor::getGlobalPose(v54, v5, v6, result);
  if (*(unsigned char *)(v5 + 8)) {
    v25 = (int *)(*(void *)(v5 + 16) + 64);
  }
  else {
    v25 = (int *)(v5 + 104);
  }
  v26 = *(void *)(a1 + 24);
  v27 = *(_DWORD *)(v26 + 48);
  v28 = *(_DWORD *)(v26 + 52);
  v29 = *(void *)(v26 + 40) + 24 * v28;
  if (v28 >= v27) {
    v30 = (float32x4_t *)v57;
  }
  else {
    v30 = (float32x4_t *)(*(void *)(v26 + 40) + 24 * v28);
  }
  v31 = *v25;
  v32 = *(void *)(a1 + 16);
  v33 = *(int **)(v32 + 24);
  v34 = *(void *)(v32 + 32);
  v35 = *(void *)(*(void *)(a1 + 8) + 8872);
  v36 = *v33;
  if ((int)v36 <= (int)v31)
  {
    if (!(*(unsigned int (**)(int *, uint64_t, float32x4_t))(v35 + 56 * (int)v36 + 8 * v31))(v33, v34, GlobalPose))return result; {
  }
    }
  else if (((*(uint64_t (**)(int *, float32x4_t *, int *, uint64_t, void, float32x4_t))(v35 {
                                                                                                  + 56 * (int)v31
  }
                                                                                                  + 8 * v36))(v25, v54, v33, v34, 0, GlobalPose) & 1) == 0)
  {
    return result;
  }
  v30->i64[0] = v8;
  v37 = v57;
  if (v28 < v27) {
    v37 = (void *)v29;
  }
  v37[1] = v10;
  if (!*(unsigned char *)(a1 + 78))
  {
    v38 = *(void *)(a1 + 48);
    if (v38)
    {
      if ((v12 & 8) != 0)
      {
        v39 = (*(uint64_t (**)(uint64_t, void, float32x4_t *))(*(void *)v38 + 8))(v38, *(void *)(a1 + 40), v30);
LABEL_42:
        v15 = v39;
      }
    }
    else
    {
      v40 = *(void *)(a1 + 64);
      if (v40)
      {
        if ((v12 & 8) != 0)
        {
          v41 = *(uint64_t (**)(long long *, long long *, void, void, float32x4_t *))(v40 + 24);
          if (v41)
          {
            v42 = *(_OWORD *)*(void *)(a1 + 40);
            v52 = *v9;
            v53 = v42;
            v39 = v41(&v53, &v52, *(void *)v40, *(unsigned int *)(v40 + 8), v30);
            goto LABEL_42;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 77) && v15)
  {
    v43 = *(void *)(a1 + 24);
    result = *v30;
    *(void *)(v43 + 24) = v30[1].i64[0];
    *(float32x4_t *)(v43 + 8) = result;
    *(unsigned char *)(*(void *)(a1 + 24) + 32) = 1;
    return result;
  }
  if (*(unsigned char *)(a1 + 76)) {
    v44 = 1;
  }
  else {
    v44 = v15;
  }
  if (v44 == 2)
  {
    result.i32[0] = *(_DWORD *)(a1 + 56);
    if (result.f32[0] >= -1.0)
    {
      v51 = *(void *)(a1 + 24);
      result = *v30;
      *(void *)(v51 + 24) = v30[1].i64[0];
      *(float32x4_t *)(v51 + 8) = result;
      *(unsigned char *)(*(void *)(a1 + 24) + 32) = 1;
    }
  }
  else if (v44 == 1)
  {
    v45 = *(void *)(a1 + 24);
    v46 = *(_DWORD *)(v45 + 48);
    if (v46)
    {
      if (*(unsigned char *)(a1 + 74))
      {
        result.i32[0] = *(_DWORD *)(a1 + 56);
        if (result.f32[0] >= -1.0)
        {
          v47 = *(_DWORD *)(v45 + 52);
          if (v47 == v46)
          {
            v48 = (**(uint64_t (***)(uint64_t, void))v45)(v45, *(void *)(v45 + 40));
            *(unsigned char *)(a1 + 74) = v48;
            if (!v48) {
              return result;
            }
            v47 = 0;
            v45 = *(void *)(a1 + 24);
            *(_DWORD *)(v45 + 52) = 0;
          }
          v49 = *(void *)(v45 + 40);
          *(_DWORD *)(v45 + 52) = v47 + 1;
          v50 = (__n128 *)(v49 + 24 * v47);
          result = *v30;
          v50[1].n128_u64[0] = v30[1].u64[0];
          *v50 = (__n128)result;
        }
      }
    }
  }
  return result;
}

uint64_t MultiQueryCallback<physx::PxSweepHit>::invoke(uint64_t a1, float *a2, uint64_t *a3, float32x4_t a4)
{
  *(void *)&v164[4] = *MEMORY[0x263EF8340];
  v157[0] = 0;
  v157[1] = 0;
  int v158 = -1;
  __int16 v159 = 0;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v160 = 0;
  int v163 = 2139095039;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v6 + 11) & 0xF) + 3) + v6;
  uint64_t v8 = v7 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  v9 = (long long *)(*a3 + 32);
  v10 = (char *)v9 + qword_2687A62F0;
  uint64_t v11 = *(void *)(a1 + 40);
  __int16 v12 = *(_WORD *)(v11 + 16);
  if (*(unsigned char *)(a1 + 78)) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  if (*(__int16 *)(v11 + 16) > -1 && *(_DWORD *)(*(void *)(a1 + 24) + 80) == 0) {
    int v15 = 2;
  }
  else {
    int v15 = v13;
  }
  __int16 v16 = *(_WORD *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 78))
  {
    unint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 64);
    if (!v18)
    {
      int v20 = *(_DWORD *)(v11 + 4);
      int v21 = *(_DWORD *)(v11 + 8);
      int v22 = *(_DWORD *)(v11 + 12);
      if (v20 | *(_DWORD *)v11 | v21 | v22)
      {
        if (!(*(_DWORD *)(v5 + 36) & v20 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v11 | *(_DWORD *)(v5 + 40) & v21 | *(_DWORD *)(v5 + 44) & v22)) {
          return 1;
        }
      }
    }
    if ((v12 & 4) != 0 && v17 | v18)
    {
      v141.i16[0] = v16;
      if (v17)
      {
        int v19 = (**(uint64_t (***)(unint64_t))v17)(v17);
      }
      else
      {
        v23 = *(uint64_t (**)(unsigned char *, unsigned char *, void, void, float32x4_t *))(v18 + 16);
        if (!v23) {
          goto LABEL_23;
        }
        *(_OWORD *)v130 = *(_OWORD *)v11;
        *(_OWORD *)v145 = *v9;
        int v19 = v23(v130, v145, *(void *)v18, *(unsigned int *)(v18 + 8), &v141);
      }
      int v15 = v19;
      if (!v19) {
        return 1;
      }
      __int16 v16 = v141.i16[0] & 0x1B0 | v16 & 0xFE4F;
    }
  }
LABEL_23:
  float32x4_t GlobalPose = physx::NpActor::getGlobalPose(&v141, v5, v6, a4);
  v117 = v9;
  char v118 = v12;
  int v123 = v15;
  v121 = v10;
  uint64_t v122 = v8;
  __int16 v128 = v16;
  if (*(unsigned char *)(v5 + 8)) {
    v36 = (int *)(*(void *)(v5 + 16) + 64);
  }
  else {
    v36 = (int *)(v5 + 104);
  }
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v37 = *(void *)(a1 + 24);
  unsigned int v39 = *(_DWORD *)(v37 + 84);
  uint64_t v40 = *(void *)(v37 + 72);
  uint64_t v119 = v40;
  v41 = (float *)(v40 + 56 * v39);
  unsigned int v125 = *(_DWORD *)(v37 + 80);
  unsigned int v124 = v39;
  if (v39 >= v125) {
    v42 = (float *)v157;
  }
  else {
    v42 = (float *)(v40 + 56 * v39);
  }
  uint64_t v43 = *(void *)(a1 + 8);
  unsigned __int16 v44 = *(_WORD *)(a1 + 72);
  float v45 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 104)) {
    v46 = (float *)(a1 + 80);
  }
  else {
    v46 = 0;
  }
  v47 = *(_DWORD **)(v38 + 24);
  uint64_t v126 = *(void *)(v38 + 32);
  v127 = v42;
  float v48 = *v46;
  float v49 = v46[1];
  float v50 = v46[2];
  float v51 = v46[3];
  float v52 = v46[4];
  float v53 = v46[5];
  float v54 = 0.0;
  GlobalPose.i64[0] = 0;
  v29.i32[0] = 1.0;
  physx::Gu::computeBounds(&v152, (uint64_t)v36, (uint64_t)&v141, 0, GlobalPose, v29, v30, v31, v32, v33, v34, v35, v24, v25, v26, v27, v114);
  v150.f32[0] = (float)((float)((float)(v51 - v48) * 0.5) + (float)((float)(v154 - v152.f32[0]) * 0.5)) * 1.01;
  v150.f32[1] = (float)((float)((float)(v52 - v49) * 0.5) + (float)((float)(v155 - v152.f32[1]) * 0.5)) * 1.01;
  float v151 = (float)((float)((float)(v53 - v50) * 0.5) + (float)((float)(v156 - v153) * 0.5)) * 1.01;
  float v148 = 0.0;
  float v149 = 0.0;
  *(float *)v130 = -v150.f32[0];
  *(float *)&v130[4] = -v150.f32[1];
  *(float *)&v130[8] = -v151;
  *(float *)v145 = (float)((float)(v48 + v51) * 0.5) - (float)((float)(v154 + v152.f32[0]) * 0.5);
  *(float *)&v145[4] = (float)((float)(v49 + v52) * 0.5) - (float)((float)(v155 + v152.f32[1]) * 0.5);
  *(float *)&v145[8] = (float)((float)(v50 + v53) * 0.5) - (float)((float)(v156 + v153) * 0.5);
  v55 = *(float32x2_t **)(v38 + 8);
  BOOL v56 = physx::Gu::intersectRayAABB2((float32x2_t *)v130, &v150, (float32x2_t *)v145, v55, &v149, &v148, v45);
  v63.n128_f32[0] = v148;
  if (!v56 && v149 > v148) {
    return 1;
  }
  float v64 = v149 + -10.0;
  if (v149 <= 10.0) {
    float v65 = 0.0;
  }
  else {
    float v65 = v149 + -10.0;
  }
  v61.i64[0] = 0;
  if (v149 > 10.0)
  {
    v60.n128_u64[0] = (unint64_t)*v55;
    *(float32x2_t *)v61.i8 = vmul_n_f32(*v55, v64);
    float v54 = v64 * v55[1].f32[0];
  }
  *(float32x4_t *)v130 = v141;
  *(float32x2_t *)&v130[16] = vsub_f32(v142, *(float32x2_t *)v61.i8);
  float v131 = v143 - v54;
  if (v148 >= v45) {
    v63.n128_f32[0] = v45;
  }
  v63.n128_f32[0] = v63.n128_f32[0] - v65;
  v60.n128_u32[0] = *(_DWORD *)(v38 + 40);
  uint64_t v66 = *(void *)(v43 + 8864);
  switch(*v47)
  {
    case 0xFFFFFFFF:
    case 1:
    case 5:
    case 6:
    case 7:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 306, "PxScene::sweep(): first geometry object parameter must be sphere, capsule, box or convex geometry.", v57, v58, v59, v115);
      return 1;
    case 0:
      __int16 v67 = v128;
      int v68 = v47[1];
      v147[0] = 2;
      v147[1] = v68;
      v147[2] = 0;
      uint64_t v116 = v61.i64[0];
      *(void *)v145 = *(void *)(v126 + 16);
      v61.i64[0] = *(void *)v145;
      v62.i32[0] = *(_DWORD *)(v126 + 24);
      int8x16_t v69 = vextq_s8(vextq_s8(v62, v62, 4uLL), v61, 0xCuLL);
      v69.i32[3] = v69.i32[0];
      *(int8x16_t *)&v145[8] = v69;
      int v146 = v68;
      v70 = (uint64_t (**)(int *, unsigned char *, _DWORD *, __n128, __n128))(v66 + 8 * *v36);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0) {
        v70 += 7;
      }
      v71 = *v70;
      v144[3] = v44 | v128;
      char v72 = v71(v36, v130, v147, v63, v60);
      break;
    case 2:
      __int16 v67 = v128;
      v73 = (uint64_t (**)(int *, unsigned char *, _DWORD *, __n128, __n128))(v66 + 8 * *v36);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0) {
        v73 += 7;
      }
      v74 = *v73;
      v144[2] = v44 | v128;
      goto LABEL_52;
    case 3:
      __int16 v67 = v128;
      uint64_t v75 = v66 + 8 * *v36;
      v76 = (uint64_t (**)(int *, unsigned char *, _DWORD *, __n128, __n128))(v75 + 168);
      v77 = (uint64_t (**)(int *, unsigned char *, _DWORD *, __n128, __n128))(v75 + 112);
      if (((v44 | (unsigned __int16)v128) & 0x100) != 0) {
        v77 = v76;
      }
      v74 = *v77;
      v144[1] = v44 | v128;
LABEL_52:
      uint64_t v116 = v61.i64[0];
      char v72 = v74(v36, v130, v47, v63, v60);
      break;
    case 4:
      __int16 v67 = v128;
      v78 = *(uint64_t (**)(int *, unsigned char *, _DWORD *, uint64_t, float32x2_t *, float *, _WORD *, float, float))(v66 + 8 * *v36 + 224);
      v144[0] = v44 | v128;
      uint64_t v116 = v61.i64[0];
      char v72 = v78(v36, v130, v47, v126, v55, v127, v144, v63.n128_f32[0], v60.n128_f32[0]);
      break;
    default:
      return 1;
  }
  if ((v72 & 1) == 0) {
    return 1;
  }
  if (v124 >= v125) {
    v79 = (float *)v157;
  }
  else {
    v79 = v41;
  }
  v79[12] = v65 + v79[12];
  float v80 = *((float *)&v116 + 1) + v127[7];
  v127[6] = *(float *)&v116 + v127[6];
  v127[7] = v80;
  v127[8] = v54 + v127[8];
  *(void *)v127 = v122;
  *((void *)v79 + 1) = v121;
  if (v79[12] == 0.0 && (v67 & 0x200) == 0)
  {
    v81 = *(float **)(*(void *)(a1 + 16) + 8);
    float v82 = -v81[1];
    float v83 = -v81[2];
    v127[9] = -*v81;
    v127[10] = v82;
    v127[11] = v83;
  }
  int v84 = v123;
  if (!*(unsigned char *)(a1 + 78))
  {
    uint64_t v85 = *(void *)(a1 + 48);
    if (v85)
    {
      if ((v118 & 8) != 0)
      {
        int v86 = (*(uint64_t (**)(uint64_t, void, float *))(*(void *)v85 + 8))(v85, *(void *)(a1 + 40), v127);
LABEL_69:
        int v84 = v86;
      }
    }
    else
    {
      uint64_t v87 = *(void *)(a1 + 64);
      if (v87)
      {
        if ((v118 & 8) != 0)
        {
          v88 = *(uint64_t (**)(long long *, long long *, void, void, float *))(v87 + 24);
          if (v88)
          {
            long long v89 = *(_OWORD *)*(void *)(a1 + 40);
            long long v139 = *v117;
            long long v140 = v89;
            int v86 = v88(&v140, &v139, *(void *)v87, *(unsigned int *)(v87 + 8), v127);
            goto LABEL_69;
          }
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 77) && v84)
  {
    uint64_t result = 0;
    uint64_t v91 = *(void *)(a1 + 24);
    long long v92 = *(_OWORD *)v127;
    *(float *)(v91 + 24) = v127[4];
    *(_OWORD *)(v91 + 8) = v92;
    *(_WORD *)(v91 + 28) = *((_WORD *)v127 + 10);
    *(float *)(v91 + 32) = v127[6];
    *(float *)(v91 + 36) = v127[7];
    *(float *)(v91 + 40) = v127[8];
    *(float *)(v91 + 44) = v127[9];
    *(float *)(v91 + 48) = v127[10];
    *(float *)(v91 + 52) = v127[11];
    *(float *)(v91 + 56) = v79[12];
    v93 = (_DWORD *)(v119 + 56 * v124 + 52);
    if (v124 >= v125) {
      v93 = v164;
    }
    *(_DWORD *)(v91 + 60) = *v93;
    *(unsigned char *)(*(void *)(a1 + 24) + 64) = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 76)) {
      int v94 = 1;
    }
    else {
      int v94 = v84;
    }
    if (v94 != 2)
    {
      if (v94 == 1)
      {
        uint64_t v95 = *(void *)(a1 + 24);
        int v96 = *(_DWORD *)(v95 + 80);
        if (v96)
        {
          if (*(unsigned char *)(a1 + 74) && v79[12] <= *(float *)(a1 + 56))
          {
            unsigned int v97 = *(_DWORD *)(v95 + 84);
            if (v97 == v96)
            {
              uint64_t v98 = *(void *)(a1 + 40);
              *(_OWORD *)v145 = *(_OWORD *)v98;
              *(_WORD *)&v145[16] = *(_WORD *)(v98 + 16) | 0x8000;
              *(void *)&v130[8] = 0;
              *(void *)&v130[16] = 0;
              float v131 = NAN;
              __int16 v132 = 0;
              *(void *)v134 = 0;
              *(void *)&v134[8] = 0;
              uint64_t v133 = 0;
              *(_DWORD *)&v134[16] = 2139095039;
              char v136 = 0;
              uint64_t v137 = 0;
              uint64_t v138 = 0;
              *(void *)v130 = &unk_26E72E470;
              if (!*(unsigned char *)(a1 + 75))
              {
                if (*(_DWORD *)(v95 + 80))
                {
                  uint64_t v107 = *(void *)(a1 + 8);
                  uint64_t v108 = *(void *)(a1 + 16);
                  __int16 v129 = *(_WORD *)(a1 + 32);
                  int v109 = physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(v107, v108, v130, &v129, 0, v145, *(void *)(a1 + 48), *(void *)(a1 + 64));
                  uint64_t v95 = *(void *)(a1 + 24);
                  if (v109)
                  {
                    long long v110 = *(_OWORD *)&v130[8];
                    *(float *)(v95 + 24) = v131;
                    *(_OWORD *)(v95 + 8) = v110;
                    *(_WORD *)(v95 + 28) = v132;
                    *(void *)(v95 + 32) = v133;
                    *(_DWORD *)(v95 + 40) = *(_DWORD *)v134;
                    *(_OWORD *)(v95 + 44) = *(_OWORD *)&v134[4];
                    *(_DWORD *)(v95 + 60) = v135;
                    uint64_t v111 = *(void *)(a1 + 24);
                    *(unsigned char *)(v111 + 64) = 1;
                    int v112 = physx::clipHitsToNewMaxDist<physx::PxSweepHit>(*(void *)(v111 + 72), *(unsigned int *)(v111 + 84), *(float *)&v134[16]);
                    uint64_t v95 = *(void *)(a1 + 24);
                    *(_DWORD *)(v95 + 84) = v112;
                    int v113 = *(_DWORD *)&v134[16];
                    *(_DWORD *)(a1 + 56) = *(_DWORD *)&v134[16];
                    *(_DWORD *)a2 = v113;
                  }
                }
              }
              *(unsigned char *)(a1 + 75) = 1;
              unsigned int v97 = *(_DWORD *)(v95 + 84);
              if (v97 == *(_DWORD *)(v95 + 80))
              {
                uint64_t result = (**(uint64_t (***)(uint64_t, void))v95)(v95, *(void *)(v95 + 72));
                *(unsigned char *)(a1 + 74) = result;
                if (!result) {
                  return result;
                }
                unsigned int v97 = 0;
                uint64_t v95 = *(void *)(a1 + 24);
                *(_DWORD *)(v95 + 84) = 0;
              }
            }
            uint64_t v99 = *(void *)(v95 + 72);
            *(_DWORD *)(v95 + 84) = v97 + 1;
            uint64_t v100 = v99 + 56 * v97;
            long long v101 = *(_OWORD *)v127;
            *(float *)(v100 + 16) = v127[4];
            *(_OWORD *)uint64_t v100 = v101;
            *(_WORD *)(v100 + 20) = *((_WORD *)v127 + 10);
            *(float *)(v100 + 24) = v127[6];
            *(float *)(v100 + 28) = v127[7];
            *(float *)(v100 + 32) = v127[8];
            *(float *)(v100 + 36) = v127[9];
            *(float *)(v100 + 40) = v127[10];
            *(float *)(v100 + 44) = v127[11];
            *(float *)(v100 + 48) = v79[12];
            v102 = (_DWORD *)(v119 + 56 * v124 + 52);
            if (v124 >= v125) {
              v102 = v164;
            }
            *(_DWORD *)(v100 + 52) = *v102;
          }
        }
      }
      return 1;
    }
    float v103 = v79[12];
    uint64_t result = 1;
    if (v103 <= *(float *)(a1 + 56))
    {
      *(float *)(a1 + 56) = v103;
      *a2 = v103;
      uint64_t v104 = *(void *)(a1 + 24);
      long long v105 = *(_OWORD *)v127;
      *(float *)(v104 + 24) = v127[4];
      *(_OWORD *)(v104 + 8) = v105;
      *(_WORD *)(v104 + 28) = *((_WORD *)v127 + 10);
      *(float *)(v104 + 32) = v127[6];
      *(float *)(v104 + 36) = v127[7];
      *(float *)(v104 + 40) = v127[8];
      *(float *)(v104 + 44) = v127[9];
      *(float *)(v104 + 48) = v127[10];
      *(float *)(v104 + 52) = v127[11];
      *(float *)(v104 + 56) = v79[12];
      v106 = (_DWORD *)(v119 + 56 * v124 + 52);
      if (v124 >= v125) {
        v106 = v164;
      }
      *(_DWORD *)(v104 + 60) = *v106;
      *(unsigned char *)(*(void *)(a1 + 24) + 64) = 1;
    }
  }
  return result;
}

uint64_t physx::NpShape::NpShape(uint64_t a1, uint64_t *a2, char *a3, const unsigned __int16 *a4, unsigned int a5, int a6)
{
  *(_DWORD *)(a1 + 8) = 196615;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)a1 = &unk_26E72D180;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_26E72D300;
  char v8 = *a3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  char v13 = v8;
  physx::Sc::ShapeCore::ShapeCore(a1 + 80, a2, &v13, a4, a5);
  if (a6) {
    int v9 = 0x1000000;
  }
  else {
    int v9 = 0x2000000;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xF0FFFFFF | v9;
  *(void *)(a1 + 256) = 0;
  if (a6) {
    unsigned int v10 = 0x80000000;
  }
  else {
    unsigned int v10 = 0;
  }
  *(_DWORD *)(a1 + 264) = v10;
  *(void *)(a1 + 16) = 0;
  uint64_t MeshRefCountable = physx::NpShape::getMeshRefCountable((physx::NpShape *)a1);
  if (MeshRefCountable) {
    atomic_fetch_add((atomic_uint *volatile)(MeshRefCountable + 8), 1u);
  }
  return a1;
}

void physx::NpShape::~NpShape(physx::NpShape *this)
{
  *(void *)this = &unk_26E72D180;
  *((void *)this + 3) = &unk_26E72D300;
  physx::NpShape::decMeshRefCount(this);
  if ((*((unsigned char *)this + 56) & 2) != 0)
  {
    v4 = (char *)(*((void *)this + 8) + 148);
    goto LABEL_8;
  }
  int v2 = *((_DWORD *)this + 38);
  if ((v2 - 7) >= 0xFFFFFFFE)
  {
    if (v2 == 5) {
      v4 = (char *)this + 224;
    }
    else {
      v4 = (char *)this + 200;
    }
LABEL_8:
    unsigned int v3 = *(unsigned __int16 *)v4;
    if (!v3) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  unsigned int v3 = 1;
LABEL_9:
  uint64_t v5 = 0;
  uint64_t v6 = v3;
  do
  {
    if ((*((unsigned char *)this + 56) & 2) != 0)
    {
      uint64_t v9 = *((void *)this + 8);
      if (*(_WORD *)(v9 + 148) == 1) {
        char v8 = (char *)(v9 + 144);
      }
      else {
        char v8 = (char *)(*(void *)(*((void *)this + 6) + 7792) + 2 * *(unsigned int *)(v9 + 144));
      }
    }
    else
    {
      int v7 = *((_DWORD *)this + 38);
      char v8 = (char *)this + 146;
      if ((v7 - 7) >= 0xFFFFFFFE)
      {
        if (v7 == 5) {
          char v8 = (char *)*((void *)this + 27);
        }
        else {
          char v8 = (char *)*((void *)this + 24);
        }
      }
    }
    uint64_t v10 = *(void *)(*(void *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)&v8[2 * v5]);
    if (atomic_fetch_add((atomic_uint *volatile)(v10 + 32), 0xFFFFFFFF) == 1) {
      (*(void (**)(void))(*(void *)(v10 + 24) + 16))();
    }
    ++v5;
  }
  while (v6 != v5);
LABEL_21:
  physx::Sc::ShapeCore::~ShapeCore((physx::NpShape *)((char *)this + 80));
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpShape::~NpShape(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

atomic_uint *physx::NpShape::decMeshRefCount(physx::NpShape *this)
{
  uint64_t result = (atomic_uint *)physx::NpShape::getMeshRefCountable(this);
  if (result && atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1)
  {
    int v2 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (atomic_uint *)v2();
  }
  return result;
}

void non-virtual thunk to'physx::NpShape::~NpShape(physx::NpShape *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::NpShape::~NpShape((physx::NpShape *)((char *)this - 24));
  v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::NpShape::onRefCountZero(physx::NpShape *this)
{
  physx::NpFactory::onShapeRelease(physx::NpFactory::mInstance, (uint64_t)this);
  return physx::NpDestroy((uint64_t)this + 48);
}

uint64_t non-virtual thunk to'physx::NpShape::onRefCountZero(physx::NpShape *this)
{
  physx::NpFactory::onShapeRelease(physx::NpFactory::mInstance, (uint64_t)this - 24);
  return physx::NpDestroy((uint64_t)this + 24);
}

uint64_t physx::NpShape::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::Sc::ShapeCore::exportExtraData(a1 + 80, a2);
  uint64_t v4 = *(void *)(a1 + 256);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t physx::NpShape::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (_DWORD *)(result + 152);
  int v4 = *(_DWORD *)(result + 152);
  switch(v4)
  {
    case 6:
      uint64_t v8 = result + 152;
      if (*(unsigned char *)(result + 56)) {
        uint64_t v8 = *(void *)(result + 64) + 64;
      }
      int v7 = (void *)(v8 + 8);
      break;
    case 5:
      uint64_t v9 = result + 152;
      if (*(unsigned char *)(result + 56)) {
        uint64_t v9 = *(void *)(result + 64) + 64;
      }
      int v7 = (void *)(v9 + 40);
      break;
    case 4:
      uint64_t v6 = result + 152;
      if (*(unsigned char *)(result + 56)) {
        uint64_t v6 = *(void *)(result + 64) + 64;
      }
      int v7 = (void *)(v6 + 32);
      break;
    default:
      goto LABEL_15;
  }
  if (*v7) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
LABEL_15:
  if ((*(unsigned char *)(v3 + 56) & 2) != 0)
  {
    uint64_t v11 = (unsigned __int16 *)(*(void *)(v3 + 64) + 148);
    goto LABEL_22;
  }
  if ((*v5 - 7) >= 0xFFFFFFFE)
  {
    if (*v5 == 5) {
      uint64_t v11 = (unsigned __int16 *)(v3 + 224);
    }
    else {
      uint64_t v11 = (unsigned __int16 *)(v3 + 200);
    }
LABEL_22:
    unsigned int v10 = *v11;
    if (!v10) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v10 = 1;
LABEL_23:
  uint64_t v12 = 0;
  uint64_t v13 = v10;
  do
  {
    if ((*(unsigned char *)(v3 + 56) & 2) != 0)
    {
      uint64_t v15 = *(void *)(v3 + 64);
      if (*(_WORD *)(v15 + 148) == 1) {
        uint64_t v14 = v15 + 144;
      }
      else {
        uint64_t v14 = *(void *)(*(void *)(v3 + 48) + 7792) + 2 * *(unsigned int *)(v15 + 144);
      }
    }
    else
    {
      uint64_t v14 = v3 + 146;
      if ((*v5 - 7) >= 0xFFFFFFFE)
      {
        if (*v5 == 5) {
          uint64_t v14 = *(void *)(v3 + 216);
        }
        else {
          uint64_t v14 = *(void *)(v3 + 192);
        }
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)(v14 + 2 * v12++)));
  }
  while (v13 != v12);
  return result;
}

uint64_t physx::NpShape::getReferenceCount(physx::NpShape *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::NpShape::acquireReference(uint64_t this)
{
  return this;
}

uint64_t physx::NpShape::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 32), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 24) + 16))();
  }
  return this;
}

uint64_t physx::NpShape::updateSQ(uint64_t this, char *a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(this + 40);
  if (!v9) {
    return this;
  }
  uint64_t v11 = this;
  uint64_t v12 = (unsigned char *)((*(unsigned char *)(this + 56) & 0x40) != 0 ? *(void *)(this + 64) + 52 : this + 144);
  if ((*v12 & 2) == 0) {
    return this;
  }
  uint64_t v13 = *(unsigned __int16 *)(v9 + 8);
  uint64_t v14 = (uint64_t *)(v9 + *((void *)&physx::NpActor::sLazyInitOffsets + v13 + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    __int16 v16 = 0;
  }
  else
  {
    uint64_t v15 = *v14;
    if (v15) {
      __int16 v16 = (int32x2_t *)(v15 - 16);
    }
    else {
      __int16 v16 = 0;
    }
  }
  unint64_t v17 = (uint64_t *)(v9 + 40);
  if (v13 == 5) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v13 == 6) {
    uint64_t v18 = v17;
  }
  if (v13 == 13) {
    int v19 = v17;
  }
  else {
    int v19 = v18;
  }
  if (v16)
  {
    uint64_t v20 = *((unsigned __int16 *)v19 + 4);
    int v21 = v19;
    if (v20 != 1)
    {
      if (!*((_WORD *)v19 + 4))
      {
        uint64_t v23 = 0xFFFFFFFFLL;
LABEL_29:
        uint64_t v24 = v19 + 2;
        if (*((_WORD *)v19 + 12) != 1) {
          uint64_t v24 = (void *)*v24;
        }
        this = physx::Sq::SceneQueryManager::markForUpdate(v16 + 1080, *((_DWORD *)v19 + 8), v24[v23], a3);
        goto LABEL_32;
      }
      int v21 = (uint64_t *)*v19;
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    while (v21[v22] != this)
    {
      if (v20 == ++v22) {
        goto LABEL_29;
      }
    }
    uint64_t v23 = v22;
    goto LABEL_29;
  }
LABEL_32:
  if (v19[5])
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 236, a2, a7, a8, a9, v27);
    uint64_t v25 = v19[5];
    uint64_t v26 = *(void *)(v11 + 40);
    return physx::Sq::PruningStructure::invalidate(v25, v26);
  }
  return this;
}

uint64_t physx::NpShape::getGeometryType(physx::NpShape *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t physx::NpShape::setGeometry(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 152))
  {
    uint64_t v11 = a1 + 48;
    physx::NpShape::decMeshRefCount((physx::NpShape *)a1);
    int v13 = *(_DWORD *)(a1 + 56) >> 30;
    if (v13 == 2)
    {
      uint64_t v14 = *(void **)v11;
      if (*(unsigned char *)(*(void *)v11 + 7689)) {
        goto LABEL_9;
      }
    }
    else
    {
      if (v13 == 3)
      {
        uint64_t v14 = *(void **)v11;
LABEL_9:
        physx::Scb::Scene::scheduleForUpdate(v14, v11, v12);
        unsigned int v17 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v17 | 1;
        uint64_t v18 = *(void *)(a1 + 64);
        if (!v18)
        {
          physx::Scb::Scene::getStream(*(void *)(a1 + 48), HIBYTE(v17) & 0xF);
          *(void *)(a1 + 64) = v18;
        }
        physx::Gu::GeometryUnion::set(v18 + 64, a2);
LABEL_17:
        uint64_t MeshRefCountable = physx::NpShape::getMeshRefCountable((physx::NpShape *)a1);
        if (MeshRefCountable) {
          atomic_fetch_add((atomic_uint *volatile)(MeshRefCountable + 8), 1u);
        }
        return physx::NpShape::updateSQ(a1, "PxShape::setGeometry: Shape is a part of pruning structure, pruning structure is now invalid!", v29, v23, v24, v25, v26, v27, v28);
      }
      uint64_t v14 = *(void **)v11;
      if (!*(void *)v11)
      {
        uint64_t v19 = a1 + 80;
        physx::Sc::ShapeCore::setGeometry(a1 + 80, a2);
LABEL_15:
        uint64_t v21 = *(void *)(a1 + 40);
        if (v21)
        {
          int v31 = 1;
          char v30 = 0;
          physx::Sc::RigidCore::onShapeChange((void *)(v21 + 128), v19, &v31, &v30, 0, v20);
        }
        goto LABEL_17;
      }
    }
    uint64_t v19 = a1 + 80;
    (*(void (**)(void, uint64_t))(**(void **)(v14[232] + 1776) + 96))(*(void *)(v14[232] + 1776), a1 + 112);
    physx::Sc::ShapeCore::setGeometry(a1 + 80, a2);
    (*(void (**)(void, uint64_t))(**(void **)(v14[232] + 1776) + 88))(*(void *)(v14[232] + 1776), a1 + 112);
    goto LABEL_15;
  }
  uint64_t v15 = physx::shdfnd::Foundation::mInstance;
  return physx::shdfnd::Foundation::error(v15, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 258, "PxShape::setGeometry(): Invalid geometry type. Changing the type of the shape is not supported.", a6, a7, a8, a9);
}

__n128 physx::NpShape::getGeometry@<Q0>(physx::NpShape *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 56)) {
    int v2 = (char *)(*((void *)this + 8) + 64);
  }
  else {
    int v2 = (char *)this + 152;
  }
  long long v3 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *((__n128 *)v2 + 2);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

BOOL physx::NpShape::getBoxGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 152;
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 3)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(v5 + 64);
      uint64_t v3 = v5 + 64;
      int v4 = v6;
    }
    else
    {
      int v4 = 3;
    }
    *(_DWORD *)a2 = v4;
    *(void *)(a2 + 4) = *(void *)(v3 + 4);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
  }
  return v2 == 3;
}

BOOL physx::NpShape::getSphereGeometry(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)(a1 + 152);
  int v2 = *(_DWORD *)(a1 + 152);
  if (!v2)
  {
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v3 = (void *)(*(void *)(a1 + 64) + 64);
    }
    *a2 = *v3;
  }
  return v2 == 0;
}

BOOL physx::NpShape::getCapsuleGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 152;
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 2)
  {
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v3 = *(void *)(a1 + 64) + 64;
    }
    uint64_t v4 = *(void *)v3;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
    *(void *)a2 = v4;
  }
  return v2 == 2;
}

BOOL physx::NpShape::getPlaneGeometry(uint64_t a1, int *a2)
{
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 1)
  {
    if (*(unsigned char *)(a1 + 56)) {
      int v3 = *(_DWORD *)(*(void *)(a1 + 64) + 64);
    }
    else {
      int v3 = 1;
    }
    *a2 = v3;
  }
  return v2 == 1;
}

BOOL physx::NpShape::getConvexMeshGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 152;
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 4)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(v5 + 64);
      uint64_t v3 = v5 + 64;
      int v4 = v6;
    }
    else
    {
      int v4 = 4;
    }
    *(_DWORD *)a2 = v4;
    *(_OWORD *)(a2 + 4) = *(_OWORD *)(v3 + 4);
    *(void *)(a2 + 20) = *(void *)(v3 + 20);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
    *(void *)(a2 + 32) = *(void *)(v3 + 32);
    *(unsigned char *)(a2 + 40) = *(unsigned char *)(v3 + 40);
    __int16 v7 = *(_WORD *)(v3 + 41);
    *(unsigned char *)(a2 + 43) = *(unsigned char *)(v3 + 43);
    *(_WORD *)(a2 + 41) = v7;
  }
  return v2 == 4;
}

BOOL physx::NpShape::getTriangleMeshGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 152;
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 5)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(v5 + 64);
      uint64_t v3 = v5 + 64;
      int v4 = v6;
    }
    else
    {
      int v4 = 5;
    }
    *(_DWORD *)a2 = v4;
    *(_OWORD *)(a2 + 4) = *(_OWORD *)(v3 + 4);
    *(void *)(a2 + 20) = *(void *)(v3 + 20);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
    *(unsigned char *)(a2 + 32) = *(unsigned char *)(v3 + 32);
    uint64_t v7 = *(void *)(v3 + 33);
    *(void *)(a2 + 40) = *(void *)(v3 + 40);
    *(void *)(a2 + 33) = v7;
  }
  return v2 == 5;
}

BOOL physx::NpShape::getHeightFieldGeometry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 152;
  int v2 = *(_DWORD *)(a1 + 152);
  if (v2 == 6)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v5 = *(void *)(a1 + 64);
      int v6 = *(_DWORD *)(v5 + 64);
      uint64_t v3 = v5 + 64;
      int v4 = v6;
    }
    else
    {
      int v4 = 6;
    }
    *(_DWORD *)a2 = v4;
    long long v7 = *(_OWORD *)(v3 + 8);
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);
    *(_OWORD *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 28) = *(unsigned char *)(v3 + 28);
    __int16 v8 = *(_WORD *)(v3 + 29);
    *(unsigned char *)(a2 + 31) = *(unsigned char *)(v3 + 31);
    *(_WORD *)(a2 + 29) = v8;
  }
  return v2 == 6;
}

uint64_t physx::NpShape::getActor(physx::NpShape *this)
{
  return *((void *)this + 5);
}

uint64_t physx::NpShape::setLocalPose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10 = a1 + 48;
  LODWORD(a9) = *(_DWORD *)a2;
  float v11 = *(float *)(a2 + 4);
  float v12 = *(float *)(a2 + 8);
  float v13 = *(float *)(a2 + 12);
  float v14 = sqrtf((float)((float)((float)(v11 * v11) + (float)(*(float *)&a9 * *(float *)&a9)) + (float)(v12 * v12))+ (float)(v13 * v13));
  float v15 = *(float *)a2 / v14;
  float v16 = v11 / v14;
  float v17 = v12 / v14;
  float v18 = v13 / v14;
  int v20 = *(_DWORD *)(a2 + 16);
  int v19 = *(_DWORD *)(a2 + 20);
  int v21 = *(_DWORD *)(a2 + 24);
  unsigned int v22 = *(_DWORD *)(a1 + 56);
  unsigned int v23 = v22 >> 30;
  if (v22 >> 30 == 2)
  {
    uint64_t v24 = *(void **)v10;
    if (*(unsigned char *)(*(void *)v10 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v23 == 3)
  {
    uint64_t v24 = *(void **)v10;
LABEL_5:
    uint64_t v25 = *(void *)(a1 + 64);
    if (!v25)
    {
      *(void *)&a9 = physx::Scb::Scene::getStream((uint64_t)v24, HIBYTE(v22) & 0xF).n128_u64[0];
      uint64_t v25 = v26;
      *(void *)(a1 + 64) = v26;
      uint64_t v24 = *(void **)(a1 + 48);
    }
    *(float *)uint64_t v25 = v15;
    *(float *)(v25 + 4) = v16;
    *(float *)(v25 + 8) = v17;
    *(float *)(v25 + 12) = v18;
    *(_DWORD *)(v25 + 16) = v20;
    *(_DWORD *)(v25 + 20) = v19;
    *(_DWORD *)(v25 + 24) = v21;
    physx::Scb::Scene::scheduleForUpdate(v24, v10, *(int8x8_t *)&a9);
    *(_DWORD *)(a1 + 56) |= 4u;
    goto LABEL_11;
  }
  char v27 = *(unsigned char *)(a1 + 144);
  *(float *)(a1 + 112) = v15;
  *(float *)(a1 + 116) = v16;
  *(float *)(a1 + 120) = v17;
  *(float *)(a1 + 124) = v18;
  *(_DWORD *)(a1 + 128) = v20;
  *(_DWORD *)(a1 + 132) = v19;
  *(_DWORD *)(a1 + 136) = v21;
  uint64_t v28 = *(void *)(a1 + 40);
  if (v28 && v23 != 1)
  {
    int v31 = 4;
    char v30 = v27;
    physx::Sc::RigidCore::onShapeChange((void *)(v28 + 128), a1 + 80, &v31, &v30, 0, *(int8x8_t *)&a9);
  }
LABEL_11:
  return physx::NpShape::updateSQ(a1, "PxShape::setLocalPose: Shape is a part of pruning structure, pruning structure is now invalid!", *(int8x8_t *)&a9, a3, a4, a5, a6, a7, a8);
}

float physx::NpShape::getLocalPose@<S0>(physx::NpShape *this@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)this + 56) & 4) != 0) {
    int v2 = (char *)*((void *)this + 8);
  }
  else {
    int v2 = (char *)this + 112;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = *((void *)v2 + 2);
  float result = *((float *)v2 + 6);
  *(float *)(a2 + 24) = result;
  return result;
}

void physx::NpShape::setSimulationFilterData(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 48;
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  unsigned int v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    long long v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 == 3)
  {
    long long v7 = *(void **)v4;
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 64);
    if (!v8)
    {
      physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF);
      uint64_t v8 = v9;
      *(void *)(a1 + 64) = v9;
      long long v7 = *(void **)(a1 + 48);
    }
    long long v10 = *a2;
    *(_OWORD *)(v8 + 28) = *a2;
    physx::Scb::Scene::scheduleForUpdate(v7, v4, *(int8x8_t *)&v10);
    *(_DWORD *)(a1 + 56) |= 8u;
    return;
  }
  char v11 = *(unsigned char *)(a1 + 144);
  long long v12 = *a2;
  *(_OWORD *)(a1 + 96) = *a2;
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    float v14 = (void *)(v13 + 128);
    if (v6 != 1)
    {
      int v16 = 8;
      char v15 = v11;
      physx::Sc::RigidCore::onShapeChange(v14, a1 + 80, &v16, &v15, 0, *(int8x8_t *)&v12);
    }
  }
}

__n128 physx::NpShape::getSimulationFilterData@<Q0>(physx::NpShape *this@<X0>, __n128 *a2@<X8>)
{
  if ((*((unsigned char *)this + 56) & 8) != 0) {
    int v2 = (__n128 *)(*((void *)this + 8) + 28);
  }
  else {
    int v2 = (__n128 *)((char *)this + 96);
  }
  __n128 result = *v2;
  *a2 = *v2;
  return result;
}

__n128 physx::NpShape::setQueryFilterData(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[5] = *a2;
  return result;
}

__n128 physx::NpShape::getQueryFilterData@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[5];
  *a2 = result;
  return result;
}

void physx::NpShape::setMaterials(physx::NpShape *this, physx::PxMaterial *const *a2, unsigned int a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unsigned int v6 = *((_DWORD *)this + 14);
  if ((v6 & 2) != 0)
  {
    uint64_t v9 = (char *)(*((void *)this + 8) + 148);
  }
  else
  {
    int v7 = *((_DWORD *)this + 38);
    if ((v7 - 7) <= 0xFFFFFFFD)
    {
      BOOL v42 = 0;
      LODWORD(v8) = 1;
      goto LABEL_10;
    }
    if (v7 == 5) {
      uint64_t v9 = (char *)this + 224;
    }
    else {
      uint64_t v9 = (char *)this + 200;
    }
  }
  unint64_t v8 = *(unsigned __int16 *)v9;
  BOOL v42 = v8 > 0x80;
  if (v8 >= 0x81)
  {
    long long v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v43, 8 * v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 410);
    unsigned int v6 = *((_DWORD *)this + 14);
    int v12 = 1;
    goto LABEL_11;
  }
LABEL_10:
  MEMORY[0x270FA5388](this);
  long long v10 = (void **)((char *)&v41 - v13);
  bzero((char *)&v41 - v13, v14);
  int v12 = 0;
LABEL_11:
  char v15 = (char *)this + 48;
  v41 = v10;
  if ((v6 & 2) != 0)
  {
    uint64_t v19 = *((void *)this + 8);
    LODWORD(v18) = *(unsigned __int16 *)(v19 + 148);
    if (v18 == 1) {
      float v17 = (unsigned __int16 *)(v19 + 144);
    }
    else {
      float v17 = (unsigned __int16 *)(*(void *)(*(void *)v15 + 7792) + 2 * *(unsigned int *)(v19 + 144));
    }
  }
  else
  {
    int v16 = *((_DWORD *)this + 38);
    if ((v16 - 7) >= 0xFFFFFFFE)
    {
      BOOL v20 = v16 == 5;
      uint64_t v21 = 192;
      if (v20) {
        uint64_t v21 = 216;
      }
      float v17 = *(unsigned __int16 **)((char *)this + v21);
      uint64_t v18 = 200;
      if (v20) {
        uint64_t v18 = 224;
      }
      LODWORD(v18) = *(unsigned __int16 *)((char *)this + v18);
    }
    else
    {
      float v17 = (unsigned __int16 *)((char *)this + 146);
      LODWORD(v18) = 1;
    }
  }
  if (v18 >= v8) {
    uint64_t v18 = v8;
  }
  else {
    uint64_t v18 = v18;
  }
  if (v18)
  {
    uint64_t v22 = physx::NpPhysics::mInstance;
    unsigned int v23 = v10;
    do
    {
      unsigned int v24 = *v17++;
      *v23++ = *(void *)(*(void *)(v22 + 56) + 8 * v24);
      --v18;
    }
    while (v18);
  }
  if (v6 >> 30 != 3 && (v6 >> 30 != 2 || !*(unsigned char *)(*(void *)v15 + 7689)))
  {
    if (!physx::Scb::Shape::setMaterialsHelper((physx::NpShape *)((char *)this + 48), a2, a3)) {
      goto LABEL_50;
    }
    if (a3) {
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  uint64_t v25 = *((void *)this + 8);
  if (!v25)
  {
    int8x8_t v11 = (int8x8_t)physx::Scb::Scene::getStream(*((void *)this + 6), HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v25 = v26;
    *((void *)this + 8) = v26;
  }
  if (a3 == 1)
  {
    char v27 = (_WORD *)(v25 + 144);
    *(_WORD *)(v25 + 148) = 1;
  }
  else
  {
    uint64_t v29 = *(void *)v15;
    uint64_t v30 = *(void *)v15 + 7792;
    uint64_t v31 = *(unsigned int *)(*(void *)v15 + 7800);
    __int16 v43 = 0;
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize(v30, v31 + a3, &v43);
    uint64_t v32 = *(void *)(v29 + 7792);
    *(_DWORD *)(v25 + 144) = v31;
    *(_WORD *)(v25 + 148) = a3;
    if (!a3) {
      goto LABEL_42;
    }
    char v27 = (_WORD *)(v32 + 2 * v31);
  }
  uint64_t v33 = a3;
  double v34 = a2;
  do
  {
    uint64_t v35 = (uint64_t)*v34++;
    *v27++ = *(_WORD *)(v35 + 72);
    --v33;
  }
  while (v33);
LABEL_42:
  physx::Scb::Scene::scheduleForUpdate(*((void **)this + 6), (uint64_t)this + 48, v11);
  *((_DWORD *)this + 14) |= 2u;
  if (a3)
  {
LABEL_43:
    uint64_t v36 = a3;
    do
    {
      uint64_t v37 = (uint64_t)*a2++;
      atomic_fetch_add((atomic_uint *volatile)(v37 + 32), 1u);
      --v36;
    }
    while (v36);
  }
LABEL_45:
  if (!v8) {
    return;
  }
  uint64_t v38 = v8;
  unsigned int v39 = v10;
  do
  {
    uint64_t v40 = *v39;
    if (atomic_fetch_add((atomic_uint *volatile)(*v39 + 32), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 + 24) + 16))(v40 + 24, v28);
    }
    ++v39;
    --v38;
  }
  while (v38);
LABEL_50:
  if (v12) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v41, v10);
  }
}

uint64_t physx::NpShape::getNbMaterials(physx::NpShape *this)
{
  if ((*((unsigned char *)this + 56) & 2) != 0) {
    return *(unsigned __int16 *)(*((void *)this + 8) + 148);
  }
  int v1 = *((_DWORD *)this + 38);
  if ((v1 - 7) < 0xFFFFFFFE) {
    return 1;
  }
  BOOL v3 = v1 == 5;
  uint64_t v4 = 200;
  if (v3) {
    uint64_t v4 = 224;
  }
  return *(unsigned __int16 *)((char *)this + v4);
}

uint64_t physx::NpShape::getMaterials(physx::NpShape *this, physx::PxMaterial **a2, unsigned int a3, int a4)
{
  if ((*((unsigned char *)this + 56) & 2) != 0)
  {
    uint64_t v7 = *((void *)this + 8);
    int v6 = *(unsigned __int16 *)(v7 + 148);
    if (v6 == 1) {
      unsigned int v5 = (char *)(v7 + 144);
    }
    else {
      unsigned int v5 = (char *)(*(void *)(*((void *)this + 6) + 7792) + 2 * *(unsigned int *)(v7 + 144));
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 38);
    if ((v4 - 7) >= 0xFFFFFFFE)
    {
      BOOL v8 = v4 == 5;
      uint64_t v9 = 192;
      if (v8) {
        uint64_t v9 = 216;
      }
      unsigned int v5 = *(char **)((char *)this + v9);
      uint64_t v10 = 200;
      if (v8) {
        uint64_t v10 = 224;
      }
      int v6 = *(unsigned __int16 *)((char *)this + v10);
    }
    else
    {
      unsigned int v5 = (char *)this + 146;
      int v6 = 1;
    }
  }
  unsigned int v11 = (v6 - a4) & ~((v6 - a4) >> 31);
  if (v11 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v11;
  }
  if (result)
  {
    uint64_t v13 = physx::NpPhysics::mInstance;
    size_t v14 = &v5[2 * a4];
    uint64_t v15 = result;
    do
    {
      unsigned int v16 = *(unsigned __int16 *)v14;
      v14 += 2;
      *a2++ = *(physx::PxMaterial **)(*(void *)(v13 + 56) + 8 * v16);
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t physx::NpShape::getMaterialFromInternalFaceIndex(physx::NpShape *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(physx::NpShape *))(*(void *)this + 64))(this);
  int v5 = (*(uint64_t (**)(physx::NpShape *))(*(void *)this + 64))(this);
  BOOL v10 = v4 == 6 || v5 == 5;
  if (a2 == -1 && v10)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 447, "PxShape::getMaterialFromInternalFaceIndex received 0xFFFFffff as input - returning NULL.", v6, v7, v8, v20);
    return 0;
  }
  else
  {
    if (v4 == 6)
    {
      int v20 = 6;
      *(void *)&v21[4] = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&v21[12] = _D0;
      v22[0] = 1065353216;
      (*(void (**)(physx::NpShape *, int *))(*(void *)this + 136))(this, &v20);
      int v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)&v21[4] + 136))(*(void *)&v21[4], a2);
    }
    else if (v5 == 5 {
           && (int v20 = 5,
    }
               *(_OWORD *)uint64_t v21 = xmmword_2343679C0,
               *(_DWORD *)&v21[16] = 0,
               LODWORD(v22[0]) = 0,
               *(void *)((char *)v22 + 4) = 1065353216,
               unsigned int v23 = 0,
               (*(void (**)(physx::NpShape *, int *))(*(void *)this + 128))(this, &v20),
               v23[12]))
    {
      int v16 = (*(uint64_t (**)(void *, uint64_t))(*v23 + 112))(v23, a2);
    }
    else
    {
      int v16 = 0;
    }
    if ((*((unsigned char *)this + 56) & 2) != 0)
    {
      uint64_t v19 = *((void *)this + 8);
      if (*(_WORD *)(v19 + 148) == 1) {
        uint64_t v18 = (char *)(v19 + 144);
      }
      else {
        uint64_t v18 = (char *)(*(void *)(*((void *)this + 6) + 7792) + 2 * *(unsigned int *)(v19 + 144));
      }
    }
    else
    {
      int v17 = *((_DWORD *)this + 38);
      if ((v17 - 7) > 0xFFFFFFFD)
      {
        if (v17 == 5) {
          uint64_t v18 = (char *)*((void *)this + 27);
        }
        else {
          uint64_t v18 = (char *)*((void *)this + 24);
        }
      }
      else
      {
        uint64_t v18 = (char *)this + 146;
      }
    }
    return *(void *)(*(void *)(physx::NpPhysics::mInstance + 56) + 8 * *(unsigned __int16 *)&v18[2 * v16]);
  }
}

void physx::NpShape::setContactOffset(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  int v4 = (char *)this + 48;
  unsigned int v5 = *((_DWORD *)this + 14);
  unsigned int v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 == 3)
  {
    uint64_t v7 = *(void **)v4;
LABEL_5:
    uint64_t v8 = *((void *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *((void *)this + 8) = v9;
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *(_DWORD *)(v8 + 44) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, (uint64_t)v4, a2);
    *((_DWORD *)this + 14) |= 0x10u;
    return;
  }
  char v10 = *((unsigned char *)this + 144);
  *((_DWORD *)this + 35) = a2.i32[0];
  uint64_t v11 = *((void *)this + 5);
  if (v11)
  {
    int v12 = (void *)(v11 + 128);
    if (v6 != 1)
    {
      int v14 = 16;
      char v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getContactOffset(physx::NpShape *this)
{
  if ((*((unsigned char *)this + 56) & 0x10) != 0) {
    int v1 = (char *)(*((void *)this + 8) + 44);
  }
  else {
    int v1 = (char *)this + 140;
  }
  return *(float *)v1;
}

void physx::NpShape::setRestOffset(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  int v4 = (char *)this + 48;
  unsigned int v5 = *((_DWORD *)this + 14);
  unsigned int v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 == 3)
  {
    uint64_t v7 = *(void **)v4;
LABEL_5:
    uint64_t v8 = *((void *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *((void *)this + 8) = v9;
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *(_DWORD *)(v8 + 48) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, (uint64_t)v4, a2);
    *((_DWORD *)this + 14) |= 0x20u;
    return;
  }
  char v10 = *((unsigned char *)this + 144);
  *((_DWORD *)this + 60) = a2.i32[0];
  uint64_t v11 = *((void *)this + 5);
  if (v11)
  {
    int v12 = (void *)(v11 + 128);
    if (v6 != 1)
    {
      int v14 = 32;
      char v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getRestOffset(physx::NpShape *this)
{
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
    int v1 = (char *)(*((void *)this + 8) + 48);
  }
  else {
    int v1 = (char *)this + 240;
  }
  return *(float *)v1;
}

void physx::NpShape::setTorsionalPatchRadius(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  int v4 = (char *)this + 48;
  unsigned int v5 = *((_DWORD *)this + 14);
  unsigned int v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 == 3)
  {
    uint64_t v7 = *(void **)v4;
LABEL_5:
    uint64_t v8 = *((void *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *((void *)this + 8) = v9;
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *(_DWORD *)(v8 + 56) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, (uint64_t)v4, a2);
    *((_DWORD *)this + 14) |= 0x80u;
    return;
  }
  char v10 = *((unsigned char *)this + 144);
  *((_DWORD *)this + 61) = a2.i32[0];
  uint64_t v11 = *((void *)this + 5);
  if (v11)
  {
    int v12 = (void *)(v11 + 128);
    if (v6 != 1)
    {
      int v14 = 128;
      char v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getTorsionalPatchRadius(physx::NpShape *this)
{
  if ((*((unsigned char *)this + 56) & 0x80) != 0) {
    int v1 = (char *)(*((void *)this + 8) + 56);
  }
  else {
    int v1 = (char *)this + 244;
  }
  return *(float *)v1;
}

void physx::NpShape::setMinTorsionalPatchRadius(physx::NpShape *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  int v4 = (char *)this + 48;
  unsigned int v5 = *((_DWORD *)this + 14);
  unsigned int v6 = v5 >> 30;
  if (v5 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 == 3)
  {
    uint64_t v7 = *(void **)v4;
LABEL_5:
    uint64_t v8 = *((void *)this + 8);
    if (!v8)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *((void *)this + 8) = v9;
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *(_DWORD *)(v8 + 60) = v2;
    physx::Scb::Scene::scheduleForUpdate(v7, (uint64_t)v4, a2);
    *((_DWORD *)this + 14) |= 0x100u;
    return;
  }
  char v10 = *((unsigned char *)this + 144);
  *((_DWORD *)this + 62) = a2.i32[0];
  uint64_t v11 = *((void *)this + 5);
  if (v11)
  {
    int v12 = (void *)(v11 + 128);
    if (v6 != 1)
    {
      int v14 = 256;
      char v13 = v10;
      physx::Sc::RigidCore::onShapeChange(v12, (uint64_t)this + 80, &v14, &v13, 0, a2);
    }
  }
}

float physx::NpShape::getMinTorsionalPatchRadius(physx::NpShape *this)
{
  if (*((unsigned char *)this + 57)) {
    int v1 = (char *)(*((void *)this + 8) + 60);
  }
  else {
    int v1 = (char *)this + 248;
  }
  return *(float *)v1;
}

void physx::NpShape::setFlagsInternal(uint64_t a1, char *a2, float32x4_t a3, int8x16_t a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  unsigned int v17 = *(_DWORD *)(a1 + 152) - 7;
  int v18 = *a2;
  if (v17 >= 0xFFFFFFFE && (v18 & 4) != 0)
  {
    int v20 = "PxShape::setFlag(s): triangle mesh and heightfield triggers are not supported!";
    uint64_t v21 = physx::shdfnd::Foundation::mInstance;
    uint64_t v22 = 545;
LABEL_8:
    physx::shdfnd::Foundation::error(v21, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", v22, v20, a14, a15, a16, a17);
    return;
  }
  if ((~v18 & 5) == 0)
  {
    int v20 = "PxShape::setFlag(s): shapes cannot simultaneously be trigger shapes and simulation shapes.";
    uint64_t v21 = physx::shdfnd::Foundation::mInstance;
    uint64_t v22 = 552;
    goto LABEL_8;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x40) != 0) {
    uint64_t v25 = (unsigned __int8 *)(*(void *)(a1 + 64) + 52);
  }
  else {
    uint64_t v25 = (unsigned __int8 *)(a1 + 144);
  }
  unsigned int v26 = *v25;
  char v27 = *(unsigned __int16 **)(a1 + 40);
  if (v27)
  {
    int v28 = v27[4];
    if (v28 == 5)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v27 + 432))(&v56);
      char v29 = v56 & 1;
    }
    else
    {
      char v29 = 0;
    }
    if ((v18 & 1) != 0
      && v28 != 6
      && (v29 & 1) == 0
      && (v26 & 1) == 0
      && (v17 > 0xFFFFFFFD || *(_DWORD *)(a1 + 152) == 1))
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 576, "PxShape::setFlag(s): triangle mesh, heightfield and plane shapes can only be simulation shapes if part of a PxRigidStatic!", a14, a15, a16, v55);
      return;
    }
  }
  uint64_t v30 = a1 + 48;
  char v31 = *a2;
  unsigned int v32 = *(_DWORD *)(a1 + 56);
  unsigned int v33 = v32 >> 30;
  if (v32 >> 30 == 2)
  {
    double v34 = *(void **)v30;
    if (*(unsigned char *)(*(void *)v30 + 7689)) {
      goto LABEL_29;
    }
  }
  else if (v33 == 3)
  {
    double v34 = *(void **)v30;
LABEL_29:
    uint64_t v35 = *(void *)(a1 + 64);
    if (!v35)
    {
      a3.i64[0] = physx::Scb::Scene::getStream((uint64_t)v34, HIBYTE(v32) & 0xF).n128_u64[0];
      uint64_t v35 = v36;
      *(void *)(a1 + 64) = v36;
      double v34 = *(void **)(a1 + 48);
    }
    *(unsigned char *)(v35 + 52) = v31;
    physx::Scb::Scene::scheduleForUpdate(v34, a1 + 48, *(int8x8_t *)a3.f32);
    *(_DWORD *)(a1 + 56) |= 0x40u;
    goto LABEL_35;
  }
  char v37 = *(unsigned char *)(a1 + 144);
  *(unsigned char *)(a1 + 144) = v31;
  uint64_t v38 = *(void *)(a1 + 40);
  if (v38)
  {
    unsigned int v39 = (void *)(v38 + 128);
    if (v33 != 1)
    {
      *(_DWORD *)((char *)&v56 + 2) = 64;
      BYTE1(v56) = v37;
      physx::Sc::RigidCore::onShapeChange(v39, a1 + 80, (int *)((char *)&v56 + 2), (char *)&v56 + 1, 0, *(int8x8_t *)a3.f32);
    }
  }
LABEL_35:
  if (((v26 >> 1) & 1) == (v31 & 2) >> 1) {
    return;
  }
  uint64_t v40 = *(unsigned __int16 **)(a1 + 40);
  if (!v40) {
    return;
  }
  uint64_t v41 = v40[4];
  BOOL v42 = (char *)v40 + *((void *)&physx::NpActor::sLazyInitOffsets + v41 + 18);
  if (((*((_DWORD *)v42 + 2) >> 30) - 1) > 1)
  {
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v43 = *(void *)v42;
    if (v43) {
      uint64_t v44 = v43 - 16;
    }
    else {
      uint64_t v44 = 0;
    }
  }
  if (v41 == 5) {
    float v45 = v40 + 20;
  }
  else {
    float v45 = 0;
  }
  if (v41 == 6) {
    float v45 = v40 + 20;
  }
  if (v41 == 13) {
    v46 = v40 + 20;
  }
  else {
    v46 = v45;
  }
  if (!v44) {
    goto LABEL_74;
  }
  v47 = (physx::Sq::SceneQueryManager *)(v44 + 8640);
  uint64_t v48 = v46[4];
  float v49 = v46;
  if ((v31 & 2) == 0)
  {
    if (v48 != 1)
    {
      if (!v46[4])
      {
        uint64_t v52 = 0xFFFFFFFFLL;
LABEL_69:
        float v53 = v46 + 8;
        float v54 = v46 + 8;
        if (v46[12] != 1) {
          float v54 = (void *)*v53;
        }
        physx::Sq::SceneQueryManager::removePrunerShape(v47, *((unsigned int *)v46 + 8), v54[v52]);
        if (v46[12] != 1) {
          float v53 = (void *)*v53;
        }
        v53[v52] = 0xFFFFFFFFLL;
        goto LABEL_74;
      }
      float v49 = *(unsigned __int16 **)v46;
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0xFFFFFFFFLL;
    while (*(void *)&v49[4 * v51] != a1)
    {
      if (v48 == ++v51) {
        goto LABEL_69;
      }
    }
    uint64_t v52 = v51;
    goto LABEL_69;
  }
  if (v48 == 1) {
    goto LABEL_55;
  }
  if (v46[4])
  {
    float v49 = *(unsigned __int16 **)v46;
LABEL_55:
    uint64_t v50 = 0;
    while (*(void *)&v49[4 * v50] != a1)
    {
      if (v48 == ++v50) {
        goto LABEL_58;
      }
    }
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v50) = -1;
LABEL_59:
  physx::NpShapeManager::setupSceneQuery((physx::NpShapeManager *)v46, v47, (const physx::PxRigidActor *)v40, v50, a3, a4, a5, a6, a7, a8, a9, a10, a13, a14, a15, a16);
LABEL_74:
  if (*((void *)v46 + 5))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShape.cpp", 602, "PxShape::setFlag: Shape is a part of pruning structure, pruning structure is now invalid!", a14, a15, a16, v55);
    physx::Sq::PruningStructure::invalidate(*((void *)v46 + 5), *(void *)(a1 + 40));
  }
}

void physx::NpShape::setFlag(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  if ((*(unsigned char *)(a1 + 56) & 0x40) != 0) {
    int v16 = (char *)(*(void *)(a1 + 64) + 52);
  }
  else {
    int v16 = (char *)(a1 + 144);
  }
  char v17 = *v16;
  char v18 = v17 | a2;
  char v19 = v17 & ~a2;
  if (a3) {
    char v19 = v18;
  }
  char v21 = v19;
  physx::NpShape::setFlagsInternal(a1, &v21, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, v20);
}

void physx::NpShape::setFlags(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  char v17 = *a2;
  physx::NpShape::setFlagsInternal(a1, &v17, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, v16);
}

uint64_t physx::NpShape::getFlags@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(this + 56) & 0x40) != 0) {
    __int32 v2 = (unsigned char *)(*(void *)(this + 64) + 52);
  }
  else {
    __int32 v2 = (unsigned char *)(this + 144);
  }
  *a2 = *v2;
  return this;
}

uint64_t physx::NpShape::isExclusive(physx::NpShape *this)
{
  return *((_DWORD *)this + 66) >> 31;
}

uint64_t physx::NpShape::setName(uint64_t this, const char *a2)
{
  *(void *)(this + 256) = a2;
  return this;
}

uint64_t physx::NpShape::getName(physx::NpShape *this)
{
  return *((void *)this + 32);
}

uint64_t physx::NpShape::getMeshRefCountable(physx::NpShape *this)
{
  int v1 = (void *)((char *)this + 152);
  int v2 = *((_DWORD *)this + 38);
  switch(v2)
  {
    case 6:
      if (*((unsigned char *)this + 56)) {
        int v1 = (void *)(*((void *)this + 8) + 64);
      }
      uint64_t v3 = v1[1];
      break;
    case 5:
      if (*((unsigned char *)this + 56)) {
        int v1 = (void *)(*((void *)this + 8) + 64);
      }
      uint64_t v3 = v1[5];
      break;
    case 4:
      if (*((unsigned char *)this + 56)) {
        int v1 = (void *)(*((void *)this + 8) + 64);
      }
      uint64_t v3 = v1[4];
      break;
    default:
      return 0;
  }
  if (v3) {
    return v3 + 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpShapeManager::exportExtraData(uint64_t a1, uint64_t a2)
{
  uint64_t result = physx::Cm::PtrTable::exportExtraData(a1, a2);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  if (v5 >= 2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    do
    {
      uint64_t v6 = 0xFFFFFFFFLL;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 16))(a2, &v6, 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::NpShapeManager::importExtraData(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(result + 8);
  if (v2 >= 2)
  {
    unint64_t v3 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v3 + 8 * v2;
    *(void *)uint64_t result = v3;
  }
  unint64_t v4 = *(unsigned __int16 *)(result + 24);
  if (v4 >= 2)
  {
    unint64_t v5 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v5 + 8 * v4;
    *(void *)(result + 16) = v5;
  }
  return result;
}

uint64_t physx::NpShapeManager::attachShape(physx::NpShapeManager *this, physx::NpShape *a2, physx::PxRigidActor *a3)
{
  uint64_t v6 = *(uint64_t (****)(void, uint64_t))(physx::NpFactory::mInstance + 832);
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  physx::Cm::PtrTable::add((uint64_t)this, (uint64_t)a2, v6);
  physx::Cm::PtrTable::add((uint64_t)this + 16, 0xFFFFFFFFLL, v6);
  uint64_t v20 = *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  if (((*(_DWORD *)((char *)a3 + v20 + 8) >> 30) - 1) <= 1)
  {
    uint64_t v21 = *(void *)((char *)a3 + v20);
    if (v21)
    {
      uint64_t v22 = (unsigned char *)(*((void *)a2 + 8) + 52);
      if ((*((unsigned char *)a2 + 56) & 0x40) == 0) {
        uint64_t v22 = (char *)a2 + 144;
      }
      if ((*v22 & 2) != 0)
      {
        physx::NpShapeManager::setupSceneQuery(this, (physx::Sq::SceneQueryManager *)(v21 + 8624), a3, v7, v12, v13, v14, v15, v16, v17, v18, v19, v8, v9, v10, v11);
        uint64_t v20 = *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
      }
    }
  }
  uint64_t result = physx::Scb::RigidObject::onShapeAttach((uint64_t)a3 + v20, (physx::NpShape *)((char *)a2 + 48), *(int8x8_t *)v12.f32);
  atomic_fetch_add((atomic_uint *volatile)a2 + 8, 1u);
  if ((*((_DWORD *)a2 + 66) & 0x80000000) != 0) {
    *((void *)a2 + 5) = a3;
  }
  atomic_fetch_add((atomic_uint *volatile)a2 + 66, 1u);
  return result;
}

uint64_t physx::NpShapeManager::setupSceneQuery(physx::NpShapeManager *this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3, unsigned int a4, float32x4_t a5, int8x16_t a6, double a7, double a8, double a9, double a10, double a11, int32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  double v17 = this;
  if (*((_WORD *)this + 4) != 1) {
    double v17 = *(physx::NpShapeManager **)this;
  }
  uint64_t v18 = a4;
  uint64_t result = physx::Sq::SceneQueryManager::addPrunerShape((uint64_t)a2, *((void *)v17 + a4) + 48, (uint64_t)a3 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18), (*((_WORD *)a3 + 4) & 0xFFF7) == 5, *((unsigned int *)this + 8), 0, 0, a16, a5, a6, a7, a8, a9, a10, a11, a12);
  uint64_t v20 = (void *)((char *)this + 16);
  if (*((_WORD *)this + 12) != 1) {
    uint64_t v20 = (void *)*v20;
  }
  v20[v18] = result;
  return result;
}

uint64_t physx::Scb::RigidObject::onShapeAttach(uint64_t this, physx::Scb::Shape *a2, int8x8_t a3)
{
  unint64_t v3 = *(unsigned int *)(this + 8);
  if (v3 >> 30)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(void *)this;
    if (*(unsigned char *)(*(void *)this + 7689))
    {
      if (v3 >> 30 != 1)
      {
        uint64_t v7 = *(void *)(this + 16);
        if (!v7)
        {
          a3 = (int8x8_t)physx::Scb::Scene::getStream(v6, BYTE3(v3) & 0xF).n128_u64[0];
          *(void *)(v5 + 16) = v7;
        }
        uint64_t v8 = *(unsigned int *)(v7 + 144);
        if (v8)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(physx::Scb::Shape ***)(v7 + 136);
          while (*v10 != a2)
          {
            ++v9;
            v10 += 2;
            if (v8 == v9) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          LODWORD(v9) = 0;
        }
        if (v9 == v8)
        {
LABEL_21:
          uint64_t v21 = a2;
          uint64_t v15 = *(unsigned int *)(v7 + 56);
          if ((*(_DWORD *)(v7 + 60) & 0x7FFFFFFFu) <= v15)
          {
            physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::growAndPushBack(v7 + 8, &v21);
          }
          else
          {
            *(void *)(*(void *)(v7 + 48) + 8 * v15) = a2;
            *(_DWORD *)(v7 + 56) = v15 + 1;
          }
        }
        else
        {
          uint64_t v16 = *(void *)(v7 + 136);
          unsigned int v17 = v8 - 1;
          *(_DWORD *)(v7 + 144) = v17;
          uint64_t v18 = (uint64_t *)(v16 + 16 * v17);
          uint64_t v19 = *v18;
          uint64_t v20 = v16 + 16 * v9;
          *(unsigned char *)(v20 + 8) = *((unsigned char *)v18 + 8);
          *(void *)uint64_t v20 = v19;
        }
        this = (uint64_t)physx::Scb::Scene::scheduleForUpdate(*(void **)v5, v5, a3);
        *(_DWORD *)(v5 + 8) |= 8u;
      }
      int v13 = *((_DWORD *)a2 + 2);
      if ((v13 & 0xF000000) == 0x1000000)
      {
        unsigned int v14 = 0x40000000;
        goto LABEL_28;
      }
    }
    else
    {
      if (v3) {
        uint64_t v11 = *(unsigned char **)(this + 16);
      }
      else {
        uint64_t v11 = (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + this + 12);
      }
      if ((*v11 & 8) == 0)
      {
        atomic_fetch_add((atomic_uint *volatile)a2 - 4, 1u);
        float32x4_t v12 = *(uint64_t **)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(this + 11) & 0xF) + 3) + this);
        if (v12) {
          this = physx::Sc::Scene::addShape(v12[9], (physx::Sc::RigidSim *)v12, (physx::Scb::Shape *)((char *)a2 + 32), 0);
        }
      }
      int v13 = *((_DWORD *)a2 + 2);
      if ((v13 & 0xF000000) == 0x1000000)
      {
        unsigned int v14 = 0x80000000;
LABEL_28:
        *((_DWORD *)a2 + 2) = v13 & 0x3FFFFFFF | v14;
        *(void *)a2 = v6;
      }
    }
  }
  return this;
}

uint64_t physx::NpShapeManager::detachShape(physx::NpShapeManager *this, physx::NpShape *a2, physx::PxRigidActor *a3, char a4, int8x8_t a5)
{
  uint64_t v9 = *((unsigned __int16 *)this + 4);
  uint64_t v10 = this;
  if (v9 != 1)
  {
    if (!*((_WORD *)this + 4)) {
      return 0;
    }
    uint64_t v10 = *(physx::NpShapeManager **)this;
  }
  uint64_t v11 = 0;
  while (*((physx::NpShape **)v10 + v11) != a2)
  {
    if (v9 == ++v11) {
      return 0;
    }
  }
  if (v11 == -1) {
    return 0;
  }
  float32x4_t v12 = (char *)a3 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  if (((*((_DWORD *)v12 + 2) >> 30) - 1) <= 1)
  {
    uint64_t v13 = *(void *)v12;
    if (v13)
    {
      unsigned int v14 = (unsigned char *)(*((void *)a2 + 8) + 52);
      if ((*((unsigned char *)a2 + 56) & 0x40) == 0) {
        unsigned int v14 = (char *)a2 + 144;
      }
      if ((*v14 & 2) != 0)
      {
        uint64_t v15 = (physx::Sq::SceneQueryManager *)(v13 + 8624);
        uint64_t v16 = (void *)((char *)this + 16);
        if (*((_WORD *)this + 12) != 1) {
          uint64_t v16 = (void *)*v16;
        }
        physx::Sq::SceneQueryManager::removePrunerShape(v15, *((unsigned int *)this + 8), v16[v11]);
        if (*((_DWORD *)this + 8) != -1 && *((_WORD *)this + 4) == 1)
        {
          *((_DWORD *)this + 8) = -1;
          int v17 = *((unsigned __int16 *)a3 + 4);
          if ((v17 & 0xFFFFFFF7) == 5 && (v17 == 13 || v17 == 5)) {
            physx::Sc::BodySim::disableCompound(*((void *)a3 + 16));
          }
        }
      }
    }
  }
  physx::Scb::RigidObject::onShapeDetach((physx::PxRigidActor *)((char *)a3+ *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18)), (physx::NpShape *)((char *)a2 + 48), a4, *((_DWORD *)a2 + 8) == 1, a5);
  uint64_t v18 = *(void *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::replaceWithLast(this, v11, v18);
  physx::Cm::PtrTable::replaceWithLast((void *)this + 2, v11, v18);
  atomic_fetch_add((atomic_uint *volatile)a2 + 66, 0xFFFFFFFF);
  if ((*((_DWORD *)a2 + 66) & 0x80000000) != 0) {
    *((void *)a2 + 5) = 0;
  }
  if (atomic_fetch_add((atomic_uint *volatile)a2 + 8, 0xFFFFFFFF) == 1) {
    (*(void (**)(char *))(*((void *)a2 + 3) + 16))((char *)a2 + 24);
  }
  return 1;
}

void physx::Scb::RigidObject::onShapeDetach(physx::Scb::RigidObject *this, physx::Scb::Shape *a2, char a3, int a4, int8x8_t a5)
{
  unint64_t v5 = *((unsigned int *)this + 2);
  if (v5 >> 30)
  {
    uint64_t v9 = *(void *)this;
    if (*(unsigned char *)(*(void *)this + 7689))
    {
      if (v5 >> 30 != 1)
      {
        uint64_t v11 = *((void *)this + 2);
        if (!v11)
        {
          a5 = (int8x8_t)physx::Scb::Scene::getStream(v9, BYTE3(v5) & 0xF).n128_u64[0];
          *((void *)this + 2) = v11;
          LODWORD(v5) = *((_DWORD *)this + 2);
        }
        if ((v5 & 0x20) != 0)
        {
          int v12 = *(_DWORD *)(v11 + 160);
          if (v12 == 1)
          {
            if (*(physx::Scb::Shape **)(v11 + 152) != a2) {
              goto LABEL_29;
            }
            goto LABEL_27;
          }
          if (!v12)
          {
LABEL_27:
            *(_DWORD *)(v11 + 160) = 0;
LABEL_28:
            *(void *)(v11 + 152) = 0;
            *((_DWORD *)this + 2) &= ~0x20u;
            goto LABEL_29;
          }
          int v15 = 0;
          uint64_t v16 = (void *)(*(void *)(v9 + 7808) + 8 * *(unsigned int *)(v11 + 152));
          int v17 = *(_DWORD *)(v11 + 160);
          do
          {
            if ((physx::Scb::Shape *)v16[v15] == a2) {
              v16[v15] = v16[--v17];
            }
            else {
              ++v15;
            }
            --v12;
          }
          while (v12);
          *(_DWORD *)(v11 + 160) = v15;
          if (!v15) {
            goto LABEL_28;
          }
          if (v15 == 1) {
            *(void *)(v11 + 152) = *v16;
          }
        }
LABEL_29:
        uint64_t v18 = *(unsigned int *)(v11 + 56);
        if (v18)
        {
          uint64_t v19 = 0;
          while (*(physx::Scb::Shape **)(*(void *)(v11 + 48) + 8 * v19) != a2)
          {
            if (v18 == ++v19) {
              goto LABEL_36;
            }
          }
        }
        else
        {
          LODWORD(v19) = 0;
        }
        if (v19 != v18)
        {
          uint64_t v20 = *(void *)(v11 + 48);
          unsigned int v21 = v18 - 1;
          *(_DWORD *)(v11 + 56) = v21;
          *(void *)(v20 + 8 * v19) = *(void *)(v20 + 8 * v21);
          int v22 = *((_DWORD *)a2 + 2);
          if ((v22 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)a2 + 2) = v22 & 0x3FFFFFFF | 0x80000000;
LABEL_49:
            *(void *)a2 = v9;
          }
LABEL_50:
          physx::Scb::Scene::scheduleForUpdate(*(void **)this, (uint64_t)this, a5);
          *((_DWORD *)this + 2) |= 8u;
          return;
        }
LABEL_36:
        if ((*((unsigned char *)this
              + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)this + 11) & 0xF) + 3)
              + 12) & 8) != 0)
        {
          if (a4)
          {
            if ((*((unsigned char *)a2 + 11) & 0x10) != 0)
            {
              *(void *)&long long v25 = a2;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v9 + 7736, (uint64_t *)&v25);
              *((_DWORD *)a2 + 2) &= ~0x10000000u;
            }
LABEL_47:
            int v24 = *((_DWORD *)a2 + 2);
            if ((v24 & 0xF000000) == 0x1000000)
            {
              *((_DWORD *)a2 + 2) = v24 | 0xC0000000;
              goto LABEL_49;
            }
            goto LABEL_50;
          }
          *(void *)&long long v25 = a2;
          BYTE8(v25) = 0;
        }
        else
        {
          *(void *)&long long v25 = a2;
          BYTE8(v25) = a3;
        }
        uint64_t v23 = *(unsigned int *)(v11 + 144);
        if ((*(_DWORD *)(v11 + 148) & 0x7FFFFFFFu) <= v23)
        {
          physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::growAndPushBack(v11 + 64, &v25);
        }
        else
        {
          a5 = *(int8x8_t *)&v25;
          *(_OWORD *)(*(void *)(v11 + 136) + 16 * v23) = v25;
          ++*(_DWORD *)(v11 + 144);
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (v5) {
        uint64_t v13 = (unsigned char *)*((void *)this + 2);
      }
      else {
        uint64_t v13 = (char *)this + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3) + 12;
      }
      if ((*v13 & 8) == 0)
      {
        physx::Sc::RigidCore::removeShapeFromScene((physx::Scb::RigidObject *)((char *)this+ *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3)), (physx::Scb::Shape *)((char *)a2 + 32), a3);
        if (atomic_fetch_add((atomic_uint *volatile)a2 - 4, 0xFFFFFFFF) == 1) {
          (*(void (**)(void))(*((void *)a2 - 3) + 16))();
        }
      }
    }
    int v14 = *((_DWORD *)a2 + 2);
    if ((v14 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)a2 + 2) = v14 & 0x3FFFFFFF;
      *(void *)a2 = 0;
    }
  }
}

uint64_t physx::NpShapeManager::detachAll(physx::NpShapeManager *this, physx::NpScene *a2, const physx::PxRigidActor *a3)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  unint64_t v5 = this;
  if (v4 != 1) {
    unint64_t v5 = *(physx::NpShapeManager **)this;
  }
  if (a2) {
    physx::NpShapeManager::teardownAllSceneQuery((uint64_t)this, (physx::NpScene *)((char *)a2 + 8640), a3);
  }
  if (v4)
  {
    do
    {
      uint64_t v6 = *(void *)v5;
      atomic_fetch_add((atomic_uint *volatile)(*(void *)v5 + 264), 0xFFFFFFFF);
      if ((*(_DWORD *)(v6 + 264) & 0x80000000) != 0) {
        *(void *)(v6 + 40) = 0;
      }
      if (atomic_fetch_add((atomic_uint *volatile)(v6 + 32), 0xFFFFFFFF) == 1) {
        (*(void (**)(void))(*(void *)(v6 + 24) + 16))();
      }
      unint64_t v5 = (physx::NpShapeManager *)((char *)v5 + 8);
      --v4;
    }
    while (v4);
  }
  uint64_t v7 = *(void *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)this, v7);
  return physx::Cm::PtrTable::clear((uint64_t)this + 16, v7);
}

void physx::NpShapeManager::getWorldBounds(physx::NpShapeManager *this@<X0>, const physx::PxRigidActor *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = this;
  float32x4_t v31 = (float32x4_t)xmmword_23441FAD0;
  *(_OWORD *)a3 = xmmword_23441FAD0;
  *(int32x2_t *)(a3 + 16) = vdup_n_s32(0xFE7FFFFF);
  uint64_t v5 = *((unsigned __int16 *)this + 4);
  (*(void (**)(uint64_t *__return_ptr, const physx::PxRigidActor *))(*(void *)a2 + 152))(&v35, a2);
  if (*((_WORD *)v3 + 4) != 1) {
    unint64_t v3 = *(physx::NpShapeManager **)v3;
  }
  if (v5)
  {
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    do
    {
      uint64_t v19 = *(physx::NpShapeManager **)v3;
      int v20 = *(_DWORD *)(*(void *)v3 + 56);
      if (v20)
      {
        uint64_t v21 = *((void *)v19 + 8) + 64;
        if ((v20 & 4) == 0)
        {
LABEL_9:
          int v22 = (float *)((char *)v19 + 112);
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v21 = (uint64_t)v19 + 152;
        if ((v20 & 4) == 0) {
          goto LABEL_9;
        }
      }
      int v22 = (float *)*((void *)v19 + 8);
LABEL_10:
      v10.f32[0] = v22[4] + v22[4];
      *(float *)v11.i32 = v22[5] + v22[5];
      *(float *)&double v12 = v22[6] + v22[6];
      *(float *)&double v14 = v36;
      *(float *)&double v15 = (float)(v37 * v37) + -0.5;
      v17.i32[0] = HIDWORD(v35);
      float v23 = (float)((float)(*(float *)v11.i32 * *((float *)&v35 + 1)) + (float)(*(float *)&v35 * v10.f32[0]))
          + (float)(v36 * *(float *)&v12);
      float v24 = (float)((float)(v37
                          * (float)((float)(*((float *)&v35 + 1) * *(float *)&v12) - (float)(v36 * *(float *)v11.i32)))
                  + (float)(v10.f32[0] * *(float *)&v15))
          + (float)(*(float *)&v35 * v23);
      float v25 = (float)((float)(v37 * (float)((float)(v36 * v10.f32[0]) - (float)(*(float *)&v35 * *(float *)&v12)))
                  + (float)(*(float *)v11.i32 * *(float *)&v15))
          + (float)(*((float *)&v35 + 1) * v23);
      v10.f32[0] = (float)((float)(v37
                                 * (float)((float)(*(float *)&v35 * *(float *)v11.i32)
                                         - (float)(*((float *)&v35 + 1) * v10.f32[0])))
                         + (float)(*(float *)&v12 * *(float *)&v15))
                 + (float)(v36 * v23);
      *(float *)&double v12 = v39 + v25;
      float v26 = v22[2];
      *(float *)&double v15 = v22[3];
      float v27 = v22[1];
      float v28 = (float)((float)((float)(*((float *)&v35 + 1) * *(float *)&v15) + (float)(v37 * v27)) + (float)(v36 * *v22))
          - (float)(v26 * *(float *)&v35);
      float v29 = (float)((float)((float)(v36 * *(float *)&v15) + (float)(v37 * v26)) + (float)(*(float *)&v35 * v27))
          - (float)(*v22 * *((float *)&v35 + 1));
      *(float *)&double v16 = -(float)(*(float *)&v35 * *v22);
      *(float *)v13.i32 = (float)((float)((float)(v37 * *(float *)&v15) - (float)(*(float *)&v35 * *v22))
                                - (float)(*((float *)&v35 + 1) * v27))
                        - (float)(v36 * v26);
      v32[0] = (float)((float)((float)(*(float *)&v35 * *(float *)&v15) + (float)(v37 * *v22))
                     + (float)(*((float *)&v35 + 1) * v26))
             - (float)(v27 * v36);
      v32[1] = v28;
      v32[2] = v29;
      v32[3] = *(float *)v13.i32;
      v32[4] = v38 + v24;
      v32[5] = v39 + v25;
      v32[6] = v40 + v10.f32[0];
      v10.i64[0] = 0;
      v11.i32[0] = 1.0;
      physx::Gu::computeBounds((float32x2_t *)&v33, v21, (uint64_t)v32, 0, v10, v11, v12, *(double *)v13.i64, v14, v15, v16, v17, v6, v7, v8, v9, v31.i8[0]);
      v10.i64[1] = v33.i64[1];
      int16x4_t v30 = vmovn_s32(vcgtq_f32(v33, v31));
      double v12 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v31, v33)));
      v30.i16[3] = HIWORD(v12);
      int8x16_t v11 = (int8x16_t)vmovl_s16(v30);
      int8x16_t v13 = vbslq_s8(v11, (int8x16_t)v31, (int8x16_t)v33);
      float32x4_t v31 = (float32x4_t)v13;
      *(int8x16_t *)a3 = v13;
      *(int32x2_t *)v11.i8 = vcgt_f32(v18, v34);
      float32x2_t v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v11.i8, (int8x8_t)v18, (int8x8_t)v34);
      *(float32x2_t *)(a3 + 16) = v18;
      unint64_t v3 = (physx::NpShapeManager *)((char *)v3 + 8);
      --v5;
    }
    while (v5);
  }
}

uint64_t physx::NpShapeManager::clearShapesOnRelease(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned __int16 *)(result + 8);
  if (v3 != 1)
  {
    if (!*(_WORD *)(result + 8)) {
      return result;
    }
    uint64_t v2 = *(void *)result;
  }
  uint64_t v4 = a2 + 7736;
  do
  {
    uint64_t v5 = *(void *)v2;
    if ((*(unsigned char *)(*(void *)v2 + 59) & 0x10) != 0)
    {
      uint64_t v6 = v5 + 48;
      uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, &v6);
      *(_DWORD *)(v5 + 56) &= ~0x10000000u;
    }
    v2 += 8;
    --v3;
  }
  while (v3);
  return result;
}

void physx::NpShapeManager::addBVHStructureShapes(physx::NpShapeManager *this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3, const physx::Gu::BVHStructure *a4)
{
  float32x4_t v31 = a4;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
  uint64_t v8 = (char *)a3 + v7;
  uint64_t v9 = *((unsigned __int16 *)this + 4);
  unsigned int v10 = 8 * v9;
  BOOL v36 = v9 > 0x80;
  if (v9 < 0x81)
  {
    size_t v14 = v10;
    MEMORY[0x270FA5388](this);
    int8x16_t v11 = (const physx::Gu::BVHStructure **)((char *)&v31 - ((v10 + 15) & 0xFFFF0));
    bzero(v11, v10);
    uint64_t v35 = v11;
    BOOL v34 = v9 > 0x80;
    MEMORY[0x270FA5388](v15);
    double v12 = v11;
    bzero(v11, v14);
    float32x4_t v33 = v11;
    if (!v9)
    {
      char v21 = 1;
      goto LABEL_15;
    }
    int v13 = v9;
  }
  else
  {
    int8x16_t v11 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v32, 8 * v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 357);
    uint64_t v35 = v11;
    BOOL v34 = v9 > 0x80;
    double v12 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v32, 8 * v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 358);
    float32x4_t v33 = v12;
    int v13 = *((unsigned __int16 *)this + 4);
  }
  uint64_t v16 = 0;
  int v17 = 0;
  do
  {
    float32x2_t v18 = this;
    if (v13 != 1) {
      float32x2_t v18 = *(physx::NpShapeManager **)this;
    }
    uint64_t v19 = *((void *)v18 + v16);
    if ((*(unsigned char *)(v19 + 56) & 0x40) != 0) {
      int v20 = (unsigned char *)(*(void *)(v19 + 64) + 52);
    }
    else {
      int v20 = (unsigned char *)(v19 + 144);
    }
    if ((*v20 & 2) != 0) {
      v11[v17++] = v19 + 48;
    }
    ++v16;
  }
  while (v9 != v16);
  char v21 = 0;
  uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18);
LABEL_15:
  unsigned int v22 = *(_DWORD *)(*(void *)((char *)a3
                              + v7
                              + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)a3 + v7 + 11) & 0xF) + 3))
                  + 88);
  *((_DWORD *)this + 8) = v22;
  (*(void (**)(void *__return_ptr, const physx::PxRigidActor *))(*(void *)a3 + 152))(v32, a3);
  physx::Sq::SceneQueryManager::addCompoundShape((uint64_t)a2, (uint64_t)v31, v22, (uint64_t)v32, (uint64_t)v12, v11, (uint64_t)v8);
  if ((v21 & 1) == 0)
  {
    uint64_t v23 = 0;
    int v24 = 0;
    int v25 = *((unsigned __int16 *)this + 4);
    do
    {
      float v26 = this;
      if (v25 != 1) {
        float v26 = *(physx::NpShapeManager **)this;
      }
      uint64_t v27 = *((void *)v26 + v23);
      if ((*(unsigned char *)(v27 + 56) & 0x40) != 0) {
        float v28 = (unsigned char *)(*(void *)(v27 + 64) + 52);
      }
      else {
        float v28 = (unsigned char *)(v27 + 144);
      }
      if ((*v28 & 2) != 0)
      {
        float v29 = (char *)this + 16;
        if (*((_WORD *)this + 12) != 1) {
          float v29 = (char *)*((void *)this + 2);
        }
        uint64_t v30 = v12[v24++];
        *(void *)&v29[8 * v23] = v30;
      }
      ++v23;
    }
    while (v9 != v23);
  }
  if (v34) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v33, v12);
  }
  if (v9 >= 0x81) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v35, v11);
  }
}

void physx::NpShapeManager::visualize(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v569 = *MEMORY[0x263EF8340];
  float v8 = (*(float (**)(uint64_t, void))(*(void *)a3 + 560))(a3, 0);
  if (v8 != 0.0)
  {
    float v9 = v8;
    uint64_t v10 = *((unsigned __int16 *)a1 + 4);
    BOOL v510 = v10 != 1
        && (a1 = (uint64_t *)*a1, v10)
        && (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, 14) != 0.0;
    if ((*(unsigned char *)(a3 + 8624) & 0x40) != 0) {
      int8x16_t v11 = (float *)(a3 + 8316);
    }
    else {
      int8x16_t v11 = (float *)(*(void *)(a3 + 1872) + 1888);
    }
    float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, 11);
    float v495 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, 12);
    float v13 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, 16);
    float v15 = (*(float (**)(uint64_t, uint64_t))(*(void *)a3 + 560))(a3, 15);
    BOOL v16 = v15 != 0.0 || v495 != 0.0;
    float v492 = v13;
    if (v13 != 0.0) {
      BOOL v16 = 1;
    }
    v500 = v11;
    float v501 = v11[3];
    float v502 = *v11;
    BOOL v507 = v16;
    BOOL v17 = *v11 <= v501 && v16;
    v14.n128_f32[0] = *v11;
    float v18 = (*(float (**)(uint64_t, uint64_t, __n128))(*(void *)a3 + 560))(a3, 13, v14);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 152))(&v540, a4);
    if (v10)
    {
      uint64_t v30 = 0;
      int v508 = v510 || v17;
      float v31 = v9 * v18;
      float v499 = v9 * v15;
      v491 = &v549;
      v505 = (void *)(a2 + 40);
      v506 = (void *)(a2 + 60);
      float32x2_t v32 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
      v504 = (void *)(a2 + 80);
      v33.n128_u64[1] = 0xFE7FFFFF7E7FFFFFLL;
      float v34 = -0.5;
      float32x4_t v509 = (float32x4_t)xmmword_23441FAD0;
      v493 = a1;
      uint64_t v498 = v10;
      float v496 = v31;
      float v497 = v12;
      while (1)
      {
        uint64_t v35 = (float32x2_t *)a1[v30];
        __int32 v36 = v35[7].i32[0];
        if ((v36 & 4) != 0) {
          uint64_t v37 = (float32x2_t *)v35[8];
        }
        else {
          uint64_t v37 = v35 + 14;
        }
        float v38 = v37[2].f32[0] + v37[2].f32[0];
        float v39 = v37[2].f32[1] + v37[2].f32[1];
        float v40 = v37[3].f32[0] + v37[3].f32[0];
        *(float *)&double v26 = v541;
        float v41 = v34 + (float)(v542 * v542);
        v29.i32[0] = HIDWORD(v540);
        float v42 = (float)((float)(v39 * *((float *)&v540 + 1)) + (float)(*(float *)&v540 * v38)) + (float)(v541 * v40);
        float v43 = (float)((float)(v542 * (float)((float)(*((float *)&v540 + 1) * v40) - (float)(v541 * v39)))
                    + (float)(v38 * v41))
            + (float)(*(float *)&v540 * v42);
        float v44 = (float)((float)(v542 * (float)((float)(v541 * v38) - (float)(*(float *)&v540 * v40))) + (float)(v39 * v41))
            + (float)(*((float *)&v540 + 1) * v42);
        float v45 = (float)((float)(v542 * (float)((float)(*(float *)&v540 * v39) - (float)(*((float *)&v540 + 1) * v38)))
                    + (float)(v40 * v41))
            + (float)(v541 * v42);
        float v46 = v37[1].f32[0];
        LODWORD(v27) = v37[1].i32[1];
        float v47 = v37->f32[1];
        float v48 = (float)((float)((float)(*((float *)&v540 + 1) * *(float *)&v27) + (float)(v542 * v47))
                    + (float)(v541 * v37->f32[0]))
            - (float)(v46 * *(float *)&v540);
        float v49 = (float)((float)((float)(v541 * *(float *)&v27) + (float)(v542 * v46)) + (float)(*(float *)&v540 * v47))
            - (float)(v37->f32[0] * *((float *)&v540 + 1));
        *(float *)&double v28 = -(float)(*(float *)&v540 * v37->f32[0]);
        *(float *)v25.i32 = (float)((float)((float)(v542 * *(float *)&v27) - (float)(*(float *)&v540 * v37->f32[0]))
                                  - (float)(*((float *)&v540 + 1) * v47))
                          - (float)(v541 * v46);
        float v533 = (float)((float)((float)(*(float *)&v540 * *(float *)&v27) + (float)(v542 * v37->f32[0]))
                     + (float)(*((float *)&v540 + 1) * v46))
             - (float)(v47 * v541);
        float v534 = v48;
        float v535 = v49;
        float v536 = *(float *)v25.i32;
        float v537 = v543 + v43;
        float v538 = v544 + v44;
        float v539 = v545 + v45;
        if (v36)
        {
          uint64_t v50 = (float32x2_t *)(*(void *)&v35[8] + 64);
          if ((v36 & 0x40) != 0)
          {
LABEL_24:
            uint64_t v51 = (float32x2_t *)(*(void *)&v35[8] + 52);
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v50 = v35 + 19;
          if ((v36 & 0x40) != 0) {
            goto LABEL_24;
          }
        }
        uint64_t v51 = v35 + 18;
LABEL_27:
        unsigned int v52 = v51->u8[0];
        int v53 = (v52 >> 3) & 1;
        if (v12 == 0.0) {
          int v53 = 0;
        }
        if ((v508 | v53) == 1)
        {
          v33.n128_u64[0] = 0;
          v23.i32[0] = 1.0;
          *(float *)&double v24 = v544 + v44;
          physx::Gu::computeBounds((float32x2_t *)&v531, (uint64_t)v50, (uint64_t)&v533, 0, (float32x4_t)v33, v23, v24, *(double *)v25.i64, v26, v27, v28, v29, v19, v20, v21, v22, (char)v491);
          if ((v52 & 8) == 0) {
            goto LABEL_208;
          }
        }
        else
        {
          v33.n128_u64[1] = 0xFE7FFFFF7E7FFFFFLL;
          float32x4_t v531 = (float32x4_t)xmmword_23441FAD0;
          v33.n128_u64[0] = (unint64_t)vdup_n_s32(0xFE7FFFFF);
          float32x2_t v532 = (float32x2_t)v33.n128_u64[0];
          if ((v52 & 8) == 0) {
            goto LABEL_208;
          }
        }
        if (v12 != 0.0)
        {
          *(_DWORD *)(a2 + 4) = -256;
          *(_DWORD *)(a2 + 36) = 1065353216;
          void *v505 = 0;
          *(void *)(a2 + 48) = 0;
          *(_DWORD *)(a2 + 56) = 1065353216;
          void *v506 = 0;
          *(void *)(a2 + 68) = 0;
          *(_DWORD *)(a2 + 76) = 1065353216;
          void *v504 = 0;
          *(void *)(a2 + 88) = 0;
          *(_DWORD *)(a2 + 96) = 1065353216;
          *(float32x4_t *)v558 = v531;
          *(float32x2_t *)&v558[16] = v532;
          v558[24] = 1;
          physx::Cm::operator<<((_DWORD *)a2, (uint64_t *)v558);
        }
        if (v31 != 0.0)
        {
          physx::PxMat44::PxMat44((uint64_t)v558, (uint64_t)&v533);
          long long v54 = *(_OWORD *)&v558[16];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v558;
          *(_OWORD *)(a2 + 52) = v54;
          long long v55 = *(_OWORD *)&v559[16];
          *(_OWORD *)(a2 + 68) = *(_OWORD *)v559;
          *(_OWORD *)(a2 + 84) = v55;
          *(float *)v550 = v31;
          *(float *)&v550[4] = v31;
          *(float *)&v550[8] = v31;
          *(void *)&v550[12] = 0xCF0000CF0000;
          int v551 = 207;
          physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v550);
        }
        if (!v507
          || v502 <= v501
          && (v531.f32[0] > v500[3]
           || *v500 > v531.f32[3]
           || v531.f32[1] > v500[4]
           || v500[1] > v532.f32[0]
           || v531.f32[2] > v500[5]
           || v500[2] > v532.f32[1]))
        {
          goto LABEL_208;
        }
        __int32 v56 = v50->i32[0];
        float32x2_t v503 = v32;
        if (v495 != 0.0)
        {
          switch(v56)
          {
            case 0:
              *(_DWORD *)(a2 + 4) = -65281;
              uint64_t v57 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v533);
              __int32 v58 = v50->i32[1];
              *(_DWORD *)v558 = 100;
              *(_DWORD *)&v558[4] = v58;
              physx::Cm::operator<<(v57, (uint64_t)v558);
              physx::PxMat44::PxMat44((uint64_t)v558, (uint64_t)&v533);
              unsigned int v60 = *(_DWORD *)&v558[20];
              unsigned int v59 = *(_DWORD *)&v558[16];
              uint64_t v61 = *(void *)&v558[24];
              long long v62 = *(_OWORD *)v559;
              *(_OWORD *)v559 = *(_OWORD *)&v558[16];
              *(float *)&v558[16] = -*(float *)&v62;
              *(float *)&v558[20] = -*((float *)&v62 + 1);
              *(float *)&v558[24] = -*((float *)&v62 + 2);
              *(float *)&v558[28] = -*((float *)&v62 + 3);
              *(_OWORD *)(a2 + 36) = *(_OWORD *)v558;
              *(float *)(a2 + 52) = -*(float *)&v62;
              *(float *)(a2 + 56) = -*((float *)&v62 + 1);
              *(float *)(a2 + 60) = -*((float *)&v62 + 2);
              *(float *)(a2 + 64) = -*((float *)&v62 + 3);
              *(void *)(a2 + 68) = __PAIR64__(v60, v59);
              *(void *)(a2 + 76) = v61;
              int v63 = *(_DWORD *)&v559[28];
              *(_DWORD *)(a2 + 84) = *(_DWORD *)&v559[16];
              *(void *)(a2 + 88) = *(void *)&v559[20];
              *(_DWORD *)(a2 + 96) = v63;
              __int32 v64 = v50->i32[1];
              *(_DWORD *)v550 = 100;
              *(_DWORD *)&v550[4] = v64;
              float v65 = (_DWORD *)physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v550);
              long long v66 = *(_OWORD *)v559;
              int8x16_t v67 = *(int8x16_t *)v558;
              long long v68 = *(_OWORD *)&v558[16];
              *(_OWORD *)v559 = *(_OWORD *)v558;
              *(float *)v558 = -*(float *)&v66;
              *(float *)&v558[4] = -*((float *)&v66 + 1);
              *(float *)&v558[8] = -*((float *)&v66 + 2);
              *(float *)&v558[12] = -*((float *)&v66 + 3);
              *(float *)(a2 + 36) = -*(float *)&v66;
              *(float *)(a2 + 40) = -*((float *)&v66 + 1);
              *(float *)(a2 + 44) = -*((float *)&v66 + 2);
              *(float *)(a2 + 48) = -*((float *)&v66 + 3);
              *(_OWORD *)(a2 + 52) = v68;
              *(void *)(a2 + 68) = v67.i64[0];
              *(int8x16_t *)(a2 + 76) = vextq_s8(v67, *(int8x16_t *)&v559[16], 8uLL);
              *(void *)(a2 + 92) = *(void *)&v559[24];
              __int32 v69 = v50->i32[1];
              *(_DWORD *)v550 = 100;
              *(_DWORD *)&v550[4] = v69;
              physx::Cm::operator<<(v65, (uint64_t)v550);
              goto LABEL_208;
            case 1:
              physx::PxMat44::PxMat44((uint64_t)v558, (uint64_t)&v533);
              int v340 = 0;
              long long v341 = *(_OWORD *)&v558[16];
              float v342 = -*(float *)v559;
              float v343 = -*(float *)&v559[4];
              float v344 = -*(float *)&v559[8];
              float v345 = -*(float *)&v559[12];
              *(float *)&v558[16] = -*(float *)v559;
              *(float *)&v558[20] = -*(float *)&v559[4];
              *(float *)&v558[24] = -*(float *)&v559[8];
              *(float *)&v558[28] = -*(float *)&v559[12];
              *(void *)&long long v346 = *(void *)&v558[8];
              uint64_t v347 = *(void *)v558;
              *(_OWORD *)v559 = *(_OWORD *)v558;
              *(float *)v558 = -*(float *)&v341;
              *(float *)&v558[4] = -*((float *)&v341 + 1);
              *(float *)&v558[8] = -*((float *)&v341 + 2);
              *(float *)&v558[12] = -*((float *)&v341 + 3);
              *(float *)(a2 + 36) = -*(float *)&v341;
              *(float *)(a2 + 40) = -*((float *)&v341 + 1);
              *(float *)(a2 + 44) = -*((float *)&v341 + 2);
              *(float *)(a2 + 48) = -*((float *)&v341 + 3);
              *(float *)(a2 + 52) = v342;
              *(float *)(a2 + 56) = v343;
              *(float *)(a2 + 60) = v344;
              *(float *)(a2 + 64) = v345;
              *(void *)(a2 + 68) = v347;
              *((void *)&v346 + 1) = *(void *)&v559[16];
              *(_OWORD *)(a2 + 76) = v346;
              *(void *)(a2 + 92) = *(void *)&v559[24];
              *(_DWORD *)(a2 + 4) = -65281;
              do
              {
                v340 += 2;
                *(_DWORD *)v550 = 100;
                *(float *)&v550[4] = (float)v340 * (float)v340;
                physx::Cm::operator<<((_DWORD *)a2, (uint64_t)v550);
              }
              while (v340 < 0x12);
              goto LABEL_208;
            case 2:
              *(_DWORD *)(a2 + 4) = -65281;
              float v179 = v50->f32[1];
              float v180 = v50[1].f32[0];
              physx::PxMat44::PxMat44((uint64_t)v558, (uint64_t)&v533);
              physx::Cm::RenderOutput::outputCapsule(a2, (float32x2_t *)v558, v179, v180);
              goto LABEL_208;
            case 3:
              *(_DWORD *)(a2 + 4) = -65281;
              v181 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v533);
              float v182 = v50->f32[1];
              float v183 = v50[1].f32[0];
              float v184 = v50[1].f32[1];
              *(float *)v558 = -v182;
              *(float *)&v558[4] = -v183;
              *(float *)&v558[8] = -v184;
              *(float *)&v558[12] = v182;
              *(float *)&v558[16] = v183;
              *(float *)&v558[20] = v184;
              v558[24] = 1;
              physx::Cm::operator<<(v181, (uint64_t *)v558);
              goto LABEL_208;
            case 4:
              float32x2_t v185 = v50[4];
              uint64_t v186 = *(void *)(*(void *)&v185 + 72);
              uint64_t v187 = *(unsigned __int8 *)(*(void *)&v185 + 71);
              uint64_t v188 = *(unsigned __int8 *)(*(void *)&v185 + 70);
              float32x2_t v494 = v185;
              int v189 = *(__int16 *)(*(void *)&v185 + 68);
              float v190 = v533;
              float v191 = v534;
              float v192 = v535;
              float v193 = v191 + v191;
              float v194 = v192 + v192;
              float v195 = v191 * (float)(v191 + v191);
              float v196 = v192 * (float)(v192 + v192);
              float v197 = (float)(v190 + v190) * v534;
              float v198 = (float)(v190 + v190) * v535;
              float v199 = (float)(v190 + v190) * v536;
              float v200 = v193 * v535;
              float v201 = v193 * v536;
              float v202 = v194 * v536;
              float v203 = (float)(1.0 - v195) - v196;
              float v204 = v197 + (float)(v194 * v536);
              float v205 = v198 - v201;
              float v206 = v197 - v202;
              float v207 = 1.0 - (float)(v190 * (float)(v190 + v190));
              float v208 = v207 - v196;
              float v209 = v200 + v199;
              float v210 = v198 + v201;
              float v211 = v200 - v199;
              float v212 = v207 - v195;
              float v213 = v50[2].f32[1];
              float v214 = v50[3].f32[0];
              float v215 = v50[3].f32[1];
              float v217 = v50[1].f32[1];
              float v216 = v50[2].f32[0];
              float v218 = v213 + v213;
              float v219 = v214 + v214;
              float v220 = v213 * (float)(v213 + v213);
              float v221 = v214 * (float)(v214 + v214);
              float v222 = (float)(v216 + v216) * v213;
              float v223 = (float)(v216 + v216) * v214;
              float v224 = (float)(v216 + v216) * v215;
              float v225 = v218 * v214;
              float v226 = v218 * v215;
              float v227 = v219 * v215;
              float v228 = (float)(1.0 - v220) - v221;
              float v229 = v222 + v227;
              float v230 = v223 - v226;
              float v231 = v222 - v227;
              float v232 = 1.0 - (float)(v216 * (float)(v216 + v216));
              float v233 = v232 - v221;
              float v234 = v225 + v224;
              float v235 = v223 + v226;
              float v236 = v225 - v224;
              float v237 = v232 - v220;
              float v238 = v50->f32[1];
              float v239 = v50[1].f32[0];
              float v240 = v238 * v228;
              float v241 = v238 * v231;
              float v242 = v238 * v235;
              float v243 = v229 * v239;
              float v244 = v233 * v239;
              float v245 = v236 * v239;
              float v246 = v230 * v217;
              float v247 = v234 * v217;
              float v248 = v237 * v217;
              float v249 = v228 * v241;
              float v250 = v229 * v244;
              float v251 = (float)(v228 * v240) + (float)(v229 * v243);
              float v252 = (float)(v228 * v242) + (float)(v229 * v245);
              float v253 = v251 + (float)(v230 * v246);
              float v254 = (float)(v249 + v250) + (float)(v230 * v247);
              float v255 = v252 + (float)(v230 * v248);
              float v256 = (float)(v231 * v240) + (float)(v233 * v243);
              float v257 = (float)(v231 * v241) + (float)(v233 * v244);
              float v258 = (float)(v231 * v242) + (float)(v233 * v245);
              float v259 = v256 + (float)(v234 * v246);
              float v260 = v257 + (float)(v234 * v247);
              float v34 = -0.5;
              float v261 = v258 + (float)(v234 * v248);
              float v262 = v235 * v240;
              float v263 = v235 * v241;
              float v264 = v235 * v242;
              float v265 = v236 * v244;
              float v266 = v262 + (float)(v236 * v243);
              float v267 = v264 + (float)(v236 * v245);
              float v268 = v237 * v246;
              float32x2_t v32 = v503;
              float v269 = v237 * v247;
              float v31 = v496;
              float v12 = v497;
              float v270 = v237 * v248;
              float v271 = v266 + v268;
              float v272 = (float)(v263 + v265) + v269;
              float v273 = v267 + v270;
              float v274 = v204 * v253;
              float v275 = (float)(v205 * v253) + (float)(v209 * v254);
              float v276 = (float)(v210 * v255) + (float)((float)(v203 * v253) + (float)(v206 * v254));
              float v277 = (float)(v211 * v255) + (float)(v274 + (float)(v208 * v254));
              float v278 = (float)(v212 * v255) + v275;
              float v279 = (float)(v210 * v261) + (float)((float)(v203 * v259) + (float)(v206 * v260));
              float v280 = (float)(v211 * v261) + (float)((float)(v204 * v259) + (float)(v208 * v260));
              float v281 = (float)(v212 * v261) + (float)((float)(v205 * v259) + (float)(v209 * v260));
              float v282 = v203 * v271;
              float v283 = v204 * v271;
              float v284 = v205 * v271;
              float v285 = v537;
              float v286 = v538;
              float v287 = v282 + (float)(v206 * v272);
              float v288 = v283 + (float)(v208 * v272);
              float v289 = v210 * v273;
              *(float *)v29.i32 = v539;
              *(float *)(a2 + 36) = v276;
              *(float *)(a2 + 40) = v277;
              *(float *)(a2 + 44) = v278;
              *(_DWORD *)(a2 + 48) = 0;
              *(float *)(a2 + 52) = v279;
              *(float *)(a2 + 56) = v280;
              *(float *)(a2 + 60) = v281;
              float v290 = v289 + v287;
              float v291 = (float)(v211 * v273) + v288;
              *(_DWORD *)(a2 + 64) = 0;
              *(float *)(a2 + 68) = v289 + v287;
              *(float *)(a2 + 72) = v291;
              float v292 = (float)(v212 * v273) + (float)(v284 + (float)(v209 * v272));
              *(float *)(a2 + 76) = v292;
              *(_DWORD *)(a2 + 80) = 0;
              *(float *)(a2 + 84) = v285;
              *(float *)(a2 + 88) = v286;
              *(_DWORD *)(a2 + 92) = v29.i32[0];
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if (v187)
              {
                uint64_t v293 = v187;
                uint64_t v294 = 0;
                uint64_t v295 = v186 + 20 * v187;
                uint64_t v296 = v295 + 12 * v188 + 2 * (v189 & 0x7FFF);
                uint64_t v297 = 3 * v188;
                if (v189 >= 0) {
                  uint64_t v298 = 0;
                }
                else {
                  uint64_t v298 = 4 * (v189 & 0x7FFF);
                }
                v299 = (unsigned __int8 *)(v296 + v297 + v298);
                int v300 = -65281;
                float v527 = v276;
                float v524 = v277;
                float v519 = v279;
                float v521 = (float)(v212 * v255) + v275;
                float v515 = v281;
                float v517 = v280;
                float v513 = v286;
                float v514 = v285;
                float v511 = v289 + v287;
                __int32 v512 = v29.i32[0];
                do
                {
                  unint64_t v301 = *(unsigned __int8 *)(*(void *)(*(void *)&v494 + 72) + 20 * v294 + 18);
                  v302 = (float *)(v295 + 12 * *v299);
                  float v303 = v302[1];
                  float v304 = v302[2];
                  float v305 = (float)(v277 * *v302) + (float)(v280 * v303);
                  float v306 = (float)(v278 * *v302) + (float)(v281 * v303);
                  float v307 = (float)((float)(v276 * *v302) + (float)(v279 * v303)) + (float)(v290 * v304);
                  float v308 = v306 + (float)(v292 * v304);
                  float v309 = v285 + v307;
                  float v310 = v286 + (float)(v305 + (float)(v291 * v304));
                  float v311 = *(float *)v29.i32 + v308;
                  if (v301 < 2)
                  {
                    float v325 = v285 + v307;
                    float v326 = v286 + (float)(v305 + (float)(v291 * v304));
                    float v328 = *(float *)v29.i32 + v308;
                  }
                  else
                  {
                    uint64_t v312 = 1;
                    do
                    {
                      v313 = (float *)(v295 + 12 * v299[v312]);
                      float v315 = *v313;
                      float v314 = v313[1];
                      float v316 = v313[2];
                      uint64_t v317 = *(void *)(a2 + 104);
                      unsigned int v318 = *(_DWORD *)(v317 + 32);
                      unsigned int v319 = *(_DWORD *)(v317 + 36) & 0x7FFFFFFF;
                      unsigned int v320 = v318 + 1;
                      if (v318 + 1 > v319)
                      {
                        unsigned int v321 = 2 * *(_DWORD *)(v317 + 36);
                        if (!v319) {
                          unsigned int v321 = 2;
                        }
                        if (v320 <= v321) {
                          unsigned int v322 = v321;
                        }
                        else {
                          unsigned int v322 = v318 + 1;
                        }
                        physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v317 + 24, v322);
                        float v290 = v511;
                        v29.i32[0] = v512;
                        float v286 = v513;
                        float v285 = v514;
                        float v281 = v515;
                        float v280 = v517;
                        float v279 = v519;
                        float v278 = v521;
                        float v277 = v524;
                        float v276 = v527;
                        unsigned int v318 = *(_DWORD *)(v317 + 32);
                        int v300 = *(_DWORD *)(a2 + 4);
                      }
                      float v323 = (float)((float)(v277 * v315) + (float)(v280 * v314)) + (float)(v291 * v316);
                      float v324 = (float)((float)(v278 * v315) + (float)(v281 * v314)) + (float)(v292 * v316);
                      float v325 = v285 + (float)((float)((float)(v276 * v315) + (float)(v279 * v314)) + (float)(v290 * v316));
                      float v326 = v286 + v323;
                      uint64_t v327 = *(void *)(v317 + 24) + 32 * v318;
                      *(_DWORD *)(v317 + 32) = v320;
                      *(float *)uint64_t v327 = v309;
                      *(float *)(v327 + 4) = v310;
                      *(float *)(v327 + 8) = v311;
                      float v328 = *(float *)v29.i32 + v324;
                      *(float *)(v327 + 16) = v325;
                      *(float *)(v327 + 20) = v286 + v323;
                      *(float *)(v327 + 24) = *(float *)v29.i32 + v324;
                      ++v312;
                      *(_DWORD *)(v327 + 28) = v300;
                      *(_DWORD *)(v327 + 12) = v300;
                      float v311 = *(float *)v29.i32 + v324;
                      float v310 = v286 + v323;
                      float v309 = v325;
                    }
                    while (v301 != v312);
                    v329 = (float *)(v295 + 12 * *v299);
                    float v330 = v329[1];
                    float v331 = v329[2];
                    float v309 = v285 + (float)((float)((float)(v276 * *v329) + (float)(v279 * v330)) + (float)(v290 * v331));
                    float v310 = v286 + (float)((float)((float)(v277 * *v329) + (float)(v280 * v330)) + (float)(v291 * v331));
                    float v311 = *(float *)v29.i32
                         + (float)((float)((float)(v278 * *v329) + (float)(v281 * v330)) + (float)(v292 * v331));
                    a1 = v493;
                  }
                  uint64_t v332 = *(void *)(a2 + 104);
                  unsigned int v333 = *(_DWORD *)(v332 + 32);
                  unsigned int v334 = *(_DWORD *)(v332 + 36) & 0x7FFFFFFF;
                  unsigned int v335 = v333 + 1;
                  if (v333 + 1 > v334)
                  {
                    unsigned int v336 = 2 * *(_DWORD *)(v332 + 36);
                    if (!v334) {
                      unsigned int v336 = 2;
                    }
                    if (v335 <= v336) {
                      unsigned int v337 = v336;
                    }
                    else {
                      unsigned int v337 = v333 + 1;
                    }
                    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v332 + 24, v337);
                    float v290 = v511;
                    v29.i32[0] = v512;
                    float v286 = v513;
                    float v285 = v514;
                    float v281 = v515;
                    float v280 = v517;
                    float v279 = v519;
                    float v278 = v521;
                    float v277 = v524;
                    float v276 = v527;
                    unsigned int v333 = *(_DWORD *)(v332 + 32);
                    int v300 = *(_DWORD *)(a2 + 4);
                  }
                  uint64_t v338 = *(void *)(v332 + 24);
                  *(_DWORD *)(v332 + 32) = v335;
                  uint64_t v339 = v338 + 32 * v333;
                  *(float *)uint64_t v339 = v325;
                  *(float *)(v339 + 4) = v326;
                  *(float *)(v339 + 8) = v328;
                  *(float *)(v339 + 16) = v309;
                  *(float *)(v339 + 20) = v310;
                  *(float *)(v339 + 24) = v311;
                  *(_DWORD *)(v339 + 28) = v300;
                  *(_DWORD *)(v339 + 12) = v300;
                  v299 += v301;
                  ++v294;
                  uint64_t v10 = v498;
                  float v31 = v496;
                  float v12 = v497;
                  float32x2_t v32 = v503;
                  float v34 = -0.5;
                }
                while (v294 != v293);
              }
              goto LABEL_208;
            case 5:
              goto LABEL_49;
            case 6:
              float32x2_t v348 = v50[1];
              uint64_t v349 = (*(_DWORD *)(*(void *)&v348 + 60) * *(_DWORD *)(*(void *)&v348 + 56));
              uint64_t v350 = (2 * v349);
              *(_DWORD *)(a2 + 36) = 1065353216;
              void *v505 = 0;
              *(void *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              void *v506 = 0;
              *(void *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              void *v504 = 0;
              *(void *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if (v502 > v501)
              {
                if (v349)
                {
                  uint64_t v370 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, float))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v349, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 705, v502);
                  uint64_t v371 = v370;
                  uint64_t v372 = 0;
                  unsigned int v373 = *(_DWORD *)(*(void *)&v348 + 60);
                  v374 = *(__int16 **)(*(void *)&v348 + 80);
                  v23.i32[0] = v50[2].i32[0];
                  v33.n128_u32[0] = v50[2].u32[1];
                  LODWORD(v24) = v50[3].i32[0];
                  *(float *)v25.i32 = v536;
                  *(float *)v29.i32 = v534;
                  *(float *)&double v26 = v535;
                  *(float *)&double v27 = v34 + (float)(*(float *)v25.i32 * *(float *)v25.i32);
                  *(float *)&double v28 = v533;
                  float v375 = -v535;
                  float v376 = -v533;
                  float v377 = -v534;
                  v378 = (float *)(v370 + 8);
                  do
                  {
                    int v379 = *v374;
                    v374 += 2;
                    float v380 = (float)(v33.n128_f32[0] * (float)(v372 / v373))
                         + (float)(v33.n128_f32[0] * (float)(v372 / v373));
                    float v381 = (float)(*(float *)v23.i32 * (float)v379) + (float)(*(float *)v23.i32 * (float)v379);
                    float v382 = (float)(*(float *)&v24 * (float)(v372 % v373))
                         + (float)(*(float *)&v24 * (float)(v372 % v373));
                    float v383 = (float)((float)(*(float *)v29.i32 * v381) + (float)(*(float *)&v28 * v380))
                         + (float)(*(float *)&v26 * v382);
                    float v384 = (float)(*(float *)v25.i32 * (float)((float)(v382 * v376) + (float)(*(float *)&v26 * v380)))
                         + (float)(v381 * *(float *)&v27);
                    float v385 = (float)((float)(*(float *)v25.i32
                                         * (float)((float)(v381 * v375) + (float)(*(float *)v29.i32 * v382)))
                                 + (float)(v380 * *(float *)&v27))
                         + (float)(*(float *)&v28 * v383);
                    float v386 = v539
                         + (float)((float)((float)(*(float *)v25.i32
                                                 * (float)((float)(v380 * v377) + (float)(*(float *)&v28 * v381)))
                                         + (float)(v382 * *(float *)&v27))
                                 + (float)(*(float *)&v26 * v383));
                    float v387 = v538 + (float)(v384 + (float)(*(float *)v29.i32 * v383));
                    *(v378 - 2) = v537 + v385;
                    *(v378 - 1) = v387;
                    float *v378 = v386;
                    v378 += 3;
                    ++v372;
                  }
                  while (v349 != v372);
                  if (!v350) {
                    goto LABEL_145;
                  }
                  unsigned int v388 = 0;
                  uint64_t v529 = v370;
                  do
                  {
                    unsigned int v389 = v388 >> 1;
                    unsigned int v390 = *(_DWORD *)(*(void *)&v348 + 60);
                    unsigned int v391 = (v388 >> 1) / v390;
                    if (v391 < *(_DWORD *)(*(void *)&v348 + 56) - 1 && v389 - v391 * v390 < v390 - 1)
                    {
                      uint64_t v392 = *(void *)(*(void *)&v348 + 80) + 4 * v389;
                      v393 = (char *)(v392 + 2);
                      v394 = (unsigned __int8 *)(v392 + 3);
                      if ((v388 & 1) == 0) {
                        v394 = (unsigned __int8 *)v393;
                      }
                      if ((~*v394 & 0x7F) != 0)
                      {
                        int v395 = *v393;
                        unsigned int v396 = v389 + 1 + v390;
                        unsigned int v397 = v390 + v389;
                        if (v388) {
                          unsigned int v398 = v397;
                        }
                        else {
                          unsigned int v398 = v389 + 1;
                        }
                        if (v388) {
                          unsigned int v399 = v396;
                        }
                        else {
                          unsigned int v399 = v388 >> 1;
                        }
                        if (v388) {
                          unsigned int v400 = v389 + 1;
                        }
                        else {
                          unsigned int v400 = v397;
                        }
                        if (v388)
                        {
                          unsigned int v401 = v389 + 1;
                        }
                        else
                        {
                          unsigned int v396 = v388 >> 1;
                          unsigned int v401 = v397;
                        }
                        if ((v388 & 1) == 0) {
                          unsigned int v389 = v397 + 1;
                        }
                        if (v395 < 0) {
                          unsigned int v402 = v396;
                        }
                        else {
                          unsigned int v402 = v398;
                        }
                        if (v395 >= 0)
                        {
                          unsigned int v403 = v400;
                        }
                        else
                        {
                          unsigned int v399 = v401;
                          unsigned int v403 = v389;
                        }
                        uint64_t v404 = *(void *)(a2 + 104);
                        unsigned int v405 = *(_DWORD *)(v404 + 32);
                        unsigned int v406 = *(_DWORD *)(v404 + 36) & 0x7FFFFFFF;
                        unsigned int v407 = v405 + 3;
                        if (v405 + 3 > v406)
                        {
                          unsigned int v408 = 2 * *(_DWORD *)(v404 + 36);
                          if (!v406) {
                            unsigned int v408 = 2;
                          }
                          if (v407 <= v408) {
                            unsigned int v409 = v408;
                          }
                          else {
                            unsigned int v409 = v407;
                          }
                          uint64_t v410 = v350;
                          unsigned int v411 = v399;
                          physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v404 + 24, v409);
                          unsigned int v399 = v411;
                          uint64_t v350 = v410;
                          uint64_t v371 = v529;
                          unsigned int v405 = *(_DWORD *)(v404 + 32);
                        }
                        uint64_t v412 = *(void *)(v404 + 24) + 32 * v405;
                        *(_DWORD *)(v404 + 32) = v407;
                        uint64_t v413 = v371 + 12 * v399;
                        uint64_t v414 = v371 + 12 * v402;
                        uint64_t v415 = v371 + 12 * v403;
                        int v416 = *(_DWORD *)(v414 + 8);
                        uint64_t v417 = *(void *)v413;
                        *(_DWORD *)(v412 + 8) = *(_DWORD *)(v413 + 8);
                        *(_DWORD *)(v412 + 12) = -65281;
                        uint64_t v418 = *(void *)v414;
                        *(void *)uint64_t v412 = v417;
                        *(void *)(v412 + 16) = v418;
                        *(_DWORD *)(v412 + 24) = v416;
                        *(_DWORD *)(v412 + 28) = -65281;
                        int v419 = *(_DWORD *)(v415 + 8);
                        uint64_t v420 = *(void *)v414;
                        *(_DWORD *)(v412 + 40) = *(_DWORD *)(v414 + 8);
                        *(_DWORD *)(v412 + 44) = -65281;
                        double v421 = *(double *)v415;
                        *(void *)(v412 + 32) = v420;
                        *(double *)(v412 + 48) = v421;
                        *(_DWORD *)(v412 + 56) = v419;
                        *(_DWORD *)(v412 + 60) = -65281;
                        int v422 = *(_DWORD *)(v413 + 8);
                        double v24 = *(double *)v415;
                        *(_DWORD *)(v412 + 72) = *(_DWORD *)(v415 + 8);
                        *(_DWORD *)(v412 + 76) = -65281;
                        uint64_t v423 = *(void *)v413;
                        *(double *)(v412 + 64) = v24;
                        *(void *)(v412 + 80) = v423;
                        *(_DWORD *)(v412 + 88) = v422;
                        *(_DWORD *)(v412 + 92) = -65281;
                        a1 = v493;
                        uint64_t v10 = v498;
                      }
                    }
                    ++v388;
                  }
                  while (v350 != v388);
                  if (v371) {
LABEL_145:
                  }
                    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v371);
                }
                goto LABEL_208;
              }
              float v351 = *v500;
              float v352 = v500[1];
              v25.i32[0] = (__int32)v500[2];
              float v353 = v500[3];
              float v354 = v500[4];
              float v355 = v500[5];
              float v356 = (float)(v353 + *v500) * 0.5;
              *(_OWORD *)v550 = xmmword_23435FBB0;
              *(float *)&v550[16] = v356;
              *(float *)&int v551 = (float)(v354 + v352) * 0.5;
              float v552 = (float)(v355 + *(float *)v25.i32) * 0.5;
              v33.n128_f32[0] = (float)(v353 - v351) * 0.5;
              *(float *)v23.i32 = (float)(v354 - v352) * 0.5;
              *(float *)&double v24 = (float)(v355 - *(float *)v25.i32) * 0.5;
              LODWORD(v560) = 3;
              float v561 = v33.n128_f32[0];
              float v562 = *(float *)v23.i32;
              float v563 = *(float *)&v24;
              if (v350) {
                uint64_t v357 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v349), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 680);
              }
              else {
                uint64_t v357 = 0;
              }
              LOBYTE(v546) = 0;
              unsigned int OverlapHeightField = physx::PxMeshQuery::findOverlapHeightField((uint64_t)&v560, (float *)v550, v50, &v533, v357, 2 * (int)v349, 0, &v546, v33.n128_f64[0], *(double *)v23.i64, v24, *(double *)v25.i64);
              uint64_t v476 = *(void *)(a2 + 104);
              unsigned int v477 = *(_DWORD *)(v476 + 32);
              unsigned int v478 = *(_DWORD *)(v476 + 36) & 0x7FFFFFFF;
              unsigned int v479 = v477 + 3 * OverlapHeightField;
              if (v479 > v478)
              {
                unsigned int v480 = 2 * *(_DWORD *)(v476 + 36);
                if (!v478) {
                  unsigned int v480 = 2;
                }
                if (v479 <= v480) {
                  unsigned int v481 = v480;
                }
                else {
                  unsigned int v481 = v479;
                }
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v476 + 24, v481);
                unsigned int v477 = *(_DWORD *)(v476 + 32);
              }
              uint64_t v482 = *(void *)(v476 + 24);
              *(_DWORD *)(v476 + 32) = v479;
              if (OverlapHeightField)
              {
                uint64_t v483 = v482 + 32 * v477;
                uint64_t v484 = OverlapHeightField;
                v485 = (unsigned int *)v357;
                do
                {
                  unsigned int v486 = *v485++;
                  physx::PxMeshQuery::getTriangle(v50, &v533, v486, (uint64_t)v558, 0, 0);
                  long long v487 = *(_OWORD *)v558;
                  uint64_t v488 = *(void *)&v558[16];
                  *(void *)uint64_t v483 = *(void *)v558;
                  *(_DWORD *)(v483 + 8) = DWORD2(v487);
                  *(_DWORD *)(v483 + 12) = -65281;
                  *(_DWORD *)(v483 + 16) = HIDWORD(v487);
                  *(void *)(v483 + 20) = v488;
                  *(_DWORD *)(v483 + 28) = -65281;
                  uint64_t v489 = *(void *)&v558[24];
                  int v490 = *(_DWORD *)v559;
                  *(_DWORD *)(v483 + 32) = HIDWORD(v487);
                  *(void *)(v483 + 36) = v488;
                  *(_DWORD *)(v483 + 44) = -65281;
                  *(void *)(v483 + 48) = v489;
                  *(_DWORD *)(v483 + 56) = v490;
                  *(_DWORD *)(v483 + 60) = -65281;
                  *(void *)(v483 + 64) = v489;
                  *(_DWORD *)(v483 + 72) = v490;
                  *(_DWORD *)(v483 + 76) = -65281;
                  *(void *)(v483 + 80) = v487;
                  *(_DWORD *)(v483 + 88) = DWORD2(v487);
                  *(_DWORD *)(v483 + 92) = -65281;
                  v483 += 96;
                  --v484;
                }
                while (v484);
              }
              else if (!v357)
              {
LABEL_226:
                uint64_t v10 = v498;
                goto LABEL_208;
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v357);
              goto LABEL_226;
            default:
              goto LABEL_208;
          }
        }
        if (v56 == 5)
        {
LABEL_49:
          float32x2_t v70 = v50[5];
          float v71 = v533;
          float v72 = v534;
          float v73 = v535;
          float v74 = v72 * (float)(v72 + v72);
          float v75 = v73 * (float)(v73 + v73);
          float v76 = (float)(v71 + v71) * v536;
          float v77 = (float)(v72 + v72) * v535;
          float v78 = (float)(v72 + v72) * v536;
          float v79 = (float)(v73 + v73) * v536;
          float v80 = (float)(1.0 - v74) - v75;
          float v81 = (float)((float)(v71 + v71) * v534) + v79;
          float v82 = (float)((float)(v71 + v71) * v535) - v78;
          float v83 = (float)((float)(v71 + v71) * v534) - v79;
          float v84 = 1.0 - (float)(v71 * (float)(v71 + v71));
          float v85 = v84 - v75;
          float v86 = v77 + v76;
          float v87 = (float)((float)(v71 + v71) * v535) + v78;
          float v88 = v77 - v76;
          float v90 = v50->f32[1];
          long long v89 = (float *)v50 + 1;
          float v91 = v84 - v74;
          float v92 = v89[3];
          float v93 = v89[4];
          float v94 = v89[5];
          float v95 = v89[6];
          float v96 = v93 + v93;
          float v97 = v94 + v94;
          float v98 = v93 * (float)(v93 + v93);
          float v99 = v94 * (float)(v94 + v94);
          float v100 = (float)(v92 + v92) * v93;
          float v101 = (float)(v92 + v92) * v94;
          float v102 = (float)(v92 + v92) * v95;
          float v103 = v96 * v94;
          float v104 = v96 * v95;
          float v105 = v97 * v95;
          float v106 = (float)(1.0 - v98) - v99;
          float v107 = v100 + v105;
          float v108 = v101 - v104;
          float v109 = v100 - v105;
          float v110 = 1.0 - (float)(v92 * (float)(v92 + v92));
          float v111 = v110 - v99;
          float v112 = v103 + v102;
          float v113 = v101 + v104;
          float v114 = v103 - v102;
          float v115 = v110 - v98;
          float v116 = v90 * v106;
          float v117 = v90 * v109;
          float v118 = v89[1];
          float v119 = v89[2];
          float v120 = v107 * v118;
          float v121 = v111 * v118;
          float v122 = v114 * v118;
          float v123 = v108 * v119;
          float v124 = v112 * v119;
          float v125 = v115 * v119;
          float v126 = (float)(v106 * (float)(v90 * v106)) + (float)(v107 * v120);
          float v127 = (float)(v106 * (float)(v90 * v109)) + (float)(v107 * v121);
          float v128 = (float)(v106 * (float)(v90 * v113)) + (float)(v107 * v122);
          float v129 = v126 + (float)(v108 * v123);
          float v130 = v127 + (float)(v108 * v124);
          float v131 = v128 + (float)(v108 * v125);
          float v132 = (float)(v109 * v116) + (float)(v111 * v120);
          float v133 = (float)(v109 * (float)(v90 * v109)) + (float)(v111 * v121);
          float v134 = (float)(v109 * (float)(v90 * v113)) + (float)(v111 * v122);
          float v135 = v132 + (float)(v112 * v123);
          float v136 = v133 + (float)(v112 * v124);
          float v137 = v134 + (float)(v112 * v125);
          float v138 = v113 * (float)(v90 * v113);
          float v139 = (float)(v113 * v116) + (float)(v114 * v120);
          float v140 = (float)(v113 * v117) + (float)(v114 * v121);
          float v141 = v138 + (float)(v114 * v122);
          float v142 = v139 + (float)(v115 * v123);
          float v143 = v140 + (float)(v115 * v124);
          float v144 = v141 + (float)(v115 * v125);
          float v145 = (float)(v87 * v131) + (float)((float)(v80 * v129) + (float)(v83 * v130));
          float v146 = (float)(v88 * v131) + (float)((float)(v81 * v129) + (float)(v85 * v130));
          float v147 = (float)(v91 * v131) + (float)((float)(v82 * v129) + (float)(v86 * v130));
          float v148 = (float)(v88 * v137) + (float)((float)(v81 * v135) + (float)(v85 * v136));
          float v149 = (float)(v91 * v137) + (float)((float)(v82 * v135) + (float)(v86 * v136));
          float v150 = (float)(v87 * v144) + (float)((float)(v80 * v142) + (float)(v83 * v143));
          float v151 = (float)(v88 * v144) + (float)((float)(v81 * v142) + (float)(v85 * v143));
          float v152 = (float)(v91 * v144) + (float)((float)(v82 * v142) + (float)(v86 * v143));
          *(float *)v550 = v145;
          *(float *)&v550[4] = v146;
          *(float *)&v550[8] = v147;
          *(float *)&v550[12] = (float)(v87 * v137) + (float)((float)(v80 * v135) + (float)(v83 * v136));
          *(float *)&v550[16] = v148;
          *(float *)&int v551 = v149;
          float v552 = v150;
          float v553 = v151;
          float v153 = v537;
          float v154 = v538;
          float v554 = v152;
          float v555 = v537;
          float v155 = v539;
          float v556 = v538;
          float v557 = v539;
          uint64_t v156 = *(unsigned int *)(*(void *)&v70 + 32);
          uint64_t v157 = *(void *)(*(void *)&v70 + 40);
          uint64_t v158 = *(void *)(*(void *)&v70 + 48);
          int v159 = (*(unsigned __int8 *)(*(void *)&v70 + 92) >> 1) & 1;
          float32x2_t v520 = v70;
          if (v502 > v501)
          {
            if (v495 == 0.0)
            {
              uint64_t v165 = 0;
              float v31 = v496;
              float v12 = v497;
              float32x2_t v32 = v503;
              float v34 = -0.5;
            }
            else
            {
              uint64_t v166 = *(unsigned int *)(*(void *)&v70 + 28);
              *(_DWORD *)(a2 + 36) = 1065353216;
              void *v505 = 0;
              *(void *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              void *v506 = 0;
              *(void *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              void *v504 = 0;
              *(void *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              if (v166)
              {
                uint64_t v167 = 12 * v166;
                float v526 = v145;
                float v523 = v146;
                float v516 = (float)(v87 * v137) + (float)((float)(v80 * v135) + (float)(v83 * v136));
                float v518 = v147;
                uint64_t v168 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, float))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v166, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 632, v495);
                uint64_t v169 = v168;
                uint64_t v170 = 0;
                uint64_t v171 = v157 + 8;
                do
                {
                  float v172 = *(float *)(v157 + v170);
                  float v173 = *(float *)(v171 + v170 - 4);
                  float v174 = (float)(v526 * v172) + (float)(v516 * v173);
                  float v175 = (float)(v523 * v172) + (float)(v148 * v173);
                  float v176 = (float)(v518 * v172) + (float)(v149 * v173);
                  float v177 = *(float *)(v171 + v170);
                  v178 = (float *)(v168 + v170);
                  float *v178 = v153 + (float)(v174 + (float)(v150 * v177));
                  v178[1] = v154 + (float)(v175 + (float)(v151 * v177));
                  v178[2] = v155 + (float)(v176 + (float)(v152 * v177));
                  v170 += 12;
                }
                while (v167 != v170);
              }
              else
              {
                uint64_t v169 = 0;
              }
              uint64_t v424 = *(void *)(a2 + 104);
              unsigned int v425 = *(_DWORD *)(v424 + 32);
              unsigned int v426 = *(_DWORD *)(v424 + 36) & 0x7FFFFFFF;
              unsigned int v427 = v425 + 3 * v156;
              float v31 = v496;
              float v12 = v497;
              float32x2_t v32 = v503;
              float v34 = -0.5;
              if (v427 > v426)
              {
                unsigned int v428 = 2 * *(_DWORD *)(v424 + 36);
                if (!v426) {
                  unsigned int v428 = 2;
                }
                if (v427 <= v428) {
                  unsigned int v429 = v428;
                }
                else {
                  unsigned int v429 = v427;
                }
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v424 + 24, v429);
                unsigned int v425 = *(_DWORD *)(v424 + 32);
              }
              uint64_t v430 = *(void *)(v424 + 24);
              *(_DWORD *)(v424 + 32) = v427;
              if (v156)
              {
                int v431 = 0;
                uint64_t v432 = v430 + 32 * v425;
                do
                {
                  getTriangle(v431, (uint64_t)v558, v169, v158, v159);
                  long long v433 = *(_OWORD *)v558;
                  uint64_t v434 = *(void *)&v558[16];
                  *(void *)uint64_t v432 = *(void *)v558;
                  *(_DWORD *)(v432 + 8) = DWORD2(v433);
                  *(_DWORD *)(v432 + 12) = -65281;
                  *(_DWORD *)(v432 + 16) = HIDWORD(v433);
                  *(void *)(v432 + 20) = v434;
                  *(_DWORD *)(v432 + 28) = -65281;
                  uint64_t v435 = *(void *)&v558[24];
                  int v436 = *(_DWORD *)v559;
                  *(_DWORD *)(v432 + 32) = HIDWORD(v433);
                  *(void *)(v432 + 36) = v434;
                  *(_DWORD *)(v432 + 44) = -65281;
                  *(void *)(v432 + 48) = v435;
                  *(_DWORD *)(v432 + 56) = v436;
                  *(_DWORD *)(v432 + 60) = -65281;
                  *(void *)(v432 + 64) = v435;
                  *(_DWORD *)(v432 + 72) = v436;
                  *(_DWORD *)(v432 + 76) = -65281;
                  *(void *)(v432 + 80) = v433;
                  ++v431;
                  *(_DWORD *)(v432 + 88) = DWORD2(v433);
                  *(_DWORD *)(v432 + 92) = -65281;
                  v432 += 96;
                }
                while (v156 != v431);
              }
              if (v169) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v169);
              }
              uint64_t v165 = 0;
            }
          }
          else
          {
            float32x4_t v160 = (float32x4_t)vextq_s8(*(int8x16_t *)v500, *(int8x16_t *)v500, 8uLL);
            float32x4_t v161 = (float32x4_t)vextq_s8(*(int8x16_t *)v500, (int8x16_t)v160, 0xCuLL);
            float32x4_t v162 = vsubq_f32(*(float32x4_t *)v500, v161);
            *(uint64_t *)((char *)v161.i64 + 4) = *((void *)v500 + 2);
            float32x4_t v163 = vaddq_f32(*(float32x4_t *)v500, v161);
            v163.i32[3] = v162.i32[3];
            float32x2_t v164 = vsub_f32(*(float32x2_t *)(v500 + 4), (float32x2_t)vext_s8(*(int8x8_t *)v500, *(int8x8_t *)v160.f32, 4uLL));
            v160.i64[0] = 0x3F0000003F000000;
            v160.i64[1] = 0x3F0000003F000000;
            *(_OWORD *)v558 = xmmword_23435FD50;
            *(_OWORD *)&v558[16] = xmmword_23435FD50;
            *(_DWORD *)v559 = 1065353216;
            *(float32x4_t *)&v559[4] = vmulq_f32(v163, v160);
            *(float32x2_t *)&v559[20] = vmul_f32(v164, (float32x2_t)0x3F0000003F000000);
            if (v156) {
              uint64_t v165 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v156, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpShapeManager.cpp", 602);
            }
            else {
              uint64_t v165 = 0;
            }
            float v31 = v496;
            float v12 = v497;
            float32x2_t v32 = v503;
            float v34 = -0.5;
            uint64_t v546 = v165;
            int v548 = v156;
            unsigned int v547 = 0;
            uint64_t *v491 = 0;
            *((unsigned char *)v491 + 8) = 0;
            ((void (*)(unsigned char *, void, float *, float *, uint64_t *))physx::Gu::gMidphaseBoxOverlapTable[*(unsigned __int16 *)(*(void *)&v70 + 8) - 3])(v558, *(void *)&v70, &v533, v89, &v546);
            uint64_t v528 = v547;
            if (v495 != 0.0)
            {
              *(_DWORD *)(a2 + 36) = 1065353216;
              void *v505 = 0;
              *(void *)(a2 + 48) = 0;
              *(_DWORD *)(a2 + 56) = 1065353216;
              void *v506 = 0;
              *(void *)(a2 + 68) = 0;
              *(_DWORD *)(a2 + 76) = 1065353216;
              void *v504 = 0;
              *(void *)(a2 + 88) = 0;
              *(_DWORD *)(a2 + 96) = 1065353216;
              *(_DWORD *)(a2 + 4) = -65281;
              uint64_t v358 = *(void *)(a2 + 104);
              unsigned int v359 = *(_DWORD *)(v358 + 32);
              unsigned int v360 = *(_DWORD *)(v358 + 36) & 0x7FFFFFFF;
              unsigned int v361 = v359 + 3 * v528;
              if (v361 > v360)
              {
                unsigned int v362 = 2 * *(_DWORD *)(v358 + 36);
                if (!v360) {
                  unsigned int v362 = 2;
                }
                if (v361 <= v362) {
                  unsigned int v363 = v362;
                }
                else {
                  unsigned int v363 = v361;
                }
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v358 + 24, v363);
                unsigned int v359 = *(_DWORD *)(v358 + 32);
              }
              uint64_t v364 = *(void *)(v358 + 24);
              *(_DWORD *)(v358 + 32) = v361;
              if (v528)
              {
                uint64_t v365 = v364 + 32 * v359;
                v366 = (int *)v165;
                uint64_t v367 = v528;
                do
                {
                  int v368 = *v366++;
                  getTriangle(v368, (uint64_t)&v560, v157, v158, (uint64_t)v550, v159);
                  v33.n128_f32[0] = v560;
                  *(float *)v23.i32 = v561;
                  *(float *)&double v24 = v562;
                  *(float *)v25.i32 = v563;
                  *(float *)&double v26 = v564;
                  *(float *)&double v27 = v565;
                  *(float *)uint64_t v365 = v560;
                  *(_DWORD *)(v365 + 4) = v23.i32[0];
                  *(_DWORD *)(v365 + 8) = LODWORD(v24);
                  *(_DWORD *)(v365 + 12) = -65281;
                  *(_DWORD *)(v365 + 16) = v25.i32[0];
                  *(_DWORD *)(v365 + 20) = LODWORD(v26);
                  *(_DWORD *)(v365 + 24) = LODWORD(v27);
                  *(_DWORD *)(v365 + 28) = -65281;
                  *(float *)&double v28 = v566;
                  v29.i32[0] = v567;
                  int v369 = v568;
                  *(_DWORD *)(v365 + 32) = v25.i32[0];
                  *(_DWORD *)(v365 + 36) = LODWORD(v26);
                  *(_DWORD *)(v365 + 40) = LODWORD(v27);
                  *(_DWORD *)(v365 + 44) = -65281;
                  *(_DWORD *)(v365 + 48) = LODWORD(v28);
                  *(_DWORD *)(v365 + 52) = v29.i32[0];
                  *(_DWORD *)(v365 + 56) = v369;
                  *(_DWORD *)(v365 + 60) = -65281;
                  *(_DWORD *)(v365 + 64) = LODWORD(v28);
                  *(_DWORD *)(v365 + 68) = v29.i32[0];
                  *(_DWORD *)(v365 + 72) = v369;
                  *(_DWORD *)(v365 + 76) = -65281;
                  *(_DWORD *)(v365 + 80) = v33.n128_u32[0];
                  *(_DWORD *)(v365 + 84) = v23.i32[0];
                  *(_DWORD *)(v365 + 88) = LODWORD(v24);
                  *(_DWORD *)(v365 + 92) = -65281;
                  v365 += 96;
                  --v367;
                }
                while (v367);
              }
            }
            LODWORD(v156) = v528;
          }
          if (v499 != 0.0)
          {
            *(_DWORD *)(a2 + 36) = 1065353216;
            void *v505 = 0;
            *(void *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 56) = 1065353216;
            void *v506 = 0;
            *(void *)(a2 + 68) = 0;
            *(_DWORD *)(a2 + 76) = 1065353216;
            void *v504 = 0;
            *(void *)(a2 + 88) = 0;
            *(_DWORD *)(a2 + 96) = 1065353216;
            *(_DWORD *)(a2 + 4) = -2004353024;
            if (v156)
            {
              uint64_t v437 = 0;
              do
              {
                if (v165) {
                  int v438 = *(_DWORD *)(v165 + 4 * v437);
                }
                else {
                  int v438 = v437;
                }
                getTriangle(v438, (uint64_t)v558, v157, v158, (uint64_t)v550, v159);
                float v439 = (float)((float)(*(float *)&v558[4] - *(float *)&v558[16])
                             * (float)(*(float *)&v558[8] - *(float *)v559))
                     - (float)((float)(*(float *)&v558[8] - *(float *)&v558[20])
                             * (float)(*(float *)&v558[4] - *(float *)&v558[28]));
                float v440 = (float)((float)(*(float *)&v558[8] - *(float *)&v558[20])
                             * (float)(*(float *)v558 - *(float *)&v558[24]))
                     - (float)((float)(*(float *)v558 - *(float *)&v558[12])
                             * (float)(*(float *)&v558[8] - *(float *)v559));
                float v441 = (float)((float)(*(float *)v558 - *(float *)&v558[12])
                             * (float)(*(float *)&v558[4] - *(float *)&v558[28]))
                     - (float)((float)(*(float *)&v558[4] - *(float *)&v558[16])
                             * (float)(*(float *)v558 - *(float *)&v558[24]));
                float v442 = (float)((float)(v440 * v440) + (float)(v439 * v439)) + (float)(v441 * v441);
                float v443 = 0.0;
                float v444 = 0.0;
                float v445 = 0.0;
                if (v442 > 0.0)
                {
                  float v446 = 1.0 / sqrtf(v442);
                  float v445 = v439 * v446;
                  float v444 = v440 * v446;
                  float v443 = v441 * v446;
                }
                float v560 = (float)((float)(*(float *)v558 + *(float *)&v558[12]) + *(float *)&v558[24]) * 0.33333;
                float v561 = (float)((float)(*(float *)&v558[4] + *(float *)&v558[16]) + *(float *)&v558[28]) * 0.33333;
                float v562 = (float)((float)(*(float *)&v558[8] + *(float *)&v558[20]) + *(float *)v559) * 0.33333;
                float v563 = v560 + (float)(v499 * v445);
                float v564 = v561 + (float)(v499 * v444);
                float v565 = v562 + (float)(v499 * v443);
                float v566 = sqrtf((float)((float)((float)(v499 * v444) * (float)(v499 * v444))+ (float)((float)(v499 * v445) * (float)(v499 * v445)))+ (float)((float)(v499 * v443) * (float)(v499 * v443)))* 0.15;
                physx::Cm::operator<<((_DWORD *)a2, &v560);
                ++v437;
              }
              while (v156 != v437);
            }
          }
          v33.n128_f32[0] = v492;
          if (v492 == 0.0
            || (uint64_t v447 = *(void *)(*(void *)&v520 + 80)) == 0
            || (uint64_t v525 = *(void *)(*(void *)&v520 + 48),
                uint64_t v530 = *(void *)(*(void *)&v520 + 40),
                *(_DWORD *)(a2 + 4) = -256,
                !v156))
          {
LABEL_205:
            if (v165) {
              (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
            }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, v165, v33);
            a1 = v493;
            uint64_t v10 = v498;
            goto LABEL_208;
          }
          uint64_t v448 = 0;
          char v522 = *(unsigned char *)(*(void *)&v520 + 92);
          uint64_t v449 = v156;
          int v450 = -256;
          while (2)
          {
            if (v165) {
              unsigned int v451 = *(_DWORD *)(v165 + 4 * v448);
            }
            else {
              unsigned int v451 = v448;
            }
            v33.n128_f32[0] = getTriangle(v451, (uint64_t)v558, v530, v525, (uint64_t)v550, (v522 & 2) != 0);
            char v452 = *(unsigned char *)(v447 + v451);
            if ((v452 & 8) != 0)
            {
              uint64_t v453 = *(void *)(a2 + 104);
              unsigned int v454 = *(_DWORD *)(v453 + 32);
              unsigned int v455 = *(_DWORD *)(v453 + 36) & 0x7FFFFFFF;
              unsigned int v456 = v454 + 1;
              if (v454 + 1 > v455)
              {
                unsigned int v457 = 2 * *(_DWORD *)(v453 + 36);
                if (!v455) {
                  unsigned int v457 = 2;
                }
                if (v456 <= v457) {
                  unsigned int v458 = v457;
                }
                else {
                  unsigned int v458 = v456;
                }
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v453 + 24, v458);
                unsigned int v454 = *(_DWORD *)(v453 + 32);
                int v450 = *(_DWORD *)(a2 + 4);
              }
              uint64_t v459 = *(void *)(v453 + 24) + 32 * v454;
              *(_DWORD *)(v453 + 32) = v456;
              *(void *)uint64_t v459 = *(void *)v558;
              *(_DWORD *)(v459 + 8) = *(_DWORD *)&v558[8];
              v33.n128_u32[1] = *(_DWORD *)&v558[16];
              *(void *)(v459 + 16) = *(void *)&v558[12];
              v33.n128_u32[0] = *(_DWORD *)&v558[20];
              *(_DWORD *)(v459 + 24) = *(_DWORD *)&v558[20];
              *(_DWORD *)(v459 + 28) = v450;
              *(_DWORD *)(v459 + 12) = v450;
              if ((v452 & 0x10) != 0) {
                goto LABEL_188;
              }
LABEL_178:
              if ((v452 & 0x20) != 0)
              {
LABEL_196:
                uint64_t v467 = *(void *)(a2 + 104);
                unsigned int v468 = *(_DWORD *)(v467 + 32);
                unsigned int v469 = *(_DWORD *)(v467 + 36) & 0x7FFFFFFF;
                unsigned int v470 = v468 + 1;
                if (v468 + 1 > v469)
                {
                  unsigned int v471 = 2 * *(_DWORD *)(v467 + 36);
                  if (!v469) {
                    unsigned int v471 = 2;
                  }
                  if (v470 <= v471) {
                    unsigned int v472 = v471;
                  }
                  else {
                    unsigned int v472 = v470;
                  }
                  physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v467 + 24, v472);
                  unsigned int v468 = *(_DWORD *)(v467 + 32);
                  int v450 = *(_DWORD *)(a2 + 4);
                }
                uint64_t v473 = *(void *)(v467 + 24) + 32 * v468;
                *(_DWORD *)(v467 + 32) = v470;
                *(void *)uint64_t v473 = *(void *)v558;
                *(_DWORD *)(v473 + 8) = *(_DWORD *)&v558[8];
                v33.n128_u32[1] = *(_DWORD *)&v558[28];
                *(void *)(v473 + 16) = *(void *)&v558[24];
                v33.n128_u32[0] = *(_DWORD *)v559;
                *(_DWORD *)(v473 + 24) = *(_DWORD *)v559;
                *(_DWORD *)(v473 + 28) = v450;
                *(_DWORD *)(v473 + 12) = v450;
              }
            }
            else
            {
              if ((v452 & 0x10) == 0) {
                goto LABEL_178;
              }
LABEL_188:
              uint64_t v460 = *(void *)(a2 + 104);
              unsigned int v461 = *(_DWORD *)(v460 + 32);
              unsigned int v462 = *(_DWORD *)(v460 + 36) & 0x7FFFFFFF;
              unsigned int v463 = v461 + 1;
              if (v461 + 1 > v462)
              {
                unsigned int v464 = 2 * *(_DWORD *)(v460 + 36);
                if (!v462) {
                  unsigned int v464 = 2;
                }
                if (v463 <= v464) {
                  unsigned int v465 = v464;
                }
                else {
                  unsigned int v465 = v463;
                }
                physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v460 + 24, v465);
                unsigned int v461 = *(_DWORD *)(v460 + 32);
                int v450 = *(_DWORD *)(a2 + 4);
              }
              uint64_t v466 = *(void *)(v460 + 24) + 32 * v461;
              *(_DWORD *)(v460 + 32) = v463;
              *(void *)uint64_t v466 = *(void *)&v558[12];
              *(_DWORD *)(v466 + 8) = *(_DWORD *)&v558[20];
              v33.n128_u32[1] = *(_DWORD *)&v558[28];
              *(void *)(v466 + 16) = *(void *)&v558[24];
              v33.n128_u32[0] = *(_DWORD *)v559;
              *(_DWORD *)(v466 + 24) = *(_DWORD *)v559;
              *(_DWORD *)(v466 + 28) = v450;
              *(_DWORD *)(v466 + 12) = v450;
              if ((v452 & 0x20) != 0) {
                goto LABEL_196;
              }
            }
            if (v449 == ++v448) {
              goto LABEL_205;
            }
            continue;
          }
        }
LABEL_208:
        if (v510)
        {
          v33.n128_u64[1] = v531.u64[1];
          int16x4_t v474 = vmovn_s32(vcgtq_f32(v531, v509));
          double v24 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v509, v531)));
          v474.i16[3] = HIWORD(v24);
          int8x16_t v23 = (int8x16_t)vmovl_s16(v474);
          int8x16_t v25 = vbslq_s8(v23, (int8x16_t)v509, (int8x16_t)v531);
          float32x4_t v509 = (float32x4_t)v25;
          *(int32x2_t *)v23.i8 = vcgt_f32(v32, v532);
          float32x2_t v32 = (float32x2_t)vbsl_s8(*(int8x8_t *)v23.i8, (int8x8_t)v32, (int8x8_t)v532);
        }
        if (++v30 == v10)
        {
          if (v510 & vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v509, (float32x4_t)vdupq_laneq_s32((int32x4_t)v509, 3)))).u16[0])
          {
            *(_DWORD *)(a2 + 4) = -65281;
            *(_DWORD *)(a2 + 36) = 1065353216;
            void *v505 = 0;
            *(void *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 56) = 1065353216;
            void *v506 = 0;
            *(void *)(a2 + 68) = 0;
            *(_DWORD *)(a2 + 76) = 1065353216;
            void *v504 = 0;
            *(void *)(a2 + 88) = 0;
            *(_DWORD *)(a2 + 96) = 1065353216;
            *(float32x4_t *)v558 = v509;
            *(float32x2_t *)&v558[16] = v32;
            v558[24] = 1;
            physx::Cm::operator<<((_DWORD *)a2, (uint64_t *)v558);
          }
          return;
        }
      }
    }
  }
}

const char *physx::PxRigidDynamic::getConcreteTypeName(physx::PxRigidDynamic *this)
{
  return "PxRigidDynamic";
}

BOOL physx::PxRigidDynamic::isKindOf(physx::PxRigidDynamic *this, const char *a2)
{
  if (!strcmp("PxRigidDynamic", a2)) {
    return 1;
  }
  return physx::PxRigidBody::isKindOf(this, a2);
}

uint64_t physx::NpRigidDynamic::getType(physx::NpRigidDynamic *this)
{
  return 1;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getScene(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  float v4 = (float)(v12 + v14) * 0.5;
  float v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  float v6 = v4 - v5;
  float result = v4 + v5;
  float32x2_t v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  float32x2_t v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  float v6 = result;
  if (a2 != 8) {
    goto LABEL_35;
  }
  uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float32x2_t v8 = (int32x2_t *)((char *)result + v7);
  unint64_t v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if (v9) {
    uint64_t v10 = (int32x2_t *)v8[2];
  }
  else {
    uint64_t v10 = (int32x2_t *)((char *)v8 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v11 = (uint64_t)*v8;
  int v12 = v10->u8[0];
  if (v12 & 8) == 0 || (a3)
  {
    if ((v12 & 8) != 0 || !a3) {
      goto LABEL_35;
    }
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    int v18 = v12 | 8;
    uint64_t v19 = (uint64_t)v6 + v7;
    unsigned int v20 = BYTE3(v9) & 0xF;
    uint64_t v21 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    unsigned int v22 = v9 >> 30;
    if (v22 == 2)
    {
      int8x16_t v23 = *(void **)v19;
      if (*(unsigned char *)(*(void *)v19 + 7689)) {
        goto LABEL_28;
      }
    }
    else if (v22 == 3)
    {
      int8x16_t v23 = *(void **)v19;
LABEL_28:
      double v27 = *(unsigned char **)(v19 + 16);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        double v27 = v28;
        *(void *)(v19 + 16) = v28;
        int8x16_t v23 = *(void **)v19;
      }
      *double v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *(_DWORD *)(v19 + 8) |= 1u;
LABEL_34:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v6 + 672))(v6);
      goto LABEL_35;
    }
    int32x4_t v29 = (unsigned char *)(v21 + v19);
    if (v18 != *(unsigned __int8 *)(v21 + v19 + 12))
    {
      v29[12] = v18;
      if (*(void *)v29) {
        (*(void (**)(void))(**(void **)v29 + 16))(*(void *)v29);
      }
    }
    goto LABEL_34;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 680))(result);
  unsigned int v13 = v12 & 0xFFFFFFF7;
  uint64_t v14 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v15 = *(unsigned int *)(v14 + 8);
  uint64_t v16 = (v15 >> 24) & 0xF;
  unsigned int v17 = v15 >> 30;
  if (v17 == 2)
  {
    float result = *(int32x2_t **)v14;
    if (*(unsigned char *)(*(void *)v14 + 7689)) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v26 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3) + v14;
    if (v13 != *(unsigned __int8 *)(v26 + 12))
    {
      *(unsigned char *)(v26 + 12) = v13;
      float result = *(int32x2_t **)v26;
      if (*(void *)v26) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_24;
  }
  if (v17 != 3) {
    goto LABEL_21;
  }
  float result = *(int32x2_t **)v14;
LABEL_18:
  double v24 = *(unsigned char **)(v14 + 16);
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    double v24 = v25;
    *(void *)(v14 + 16) = v25;
    float result = *(int32x2_t **)v14;
  }
  *double v24 = v13;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v14, a4);
  *(_DWORD *)(v14 + 8) |= 1u;
LABEL_24:
  if (v11 && *(void *)&v6[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
  }
LABEL_35:
  uint64_t v30 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v31 = *(unsigned int *)(v30 + 8);
  if (a3)
  {
    if (v31)
    {
      float v34 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      float v34 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v34 | a2;
  }
  else
  {
    if (v31)
    {
      uint64_t v35 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      uint64_t v35 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v35 & ~a2;
  }
  unsigned int v37 = v31 >> 30;
  if (v37 == 2)
  {
    float result = *(int32x2_t **)v30;
    if (*(unsigned char *)(*(void *)v30 + 7689)) {
      goto LABEL_48;
    }
  }
  else if (v37 == 3)
  {
    float result = *(int32x2_t **)v30;
LABEL_48:
    float v38 = *(unsigned char **)(v30 + 16);
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      float v38 = v39;
      *(void *)(v30 + 16) = v39;
      float result = *(int32x2_t **)v30;
    }
    *float v38 = v36;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v30, a4);
    *(_DWORD *)(v30 + 8) |= 1u;
    return result;
  }
  if (v36 != *(unsigned __int8 *)(v33 + 12))
  {
    *(unsigned char *)(v33 + 12) = v36;
    float result = *(int32x2_t **)v33;
    if (*(void *)v33)
    {
      float v40 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v40();
    }
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::setActorFlags(int32x2_t *result, unsigned char *a2, int8x8_t a3)
{
  float v4 = result;
  uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float v6 = (int32x2_t *)((char *)result + v5);
  unint64_t v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if (v7) {
    float32x2_t v8 = (int32x2_t *)v6[2];
  }
  else {
    float32x2_t v8 = (int32x2_t *)((char *)v6 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v9 = (uint64_t)*v6;
  int v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0) {
      goto LABEL_34;
    }
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    int v16 = v10 | 8;
    uint64_t v17 = (uint64_t)v4 + v5;
    unsigned int v18 = BYTE3(v7) & 0xF;
    uint64_t v19 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    unsigned int v20 = v7 >> 30;
    if (v20 == 2)
    {
      uint64_t v21 = *(void **)v17;
      if (*(unsigned char *)(*(void *)v17 + 7689)) {
        goto LABEL_27;
      }
    }
    else if (v20 == 3)
    {
      uint64_t v21 = *(void **)v17;
LABEL_27:
      int8x16_t v25 = *(unsigned char **)(v17 + 16);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        int8x16_t v25 = v26;
        *(void *)(v17 + 16) = v26;
        uint64_t v21 = *(void **)v17;
      }
      *int8x16_t v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *(_DWORD *)(v17 + 8) |= 1u;
LABEL_33:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v4 + 672))(v4);
      goto LABEL_34;
    }
    double v27 = (unsigned char *)(v19 + v17);
    if (v16 != *(unsigned __int8 *)(v19 + v17 + 12))
    {
      v27[12] = v16;
      if (*(void *)v27) {
        (*(void (**)(void))(**(void **)v27 + 16))(*(void *)v27);
      }
    }
    goto LABEL_33;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 680))(result);
  unsigned int v11 = v10 & 0xFFFFFFF7;
  uint64_t v12 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v13 = *(unsigned int *)(v12 + 8);
  uint64_t v14 = (v13 >> 24) & 0xF;
  unsigned int v15 = v13 >> 30;
  if (v15 == 2)
  {
    float result = *(int32x2_t **)v12;
    if (*(unsigned char *)(*(void *)v12 + 7689)) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v24 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3) + v12;
    if (v11 != *(unsigned __int8 *)(v24 + 12))
    {
      *(unsigned char *)(v24 + 12) = v11;
      float result = *(int32x2_t **)v24;
      if (*(void *)v24) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_23;
  }
  if (v15 != 3) {
    goto LABEL_20;
  }
  float result = *(int32x2_t **)v12;
LABEL_17:
  unsigned int v22 = *(unsigned char **)(v12 + 16);
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    unsigned int v22 = v23;
    *(void *)(v12 + 16) = v23;
    float result = *(int32x2_t **)v12;
  }
  *unsigned int v22 = v11;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v12, a3);
  *(_DWORD *)(v12 + 8) |= 1u;
LABEL_23:
  if (v9 && *(void *)&v4[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
  }
LABEL_34:
  int v28 = *a2;
  uint64_t v29 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v30 = *(unsigned int *)(v29 + 8);
  uint64_t v31 = (v30 >> 24) & 0xF;
  unsigned int v32 = v30 >> 30;
  if (v32 == 2)
  {
    float result = *(int32x2_t **)v29;
    if (*(unsigned char *)(*(void *)v29 + 7689)) {
      goto LABEL_38;
    }
  }
  else if (v32 == 3)
  {
    float result = *(int32x2_t **)v29;
LABEL_38:
    uint64_t v33 = *(unsigned char **)(v29 + 16);
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      uint64_t v33 = v34;
      *(void *)(v29 + 16) = v34;
      float result = *(int32x2_t **)v29;
    }
    *uint64_t v33 = v28;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v29, a3);
    *(_DWORD *)(v29 + 8) |= 1u;
    return result;
  }
  uint64_t v35 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3) + v29;
  if (v28 != *(unsigned __int8 *)(v35 + 12))
  {
    *(unsigned char *)(v35 + 12) = v28;
    float result = *(int32x2_t **)v35;
    if (*(void *)v35)
    {
      int v36 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v36();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getActorFlags@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  unint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3) {
    float v4 = *(unsigned char **)(v2 + 16);
  }
  else {
    float v4 = (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  }
  *a2 = *v4;
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidDynamic>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  uint64_t v4 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  unsigned int v8 = v5 >> 30;
  if (v8 == 2)
  {
    uint64_t v9 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v8 == 3)
  {
    uint64_t v9 = *(void **)v4;
LABEL_5:
    uint64_t v10 = *(void *)(v4 + 16);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      uint64_t v10 = v11;
      *(void *)(v4 + 16) = v11;
      uint64_t v9 = *(void **)v4;
    }
    *(unsigned char *)(v10 + 1) = a2;
    float result = physx::Scb::Scene::scheduleForUpdate(v9, v4, a3);
    *(_DWORD *)(v4 + 8) |= 2u;
    return result;
  }
  *(unsigned char *)(v7 + v4 + 14) = a2;
  float result = *(void **)(v4 + v7);
  if (result)
  {
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0) {
    unint64_t v3 = (unsigned __int8 *)(*(void *)(v1 + 16) + 1);
  }
  else {
    unint64_t v3 = (unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  }
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(void *)v9)
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    uint64_t v11 = "Attempt to set the client id when an actor is already in a scene.";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  unint64_t v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    uint64_t v11 = "Attempt to set the client id when an actor is buffering";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getOwnerClient(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::getAggregate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(void *)(v1 + 72) + 8; *(unsigned char *)(i - 8) != 1; i += 16)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

float physx::NpRigidDynamic::getGlobalPose@<S0>(physx::NpRigidDynamic *this@<X0>, float *a2@<X8>)
{
  if ((*((unsigned char *)this + 381) & 4) != 0) {
    uint64_t v2 = (float *)(*((void *)this + 14) + 224);
  }
  else {
    uint64_t v2 = (float *)((char *)this + 176);
  }
  float v3 = v2[4] * -2.0;
  float v4 = v2[5] * -2.0;
  float v5 = v2[6] * -2.0;
  float v7 = v2[2];
  float v6 = v2[3];
  float v8 = (float)(v6 * v6) + -0.5;
  float v9 = v2[1];
  float v10 = (float)((float)(v4 * v9) + (float)(*v2 * v3)) + (float)(v7 * v5);
  float v11 = (float)((float)(v3 * v8) - (float)((float)((float)(v9 * v5) - (float)(v7 * v4)) * v6)) + (float)(*v2 * v10);
  float v12 = (float)((float)(v4 * v8) - (float)((float)((float)(v7 * v3) - (float)(*v2 * v5)) * v6)) + (float)(v9 * v10);
  float v13 = (float)((float)(v5 * v8) - (float)((float)((float)(*v2 * v4) - (float)(v9 * v3)) * v6)) + (float)(v7 * v10);
  float v14 = v11 + v11;
  float v15 = v12 + v12;
  float v16 = v13 + v13;
  float v17 = *((float *)this + 83);
  float v18 = (float)(v17 * v17) + -0.5;
  float v19 = *((float *)this + 80);
  float v20 = *((float *)this + 81);
  float v21 = *((float *)this + 82);
  float v22 = (float)((float)(v20 * (float)(v12 + v12)) + (float)(v19 * v14)) + (float)(v21 * v16);
  float v23 = (float)((float)(v17 * (float)((float)(v20 * v16) - (float)(v21 * v15))) + (float)(v14 * v18))
      + (float)(v19 * v22);
  float v24 = (float)((float)(v17 * (float)((float)(v21 * v14) - (float)(v19 * v16))) + (float)(v15 * v18))
      + (float)(v20 * v22);
  float v25 = (float)((float)(v17 * (float)((float)(v19 * v15) - (float)(v20 * v14))) + (float)(v16 * v18))
      + (float)(v21 * v22);
  float v26 = *((float *)this + 84) + v23;
  float v27 = *((float *)this + 85) + v24;
  float v28 = *((float *)this + 86);
  float v29 = (float)((float)((float)(v6 * v20) - (float)(v17 * v9)) - (float)(v21 * *v2)) + (float)(v7 * v19);
  float v30 = (float)((float)((float)(v6 * v21) - (float)(v17 * v7)) - (float)(v19 * v9)) + (float)(*v2 * v20);
  float v31 = *v2 * v19;
  *a2 = (float)((float)((float)(v6 * v19) - (float)(v17 * *v2)) - (float)(v20 * v7)) + (float)(v9 * v21);
  a2[1] = v29;
  a2[2] = v30;
  a2[3] = (float)((float)(v31 + (float)(v17 * v6)) + (float)(v20 * v9)) + (float)(v21 * v7);
  float result = v28 + v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v28 + v25;
  return result;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 1;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  float v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v19);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
  {
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v18, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getShapes(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  float v4 = (void *)(a1 + 40);
  int v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1) {
    float v4 = (void *)*v4;
  }
  unsigned int v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v6;
  }
  if (result)
  {
    float v8 = &v4[a4];
    uint64_t v9 = result;
    do
    {
      uint64_t v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getNbConstraints(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  LODWORD(result) = 0;
  float v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    int v5 = *v4;
    v4 += 16;
    if (v5) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getCMassLocalPose@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 381) & 4) != 0) {
    uint64_t v2 = *(void *)(a1 + 112) + 224;
  }
  else {
    uint64_t v2 = a1 + 176;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = *(void *)(v2 + 16);
  float result = *(float *)(v2 + 24);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMass(uint64_t *result, float a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)(result + 12);
  float v4 = 1.0 / a2;
  BOOL v5 = a2 <= 0.0;
  int8x8_t v6 = 0;
  if (v5) {
    float v7 = 0.0;
  }
  else {
    float v7 = v4;
  }
  unsigned int v8 = *((_DWORD *)result + 26);
  if (v8 >> 30 == 2)
  {
    float result = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_8;
    }
  }
  else if (v8 >> 30 == 3)
  {
    float result = *(uint64_t **)v3;
LABEL_8:
    uint64_t v9 = v2[14];
    if (!v9)
    {
      int8x8_t v6 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v8) & 0xF).n128_u64[0];
      uint64_t v9 = v10;
      v2[14] = v10;
      float result = (uint64_t *)v2[12];
    }
    *(float *)(v9 + 164) = v7;
    float result = physx::Scb::Scene::scheduleForUpdate(result, v3, v6);
    *((_DWORD *)v2 + 95) |= 1u;
    return result;
  }
  uint64_t v11 = v2[38];
  if (v11 && *(unsigned char *)(v11 + 31) == 1)
  {
    *(float *)(v11 + 44) = v7;
  }
  else
  {
    *((float *)v2 + 67) = v7;
    return updateBodySim(v2 + 16);
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMass(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 380))
  {
    uint64_t v2 = (float *)(*(void *)(a1 + 112) + 164);
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 304);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      uint64_t v2 = (float *)(v1 + 44);
    }
    else {
      uint64_t v2 = (float *)(a1 + 268);
    }
  }
  float result = 0.0;
  if (*v2 > 0.0) {
    return 1.0 / *v2;
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getInvMass(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 380))
  {
    uint64_t v2 = *(void *)(a1 + 112) + 164;
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 304);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      uint64_t v2 = v1 + 44;
    }
    else {
      uint64_t v2 = a1 + 268;
    }
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMassSpaceInertiaTensor(uint64_t a1, float32x2_t *a2)
{
  uint64_t v3 = a1 + 96;
  __asm { FMOV            V2.2S, #1.0 }
  int8x8_t v9 = vbic_s8((int8x8_t)vdiv_f32(_D2, *a2), (int8x8_t)vceqz_f32(*a2));
  float v10 = a2[1].f32[0];
  float v11 = 1.0 / v10;
  _ZF = v10 == 0.0;
  int8x8_t v12 = 0;
  if (_ZF) {
    float v13 = 0.0;
  }
  else {
    float v13 = v11;
  }
  int8x8_t v19 = v9;
  float v20 = v13;
  unsigned int v14 = *(_DWORD *)(a1 + 104);
  if (v14 >> 30 == 2)
  {
    uint64_t v15 = *(void **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_8;
    }
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v19);
  }
  if (v14 >> 30 != 3) {
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v19);
  }
  uint64_t v15 = *(void **)v3;
LABEL_8:
  uint64_t v16 = *(void *)(a1 + 112);
  if (!v16)
  {
    int8x8_t v12 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v15, HIBYTE(v14) & 0xF).n128_u64[0];
    uint64_t v16 = v17;
    *(void *)(a1 + 112) = v17;
    uint64_t v15 = *(void **)(a1 + 96);
  }
  *(int8x8_t *)(v16 + 168) = v9;
  *(float *)(v16 + 176) = v13;
  float result = physx::Scb::Scene::scheduleForUpdate(v15, v3, v12);
  *(_DWORD *)(a1 + 380) |= 2u;
  return result;
}

float32x2_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMassSpaceInertiaTensor@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  if ((result[47].i8[4] & 2) != 0)
  {
    uint64_t v3 = (float32x2_t *)(*(void *)&result[14] + 168);
  }
  else
  {
    uint64_t v2 = (float32x2_t *)result[38];
    if (v2 && v2[3].i8[7] == 1) {
      uint64_t v3 = v2 + 4;
    }
    else {
      uint64_t v3 = result + 32;
    }
  }
  float v4 = v3[1].f32[0];
  float v5 = 1.0 / v4;
  _ZF = v4 == 0.0;
  float v7 = 0.0;
  if (!_ZF) {
    float v7 = v5;
  }
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)a2 = vbic_s8((int8x8_t)vdiv_f32(_D3, *v3), (int8x8_t)vceqz_f32(*v3));
  *(float *)(a2 + 8) = v7;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMassSpaceInvInertiaTensor@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 380) & 2) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 112) + 168;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 304);
    if (v2 && *(unsigned char *)(v2 + 31) == 1) {
      uint64_t v3 = v2 + 32;
    }
    else {
      uint64_t v3 = a1 + 256;
    }
  }
  *(void *)a2 = *(void *)v3;
  float result = *(float *)(v3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getLinearVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 348);
  float result = *(float *)(a1 + 356);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getAngularVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 360);
  float result = *(float *)(a1 + 368);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setRigidBodyFlag(uint64_t a1, int a2, int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((*(unsigned char *)(a1 + 381) & 0x40) != 0) {
    float v11 = (unsigned __int8 *)(*(void *)(a1 + 112) + 348);
  }
  else {
    float v11 = (unsigned __int8 *)(a1 + 172);
  }
  int v12 = *v11;
  if (a3) {
    int v13 = v12 | a2;
  }
  else {
    int v13 = v12 & ~a2;
  }
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~0x20u;
  }
  unsigned int v14 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = *v14;
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  if (v16) {
    uint64_t v17 = v16 + 32;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v12 & 1) == 0 || (v13)
  {
    if ((v12 & 1) != 0 || (v13 & 1) == 0)
    {
LABEL_56:
      if ((v12 & 1) != 0
        && (v13 & 1) != 0
        && ((v13 ^ v12) & 2) != 0
        && ((*(unsigned char *)(a1 + 381) & 0x80) != 0
         || *(_DWORD *)(a1 + 104) >> 30 != 3
         && (uint64_t v31 = *(void *)(a1 + 304)) != 0
         && *(unsigned char *)(v31 + 31) == 1
         && *(unsigned char *)(v31 + 28)))
      {
        if (v16)
        {
          physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
          ++*(_DWORD *)(v16 + 8732);
        }
      }
LABEL_66:
      char v33 = v13;
      physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v33, *(int8x8_t *)&a4);
      return;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != 2)
    {
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        uint64_t v29 = *(void *)(a1 + 304);
        if (v29)
        {
          if (*(unsigned char *)(v29 + 31) != 1) {
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), 1, 0);
          }
        }
      }
      if (v16)
      {
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a4;
      }
      goto LABEL_66;
    }
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v28, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v19 = a1 + 40;
    if (v18 != 1)
    {
      if (*(_WORD *)(a1 + 48))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        goto LABEL_24;
      }
LABEL_28:
      if ((v12 & 2) != 0)
      {
        if ((*(unsigned char *)(a1 + 381) & 0x80) != 0)
        {
          if (!v16)
          {
LABEL_53:
            if (*(_DWORD *)(a1 + 104) >> 30 == 1)
            {
              uint64_t v30 = *(void *)(a1 + 304);
              if (v30) {
                physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), *(unsigned __int8 *)(v30 + 31) == 1);
              }
            }
            goto LABEL_56;
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) >> 30 == 3) {
            goto LABEL_35;
          }
          uint64_t v24 = *(void *)(a1 + 304);
          if (!v24 || *(unsigned char *)(v24 + 31) != 1 || !*(unsigned char *)(v24 + 28) || !v16) {
            goto LABEL_35;
          }
        }
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
LABEL_52:
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
        *(double *)(v17 + 4668) = a4;
        goto LABEL_53;
      }
LABEL_35:
      if (!v16) {
        goto LABEL_53;
      }
      goto LABEL_52;
    }
LABEL_24:
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v19 + 312))(&v34);
      if (v34)
      {
        int v23 = *(_DWORD *)(*(void *)v19 + 152);
        if ((v23 | 4) == 5 || v23 == 6) {
          break;
        }
      }
      v19 += 8;
      if (!--v18) {
        goto LABEL_28;
      }
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v32);
  }
}

void physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setRigidBodyFlags(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((*(unsigned char *)(a1 + 381) & 0x40) != 0) {
    float v11 = (unsigned __int8 *)(*(void *)(a1 + 112) + 348);
  }
  else {
    float v11 = (unsigned __int8 *)(a1 + 172);
  }
  int v12 = *v11;
  int v13 = *a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v32);
    v13 &= 0xDFu;
  }
  unsigned int v14 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = *v14;
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  if (v16) {
    uint64_t v17 = v16 + 32;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v12 & 1) == 0 || (v13)
  {
    if ((v12 & 1) != 0 || (v13 & 1) == 0)
    {
LABEL_53:
      if ((v12 & 1) != 0
        && (v13 & 1) != 0
        && ((v13 ^ v12) & 2) != 0
        && ((*(unsigned char *)(a1 + 381) & 0x80) != 0
         || *(_DWORD *)(a1 + 104) >> 30 != 3
         && (uint64_t v31 = *(void *)(a1 + 304)) != 0
         && *(unsigned char *)(v31 + 31) == 1
         && *(unsigned char *)(v31 + 28)))
      {
        if (v16)
        {
          physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
          ++*(_DWORD *)(v16 + 8732);
        }
      }
LABEL_63:
      char v33 = v13;
      physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v33, *(int8x8_t *)&a3);
      return;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != 2)
    {
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        uint64_t v29 = *(void *)(a1 + 304);
        if (v29)
        {
          if (*(unsigned char *)(v29 + 31) != 1) {
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), 1, 0);
          }
        }
      }
      if (v16)
      {
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a3;
      }
      goto LABEL_63;
    }
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v28, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v19 = a1 + 40;
    if (v18 != 1)
    {
      if (*(_WORD *)(a1 + 48))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        goto LABEL_21;
      }
LABEL_25:
      if ((v12 & 2) != 0)
      {
        if ((*(unsigned char *)(a1 + 381) & 0x80) != 0)
        {
          if (!v16)
          {
LABEL_50:
            if (*(_DWORD *)(a1 + 104) >> 30 == 1)
            {
              uint64_t v30 = *(void *)(a1 + 304);
              if (v30) {
                physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), *(unsigned __int8 *)(v30 + 31) == 1);
              }
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) >> 30 == 3) {
            goto LABEL_32;
          }
          uint64_t v24 = *(void *)(a1 + 304);
          if (!v24 || *(unsigned char *)(v24 + 31) != 1 || !*(unsigned char *)(v24 + 28) || !v16) {
            goto LABEL_32;
          }
        }
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
LABEL_49:
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
        *(double *)(v17 + 4668) = a3;
        goto LABEL_50;
      }
LABEL_32:
      if (!v16) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_21:
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v19 + 312))(&v34);
      if (v34)
      {
        int v23 = *(_DWORD *)(*(void *)v19 + 152);
        if ((v23 | 4) == 5 || v23 == 6) {
          break;
        }
      }
      v19 += 8;
      if (!--v18) {
        goto LABEL_25;
      }
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v32);
  }
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getRigidBodyFlags@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(result + 381) & 0x40) != 0) {
    uint64_t v2 = (unsigned char *)(*(void *)(result + 112) + 348);
  }
  else {
    uint64_t v2 = (unsigned char *)(result + 172);
  }
  *a2 = *v2;
  return result;
}

void *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMinCCDAdvanceCoefficient(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t)(result + 12);
  unsigned int v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 51) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[14];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[14] = v7;
    float result = (void *)v3[12];
  }
  *(_DWORD *)(v6 + 200) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 95) |= 0x80u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMinCCDAdvanceCoefficient(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 380) & 0x80) != 0) {
    uint64_t v1 = *(void *)(a1 + 112) + 200;
  }
  else {
    uint64_t v1 = a1 + 204;
  }
  return *(float *)v1;
}

float *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMaxDepenetrationVelocity(float *result, double a2)
{
  __int32 v2 = result;
  uint64_t v3 = (uint64_t)(result + 24);
  float v4 = -*(float *)&a2;
  unsigned int v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    float result = *(float **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    v2[55] = v4;
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(float **)v3;
LABEL_5:
  uint64_t v6 = *((void *)v2 + 14);
  if (!v6)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    *((void *)v2 + 14) = v7;
    float result = (float *)*((void *)v2 + 12);
  }
  *(float *)(v6 + 252) = v4;
  float result = (float *)physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x800u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMaxDepenetrationVelocity(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 381) & 8) != 0) {
    uint64_t v1 = (float *)(*(void *)(a1 + 112) + 252);
  }
  else {
    uint64_t v1 = (float *)(a1 + 220);
  }
  return -*v1;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::setMaxContactImpulse(uint64_t a1, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  uint64_t v4 = a1 + 96;
  unsigned int v5 = *(_DWORD *)(a1 + 104);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    uint64_t v6 = *(void **)v4;
LABEL_5:
    uint64_t v7 = *(void *)(a1 + 112);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v7 = v8;
      *(void *)(a1 + 112) = v8;
      uint64_t v6 = *(void **)(a1 + 96);
    }
    *(_DWORD *)(v7 + 260) = v2;
    float result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
    *(_DWORD *)(a1 + 380) |= 0x2000u;
    return result;
  }
  *(_DWORD *)(a1 + 272) = a2.i32[0];
  return updateBodySim((uint64_t *)(a1 + 128));
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getMaxContactImpulse(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 381) & 0x20) != 0) {
    uint64_t v1 = *(void *)(a1 + 112) + 260;
  }
  else {
    uint64_t v1 = a1 + 272;
  }
  return *(float *)v1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::getInternalIslandNodeIndex(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    return *(_DWORD *)(v1 + 176) >> 7;
  }
  else {
    return 0x1FFFFFFLL;
  }
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::importExtraData(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >= 2)
  {
    unint64_t v3 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v3 + 8 * v2;
    *(void *)(a1 + 40) = v3;
  }
  unint64_t v4 = *(unsigned __int16 *)(a1 + 64);
  if (v4 >= 2)
  {
    unint64_t v5 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v5 + 8 * v4;
    *(void *)(a1 + 56) = v5;
  }
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  unint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48)) {
      goto LABEL_10;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  do
  {
    if (*v4)
    {
      uint64_t v6 = (**a2)(a2, 0x80000000);
      uint64_t *v4 = v6;
    }
    else
    {
      uint64_t v6 = 0;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 32), 1u);
    if ((*(_DWORD *)(v6 + 264) & 0x80000000) != 0) {
      *(void *)(v6 + 40) = a1;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 264), 1u);
    ++v4;
    --v5;
  }
  while (v5);
LABEL_10:
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

const char *physx::PxRigidStatic::getConcreteTypeName(physx::PxRigidStatic *this)
{
  return "PxRigidStatic";
}

BOOL physx::PxRigidStatic::isKindOf(physx::PxRigidStatic *this, const char *a2)
{
  if (!strcmp("PxRigidStatic", a2)) {
    return 1;
  }
  return physx::PxRigidActor::isKindOf(this, a2);
}

uint64_t physx::NpRigidStatic::getType(physx::NpRigidStatic *this)
{
  return 0;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getScene(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxRigidStatic>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  float v4 = (float)(v12 + v14) * 0.5;
  float v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  float v6 = v4 - v5;
  float result = v4 + v5;
  float32x2_t v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  float32x2_t v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidStatic>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  float v6 = result;
  if (a2 != 8) {
    goto LABEL_35;
  }
  uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float32x2_t v8 = (int32x2_t *)((char *)result + v7);
  unint64_t v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if (v9) {
    float v10 = (int32x2_t *)v8[2];
  }
  else {
    float v10 = (int32x2_t *)((char *)v8 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v11 = (uint64_t)*v8;
  int v12 = v10->u8[0];
  if (v12 & 8) == 0 || (a3)
  {
    if ((v12 & 8) != 0 || !a3) {
      goto LABEL_35;
    }
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    int v18 = v12 | 8;
    uint64_t v19 = (uint64_t)v6 + v7;
    unsigned int v20 = BYTE3(v9) & 0xF;
    uint64_t v21 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    unsigned int v22 = v9 >> 30;
    if (v22 == 2)
    {
      int v23 = *(void **)v19;
      if (*(unsigned char *)(*(void *)v19 + 7689)) {
        goto LABEL_28;
      }
    }
    else if (v22 == 3)
    {
      int v23 = *(void **)v19;
LABEL_28:
      uint64_t v27 = *(unsigned char **)(v19 + 16);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        uint64_t v27 = v28;
        *(void *)(v19 + 16) = v28;
        int v23 = *(void **)v19;
      }
      *uint64_t v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *(_DWORD *)(v19 + 8) |= 1u;
LABEL_34:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v6 + 248))(v6);
      goto LABEL_35;
    }
    uint64_t v29 = (unsigned char *)(v21 + v19);
    if (v18 != *(unsigned __int8 *)(v21 + v19 + 12))
    {
      v29[12] = v18;
      if (*(void *)v29) {
        (*(void (**)(void))(**(void **)v29 + 16))(*(void *)v29);
      }
    }
    goto LABEL_34;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 256))(result);
  unsigned int v13 = v12 & 0xFFFFFFF7;
  uint64_t v14 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v15 = *(unsigned int *)(v14 + 8);
  uint64_t v16 = (v15 >> 24) & 0xF;
  unsigned int v17 = v15 >> 30;
  if (v17 == 2)
  {
    float result = *(int32x2_t **)v14;
    if (*(unsigned char *)(*(void *)v14 + 7689)) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v26 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3) + v14;
    if (v13 != *(unsigned __int8 *)(v26 + 12))
    {
      *(unsigned char *)(v26 + 12) = v13;
      float result = *(int32x2_t **)v26;
      if (*(void *)v26) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_24;
  }
  if (v17 != 3) {
    goto LABEL_21;
  }
  float result = *(int32x2_t **)v14;
LABEL_18:
  uint64_t v24 = *(unsigned char **)(v14 + 16);
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    uint64_t v24 = v25;
    *(void *)(v14 + 16) = v25;
    float result = *(int32x2_t **)v14;
  }
  *uint64_t v24 = v13;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v14, a4);
  *(_DWORD *)(v14 + 8) |= 1u;
LABEL_24:
  if (v11 && *(void *)&v6[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
  }
LABEL_35:
  uint64_t v30 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v31 = *(unsigned int *)(v30 + 8);
  if (a3)
  {
    if (v31)
    {
      uint64_t v34 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      uint64_t v34 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v34 | a2;
  }
  else
  {
    if (v31)
    {
      uint64_t v35 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      uint64_t v35 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v35 & ~a2;
  }
  unsigned int v37 = v31 >> 30;
  if (v37 == 2)
  {
    float result = *(int32x2_t **)v30;
    if (*(unsigned char *)(*(void *)v30 + 7689)) {
      goto LABEL_48;
    }
  }
  else if (v37 == 3)
  {
    float result = *(int32x2_t **)v30;
LABEL_48:
    float v38 = *(unsigned char **)(v30 + 16);
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      float v38 = v39;
      *(void *)(v30 + 16) = v39;
      float result = *(int32x2_t **)v30;
    }
    *float v38 = v36;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v30, a4);
    *(_DWORD *)(v30 + 8) |= 1u;
    return result;
  }
  if (v36 != *(unsigned __int8 *)(v33 + 12))
  {
    *(unsigned char *)(v33 + 12) = v36;
    float result = *(int32x2_t **)v33;
    if (*(void *)v33)
    {
      float v40 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v40();
    }
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxRigidStatic>::setActorFlags(int32x2_t *result, unsigned char *a2, int8x8_t a3)
{
  float v4 = result;
  uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float v6 = (int32x2_t *)((char *)result + v5);
  unint64_t v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if (v7) {
    float32x2_t v8 = (int32x2_t *)v6[2];
  }
  else {
    float32x2_t v8 = (int32x2_t *)((char *)v6 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v9 = (uint64_t)*v6;
  int v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0) {
      goto LABEL_34;
    }
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    int v16 = v10 | 8;
    uint64_t v17 = (uint64_t)v4 + v5;
    unsigned int v18 = BYTE3(v7) & 0xF;
    uint64_t v19 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    unsigned int v20 = v7 >> 30;
    if (v20 == 2)
    {
      uint64_t v21 = *(void **)v17;
      if (*(unsigned char *)(*(void *)v17 + 7689)) {
        goto LABEL_27;
      }
    }
    else if (v20 == 3)
    {
      uint64_t v21 = *(void **)v17;
LABEL_27:
      uint64_t v25 = *(unsigned char **)(v17 + 16);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        uint64_t v25 = v26;
        *(void *)(v17 + 16) = v26;
        uint64_t v21 = *(void **)v17;
      }
      *uint64_t v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *(_DWORD *)(v17 + 8) |= 1u;
LABEL_33:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v4 + 248))(v4);
      goto LABEL_34;
    }
    uint64_t v27 = (unsigned char *)(v19 + v17);
    if (v16 != *(unsigned __int8 *)(v19 + v17 + 12))
    {
      v27[12] = v16;
      if (*(void *)v27) {
        (*(void (**)(void))(**(void **)v27 + 16))(*(void *)v27);
      }
    }
    goto LABEL_33;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 256))(result);
  unsigned int v11 = v10 & 0xFFFFFFF7;
  uint64_t v12 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v13 = *(unsigned int *)(v12 + 8);
  uint64_t v14 = (v13 >> 24) & 0xF;
  unsigned int v15 = v13 >> 30;
  if (v15 == 2)
  {
    float result = *(int32x2_t **)v12;
    if (*(unsigned char *)(*(void *)v12 + 7689)) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v24 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3) + v12;
    if (v11 != *(unsigned __int8 *)(v24 + 12))
    {
      *(unsigned char *)(v24 + 12) = v11;
      float result = *(int32x2_t **)v24;
      if (*(void *)v24) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_23;
  }
  if (v15 != 3) {
    goto LABEL_20;
  }
  float result = *(int32x2_t **)v12;
LABEL_17:
  unsigned int v22 = *(unsigned char **)(v12 + 16);
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    unsigned int v22 = v23;
    *(void *)(v12 + 16) = v23;
    float result = *(int32x2_t **)v12;
  }
  *unsigned int v22 = v11;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v12, a3);
  *(_DWORD *)(v12 + 8) |= 1u;
LABEL_23:
  if (v9 && *(void *)&v4[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
  }
LABEL_34:
  int v28 = *a2;
  uint64_t v29 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v30 = *(unsigned int *)(v29 + 8);
  uint64_t v31 = (v30 >> 24) & 0xF;
  unsigned int v32 = v30 >> 30;
  if (v32 == 2)
  {
    float result = *(int32x2_t **)v29;
    if (*(unsigned char *)(*(void *)v29 + 7689)) {
      goto LABEL_38;
    }
  }
  else if (v32 == 3)
  {
    float result = *(int32x2_t **)v29;
LABEL_38:
    uint64_t v33 = *(unsigned char **)(v29 + 16);
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      uint64_t v33 = v34;
      *(void *)(v29 + 16) = v34;
      float result = *(int32x2_t **)v29;
    }
    *uint64_t v33 = v28;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v29, a3);
    *(_DWORD *)(v29 + 8) |= 1u;
    return result;
  }
  uint64_t v35 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3) + v29;
  if (v28 != *(unsigned __int8 *)(v35 + 12))
  {
    *(unsigned char *)(v35 + 12) = v28;
    float result = *(int32x2_t **)v35;
    if (*(void *)v35)
    {
      int v36 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v36();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getActorFlags@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  unint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3) {
    float v4 = *(unsigned char **)(v2 + 16);
  }
  else {
    float v4 = (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  }
  *a2 = *v4;
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidStatic>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  uint64_t v4 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  unsigned int v8 = v5 >> 30;
  if (v8 == 2)
  {
    uint64_t v9 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v8 == 3)
  {
    uint64_t v9 = *(void **)v4;
LABEL_5:
    uint64_t v10 = *(void *)(v4 + 16);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      uint64_t v10 = v11;
      *(void *)(v4 + 16) = v11;
      uint64_t v9 = *(void **)v4;
    }
    *(unsigned char *)(v10 + 1) = a2;
    float result = physx::Scb::Scene::scheduleForUpdate(v9, v4, a3);
    *(_DWORD *)(v4 + 8) |= 2u;
    return result;
  }
  *(unsigned char *)(v7 + v4 + 14) = a2;
  float result = *(void **)(v4 + v7);
  if (result)
  {
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0) {
    unint64_t v3 = (unsigned __int8 *)(*(void *)(v1 + 16) + 1);
  }
  else {
    unint64_t v3 = (unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  }
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(void *)v9)
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    uint64_t v11 = "Attempt to set the client id when an actor is already in a scene.";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  unint64_t v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    uint64_t v11 = "Attempt to set the client id when an actor is buffering";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getOwnerClient(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::getAggregate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(void *)(v1 + 72) + 8; *(unsigned char *)(i - 8) != 1; i += 16)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v19);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
  {
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v18, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getShapes(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = (void *)(a1 + 40);
  int v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1) {
    uint64_t v4 = (void *)*v4;
  }
  unsigned int v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v6;
  }
  if (result)
  {
    unsigned int v8 = &v4[a4];
    uint64_t v9 = result;
    do
    {
      uint64_t v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getNbConstraints(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    int v5 = *v4;
    v4 += 16;
    if (v5) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpRigidActorTemplate<physx::PxRigidStatic>::importExtraData(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 >= 2)
  {
    unint64_t v3 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v3 + 8 * v2;
    *(void *)(a1 + 40) = v3;
  }
  unint64_t v4 = *(unsigned __int16 *)(a1 + 64);
  if (v4 >= 2)
  {
    unint64_t v5 = (*(void *)(a2 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(a2 + 8) = v5 + 8 * v4;
    *(void *)(a1 + 56) = v5;
  }
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  unint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48)) {
      goto LABEL_10;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  do
  {
    if (*v4)
    {
      uint64_t v6 = (**a2)(a2, 0x80000000);
      uint64_t *v4 = v6;
    }
    else
    {
      uint64_t v6 = 0;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 32), 1u);
    if ((*(_DWORD *)(v6 + 264) & 0x80000000) != 0) {
      *(void *)(v6 + 40) = a1;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 264), 1u);
    ++v4;
    --v5;
  }
  while (v5);
LABEL_10:
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::NpScene::getTaskManager(physx::NpScene *this)
{
  return *((void *)this + 1170);
}

{
  return *((void *)this + 1170);
}

uint64_t physx::NpScene::flush(physx::NpScene *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 472))();
}

void physx::NpContactCallbackTask::~NpContactCallbackTask(physx::NpContactCallbackTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::NpContactCallbackTask::getName(physx::NpContactCallbackTask *this)
{
  return "NpContactCallbackTask";
}

const char *physx::PxShape::getConcreteTypeName(physx::PxShape *this)
{
  return "PxShape";
}

BOOL physx::PxShape::isKindOf(physx::PxShape *this, const char *a2)
{
  return !strcmp("PxShape", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  uint64_t v6 = (char *)a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)v6;
    if (v7) {
      unsigned int v8 = (physx::NpScene *)(v7 - 16);
    }
    else {
      unsigned int v8 = 0;
    }
  }
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v17);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  uint64_t v15 = *((void *)a1 + 4);
  if (v15)
  {
    uint64_t v16 = *(physx::NpAggregate **)(*(void *)(v15 + 72) + 8);
    return physx::NpAggregate::removeActorAndReinsert(v16, a1, 0, v10, v11, v12, v13, v14);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

physx::PxActor *physx::NpActorTemplate<physx::PxRigidDynamic>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)result + 4);
  if (v8) {
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(void *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidDynamic>::setActorFlag(void *result, int a2, int a3, int8x8_t a4)
{
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  if (a3)
  {
    if (v5)
    {
      uint64_t v7 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3) + v4;
      uint64_t v7 = (unsigned __int8 *)(v6 + 12);
      uint64_t v8 = (v5 >> 24) & 0xF;
    }
    int v10 = *v7 | a2;
  }
  else
  {
    if (v5)
    {
      uint64_t v9 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
      uint64_t v9 = (unsigned __int8 *)(v6 + 12);
    }
    int v10 = *v9 & ~a2;
  }
  unsigned int v11 = v5 >> 30;
  if (v11 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_14;
    }
  }
  else if (v11 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_14:
    uint64_t v12 = *(unsigned char **)(v4 + 16);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      uint64_t v12 = v13;
      *(void *)(v4 + 16) = v13;
      uint64_t result = *(void **)v4;
    }
    *uint64_t v12 = v10;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a4);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  if (v10 != *(unsigned __int8 *)(v6 + 12))
  {
    *(unsigned char *)(v6 + 12) = v10;
    uint64_t result = *(void **)v6;
    if (*(void *)v6)
    {
      uint64_t v14 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v14();
    }
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidDynamic>::setActorFlags(void *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3 = *a2;
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  unsigned int v7 = v5 >> 30;
  if (v7 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_5:
    uint64_t v8 = *(unsigned char **)(v4 + 16);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      uint64_t v8 = v9;
      *(void *)(v4 + 16) = v9;
      uint64_t result = *(void **)v4;
    }
    *uint64_t v8 = v3;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a3);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  uint64_t v10 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3) + v4;
  if (v3 != *(unsigned __int8 *)(v10 + 12))
  {
    *(unsigned char *)(v10 + 12) = v3;
    uint64_t result = *(void **)v10;
    if (*(void *)v10)
    {
      unsigned int v11 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v11();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpActorTemplate<physx::PxRigidDynamic>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxRigidDynamic>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::Scb::Body::setKinematicTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  float v5 = *(float *)(v4 + 8176);
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (v6 >> 30 != 3 && (v6 >> 30 != 2 || !*(unsigned char *)(v4 + 7689)))
  {
    uint64_t result = physx::Sc::BodyCore::setKinematicTarget((physx::Sc::BodyCore *)(a1 + 32), *(void *)(v4 + 4384), a2, v5);
    *(_DWORD *)(a1 + 280) = 0;
    *(float *)(a1 + 276) = v5;
    return result;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    physx::Scb::Scene::getStream(v4, HIBYTE(v6) & 0xF);
    uint64_t v7 = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v4 = *(void *)a1;
  }
  *(_OWORD *)(v7 + 272) = *(_OWORD *)a2;
  int8x8_t v9 = *(int8x8_t *)(a2 + 16);
  *(int8x8_t *)(v7 + 288) = v9;
  v9.i32[0] = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v7 + 296) = v9.i32[0];
  physx::Scb::Scene::scheduleForUpdate((void *)v4, a1, v9);
  *(_DWORD *)(a1 + 284) |= 0x8000u;
  int v11 = *(_DWORD *)(a1 + 8) >> 30;
  if (v11 == 2)
  {
    uint64_t v12 = *(void **)a1;
    if (*(unsigned char *)(*(void *)a1 + 7689)) {
      goto LABEL_11;
    }
  }
  else if (v11 == 3)
  {
    uint64_t v12 = *(void **)a1;
LABEL_11:
    *(_DWORD *)(a1 + 280) = 0;
    *(float *)(a1 + 276) = v5;
    uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v12, a1, v10);
    *(_DWORD *)(a1 + 284) = *(_DWORD *)(a1 + 284) & 0xF8FFFFFF | 0x5000000;
    return result;
  }
  *(_DWORD *)(a1 + 280) = 0;
  *(float *)(a1 + 276) = v5;
  return physx::Sc::BodyCore::setWakeCounter(a1 + 32, v5, 1);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  unsigned int v6 = (char *)a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)v6;
    if (v7) {
      uint64_t v8 = (physx::NpScene *)(v7 - 16);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v17);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  uint64_t v15 = *((void *)a1 + 4);
  if (v15)
  {
    uint64_t v16 = *(physx::NpAggregate **)(*(void *)(v15 + 72) + 8);
    return physx::NpAggregate::removeActorAndReinsert(v16, a1, 0, v10, v11, v12, v13, v14);
  }
  return result;
}

physx::PxActor *physx::NpActorTemplate<physx::PxRigidStatic>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)result + 4);
  if (v8) {
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(void *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidStatic>::setActorFlag(void *result, int a2, int a3, int8x8_t a4)
{
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  if (a3)
  {
    if (v5)
    {
      uint64_t v7 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3) + v4;
      uint64_t v7 = (unsigned __int8 *)(v6 + 12);
      uint64_t v8 = (v5 >> 24) & 0xF;
    }
    int v10 = *v7 | a2;
  }
  else
  {
    if (v5)
    {
      int8x8_t v9 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
      int8x8_t v9 = (unsigned __int8 *)(v6 + 12);
    }
    int v10 = *v9 & ~a2;
  }
  unsigned int v11 = v5 >> 30;
  if (v11 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_14;
    }
  }
  else if (v11 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_14:
    uint64_t v12 = *(unsigned char **)(v4 + 16);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      uint64_t v12 = v13;
      *(void *)(v4 + 16) = v13;
      uint64_t result = *(void **)v4;
    }
    *uint64_t v12 = v10;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a4);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  if (v10 != *(unsigned __int8 *)(v6 + 12))
  {
    *(unsigned char *)(v6 + 12) = v10;
    uint64_t result = *(void **)v6;
    if (*(void *)v6)
    {
      uint64_t v14 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v14();
    }
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxRigidStatic>::setActorFlags(void *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3 = *a2;
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  unsigned int v7 = v5 >> 30;
  if (v7 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_5:
    uint64_t v8 = *(unsigned char **)(v4 + 16);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      uint64_t v8 = v9;
      *(void *)(v4 + 16) = v9;
      uint64_t result = *(void **)v4;
    }
    *uint64_t v8 = v3;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a3);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  uint64_t v10 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3) + v4;
  if (v3 != *(unsigned __int8 *)(v10 + 12))
  {
    *(unsigned char *)(v10 + 12) = v3;
    uint64_t result = *(void **)v10;
    if (*(void *)v10)
    {
      unsigned int v11 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v11();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpActorTemplate<physx::PxRigidStatic>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxRigidStatic>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

const char *physx::NpScene::SceneCompletion::getName(physx::NpScene::SceneCompletion *this)
{
  return "NpScene.completion";
}

uint64_t physx::NpScene::SceneCompletion::release(physx::NpScene::SceneCompletion *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t result = physx::shdfnd::SyncImpl::set(**((physx::shdfnd::SyncImpl ***)this + 5));
  if (v1)
  {
    int v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 40);
    return v3(v1);
  }
  return result;
}

void physx::Cm::FlushPool::~FlushPool(physx::Cm::FlushPool *this)
{
  unint64_t v2 = *((unsigned int *)this + 4);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      if (*(void *)(*((void *)this + 1) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v2 = *((unsigned int *)this + 4);
      }
    }
  }
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  int v3 = result;
  int v4 = 0;
  unint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  int v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t SqRefFinder::find(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 == 5) {
    int v4 = (uint64_t *)(a2 + 40);
  }
  else {
    int v4 = 0;
  }
  if (v3 == 6) {
    int v4 = (uint64_t *)(a2 + 40);
  }
  if (v3 == 13) {
    unsigned int v5 = (uint64_t *)(a2 + 40);
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 4);
  uint64_t v7 = v5;
  if (v6 != 1)
  {
    if (!*((_WORD *)v5 + 4))
    {
      uint64_t v9 = 0xFFFFFFFFLL;
      goto LABEL_18;
    }
    uint64_t v7 = (uint64_t *)*v5;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0xFFFFFFFFLL;
  while (v7[v8] != a3)
  {
    if (v6 == ++v8) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = v8;
LABEL_18:
  unint64_t v10 = v5 + 2;
  if (*((_WORD *)v5 + 12) != 1) {
    unint64_t v10 = (void *)*v10;
  }
  return v10[v9] >> 1;
}

void SqRefFinder::~SqRefFinder(SqRefFinder *this)
{
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize(uint64_t result, unsigned int a2, _WORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 2 * a2;
    uint64_t v8 = (_WORD *)(*(void *)v5 + 2 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::getName() [T = physx::Scb::Shape *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>::getName() [T = physx::Scb::Actor *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 52);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x20 && *(unsigned char *)(result + 32) == 0) {
      *(unsigned char *)(result + 32) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 48);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(v3 + 40);
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 52) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 40);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 32) = 0;
    }
    else if (v14)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v9) = *(_DWORD *)(v3 + 48);
    }
  }
  *(void *)(v3 + 40) = v8;
  *(_DWORD *)(v3 + 48) = v9 + 1;
  *(_DWORD *)(v3 + 52) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (16 * v5);
    if (v6 <= 0x40 && *(unsigned char *)(result + 64) == 0) {
      *(unsigned char *)(result + 64) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 80);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    uint64_t v11 = *(long long **)(v3 + 72);
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 80);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(v3 + 72);
    if (v15 == v3)
    {
      *(unsigned char *)(v3 + 64) = 0;
    }
    else if (v15)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 72) = v8;
  ++*(_DWORD *)(v3 + 80);
  *(_DWORD *)(v3 + 84) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::getName() [T = physx::Scb::RemovedShape]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

float getTriangle(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  getTriangle(a1, (uint64_t)&v12, a3, a4, a6);
  float v8 = v15;
  float v9 = (float)((float)((float)(v12 * *(float *)(a5 + 8)) + (float)(v13 * *(float *)(a5 + 20)))
             + (float)(v14 * *(float *)(a5 + 32)))
     + *(float *)(a5 + 44);
  *(float32x2_t *)a2 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v12), vmul_n_f32(*(float32x2_t *)(a5 + 12), v13)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v14)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 8) = v9;
  float v10 = (float)((float)((float)(v8 * *(float *)(a5 + 8)) + (float)(v16 * *(float *)(a5 + 20)))
              + (float)(v17 * *(float *)(a5 + 32)))
      + *(float *)(a5 + 44);
  *(float32x2_t *)(a2 + 12) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v8), vmul_n_f32(*(float32x2_t *)(a5 + 12), v16)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v17)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 20) = v10;
  float result = (float)((float)((float)(v18 * *(float *)(a5 + 8)) + (float)(v19 * *(float *)(a5 + 20)))
                 + (float)(v20 * *(float *)(a5 + 32)))
         + *(float *)(a5 + 44);
  *(float32x2_t *)(a2 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v18), vmul_n_f32(*(float32x2_t *)(a5 + 12), v19)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v20)), *(float32x2_t *)(a5 + 36));
  *(float *)(a2 + 32) = result;
  return result;
}

float getTriangle(int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5 = (3 * a1);
  if (a5)
  {
    unsigned int v6 = *(unsigned __int16 *)(a4 + 2 * v5);
    unsigned int v7 = *(unsigned __int16 *)(a4 + 2 * (v5 + 1));
    unsigned int v8 = *(unsigned __int16 *)(a4 + 2 * (v5 + 2));
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a4 + 4 * v5);
    unsigned int v7 = *(_DWORD *)(a4 + 4 * (v5 + 1));
    unsigned int v8 = *(_DWORD *)(a4 + 4 * (v5 + 2));
  }
  uint64_t v9 = a3 + 12 * v6;
  *(void *)a2 = *(void *)v9;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v9 + 8);
  uint64_t v10 = a3 + 12 * v7;
  *(void *)(a2 + 12) = *(void *)v10;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v10 + 8);
  uint64_t v11 = a3 + 12 * v8;
  *(void *)(a2 + 24) = *(void *)v11;
  float result = *(float *)(v11 + 8);
  *(float *)(a2 + 32) = result;
  return result;
}

physx::PxActor *physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(physx::PxActor *a1)
{
  *(void *)a1 = &unk_26E72D860;
  uint64_t v2 = *(void *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 40, v2);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 56, v2);
  *(void *)a1 = &unk_26E72DB20;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, a1);
  return a1;
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = *(void *)(v1 + 8640);
  if (result && *(_DWORD *)(v1 + 8680) == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 144))(result, 0);
    if (result) {
      *(unsigned char *)(v1 + 8848) = 1;
    }
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = *(void *)(v1 + 8688);
  if (result && *(_DWORD *)(v1 + 8728) == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 144))(result, 0);
    if (result) {
      *(unsigned char *)(v1 + 8848) = 1;
    }
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::simulate(*(void *)(a1 + 40) + 32, *(float *)(*(void *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::collide((physx::Sc::Scene *)(*(void *)(a1 + 40) + 32), *(float *)(*(void *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::runInternal(uint64_t a1)
{
  return physx::Sc::Scene::advance(*(void *)(a1 + 40) + 32, *(float *)(*(void *)(a1 + 40) + 9336), *(physx::PxBaseTask **)(a1 + 24));
}

uint64_t physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>::getName() [T = physx::PxRigidActor *]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v6 = (void *)result;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unsigned int v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unsigned int v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2 > 8 || *(unsigned char *)(result + 192))
  {
    uint64_t v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3>::getName() [T = physx::PxBounds3]";
    }
    else {
      unsigned int v6 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(v5 + 24)
                                                                                             + 16))(v5 + 24, 24 * a2, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (void *)result;
  }
  else
  {
    *(unsigned char *)(result + 192) = 1;
    uint64_t v4 = (void *)result;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 208);
  uint64_t v8 = *(void *)(v3 + 200);
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v4[3 * v7];
    uint64_t v10 = *(void **)(v3 + 200);
    uint64_t v11 = v4;
    do
    {
      *uint64_t v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11 += 3;
      v10 += 3;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 212) & 0x80000000) == 0)
  {
    if (v8 == v3)
    {
      *(unsigned char *)(v3 + 192) = 0;
    }
    else if (v8)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 200) = v4;
  *(_DWORD *)(v3 + 212) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>::getName() [T = physx::PxRigidActor *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    float v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::Scb::RigidObject::resetFiltering(physx::Scb::RigidObject *this, physx::Scb::Shape **a2, unsigned int a3, int8x8_t a4)
{
  unsigned int v4 = a3;
  unsigned int v7 = *((_DWORD *)this + 2);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(unsigned char *)(*(void *)this + 7689))
  {
    uint64_t v8 = *((void *)this + 2);
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v7) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *((void *)this + 2) = v9;
    }
    int v10 = *(_DWORD *)(v8 + 160);
    if (v10)
    {
      unsigned int v11 = v10 + v4;
      uint64_t v12 = *(void *)this;
      uint64_t v13 = *(void *)this + 7808;
      uint64_t v14 = *(unsigned int *)(*(void *)this + 7816);
      uint64_t v40 = 0;
      physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(v13, v14 + v10 + v4, &v40);
      uint64_t v15 = *(void *)(v12 + 7808);
      if (!v15) {
        return;
      }
      int v16 = *(_DWORD *)(v8 + 160);
      if (v16 == 1)
      {
        float v17 = (void *)(v15 + 8 * v14);
        *float v17 = *(void *)(v8 + 152);
        float v18 = v17 + 1;
        uint64_t v19 = v4;
        do
        {
          uint64_t v20 = (uint64_t)*a2++;
          *v18++ = v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        uint64_t v24 = (void *)(v15 + 8 * v14);
        if (v16)
        {
          uint64_t v25 = (uint64_t *)(*(void *)(*(void *)this + 7808) + 8 * *(unsigned int *)(v8 + 152));
          int v26 = v24;
          uint64_t v27 = *(unsigned int *)(v8 + 160);
          do
          {
            uint64_t v28 = *v25++;
            *v26++ = v28;
            --v27;
          }
          while (v27);
        }
        uint64_t v29 = v4;
        do
        {
          uint64_t v30 = (uint64_t)*a2++;
          v24[v16++] = v30;
          --v29;
        }
        while (v29);
      }
      *(_DWORD *)(v8 + 152) = v14;
      unsigned int v4 = v11;
    }
    else if (v4 == 1)
    {
      *(void *)(v8 + 152) = *a2;
    }
    else
    {
      uint64_t v31 = *(void *)this;
      uint64_t v32 = *(void *)this + 7808;
      uint64_t v33 = *(unsigned int *)(*(void *)this + 7816);
      uint64_t v40 = 0;
      physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize(v32, v33 + v4, &v40);
      uint64_t v34 = *(void *)(v31 + 7808);
      if (!v34) {
        return;
      }
      uint64_t v35 = (void *)(v34 + 8 * v33);
      uint64_t v36 = v4;
      do
      {
        uint64_t v37 = (uint64_t)*a2++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
      *(_DWORD *)(v8 + 152) = v33;
    }
    *(_DWORD *)(v8 + 160) = v4;
    physx::Scb::Scene::scheduleForUpdate(*(void **)this, (uint64_t)this, a4);
    *((_DWORD *)this + 2) |= 0x20u;
  }
  else
  {
    uint64_t v21 = a3;
    do
    {
      unsigned int v22 = (void *)((char *)this
                     + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)this + 11) & 0xF) + 3));
      uint64_t v23 = (uint64_t)*a2++;
      int v39 = 128;
      char v38 = 0;
      physx::Sc::RigidCore::onShapeChange(v22, v23 + 32, &v39, &v38, 0, a4);
      --v21;
    }
    while (v21);
  }
}

uint64_t physx::shdfnd::Array<physx::NpBatchQuery *,physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>::getName() [T = physx::NpBatchQuery *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  int v10 = &v8[v9];
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(uint64_t a1, uint64_t a2, float a3)
{
  if (a2)
  {
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = a1 + ((unint64_t)v3 << 6);
      if (*(float *)(v4 + 48) <= a3)
      {
        ++v3;
      }
      else
      {
        a2 = (a2 - 1);
        unsigned int v5 = (long long *)(a1 + (a2 << 6));
        long long v6 = *v5;
        *(_DWORD *)(v4 + 16) = *((_DWORD *)v5 + 4);
        *(_OWORD *)uint64_t v4 = v6;
        *(_WORD *)(v4 + 20) = *((_WORD *)v5 + 10);
        *(_OWORD *)(v4 + 24) = *(long long *)((char *)v5 + 24);
        *(void *)(v4 + 40) = *((void *)v5 + 5);
        *(_DWORD *)(v4 + 48) = *((_DWORD *)v5 + 12);
        *(void *)(v4 + 52) = *(void *)((char *)v5 + 52);
      }
    }
    while (v3 != a2);
  }
  return a2;
}

void MultiQueryCallback<physx::PxRaycastHit>::~MultiQueryCallback()
{
}

uint64_t physx::PxHitBuffer<physx::PxRaycastHit>::processTouches()
{
  return 0;
}

void physx::PxHitBuffer<physx::PxRaycastHit>::~PxHitBuffer()
{
}

void MultiQueryCallback<physx::PxOverlapHit>::~MultiQueryCallback()
{
}

uint64_t physx::clipHitsToNewMaxDist<physx::PxSweepHit>(uint64_t a1, uint64_t a2, float a3)
{
  if (a2)
  {
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = a1 + 56 * v3;
      if (*(float *)(v4 + 48) <= a3)
      {
        ++v3;
      }
      else
      {
        a2 = (a2 - 1);
        unsigned int v5 = (long long *)(a1 + 56 * a2);
        long long v6 = *v5;
        *(_DWORD *)(v4 + 16) = *((_DWORD *)v5 + 4);
        *(_OWORD *)uint64_t v4 = v6;
        *(_WORD *)(v4 + 20) = *((_WORD *)v5 + 10);
        *(_OWORD *)(v4 + 24) = *(long long *)((char *)v5 + 24);
        *(void *)(v4 + 40) = *((void *)v5 + 5);
        *(_DWORD *)(v4 + 48) = *((_DWORD *)v5 + 12);
        *(_DWORD *)(a1 + 56 * v3 + 52) = *((_DWORD *)v5 + 13);
      }
    }
    while (v3 != a2);
  }
  return a2;
}

void MultiQueryCallback<physx::PxSweepHit>::~MultiQueryCallback()
{
}

uint64_t physx::PxHitBuffer<physx::PxSweepHit>::processTouches()
{
  return 0;
}

void physx::PxHitBuffer<physx::PxSweepHit>::~PxHitBuffer()
{
}

uint64_t physx::Scb::Aggregate::addActor(uint64_t result, uint64_t a2, int8x8_t a3)
{
  uint64_t v4 = result;
  unsigned int v5 = *(_DWORD *)(result + 8);
  unsigned int v6 = v5 >> 30;
  if ((v5 >> 30) - 1 >= 2)
  {
    if (v6 == 3) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t result = *(void *)result;
  if (!*(void *)v4 || !*(unsigned char *)(result + 7689))
  {
LABEL_13:
    uint64_t v14 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(a2 + 11) & 0xF) + 3) + a2;
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v4 + 32) & 0xFFFFFF | (*(unsigned __int8 *)(v14 + 11) << 24);
    return result;
  }
  unsigned int v7 = *(unsigned int **)(v4 + 16);
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream(result, HIBYTE(v5) & 0xF).n128_u64[0];
    unsigned int v7 = v8;
    *(void *)(v4 + 16) = v8;
    uint64_t result = *(void *)v4;
  }
  uint64_t v9 = v7[2];
  if (v9 != -1)
  {
    unsigned int v10 = v7[3];
    if (v10)
    {
      uint64_t v11 = *(void *)(result + 7824) + 8 * v9;
      uint64_t v12 = v7[3];
      uint64_t v13 = (void *)v11;
      while (*v13 != a2)
      {
        ++v13;
        if (!--v12) {
          goto LABEL_15;
        }
      }
      unsigned int v15 = v10 - 1;
      *uint64_t v13 = *(void *)(v11 + 8 * v15);
      v7[3] = v15;
      uint64_t result = *(void *)v4;
    }
  }
LABEL_15:
  unsigned int v16 = *v7;
  float v17 = (void *)(result + 7824);
  if (*v7 == -1)
  {
    unsigned int v16 = *(_DWORD *)(result + 7832);
    unsigned int v18 = v16 + *(_DWORD *)(v4 + 36);
    uint64_t v20 = 0;
    uint64_t result = physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize(result + 7824, v18, &v20);
    *unsigned int v7 = v16;
  }
  uint64_t v19 = v7[1];
  *(void *)(*v17 + 8 * v16 + 8 * v19) = a2;
  v7[1] = v19 + 1;
  if (v6 != 1) {
    uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(*(void **)v4, v4, a3);
  }
  *(_DWORD *)(v4 + 8) |= 1u;
  return result;
}

void *physx::Scb::Aggregate::removeActor(void *result, uint64_t a2, int a3, int8x8_t a4)
{
  uint64_t v5 = (uint64_t)result;
  unsigned int v6 = *((_DWORD *)result + 2);
  unsigned int v7 = (v6 >> 30) - 1;
  if (v7 >= 2)
  {
    if (v6 >> 30 == 3) {
      return result;
    }
    goto LABEL_14;
  }
  uint64_t result = (void *)*result;
  if (!*(void *)v5 || !*((unsigned char *)result + 7689))
  {
LABEL_14:
    float v17 = (_DWORD *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets
                     + (((unint64_t)*(unsigned int *)(a2 + 8) >> 24) & 0xF)
                     + 3)
                   + a2);
    v17[2] |= 0xFFFFFFu;
    if (v7 <= 1)
    {
      if (*(void *)v5)
      {
        if (a3)
        {
          if (*(void *)v17)
          {
            for (unint64_t i = *(physx::Sc::ShapeSim **)(*(void *)v17 + 56); i; unint64_t i = *(physx::Sc::ShapeSim **)i)
              uint64_t result = (void *)physx::Sc::ShapeSim::reinsertBroadPhase(i);
          }
        }
      }
    }
    return result;
  }
  uint64_t v8 = *(unsigned int **)(v5 + 16);
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v8 = v9;
    *(void *)(v5 + 16) = v9;
    uint64_t result = *(void **)v5;
  }
  uint64_t v10 = *v8;
  if (v10 == -1 || (unsigned int v11 = v8[1]) == 0)
  {
LABEL_11:
    unsigned int v15 = v8[2];
    unsigned int v16 = result + 978;
    if (v15 == -1)
    {
      unsigned int v15 = *((_DWORD *)result + 1958);
      unsigned int v19 = v15 + *(_DWORD *)(v5 + 36);
      uint64_t v22 = 0;
      physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize((uint64_t)(result + 978), v19, &v22);
      v8[2] = v15;
    }
    uint64_t v20 = v8[3];
    *(void *)(*v16 + 8 * v15 + 8 * v20) = a2;
    v8[3] = v20 + 1;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(*(void **)v5, v5, a4);
    *(_DWORD *)(v5 + 8) |= 2u;
  }
  else
  {
    uint64_t v12 = result[978] + 8 * v10;
    uint64_t v13 = v8[1];
    uint64_t v14 = (void *)v12;
    while (*v14 != a2)
    {
      ++v14;
      if (!--v13) {
        goto LABEL_11;
      }
    }
    unsigned int v21 = v11 - 1;
    *uint64_t v14 = *(void *)(v12 + 8 * v21);
    v8[1] = v21;
  }
  return result;
}

uint64_t physx::Scb::Base::destroy(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 8);
  if (v1 >> 30 != 3 && (v1 >> 30 != 2 || !*(unsigned char *)(*(void *)this + 7689))) {
    return physx::NpDestroy(this);
  }
  *(_DWORD *)(this + 8) = v1 | 0x20000000;
  return this;
}

int32x2_t *physx::Scb::ObjectTracker::scheduleForInsert(int32x2_t *this, physx::Scb::Base *a2, int8x8_t a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 2);
  int v4 = v3 & 0x3FFFFFFF;
  if (v3 >> 30 == 3)
  {
    *((_DWORD *)a2 + 2) = v4 | 0x80000000;
    if ((v3 & 0x10000000) == 0)
    {
      uint64_t v5 = a2;
      return (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this, (uint64_t *)&v5);
    }
  }
  else
  {
    *((_DWORD *)a2 + 2) = v4 | 0x40000000;
    return (int32x2_t *)physx::Scb::ObjectTracker::insert(this, (uint64_t)a2, a3);
  }
  return this;
}

void *physx::Scb::ObjectTracker::insert(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v4 = a2;
  char v5 = 0;
  uint64_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1, &v4, &v5, a3);
  if (!v5) {
    *uint64_t result = v4;
  }
  return result;
}

int32x2_t *physx::Scb::ObjectTracker::scheduleForRemove(int32x2_t *result, uint64_t a2, int8x8_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >> 30 == 2)
  {
    *(_DWORD *)(a2 + 8) = v3 | 0xC0000000;
    if ((v3 & 0x10000000) == 0)
    {
      return (int32x2_t *)physx::Scb::ObjectTracker::insert(result, a2, a3);
    }
  }
  else if (v3 >> 30 == 1)
  {
    *(_DWORD *)(a2 + 8) = v3 & 0x3FFFFFFF;
    uint64_t v4 = a2;
    return (int32x2_t *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)result, &v4);
  }
  return result;
}

uint64_t physx::Scb::ObjectTracker::clear(uint64_t this)
{
  if (*(_DWORD *)(this + 52))
  {
    uint64_t v1 = this;
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 8);
    do
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      unsigned int v5 = *(_DWORD *)(v4 + 8);
      int v6 = v5 & 0xFFFFFFF;
      if ((v5 >> 30) - 1 > 1) {
        *(void *)uint64_t v4 = 0;
      }
      else {
        v6 |= 0x80000000;
      }
      *(_DWORD *)(v4 + 8) = v6;
      if ((v5 & 0x20000000) != 0) {
        this = physx::NpDestroy(*(void *)(v3 + 8 * v2));
      }
      ++v2;
      unint64_t v7 = *(unsigned int *)(v1 + 52);
    }
    while (v2 < v7);
    int v8 = *(_DWORD *)(v1 + 36);
    if (v8 && v7)
    {
      this = (uint64_t)memset(*(void **)(v1 + 24), 255, (4 * v8));
      uint64_t v9 = *(void *)(v1 + 16);
      uint64_t v10 = (*(_DWORD *)(v1 + 32) - 1);
      if (*(_DWORD *)(v1 + 32) == 1)
      {
        uint64_t v18 = 0;
      }
      else
      {
        _X10 = v9 + 128;
        int v12 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v12++;
          _X10 += 4;
          --v10;
        }
        while (v10);
        uint64_t v18 = (*(_DWORD *)(v1 + 32) - 1);
      }
      *(_DWORD *)(v9 + 4 * v18) = -1;
      *(_DWORD *)(v1 + 44) = 0;
      *(_DWORD *)(v1 + 52) = 0;
    }
  }
  return this;
}

uint64_t physx::Scb::Scene::Scene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  physx::Sc::Scene::Scene(a1 + 16, a2, a3);
  *(_OWORD *)(a1 + 7664) = 0u;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    int v6 = "<allocation names disabled>";
  }
  unint64_t v7 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 72, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 7680) = v7;
  physx::shdfnd::MutexImpl::MutexImpl(v7);
  *(_WORD *)(a1 + 7688) = 0;
  physx::Cm::FlushPool::FlushPool((physx::Cm::FlushPool *)(a1 + 7696), 0x4000u);
  *(void *)(a1 + 7768) = 0;
  *(_OWORD *)(a1 + 7736) = 0u;
  *(_OWORD *)(a1 + 7752) = 0u;
  *(void *)(a1 + 7776) = -3233808384;
  *(void *)(a1 + 7784) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7736, 0x40u, 0);
  *(void *)(a1 + 7872) = 0;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7840) = 0u;
  *(_OWORD *)(a1 + 7824) = 0u;
  *(_OWORD *)(a1 + 7808) = 0u;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(void *)(a1 + 7880) = -3233808384;
  *(void *)(a1 + 7888) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7840, 0x40u, 0);
  *(void *)(a1 + 7928) = 0;
  *(_OWORD *)(a1 + 7896) = 0u;
  *(_OWORD *)(a1 + 7912) = 0u;
  *(void *)(a1 + 7936) = -3233808384;
  *(void *)(a1 + 7944) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7896, 0x40u, 0);
  *(void *)(a1 + 7984) = 0;
  *(_OWORD *)(a1 + 7968) = 0u;
  *(_OWORD *)(a1 + 7952) = 0u;
  *(void *)(a1 + 7992) = -3233808384;
  *(void *)(a1 + 8000) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7952, 0x40u, 0);
  *(void *)(a1 + 8040) = 0;
  *(_OWORD *)(a1 + 8008) = 0u;
  *(_OWORD *)(a1 + 8024) = 0u;
  *(void *)(a1 + 8048) = -3233808384;
  *(void *)(a1 + 8056) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8008, 0x40u, 0);
  *(void *)(a1 + 8096) = 0;
  *(_OWORD *)(a1 + 8080) = 0u;
  *(_OWORD *)(a1 + 8064) = 0u;
  *(void *)(a1 + 8104) = -3233808384;
  *(void *)(a1 + 8112) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8064, 0x40u, 0);
  *(void *)(a1 + 8152) = 0;
  *(_OWORD *)(a1 + 8120) = 0u;
  *(_OWORD *)(a1 + 8136) = 0u;
  *(void *)(a1 + 8160) = -3233808384;
  *(void *)(a1 + 8168) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 8120, 0x40u, 0);
  *(_DWORD *)(a1 + 8176) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 8592) = 0;
  *(void *)(a1 + 8604) = 0;
  *(_OWORD *)(a1 + 8324) = 0u;
  *(_OWORD *)(a1 + 8340) = 0u;
  *(_OWORD *)(a1 + 8356) = 0u;
  *(_OWORD *)(a1 + 8372) = 0u;
  *(_OWORD *)(a1 + 8388) = 0u;
  *(_OWORD *)(a1 + 8404) = 0u;
  *(_OWORD *)(a1 + 8420) = 0u;
  *(_OWORD *)(a1 + 8432) = 0u;
  *(void *)(a1 + 8284) = 0;
  *(void *)(a1 + 8292) = 0;
  *(void *)(a1 + 8276) = 0;
  return a1;
}

void physx::Scb::Scene::switchRigidToNoSim(physx::Scb::Scene *this, physx::Scb::RigidObject *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3 >> 30 == 2)
  {
    uint64_t v11 = 0x4000000000;
    v9[512] = 1;
    uint64_t v10 = v9;
    uint64_t v4 = (physx::Scb::Scene *)((char *)this + 16);
    uint64_t v5 = (uint64_t *)((char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3));
    if (a3) {
      physx::Sc::Scene::removeBody(v4, v5, (uint64_t)v9, 1);
    }
    else {
      physx::Sc::Scene::removeStatic(v4, v5, (uint64_t)v9, 1);
    }
    if (v11)
    {
      unint64_t v6 = 0;
      unint64_t v7 = v10;
      do
      {
        uint64_t v8 = *(void *)&v7[8 * v6];
        if (atomic_fetch_add((atomic_uint *volatile)(v8 - 48), 0xFFFFFFFF) == 1) {
          (*(void (**)(void))(*(void *)(v8 - 56) + 16))();
        }
        ++v6;
      }
      while (v6 < v11);
    }
    if ((v11 & 0x8000000000000000) == 0 && (v11 & 0x7FFFFFFF00000000) != 0 && v10 != v9)
    {
      if (v10) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
  }
}

uint64_t physx::Scb::Scene::switchRigidFromNoSim(uint64_t this, physx::Scb::RigidObject *a2, int a3)
{
  unint64_t v3 = *((unsigned int *)a2 + 2);
  if (v3 >> 30 != 2) {
    return this;
  }
  if (a3)
  {
    uint64_t v4 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    uint64_t v5 = (uint64_t *)(v4 + 72);
    unsigned int v6 = *((unsigned __int16 *)v4 + 40);
    if (v6 != 1) {
      uint64_t v5 = (uint64_t *)*v5;
    }
    this = physx::Sc::Scene::addBody((physx::Sc::Scene *)(this + 16), (physx::Scb::RigidObject *)((char *)a2+ *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3)), v5, *((unsigned __int16 *)v4 + 40), 80, 0, *((_DWORD *)v4 + 26) != -1);
    if (!v6) {
      return this;
    }
LABEL_10:
    uint64_t v9 = v6;
    do
    {
      uint64_t v10 = *v5++;
      atomic_fetch_add((atomic_uint *volatile)(v10 + 32), 1u);
      --v9;
    }
    while (v9);
    return this;
  }
  unint64_t v7 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v3) & 0xF) + 3);
  uint64_t v8 = &v7[*((void *)&physx::Sc::gOffsetTable + v7[13] + 10)];
  uint64_t v5 = (uint64_t *)(v8 + 40);
  unsigned int v6 = *((unsigned __int16 *)v8 + 24);
  if (v6 != 1) {
    uint64_t v5 = (uint64_t *)*v5;
  }
  this = physx::Sc::Scene::addStatic(this + 16, v7, v5, *((unsigned __int16 *)v8 + 24), 80, 0);
  if (v6) {
    goto LABEL_10;
  }
  return this;
}

int32x2_t *physx::Scb::Scene::addActor(int32x2_t *a1, physx::Scb::Base *a2, char a3, uint64_t a4, int8x8_t a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1 + 980;
  if (a3)
  {
    return physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(a1, a2, v8, a5);
  }
  else
  {
    uint64_t result = physx::Scb::Scene::add<physx::Scb::RigidStatic>(a1, a2, v8, a4, a5);
    if (!a1[961].i8[1]) {
      return result;
    }
    uint64_t v22 = 0x4000000000;
    uint64_t v10 = 1;
    v20[512] = 1;
    unsigned int v21 = v20;
    unint64_t v11 = *((unsigned int *)a2 + 2);
    uint64_t v12 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v11 >> 24) & 0xF) + 3);
    uint64_t v13 = &v12[*((void *)&physx::Sc::gOffsetTable + v12[13] + 10)];
    uint64_t v14 = v13 + 40;
    uint64_t v15 = *((unsigned __int16 *)v13 + 24);
    if (v15 != 1)
    {
      if (!v15) {
        return result;
      }
      uint64_t v14 = *(char **)v14;
      uint64_t v10 = v15;
    }
    uint64_t v16 = *(void *)a2;
    int v17 = v11 & 0xC0000000;
    do
    {
      uint64_t v18 = *(char **)v14;
      int v19 = *(_DWORD *)(*(void *)v14 + 56);
      if ((v19 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v18 + 14) = v19 & 0x3FFFFFFF | v17;
        *((void *)v18 + 6) = v16;
      }
      v14 += 8;
      --v10;
    }
    while (v10);
  }
  return result;
}

int32x2_t *physx::Scb::Scene::addActor(int32x2_t *result, physx::Scb::Base *a2, char a3, uint64_t a4, uint64_t a5, int8x8_t a6)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *(void *)a2 = result;
  unint64_t v7 = (char *)&result[961] + 1;
  if (a3)
  {
    if (result[961].i8[1])
    {
      uint64_t result = physx::Scb::ObjectTracker::scheduleForInsert(result + 987, a2, a6);
      uint64_t v45 = 0x4000000000;
      float v44 = v43;
      uint64_t v8 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
      uint64_t v9 = v8 + 72;
      uint64_t v10 = *((unsigned __int16 *)v8 + 40);
      if (v10 == 1)
      {
        uint64_t v10 = 1;
        goto LABEL_25;
      }
      if (v10)
      {
        uint64_t v9 = *(char **)v9;
LABEL_25:
        uint64_t v20 = *(void *)a2;
        unsigned int v21 = *((_DWORD *)a2 + 2) & 0xC0000000;
        do
        {
          uint64_t v22 = *(char **)v9;
          int v23 = *(_DWORD *)(*(void *)v9 + 56);
          if ((v23 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v22 + 14) = v23 & 0x3FFFFFFF | v21;
            *((void *)v22 + 6) = v20;
          }
          v9 += 8;
          --v10;
        }
        while (v10);
      }
LABEL_42:
      *((_DWORD *)a2 + 70) = *((float *)a2 + 69) == 0.0
                          && *((float *)a2 + 63) == 0.0
                          && *((float *)a2 + 64) == 0.0
                          && *((float *)a2 + 65) == 0.0
                          && *((float *)a2 + 66) == 0.0
                          && *((float *)a2 + 67) == 0.0
                          && *((float *)a2 + 68) == 0.0;
      return result;
    }
    *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
    uint64_t v45 = 0x4000000000;
    float v44 = v43;
    uint64_t v15 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    uint64_t v16 = v15 + 72;
    uint64_t v17 = *((unsigned __int16 *)v15 + 40);
    if (v17 == 1)
    {
      uint64_t v17 = 1;
    }
    else
    {
      if (!v17) {
        goto LABEL_42;
      }
      uint64_t v16 = *(char **)v16;
    }
    do
    {
      uint64_t v28 = *(char **)v16;
      int v29 = *(_DWORD *)(*(void *)v16 + 56);
      if ((v29 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v28 + 14) = v29 & 0x3FFFFFFF | 0x80000000;
        *((void *)v28 + 6) = result;
      }
      v16 += 8;
      --v17;
    }
    while (v17);
    goto LABEL_42;
  }
  if (result[961].i8[1])
  {
    uint64_t result = physx::Scb::ObjectTracker::scheduleForInsert(result + 987, a2, a6);
  }
  else
  {
    unint64_t v18 = *((unsigned int *)a2 + 2);
    *((_DWORD *)a2 + 2) = v18 & 0xFFFFFFF | 0x80000000;
    if (v18) {
      int v19 = (unsigned char *)*((void *)a2 + 2);
    }
    else {
      int v19 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v18 >> 24) & 0xF) + 3) + 12;
    }
    if ((*v19 & 8) != 0)
    {
      uint64_t v45 = 0x4000000000;
      float v44 = v43;
      char v38 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
      int v39 = v38 + 72;
      uint64_t v40 = *((unsigned __int16 *)v38 + 40);
      if (v40 == 1)
      {
        uint64_t v40 = 1;
      }
      else
      {
        if (!v40) {
          goto LABEL_7;
        }
        int v39 = *(char **)v39;
      }
      do
      {
        float v41 = *(char **)v39;
        int v42 = *(_DWORD *)(*(void *)v39 + 56);
        if ((v42 & 0xF000000) == 0x1000000)
        {
          *((_DWORD *)v41 + 14) = v42 & 0x3FFFFFFF | 0x80000000;
          *((void *)v41 + 6) = result;
        }
        v39 += 8;
        --v40;
      }
      while (v40);
    }
    else
    {
      uint64_t v30 = (physx::Sc::Scene *)&result[2];
      uint64_t v31 = (physx::Scb::Base *)((char *)a2 + 32);
      uint64_t v45 = 0x4000000000;
      v43[512] = 1;
      float v44 = v43;
      uint64_t v32 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10) + 32;
      uint64_t v33 = v32 + 40;
      uint64_t v34 = *((unsigned __int16 *)v32 + 24);
      if (v34 != 1) {
        uint64_t v33 = (void *)*v33;
      }
      uint64_t result = (int32x2_t *)physx::Sc::Scene::addBody(v30, v31, v33, *((unsigned __int16 *)v32 + 24), 80, a4, a5 != 0);
      if (v34)
      {
        uint64_t v35 = *(void *)a2;
        do
        {
          uint64_t v36 = (void *)*v33;
          int v37 = *(_DWORD *)(*v33 + 56);
          if ((v37 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v36 + 14) = v37 & 0x3FFFFFFF | 0x80000000;
            v36[6] = v35;
          }
          atomic_fetch_add((atomic_uint *volatile)v36 + 8, 1u);
          ++v33;
          --v34;
        }
        while (v34);
      }
      if ((v45 & 0x8000000000000000) == 0 && (v45 & 0x7FFFFFFF00000000) != 0 && v44 != v43 && v44) {
        uint64_t result = (int32x2_t *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
  }
LABEL_7:
  BOOL v11 = *((float *)a2 + 69) == 0.0
     && *((float *)a2 + 63) == 0.0
     && *((float *)a2 + 64) == 0.0
     && *((float *)a2 + 65) == 0.0
     && *((float *)a2 + 66) == 0.0
     && *((float *)a2 + 67) == 0.0
     && *((float *)a2 + 68) == 0.0;
  *((_DWORD *)a2 + 70) = v11;
  if (*v7)
  {
    uint64_t v45 = 0x4000000000;
    float v44 = v43;
    uint64_t v12 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    uint64_t v13 = v12 + 72;
    uint64_t v14 = *((unsigned __int16 *)v12 + 40);
    if (v14 == 1)
    {
      uint64_t v14 = 1;
    }
    else
    {
      if (!v14) {
        return result;
      }
      uint64_t v13 = *(char **)v13;
    }
    uint64_t v24 = *(void *)a2;
    unsigned int v25 = *((_DWORD *)a2 + 2) & 0xC0000000;
    do
    {
      int v26 = *(char **)v13;
      int v27 = *(_DWORD *)(*(void *)v13 + 56);
      if ((v27 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v26 + 14) = v27 & 0x3FFFFFFF | v25;
        *((void *)v26 + 6) = v24;
      }
      v13 += 8;
      --v14;
    }
    while (v14);
  }
  return result;
}

void physx::Scb::Scene::removeActor(uint64_t a1, uint64_t a2, int a3, char a4, __n128 a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = (int32x2_t *)(a1 + 7840);
  if (a4)
  {
    physx::Scb::Scene::removeRigidNoSim<false,physx::Scb::RigidStatic>(a1, a2, v8, a5);
  }
  else
  {
    physx::Scb::Scene::remove<physx::Scb::RigidStatic>(a1, a2, v8, a3, a5);
    if (*(unsigned char *)(a1 + 7689))
    {
      unsigned int v9 = *(_DWORD *)(a2 + 8);
      if (a3)
      {
        v9 |= 0x10u;
        *(_DWORD *)(a2 + 8) = v9;
      }
      uint64_t v21 = 0x4000000000;
      uint64_t v10 = 1;
      v19[512] = 1;
      uint64_t v20 = v19;
      uint64_t v11 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (HIBYTE(v9) & 0xF) + 3) + a2;
      uint64_t v12 = v11 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v11 + 13) + 10);
      uint64_t v13 = (uint64_t *)(v12 + 40);
      uint64_t v14 = *(unsigned __int16 *)(v12 + 48);
      if (v14 != 1)
      {
        if (!v14) {
          goto LABEL_13;
        }
        uint64_t v13 = (uint64_t *)*v13;
        uint64_t v10 = v14;
      }
      uint64_t v15 = *(void *)a2;
      unsigned int v16 = v9 & 0xC0000000;
      do
      {
        uint64_t v17 = (uint64_t *)*v13;
        int v18 = *(_DWORD *)(*v13 + 56);
        if ((v18 & 0xF000000) == 0x1000000)
        {
          *((_DWORD *)v17 + 14) = v18 & 0x3FFFFFFF | v16;
          v17[6] = v15;
        }
        ++v13;
        --v10;
      }
      while (v10);
    }
  }
LABEL_13:
  *(_DWORD *)(a2 + 8) &= ~0x20u;
}

void physx::Scb::Scene::remove<physx::Scb::RigidStatic>(uint64_t a1, uint64_t a2, int32x2_t *a3, int a4, __n128 a5)
{
  v30[1] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 7689))
  {
    uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(a2 + 11) & 0xF) + 3) + a2;
    if ((*(unsigned char *)(v6 + 12) & 8) != 0)
    {
      v30[0] = 0x4000000000;
      uint64_t v18 = 1;
      char v28 = 1;
      int v29 = v27;
      uint64_t v19 = v6 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v6 + 13) + 10);
      uint64_t v20 = (__n128 **)(v19 + 40);
      uint64_t v21 = *(unsigned __int16 *)(v19 + 48);
      if (v21 != 1)
      {
        if (!v21)
        {
          int v25 = 64;
          goto LABEL_35;
        }
        uint64_t v20 = (__n128 **)*v20;
        uint64_t v18 = v21;
      }
      uint64_t v22 = *(void *)a2 + 7736;
      do
      {
        int v23 = *v20;
        unsigned int v24 = (*v20)[3].n128_u32[2];
        if ((v24 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState(v23 + 3, a5);
          int v26 = v23 + 3;
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v22, (uint64_t *)&v26);
          unsigned int v24 = v23[3].n128_u32[2] & 0xEFFFFFFF;
          v23[3].n128_u32[2] = v24;
        }
        if ((v24 & 0xF000000) == 0x1000000)
        {
          v23[3].n128_u32[2] = v24 & 0x3FFFFFFF;
          v23[3].n128_u64[0] = 0;
        }
        ++v20;
        --v18;
      }
      while (v18);
    }
    else
    {
      v30[0] = 0x4000000000;
      char v28 = 1;
      int v29 = v27;
      uint64_t v7 = *(void *)(a1 + 4392);
      if (v7) {
        uint64_t v8 = (unsigned char *)(v7 + 536);
      }
      else {
        uint64_t v8 = v27;
      }
      unsigned int v9 = (uint64_t *)(a2 + 32);
      if (v7) {
        uint64_t v10 = (uint64_t **)(v7 + 1056);
      }
      else {
        uint64_t v10 = (uint64_t **)&v29;
      }
      if (v7) {
        uint64_t v11 = (unsigned int *)(v7 + 1064);
      }
      else {
        uint64_t v11 = (unsigned int *)v30;
      }
      physx::Sc::Scene::removeStatic((physx::Sc::Scene *)(a1 + 16), v9, (uint64_t)v8, a4);
      uint64_t v13 = *v11;
      if (v13)
      {
        uint64_t v14 = *v10;
        uint64_t v15 = *(void *)a2 + 7736;
        do
        {
          uint64_t v16 = *v14;
          unsigned int v17 = *(_DWORD *)(*v14 - 24);
          if ((v17 & 0x10000000) != 0)
          {
            physx::Scb::Shape::syncState((__n128 *)(v16 - 32), v12);
            int v26 = (__n128 *)(v16 - 32);
            physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v15, (uint64_t *)&v26);
            unsigned int v17 = *(_DWORD *)(v16 - 24) & 0xEFFFFFFF;
            *(_DWORD *)(v16 - 24) = v17;
          }
          if ((v17 & 0xF000000) == 0x1000000)
          {
            *(_DWORD *)(v16 - 24) = v17 & 0x3FFFFFFF;
            *(void *)(v16 - 32) = 0;
          }
          if (atomic_fetch_add((atomic_uint *volatile)(v16 - 48), 0xFFFFFFFF) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v16 - 56) + 16))(v16 - 56);
          }
          ++v14;
          --v13;
        }
        while (v13);
      }
    }
    int v25 = HIDWORD(v30[0]);
    if ((v30[0] & 0x8000000000000000) != 0)
    {
LABEL_39:
      *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
      *(void *)a2 = 0;
      return;
    }
LABEL_35:
    if ((v25 & 0x7FFFFFFF) != 0 && v29 != v27 && v29) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    goto LABEL_39;
  }
  physx::Scb::ObjectTracker::scheduleForRemove(a3, a2, (int8x8_t)a5.n128_u64[0]);
}

uint64_t physx::Scb::Scene::removeRigidNoSim<false,physx::Scb::RigidStatic>(uint64_t result, uint64_t a2, int32x2_t *a3, __n128 a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 7689))
  {
    uint64_t v28 = 0x4000000000;
    uint64_t v15 = 1;
    char v26 = 1;
    int v27 = v25;
    uint64_t v16 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(a2 + 11) & 0xF) + 3) + a2;
    uint64_t v17 = v16 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v16 + 13) + 10);
    uint64_t v18 = (__n128 **)(v17 + 40);
    uint64_t v19 = *(unsigned __int16 *)(v17 + 48);
    if (v19 != 1)
    {
      if (!v19)
      {
        int v23 = 64;
LABEL_20:
        if ((v23 & 0x7FFFFFFF) != 0 && v27 != v25 && v27) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
LABEL_24:
        *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
        *(void *)a2 = 0;
        return result;
      }
      uint64_t v18 = (__n128 **)*v18;
      uint64_t v15 = v19;
    }
    uint64_t v20 = *(void *)a2 + 7736;
    do
    {
      uint64_t v21 = *v18;
      unsigned int v22 = (*v18)[3].n128_u32[2];
      if ((v22 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v21 + 3, a4);
        unsigned int v24 = v21 + 3;
        uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v20, (uint64_t *)&v24);
        unsigned int v22 = v21[3].n128_u32[2] & 0xEFFFFFFF;
        v21[3].n128_u32[2] = v22;
      }
      if ((v22 & 0xF000000) == 0x1000000)
      {
        v21[3].n128_u32[2] = v22 & 0x3FFFFFFF;
        v21[3].n128_u64[0] = 0;
      }
      ++v18;
      --v15;
    }
    while (v15);
    int v23 = HIDWORD(v28);
    if (v28 < 0) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  uint64_t result = (uint64_t)physx::Scb::ObjectTracker::scheduleForRemove(a3, a2, (int8x8_t)a4.n128_u64[0]);
  uint64_t v28 = 0x4000000000;
  uint64_t v5 = 1;
  char v26 = 1;
  int v27 = v25;
  unint64_t v6 = *(unsigned int *)(a2 + 8);
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + a2;
  uint64_t v8 = v7 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  unsigned int v9 = (uint64_t *)(v8 + 40);
  uint64_t v10 = *(unsigned __int16 *)(v8 + 48);
  if (v10 != 1)
  {
    if (!v10) {
      return result;
    }
    unsigned int v9 = (uint64_t *)*v9;
    uint64_t v5 = v10;
  }
  uint64_t v11 = *(void *)a2;
  int v12 = v6 & 0xC0000000;
  do
  {
    uint64_t v13 = (uint64_t *)*v9;
    int v14 = *(_DWORD *)(*v9 + 56);
    if ((v14 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)v13 + 14) = v14 & 0x3FFFFFFF | v12;
      v13[6] = v11;
    }
    ++v9;
    --v5;
  }
  while (v5);
  return result;
}

void physx::Scb::Scene::removeActor(int32x2_t *this, physx::Scb::Body *a2, int a3, char a4, __n128 a5)
{
  v61[1] = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v7 = (char *)a2 + 32;
    if (this[961].i8[1])
    {
      physx::Scb::ObjectTracker::scheduleForRemove(this + 987, (uint64_t)a2, (int8x8_t)a5.n128_u64[0]);
      v61[0] = 0x4000000000;
      unsigned int v60 = v58;
      uint64_t v8 = &v7[*((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10)];
      unsigned int v9 = v8 + 40;
      uint64_t v10 = *((unsigned __int16 *)v8 + 24);
      if (v10 == 1)
      {
        uint64_t v10 = 1;
        goto LABEL_49;
      }
      if (v10)
      {
        unsigned int v9 = *(char **)v9;
LABEL_49:
        uint64_t v33 = *(void *)a2;
        unsigned int v34 = *((_DWORD *)a2 + 2) & 0xC0000000;
        do
        {
          uint64_t v35 = *(char **)v9;
          int v36 = *(_DWORD *)(*(void *)v9 + 56);
          if ((v36 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v35 + 14) = v36 & 0x3FFFFFFF | v34;
            *((void *)v35 + 6) = v33;
          }
          v9 += 8;
          --v10;
        }
        while (v10);
      }
LABEL_53:
      int v37 = *((_DWORD *)a2 + 71);
      char v38 = (unsigned char *)(*((void *)a2 + 2) + 348);
      if ((v37 & 0x4000) == 0) {
        char v38 = (char *)a2 + 76;
      }
      if (*v38)
      {
        physx::Scb::Body::putToSleepInternal(a2, (int8x8_t)a5.n128_u64[0]);
      }
      else
      {
        *((_DWORD *)a2 + 70) = 1;
        *((_DWORD *)a2 + 71) = v37 & 0xFFF0FFFF;
      }
      *((_DWORD *)a2 + 2) &= ~0x20u;
      return;
    }
    v61[0] = 0x4000000000;
    uint64_t v15 = 1;
    char v59 = 1;
    unsigned int v60 = v58;
    uint64_t v16 = &v7[*((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10)];
    uint64_t v17 = (__n128 **)(v16 + 40);
    uint64_t v18 = *((unsigned __int16 *)v16 + 24);
    if (v18 != 1)
    {
      if (!v18)
      {
        int v22 = 64;
LABEL_22:
        if ((v22 & 0x7FFFFFFF) != 0 && v60 != v58 && v60) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
LABEL_26:
        *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
        *(void *)a2 = 0;
        goto LABEL_53;
      }
      uint64_t v17 = (__n128 **)*v17;
      uint64_t v15 = v18;
    }
    uint64_t v19 = *(void *)a2 + 7736;
    do
    {
      uint64_t v20 = *v17;
      unsigned int v21 = (*v17)[3].n128_u32[2];
      if ((v21 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v20 + 3, a5);
        uint64_t v57 = v20 + 3;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v19, (uint64_t *)&v57);
        unsigned int v21 = v20[3].n128_u32[2] & 0xEFFFFFFF;
        v20[3].n128_u32[2] = v21;
      }
      if ((v21 & 0xF000000) == 0x1000000)
      {
        v20[3].n128_u32[2] = v21 & 0x3FFFFFFF;
        v20[3].n128_u64[0] = 0;
      }
      ++v17;
      --v15;
    }
    while (v15);
    int v22 = HIDWORD(v61[0]);
    if ((v61[0] & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)a2 + 26);
  if (*((_DWORD *)a2 + 2) >> 30 == 1 && v12 != 0) {
    physx::Sc::BodyCore::tearDownSimStateData((uint64_t)a2 + 32, *(void *)(*(void *)a2 + 4384), *(unsigned __int8 *)(v12 + 31) == 1);
  }
  int v14 = (char *)&this[961] + 1;
  if (this[961].i8[1])
  {
    physx::Scb::ObjectTracker::scheduleForRemove(this + 987, (uint64_t)a2, (int8x8_t)a5.n128_u64[0]);
    goto LABEL_74;
  }
  *((_DWORD *)a2 + 71) &= 0xF9FFFFFF;
  if ((*((unsigned char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)a2 + 11) & 0xF) + 3) + 12) & 8) != 0)
  {
    v61[0] = 0x4000000000;
    uint64_t v39 = 1;
    char v59 = 1;
    unsigned int v60 = v58;
    uint64_t v40 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    float v41 = (__n128 *)(v40 + 72);
    uint64_t v42 = *((unsigned __int16 *)v40 + 40);
    if (v42 != 1)
    {
      if (!v42)
      {
        int v46 = 64;
        goto LABEL_69;
      }
      float v41 = (__n128 *)v41->n128_u64[0];
      uint64_t v39 = v42;
    }
    uint64_t v43 = *(void *)a2 + 7736;
    do
    {
      float v44 = (__n128 *)v41->n128_u64[0];
      unsigned int v45 = *(_DWORD *)(v41->n128_u64[0] + 56);
      if ((v45 & 0x10000000) != 0)
      {
        physx::Scb::Shape::syncState(v44 + 3, a5);
        uint64_t v57 = v44 + 3;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v43, (uint64_t *)&v57);
        unsigned int v45 = v44[3].n128_u32[2] & 0xEFFFFFFF;
        v44[3].n128_u32[2] = v45;
      }
      if ((v45 & 0xF000000) == 0x1000000)
      {
        v44[3].n128_u32[2] = v45 & 0x3FFFFFFF;
        v44[3].n128_u64[0] = 0;
      }
      float v41 = (__n128 *)((char *)v41 + 8);
      --v39;
    }
    while (v39);
  }
  else
  {
    int v23 = (physx::Sc::Scene *)&this[2];
    v61[0] = 0x4000000000;
    char v59 = 1;
    unsigned int v60 = v58;
    int32x2_t v24 = this[549];
    if (v24) {
      int v25 = (unsigned char *)(*(void *)&v24 + 536);
    }
    else {
      int v25 = v58;
    }
    if (v24) {
      char v26 = (uint64_t **)(*(void *)&v24 + 1056);
    }
    else {
      char v26 = (uint64_t **)&v60;
    }
    if (v24) {
      int v27 = (unsigned int *)(*(void *)&v24 + 1064);
    }
    else {
      int v27 = (unsigned int *)v61;
    }
    physx::Sc::Scene::removeBody(v23, (uint64_t *)a2 + 4, (uint64_t)v25, a3);
    uint64_t v28 = *v27;
    if (v28)
    {
      uint64_t v29 = *v26;
      uint64_t v30 = *(void *)a2 + 7736;
      do
      {
        uint64_t v31 = *v29;
        unsigned int v32 = *(_DWORD *)(*v29 - 24);
        if ((v32 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState((__n128 *)(v31 - 32), a5);
          uint64_t v57 = (__n128 *)(v31 - 32);
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v30, (uint64_t *)&v57);
          unsigned int v32 = *(_DWORD *)(v31 - 24) & 0xEFFFFFFF;
          *(_DWORD *)(v31 - 24) = v32;
        }
        if ((v32 & 0xF000000) == 0x1000000)
        {
          *(_DWORD *)(v31 - 24) = v32 & 0x3FFFFFFF;
          *(void *)(v31 - 32) = 0;
        }
        if (atomic_fetch_add((atomic_uint *volatile)(v31 - 48), 0xFFFFFFFF) == 1) {
          (*(void (**)(uint64_t))(*(void *)(v31 - 56) + 16))(v31 - 56);
        }
        ++v29;
        --v28;
      }
      while (v28);
    }
  }
  int v46 = HIDWORD(v61[0]);
  if ((v61[0] & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v46 & 0x7FFFFFFF) != 0 && v60 != v58 && v60) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *((_DWORD *)a2 + 2) &= 0xFFFFFFFu;
  *(void *)a2 = 0;
LABEL_74:
  int v47 = *((_DWORD *)a2 + 71);
  float v48 = (unsigned char *)(*((void *)a2 + 2) + 348);
  if ((v47 & 0x4000) == 0) {
    float v48 = (char *)a2 + 76;
  }
  if (*v48)
  {
    physx::Scb::Body::putToSleepInternal(a2, (int8x8_t)a5.n128_u64[0]);
  }
  else
  {
    *((_DWORD *)a2 + 70) = 1;
    *((_DWORD *)a2 + 71) = v47 & 0xFFF0FFFF;
  }
  unsigned int v49 = *((_DWORD *)a2 + 2) & 0xFFFFFFDF;
  *((_DWORD *)a2 + 2) = v49;
  if (*v14)
  {
    if (a3)
    {
      v49 |= 0x10u;
      *((_DWORD *)a2 + 2) = v49;
    }
    v61[0] = 0x4000000000;
    unsigned int v60 = v58;
    uint64_t v50 = (char *)a2 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)a2 + 45) + 10);
    uint64_t v51 = v50 + 72;
    uint64_t v52 = *((unsigned __int16 *)v50 + 40);
    if (v52 == 1)
    {
      uint64_t v52 = 1;
    }
    else
    {
      if (!v52) {
        return;
      }
      uint64_t v51 = *(char **)v51;
    }
    uint64_t v53 = *(void *)a2;
    unsigned int v54 = v49 & 0xC0000000;
    do
    {
      long long v55 = *(char **)v51;
      int v56 = *(_DWORD *)(*(void *)v51 + 56);
      if ((v56 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v55 + 14) = v56 & 0x3FFFFFFF | v54;
        *((void *)v55 + 6) = v53;
      }
      v51 += 8;
      --v52;
    }
    while (v52);
  }
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::Constraint>(int32x2_t *a1, physx::Scb::Base *a2, int32x2_t *this, int8x8_t a4)
{
  *(void *)a2 = a1;
  if (a1[961].i8[1])
  {
    return physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a4);
  }
  else
  {
    *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
    unint64_t v6 = a1 + 2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    physx::NpConstraintGetRigidObjectsFromScb((uint64_t)a2, &v10, &v9);
    if (v10) {
      uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v10 + 11) & 0xF) + 3) + v10;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v9) {
      uint64_t v8 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v9 + 11) & 0xF) + 3) + v9;
    }
    else {
      uint64_t v8 = 0;
    }
    return (int32x2_t *)physx::Sc::Scene::addConstraint(v6, (uint64_t)a2 + 24, v7, v8);
  }
}

int32x2_t *physx::Scb::Scene::removeConstraint(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  if (a1[961].i8[1])
  {
    uint64_t v4 = a1 + 994;
    return physx::Scb::ObjectTracker::scheduleForRemove(v4, a2, a3);
  }
  else
  {
    uint64_t result = (int32x2_t *)physx::Sc::Scene::removeConstraint((uint64_t)&a1[2], a2 + 24, a3);
    *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
    *(void *)a2 = 0;
  }
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::Articulation>(int32x2_t *a1, uint64_t a2, int32x2_t *this, int8x8_t a4)
{
  *(void *)a2 = a1;
  if (a1[961].i8[1]) {
    return physx::Scb::ObjectTracker::scheduleForInsert(this, (physx::Scb::Base *)a2, a4);
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFF | 0x80000000;
  uint64_t v5 = a1 + 2;
  if (*(_DWORD *)(a2 + 128))
  {
    uint64_t v6 = **(void **)(a2 + 120);
    if (v6) {
      uint64_t v7 = v6 + 96;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return (int32x2_t *)physx::Sc::Scene::addArticulation(v5, (physx::Sc::ArticulationCore *)(a2 + 24), (physx::Sc::BodySim **)(v7 + 32));
}

int32x2_t *physx::Scb::Scene::removeArticulation(int32x2_t *this, physx::Scb::Articulation *a2, int8x8_t a3)
{
  uint64_t v5 = (uint64_t *)*((void *)a2 + 3);
  if (v5)
  {
    int32x2_t v6 = this[240];
    uint64_t v7 = *v5;
    int v9 = *((_DWORD *)v5 + 18);
    *(double *)&a3 = (*(double (**)(int32x2_t, uint64_t, int *))(**(void **)&v6 + 72))(v6, v7, &v9);
  }
  uint64_t result = physx::Scb::Scene::remove<physx::Scb::Articulation>((uint64_t)this, (uint64_t)a2, this + 1001, a3);
  *((unsigned char *)a2 + 76) = 1;
  return result;
}

int32x2_t *physx::Scb::Scene::remove<physx::Scb::Articulation>(uint64_t a1, uint64_t a2, int32x2_t *a3, int8x8_t a4)
{
  if (*(unsigned char *)(a1 + 7689))
  {
    return physx::Scb::ObjectTracker::scheduleForRemove(a3, a2, a4);
  }
  else
  {
    *(_DWORD *)(a2 + 8) &= 0xFFFFFCFF;
    uint64_t result = (int32x2_t *)physx::Sc::Scene::removeArticulation((physx::Sc::Scene *)(a1 + 16), (physx::Sc::ArticulationSim **)(a2 + 24));
    *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
    *(void *)a2 = 0;
  }
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::ArticulationJoint>(uint64_t a1, uint64_t a2, int32x2_t *this, int8x8_t a4)
{
  *(void *)a2 = a1;
  if (*(unsigned char *)(a1 + 7689)) {
    return physx::Scb::ObjectTracker::scheduleForInsert(this, (physx::Scb::Base *)a2, a4);
  }
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFFFF | 0x80000000;
  return (int32x2_t *)physx::Sc::Scene::addArticulationJoint(a1 + 16, a2 + 24, (physx::Sc::ArticulationSim ***)(*(void *)(a2 + 408) + 128), (physx::Sc::BodySim **)(*(void *)(a2 + 416) + 128));
}

int32x2_t *physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(uint64_t a1, uint64_t a2, int32x2_t *a3, int8x8_t a4)
{
  if (*(unsigned char *)(a1 + 7689))
  {
    return physx::Scb::ObjectTracker::scheduleForRemove(a3, a2, a4);
  }
  else
  {
    uint64_t result = (int32x2_t *)physx::Sc::Scene::removeArticulationJoint(a1 + 16, (physx::Sc::ArticulationJointSim **)(a2 + 24));
    *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
    *(void *)a2 = 0;
  }
  return result;
}

int32x2_t *physx::Scb::Scene::addAggregate(int32x2_t *a1, physx::Scb::Base *a2, int8x8_t a3)
{
  *(void *)a2 = a1;
  if (a1[961].i8[1])
  {
    uint64_t v4 = a1 + 1015;
    return physx::Scb::ObjectTracker::scheduleForInsert(v4, a2, a3);
  }
  else
  {
    uint64_t result = (int32x2_t *)physx::Sc::Scene::createAggregate((physx::Sc::Scene *)&a1[2], *((void *)a2 + 3), *((unsigned __int8 *)a2 + 40));
    *((_DWORD *)a2 + 8) = result;
    *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFFFF | 0x80000000;
  }
  return result;
}

void physx::Scb::Scene::removeAggregate(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  if (a1[961].i8[1])
  {
    uint64_t v4 = a1 + 1015;
    physx::Scb::ObjectTracker::scheduleForRemove(v4, a2, a3);
  }
  else
  {
    physx::Sc::Scene::deleteAggregate((physx::Sc::Scene *)&a1[2], *(_DWORD *)(a2 + 32));
    *(_DWORD *)(a2 + 8) &= 0xFFFFFFFu;
    *(void *)a2 = 0;
  }
}

uint64_t physx::Scb::Scene::addMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
  }
  LOWORD(v5) = *(_WORD *)(a2 + 24);
  HIDWORD(v5) = 0;
  uint64_t v4 = *(unsigned int *)(v3 + 7672);
  if ((*(_DWORD *)(v3 + 7676) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v3 + 7664, &v5);
  }
  else
  {
    *(void *)(*(void *)(v3 + 7664) + 8 * v4) = v5;
    ++*(_DWORD *)(v3 + 7672);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 7680));
  }
  return result;
}

uint64_t physx::Scb::Scene::updateMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
  }
  LOWORD(v5) = *(_WORD *)(a2 + 24);
  HIDWORD(v5) = 1;
  uint64_t v4 = *(unsigned int *)(v3 + 7672);
  if ((*(_DWORD *)(v3 + 7676) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v3 + 7664, &v5);
  }
  else
  {
    *(void *)(*(void *)(v3 + 7664) + 8 * v4) = v5;
    ++*(_DWORD *)(v3 + 7672);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 7680));
  }
  return result;
}

uint64_t physx::Scb::Scene::removeMaterial(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a2 + 24);
  if (v2 != 0xFFFF)
  {
    uint64_t v4 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 7680));
      LOWORD(v2) = *(_WORD *)(a2 + 24);
    }
    LOWORD(v6) = v2;
    HIDWORD(v6) = 2;
    uint64_t v5 = *(unsigned int *)(v4 + 7672);
    if ((*(_DWORD *)(v4 + 7676) & 0x7FFFFFFFu) <= v5)
    {
      uint64_t result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(v4 + 7664, &v6);
    }
    else
    {
      *(void *)(*(void *)(v4 + 7664) + 8 * v5) = v6;
      ++*(_DWORD *)(v4 + 7672);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 7680));
    }
  }
  return result;
}

uint64_t physx::Scb::Scene::updateLowLevelMaterial(pthread_mutex_t **this, physx::NpMaterial **a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[960]);
  }
  if (*((_DWORD *)this + 1918))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (unsigned __int16 *)((char *)this[958] + v4);
      uint64_t v7 = *v6;
      int v8 = *((_DWORD *)v6 + 1);
      if (v8 == 2)
      {
        if (*((_DWORD *)this + 6) > v7)
        {
          uint64_t v19 = (uint64_t)this[2] + 32 * v7;
          int v21 = *(unsigned __int16 *)(v19 + 24);
          uint64_t v20 = (_WORD *)(v19 + 24);
          if (v21 == v7)
          {
            (*(void (**)(void))(**(void **)&this[232][27].__opaque[40] + 120))(*(void *)&this[232][27].__opaque[40]);
            *uint64_t v20 = -1;
          }
        }
      }
      else
      {
        int v9 = a2[v7];
        if (v8 == 1)
        {
          if (v9)
          {
            uint64_t v16 = *((void *)v9 + 6);
            uint64_t v15 = (char *)v9 + 48;
            uint64_t v17 = (uint64_t)this[2] + 32 * *((unsigned __int16 *)v15 + 12);
            *(_DWORD *)(v17 + 8) = *((_DWORD *)v15 + 2);
            *(void *)uint64_t v17 = v16;
            *(_WORD *)(v17 + 12) = *((_WORD *)v15 + 6);
            *(_WORD *)(v17 + 14) = *((_WORD *)v15 + 7);
            uint64_t v18 = *((void *)v15 + 2);
            *(_DWORD *)(v17 + 24) = *((_DWORD *)v15 + 6);
            *(void *)(v17 + 16) = v18;
            (*(void (**)(void, char *))(**(void **)&this[232][27].__opaque[40] + 112))(*(void *)&this[232][27].__opaque[40], v15);
          }
        }
        else
        {
          if (v8) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v9 == 0;
          }
          if (!v10)
          {
            uint64_t v11 = *((unsigned __int16 *)v9 + 36);
            physx::PxsMaterialManager::resize((unint64_t)(this + 2), v11 + 1);
            uint64_t v12 = *((void *)v9 + 6);
            uint64_t v13 = (uint64_t)this[2] + 32 * v11;
            *(_DWORD *)(v13 + 8) = *((_DWORD *)v9 + 14);
            *(void *)uint64_t v13 = v12;
            *(_WORD *)(v13 + 12) = *((_WORD *)v9 + 30);
            *(_WORD *)(v13 + 14) = *((_WORD *)v9 + 31);
            uint64_t v14 = *((void *)v9 + 8);
            *(_DWORD *)(v13 + 24) = *((_DWORD *)v9 + 18);
            *(void *)(v13 + 16) = v14;
            (*(void (**)(void))(**(void **)&this[232][27].__opaque[40] + 104))(*(void *)&this[232][27].__opaque[40]);
          }
        }
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < *((unsigned int *)this + 1918));
  }
  uint64_t result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::resize((uint64_t)(this + 958), 0, &v23);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(this[960]);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    int v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

void physx::Scb::Scene::syncWriteThroughProperties(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[962]);
  }
  uint64_t v2 = *((unsigned int *)this + 1987);
  if (v2)
  {
    uint64_t v3 = (physx::Scb::Body **)this[988];
    do
    {
      uint64_t v4 = *v3++;
      physx::Scb::Body::syncCollisionWriteThroughState(v4);
      --v2;
    }
    while (v2);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v5 = this[962];
    pthread_mutex_unlock(v5);
  }
}

void physx::Scb::Body::syncCollisionWriteThroughState(physx::Scb::Body *this)
{
  unsigned int v2 = *((_DWORD *)this + 71);
  if ((v2 & 0x400000) != 0)
  {
    *((void *)this + 14) = *(void *)((char *)this + 252);
    *((_DWORD *)this + 30) = *((_DWORD *)this + 65);
    updateBodySim((uint64_t *)this + 4);
    v2 &= ~0x400000u;
    if ((v2 & 0x800000) != 0)
    {
LABEL_3:
      *((void *)this + 16) = *((void *)this + 33);
      *((_DWORD *)this + 34) = *((_DWORD *)this + 68);
      updateBodySim((uint64_t *)this + 4);
      v2 &= ~0x800000u;
      if ((v2 & 0x8000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
  }
  else
  {
    *(void *)((char *)this + 252) = *((void *)this + 14);
    *((_DWORD *)this + 65) = *((_DWORD *)this + 30);
    if ((v2 & 0x800000) != 0) {
      goto LABEL_3;
    }
  }
  *((void *)this + 33) = *((void *)this + 16);
  *((_DWORD *)this + 68) = *((_DWORD *)this + 34);
  if ((v2 & 0x8000) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  if (*((unsigned char *)this + 76))
  {
    uint64_t v3 = *((void *)this + 2);
    if (!v3)
    {
      physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF);
      *((void *)this + 2) = v3;
    }
    physx::Sc::BodyCore::setKinematicTarget((physx::Scb::Body *)((char *)this + 32), *(void *)(*(void *)this + 4384), v3 + 272, *((float *)this + 69));
    v2 &= ~0x8000u;
  }
LABEL_11:
  if ((v2 & 0x18000000) != 0)
  {
    physx::Sc::BodyCore::clearSpatialAcceleration((physx::Sc::BodySim **)this + 4, (v2 >> 27) & 1, (v2 >> 28) & 1);
    v2 &= 0xE7FFFFFF;
  }
  if ((v2 & 0x30000) != 0)
  {
    uint64_t v4 = *((void *)this + 2);
    if (!v4)
    {
      physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF);
      uint64_t v4 = v5;
      *((void *)this + 2) = v5;
    }
    physx::Sc::BodyCore::addSpatialAcceleration((physx::Sc::BodySim **)this + 4, *(void *)(*(void *)this + 4384), (float32x2_t *)(v4 + 300), (float32x2_t *)(v4 + 312));
    *(void *)(v4 + 308) = 0;
    v2 &= 0xFFFCFFFF;
    *(void *)(v4 + 300) = 0;
    *(void *)(v4 + 316) = 0;
  }
  if ((v2 & 0x60000000) != 0)
  {
    physx::Sc::BodyCore::clearSpatialVelocity((physx::Sc::BodySim **)this + 4, (v2 >> 29) & 1, (v2 >> 30) & 1);
    v2 &= 0x9FFFFFFF;
  }
  if ((v2 & 0xC0000) != 0)
  {
    uint64_t v6 = *((void *)this + 2);
    if (!v6)
    {
      physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF);
      uint64_t v6 = v7;
      *((void *)this + 2) = v7;
    }
    physx::Sc::BodyCore::addSpatialVelocity((physx::Sc::BodySim **)this + 4, *(void *)(*(void *)this + 4384), (float32x2_t *)(v6 + 324), (float32x2_t *)(v6 + 336));
    *(void *)(v6 + 332) = 0;
    v2 &= 0xFFF3FFFF;
    *(void *)(v6 + 324) = 0;
    *(void *)(v6 + 340) = 0;
  }
  if ((v2 & 0x1000000) == 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)this + 47);
    goto LABEL_34;
  }
  if ((v2 & 0x6000000) == 0)
  {
    physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 32, *((float *)this + 69), 0);
    v2 &= ~0x1000000u;
    goto LABEL_34;
  }
  if ((v2 & 0x4000000) != 0)
  {
    uint64_t v8 = *((void *)this + 2);
    if (v8)
    {
      if ((v2 & 0x4000) == 0) {
        goto LABEL_33;
      }
    }
    else
    {
      physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF);
      *((void *)this + 2) = v8;
      if ((v2 & 0x4000) == 0) {
        goto LABEL_33;
      }
    }
    if ((*((unsigned __int8 *)this + 76) ^ *(unsigned __int8 *)(v8 + 348))) {
      goto LABEL_34;
    }
LABEL_33:
    physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 32, *((float *)this + 69), 1);
    v2 &= 0xFAFFFFFF;
  }
LABEL_34:
  *((_DWORD *)this + 71) = v2;
}

uint64_t physx::Scb::Scene::syncEntireScene(physx::Scb::Scene *this)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  unsigned int v2 = (physx::Scb::Scene *)((char *)this + 4676);
  *((unsigned char *)this + 7689) = 0;
  uint64_t v3 = (pthread_mutex_t **)((char *)this + 7696);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*v3);
  }
  float v122 = (physx::Cm::FlushPool *)v3;
  if (*((_DWORD *)this + 2151))
  {
    do
    {
      physx::Sc::Scene::createClient((physx::Scb::Scene *)((char *)this + 16));
      int v4 = *((_DWORD *)this + 2151) - 1;
      *((_DWORD *)this + 2151) = v4;
    }
    while (v4);
  }
  int v5 = *((_DWORD *)this + 2152);
  if (v5)
  {
    if (v5)
    {
      *((void *)this + 246) = *((void *)this + 1072);
      *((_DWORD *)this + 494) = *((_DWORD *)this + 2146);
      *((_DWORD *)this + 495) = 1;
      if ((v5 & 2) == 0)
      {
LABEL_9:
        if ((v5 & 4) == 0) {
          goto LABEL_10;
        }
        goto LABEL_233;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_9;
    }
    *(float *)(*((void *)this + 238) + 120) = -*((float *)this + 2147);
    if ((v5 & 4) == 0)
    {
LABEL_10:
      if ((v5 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_234;
    }
LABEL_233:
    *((_DWORD *)this + 1071) = *((_DWORD *)this + 2148);
    if ((v5 & 8) == 0)
    {
LABEL_11:
      if ((v5 & 0x10) == 0) {
        goto LABEL_12;
      }
      goto LABEL_248;
    }
LABEL_234:
    float v124 = v2;
    for (uint64_t i = 0; i != 31; ++i)
    {
      float v111 = (char *)this + 4 * i;
      if (*((_DWORD *)v111 + 2081))
      {
        float v112 = v111 + 8448;
        uint64_t v113 = i;
        do
        {
          uint64_t v114 = v113 + 1;
          if (i >= (int)v113 + 1) {
            unsigned int v115 = v113 + 1;
          }
          else {
            unsigned int v115 = i;
          }
          if (i <= (int)v113 + 1) {
            char v116 = v113 + 1;
          }
          else {
            char v116 = i;
          }
          if ((*((_DWORD *)this + v115 + 2081) >> v116))
          {
            int v117 = 2 << v113;
            int v118 = *((_DWORD *)this + v113 + 2113);
            LOBYTE(v126[0]) = (*v112 & v117) >> v114;
            BYTE1(v126[0]) = (v118 & (1 << i)) >> i;
            physx::Sc::Scene::setDominanceGroupPair((uint64_t)this + 16, i, v114, v126);
          }
          uint64_t v113 = v114;
        }
        while (v114 != 31);
      }
    }
    *((_OWORD *)this + 527) = 0u;
    *(_OWORD *)((char *)this + 8404) = 0u;
    *(_OWORD *)((char *)this + 8420) = 0u;
    *(_OWORD *)((char *)this + 8372) = 0u;
    *(_OWORD *)((char *)this + 8388) = 0u;
    *(_OWORD *)((char *)this + 8340) = 0u;
    *(_OWORD *)((char *)this + 8356) = 0u;
    *(_OWORD *)((char *)this + 8324) = 0u;
    int v5 = *((_DWORD *)this + 2152);
    unsigned int v2 = v124;
    if ((v5 & 0x10) == 0)
    {
LABEL_12:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_249;
    }
LABEL_248:
    *(_DWORD *)(*((void *)this + 238) + 140) = *((_DWORD *)this + 2149);
    if ((v5 & 0x80) == 0)
    {
LABEL_13:
      if ((v5 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_250;
    }
LABEL_249:
    *(_DWORD *)(*((void *)this + 238) + 144) = *((_DWORD *)this + 2150);
    if ((v5 & 0x20) == 0)
    {
LABEL_14:
      if ((v5 & 0x40) == 0)
      {
LABEL_16:
        *((_DWORD *)this + 2152) = 0;
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v6 = (void *)*((void *)this + 232);
      v6[236] = *(void *)((char *)this + 8300);
      v6[237] = *(void *)((char *)this + 8308);
      v6[238] = *(void *)((char *)this + 8316);
      goto LABEL_16;
    }
LABEL_250:
    uint64_t v119 = 0;
    float v120 = (char *)this + 8276;
    do
    {
      if (v120[v119])
      {
        int v121 = *(_DWORD *)&v120[4 * v119 - 96];
        *(unsigned char *)unsigned int v2 = 1;
        *(_DWORD *)(*((void *)this + 232) + 4 * v119 + 1792) = v121;
        if (!v119) {
          *((_DWORD *)this + 1168) = v121;
        }
      }
      ++v119;
    }
    while (v119 != 24);
    *(void *)((char *)this + 8276) = 0;
    *(void *)((char *)this + 8284) = 0;
    *(void *)((char *)this + 8292) = 0;
    if ((v5 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  unint64_t v7 = *((unsigned int *)this + 2043);
  if (v7)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(*((void *)this + 1016) + 8 * v8);
      unsigned int v10 = *(_DWORD *)(v9 + 8);
      if (v10 >> 30 == 1) {
        break;
      }
      if ((v10 & 0x10000000) != 0) {
        goto LABEL_22;
      }
LABEL_23:
      if (++v8 >= v7) {
        goto LABEL_24;
      }
    }
    *(_DWORD *)(v9 + 32) = physx::Sc::Scene::createAggregate((physx::Scb::Scene *)((char *)this + 16), *(void *)(v9 + 24), *(unsigned __int8 *)(v9 + 40));
LABEL_22:
    physx::Scb::Aggregate::syncState((physx::Scb::Aggregate *)v9, this);
    unint64_t v7 = *((unsigned int *)this + 2043);
    goto LABEL_23;
  }
LABEL_24:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8120);
  *((_DWORD *)this + 1958) = 0;
  if (*((_DWORD *)this + 1973))
  {
    uint64_t v12 = 0;
    float v123 = (physx::Scb::Scene *)((char *)this + 16);
    uint64_t v13 = *((void *)this + 981);
    while (1)
    {
      uint64_t v14 = *(void *)(v13 + 8 * v12);
      unint64_t v15 = *(unsigned int *)(v14 + 8);
      if (v15 >> 30 != 1)
      {
        if ((v15 & 0x10000000) != 0)
        {
          if (v15)
          {
            uint64_t v17 = *(unsigned char **)(v14 + 16);
            if (!v17)
            {
              int8x8_t v11 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)v14, BYTE3(v15) & 0xF).n128_u64[0];
              *(void *)(v14 + 16) = v17;
            }
            if ((*(unsigned char *)(v14 + 44) & 8) == 0 || (*v17 & 8) != 0)
            {
              if ((*(unsigned char *)(v14 + 44) & 8) == 0 && (*v17 & 8) != 0) {
                physx::Scb::Scene::switchRigidToNoSim(*(physx::Scb::Scene **)v14, (physx::Scb::RigidObject *)v14, 0);
              }
            }
            else
            {
              physx::Scb::Scene::switchRigidFromNoSim(*(void *)v14, (physx::Scb::RigidObject *)v14, 0);
            }
          }
          physx::Scb::RigidObject::syncState((physx::Scb::RigidObject *)v14, v11);
          if ((v15 & 0x40) != 0)
          {
            uint64_t v34 = *(void *)(v14 + 16);
            if (!v34)
            {
              int8x8_t v11 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)v14, *(unsigned char *)(v14 + 11) & 0xF).n128_u64[0];
              *(void *)(v14 + 16) = v34;
            }
            if ((*(unsigned char *)(v14 + 8) & 0x40) != 0) {
              physx::Sc::StaticCore::setActor2World(v14 + 32, v34 + 176);
            }
          }
          *(void *)(v14 + 16) = 0;
          *(_DWORD *)(v14 + 8) = *(unsigned __int8 *)(v14 + 11) << 24;
        }
        goto LABEL_69;
      }
      uint64_t v16 = (v15 & 1) != 0
          ? *(unsigned char **)(v14 + 16)
          : (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v15 >> 24) & 0xF) + 3) + v14 + 12);
      if ((*v16 & 8) == 0) {
        break;
      }
      uint64_t v129 = 0x4000000000;
      char v127 = 1;
      float v128 = v126;
      uint64_t v23 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v14 + 11) & 0xF) + 3) + v14;
      uint64_t v24 = v23 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v23 + 13) + 10);
      int v25 = (uint64_t *)(v24 + 40);
      uint64_t v26 = *(unsigned __int16 *)(v24 + 48);
      if (v26 == 1)
      {
        uint64_t v26 = 1;
        goto LABEL_55;
      }
      if (v26)
      {
        int v25 = (uint64_t *)*v25;
LABEL_55:
        uint64_t v31 = *(void *)v14;
        do
        {
          unsigned int v32 = (uint64_t *)*v25;
          int v33 = *(_DWORD *)(*v25 + 56);
          if ((v33 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v32 + 14) = v33 & 0x3FFFFFFF | 0x80000000;
            v32[6] = v31;
          }
          ++v25;
          --v26;
        }
        while (v26);
      }
LABEL_69:
      if (++v12 >= (unint64_t)*((unsigned int *)this + 1973)) {
        goto LABEL_70;
      }
    }
    uint64_t v18 = (void *)(v14 + 32);
    uint64_t v129 = 0x4000000000;
    char v127 = 1;
    float v128 = v126;
    uint64_t v19 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v14 + 11) & 0xF) + 3) + v14;
    uint64_t v20 = v19 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v19 + 13) + 10);
    int v21 = (void *)(v20 + 40);
    unsigned int v22 = *(unsigned __int16 *)(v20 + 48);
    if (v22 == 1)
    {
      physx::Sc::Scene::addStatic((uint64_t)v123, v18, (void *)(v20 + 40), 1u, 80, 0);
    }
    else
    {
      int v21 = (void *)*v21;
      physx::Sc::Scene::addStatic((uint64_t)v123, v18, v21, *(unsigned __int16 *)(v20 + 48), 80, 0);
      if (!v22)
      {
LABEL_47:
        if ((v129 & 0x8000000000000000) == 0 && (v129 & 0x7FFFFFFF00000000) != 0 && v128 != v126 && v128) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        goto LABEL_69;
      }
    }
    uint64_t v27 = *(void *)v14;
    uint64_t v28 = v22;
    do
    {
      uint64_t v29 = (void *)*v21;
      int v30 = *(_DWORD *)(*v21 + 56);
      if ((v30 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v29 + 14) = v30 & 0x3FFFFFFF | 0x80000000;
        v29[6] = v27;
      }
      atomic_fetch_add((atomic_uint *volatile)v29 + 8, 1u);
      ++v21;
      --v28;
    }
    while (v28);
    goto LABEL_47;
  }
LABEL_70:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7840);
  int v35 = *((_DWORD *)this + 14);
  if (v35)
  {
    int v36 = (uint64_t *)*((void *)this + 6);
    do
    {
      uint64_t v37 = *v36++;
      char v38 = (physx::Scb::Body *)(v37 - *((void *)&physx::Scb::Actor::sLazyInitOffsets + *(unsigned __int8 *)(v37 + 13)));
      if ((*((unsigned char *)v38 + 11) & 0x10) == 0) {
        physx::Scb::Body::syncState(v38);
      }
      --v35;
    }
    while (v35);
  }
  uint64_t v39 = *((unsigned int *)this + 1027);
  if (v39)
  {
    uint64_t v40 = *((void *)this + 508);
    do
    {
      float v41 = (physx::Scb::Body *)(*(void *)v40
                               - *((void *)&physx::Scb::Actor::sLazyInitOffsets
                                 + *(unsigned __int8 *)(*(void *)v40 + 13)));
      if ((*((unsigned char *)v41 + 11) & 0x10) == 0) {
        physx::Scb::Body::syncState(v41);
      }
      v40 += 8;
      --v39;
    }
    while (v39);
  }
  if (*((_DWORD *)this + 1987))
  {
    uint64_t v42 = 0;
    uint64_t v43 = *((void *)this + 988);
    while (1)
    {
      float v44 = *(uint64_t **)(v43 + 8 * v42);
      unint64_t v45 = *((unsigned int *)v44 + 2);
      if (v45 >> 30 != 1)
      {
        if ((v45 & 0x10000000) != 0) {
          physx::Scb::Body::syncState(*(physx::Scb::Body **)(v43 + 8 * v42));
        }
        goto LABEL_110;
      }
      int v46 = (v45 & 1) != 0
          ? (char *)v44[2]
          : (char *)v44 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v45 >> 24) & 0xF) + 3) + 12;
      if ((*v46 & 8) == 0) {
        break;
      }
      uint64_t v129 = 0x4000000000;
      char v127 = 1;
      float v128 = v126;
      uint64_t v51 = (uint64_t)v44 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)v44 + 45) + 10);
      uint64_t v52 = (uint64_t *)(v51 + 72);
      uint64_t v53 = *(unsigned __int16 *)(v51 + 80);
      if (v53 == 1)
      {
        uint64_t v53 = 1;
        goto LABEL_106;
      }
      if (v53)
      {
        uint64_t v52 = (uint64_t *)*v52;
LABEL_106:
        uint64_t v58 = *v44;
        do
        {
          char v59 = (uint64_t *)*v52;
          int v60 = *(_DWORD *)(*v52 + 56);
          if ((v60 & 0xF000000) == 0x1000000)
          {
            *((_DWORD *)v59 + 14) = v60 & 0x3FFFFFFF | 0x80000000;
            v59[6] = v58;
          }
          ++v52;
          --v53;
        }
        while (v53);
      }
LABEL_110:
      if (++v42 >= (unint64_t)*((unsigned int *)this + 1987)) {
        goto LABEL_111;
      }
    }
    int v47 = (physx::Sc::BodyCore *)(v44 + 4);
    uint64_t v129 = 0x4000000000;
    char v127 = 1;
    float v128 = v126;
    uint64_t v48 = (uint64_t)v44 + *((void *)&physx::Sc::gOffsetTable + *((unsigned __int8 *)v44 + 45) + 10) + 32;
    unsigned int v49 = (void *)(v48 + 40);
    unsigned int v50 = *(unsigned __int16 *)(v48 + 48);
    if (v50 == 1)
    {
      physx::Sc::Scene::addBody((physx::Scb::Scene *)((char *)this + 16), v47, (void *)(v48 + 40), 1u, 80, 0, 0);
    }
    else
    {
      unsigned int v49 = (void *)*v49;
      physx::Sc::Scene::addBody((physx::Scb::Scene *)((char *)this + 16), v47, v49, *(unsigned __int16 *)(v48 + 48), 80, 0, 0);
      if (!v50)
      {
LABEL_98:
        if ((v129 & 0x8000000000000000) == 0 && (v129 & 0x7FFFFFFF00000000) != 0 && v128 != v126 && v128) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        goto LABEL_110;
      }
    }
    uint64_t v54 = *v44;
    uint64_t v55 = v50;
    do
    {
      int v56 = (void *)*v49;
      int v57 = *(_DWORD *)(*v49 + 56);
      if ((v57 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v56 + 14) = v57 & 0x3FFFFFFF | 0x80000000;
        v56[6] = v54;
      }
      atomic_fetch_add((atomic_uint *volatile)v56 + 8, 1u);
      ++v49;
      --v55;
    }
    while (v55);
    goto LABEL_98;
  }
LABEL_111:
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7896);
  *((_DWORD *)this + 1954) = 0;
  unint64_t v62 = *((unsigned int *)this + 1947);
  if (v62)
  {
    for (unint64_t j = 0; j < v62; ++j)
    {
      __int32 v64 = *(__n128 **)(*((void *)this + 968) + 8 * j);
      if ((v64->n128_u8[11] & 0x10) != 0)
      {
        physx::Scb::Shape::syncState(v64, v61);
        unint64_t v62 = *((unsigned int *)this + 1947);
      }
    }
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7736);
  *((_DWORD *)this + 1950) = 0;
  uint64_t v66 = *((unsigned int *)this + 517);
  if (v66)
  {
    int8x16_t v67 = (void *)*((void *)this + 253);
    do
    {
      if ((*(unsigned char *)(*v67 - 13) & 0x10) == 0) {
        physx::Scb::Constraint::syncState((physx::Scb::Constraint *)(*v67 - 24), v65);
      }
      ++v67;
      --v66;
    }
    while (v66);
  }
  if (*((_DWORD *)this + 2001))
  {
    unint64_t v68 = 0;
    uint64_t v69 = *((void *)this + 995);
    do
    {
      uint64_t v70 = *(void *)(v69 + 8 * v68);
      unsigned int v71 = *(_DWORD *)(v70 + 8);
      if (v71 >> 30 == 1)
      {
        uint64_t v125 = 0;
        v126[0] = 0;
        physx::NpConstraintGetRigidObjectsFromScb(v70, v126, &v125);
        if (v126[0]) {
          uint64_t v72 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v126[0] + 11) & 0xF) + 3) + v126[0];
        }
        else {
          uint64_t v72 = 0;
        }
        if (v125) {
          uint64_t v73 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v125 + 11) & 0xF) + 3) + v125;
        }
        else {
          uint64_t v73 = 0;
        }
        physx::Sc::Scene::addConstraint((int32x2_t *)this + 2, v70 + 24, v72, v73);
      }
      else if ((v71 & 0x10000000) != 0)
      {
        physx::Scb::Constraint::syncState(*(physx::Scb::Constraint **)(v69 + 8 * v68), v65);
      }
      ++v68;
    }
    while (v68 < *((unsigned int *)this + 2001));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 7952);
  uint64_t v74 = *((unsigned int *)this + 557);
  if (v74)
  {
    float v75 = (void *)*((void *)this + 273);
    do
    {
      if ((*(unsigned char *)(*v75 - 13) & 0x10) == 0) {
        physx::Scb::Articulation::syncState((physx::Scb::Articulation *)(*v75 - 24));
      }
      ++v75;
      --v74;
    }
    while (v74);
  }
  if (*((_DWORD *)this + 2015))
  {
    unint64_t v76 = 0;
    uint64_t v77 = *((void *)this + 1002);
    do
    {
      uint64_t v78 = *(void *)(v77 + 8 * v76);
      unsigned int v79 = *(_DWORD *)(v78 + 8);
      if (v79 >> 30 == 1)
      {
        if (*(_DWORD *)(v78 + 128))
        {
          uint64_t v80 = **(void **)(v78 + 120);
          if (v80) {
            uint64_t v81 = v80 + 96;
          }
          else {
            uint64_t v81 = 0;
          }
        }
        else
        {
          uint64_t v81 = 0;
        }
        physx::Sc::Scene::addArticulation((int32x2_t *)this + 2, (physx::Sc::ArticulationCore *)(v78 + 24), (physx::Sc::BodySim **)(v81 + 32));
      }
      else if ((v79 & 0x10000000) != 0)
      {
        physx::Scb::Articulation::syncState((physx::Scb::Articulation *)v78);
      }
      ++v76;
    }
    while (v76 < *((unsigned int *)this + 2015));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8008);
  if (*((_DWORD *)this + 2029))
  {
    unint64_t v82 = 0;
    uint64_t v83 = *((void *)this + 1009);
    do
    {
      uint64_t v84 = *(void *)(v83 + 8 * v82);
      unsigned int v85 = *(_DWORD *)(v84 + 8);
      if (v85 >> 30 == 1)
      {
        physx::Sc::Scene::addArticulationJoint((uint64_t)this + 16, v84 + 24, (physx::Sc::ArticulationSim ***)(*(void *)(v84 + 408) + 128), (physx::Sc::BodySim **)(*(void *)(v84 + 416) + 128));
      }
      else if ((v85 & 0x10000000) != 0)
      {
        if ((v85 & 0xFFFFFF) != 0)
        {
          uint64_t v86 = *(void *)(v84 + 16);
          if (!v86)
          {
            physx::Scb::Scene::getStream(*(void *)v84, HIBYTE(v85) & 0xF);
            uint64_t v86 = v87;
            *(void *)(v84 + 16) = v87;
            unsigned int v85 = *(_DWORD *)(v84 + 8);
          }
          if (v85)
          {
            physx::Sc::ArticulationJointCore::setParentPose(v84 + 24, v86);
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 2) != 0) {
              goto LABEL_184;
            }
LABEL_161:
            if ((v85 & 4) == 0) {
              goto LABEL_162;
            }
LABEL_185:
            *(_OWORD *)(v84 + 304) = *(_OWORD *)(v86 + 56);
            if ((v85 & 8) != 0) {
              goto LABEL_186;
            }
LABEL_163:
            if ((v85 & 0x10) == 0) {
              goto LABEL_164;
            }
LABEL_187:
            *(_DWORD *)(v84 + 332) = *(_DWORD *)(v86 + 84);
            if ((v85 & 0x20) != 0) {
              goto LABEL_188;
            }
LABEL_165:
            if ((v85 & 0x40) == 0) {
              goto LABEL_166;
            }
LABEL_189:
            *(_DWORD *)(v84 + 280) = *(_DWORD *)(v86 + 92);
            if ((v85 & 0x100) != 0) {
              goto LABEL_190;
            }
LABEL_167:
            if ((v85 & 0x200) == 0) {
              goto LABEL_168;
            }
LABEL_191:
            *(_DWORD *)(v84 + 344) = *(_DWORD *)(v86 + 104);
            if ((v85 & 0x400) != 0) {
              goto LABEL_192;
            }
LABEL_169:
            if ((v85 & 0x800) == 0) {
              goto LABEL_170;
            }
LABEL_193:
            *(unsigned char *)(v84 + 360) = *(unsigned char *)(v86 + 112);
            if ((v85 & 0x4000) != 0) {
              goto LABEL_194;
            }
LABEL_171:
            if ((v85 & 0x8000) == 0) {
              goto LABEL_172;
            }
LABEL_195:
            *(unsigned char *)(v84 + 361) = *(unsigned char *)(v86 + 128);
            if ((v85 & 0x1000) != 0) {
              goto LABEL_196;
            }
LABEL_173:
            if ((v85 & 0x2000) == 0) {
              goto LABEL_174;
            }
LABEL_197:
            *(_DWORD *)(v84 + 356) = *(_DWORD *)(v86 + 120);
            if ((v85 & 0x80000) != 0) {
              goto LABEL_198;
            }
LABEL_175:
            if ((v85 & 0x10000) == 0) {
              goto LABEL_176;
            }
LABEL_199:
            *(unsigned char *)(v84 + 362) = *(_DWORD *)(v86 + 132);
            if ((v85 & 0x20000) != 0) {
              goto LABEL_200;
            }
LABEL_177:
            if ((v85 & 0x40000) == 0) {
              goto LABEL_178;
            }
LABEL_201:
            float v93 = *(float *)(v86 + 148);
            float v92 = *(float *)(v86 + 152);
            *(float *)(v84 + 88) = v93;
            *(float *)(v84 + 92) = v92;
            *(float *)(v84 + 380) = tanf(v92 * 0.25);
            *(float *)(v84 + 384) = tanf(v93 * 0.25);
            if ((v85 & 0x800000) != 0) {
              goto LABEL_202;
            }
LABEL_179:
            if ((v85 & 0x100000) == 0) {
              goto LABEL_180;
            }
LABEL_207:
            for (uint64_t k = 0; k != 48; k += 8)
            {
              *(void *)(v84 + 88 + k) = *(void *)(v86 + 156 + k);
              *(unsigned char *)(v84 + 301) |= 0x10u;
              float v97 = *(physx::Sc::ArticulationJointSim **)(v84 + 24);
              if (v97) {
                physx::Sc::ArticulationJointSim::setDirty(v97);
              }
            }
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 0x200000) != 0) {
              goto LABEL_212;
            }
LABEL_181:
            if ((v85 & 0x400000) != 0)
            {
LABEL_217:
              uint64_t v103 = 0;
              uint64_t v104 = v84 + 232;
              uint64_t v105 = v86 + 324;
              do
              {
                *(_DWORD *)(v104 + v103) = *(_DWORD *)(v105 + v103 - 24);
                char v106 = *(unsigned char *)(v84 + 301) | 4;
                *(unsigned char *)(v84 + 301) = v106;
                float v107 = *(physx::Sc::ArticulationJointSim **)(v84 + 24);
                if (v107)
                {
                  physx::Sc::ArticulationJointSim::setDirty(v107);
                  char v106 = *(unsigned char *)(v84 + 301);
                  float v107 = *(physx::Sc::ArticulationJointSim **)(v84 + 24);
                }
                *(_DWORD *)(v104 + v103 + 24) = *(_DWORD *)(v105 + v103);
                *(unsigned char *)(v84 + 301) = v106 | 8;
                if (v107) {
                  physx::Sc::ArticulationJointSim::setDirty(v107);
                }
                v103 += 4;
              }
              while (v103 != 24);
              unsigned int v85 = *(_DWORD *)(v84 + 8);
            }
          }
          else
          {
            if ((v85 & 2) == 0) {
              goto LABEL_161;
            }
LABEL_184:
            physx::Sc::ArticulationJointCore::setChildPose(v84 + 24, v86 + 28);
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 4) != 0) {
              goto LABEL_185;
            }
LABEL_162:
            if ((v85 & 8) == 0) {
              goto LABEL_163;
            }
LABEL_186:
            *(void *)(v84 + 320) = *(void *)(v86 + 72);
            *(_DWORD *)(v84 + 328) = *(_DWORD *)(v86 + 80);
            if ((v85 & 0x10) != 0) {
              goto LABEL_187;
            }
LABEL_164:
            if ((v85 & 0x20) == 0) {
              goto LABEL_165;
            }
LABEL_188:
            *(_DWORD *)(v84 + 336) = *(_DWORD *)(v86 + 88);
            if ((v85 & 0x40) != 0) {
              goto LABEL_189;
            }
LABEL_166:
            if ((v85 & 0x100) == 0) {
              goto LABEL_167;
            }
LABEL_190:
            *(_DWORD *)(v84 + 340) = *(_DWORD *)(v86 + 100);
            if ((v85 & 0x200) != 0) {
              goto LABEL_191;
            }
LABEL_168:
            if ((v85 & 0x400) == 0) {
              goto LABEL_169;
            }
LABEL_192:
            float v88 = *(float *)(v86 + 108);
            *(float *)(v84 + 348) = v88;
            *(float *)(v84 + 376) = tanf(v88 * 0.25);
            if ((v85 & 0x800) != 0) {
              goto LABEL_193;
            }
LABEL_170:
            if ((v85 & 0x4000) == 0) {
              goto LABEL_171;
            }
LABEL_194:
            float v89 = *(float *)(v86 + 124);
            *(float *)(v84 + 364) = v89;
            *(float *)(v84 + 388) = tanf(v89 * 0.25);
            if ((v85 & 0x8000) != 0) {
              goto LABEL_195;
            }
LABEL_172:
            if ((v85 & 0x1000) == 0) {
              goto LABEL_173;
            }
LABEL_196:
            *(_DWORD *)(v84 + 352) = *(_DWORD *)(v86 + 116);
            if ((v85 & 0x2000) != 0) {
              goto LABEL_197;
            }
LABEL_174:
            if ((v85 & 0x80000) == 0) {
              goto LABEL_175;
            }
LABEL_198:
            physx::Sc::ArticulationJointCore::setJointType(v84 + 24, *(_DWORD *)(v86 + 136));
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 0x10000) != 0) {
              goto LABEL_199;
            }
LABEL_176:
            if ((v85 & 0x20000) == 0) {
              goto LABEL_177;
            }
LABEL_200:
            float v90 = *(float *)(v86 + 140);
            float v91 = *(float *)(v86 + 144);
            *(float *)(v84 + 96) = v90;
            *(float *)(v84 + 104) = v91;
            *(float *)(v84 + 368) = tanf(v90 * 0.25);
            *(float *)(v84 + 372) = tanf(v91 * 0.25);
            if ((v85 & 0x40000) != 0) {
              goto LABEL_201;
            }
LABEL_178:
            if ((v85 & 0x800000) == 0) {
              goto LABEL_179;
            }
LABEL_202:
            for (uint64_t m = 0; m != 6; ++m)
            {
              *(unsigned char *)(v84 + 290 + m) = *(_DWORD *)(v86 + 348 + 4 * m);
              *(unsigned char *)(v84 + 301) |= 1u;
              float v95 = *(physx::Sc::ArticulationJointSim **)(v84 + 24);
              if (v95) {
                physx::Sc::ArticulationJointSim::setDirty(v95);
              }
            }
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 0x100000) != 0) {
              goto LABEL_207;
            }
LABEL_180:
            if ((v85 & 0x200000) == 0) {
              goto LABEL_181;
            }
LABEL_212:
            for (uint64_t n = 0; n != 96; n += 16)
            {
              int v99 = *(_DWORD *)(v86 + n + 212);
              int v100 = *(_DWORD *)(v86 + n + 216);
              uint64_t v101 = v84 + n;
              *(void *)(v101 + 136) = *(void *)(v86 + n + 204);
              *(_DWORD *)(v101 + 144) = v99;
              *(_DWORD *)(v101 + 148) = v100;
              *(unsigned char *)(v84 + 301) |= 0x20u;
              float v102 = *(physx::Sc::ArticulationJointSim **)(v84 + 24);
              if (v102) {
                physx::Sc::ArticulationJointSim::setDirty(v102);
              }
            }
            unsigned int v85 = *(_DWORD *)(v84 + 8);
            if ((v85 & 0x400000) != 0) {
              goto LABEL_217;
            }
          }
        }
        *(void *)(v84 + 16) = 0;
        *(_DWORD *)(v84 + 8) = v85 & 0xFF000000;
      }
      ++v82;
    }
    while (v82 < *((unsigned int *)this + 2029));
  }
  physx::Scb::ObjectTracker::clear((uint64_t)this + 8064);
  uint64_t result = physx::Cm::FlushPool::clearNotThreadSafe((uint64_t)v122);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    float v109 = *(pthread_mutex_t **)v122;
    return pthread_mutex_unlock(v109);
  }
  return result;
}

void physx::Scb::Aggregate::syncState(physx::Scb::Aggregate *this, physx::Scb::Scene *a2)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  if ((v3 & 0xFFFFFF) == 0) {
    goto LABEL_18;
  }
  int v5 = (unsigned int *)*((void *)this + 2);
  if (v5)
  {
    if ((v3 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v7 = v5[1];
    if (v7)
    {
      uint64_t v8 = (uint64_t *)(*((void *)a2 + 978) + 8 * *v5);
      int v9 = *((_DWORD *)this + 8) & 0xFFFFFF;
      do
      {
        uint64_t v10 = *v8++;
        uint64_t v11 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v10 + 11) & 0xF) + 3) + v10;
        *(_DWORD *)(v11 + 8) = v9 | (*(unsigned __int8 *)(v11 + 11) << 24);
        --v7;
      }
      while (v7);
    }
    goto LABEL_9;
  }
  physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v3) & 0xF);
  int v5 = v6;
  *((void *)this + 2) = v6;
  if (v3) {
    goto LABEL_6;
  }
LABEL_9:
  if ((v3 & 2) != 0)
  {
    unint64_t v12 = v5[3];
    if (v12)
    {
      unint64_t v13 = 0;
      uint64_t v14 = *((void *)a2 + 978) + 8 * v5[2];
      do
      {
        uint64_t v15 = *(void *)(v14 + 8 * v13);
        unint64_t v16 = *(unsigned int *)(v15 + 8);
        uint64_t v17 = (uint64_t *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v16 >> 24) & 0xF) + 3) + v15);
        *((_DWORD *)v17 + 2) |= 0xFFFFFFu;
        if ((v16 >> 30) - 1 <= 1)
        {
          uint64_t v18 = *v17;
          if (v18)
          {
            uint64_t v19 = *(physx::Sc::ShapeSim **)(v18 + 56);
            if (v19)
            {
              do
              {
                physx::Sc::ShapeSim::reinsertBroadPhase(v19);
                uint64_t v19 = *(physx::Sc::ShapeSim **)v19;
              }
              while (v19);
              unint64_t v12 = v5[3];
            }
          }
        }
        ++v13;
      }
      while (v13 < v12);
    }
  }
LABEL_18:
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
}

void physx::Scb::Body::syncState(physx::Scb::Body *this)
{
  int v2 = *((_DWORD *)this + 71);
  unsigned int v3 = *((_DWORD *)this + 2);
  if ((v2 & 0x100000) == 0)
  {
    *((_OWORD *)this + 14) = *((_OWORD *)this + 3);
    int8x8_t v4 = *(int8x8_t *)((char *)this + 64);
    *((int8x8_t *)this + 30) = v4;
    v4.i32[0] = *((_DWORD *)this + 18);
    *((_DWORD *)this + 62) = v4.i32[0];
    if ((v3 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  if ((v2 & 0x200000) != 0)
  {
    uint64_t v7 = (float *)*((void *)this + 2);
    if (!v7)
    {
      physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v3) & 0xF);
      *((void *)this + 2) = v7;
    }
    float v8 = *((float *)this + 20);
    float v9 = *((float *)this + 21);
    float v10 = *((float *)this + 22);
    float v11 = *((float *)this + 23);
    float v12 = v7[60] - *((float *)this + 24);
    float v13 = v7[61] - *((float *)this + 25);
    float v14 = v7[62] - *((float *)this + 26);
    float v15 = v12 + v12;
    float v16 = v13 + v13;
    float v17 = v14 + v14;
    float v18 = (float)(v11 * v11) + -0.5;
    float v19 = (float)((float)-(float)(v9 * v16) - (float)(v8 * v15)) - (float)(v10 * v17);
    float v20 = (float)((float)(v11 * (float)((float)(v10 * v16) - (float)(v9 * v17))) + (float)(v15 * v18))
        - (float)(v8 * v19);
    float v21 = (float)((float)(v11 * (float)((float)(v8 * v17) - (float)(v10 * v15))) + (float)(v16 * v18))
        - (float)(v9 * v19);
    float v22 = (float)((float)(v11 * (float)((float)(v9 * v15) - (float)(v8 * v16))) + (float)(v17 * v18))
        - (float)(v10 * v19);
    float v24 = v7[58];
    float v23 = v7[59];
    float v25 = v7[56];
    float v26 = v7[57];
    float v27 = (float)((float)((float)(v11 * v25) - (float)(v8 * v23)) - (float)(v9 * v24)) + (float)(v26 * v10);
    float v28 = (float)((float)((float)(v11 * v26) - (float)(v9 * v23)) - (float)(v10 * v25)) + (float)(v24 * v8);
    float v29 = (float)((float)((float)(v11 * v24) - (float)(v10 * v23)) - (float)(v8 * v26)) + (float)(v25 * v9);
    float v30 = (float)((float)((float)(v8 * v25) + (float)(v11 * v23)) + (float)(v9 * v26)) + (float)(v10 * v24);
    float v31 = *((float *)this + 12);
    float v32 = *((float *)this + 13);
    float v33 = *((float *)this + 14);
    float v34 = *((float *)this + 15);
    float v35 = *((float *)this + 16);
    float v36 = *((float *)this + 17);
    float v37 = *((float *)this + 18);
    float v38 = v20 + v20;
    float v39 = v21 + v21;
    float v40 = v22 + v22;
    float v41 = (float)(v34 * v34) + -0.5;
    float v42 = (float)((float)(v32 * v39) + (float)(v31 * v38)) + (float)(v33 * v40);
    float v43 = (float)((float)(v34 * (float)((float)(v32 * v40) - (float)(v33 * v39))) + (float)(v38 * v41))
        + (float)(v31 * v42);
    float v44 = (float)((float)((float)((float)(v33 * v38) - (float)(v31 * v40)) * v34) + (float)(v39 * v41))
        + (float)(v32 * v42);
    float v45 = (float)((float)((float)(v31 * v39) - (float)(v32 * v38)) * v34) + (float)(v40 * v41);
    float v46 = (float)((float)((float)(v30 * v31) + (float)(v34 * v27)) + (float)(v32 * v29)) - (float)(v28 * v33);
    float v47 = (float)((float)((float)(v30 * v32) + (float)(v34 * v28)) + (float)(v33 * v27)) - (float)(v29 * v31);
    float v48 = (float)((float)((float)(v30 * v33) + (float)(v34 * v29)) + (float)(v31 * v28)) - (float)(v27 * v32);
    float v49 = (float)((float)((float)(v34 * v30) - (float)(v31 * v27)) - (float)(v32 * v28)) - (float)(v33 * v29);
    *(float *)uint64_t v66 = v46;
    *(float *)&v66[1] = v47;
    *(float *)&v66[2] = v48;
    *(float *)&v66[3] = v49;
    *(float *)&v66[4] = v35 + v43;
    *(float *)&v66[5] = v36 + v44;
    *(float *)&v66[6] = (float)(v45 + (float)(v33 * v42)) + v37;
    *((float *)this + 56) = v46;
    *((float *)this + 57) = v47;
    *((float *)this + 58) = v48;
    *((float *)this + 59) = v49;
    int v5 = (char *)this + 32;
    *((float *)this + 60) = v35 + v43;
    *((float *)this + 61) = v36 + v44;
    *((float *)this + 62) = (float)(v45 + (float)(v33 * v42)) + v37;
    uint64_t v6 = (char *)v66;
  }
  else
  {
    int v5 = (char *)this + 32;
    uint64_t v6 = (char *)this + 224;
  }
  physx::Sc::BodyCore::setBody2World((uint64_t)v5, (uint64_t)v6);
  if (v3)
  {
LABEL_10:
    unsigned int v50 = (unsigned char *)*((void *)this + 2);
    if (!v50)
    {
      int8x8_t v4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF).n128_u64[0];
      *((void *)this + 2) = v50;
    }
    if ((*((unsigned char *)this + 44) & 8) == 0 || (*v50 & 8) != 0)
    {
      if ((*((unsigned char *)this + 44) & 8) == 0 && (*v50 & 8) != 0) {
        physx::Scb::Scene::switchRigidToNoSim(*(physx::Scb::Scene **)this, this, 1);
      }
    }
    else
    {
      physx::Scb::Scene::switchRigidFromNoSim(*(void *)this, this, 1);
    }
  }
LABEL_18:
  if ((v2 & 0xF82FFFFF) == 0) {
    goto LABEL_67;
  }
  uint64_t v51 = *((void *)this + 2);
  if (!v51)
  {
    int8x8_t v4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF).n128_u64[0];
    uint64_t v51 = v52;
    *((void *)this + 2) = v52;
  }
  int v53 = *((_DWORD *)this + 71);
  if (v53)
  {
    v4.i32[0] = *(_DWORD *)(v51 + 164);
    uint64_t v54 = *((void *)this + 26);
    if (v54 && *(unsigned char *)(v54 + 31) == 1)
    {
      *(_DWORD *)(v54 + 44) = v4.i32[0];
      if ((v53 & 2) != 0) {
        goto LABEL_35;
      }
    }
    else
    {
      *((_DWORD *)this + 43) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      int v53 = *((_DWORD *)this + 71);
      if ((v53 & 2) != 0) {
        goto LABEL_35;
      }
    }
LABEL_23:
    if ((v53 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_36;
  }
  if ((v53 & 2) == 0) {
    goto LABEL_23;
  }
LABEL_35:
  physx::Sc::BodyCore::setInverseInertia((uint64_t *)this + 4, v51 + 168);
  int v53 = *((_DWORD *)this + 71);
  if ((v53 & 4) == 0)
  {
LABEL_24:
    if ((v53 & 8) == 0) {
      goto LABEL_25;
    }
LABEL_41:
    v4.i32[0] = *(_DWORD *)(v51 + 184);
    uint64_t v56 = *((void *)this + 26);
    if (v56 && *(unsigned char *)(v56 + 31) == 1)
    {
      *(_DWORD *)(v56 + 52) = v4.i32[0];
      if ((v53 & 0x10) != 0) {
        goto LABEL_46;
      }
    }
    else
    {
      *((_DWORD *)this + 39) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      int v53 = *((_DWORD *)this + 71);
      if ((v53 & 0x10) != 0) {
        goto LABEL_46;
      }
    }
LABEL_26:
    if ((v53 & 0x20) == 0) {
      goto LABEL_27;
    }
LABEL_51:
    v4.i32[0] = *(_DWORD *)(v51 + 192);
    uint64_t v58 = *((void *)this + 26);
    if (v58 && *(unsigned char *)(v58 + 31) == 1)
    {
      *(_DWORD *)(v58 + 60) = v4.i32[0];
      if ((v53 & 0x40) != 0) {
        goto LABEL_56;
      }
    }
    else
    {
      *((_DWORD *)this + 37) = v4.i32[0];
      updateBodySim((uint64_t *)this + 4);
      int v53 = *((_DWORD *)this + 71);
      if ((v53 & 0x40) != 0) {
        goto LABEL_56;
      }
    }
LABEL_28:
    if ((v53 & 0x200) == 0) {
      goto LABEL_59;
    }
    goto LABEL_57;
  }
LABEL_36:
  v4.i32[0] = *(_DWORD *)(v51 + 180);
  uint64_t v55 = *((void *)this + 26);
  if (v55 && *(unsigned char *)(v55 + 31) == 1)
  {
    *(_DWORD *)(v55 + 48) = v4.i32[0];
    if ((v53 & 8) != 0) {
      goto LABEL_41;
    }
  }
  else
  {
    *((_DWORD *)this + 38) = v4.i32[0];
    updateBodySim((uint64_t *)this + 4);
    int v53 = *((_DWORD *)this + 71);
    if ((v53 & 8) != 0) {
      goto LABEL_41;
    }
  }
LABEL_25:
  if ((v53 & 0x10) == 0) {
    goto LABEL_26;
  }
LABEL_46:
  v4.i32[0] = *(_DWORD *)(v51 + 188);
  uint64_t v57 = *((void *)this + 26);
  if (v57 && *(unsigned char *)(v57 + 31) == 1)
  {
    *(_DWORD *)(v57 + 56) = v4.i32[0];
    if ((v53 & 0x20) != 0) {
      goto LABEL_51;
    }
  }
  else
  {
    *((_DWORD *)this + 36) = v4.i32[0];
    updateBodySim((uint64_t *)this + 4);
    int v53 = *((_DWORD *)this + 71);
    if ((v53 & 0x20) != 0) {
      goto LABEL_51;
    }
  }
LABEL_27:
  if ((v53 & 0x40) == 0) {
    goto LABEL_28;
  }
LABEL_56:
  *((_DWORD *)this + 45) = *(_DWORD *)(v51 + 196);
  updateBodySim((uint64_t *)this + 4);
  int v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x200) == 0) {
    goto LABEL_59;
  }
LABEL_57:
  __int16 v59 = *(_WORD *)(v51 + 208);
  *((_WORD *)this + 39) = v59;
  uint64_t v60 = *((void *)this + 4);
  if (v60) {
    *(_WORD *)(v60 + 126) = v59;
  }
LABEL_59:
  if ((v53 & 0x100) != 0)
  {
    v4.i32[0] = *(_DWORD *)(v51 + 204);
    *((_DWORD *)this + 35) = v4.i32[0];
    if ((v53 & 0x400) == 0)
    {
LABEL_61:
      if ((v53 & 0x1000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_74;
    }
  }
  else if ((v53 & 0x400) == 0)
  {
    goto LABEL_61;
  }
  physx::Sc::BodyCore::setBody2Actor((uint64_t)this + 32, (float *)(v51 + 224));
  int v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x1000) == 0)
  {
LABEL_62:
    if ((v53 & 0x800) == 0) {
      goto LABEL_63;
    }
    goto LABEL_75;
  }
LABEL_74:
  *((_DWORD *)this + 46) = *(_DWORD *)(v51 + 256);
  updateBodySim((uint64_t *)this + 4);
  int v53 = *((_DWORD *)this + 71);
  if ((v53 & 0x800) == 0)
  {
LABEL_63:
    if ((v53 & 0x2000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_76;
  }
LABEL_75:
  v4.i32[0] = *(_DWORD *)(v51 + 252);
  *((_DWORD *)this + 31) = v4.i32[0];
  if ((v53 & 0x2000) == 0)
  {
LABEL_64:
    if ((v53 & 0x80) == 0) {
      goto LABEL_65;
    }
    goto LABEL_77;
  }
LABEL_76:
  *((_DWORD *)this + 44) = *(_DWORD *)(v51 + 260);
  updateBodySim((uint64_t *)this + 4);
  if ((*((_DWORD *)this + 71) & 0x80) == 0)
  {
LABEL_65:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
LABEL_77:
  v4.i32[0] = *(_DWORD *)(v51 + 200);
  *((_DWORD *)this + 27) = v4.i32[0];
  if ((v2 & 0x4000) != 0)
  {
LABEL_66:
    uint64_t v61 = *(void *)(*(void *)this + 4384);
    char v65 = *(unsigned char *)(v51 + 348);
    physx::Sc::BodyCore::setFlags((physx::Scb::Body *)((char *)this + 32), v61, &v65, v4);
  }
LABEL_67:
  physx::Scb::Body::syncCollisionWriteThroughState(this);
  int v63 = (physx::Scb::Body *)((char *)this + 32);
  if ((v2 & 0x2000000) != 0)
  {
    physx::Sc::BodyCore::putToSleep(v63);
  }
  else if (*((_DWORD *)this + 2) >> 30 != 3)
  {
    if (*(void *)v63) {
      BOOL v64 = *(_DWORD *)(*(void *)v63 + 184) > 0xFFFFFFFD;
    }
    else {
      BOOL v64 = 1;
    }
    *((_DWORD *)this + 70) = v64;
  }
  physx::Scb::RigidObject::syncState(this, v62);
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
  *((_DWORD *)this + 71) = 0;
}

void physx::Scb::Shape::syncState(__n128 *this, __n128 a2)
{
  unsigned __int32 v3 = this->n128_u32[2];
  int v4 = v3 & 0xFFFFFF;
  if ((v3 & 0xFFFFFF) == 0) {
    goto LABEL_23;
  }
  char v5 = this[6].n128_i8[0];
  unint64_t v6 = this[1].n128_u64[0];
  if (!v6)
  {
    a2.n128_u64[0] = physx::Scb::Scene::getStream(this->n128_u64[0], HIBYTE(v3) & 0xF).n128_u64[0];
    unint64_t v6 = v7;
    this[1].n128_u64[0] = v7;
  }
  unint64_t v8 = this->n128_u64[0];
  if (v3)
  {
    if (!v8)
    {
      physx::Sc::ShapeCore::setGeometry((uint64_t)&this[2], (uint64_t *)(v6 + 64));
      goto LABEL_13;
    }
    (*(void (**)(void, __n128 *))(**(void **)(*(void *)(v8 + 1856) + 1776) + 96))(*(void *)(*(void *)(v8 + 1856) + 1776), this + 4);
    physx::Sc::ShapeCore::setGeometry((uint64_t)&this[2], (uint64_t *)(v6 + 64));
    (*(void (**)(void, __n128 *))(**(void **)(*(void *)(v8 + 1856) + 1776) + 88))(*(void *)(*(void *)(v8 + 1856) + 1776), this + 4);
  }
  if ((v3 & 2) != 0 && v8)
  {
    unsigned int v9 = *(unsigned __int16 *)(v6 + 148);
    float v10 = (const unsigned __int16 *)(v6 + 144);
    if (v9 != 1) {
      float v10 = (const unsigned __int16 *)(*(void *)(v8 + 7792) + 2 * *(unsigned int *)v10);
    }
    physx::Sc::ShapeCore::setMaterialIndices((char *)&this[2], v10, v9);
    (*(void (**)(void, __n128 *))(**(void **)(*(void *)(v8 + 1856) + 1776) + 128))(*(void *)(*(void *)(v8 + 1856) + 1776), this + 4);
  }
LABEL_13:
  unsigned __int32 v3 = this->n128_u32[2];
  if ((v3 & 4) != 0)
  {
    this[4] = *(__n128 *)v6;
    a2.n128_u64[0] = *(void *)(v6 + 16);
    this[5].n128_u64[0] = a2.n128_u64[0];
    a2.n128_u32[0] = *(_DWORD *)(v6 + 24);
    this[5].n128_u32[2] = a2.n128_u32[0];
    if ((v3 & 8) == 0)
    {
LABEL_15:
      if ((v3 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_15;
  }
  a2 = *(__n128 *)(v6 + 28);
  this[3] = a2;
  if ((v3 & 0x10) == 0)
  {
LABEL_16:
    if ((v3 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 44);
  this[5].n128_u32[3] = a2.n128_u32[0];
  if ((v3 & 0x20) == 0)
  {
LABEL_17:
    if ((v3 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 48);
  this[12].n128_u32[0] = a2.n128_u32[0];
  if ((v3 & 0x40) == 0)
  {
LABEL_18:
    if ((v3 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_28:
  this[6].n128_u8[0] = *(unsigned char *)(v6 + 52);
  if ((v3 & 0x80) == 0)
  {
LABEL_19:
    if ((v3 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_29:
  a2.n128_u32[0] = *(_DWORD *)(v6 + 56);
  this[12].n128_u32[1] = a2.n128_u32[0];
  if ((v3 & 0x100) != 0)
  {
LABEL_20:
    a2.n128_u32[0] = *(_DWORD *)(v6 + 60);
    this[12].n128_u32[2] = a2.n128_u32[0];
  }
LABEL_21:
  unint64_t v11 = this[-1].n128_u64[1];
  if (v11)
  {
    int v13 = v4;
    char v12 = v5;
    physx::Sc::RigidCore::onShapeChange((void *)(v11 + 128), (uint64_t)&this[2], &v13, &v12, 1, (int8x8_t)a2.n128_u64[0]);
    unsigned __int32 v3 = this->n128_u32[2];
  }
LABEL_23:
  this[1].n128_u64[0] = 0;
  this->n128_u32[2] = v3 & 0xFF000000;
}

void physx::Scb::Scene::processPendingRemove(physx::Scb::Scene *this, int8x8_t a2)
{
  if (*((_DWORD *)this + 1973))
  {
    unint64_t v3 = 0;
    do
      physx::Scb::RigidObject::processShapeRemoves(*(void *)(*((void *)this + 981) + 8 * v3++));
    while (v3 < *((unsigned int *)this + 1973));
  }
  if (*((_DWORD *)this + 1987))
  {
    unint64_t v4 = 0;
    do
      physx::Scb::RigidObject::processShapeRemoves(*(void *)(*((void *)this + 988) + 8 * v4++));
    while (v4 < *((unsigned int *)this + 1987));
  }
  physx::Scb::Scene::processRemoves<physx::Scb::Constraint,true,false>((uint64_t)this, (uint64_t)this + 7952, a2);
  unint64_t v6 = *((unsigned int *)this + 2001);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 995);
    do
    {
      uint64_t v9 = *(void *)(v8 + 8 * v7);
      if ((~*(_DWORD *)(v9 + 8) & 0x10000001) == 0)
      {
        float v10 = *(void **)(v9 + 104);
        if (v10)
        {
          physx::Sc::ConstraintSim::preBodiesChange(v10, v5);
          unint64_t v6 = *((unsigned int *)this + 2001);
        }
      }
      ++v7;
    }
    while (v7 < v6);
  }
  physx::Scb::Scene::processRemoves<physx::Scb::ArticulationJoint,false,false>((uint64_t)this, (uint64_t)this + 8064);
  physx::Scb::Scene::processRemoves<physx::Scb::RigidStatic,false,true>((uint64_t)this, (uint64_t)this + 7840, v11);
  physx::Scb::Scene::processRemoves<physx::Scb::Body,true,true>((uint64_t)this, (uint64_t)this + 7896, v12);
  physx::Scb::Scene::processRemoves<physx::Scb::Articulation,true,false>((uint64_t)this, (uint64_t)this + 8008);
  unint64_t v13 = *((unsigned int *)this + 2043);
  if (v13)
  {
    for (unint64_t i = 0; i < v13; ++i)
    {
      uint64_t v15 = *(void *)(*((void *)this + 1016) + 8 * i);
      if (*(_DWORD *)(v15 + 8) >> 30 == 3)
      {
        physx::Scb::Aggregate::syncState(*(physx::Scb::Aggregate **)(*((void *)this + 1016) + 8 * i), this);
        physx::Sc::Scene::deleteAggregate((physx::Scb::Scene *)((char *)this + 16), *(_DWORD *)(v15 + 32));
        unint64_t v13 = *((unsigned int *)this + 2043);
      }
    }
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Constraint,true,false>(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  if (*(_DWORD *)(a2 + 52))
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 16;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      if (*(_DWORD *)(v6 + 8) >> 30 == 3)
      {
        physx::Sc::Scene::removeConstraint(v5, v6 + 24, a3);
        if ((*(unsigned char *)(v6 + 11) & 0x10) == 0) {
          physx::Scb::Constraint::syncState((physx::Scb::Constraint *)v6, (float32x2_t)a3);
        }
      }
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 52));
  }
}

uint64_t physx::Scb::Scene::processRemoves<physx::Scb::ArticulationJoint,false,false>(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 52);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = result + 16;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      if (*(_DWORD *)(v6 + 8) >> 30 == 3)
      {
        uint64_t result = physx::Sc::Scene::removeArticulationJoint(v5, (physx::Sc::ArticulationJointSim **)(v6 + 24));
        unint64_t v2 = *(unsigned int *)(a2 + 52);
      }
      ++v4;
    }
    while (v4 < v2);
  }
  return result;
}

void physx::Scb::Scene::processRemoves<physx::Scb::RigidStatic,false,true>(uint64_t a1, uint64_t a2, __n128 a3)
{
  v33[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 52))
  {
    unint64_t v4 = 0;
    float v27 = (physx::Sc::Scene *)(a1 + 16);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      unint64_t v6 = *(unsigned int *)(v5 + 8);
      if (v6 >> 30 == 3)
      {
        if ((*(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + v5 + 12) & 8) != 0)
        {
          v33[0] = 0x4000000000;
          char v31 = 1;
          float v32 = v30;
          uint64_t v19 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v5 + 11) & 0xF) + 3) + v5;
          uint64_t v20 = v19 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v19 + 13) + 10);
          float v21 = (__n128 **)(v20 + 40);
          uint64_t v22 = *(unsigned __int16 *)(v20 + 48);
          if (v22 == 1)
          {
            uint64_t v22 = 1;
            goto LABEL_33;
          }
          if (*(_WORD *)(v20 + 48))
          {
            float v21 = (__n128 **)*v21;
LABEL_33:
            uint64_t v23 = *(void *)v5 + 7736;
            do
            {
              float v24 = *v21;
              unsigned int v25 = (*v21)[3].n128_u32[2];
              if ((v25 & 0x10000000) != 0)
              {
                physx::Scb::Shape::syncState(v24 + 3, a3);
                float v29 = v24 + 3;
                physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v23, (uint64_t *)&v29);
                unsigned int v25 = v24[3].n128_u32[2] & 0xEFFFFFFF;
                v24[3].n128_u32[2] = v25;
              }
              if ((v25 & 0xF000000) == 0x1000000)
              {
                v24[3].n128_u32[2] = v25 & 0x3FFFFFFF;
                v24[3].n128_u64[0] = 0;
              }
              ++v21;
              --v22;
            }
            while (v22);
            int v26 = HIDWORD(v33[0]);
            if ((v33[0] & 0x8000000000000000) != 0) {
              goto LABEL_44;
            }
          }
          else
          {
            int v26 = 64;
          }
          if ((v26 & 0x7FFFFFFF) != 0 && v32 != v30 && v32) {
            (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
          }
          goto LABEL_44;
        }
        unsigned int v7 = (v6 >> 4) & 1;
        v33[0] = 0x4000000000;
        char v31 = 1;
        float v32 = v30;
        uint64_t v8 = *(void *)(a1 + 4392);
        BOOL v9 = v8 == 0;
        if (v8) {
          float v10 = (unsigned char *)(v8 + 536);
        }
        else {
          float v10 = v30;
        }
        if (v8) {
          __n128 v11 = (uint64_t **)(v8 + 1056);
        }
        else {
          __n128 v11 = (uint64_t **)&v32;
        }
        __n128 v12 = (unsigned int *)(v8 + 1064);
        if (v9) {
          unint64_t v13 = (unsigned int *)v33;
        }
        else {
          unint64_t v13 = v12;
        }
        physx::Sc::Scene::removeStatic(v27, (uint64_t *)(v5 + 32), (uint64_t)v10, v7);
        uint64_t v14 = *v13;
        if (v14)
        {
          uint64_t v15 = *v11;
          uint64_t v16 = *(void *)v5 + 7736;
          do
          {
            uint64_t v17 = *v15;
            unsigned int v18 = *(_DWORD *)(*v15 - 24);
            if ((v18 & 0x10000000) != 0)
            {
              physx::Scb::Shape::syncState((__n128 *)(v17 - 32), a3);
              float v29 = (__n128 *)(v17 - 32);
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v16, (uint64_t *)&v29);
              unsigned int v18 = *(_DWORD *)(v17 - 24) & 0xEFFFFFFF;
              *(_DWORD *)(v17 - 24) = v18;
            }
            if ((v18 & 0xF000000) == 0x1000000)
            {
              *(_DWORD *)(v17 - 24) = v18 & 0x3FFFFFFF;
              *(void *)(v17 - 32) = 0;
            }
            if (atomic_fetch_add((atomic_uint *volatile)(v17 - 48), 0xFFFFFFFF) == 1) {
              (*(void (**)(uint64_t))(*(void *)(v17 - 56) + 16))(v17 - 56);
            }
            ++v15;
            --v14;
          }
          while (v14);
        }
        if ((v33[0] & 0x8000000000000000) == 0 && (v33[0] & 0x7FFFFFFF00000000) != 0 && v32 != v30)
        {
          if (v32) {
            (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
          }
        }
      }
LABEL_44:
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 52));
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Body,true,true>(uint64_t a1, uint64_t a2, __n128 a3)
{
  v32[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 52))
  {
    uint64_t v4 = 0;
    int v26 = (physx::Sc::Scene *)(a1 + 16);
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v4);
      unint64_t v6 = *(unsigned int *)(v5 + 8);
      if (v6 >> 30 == 3) {
        break;
      }
LABEL_41:
      if (++v4 >= (unint64_t)*(unsigned int *)(a2 + 52)) {
        return;
      }
    }
    *(_DWORD *)(v5 + 284) &= 0xF9FFFFFF;
    if ((*(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + v5 + 12) & 8) != 0)
    {
      v32[0] = 0x4000000000;
      char v30 = 1;
      char v31 = v29;
      uint64_t v19 = v5 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v5 + 45) + 10);
      uint64_t v20 = (__n128 **)(v19 + 72);
      uint64_t v21 = *(unsigned __int16 *)(v19 + 80);
      if (v21 == 1)
      {
        uint64_t v21 = 1;
      }
      else
      {
        if (!*(_WORD *)(v19 + 80))
        {
          int v25 = 64;
          goto LABEL_35;
        }
        uint64_t v20 = (__n128 **)*v20;
      }
      uint64_t v22 = *(void *)v5 + 7736;
      do
      {
        uint64_t v23 = *v20;
        unsigned int v24 = (*v20)[3].n128_u32[2];
        if ((v24 & 0x10000000) != 0)
        {
          physx::Scb::Shape::syncState(v23 + 3, a3);
          float v28 = v23 + 3;
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v22, (uint64_t *)&v28);
          unsigned int v24 = v23[3].n128_u32[2] & 0xEFFFFFFF;
          v23[3].n128_u32[2] = v24;
        }
        if ((v24 & 0xF000000) == 0x1000000)
        {
          v23[3].n128_u32[2] = v24 & 0x3FFFFFFF;
          v23[3].n128_u64[0] = 0;
        }
        ++v20;
        --v21;
      }
      while (v21);
    }
    else
    {
      unsigned int v7 = (v6 >> 4) & 1;
      v32[0] = 0x4000000000;
      char v30 = 1;
      char v31 = v29;
      uint64_t v8 = *(void *)(a1 + 4392);
      BOOL v9 = v8 == 0;
      if (v8) {
        float v10 = (unsigned char *)(v8 + 536);
      }
      else {
        float v10 = v29;
      }
      if (v8) {
        __n128 v11 = (uint64_t **)(v8 + 1056);
      }
      else {
        __n128 v11 = (uint64_t **)&v31;
      }
      __n128 v12 = (unsigned int *)(v8 + 1064);
      if (v9) {
        unint64_t v13 = (unsigned int *)v32;
      }
      else {
        unint64_t v13 = v12;
      }
      physx::Sc::Scene::removeBody(v26, (uint64_t *)(v5 + 32), (uint64_t)v10, v7);
      uint64_t v14 = *v13;
      if (v14)
      {
        uint64_t v15 = *v11;
        uint64_t v16 = *(void *)v5 + 7736;
        do
        {
          uint64_t v17 = *v15;
          unsigned int v18 = *(_DWORD *)(*v15 - 24);
          if ((v18 & 0x10000000) != 0)
          {
            physx::Scb::Shape::syncState((__n128 *)(v17 - 32), a3);
            float v28 = (__n128 *)(v17 - 32);
            physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v16, (uint64_t *)&v28);
            unsigned int v18 = *(_DWORD *)(v17 - 24) & 0xEFFFFFFF;
            *(_DWORD *)(v17 - 24) = v18;
          }
          if ((v18 & 0xF000000) == 0x1000000)
          {
            *(_DWORD *)(v17 - 24) = v18 & 0x3FFFFFFF;
            *(void *)(v17 - 32) = 0;
          }
          if (atomic_fetch_add((atomic_uint *volatile)(v17 - 48), 0xFFFFFFFF) == 1) {
            (*(void (**)(uint64_t))(*(void *)(v17 - 56) + 16))(v17 - 56);
          }
          ++v15;
          --v14;
        }
        while (v14);
      }
    }
    int v25 = HIDWORD(v32[0]);
    if ((v32[0] & 0x8000000000000000) != 0)
    {
LABEL_39:
      if ((*(unsigned char *)(v5 + 11) & 0x10) == 0) {
        physx::Scb::Body::syncState((physx::Scb::Body *)v5);
      }
      goto LABEL_41;
    }
LABEL_35:
    if ((v25 & 0x7FFFFFFF) != 0 && v31 != v29 && v31) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    goto LABEL_39;
  }
}

void physx::Scb::Scene::processRemoves<physx::Scb::Articulation,true,false>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 52))
  {
    unint64_t v3 = 0;
    uint64_t v4 = (physx::Sc::Scene *)(a1 + 16);
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8 * v3);
      unsigned int v6 = *(_DWORD *)(v5 + 8);
      if (v6 >> 30 == 3)
      {
        *(_DWORD *)(v5 + 8) = v6 & 0xFFFFFCFF;
        physx::Sc::Scene::removeArticulation(v4, (physx::Sc::ArticulationSim **)(v5 + 24));
        if ((*(unsigned char *)(v5 + 11) & 0x10) == 0) {
          physx::Scb::Articulation::syncState((physx::Scb::Articulation *)v5);
        }
      }
      ++v3;
    }
    while (v3 < *(unsigned int *)(a2 + 52));
  }
}

void *physx::Scb::Scene::scheduleForUpdate(void *result, uint64_t a2, int8x8_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  switch(HIBYTE(v3) & 0xF)
  {
    case 1:
    case 2:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 967;
          goto LABEL_23;
        }
      }
      break;
    case 3:
    case 4:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 987;
          goto LABEL_23;
        }
      }
      break;
    case 5:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 980;
          goto LABEL_23;
        }
      }
      break;
    case 6:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 994;
          goto LABEL_23;
        }
      }
      break;
    case 7:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 1001;
          goto LABEL_23;
        }
      }
      break;
    case 8:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 1008;
          goto LABEL_23;
        }
      }
      break;
    case 9:
      if ((v3 & 0x10000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = v3 | 0x10000000;
        if (v3 >> 30 == 2)
        {
          uint64_t v4 = 1015;
LABEL_23:
          uint64_t result = physx::Scb::ObjectTracker::insert((int32x2_t *)&result[v4], a2, a3);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

__n128 physx::Scb::Scene::getStream(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
    case 2:
      uint64_t NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 160, 0x10u);
      *(void *)(NotThreadSafe + 36) = 0;
      *(void *)(NotThreadSafe + 28) = 0;
      *(unsigned char *)(NotThreadSafe + 52) = 0;
      *(_DWORD *)(NotThreadSafe + 64) = -1;
      *(_DWORD *)(NotThreadSafe + 144) = 0;
      *(_WORD *)(NotThreadSafe + 148) = 0;
      break;
    case 3:
    case 4:
      uint64_t v4 = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 352, 0x10u);
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 40) = 1;
      *(void *)(v4 + 48) = v4 + 8;
      *(void *)(v4 + 56) = 0x400000000;
      *(unsigned char *)(v4 + 128) = 1;
      *(void *)(v4 + 136) = v4 + 64;
      *(void *)(v4 + 144) = 0x400000000;
      *(void *)(v4 + 152) = 0;
      *(_DWORD *)(v4 + 160) = 0;
      *(unsigned char *)(v4 + 264) = 0;
      *(unsigned char *)(v4 + 348) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)(v4 + 300) = 0u;
      *(_OWORD *)(v4 + 316) = 0u;
      *(_OWORD *)(v4 + 332) = 0u;
      break;
    case 5:
      uint64_t v5 = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 208, 0x10u);
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 40) = 1;
      *(void *)(v5 + 48) = v5 + 8;
      *(void *)(v5 + 56) = 0x400000000;
      *(unsigned char *)(v5 + 128) = 1;
      *(void *)(v5 + 136) = v5 + 64;
      *(void *)(v5 + 144) = 0x400000000;
      *(void *)(v5 + 152) = 0;
      *(_DWORD *)(v5 + 160) = 0;
      break;
    case 6:
      *(_WORD *)(physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 32, 0x10u) + 24) = 0;
      break;
    case 7:
      unsigned int v6 = (physx::Cm::FlushPool *)(a1 + 7696);
      int v7 = 28;
      goto LABEL_8;
    case 8:
      unsigned int v6 = (physx::Cm::FlushPool *)(a1 + 7696);
      int v7 = 376;
LABEL_8:
      physx::Cm::FlushPool::allocateNotThreadSafe(v6, v7, 0x10u);
      break;
    case 9:
      uint64_t v8 = (__n128 *)physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)(a1 + 7696), 16, 0x10u);
      result.n128_u64[0] = 0xFFFFFFFFLL;
      result.n128_u64[1] = 0xFFFFFFFFLL;
      *uint64_t v8 = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t physx::Scb::Scene::addBroadPhaseRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 7689))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.cpp", 1184, "PxScene::addBroadPhaseRegion() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, vars0);
    return 0xFFFFFFFFLL;
  }
  else
  {
    BOOL v9 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 1864) + 392) + 40);
    return v9();
  }
}

uint64_t physx::Scb::Scene::removeBroadPhaseRegion(physx::Scb::Scene *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 7689))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.cpp", 1193, "PxScene::removeBroadPhaseRegion() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, vars0);
    return 0;
  }
  else
  {
    BOOL v9 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 233) + 392) + 48);
    return v9();
  }
}

uint64_t physx::Scb::Shape::setMaterialsHelper(physx::Scb::Shape *this, physx::PxMaterial *const *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a3 != 1)
  {
    unsigned int v7 = a3;
    if (a3 < 0x201)
    {
      MEMORY[0x270FA5388](this);
      __n128 v11 = (unsigned __int16 *)&v17[-v13];
      bzero(&v17[-v13], v14);
      if (!v7)
      {
        uint64_t v5 = (char *)this + 32;
        unsigned int v6 = v11;
        a3 = 0;
        goto LABEL_3;
      }
    }
    else
    {
      __n128 v11 = (unsigned __int16 *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v18, 2 * a3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbShape.cpp", 48);
      if (!v11)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbShape.cpp", 57, "PxShape::setMaterials() failed. Out of memory. Call will be ignored.", v8, v9, v10, v17[0]);
        return 0;
      }
    }
    uint64_t v15 = 0;
    do
    {
      v11[v15] = *((_WORD *)a2[v15] + 36);
      ++v15;
    }
    while (v7 != v15);
    physx::Sc::ShapeCore::setMaterialIndices((char *)this + 32, v11, v7);
    if (v7 >= 0x201) {
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)__src, v11);
    }
    goto LABEL_12;
  }
  __src[0] = *((_WORD *)*a2 + 36);
  uint64_t v5 = (char *)this + 32;
  unsigned int v6 = __src;
LABEL_3:
  physx::Sc::ShapeCore::setMaterialIndices(v5, v6, a3);
LABEL_12:
  if (*(void *)this)
  {
    uint64_t v16 = *(void *)(*(void *)(*(void *)this + 1856) + 1776);
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 128))(v16, (char *)this + 64);
  }
  return 1;
}

unint64_t physx::PxsMaterialManager::resize(unint64_t this, unsigned int a2)
{
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2 < a2)
  {
    uint64_t v3 = this;
    *(_DWORD *)(this + 8) = (a2 + 31) & 0xFFFFFFE0;
    this = physx::shdfnd::AlignedAllocator<16u,physx::shdfnd::NonTrackingAllocator>::allocate((uint64_t)&v13, 32 * ((a2 + 31) & 0xFFFFFFE0), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/api/include/PxsMaterialManager.h", 100);
    unint64_t v4 = this;
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        unsigned int v6 = (uint64_t *)(*(void *)v3 + v5);
        uint64_t v7 = this + v5;
        uint64_t v8 = *v6;
        *(_DWORD *)(v7 + 8) = *((_DWORD *)v6 + 2);
        *(void *)uint64_t v7 = v8;
        *(_WORD *)(v7 + 12) = *((_WORD *)v6 + 6);
        *(_WORD *)(v7 + 14) = *((_WORD *)v6 + 7);
        uint64_t v9 = v6[2];
        *(_DWORD *)(v7 + 24) = *((_DWORD *)v6 + 6);
        *(void *)(v7 + 16) = v9;
        v5 += 32;
      }
      while (32 * v2 != v5);
    }
    uint64_t v10 = *(unsigned int *)(v3 + 8);
    if (v2 < v10)
    {
      uint64_t v11 = v10 - v2;
      __n128 v12 = (_WORD *)(this + 32 * v2 + 24);
      do
      {
        *__n128 v12 = -1;
        v12 += 16;
        --v11;
      }
      while (v11);
    }
    if (*(void *)v3) {
      this = (*(uint64_t (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v3 - *(void *)(*(void *)v3 - 8));
    }
    *(void *)uint64_t v3 = v4;
  }
  return this;
}

void physx::Scb::RigidObject::syncState(physx::Scb::RigidObject *this, int8x8_t a2)
{
  unint64_t v3 = *((unsigned int *)this + 2);
  if ((v3 & 0x20) != 0)
  {
    uint64_t v4 = *(void *)this;
    uint64_t v5 = (v3 >> 24) & 0xF;
    uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v5 + 3);
    uint64_t v7 = *((void *)this + 2);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, v5).n128_u64[0];
      uint64_t v7 = v8;
      *((void *)this + 2) = v8;
    }
    unint64_t v9 = *(unsigned int *)(v7 + 160);
    uint64_t v10 = (unsigned int *)(v7 + 152);
    if (v9 != 1)
    {
      if (!*(_DWORD *)(v7 + 160)) {
        goto LABEL_14;
      }
      uint64_t v10 = (unsigned int *)(*(void *)(v4 + 7808) + 8 * *v10);
    }
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)&v10[2 * v11];
      if ((*(unsigned char *)(v12 + 8) & 0x40) != 0) {
        char v13 = (unsigned char *)(*(void *)(v12 + 16) + 52);
      }
      else {
        char v13 = (unsigned char *)(v12 + 96);
      }
      if ((*v13 & 5) != 0)
      {
        int v35 = 128;
        char v34 = 0;
        physx::Sc::RigidCore::onShapeChange((physx::Scb::RigidObject *)((char *)this + v6), v12 + 32, &v35, &v34, 0, a2);
        unint64_t v9 = *(unsigned int *)(v7 + 160);
      }
      ++v11;
    }
    while (v11 < v9);
  }
LABEL_14:
  if ((v3 & 8) != 0)
  {
    uint64_t v14 = *((void *)this + 2);
    if (!v14)
    {
      physx::Scb::Scene::getStream(*(void *)this, *((unsigned char *)this + 11) & 0xF);
      uint64_t v14 = v15;
      *((void *)this + 2) = v15;
    }
    unint64_t v16 = *(unsigned int *)(v14 + 56);
    if (v16)
    {
      unint64_t v17 = 0;
      unsigned int v18 = *((_DWORD *)this + 2) >> 30;
      do
      {
        uint64_t v19 = *(void *)(*(void *)(v14 + 48) + 8 * v17);
        int v20 = *(_DWORD *)(v19 + 8);
        int v21 = v20 & 0xF000000;
        if (v18 <= 2)
        {
          if (v21 == 0x1000000)
          {
            uint64_t v23 = *(void *)this;
            *(_DWORD *)(v19 + 8) = v20 & 0x3FFFFFFF | 0x80000000;
            *(void *)uint64_t v19 = v23;
          }
          unint64_t v24 = *((unsigned int *)this + 2);
          if (v24) {
            int v25 = (unsigned char *)*((void *)this + 2);
          }
          else {
            int v25 = (char *)this + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v24 >> 24) & 0xF) + 3) + 12;
          }
          if ((*v25 & 8) == 0)
          {
            int v26 = *(uint64_t **)((char *)this + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v24) & 0xF) + 3));
            if (v26) {
              physx::Sc::Scene::addShape(v26[9], (physx::Sc::RigidSim *)v26, (physx::Sc::ShapeCore *)(v19 + 32), 0);
            }
            atomic_fetch_add((atomic_uint *volatile)(v19 - 16), 1u);
            unint64_t v16 = *(unsigned int *)(v14 + 56);
          }
        }
        else if (v21 == 0x1000000)
        {
          uint64_t v22 = *(void *)this;
          *(_DWORD *)(v19 + 8) = v20 & 0x3FFFFFFF;
          *(void *)uint64_t v19 = v22;
        }
        ++v17;
      }
      while (v17 < v16);
    }
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::resize(v14 + 8);
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::recreate(v14 + 8, *(_DWORD *)(v14 + 56));
  }
  unint64_t v27 = *((unsigned int *)this + 2);
  if ((v27 & 3) != 0)
  {
    uint64_t v28 = (v27 >> 24) & 0xF;
    float v29 = (char *)this + *((void *)&physx::Scb::Actor::sLazyInitOffsets + v28 + 3);
    char v30 = (unsigned __int8 *)*((void *)this + 2);
    if (v30)
    {
      if ((v27 & 1) == 0) {
        goto LABEL_41;
      }
    }
    else
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, v28).n128_u64[0];
      char v30 = v31;
      *((void *)this + 2) = v31;
      LODWORD(v27) = *((_DWORD *)this + 2);
      if ((v27 & 1) == 0)
      {
LABEL_41:
        if ((v27 & 2) != 0)
        {
          v29[14] = v30[1];
          float v33 = *(void **)v29;
          if (*(void *)v29)
          {
            physx::Sc::ActorSim::setActorsInteractionsDirty(v33, 8, 0, 1, a2);
          }
        }
        return;
      }
    }
    int v32 = *v30;
    if (v32 != v29[12])
    {
      v29[12] = v32;
      if (*(void *)v29)
      {
        (*(void (**)(void))(**(void **)v29 + 16))(*(void *)v29);
        LODWORD(v27) = *((_DWORD *)this + 2);
      }
    }
    goto LABEL_41;
  }
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = (8 * a2);
    if (v4 > 0x20 || *(unsigned char *)(result + 32))
    {
      __n128 result = physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v5 = (void *)result;
    }
    else
    {
      *(unsigned char *)(result + 32) = 1;
      uint64_t v5 = (void *)result;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 48);
  if (v6)
  {
    unint64_t v7 = (unint64_t)&v5[v6];
    uint64_t v8 = *(uint64_t **)(v3 + 40);
    unint64_t v9 = v5;
    do
    {
      uint64_t v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 52) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v3 + 40);
    if (v11 == v3)
    {
      *(unsigned char *)(v3 + 32) = 0;
    }
    else if (v11)
    {
      __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 40) = v5;
  *(_DWORD *)(v3 + 52) = a2;
  return result;
}

int32x2_t *physx::Scb::Scene::add<physx::Scb::RigidStatic>(int32x2_t *result, physx::Scb::Base *a2, int32x2_t *this, uint64_t a4, int8x8_t a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)a2 = result;
  if (result[961].i8[1])
  {
    return physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a5);
  }
  unint64_t v6 = *((unsigned int *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6 & 0xFFFFFFF | 0x80000000;
  if (v6) {
    unint64_t v7 = (unsigned char *)*((void *)a2 + 2);
  }
  else {
    unint64_t v7 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + 12;
  }
  if ((*v7 & 8) == 0)
  {
    uint64_t v8 = (uint64_t)&result[2];
    unint64_t v9 = (void *)((char *)a2 + 32);
    uint64_t v28 = 0x4000000000;
    char v26 = 1;
    unint64_t v27 = v25;
    uint64_t v10 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (BYTE3(v6) & 0xF) + 3);
    uint64_t v11 = &v10[*((void *)&physx::Sc::gOffsetTable + v10[13] + 10)];
    uint64_t v12 = v11 + 40;
    unsigned int v13 = *((unsigned __int16 *)v11 + 24);
    if (v13 == 1)
    {
      __n128 result = (int32x2_t *)physx::Sc::Scene::addStatic(v8, v9, (void *)v11 + 5, 1u, 80, a4);
    }
    else
    {
      uint64_t v12 = (void *)*v12;
      __n128 result = (int32x2_t *)physx::Sc::Scene::addStatic(v8, v9, v12, *((unsigned __int16 *)v11 + 24), 80, a4);
      if (!v13)
      {
LABEL_23:
        if ((v28 & 0x8000000000000000) == 0 && (v28 & 0x7FFFFFFF00000000) != 0 && v27 != v25 && v27) {
          return (int32x2_t *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        return result;
      }
    }
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = v13;
    do
    {
      uint64_t v23 = (void *)*v12;
      int v24 = *(_DWORD *)(*v12 + 56);
      if ((v24 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v23 + 14) = v24 & 0x3FFFFFFF | 0x80000000;
        v23[6] = v21;
      }
      atomic_fetch_add((atomic_uint *volatile)v23 + 8, 1u);
      ++v12;
      --v22;
    }
    while (v22);
    goto LABEL_23;
  }
  uint64_t v28 = 0x4000000000;
  uint64_t v14 = 1;
  char v26 = 1;
  unint64_t v27 = v25;
  uint64_t v15 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3);
  unint64_t v16 = &v15[*((void *)&physx::Sc::gOffsetTable + v15[13] + 10)];
  unint64_t v17 = v16 + 40;
  uint64_t v18 = *((unsigned __int16 *)v16 + 24);
  if (v18 != 1)
  {
    if (!v18) {
      return result;
    }
    unint64_t v17 = *(char **)v17;
    uint64_t v14 = v18;
  }
  do
  {
    uint64_t v19 = *(char **)v17;
    int v20 = *(_DWORD *)(*(void *)v17 + 56);
    if ((v20 & 0xF000000) == 0x1000000)
    {
      *((_DWORD *)v19 + 14) = v20 & 0x3FFFFFFF | 0x80000000;
      *((void *)v19 + 6) = result;
    }
    v17 += 8;
    --v14;
  }
  while (v14);
  return result;
}

int32x2_t *physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(int32x2_t *result, physx::Scb::Base *a2, int32x2_t *this, int8x8_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)a2 = result;
  if (result[961].i8[1])
  {
    __n128 result = physx::Scb::ObjectTracker::scheduleForInsert(this, a2, a4);
    uint64_t v26 = 0x4000000000;
    uint64_t v5 = 1;
    char v24 = 1;
    int v25 = v23;
    unint64_t v6 = *((unsigned int *)a2 + 2);
    unint64_t v7 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3);
    uint64_t v8 = &v7[*((void *)&physx::Sc::gOffsetTable + v7[13] + 10)];
    unint64_t v9 = v8 + 40;
    uint64_t v10 = *((unsigned __int16 *)v8 + 24);
    if (v10 != 1)
    {
      if (!v10) {
        return result;
      }
      unint64_t v9 = *(char **)v9;
      uint64_t v5 = v10;
    }
    uint64_t v11 = *(void *)a2;
    int v12 = v6 & 0xC0000000;
    do
    {
      unsigned int v13 = *(char **)v9;
      int v14 = *(_DWORD *)(*(void *)v9 + 56);
      if ((v14 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v13 + 14) = v14 & 0x3FFFFFFF | v12;
        *((void *)v13 + 6) = v11;
      }
      v9 += 8;
      --v5;
    }
    while (v5);
  }
  else
  {
    unint64_t v15 = *((unsigned int *)a2 + 2);
    *((_DWORD *)a2 + 2) = v15 & 0xFFFFFFF | 0x80000000;
    uint64_t v26 = 0x4000000000;
    uint64_t v16 = 1;
    char v24 = 1;
    int v25 = v23;
    unint64_t v17 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v15 >> 24) & 0xF) + 3);
    uint64_t v18 = &v17[*((void *)&physx::Sc::gOffsetTable + v17[13] + 10)];
    uint64_t v19 = v18 + 40;
    uint64_t v20 = *((unsigned __int16 *)v18 + 24);
    if (v20 != 1)
    {
      if (!v20) {
        return result;
      }
      uint64_t v19 = *(char **)v19;
      uint64_t v16 = v20;
    }
    do
    {
      uint64_t v21 = *(char **)v19;
      int v22 = *(_DWORD *)(*(void *)v19 + 56);
      if ((v22 & 0xF000000) == 0x1000000)
      {
        *((_DWORD *)v21 + 14) = v22 & 0x3FFFFFFF | 0x80000000;
        *((void *)v21 + 6) = result;
      }
      v19 += 8;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>::getName() [T = physx::Scb::MaterialEvent]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 8 * v9;
    uint64_t v11 = *(uint64_t **)a1;
    int v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(void *)(v8 + 8 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v15;
}

uint64_t physx::shdfnd::Array<physx::Scb::MaterialEvent,physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Scb::MaterialEvent>::getName() [T = physx::Scb::MaterialEvent]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    int v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void physx::Scb::Constraint::syncState(physx::Scb::Constraint *this, float32x2_t Force)
{
  uint64_t v3 = (float32x2_t *)((char *)this + 112);
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    Force = physx::Sc::ConstraintSim::getForce(v4, v3, (float32x2_t *)((char *)this + 124));
  }
  else
  {
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  *((_WORD *)this + 68) = *((_WORD *)this + 12) & 1;
  unsigned int v5 = *((_DWORD *)this + 2);
  if ((v5 & 0xFFFFFF) == 0) {
    goto LABEL_19;
  }
  uint64_t v6 = *((void *)this + 2);
  if (!v6)
  {
    Force = (float32x2_t)physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    *((void *)this + 2) = v7;
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v8 = (physx::Sc::ConstraintSim *)*((void *)this + 13);
    if (v8) {
      physx::Sc::ConstraintSim::postBodiesChange(v8, *(void *)v6, *(void *)(v6 + 8), (int8x8_t)Force);
    }
    goto LABEL_11;
  }
  if (v5) {
    goto LABEL_9;
  }
LABEL_11:
  if ((v5 & 2) != 0)
  {
    Force.i32[0] = *(_DWORD *)(v6 + 16);
    float v9 = *(float *)(v6 + 20);
    *((_DWORD *)this + 23) = Force.i32[0];
    *((float *)this + 24) = v9;
    uint64_t v10 = *((void *)this + 13);
    if (v10) {
      physx::Sc::ConstraintSim::setBreakForceLL(v10, *(double *)&Force, v9);
    }
  }
  if ((v5 & 8) != 0)
  {
    Force.i32[0] = *(_DWORD *)(v6 + 28);
    *((_DWORD *)this + 25) = Force.i32[0];
    uint64_t v11 = *((void *)this + 13);
    if (v11) {
      *(_DWORD *)(v11 + 76) = Force.i32[0];
    }
  }
  if ((v5 & 4) != 0)
  {
    __int16 v12 = *((_WORD *)this + 68) | *(_WORD *)(v6 + 24);
    physx::Sc::ConstraintCore::setFlags((physx::Scb::Constraint *)((char *)this + 24), &v12, (int8x8_t)Force);
  }
LABEL_19:
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = *((unsigned __int8 *)this + 11) << 24;
}

void physx::Scb::Articulation::syncState(physx::Scb::Articulation *this)
{
  unsigned int v2 = *((_DWORD *)this + 2);
  if ((v2 & 0x80) != 0)
  {
    if ((v2 & 0x300) == 0)
    {
      float v3 = *((float *)this + 18);
      *((float *)this + 15) = v3;
      goto LABEL_9;
    }
LABEL_5:
    if ((v2 & 0x100) != 0) {
      *((_DWORD *)this + 15) = 0;
    }
    else {
      *((_DWORD *)this + 15) = *((_DWORD *)this + 18);
    }
    goto LABEL_19;
  }
  float v3 = *((float *)this + 15);
  *((float *)this + 18) = v3;
  if ((v2 & 0x300) != 0) {
    goto LABEL_5;
  }
LABEL_9:
  if (v2 >> 30 != 3)
  {
    uint64_t v4 = *((void *)this + 3);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 48)) {
        BOOL v5 = *(_DWORD *)(**(void **)(v4 + 40) + 184) > 0xFFFFFFFD;
      }
      else {
        BOOL v5 = 1;
      }
      BOOL v6 = v5;
    }
    else
    {
      BOOL v6 = v3 == 0.0;
    }
    *((unsigned char *)this + 76) = v6;
  }
LABEL_19:
  unsigned int v7 = v2;
  if ((v2 & 0xFFFC7F) == 0) {
    goto LABEL_29;
  }
  uint64_t v8 = *((void *)this + 2);
  unsigned int v7 = v2;
  if (v8)
  {
    if ((v2 & 2) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v2) & 0xF);
    *((void *)this + 2) = v8;
    unsigned int v7 = *((_DWORD *)this + 2);
    if ((v7 & 2) == 0)
    {
LABEL_22:
      if ((v7 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_34;
    }
  }
  *((_DWORD *)this + 9) = *(_DWORD *)(v8 + 4);
  if ((v7 & 1) == 0)
  {
LABEL_23:
    if ((v7 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_35;
  }
LABEL_34:
  *((_DWORD *)this + 8) = *(_DWORD *)v8;
  if ((v7 & 4) == 0)
  {
LABEL_24:
    if ((v7 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_35:
  *((_DWORD *)this + 10) = *(_DWORD *)(v8 + 8);
  if ((v7 & 8) == 0)
  {
LABEL_25:
    if ((v7 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_37;
  }
LABEL_36:
  *((_DWORD *)this + 12) = *(_DWORD *)(v8 + 12);
  if ((v7 & 0x10) == 0)
  {
LABEL_26:
    if ((v7 & 0x20) == 0) {
      goto LABEL_27;
    }
    goto LABEL_38;
  }
LABEL_37:
  *((_DWORD *)this + 13) = *(_DWORD *)(v8 + 16);
  if ((v7 & 0x20) == 0)
  {
LABEL_27:
    if ((v7 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_38:
  *((_WORD *)this + 22) = *(_WORD *)(v8 + 20);
  if ((v7 & 0x40) != 0) {
LABEL_28:
  }
    *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 24);
LABEL_29:
  if ((v2 & 0x800) != 0)
  {
    physx::Sc::ArticulationCore::setGlobalPose((void **)this + 3);
    unsigned int v7 = *((_DWORD *)this + 2);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = v7 & 0xFF000000;
}

uint64_t physx::Scb::RigidObject::processShapeRemoves(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 8);
  if ((v1 & 8) != 0)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 16);
    if (!v3)
    {
      physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v1) & 0xF);
      uint64_t v3 = v4;
      *(void *)(v2 + 16) = v4;
      unsigned int v1 = *(_DWORD *)(v2 + 8);
    }
    if (v1 >> 30 == 2)
    {
      unint64_t v5 = *(unsigned int *)(v3 + 144);
      if (v5)
      {
        uint64_t v6 = 0;
        for (unint64_t i = 0; i < v5; ++i)
        {
          uint64_t v8 = *(void *)(v3 + 136);
          float v9 = *(__n128 **)(v8 + v6);
          unsigned __int32 v10 = v9->n128_u32[2];
          if ((v10 & 0xF000000) == 0x1000000)
          {
            v9->n128_u32[2] = v10 & 0x3FFFFFFF;
            v9->n128_u64[0] = 0;
          }
          uint64_t v11 = (physx::Sc::RigidCore *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets
                                         + (*(unsigned char *)(v2 + 11) & 0xF)
                                         + 3)
                                       + v2);
          if ((*((unsigned char *)v11 + 12) & 8) == 0)
          {
            uint64_t v12 = *(void *)v2;
            physx::Sc::RigidCore::removeShapeFromScene(v11, (physx::Sc::ShapeCore *)&v9[2], *(unsigned char *)(v8 + v6 + 8) != 0);
            if ((v9->n128_u8[11] & 0x10) != 0)
            {
              physx::Scb::Shape::syncState(v9, v13);
              uint64_t v14 = v9;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v12 + 7736, (uint64_t *)&v14);
              v9->n128_u32[2] &= ~0x10000000u;
            }
            if (atomic_fetch_add((atomic_uint *volatile)&v9[-1], 0xFFFFFFFF) == 1) {
              (*(void (**)(uint64_t *))(v9[-2].n128_u64[1] + 16))(&v9[-2].n128_i64[1]);
            }
            unint64_t v5 = *(unsigned int *)(v3 + 144);
          }
          v6 += 16;
        }
      }
    }
    physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::resize(v3 + 64);
    return physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::recreate(v3 + 64, *(_DWORD *)(v3 + 144));
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 80) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Scb::RemovedShape,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = (16 * a2);
    if (v4 > 0x40 || *(unsigned char *)(result + 64))
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Scb::RemovedShape>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v5 = (_OWORD *)result;
    }
    else
    {
      *(unsigned char *)(result + 64) = 1;
      unint64_t v5 = (_OWORD *)result;
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 80);
  if (v6)
  {
    unint64_t v7 = (unint64_t)&v5[v6];
    uint64_t v8 = *(long long **)(v3 + 72);
    float v9 = v5;
    do
    {
      long long v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *(void *)(v3 + 72);
    if (v11 == v3)
    {
      *(unsigned char *)(v3 + 64) = 0;
    }
    else if (v11)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 72) = v5;
  *(_DWORD *)(v3 + 84) = a2;
  return result;
}

uint64_t physx::Cct::Controller::Controller(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26E72E848;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 63) = 0;
  *(_WORD *)(a1 + 71) = 1;
  char v5 = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 288) = 0u;
  *(unsigned char *)(a1 + 304) = v5;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(void *)(a1 + 435) = 0;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_WORD *)(a1 + 443) = 1;
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 468) = 0;
  *(void *)(a1 + 460) = 0;
  *(unsigned char *)(a1 + 472) = v5;
  *(void *)(a1 + 480) = 0;
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 184) = xmmword_2343AC110;
  *(int64x2_t *)(a1 + 200) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 320) = -1;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_DWORD *)(a1 + 448) = 1069547520;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 544) = a3;
  *(_DWORD *)(a1 + 552) = -1;
  *(_WORD *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  uint64_t v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    unint64_t v7 = "<allocation names disabled>";
  }
  uint64_t v8 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 72, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 592) = v8;
  physx::shdfnd::MutexImpl::MutexImpl(v8);
  *(void *)(a1 + 600) = 0;
  int v9 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  *(_DWORD *)(a1 + 12) = v9;
  float v10 = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = v10;
  *(int8x16_t *)(a1 + 48) = vextq_s8(*(int8x16_t *)(a2 + 48), *(int8x16_t *)(a2 + 48), 8uLL);
  *(unsigned char *)(a1 + 69) = v10 != 0.0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 120);
  *(void *)(a1 + 488) = 0;
  uint64_t v11 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 512) = v11;
  *(void *)(a1 + 576) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 586) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 520) = 0;
  physx::Cct::Controller::setUpDirectionInternal(a1, a2 + 32);
  return a1;
}

uint64_t physx::Cct::Controller::createProxyActor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8 = *(double *)(a1 + 512);
  float32x2_t v15 = vcvt_f32_f64(*(float64x2_t *)(a1 + 496));
  float v16 = v8;
  long long v14 = *(_OWORD *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a2 + 176))(a2, &v14);
  *(void *)(a1 + 488) = result;
  if (result)
  {
    uint64_t v18 = a4;
    char v17 = 11;
    float v10 = (void (***)(void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, char *))(*(void *)a2 + 192))(a2, a3, &v18, 1, 1, &v17);
    (*(void (**)(void, void (***)(void)))(**(void **)(a1 + 488) + 168))(*(void *)(a1 + 488), v10);
    (**v10)(v10);
    (*(void (**)(void))(**(void **)(a1 + 488) + 416))();
    uint64_t v11 = *(void *)(a1 + 488);
    LODWORD(v18) = *(_DWORD *)(a1 + 576);
    updateMassAndInertia(0, v11, (float *)&v18, 1u, 0, 0, v12, v13);
    return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 544) + 88))(*(void *)(a1 + 544), *(void *)(a1 + 488), 0);
  }
  return result;
}

void physx::Cct::Controller::~Controller(physx::Cct::Controller *this)
{
  *(void *)this = &unk_26E72E848;
  if (*((void *)this + 68))
  {
    uint64_t v2 = (void (***)(void))*((void *)this + 61);
    if (v2) {
      (**v2)(v2);
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 74);
  if (*((unsigned char *)this + 280))
  {
    uint64_t v4 = (const physx::PxBase *)*((void *)this + 34);
    if (v4) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 36), v4, v3);
    }
  }
  *((void *)this + 34) = 0;
  if (*((unsigned char *)this + 304))
  {
    char v5 = (const physx::PxBase *)*((void *)this + 37);
    if (v5) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 39), v5, v3);
    }
  }
  *((void *)this + 37) = 0;
  int v6 = *((_DWORD *)this + 41);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 19)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v7 = *((_DWORD *)this + 37);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 17)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 33);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 15)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

void physx::Cct::BoxController::~BoxController(physx::Cct::BoxController *this)
{
}

{
  void (*v2)(void);
  uint64_t vars8;

  physx::Cct::Controller::~Controller((physx::Cct::BoxController *)((char *)this + 8));
  if (this)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void non-virtual thunk to'physx::Cct::BoxController::~BoxController(physx::Cct::BoxController *this)
{
  physx::Cct::Controller::~Controller(this);
  unsigned int v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

void physx::Cct::BoxController::invalidateCache(pthread_mutex_t **this, int8x8_t a2)
{
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
    pthread_mutex_lock(this[75]);
  }
  physx::Cct::SweepTest::voidTestCache((physx::Cct::SweepTest *)(this + 14), a2);
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    int8x8_t v3 = this[75];
    pthread_mutex_unlock(v3);
  }
}

int64x2_t physx::Cct::SweepTest::voidTestCache(physx::Cct::SweepTest *this, int8x8_t a2)
{
  if (*((unsigned char *)this + 176))
  {
    int8x8_t v3 = (const physx::PxBase *)*((void *)this + 21);
    if (v3) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 23), v3, a2);
    }
  }
  *((void *)this + 21) = 0;
  if (*((unsigned char *)this + 200))
  {
    uint64_t v4 = (const physx::PxBase *)*((void *)this + 24);
    if (v4) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)this + 26), v4, a2);
    }
  }
  *((void *)this + 24) = 0;
  *((int64x2_t *)this + 4) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((_OWORD *)this + 5) = xmmword_2343AC110;
  int64x2_t result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *((int64x2_t *)this + 6) = result;
  *((_DWORD *)this + 54) = -1;
  return result;
}

uint64_t physx::Cct::BoxController::getWorldBox(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 624);
  float32x2_t v3 = *(float32x2_t *)(a1 + 616);
  uint64_t v4 = *(void *)(a1 + 520);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 504);
  *(void *)(a2 + 16) = v4;
  float64x2_t v5 = vcvtq_f64_f32(v3);
  *(float64x2_t *)a2 = vsubq_f64(*(float64x2_t *)a2, v5);
  double v6 = v2;
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - v6;
  uint64_t v7 = *(void *)(a1 + 520);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 504);
  *(void *)(a2 + 40) = v7;
  *(float64x2_t *)(a2 + 24) = vaddq_f64(*(float64x2_t *)(a2 + 24), v5);
  *(double *)(a2 + 40) = *(double *)(a2 + 40) + v6;
  return 1;
}

uint64_t non-virtual thunk to'physx::Cct::BoxController::getWorldBox(uint64_t a1, uint64_t a2)
{
  return 1;
}

float physx::Cct::BoxController::getHalfHeight(physx::Cct::BoxController *this)
{
  return *((float *)this + 154);
}

float physx::Cct::BoxController::getHalfSideExtent(physx::Cct::BoxController *this)
{
  return *((float *)this + 155);
}

float physx::Cct::BoxController::getHalfForwardExtent(physx::Cct::BoxController *this)
{
  return *((float *)this + 156);
}

uint64_t physx::Cct::BoxController::updateKinematicProxy(float32x2_t *this)
{
  uint64_t result = (uint64_t)this[62];
  if (result)
  {
    *(void *)&long long v6 = 0;
    (*(void (**)(uint64_t, long long *, uint64_t, void))(*(void *)result + 192))(result, &v6, 1, 0);
    uint64_t v3 = v6;
    long long v6 = 3uLL;
    (*(void (**)(uint64_t, long long *))(*(void *)v3 + 88))(v3, &v6);
    float v4 = this[73].f32[1];
    float v5 = this[78].f32[0] * v4;
    *(float32x2_t *)((char *)&v6 + 4) = vmul_n_f32(this[77], v4);
    *((float *)&v6 + 3) = v5;
    return (*(uint64_t (**)(uint64_t, long long *))(*(void *)v3 + 72))(v3, &v6);
  }
  return result;
}

BOOL physx::Cct::BoxController::setHalfHeight(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[77].f32[0] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

BOOL physx::Cct::BoxController::setHalfSideExtent(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[77].f32[1] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

BOOL physx::Cct::BoxController::setHalfForwardExtent(float32x2_t *this, float32_t a2)
{
  if (a2 > 0.0)
  {
    this[78].f32[0] = a2;
    physx::Cct::BoxController::updateKinematicProxy(this);
  }
  return a2 > 0.0;
}

double physx::Cct::BoxController::getFootPosition(physx::Cct::BoxController *this)
{
  return *((double *)this + 63)
       - (float)(*((float *)this + 10) * (float)(*((float *)this + 154) + *((float *)this + 14)));
}

uint64_t physx::Cct::BoxController::setFootPosition(float32x2_t *a1, float64x2_t *a2)
{
  float64x2_t v5 = *a2;
  double v6 = a2[1].f64[0];
  float v2 = a1[77].f32[0] + a1[7].f32[0];
  float v3 = v2 * a1[6].f32[0];
  float64x2_t v5 = vaddq_f64(v5, vcvtq_f64_f32(vmul_n_f32(a1[5], v2)));
  double v6 = v6 + v3;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(void *)a1 + 24))(a1, &v5);
}

__n128 physx::Cct::BoxController::getOBB(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, float64x2_t *))(*(void *)a1 + 272))(a1, &v14);
  double v4 = (v15 + v17) * 0.5;
  float64x2_t v5 = v14;
  float64x2_t v6 = v16;
  __asm { FMOV            V5.2D, #0.5 }
  float v12 = v17 - v15;
  *(float64x2_t *)a2 = vmulq_f64(vaddq_f64(v14, v16), _Q5);
  *(double *)(a2 + 16) = v4;
  *(float32x2_t *)(a2 + 24) = vmul_f32(vcvt_f32_f64(vsubq_f64(v6, v5)), (float32x2_t)0x3F0000003F000000);
  *(float *)(a2 + 32) = v12 * 0.5;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

uint64_t physx::Cct::BoxController::resize(float32x2_t *this, float a2)
{
  float v4 = (*(float (**)(float32x2_t *))(*(void *)this + 216))(this);
  (*(void (**)(float32x2_t *, float))(*(void *)this + 240))(this, a2);
  float64x2_t v5 = (float64x2_t *)(*(uint64_t (**)(float32x2_t *))(*(void *)this + 32))(this);
  double v6 = v5[1].f64[0];
  float64x2_t v9 = *v5;
  double v10 = v6;
  float v7 = (float)(a2 - v4) * this[6].f32[0];
  float64x2_t v9 = vaddq_f64(v9, vcvtq_f64_f32(vmul_n_f32(this[5], a2 - v4)));
  double v10 = v6 + v7;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(void *)this + 24))(this, &v9);
}

void physx::Cct::CapsuleController::~CapsuleController(physx::Cct::CapsuleController *this)
{
}

{
  void (*v2)(void);
  uint64_t vars8;

  physx::Cct::Controller::~Controller((physx::Cct::CapsuleController *)((char *)this + 8));
  if (this)
  {
    float v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void non-virtual thunk to'physx::Cct::CapsuleController::~CapsuleController(physx::Cct::CapsuleController *this)
{
  physx::Cct::Controller::~Controller(this);
  unsigned int v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

void physx::Cct::CapsuleController::invalidateCache(pthread_mutex_t **this, int8x8_t a2)
{
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
    pthread_mutex_lock(this[75]);
  }
  physx::Cct::SweepTest::voidTestCache((physx::Cct::SweepTest *)(this + 14), a2);
  if (this[76][3].__opaque[0] && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    float v3 = this[75];
    pthread_mutex_unlock(v3);
  }
}

uint64_t physx::Cct::CapsuleController::getWorldBox(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 616);
  float v3 = v2 + (float)(*(float *)(a1 + 620) * 0.5);
  uint64_t v4 = *(void *)(a1 + 520);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 504);
  *(void *)(a2 + 16) = v4;
  double v5 = v2;
  double v6 = v3;
  double v7 = *(double *)(a2 + 8) - v6;
  *(double *)a2 = *(double *)a2 - v5;
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = *(double *)(a2 + 16) - v5;
  uint64_t v8 = *(void *)(a1 + 520);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 504);
  double v9 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  *(void *)(a2 + 40) = v8;
  *(double *)(a2 + 24) = v9 + v5;
  *(double *)(a2 + 32) = v10 + v6;
  *(double *)(a2 + 40) = *(double *)(a2 + 40) + v5;
  return 1;
}

uint64_t non-virtual thunk to'physx::Cct::CapsuleController::getWorldBox(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t physx::Cct::CapsuleController::setRadius(physx::Cct::CapsuleController *this, float a2)
{
  *((float *)this + 154) = a2;
  uint64_t v3 = *((void *)this + 62);
  if (v3)
  {
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v3 + 192))(v3, &v7, 1, 0);
    uint64_t v5 = v7;
    int v8 = 0;
    uint64_t v7 = 2;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 104))(v5, &v7);
    *((float *)&v7 + 1) = *((float *)this + 147) * a2;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 72))(v5, &v7);
  }
  return 1;
}

uint64_t physx::Cct::CapsuleController::setHeight(physx::Cct::CapsuleController *this, float a2)
{
  *((float *)this + 155) = a2;
  uint64_t v3 = *((void *)this + 62);
  if (v3)
  {
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v3 + 192))(v3, &v7, 1, 0);
    uint64_t v5 = v7;
    float v8 = 0.0;
    uint64_t v7 = 2;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 104))(v5, &v7);
    float v8 = (float)(a2 * 0.5) * *((float *)this + 147);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 72))(v5, &v7);
  }
  return 1;
}

uint64_t physx::Cct::CapsuleController::getClimbingMode(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 156);
}

BOOL physx::Cct::CapsuleController::setClimbingMode(uint64_t a1, int a2)
{
  if (a2 <= 1) {
    *(_DWORD *)(a1 + 624) = a2;
  }
  return a2 < 2;
}

double physx::Cct::CapsuleController::getFootPosition(physx::Cct::CapsuleController *this)
{
  return *((double *)this + 63)
       - (float)(*((float *)this + 10)
               * (float)((float)(*((float *)this + 14) + *((float *)this + 154)) + (float)(*((float *)this + 155) * 0.5)));
}

uint64_t physx::Cct::CapsuleController::setFootPosition(float32x2_t *a1, float64x2_t *a2)
{
  float64x2_t v5 = *a2;
  double v6 = a2[1].f64[0];
  float v2 = (float)(a1[7].f32[0] + a1[77].f32[0]) + (float)(a1[77].f32[1] * 0.5);
  float v3 = v2 * a1[6].f32[0];
  float64x2_t v5 = vaddq_f64(v5, vcvtq_f64_f32(vmul_n_f32(a1[5], v2)));
  double v6 = v6 + v3;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(void *)a1 + 24))(a1, &v5);
}

float physx::Cct::CapsuleController::getCapsule(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 504);
  double v3 = *(double *)(a1 + 512);
  double v4 = *(double *)(a1 + 520);
  float v5 = *(float *)(a1 + 620);
  double v6 = (float)((float)(v5 * *(float *)(a1 + 40)) * 0.5);
  double v7 = (float)((float)(v5 * *(float *)(a1 + 44)) * 0.5);
  double v8 = (float)((float)(v5 * *(float *)(a1 + 48)) * 0.5);
  *(double *)a2 = v2 - v6;
  *(double *)(a2 + 8) = v3 - v7;
  *(double *)(a2 + 16) = v4 - v8;
  *(double *)(a2 + 24) = v2 + v6;
  *(double *)(a2 + 32) = v3 + v7;
  *(double *)(a2 + 40) = v4 + v8;
  float result = *(float *)(a1 + 616);
  *(float *)(a2 + 48) = result;
  return result;
}

uint64_t physx::Cct::CapsuleController::resize(float32x2_t *this, float a2)
{
  float v4 = (*(float (**)(float32x2_t *))(*(void *)this + 232))(this);
  (*(void (**)(float32x2_t *, float))(*(void *)this + 240))(this, a2);
  float v5 = (float64x2_t *)(*(uint64_t (**)(float32x2_t *))(*(void *)this + 32))(this);
  double v6 = v5[1].f64[0];
  float64x2_t v9 = *v5;
  double v10 = v6;
  float v7 = (float)((float)(a2 - v4) * this[6].f32[0]) * 0.5;
  float64x2_t v9 = vaddq_f64(v9, vcvtq_f64_f32(vmul_f32(vmul_n_f32(this[5], a2 - v4), (float32x2_t)0x3F0000003F000000)));
  double v10 = v6 + v7;
  return (*(uint64_t (**)(float32x2_t *, float64x2_t *))(*(void *)this + 24))(this, &v9);
}

uint64_t physx::Cct::SweepTest::updateCachedShapesRegistration(uint64_t this, unsigned int a2, int a3, int8x8_t a4)
{
  if (*(unsigned char *)(this + 368))
  {
    uint64_t v4 = this;
    uint64_t v5 = *(unsigned int *)(this + 56);
    if (v5 && v5 != a2)
    {
      uint64_t v8 = *(void *)(this + 48);
      float64x2_t v9 = (unsigned int *)(v8 + 4 * v5);
      double v10 = (unsigned int *)(v8 + 4 * a2);
      do
      {
        if (!*(void *)(v10 + 3)) {
          break;
        }
        uint64_t v11 = *(physx::Cct::CharacterControllerManager **)(v4 + 376);
        float v12 = *(const physx::PxBase **)(v10 + 1);
        this = a3
             ? physx::Cct::CharacterControllerManager::unregisterObservedObject(v11, v12, a4)
             : physx::Cct::CharacterControllerManager::registerObservedObject(v11, v12, a4);
        double v10 = (unsigned int *)((char *)v10 + GeomSizes[*v10]);
      }
      while (v10 != v9);
    }
  }
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::unregisterObservedObject(physx::Cct::CharacterControllerManager *this, const physx::PxBase *a2, int8x8_t a3)
{
  uint64_t v28 = a2;
  if (*((unsigned char *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 33));
  }
  char v29 = 0;
  uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)this + 26, &v28, &v29, a3);
  if (v29)
  {
    int v6 = *(_DWORD *)(result + 8) - 1;
    *(_DWORD *)(result + 8) = v6;
    if (!v6)
    {
      if (*((_DWORD *)this + 65))
      {
        unint64_t v7 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
        unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
        unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
        uint64_t v10 = *((void *)this + 29);
        uint64_t v11 = (_DWORD *)(v10 + 4 * ((*((_DWORD *)this + 61) - 1) & ((v9 >> 31) ^ v9)));
        uint64_t v12 = *v11;
        if (v12 != -1)
        {
          uint64_t v14 = *((void *)this + 27);
          uint64_t v13 = *((void *)this + 28);
          if (*(const physx::PxBase **)(v14 + 16 * v12) == a2)
          {
LABEL_13:
            *uint64_t v11 = *(_DWORD *)(v13 + 4 * v12);
            unsigned int v16 = *((_DWORD *)this + 65) - 1;
            *((_DWORD *)this + 65) = v16;
            ++*((_DWORD *)this + 64);
            if (v12 != v16)
            {
              uint64_t v17 = v14 + 16 * v12;
              uint64_t v18 = (uint64_t *)(v14 + 16 * v16);
              uint64_t v19 = *v18;
              *(void *)uint64_t v17 = *v18;
              *(_DWORD *)(v17 + 8) = *((_DWORD *)v18 + 2);
              *(_DWORD *)(v13 + 4 * v12) = *(_DWORD *)(v13 + 4 * *((unsigned int *)this + 65));
              unint64_t v20 = (~(v19 << 32) + v19) ^ ((unint64_t)(~(v19 << 32) + v19) >> 22);
              unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
              unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
              uint64_t v23 = (_DWORD *)(v10
                             + 4 * ((*((_DWORD *)this + 61) - 1) & ((v22 >> 31) ^ v22)));
              uint64_t v24 = *((unsigned int *)this + 65);
              uint64_t v25 = *v23;
              if (v25 != v24)
              {
                do
                {
                  uint64_t v26 = v25;
                  uint64_t v25 = *(unsigned int *)(v13 + 4 * v25);
                }
                while (v25 != v24);
                uint64_t v23 = (_DWORD *)(v13 + 4 * v26);
              }
              *uint64_t v23 = v12;
            }
            --*((_DWORD *)this + 63);
          }
          else
          {
            while (1)
            {
              uint64_t v15 = v12;
              uint64_t v12 = *(unsigned int *)(v13 + 4 * v12);
              if (v12 == -1) {
                break;
              }
              if (*(const physx::PxBase **)(v14 + 16 * v12) == a2)
              {
                uint64_t v11 = (_DWORD *)(v13 + 4 * v15);
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(void *)uint64_t result = a2;
    *(_DWORD *)(result + 8) = -1;
  }
  if (*((unsigned char *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    uint64_t v27 = (pthread_mutex_t *)*((void *)this + 33);
    return pthread_mutex_unlock(v27);
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::registerObservedObject(physx::Cct::CharacterControllerManager *this, const physx::PxBase *a2, int8x8_t a3)
{
  unint64_t v8 = a2;
  if (*((unsigned char *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
    pthread_mutex_lock(*((pthread_mutex_t **)this + 33));
  }
  char v9 = 0;
  uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)this + 26, &v8, &v9, a3);
  if (v9)
  {
    int v6 = *(_DWORD *)(result + 8) + 1;
  }
  else
  {
    *(void *)uint64_t result = a2;
    int v6 = 1;
  }
  *(_DWORD *)(result + 8) = v6;
  if (*((unsigned char *)this + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    unint64_t v7 = (pthread_mutex_t *)*((void *)this + 33);
    return pthread_mutex_unlock(v7);
  }
  return result;
}

float physx::Cct::SweepTest::onObstacleAdded(uint64_t a1, int a2, uint64_t a3, float *a4, float32x2_t *a5, float result)
{
  int v22 = a2;
  if (*(_DWORD *)(a1 + 216) != -1)
  {
    v14[0] = 0;
    v14[1] = 0;
    int v15 = -1;
    __int16 v16 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    uint64_t v20 = 2139095039;
    int v21 = 0;
    uint64_t v8 = physx::Cct::ObstacleContext::raycastSingle(a3, (uint64_t)v14, &v22, a4, a5, result);
    if (v8)
    {
      float v9 = *((float *)&v17 + 1);
      uint64_t result = *(float *)&v17;
      float v10 = *(float *)&v18;
      if ((float)((float)((float)(*((float *)&v17 + 1) * a5->f32[1]) + (float)(*(float *)&v17 * a5->f32[0]))
                 + (float)(*(float *)&v18 * a5[1].f32[0])) < (float)((float)((float)(a5->f32[1] * *(float *)(a1 + 272))
                                                                           + (float)(*(float *)(a1 + 268) * a5->f32[0]))
                                                                   + (float)(*(float *)(a1 + 276) * a5[1].f32[0])))
      {
        *(_DWORD *)(a1 + 216) = v22;
        *(float *)(a1 + 268) = result;
        *(float *)(a1 + 272) = v9;
        *(float *)(a1 + 276) = v10;
        v11[0] = result;
        v11[1] = v9;
        v11[2] = v10;
        worldToLocal((float *)&v12, v8, v11);
        *(void *)(a1 + 256) = v12;
        uint64_t result = v13;
        *(float *)(a1 + 264) = v13;
      }
    }
  }
  return result;
}

float worldToLocal(float *a1, uint64_t a2, double *a3)
{
  float v3 = *(double *)(a2 + 16);
  float v4 = *(double *)(a2 + 24);
  float v5 = *(double *)(a2 + 32);
  float v6 = *(float *)(a2 + 40);
  float v7 = *(float *)(a2 + 44);
  float v8 = *(float *)(a2 + 48);
  float v9 = *(float *)(a2 + 52);
  float v10 = *a3;
  float v11 = a3[1];
  float v12 = a3[2];
  float v13 = (float)(v10 - v3) + (float)(v10 - v3);
  float v14 = (float)(v11 - v4) + (float)(v11 - v4);
  float v15 = (float)(v12 - v5) + (float)(v12 - v5);
  float v16 = (float)(v9 * v9) + -0.5;
  float v17 = (float)((float)(v7 * v14) + (float)(v6 * v13)) + (float)(v8 * v15);
  float v18 = (float)((float)(v13 * v16) - (float)((float)((float)(v7 * v15) - (float)(v8 * v14)) * v9)) + (float)(v6 * v17);
  float v19 = (float)((float)(v14 * v16) - (float)((float)((float)(v8 * v13) - (float)(v6 * v15)) * v9)) + (float)(v7 * v17);
  float result = (float)((float)(v15 * v16) - (float)((float)((float)(v6 * v14) - (float)(v7 * v13)) * v9))
         + (float)(v8 * v17);
  *a1 = v18;
  a1[1] = v19;
  a1[2] = result;
  return result;
}

float physx::Cct::SweepTest::onObstacleUpdated(uint64_t a1, int a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float result)
{
  if (*(_DWORD *)(a1 + 216) == a2)
  {
    v15[0] = 0;
    v15[1] = 0;
    int v16 = -1;
    __int16 v17 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    uint64_t v21 = 2139095039;
    int v22 = 0;
    int v14 = -1;
    uint64_t v7 = physx::Cct::ObstacleContext::raycastSingle(a3, (uint64_t)v15, a4, a5, &v14, result);
    if (*(_DWORD *)(a1 + 216) != v14)
    {
      if (v7)
      {
        *(_DWORD *)(a1 + 216) = v14;
        float v9 = *((float *)&v18 + 1);
        float v8 = *(float *)&v18;
        *(_DWORD *)(a1 + 268) = v18;
        *(float *)(a1 + 272) = v9;
        float v10 = *(float *)&v19;
        *(_DWORD *)(a1 + 276) = v19;
        v11[0] = v8;
        v11[1] = v9;
        v11[2] = v10;
        worldToLocal((float *)&v12, v7, v11);
        *(void *)(a1 + 256) = v12;
        float result = v13;
        *(float *)(a1 + 264) = v13;
      }
    }
  }
  return result;
}

uint64_t physx::Cct::SweepTest::findTouchedObstacles(uint64_t result, unsigned int *a2, double *a3)
{
  uint64_t v4 = result;
  double v5 = *a3;
  double v6 = a3[1];
  double v8 = a3[2];
  double v7 = a3[3];
  double v9 = a3[4];
  double v10 = a3[5];
  double v93 = (*a3 + v7) * 0.5;
  double v92 = (v6 + v9) * 0.5;
  double v11 = (v8 + v10) * 0.5;
  uint64_t v12 = *a2;
  if (v12)
  {
    float v13 = (void *)*((void *)a2 + 2);
    float v90 = a2;
    float v14 = v10;
    float v15 = v9;
    float v16 = v7;
    float v17 = v8;
    float v18 = v6;
    float v19 = v5;
    float v20 = (float)(v19 + v16) * 0.5;
    float v21 = (float)(v18 + v15) * 0.5;
    float v22 = (float)(v17 + v14) * 0.5;
    float v23 = (float)(v16 - v19) * 0.5;
    float v24 = (float)(v15 - v18) * 0.5;
    float v25 = (float)(v14 - v17) * 0.5;
    uint64_t v91 = result + 48;
    uint64_t v26 = (float *)(*((void *)a2 + 1) + 48);
    do
    {
      float64x2_t v27 = *(float64x2_t *)(v26 - 12);
      float v28 = *((double *)v26 - 4);
      float v29 = *(v26 - 3);
      float v30 = *(v26 - 2);
      float v31 = *(v26 - 1);
      float v32 = v30 + v30;
      float v33 = v31 + v31;
      float v34 = v30 * (float)(v30 + v30);
      float v35 = v31 * (float)(v31 + v31);
      float v36 = (float)(v29 + v29) * v30;
      float v37 = (float)(v29 + v29) * v31;
      float v38 = (float)(v29 + v29) * *v26;
      float v39 = v32 * v31;
      float v40 = v32 * *v26;
      float v41 = v33 * *v26;
      float v42 = 1.0 - (float)(v29 * (float)(v29 + v29));
      *(float *)&long long v96 = (float)(1.0 - v34) - v35;
      *((float *)&v96 + 1) = v36 + v41;
      *((float *)&v96 + 2) = v37 - v40;
      *((float *)&v96 + 3) = v36 - v41;
      *(float *)&long long v97 = v42 - v35;
      *((float *)&v97 + 1) = v39 + v38;
      *((float *)&v97 + 2) = v37 + v40;
      *((float *)&v97 + 3) = v39 - v38;
      float v98 = v42 - v34;
      float32x2_t v99 = vcvt_f32_f64(v27);
      float v100 = v28;
      uint64_t v101 = *((void *)v26 - 3);
      int v102 = *((_DWORD *)v26 - 4);
      float v108 = v20;
      float v109 = v21;
      float v110 = v22;
      float v105 = v23;
      float v106 = v24;
      float v107 = v25;
      v103[0] = xmmword_23435FD50;
      v103[1] = xmmword_23435FD50;
      int v104 = 1065353216;
      float result = physx::Gu::intersectOBBOBB((float *)&v101, (float *)&v99, (float *)&v96, &v105, &v108, (uint64_t)v103, 1);
      if (result)
      {
        unsigned int v43 = *(_DWORD *)(v4 + 56);
        unsigned int v44 = *(_DWORD *)(v4 + 60) & 0x7FFFFFFF;
        unsigned int v45 = v43 + 25;
        if (v43 + 25 > v44)
        {
          unsigned int v46 = 2 * *(_DWORD *)(v4 + 60);
          if (!v44) {
            unsigned int v46 = 2;
          }
          if (v45 <= v46) {
            unsigned int v47 = v46;
          }
          else {
            unsigned int v47 = v45;
          }
          float result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v91, v47);
          unsigned int v43 = *(_DWORD *)(v4 + 56);
        }
        uint64_t v48 = *(void *)(v4 + 48) + 4 * v43;
        *(_DWORD *)(v4 + 56) = v45;
        *(_DWORD *)uint64_t v48 = 0;
        *(void *)(v48 + 4) = *v13;
        *(void *)(v48 + 12) = 0;
        *(double *)(v48 + 20) = v93;
        *(double *)(v48 + 28) = v92;
        *(double *)(v48 + 36) = v11;
        long long v49 = *((_OWORD *)v26 - 3);
        *(void *)(v48 + 60) = *((void *)v26 - 4);
        *(_OWORD *)(v48 + 44) = v49;
        *(_OWORD *)(v48 + 68) = *(_OWORD *)(v26 - 6);
        *(void *)(v48 + 84) = *((void *)v26 - 1);
        *(float *)(v48 + 92) = *v26;
      }
      ++v13;
      v26 += 14;
      --v12;
    }
    while (v12);
    double v5 = *a3;
    double v6 = a3[1];
    double v8 = a3[2];
    double v7 = a3[3];
    double v9 = a3[4];
    double v10 = a3[5];
    a2 = v90;
  }
  uint64_t v50 = a2[6];
  uint64_t v51 = (long long *)*((void *)a2 + 4);
  uint64_t v52 = (void *)*((void *)a2 + 5);
  float v53 = v7 - v5;
  float v54 = v9 - v6;
  float v55 = v10 - v8;
  *(float *)uint64_t v103 = v53 * 0.5;
  *((float *)v103 + 1) = v54 * 0.5;
  *((float *)v103 + 2) = v55 * 0.5;
  if (v50)
  {
    float v56 = (v7 + v5) * 0.5;
    float v57 = (v9 + v6) * 0.5;
    float v58 = (v10 + v8) * 0.5;
    long long v59 = xmmword_23435FD50;
    do
    {
      float v60 = *((float *)v51 + 12);
      double v61 = *(double *)v51;
      double v62 = *((double *)v51 + 3);
      if (*(double *)v51 >= v62) {
        double v63 = *((double *)v51 + 3);
      }
      else {
        double v63 = *(double *)v51;
      }
      double v64 = v60;
      if (v63 - v60 <= a3[3])
      {
        double v65 = v61 >= v62 ? *(double *)v51 : *((double *)v51 + 3);
        if (*a3 <= v65 + v64)
        {
          double v66 = *((double *)v51 + 1);
          double v67 = *((double *)v51 + 4);
          double v68 = v66 >= v67 ? *((double *)v51 + 4) : *((double *)v51 + 1);
          if (v68 - v64 <= a3[4])
          {
            double v69 = v66 >= v67 ? *((double *)v51 + 1) : *((double *)v51 + 4);
            if (a3[1] <= v69 + v64)
            {
              double v70 = *((double *)v51 + 2);
              double v71 = *((double *)v51 + 5);
              double v72 = v70 >= v71 ? *((double *)v51 + 5) : *((double *)v51 + 2);
              if (v72 - v64 <= a3[5])
              {
                double v73 = v70 >= v71 ? *((double *)v51 + 2) : *((double *)v51 + 5);
                if (a3[2] <= v73 + v64)
                {
                  float v74 = v61;
                  float v75 = v66;
                  float v76 = v70;
                  float v108 = v74;
                  float v109 = v75;
                  float v110 = v76;
                  float v77 = v62;
                  float v78 = v67;
                  float v79 = v71;
                  float v105 = v77;
                  float v106 = v78;
                  float v107 = v79;
                  v95[0] = v56;
                  v95[1] = v57;
                  v95[2] = v58;
                  long long v96 = v59;
                  long long v97 = v59;
                  float v98 = 1.0;
                  long long v94 = v59;
                  float result = (uint64_t)physx::Gu::distanceSegmentBoxSquared(&v108, &v105, v95, (float32x2_t *)v103, (float *)&v96, 0, 0);
                  long long v59 = v94;
                  if (v80 <= (float)(v60 * v60))
                  {
                    unsigned int v81 = *(_DWORD *)(v4 + 56);
                    unsigned int v82 = *(_DWORD *)(v4 + 60) & 0x7FFFFFFF;
                    unsigned int v83 = v81 + 25;
                    if (v81 + 25 > v82)
                    {
                      unsigned int v84 = 2 * *(_DWORD *)(v4 + 60);
                      if (!v82) {
                        unsigned int v84 = 2;
                      }
                      if (v83 <= v84) {
                        unsigned int v85 = v84;
                      }
                      else {
                        unsigned int v85 = v83;
                      }
                      float result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v4 + 48, v85);
                      long long v59 = v94;
                      unsigned int v81 = *(_DWORD *)(v4 + 56);
                    }
                    uint64_t v86 = *(void *)(v4 + 48) + 4 * v81;
                    *(_DWORD *)(v4 + 56) = v83;
                    *(_DWORD *)uint64_t v86 = 1;
                    *(void *)(v86 + 4) = *v52;
                    *(void *)(v86 + 12) = 0;
                    *(double *)(v86 + 20) = v93;
                    *(double *)(v86 + 28) = v92;
                    *(double *)(v86 + 36) = v11;
                    long long v87 = *v51;
                    long long v88 = v51[1];
                    long long v89 = v51[2];
                    *(_DWORD *)(v86 + 92) = *((_DWORD *)v51 + 12);
                    *(_OWORD *)(v86 + 76) = v89;
                    *(_OWORD *)(v86 + 60) = v88;
                    *(_OWORD *)(v86 + 44) = v87;
                  }
                }
              }
            }
          }
        }
      }
      ++v52;
      uint64_t v51 = (long long *)((char *)v51 + 56);
      --v50;
    }
    while (v50);
  }
  return result;
}

uint64_t physx::Cct::SweepTest::updateTouchedGeoms(uint64_t a1, uint64_t *a2, unsigned int *a3, float64x2_t *a4, long long *a5, float *a6)
{
  uint64_t v87 = 0;
  int v86 = 0;
  long long v85 = *a5;
  char v12 = *((unsigned char *)a5 + 16);
  HIWORD(v86) = (v12 & 4) != 0;
  HIBYTE(v86) = (v12 & 8) != 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 720))(*a2);
  if (result == *(_DWORD *)(a1 + 352))
  {
    if (*(double *)(a1 + 64) <= a4->f64[0]
      && *(double *)(a1 + 72) <= a4->f64[1]
      && *(double *)(a1 + 80) <= a4[1].f64[0]
      && *(double *)(a1 + 88) >= a4[1].f64[1]
      && *(double *)(a1 + 96) >= a4[2].f64[0])
    {
      double v14 = *(double *)(a1 + 104);
      if (v14 >= a4[2].f64[1])
      {
        int v15 = *(_DWORD *)(a1 + 364);
        if ((v15 & 0x80) != 0)
        {
          *(_DWORD *)(a1 + 364) = v15 & 0xFFFFFF7F;
          physx::Cct::SweepTest::updateCachedShapesRegistration(a1, *(_DWORD *)(a1 + 128), 1, *(int8x8_t *)&v14);
          int v16 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 128);
          *(_DWORD *)(a1 + 24) = v16;
          *(_DWORD *)(a1 + 40) = v16;
          LOBYTE(v86) = 0;
          if ((a5[1] & 2) != 0) {
            BYTE1(v86) = 1;
          }
          physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (long long **)&v85);
          physx::Cct::SweepTest::updateCachedShapesRegistration(a1, *(_DWORD *)(a1 + 128), 0, v17);
          uint64_t result = physx::Cct::SweepTest::findTouchedObstacles(a1, a3, (double *)(a1 + 64));
          ++*(_WORD *)(a1 + 358);
        }
        int v18 = -16711936;
        goto LABEL_36;
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 352) = result;
  }
  float64x2_t v19 = a4[2];
  float64x2_t v20 = *a4;
  *(float64x2_t *)(a1 + 80) = a4[1];
  *(float64x2_t *)(a1 + 96) = v19;
  *(float64x2_t *)(a1 + 64) = v20;
  LODWORD(v19.f64[0]) = *(_DWORD *)(a1 + 344);
  v20.f64[0] = *(float64_t *)(a1 + 80);
  double v21 = *(double *)(a1 + 104);
  float64_t v22 = (v20.f64[0] + v21) * 0.5;
  *(float *)v20.f64 = v21 - v20.f64[0];
  *(float *)v20.f64 = *(float *)v19.f64 * (float)(*(float *)v20.f64 * 0.5);
  float64x2_t v23 = *(float64x2_t *)(a1 + 64);
  float64x2_t v24 = *(float64x2_t *)(a1 + 88);
  __asm { FMOV            V6.2D, #0.5 }
  float64x2_t v30 = vmulq_f64(vaddq_f64(v23, v24), _Q6);
  float64x2_t v31 = vcvtq_f64_f32(vmul_n_f32(vmul_f32(vcvt_f32_f64(vsubq_f64(v24, v23)), (float32x2_t)0x3F0000003F000000), *(float *)v19.f64));
  float64x2_t v32 = vsubq_f64(v30, v31);
  *(float64x2_t *)(a1 + 64) = v32;
  _Q6.f64[0] = *(float *)v20.f64;
  double v33 = v22 - *(float *)v20.f64;
  *(double *)(a1 + 80) = v33;
  float64x2_t v34 = vaddq_f64(v30, v31);
  *(float64x2_t *)(a1 + 88) = v34;
  double v35 = v22 + _Q6.f64[0];
  *(float64_t *)(a1 + 104) = v22 + _Q6.f64[0];
  float v36 = *a6;
  float v37 = a6[1];
  float v38 = a6[2];
  if (*a6 != 0.0 || v37 != 0.0 || v38 != 0.0)
  {
    float v39 = (float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38);
    float v40 = 0.0;
    float v41 = 0.0;
    float v42 = 0.0;
    if (v39 > 0.0)
    {
      float v43 = 1.0 / sqrtf(v39);
      float v40 = v36 * v43;
      float v41 = v37 * v43;
      float v42 = v38 * v43;
    }
    float v44 = a4[1].f64[1] - a4->f64[0];
    float v45 = a4[2].f64[0] - a4->f64[1];
    float v46 = a4[2].f64[1] - a4[1].f64[0];
    float v47 = fabsf((float)((float)(v41 * v45) + (float)(v44 * v40)) + (float)(v46 * v42));
    float v48 = vsubq_f64(v34, v32).f64[0];
    float v49 = v34.f64[1] - v32.f64[1];
    float v50 = v35 - v33;
    float v51 = (float)(fabsf((float)((float)(v41 * v49) + (float)(v48 * v40)) + (float)(v50 * v42)) - v47) * 0.45;
    float v52 = v41 * v51;
    float v53 = v42 * v51;
    double v54 = (float)(v40 * v51);
    float64_t v55 = v32.f64[0] + v54;
    double v56 = v52;
    double v57 = v32.f64[1] + v56;
    *(double *)(a1 + 64) = v32.f64[0] + v54;
    *(double *)(a1 + 72) = v32.f64[1] + v56;
    double v58 = v53;
    double v59 = v33 + v58;
    v34.f64[0] = v34.f64[0] + v54;
    *(double *)(a1 + 80) = v33 + v58;
    *(float64_t *)(a1 + 88) = v34.f64[0];
    double v60 = v34.f64[1] + v56;
    double v35 = v35 + v58;
    *(double *)(a1 + 96) = v34.f64[1] + v56;
    *(double *)(a1 + 104) = v35;
    if (v55 > a4->f64[0]) {
      *(float64_t *)(a1 + 64) = a4->f64[0];
    }
    double v61 = a4->f64[1];
    if (v57 > v61) {
      *(double *)(a1 + 72) = v61;
    }
    double v62 = a4[1].f64[0];
    if (v59 > v62) {
      *(double *)(a1 + 80) = v62;
    }
    double v63 = a4[1].f64[1];
    if (v34.f64[0] < v63) {
      *(double *)(a1 + 88) = v63;
    }
    double v64 = a4[2].f64[0];
    if (v60 < v64) {
      *(double *)(a1 + 96) = v64;
    }
    double v65 = a4[2].f64[1];
    if (v35 < v65) {
      *(double *)(a1 + 104) = v65;
    }
  }
  physx::Cct::SweepTest::updateCachedShapesRegistration(a1, 0, 1, *(int8x8_t *)&v35);
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  ++*(_WORD *)(a1 + 356);
  if (a5[1]) {
    LOBYTE(v86) = 1;
  }
  BYTE1(v86) = 0;
  physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (long long **)&v85);
  int v66 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 132) = v66;
  LOBYTE(v86) = 0;
  if ((a5[1] & 2) != 0) {
    BYTE1(v86) = 1;
  }
  physx::Cct::findTouchedGeometry(a2, (double *)(a1 + 64), a1 + 16, a1 + 32, a1 + 48, (long long **)&v85);
  physx::Cct::SweepTest::updateCachedShapesRegistration(a1, 0, 0, v67);
  uint64_t result = physx::Cct::SweepTest::findTouchedObstacles(a1, a3, (double *)(a1 + 64));
  *(_DWORD *)(a1 + 364) &= ~0x80u;
  int v18 = -65536;
LABEL_36:
  uint64_t v68 = *(void *)a1;
  if (*(void *)a1)
  {
    memset(v73, 0, sizeof(v73));
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0x3F80000000000000;
    int v77 = 1065353216;
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    int v80 = 1065353216;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = 1065353216;
    uint64_t v84 = v68;
    int v69 = *(_DWORD *)(a1 + 8);
    if (v69)
    {
      DWORD1(v73[0]) = -65281;
      float32x4_t v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a4), a4[1]);
      float32x2_t v71 = vcvt_f32_f64(a4[2]);
      char v72 = 1;
      uint64_t result = physx::Cm::operator<<(v73, (uint64_t *)&v70);
      int v69 = *(_DWORD *)(a1 + 8);
    }
    if ((v69 & 2) != 0)
    {
      DWORD1(v73[0]) = v18;
      float32x4_t v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 64)), *(float64x2_t *)(a1 + 80));
      float32x2_t v71 = vcvt_f32_f64(*(float64x2_t *)(a1 + 96));
      char v72 = 1;
      return physx::Cm::operator<<(v73, (uint64_t *)&v70);
    }
  }
  return result;
}

void physx::Cct::findTouchedGeometry(uint64_t *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long **a6)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  double v7 = *a2;
  double v8 = a2[1];
  double v10 = a2[2];
  double v9 = a2[3];
  double v12 = a2[4];
  double v11 = a2[5];
  double v41 = (*a2 + v9) * 0.5;
  double v42 = (v8 + v12) * 0.5;
  double v43 = (v10 + v11) * 0.5;
  __int16 v13 = *((unsigned __int8 *)a6 + 16);
  if (*((unsigned char *)a6 + 17)) {
    v13 |= 2u;
  }
  if (a6[1])
  {
    if (*((unsigned char *)a6 + 18)) {
      v13 |= 4u;
    }
    if (*((unsigned char *)a6 + 19)) {
      v13 |= 8u;
    }
  }
  uint64_t v14 = 0;
  float v15 = v7;
  float v16 = v8;
  float v17 = v10;
  float v18 = v9;
  float v19 = v12;
  float v20 = v11;
  float v35 = v15;
  float v36 = v16;
  float v37 = v17;
  float v38 = v18;
  float v39 = v19;
  float v40 = v20;
  float v21 = (float)(v17 + v20) * 0.5;
  float v22 = v20 - v17;
  do
  {
    float64x2_t v23 = &v48[v14];
    *(void *)float64x2_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((_DWORD *)v23 + 4) = -1;
    v14 += 24;
  }
  while (v14 != 2400);
  float v24 = (float)(v19 - v16) * 0.5;
  float v25 = (float)(v16 + v19) * 0.5;
  if (*a6) {
    long long v33 = **a6;
  }
  else {
    long long v33 = 0uLL;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  int v29 = -1;
  char v30 = 0;
  float64x2_t v31 = v48;
  uint64_t v32 = 100;
  uint64_t v26 = &unk_26E6DD750;
  __int16 v34 = v13 | 0x20;
  int v44 = 3;
  float v45 = (float)(v18 - v15) * 0.5;
  float v46 = v24;
  float v47 = v22 * 0.5;
  long long v49 = xmmword_23435FBB0;
  float v50 = (float)(v15 + v18) * 0.5;
  float v51 = v25;
  float v52 = v21;
  (*(void (**)(void))(*(void *)v6 + 712))();
}

uint64_t physx::Cct::SweepTest::doSweepTest(uint64_t a1, uint64_t *a2, void *a3, unsigned int *a4, uint64_t a5, float *a6, float *a7, int a8, float a9, _DWORD *a10, long long *a11, int a12, void *a13, void *a14)
{
  void (***v125)(long long *__return_ptr);
  char v126;
  void *v127;
  void *v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  float v137;
  int v138;
  int v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  unsigned int v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  char v178;
  unsigned __int16 *v179;
  uint64_t v180;
  float v181;
  float v182;
  float32x2_t v183;
  float32x2_t v184;
  float v185;
  float64x2_t *v186;
  int v193;
  uint64_t v194;
  float v195;
  uint64_t v196;
  float64x2_t v197;
  double v198;
  unint64_t v199;
  float v200;
  unsigned char v201[12];
  unsigned int *v202;
  float32x2_t v203;
  float v204;
  float64x2_t v205;
  double v206;
  float v207;
  unsigned char *v208;
  float v209;
  float v210[7];
  int v211;
  float32x2_t v212;
  float v213;
  float v214;
  float v215;
  float v216;
  long long v217;
  float32x2_t v218;
  float v219;
  unsigned char v220[24];
  double v221;
  float v222;
  long long v223;
  float v224;
  float v225;
  long long v226;
  int v227;
  uint64_t v228;

  float v228 = *MEMORY[0x263EF8340];
  float v17 = *a6;
  float v18 = a6[1];
  float v19 = a6[2];
  if (*a6 == 0.0 && v18 == 0.0 && v19 == 0.0)
  {
    char v20 = 0;
    return v20 & 1;
  }
  char v20 = 0;
  int v21 = 0;
  float v196 = a1 + 268;
  *(_DWORD *)(a1 + 364) &= 0xFFFFFFCB;
  *a14 = 0;
  *a13 = 0;
  *(_DWORD *)(a1 + 216) = -1;
  float v205 = *(float64x2_t *)(a5 + 8);
  float v206 = *(double *)(a5 + 24);
  double v22 = *(double *)(a5 + 24) + v19;
  uint64_t v186 = (float64x2_t *)(a5 + 8);
  double v23 = *(double *)(a5 + 16) + v18;
  double v24 = v205.f64[0] + v17;
  double v25 = v205.f64[1];
  double v26 = v205.f64[0];
  double v27 = v206;
  while (2)
  {
    ++*(_WORD *)(a1 + 362);
    *(float *)&unsigned int v28 = v24 - v26;
    *(float *)&unsigned int v29 = v23 - v25;
    float v30 = v22 - v27;
    float v203 = (float32x2_t)__PAIR64__(v29, v28);
    float v204 = v30;
    (*(void (**)(uint64_t, uint64_t, unsigned char *, float64x2_t *, float32x2_t *))(*(void *)a5 + 16))(a5, a1, v220, &v205, &v203);
    physx::Cct::SweepTest::updateTouchedGeoms(a1, a2, a4, (float64x2_t *)v220, a11, a7);
    float v32 = sqrtf((float)((float)(v203.f32[1] * v203.f32[1]) + (float)(v203.f32[0] * v203.f32[0])) + (float)(v204 * v204));
    if (v32 <= a9) {
      goto LABEL_110;
    }
    v203.f32[0] = v203.f32[0] * (float)(1.0 / v32);
    v203.f32[1] = v203.f32[1] * (float)(1.0 / v32);
    float v204 = v204 * (float)(1.0 / v32);
    if ((float)((float)((float)(v203.f32[1] * a6[1]) + (float)(v203.f32[0] * *a6)) + (float)(v204 * a6[2])) <= 0.0) {
      goto LABEL_110;
    }
    float v193 = v21;
    *(float *)float v201 = v32 + *(float *)(a1 + 316);
    int v33 = *(unsigned __int8 *)(a1 + 338);
    *(void *)&v201[4] = -1;
    uint64_t v34 = *(unsigned int *)(a1 + 56);
    if (!v34) {
      goto LABEL_109;
    }
    float v35 = 0;
    float v36 = *(unsigned int **)(a1 + 48);
    float v37 = &v36[v34];
    float v38 = *((float *)&v199 + 1);
    LODWORD(v39) = v199;
    float v40 = v200;
    while (1)
    {
      uint64_t v41 = *v36;
      double v42 = (unsigned int (*)(uint64_t, uint64_t, unsigned int *, float64x2_t *, float32x2_t *, unsigned char *))*(&gSweepMap[6 * *(unsigned int *)(a5 + 36)] + v41);
      if (v42) {
        break;
      }
LABEL_21:
      float v36 = (unsigned int *)((char *)v36 + GeomSizes[v41]);
      if (v36 == v37)
      {
        float v199 = __PAIR64__(LODWORD(v38), LODWORD(v39));
        float v200 = v40;
        float v36 = v35;
        float v202 = v35;
        if (v35) {
          goto LABEL_23;
        }
LABEL_109:
        v205.f64[0] = v24;
        v205.f64[1] = v23;
        char v20 = 1;
        float v206 = v22;
        int v21 = v193;
LABEL_110:
        if (a10) {
          *a10 = v21;
        }
        *uint64_t v186 = v205;
        v186[1].f64[0] = v206;
        return v20 & 1;
      }
    }
    float v43 = *(float *)v201;
    LODWORD(v223) = *(_DWORD *)v201;
    *(void *)((char *)&v223 + 4) = -1;
    if (!v42(a1, a5, v36, &v205, &v203, v220)) {
      goto LABEL_20;
    }
    if (*(float *)&v223 == 0.0)
    {
      if (v33 && *v36 >= 2 && shouldApplyRecoveryModule(*(unsigned __int16 **)(v36 + 3)))
      {
        float v197 = *(float64x2_t *)v220;
        float v198 = *(double *)&v220[16];
        float v38 = *((float *)&v221 + 1);
        float v39 = *(float *)&v221;
        float v199 = *(void *)&v221;
        float v40 = v222;
        float v200 = v222;
        *(void *)float v201 = v223;
        *(_DWORD *)&v201[8] = DWORD2(v223);
        goto LABEL_79;
      }
      goto LABEL_20;
    }
    if (*(float *)&v223 >= v43)
    {
LABEL_20:
      uint64_t v41 = *v36;
      goto LABEL_21;
    }
    v31.i32[1] = *(_DWORD *)&v220[4];
    float v197 = *(float64x2_t *)v220;
    float v198 = *(double *)&v220[16];
    float v38 = *((float *)&v221 + 1);
    float v39 = *(float *)&v221;
    float v40 = v222;
    *(void *)float v201 = v223;
    *(_DWORD *)&v201[8] = DWORD2(v223);
    if (*(float *)&v223 > 0.0)
    {
      float v35 = v36;
      goto LABEL_20;
    }
    float v199 = *(void *)&v221;
    float v200 = v222;
LABEL_79:
    float v202 = v36;
LABEL_23:
    float v44 = *(float *)v201;
    if (!*(unsigned char *)(a1 + 338) || *(float *)v201 != 0.0)
    {
      if (*v36 <= 1)
      {
        if (a12 == 3)
        {
          char v45 = 0;
          goto LABEL_63;
        }
        a3[2] = 0;
        *((_DWORD *)a3 + 6) = -1;
        float32x2_t v99 = (void *)*a3;
        unsigned int v100 = HIWORD(v36[1]);
        int v101 = (unsigned __int16)v36[1];
        if (v101 == 2)
        {
          *(void *)float v220 = (*(uint64_t (**)(void *))(*v99 + 32))(v99);
          float v221 = v198;
          *(float64x2_t *)&v220[8] = v197;
          float v222 = v39;
          *(void *)&float v223 = __PAIR64__(LODWORD(v40), LODWORD(v38));
          *((float32x2_t *)&v223 + 1) = v203;
          float v224 = v204;
          float v225 = v32;
          float v128 = a3;
          uint64_t v129 = *(void *)(a3[1] + 24);
          uint64_t v130 = 72;
        }
        else
        {
          if (v101 != 1)
          {
            if ((unsigned __int16)v36[1]) {
              goto LABEL_70;
            }
            uint64_t v102 = *(void *)(*(void *)(v99[75] + 104) + 8 * v100);
            *(void *)float v220 = (*(uint64_t (**)(void *))(*v99 + 32))(v99);
            *(float64x2_t *)&v220[8] = v197;
            float v221 = v198;
            float v222 = v39;
            *(void *)&float v223 = __PAIR64__(LODWORD(v40), LODWORD(v38));
            *((float32x2_t *)&v223 + 1) = v203;
            float v224 = v204;
            float v225 = v32;
            *(void *)&float v226 = (*(uint64_t (**)(uint64_t))(*(void *)v102 + 32))(v102);
            uint64_t v103 = v99[10];
            if (v103) {
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v103 + 8))(v103, v220);
            }
            uint64_t v104 = v99[11];
            if (!v104)
            {
LABEL_70:
              char v105 = 0;
            }
            else
            {
              (*(void (**)(long long *__return_ptr))(*(void *)v104 + 8))(&v217);
              char v105 = v217;
            }
            int v122 = v193;
            char v127 = a3;
            goto LABEL_82;
          }
          *(void *)float v220 = (*(uint64_t (**)(void *))(*v99 + 32))(v99);
          *(float64x2_t *)&v220[8] = v197;
          float v221 = v198;
          float v222 = v39;
          *(void *)&float v223 = __PAIR64__(LODWORD(v40), LODWORD(v38));
          *((float32x2_t *)&v223 + 1) = v203;
          float v224 = v204;
          float v225 = v32;
          float v128 = a3;
          uint64_t v129 = *(void *)(a3[1] + 8);
          uint64_t v130 = 80;
        }
        float v131 = v129 + v100 * (unint64_t)v130;
        char v127 = v128;
        *(void *)&float v226 = *(void *)(v131 + 16);
        v128[2] = v131 + 8;
        *((_DWORD *)v128 + 6) = *(_DWORD *)v131;
        float v132 = v99[10];
        if (v132) {
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v132 + 16))(v132, v220);
        }
        float v133 = v99[11];
        if (v133)
        {
          (*(void (**)(long long *__return_ptr))(*(void *)v133 + 16))(&v217);
          char v105 = v217;
        }
        else
        {
          char v105 = 0;
        }
        int v122 = v193;
LABEL_82:
        BOOL v121 = (v105 & 2) == 0;
        if (a12 == 2)
        {
          float v134 = v127[2];
          float v135 = *(_DWORD *)(a1 + 364);
          if (v134)
          {
            float v136 = *((_DWORD *)v127 + 6);
            *(_DWORD *)(a1 + 364) = v135 | 0x20;
            *(_DWORD *)(a1 + 216) = v136;
            float v137 = v198;
            *(float32x2_t *)float v196 = vcvt_f32_f64(v197);
            *(float *)(a1 + 276) = v137;
            worldToLocal((float *)v220, v134, v197.f64);
            char v45 = 0;
            *(void *)(a1 + 256) = *(void *)v220;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)&v220[8];
          }
          else
          {
            char v45 = 0;
            *(_DWORD *)(a1 + 364) = v135 | 0x10;
          }
        }
        else
        {
          char v45 = 0;
        }
LABEL_87:
        float v138 = a12 != 2 || v121;
        if (v122) {
          float v138 = 1;
        }
        if (v138) {
          float v139 = -1;
        }
        else {
          float v139 = 8;
        }
        float v140 = v197.f64[0];
        float v141 = v197.f64[1];
        float v142 = v198;
        float v143 = *(float *)(a1 + 300);
        float v144 = *(float *)(a1 + 304);
        float v145 = (float)(v144 * v141) + (float)(v140 * v143);
        float v146 = *(float *)(a1 + 308);
        *(float *)(a1 + 348) = v145 + (float)(v142 * v146);
        float v147 = *(float *)(a1 + 316);
        if (v44 > v147)
        {
          float v148 = v44 - v147;
          float v205 = vaddq_f64(v205, vcvtq_f64_f32(vmul_n_f32(v203, v148)));
          float v206 = v206 + (float)(v148 * v204);
        }
        if ((v45 & 1) != 0 || (*(unsigned char *)(a1 + 364) & 2) != 0 && *(_DWORD *)(a1 + 280) != 1)
        {
          float v149 = (float)((float)(v144 * v38) + (float)(v39 * v143)) + (float)(v40 * v146);
          float v39 = v39 - (float)(v143 * v149);
          float v38 = v38 - (float)(v144 * v149);
          float v40 = v40 - (float)(v146 * v149);
          float v150 = sqrtf((float)((float)(v38 * v38) + (float)(v39 * v39)) + (float)(v40 * v40));
          if (v150 > 0.0)
          {
            float v151 = 1.0 / v150;
            float v39 = v39 * v151;
            float v38 = v38 * v151;
            float v40 = v40 * v151;
          }
        }
        float v152 = (float)((float)(v38 * v203.f32[1]) + (float)(v203.f32[0] * v39)) + (float)(v204 * v40);
        float v153 = v203.f32[0] - (float)((float)(v39 + v39) * v152);
        float v154 = v203.f32[1] - (float)((float)(v38 + v38) * v152);
        float v155 = v204 - (float)((float)(v40 + v40) * v152);
        uint64_t v156 = sqrtf((float)((float)(v154 * v154) + (float)(v153 * v153)) + (float)(v155 * v155));
        if (v156 > 0.0)
        {
          uint64_t v157 = 1.0 / v156;
          float v153 = v153 * v157;
          float v154 = v154 * v157;
          float v155 = v155 * v157;
        }
        uint64_t v158 = (float)((float)(v38 * v154) + (float)(v153 * v39)) + (float)(v155 * v40);
        int v159 = v38 * v158;
        float32x4_t v160 = v40 * v158;
        float32x4_t v161 = v153 - (float)(v39 * v158);
        float32x4_t v162 = v154 - v159;
        float32x4_t v163 = v155 - v160;
        double v25 = v205.f64[1];
        double v26 = v205.f64[0];
        double v27 = v206;
        if ((*(_DWORD *)(a1 + 364) & 0x40) != 0)
        {
          float32x2_t v164 = sqrtf((float)((float)(v162 * v162) + (float)(v161 * v161)) + (float)(v163 * v163));
          if (v164 > 0.0)
          {
            uint64_t v165 = 1.0 / v164;
            float32x4_t v161 = v161 * v165;
            float32x4_t v162 = v162 * v165;
            float32x4_t v163 = v163 * v165;
          }
        }
        int v21 = v122 + 1;
        uint64_t v166 = v22 - v206;
        uint64_t v167 = v24 - v205.f64[0];
        uint64_t v168 = v23 - v205.f64[1];
        uint64_t v169 = sqrtf((float)((float)(v168 * v168) + (float)(v167 * v167)) + (float)(v166 * v166));
        double v24 = v205.f64[0] + (float)(v169 * v161);
        double v23 = v205.f64[1] + (float)(v169 * v162);
        double v22 = v206 + (float)(v169 * v163);
        char v20 = 1;
        a8 += v139;
        if (!a8) {
          goto LABEL_110;
        }
        continue;
      }
      float v46 = *(_WORD **)(v36 + 3);
      if (a12 == 2)
      {
        uint64_t v47 = *(void *)(v36 + 1);
        unsigned int v48 = *(_DWORD *)(a1 + 364) & 0xFFFFFFCF;
        *(_DWORD *)(a1 + 364) = v48;
        unsigned int v49 = *(_DWORD *)&v201[4];
        if (v46[4] == 6 && *(_DWORD *)&v201[4] != -1)
        {
          *(_DWORD *)(a1 + 364) = v48 | 4;
          float v51 = (float *)(*(void *)(a1 + 16) + 36 * v49);
          float v52 = *(float *)(a1 + 300);
          float v53 = *v51;
          float v54 = v51[1];
          float v55 = *(float *)(a1 + 304);
          float v56 = *(float *)(a1 + 308);
          float v57 = v51[2];
          float v58 = v51[3];
          float v59 = (float)((float)(v54 * v55) + (float)(*v51 * v52)) + (float)(v57 * v56);
          float v60 = v51[4];
          float v61 = v51[5];
          float v62 = (float)((float)(v55 * v60) + (float)(v58 * v52)) + (float)(v61 * v56);
          float v63 = v51[6];
          float v64 = v51[7];
          float v65 = v51[8];
          float v66 = (float)((float)(v55 * v64) + (float)(v63 * v52)) + (float)(v65 * v56);
          if (v59 >= v62) {
            float v67 = (float)((float)(v55 * v60) + (float)(v58 * v52)) + (float)(v61 * v56);
          }
          else {
            float v67 = (float)((float)(v54 * v55) + (float)(*v51 * v52)) + (float)(v57 * v56);
          }
          if (v59 <= v62) {
            float v59 = (float)((float)(v55 * v60) + (float)(v58 * v52)) + (float)(v61 * v56);
          }
          if (v67 >= v66) {
            float v68 = (float)((float)(v55 * v64) + (float)(v63 * v52)) + (float)(v65 * v56);
          }
          else {
            float v68 = v67;
          }
          if (v59 <= v66) {
            float v59 = (float)((float)(v55 * v64) + (float)(v63 * v52)) + (float)(v65 * v56);
          }
          float v69 = (*(double *)(a1 + 64) + *(double *)(a1 + 88)) * 0.5;
          float v70 = (*(double *)(a1 + 72) + *(double *)(a1 + 96)) * 0.5;
          float v71 = (*(double *)(a1 + 80) + *(double *)(a1 + 104)) * 0.5;
          float v72 = (float)((float)(v55 * v70) + (float)(v52 * v69)) + (float)(v56 * v71);
          *(float *)(a1 + 160) = v68 + v72;
          *(float *)(a1 + 164) = v59 + v72;
          float v73 = v58 - v53;
          float v74 = v60 - v54;
          float v75 = v63 - v53;
          float v76 = v64 - v54;
          float v77 = (float)(v74 * (float)(v65 - v57)) - (float)((float)(v61 - v57) * v76);
          float v78 = (float)((float)(v61 - v57) * (float)(v63 - v53)) - (float)(v73 * (float)(v65 - v57));
          float v79 = (float)(v73 * v76) - (float)(v74 * v75);
          *(float *)(a1 + 136) = v77;
          *(float *)(a1 + 140) = v78;
          *(float *)(a1 + 144) = v79;
          float v80 = sqrtf((float)((float)(v78 * v78) + (float)(v77 * v77)) + (float)(v79 * v79));
          if (v80 > 0.0)
          {
            float v81 = 1.0 / v80;
            *(float *)(a1 + 136) = v77 * v81;
            *(float *)(a1 + 140) = v78 * v81;
            *(float *)(a1 + 144) = v79 * v81;
          }
        }
        *a14 = v47;
        *a13 = v46;
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v46 + 152))(v220);
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v47 + 160))(&v217, v47);
        char v45 = 0;
        float v82 = (float)(*(float *)&v220[12] * *(float *)&v220[12]) + -0.5;
        float v83 = (float)((float)((float)(v218.f32[1] + v218.f32[1]) * *(float *)&v220[4])
                    + (float)(*(float *)v220 * (float)(v218.f32[0] + v218.f32[0])))
            + (float)(*(float *)&v220[8] * (float)(v219 + v219));
        float v84 = *(float *)&v220[16]
            + (float)((float)((float)(*(float *)&v220[12]
                                    * (float)((float)(*(float *)&v220[4] * (float)(v219 + v219))
                                            - (float)(*(float *)&v220[8] * (float)(v218.f32[1] + v218.f32[1]))))
                            + (float)((float)(v218.f32[0] + v218.f32[0]) * v82))
                    + (float)(*(float *)v220 * v83));
        float v85 = *(float *)&v220[20]
            + (float)((float)((float)(*(float *)&v220[12]
                                    * (float)((float)(*(float *)&v220[8] * (float)(v218.f32[0] + v218.f32[0]))
                                            - (float)(*(float *)v220 * (float)(v219 + v219))))
                            + (float)((float)(v218.f32[1] + v218.f32[1]) * v82))
                    + (float)(*(float *)&v220[4] * v83));
        float v86 = *(float *)&v221
            + (float)((float)((float)(*(float *)&v220[12]
                                    * (float)((float)(*(float *)v220 * (float)(v218.f32[1] + v218.f32[1]))
                                            - (float)(*(float *)&v220[4] * (float)(v218.f32[0] + v218.f32[0]))))
                            + (float)((float)(v219 + v219) * v82))
                    + (float)(*(float *)&v220[8] * v83));
        float v87 = (float)((float)((float)(*(float *)v220 * *((float *)&v217 + 3))
                            + (float)(*(float *)&v220[12] * *(float *)&v217))
                    + (float)(*(float *)&v220[4] * *((float *)&v217 + 2)))
            - (float)(*((float *)&v217 + 1) * *(float *)&v220[8]);
        float v88 = (float)((float)((float)(*(float *)&v220[4] * *((float *)&v217 + 3))
                            + (float)(*(float *)&v220[12] * *((float *)&v217 + 1)))
                    + (float)(*(float *)&v220[8] * *(float *)&v217))
            - (float)(*((float *)&v217 + 2) * *(float *)v220);
        float v89 = (float)((float)((float)(*(float *)&v220[8] * *((float *)&v217 + 3))
                            + (float)(*(float *)&v220[12] * *((float *)&v217 + 2)))
                    + (float)(*(float *)v220 * *((float *)&v217 + 1)))
            - (float)(*(float *)&v217 * *(float *)&v220[4]);
        float v90 = (float)((float)((float)(*(float *)&v220[12] * *((float *)&v217 + 3))
                            - (float)(*(float *)v220 * *(float *)&v217))
                    - (float)(*(float *)&v220[4] * *((float *)&v217 + 1)))
            - (float)(*(float *)&v220[8] * *((float *)&v217 + 2));
        float v91 = v197.f64[0];
        float v92 = v197.f64[1];
        float v93 = v198;
        *(float *)(a1 + 248) = v92;
        *(float *)(a1 + 252) = v93;
        float v94 = (float)(v91 - v84) + (float)(v91 - v84);
        float v95 = (float)(v92 - v85) + (float)(v92 - v85);
        float v96 = (float)(v93 - v86) + (float)(v93 - v86);
        float v97 = (float)(v90 * v90) + -0.5;
        float v98 = (float)((float)(v88 * v95) + (float)(v87 * v94)) + (float)(v89 * v96);
        *(float *)(a1 + 232) = (float)((float)(v94 * v97)
                                     - (float)((float)((float)(v88 * v96) - (float)(v89 * v95)) * v90))
                             + (float)(v87 * v98);
        *(float *)(a1 + 236) = (float)((float)(v95 * v97)
                                     - (float)((float)((float)(v89 * v94) - (float)(v87 * v96)) * v90))
                             + (float)(v88 * v98);
        *(float *)(a1 + 240) = (float)((float)(v96 * v97)
                                     - (float)((float)((float)(v87 * v95) - (float)(v88 * v94)) * v90))
                             + (float)(v89 * v98);
        *(float *)(a1 + 244) = v91;
        float v38 = *((float *)&v199 + 1);
        LODWORD(v39) = v199;
        float v40 = v200;
        float v36 = v202;
LABEL_64:
        uint64_t v123 = *a3;
        *(void *)float v220 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3);
        *(float64x2_t *)&v220[8] = v197;
        float v221 = v198;
        float v222 = v39;
        *(void *)&float v223 = __PAIR64__(LODWORD(v40), LODWORD(v38));
        *((float32x2_t *)&v223 + 1) = v203;
        float v224 = v204;
        float v225 = v32;
        float v226 = *(_OWORD *)(v36 + 1);
        float v227 = *(_DWORD *)&v201[8];
        float v124 = *(void (****)(void, unsigned char *))(v123 + 80);
        if (v124) {
          (**v124)(v124, v220);
        }
        uint64_t v125 = *(void (****)(long long *__return_ptr))(v123 + 88);
        int v122 = v193;
        if (v125)
        {
          (**v125)(&v217);
          float v126 = v217;
        }
        else
        {
          float v126 = 0;
        }
        BOOL v121 = (v126 & 2) == 0;
        goto LABEL_87;
      }
      if ((a12 & 0xFFFFFFFD) != 1) {
        goto LABEL_61;
      }
      char v45 = 0;
      if (v46[4] == 6)
      {
        unsigned int v106 = *(_DWORD *)&v201[4];
        if (*(_DWORD *)&v201[4] != -1)
        {
          *(_DWORD *)(a1 + 364) |= 8u;
          float v107 = (float *)(*(void *)(a1 + 16) + 36 * v106);
          float v108 = v107[1];
          float v109 = v107[2];
          float v110 = v107[3] - *v107;
          float v111 = v107[6] - *v107;
          float v112 = v107[4] - v108;
          float v113 = v107[5] - v109;
          float v114 = v107[7] - v108;
          float v115 = v107[8] - v109;
          float v116 = (float)(v112 * v115) - (float)(v113 * v114);
          float v117 = (float)(v113 * v111) - (float)(v110 * v115);
          float v118 = (float)(v110 * v114) - (float)(v112 * v111);
          *(float *)(a1 + 148) = v116;
          *(float *)(a1 + 152) = v117;
          *(float *)(a1 + 156) = v118;
          float v119 = sqrtf((float)((float)(v117 * v117) + (float)(v116 * v116)) + (float)(v118 * v118));
          if (v119 > 0.0)
          {
            float v120 = 1.0 / v119;
            float v116 = v116 * v120;
            float v117 = v117 * v120;
            *(float *)(a1 + 148) = v116;
            *(float *)(a1 + 152) = v117;
            float v118 = v118 * v120;
            *(float *)(a1 + 156) = v118;
          }
          if (*(unsigned char *)(a1 + 340)
            && (float)((float)((float)(v117 * *(float *)(a1 + 304)) + (float)(v116 * *(float *)(a1 + 300)))
                     + (float)(v118 * *(float *)(a1 + 308))) < 0.0)
          {
            char v45 = 1;
            goto LABEL_62;
          }
LABEL_61:
          char v45 = 0;
        }
      }
LABEL_62:
      if (a12 == 3)
      {
LABEL_63:
        BOOL v121 = 1;
        int v122 = v193;
        goto LABEL_87;
      }
      goto LABEL_64;
    }
    break;
  }
  uint64_t v171 = 0;
  v31.i32[0] = *(_DWORD *)(a1 + 316);
  float v172 = vcvt_f32_f64(v205);
  float v173 = v206;
  float v174 = (float32x2_t)vdup_lane_s32(v31, 0);
  float v194 = v31.u32[0] | 0x3F00000000000000;
  float v195 = *(float *)v31.i32;
  while (2)
  {
    float v175 = *(unsigned int *)(a1 + 56);
    if (!v175) {
      goto LABEL_126;
    }
    float v176 = *(unsigned int **)(a1 + 48);
    float v177 = &v176[v175];
    v178 = 1;
    while (2)
    {
      if (*v176 >= 2)
      {
        float v179 = *(unsigned __int16 **)(v176 + 3);
        if (shouldApplyRecoveryModule(v179))
        {
          float v180 = *(void *)(v176 + 1);
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v180 + 80))(v220, v180);
          (*(void (**)(long long *__return_ptr, unsigned __int16 *))(*(void *)v179 + 152))(&v217, v179);
          (*(void (**)(int *__return_ptr, uint64_t))(*(void *)v180 + 160))(&v211, v180);
          v181 = (float)(*((float *)&v217 + 3) * *((float *)&v217 + 3)) + -0.5;
          float v182 = (float)((float)((float)(v215 + v215) * *((float *)&v217 + 1))
                       + (float)(*(float *)&v217 * (float)(v214 + v214)))
               + (float)(*((float *)&v217 + 2) * (float)(v216 + v216));
          v210[0] = (float)((float)((float)(*(float *)&v217 * v213) + (float)(*((float *)&v217 + 3) * *(float *)&v211))
                          + (float)(*((float *)&v217 + 1) * v212.f32[1]))
                  - (float)(v212.f32[0] * *((float *)&v217 + 2));
          v210[1] = (float)((float)((float)(*((float *)&v217 + 1) * v213) + (float)(*((float *)&v217 + 3) * v212.f32[0]))
                          + (float)(*((float *)&v217 + 2) * *(float *)&v211))
                  - (float)(v212.f32[1] * *(float *)&v217);
          v210[2] = (float)((float)((float)(*((float *)&v217 + 2) * v213) + (float)(*((float *)&v217 + 3) * v212.f32[1]))
                          + (float)(*(float *)&v217 * v212.f32[0]))
                  - (float)(*(float *)&v211 * *((float *)&v217 + 1));
          v210[3] = (float)((float)((float)(*((float *)&v217 + 3) * v213) - (float)(*(float *)&v217 * *(float *)&v211))
                          - (float)(*((float *)&v217 + 1) * v212.f32[0]))
                  - (float)(*((float *)&v217 + 2) * v212.f32[1]);
          v210[4] = v218.f32[0]
                  + (float)((float)((float)(*((float *)&v217 + 3)
                                          * (float)((float)(*((float *)&v217 + 1) * (float)(v216 + v216))
                                                  - (float)(*((float *)&v217 + 2) * (float)(v215 + v215))))
                                  + (float)((float)(v214 + v214) * v181))
                          + (float)(*(float *)&v217 * v182));
          v210[5] = v218.f32[1]
                  + (float)((float)((float)(*((float *)&v217 + 3)
                                          * (float)((float)(*((float *)&v217 + 2) * (float)(v214 + v214))
                                                  - (float)(*(float *)&v217 * (float)(v216 + v216))))
                                  + (float)((float)(v215 + v215) * v181))
                          + (float)(*((float *)&v217 + 1) * v182));
          v210[6] = v219
                  + (float)((float)((float)(*((float *)&v217 + 3)
                                          * (float)((float)(*(float *)&v217 * (float)(v215 + v215))
                                                  - (float)(*((float *)&v217 + 1) * (float)(v214 + v214))))
                                  + (float)((float)(v216 + v216) * v181))
                          + (float)(*((float *)&v217 + 2) * v182));
          float v207 = 0.0;
          float v217 = *(_OWORD *)(v196 + 16);
          float v218 = v172;
          float v219 = v173;
          if (*(_DWORD *)(a5 + 36) == 1)
          {
            float v211 = 2;
            float v183 = *(float32x2_t *)(a5 + 40);
            v184.i32[0] = vadd_f32((float32x2_t)v194, v183).u32[0];
            v184.i32[1] = vmul_f32((float32x2_t)v194, v183).i32[1];
            float v212 = v184;
            float v208 = v220;
            if ((physx::PxGeometryQuery::computePenetration((float32x2_t *)&v208, (uint64_t)&v207, &v211, (uint64_t)&v217, (int *)v220, (uint64_t)v210) & 1) == 0)goto LABEL_121; {
LABEL_123:
            }
            ++v171;
            float v172 = vadd_f32(v172, vmul_n_f32((float32x2_t)v208, v207));
            float v173 = v173 + (float)(v207 * v209);
            v178 = 1;
          }
          else
          {
            float32x2_t v185 = v195 + *(float *)(a5 + 48);
            float v211 = 3;
            float v212 = vadd_f32(v174, *(float32x2_t *)(a5 + 40));
            float v213 = v185;
            float v208 = v220;
            if (physx::PxGeometryQuery::computePenetration((float32x2_t *)&v208, (uint64_t)&v207, &v211, (uint64_t)&v217, (int *)v220, (uint64_t)v210))goto LABEL_123; {
LABEL_121:
            }
            v178 = 0;
          }
        }
      }
      float v176 = (unsigned int *)((char *)v176 + GeomSizes[*v176]);
      if (v176 != v177) {
        continue;
      }
      break;
    }
    if ((v178 & 1) == 0) {
      break;
    }
LABEL_126:
    if (v171 <= 3) {
      continue;
    }
    break;
  }
  if (a10) {
    *a10 = v193 + 1;
  }
  *(float64x2_t *)(a5 + 8) = vcvtq_f64_f32(v172);
  *(double *)(a5 + 24) = v173;
  char v20 = 1;
  return v20 & 1;
}

uint64_t physx::Cct::SweepTest::moveCharacter(char *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, float *a6, unsigned int *a7, long long *a8, float a9, char a10, unsigned __int8 a11, void *a12, void *a13)
{
  int v19 = a11;
  int v20 = *(_DWORD *)(a2 + 364);
  unsigned int v21 = v20 & 0xFFFFFEFE;
  *a1 = 0;
  if ((v20 & 2) != 0)
  {
    if (*(_DWORD *)(a2 + 280) == 1) {
      int v22 = 10;
    }
    else {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 1;
  }
  int v92 = v22;
  double v24 = *(double *)(a5 + 8);
  double v23 = (float64x2_t *)(a5 + 8);
  float v25 = *(float *)(a2 + 300);
  float v26 = *(float *)(a2 + 304);
  double v27 = *(double *)(a5 + 24);
  double v28 = *(double *)(a5 + 16) * v26;
  float v29 = *(float *)(a2 + 308);
  float v30 = *(float *)(a5 + 32);
  float v31 = *a6;
  float v32 = a6[1];
  float v33 = a6[2];
  float v34 = (float)((float)(v26 * v32) + (float)(*a6 * v25)) + (float)(v33 * v29);
  float v35 = 0.0;
  if (a11) {
    float v35 = *(float *)(a2 + 320);
  }
  if (v34 <= 0.0)
  {
    float v36 = *(float *)(a2 + 320);
  }
  else
  {
    v21 |= 0x100u;
    float v36 = v35;
  }
  *(_DWORD *)(a2 + 364) = v21;
  uint64_t v102 = 0;
  float v103 = 0.0;
  uint64_t v100 = 0;
  float v101 = 0.0;
  float v37 = v25 * v34;
  float v38 = v31 - (float)(v25 * v34);
  float v39 = v32 - (float)(v26 * v34);
  float v40 = v33 - (float)(v29 * v34);
  float v90 = v30;
  if (v34 <= 0.0)
  {
    double v42 = (float *)&v102 + 1;
    float v43 = &v103;
    *(float *)&uint64_t v102 = v25 * v34;
    float v88 = 0.0;
    float v89 = 0.0;
    float v87 = 0.0;
    float v44 = v29 * v34;
    float v45 = v26 * v34;
  }
  else
  {
    double v42 = (float *)&v100 + 1;
    float v43 = &v101;
    *(float *)&uint64_t v100 = v25 * v34;
    float v44 = 0.0;
    float v88 = v26 * v34;
    float v89 = v29 * v34;
    float v87 = v25 * v34;
    float v45 = 0.0;
    float v37 = 0.0;
  }
  double v46 = v28 + v24 * v25;
  float *v42 = v26 * v34;
  *float v43 = v29 * v34;
  v99[0] = v38;
  v99[1] = v39;
  v99[2] = v40;
  float v86 = v38;
  float v47 = fabsf(v38);
  if (v47 > 0.000001) {
    int v19 = 1;
  }
  float v84 = v40;
  float v85 = v39;
  float v48 = fabsf(v39);
  if (v48 > 0.000001) {
    int v19 = 1;
  }
  float v49 = fabsf(v40);
  if (v49 > 0.000001) {
    int v50 = 1;
  }
  else {
    int v50 = v19;
  }
  if (v50 == 1)
  {
    *(float *)&uint64_t v102 = (float)(v25 * v36) + v37;
    *((float *)&v102 + 1) = (float)(v26 * v36) + v45;
    float v103 = (float)(v29 * v36) + v44;
  }
  double v51 = v46 + v27 * v29;
  (*(void (**)(uint64_t, uint64_t, float64x2_t *, uint64_t, float *))(*(void *)a5 + 16))(a5, a2, &v97, a5 + 8, a6);
  physx::Cct::SweepTest::updateTouchedGeoms(a2, a3, a7, &v97, a8, v99);
  *(_DWORD *)(a2 + 112) = 0;
  int v96 = 0;
  float v93 = a3;
  if ((*(unsigned char *)(a2 + 364) & 2) != 0)
  {
    char v58 = 0;
    float v56 = a9;
  }
  else
  {
    BOOL v52 = v49 <= 0.000001 && v48 <= 0.000001;
    if (v52 && v47 <= 0.000001) {
      int v54 = 10;
    }
    else {
      int v54 = 1;
    }
    if (*(unsigned char *)(a2 + 340)) {
      int v55 = 1;
    }
    else {
      int v55 = v54;
    }
    float v56 = a9;
    if (physx::Cct::SweepTest::doSweepTest(a2, a3, a4, a7, a5, (float *)&v102, v99, v55, a9, &v96, a8, 0, a12, a13))BOOL v57 = v96 == 0; {
    else
    }
      BOOL v57 = 1;
    if (v57)
    {
      char v58 = 0;
    }
    else
    {
      char v58 = 2;
      *a1 = 2;
      float v59 = *(double *)(a5 + 16) * *(float *)(a2 + 304)
          + *(double *)(a5 + 8) * *(float *)(a2 + 300)
          + *(double *)(a5 + 24) * *(float *)(a2 + 308)
          - v51;
      if (v36 > v59) {
        float v36 = *(double *)(a5 + 16) * *(float *)(a2 + 304)
      }
            + *(double *)(a5 + 8) * *(float *)(a2 + 300)
            + *(double *)(a5 + 24) * *(float *)(a2 + 308)
            - v51;
    }
  }
  *(_DWORD *)(a2 + 112) = 1;
  *(_DWORD *)(a2 + 364) &= ~8u;
  int v96 = 0;
  if (physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, v99, v99, 10, v56, &v96, a8, 1, a12, a13)
    && v96)
  {
    v58 |= 1u;
    *a1 = v58;
  }
  if (a10)
  {
    if (*(_DWORD *)(a5 + 36) == 1)
    {
      int v60 = *(_DWORD *)(a2 + 364);
      if ((v60 & 8) == 0)
      {
        float v61 = *(float *)(a5 + 40);
        float v62 = (float)((float)(v85 * v85) + (float)(v86 * v86)) + (float)(v84 * v84);
        float v63 = sqrtf(v62);
        if (v63 < v61)
        {
          float v64 = 0.0;
          BOOL v52 = v62 <= 0.0;
          float v65 = 0.0;
          float v66 = 0.0;
          if (!v52)
          {
            float v67 = 1.0 / v63;
            float v64 = v86 * v67;
            float v65 = v85 * v67;
            float v66 = v84 * v67;
          }
          v95[0] = v61 * v64;
          v95[1] = v61 * v65;
          v95[2] = v61 * v66;
          *(_DWORD *)(a2 + 364) = v60 & 0xFFFFFFF7;
          int v96 = 0;
          float64x2_t v97 = *v23;
          uint64_t v98 = *(void *)(a5 + 24);
          physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, v95, v99, 1, v56, &v96, a8, 3, a12, a13);
          *double v23 = v97;
          *(void *)(a5 + 24) = v98;
        }
      }
    }
  }
  *(_DWORD *)(a2 + 112) = 2;
  int v96 = 0;
  if (v50)
  {
    float v68 = v36 * *(float *)(a2 + 308);
    float v69 = v88 - (float)(v36 * *(float *)(a2 + 304));
    *(float *)&uint64_t v100 = v87 - (float)(v36 * *(float *)(a2 + 300));
    *((float *)&v100 + 1) = v69;
    float v101 = v89 - v68;
  }
  double v70 = v51 - v90;
  *(_DWORD *)(a2 + 364) &= ~4u;
  *a13 = 0;
  *a12 = 0;
  *(_DWORD *)(a2 + 216) = -1;
  uint64_t result = physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, (float *)&v100, v99, v92, v56, &v96, a8, 2, a12, a13);
  if (!result || !v96)
  {
    if (!*(unsigned char *)(a2 + 337)) {
      return result;
    }
    int v74 = *(_DWORD *)(a2 + 364);
    goto LABEL_72;
  }
  if (v34 <= 0.0) {
    *a1 = v58 | 4;
  }
  if (*(unsigned char *)(a2 + 337))
  {
    int v72 = *(_DWORD *)(a2 + 364);
    if ((v72 & 0x38) == 8
      && (float v73 = (float)((float)(*(float *)(a2 + 152) * *(float *)(a2 + 304))
                      + (float)(*(float *)(a2 + 148) * *(float *)(a2 + 300)))
              + (float)(*(float *)(a2 + 156) * *(float *)(a2 + 308)),
          v73 >= 0.0)
      && v73 < *(float *)(a2 + 312)
      && a10
      && v70 + v36 < *(float *)(a2 + 348))
    {
      int v74 = v72 | 1;
      *(_DWORD *)(a2 + 364) = v72 | 1;
      if ((v72 & 2) == 0) {
        return result;
      }
    }
    else
    {
      int v74 = *(_DWORD *)(a2 + 364);
    }
LABEL_72:
    if ((v74 & 0x30) == 0 && v34 <= 0.0 && (v74 & 4) != 0)
    {
      float v75 = *(float *)(a2 + 164) - v70;
      if (*(float *)(a2 + 320) < v75)
      {
        float32x2_t v76 = *(float32x2_t *)(a2 + 300);
        float v77 = *(float *)(a2 + 308);
        float v78 = vmlas_n_f32(vmuls_lane_f32(*(float *)(a2 + 140), v76, 1), *(float *)(a2 + 136), v76.f32[0])
            + (float)(*(float *)(a2 + 144) * v77);
        if (v78 >= 0.0 && v78 < *(float *)(a2 + 312))
        {
          *(_DWORD *)(a2 + 364) = v74 | 1;
          if ((v74 & 2) != 0)
          {
            *(_DWORD *)(a2 + 364) = v74 | 0x41;
            double v79 = *(double *)(a5 + 16) * v76.f32[1] + *(double *)(a5 + 8) * v76.f32[0] + *(double *)(a5 + 24) * v77;
            float v80 = v79 - v51;
            BOOL v52 = v79 <= v51;
            float v81 = 0.0;
            if (!v52) {
              float v81 = v80;
            }
            float v82 = v81 + fabsf((float)((float)(v76.f32[1] * a6[1]) + (float)(*a6 * v76.f32[0])) + (float)(a6[2] * v77));
            int v96 = 0;
            float v83 = v82 / 10.0;
            if (v82 >= v56) {
              float v83 = v56;
            }
            *(float32x2_t *)&v97.f64[0] = vmul_n_f32(vneg_f32(v76), v82);
            *(float *)&v97.f64[1] = -(float)(v77 * v82);
            uint64_t result = physx::Cct::SweepTest::doSweepTest(a2, v93, a4, a7, a5, (float *)&v97, v99, 10, v83, &v96, a8, 0, a12, a13);
            *(_DWORD *)(a2 + 364) &= ~0x40u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t physx::Cct::Controller::move(unsigned char *a1, _DWORD *a2, double *a3, float32x2_t *a4, uint64_t a5, uint64_t a6, char a7, float a8, __n128 a9, __n128 a10)
{
  void (***v40)(unsigned char *__return_ptr);
  double v41;
  uint64_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  unsigned char *v62;
  long long v63;
  _WORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t *v69;
  _DWORD *v70;
  _DWORD *v71;
  void *v72;
  const physx::PxBase *v73;
  const physx::PxBase *v74;
  const physx::PxBase *v75;
  const physx::PxBase *v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  float v95;
  float v96;
  float v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  BOOL v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  double v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  _DWORD **v126;
  unint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float64x2_t *v148;
  long long v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  float64x2_t v157;
  uint64_t v158;
  float v159;
  float v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  double v198;
  int8x8_t v199;
  char v200;
  int v201;
  float v202;
  float32x2_t v209;
  const physx::PxBase *v210;
  const physx::PxBase *v211;
  const physx::PxBase *v212;
  const physx::PxBase *v213;
  long long v214;
  uint64_t v215;
  float v216;
  float v217;
  float v218;
  float v219;
  unsigned int *v220;
  uint64_t result;
  unsigned int (***v222)(void, unsigned char *, const physx::PxBase *, const physx::PxBase *, float64x2_t *);
  int v223;
  unsigned __int8 v224;
  uint64_t v225;
  char v226;
  unsigned char *v227;
  double *v228;
  int v229;
  float64_t v230;
  long long *v231;
  const physx::PxBase **v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  BOOL v237;
  uint64_t v238;
  unsigned char v240[32];
  long long v241;
  uint64_t v242;
  unsigned char v243[48];
  uint64_t v244;
  unsigned char v245[12];
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  unsigned char v252[12];
  uint64_t v253;
  int v254;
  int v255;
  float64x2_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  __int16 v263;
  const physx::PxBase *v264;
  float v265;
  __n128 v266;
  __int16 v267;
  long long v268;
  uint64_t v269;
  float v270;

  float v12 = a9.n128_f32[0];
  float v18 = a2 + 87;
  uint64_t v19 = *((void *)a2 + 75);
  int v20 = *(unsigned __int8 *)(v19 + 200);
  if (*(unsigned char *)(v19 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    pthread_mutex_lock(*((pthread_mutex_t **)a2 + 74));
    uint64_t v19 = *((void *)a2 + 75);
  }
  float v238 = *(void *)(v19 + 24);
  *((void *)a2 + 13) = v238;
  *((double *)a2 + 70) = *((double *)a2 + 70) + v12;
  float v223 = *(_DWORD *)(v19 + 32);
  a2[28] = v223;
  a2[96] = a2[3];
  *(_OWORD *)(v18 + 10) = *((_OWORD *)a2 + 1);
  *((void *)v18 + 7) = *((void *)a2 + 4);
  a2[103] = a2[10];
  *((_OWORD *)a2 + 26) = *(_OWORD *)(a2 + 11);
  __n128 v21 = *(__n128 *)((char *)a2 + 57);
  *(__n128 *)((char *)a2 + 429) = v21;
  a2[117] |= 0x80u;
  *((float *)a2 + 109) = *(float *)(v19 + 192) * *(float *)(v19 + 192);
  *((unsigned char *)a2 + 440) = *(unsigned char *)(v19 + 196);
  *((unsigned char *)a2 + 442) = *(unsigned char *)(v19 + 197);
  *((unsigned char *)a2 + 443) = *(unsigned char *)(v19 + 198);
  *((unsigned char *)a2 + 444) = *(unsigned char *)(v19 + 199);
  *((void *)v18 + 14) = 0;
  v21.n128_f32[0] = a4[1].f32[0] + *((float *)a2 + 135);
  a10.n128_u64[0] = *((void *)v18 + 23);
  a9.n128_u64[0] = (unint64_t)vadd_f32(*a4, (float32x2_t)a10.n128_u64[0]);
  *(void *)float v252 = a9.n128_u64[0];
  *(_DWORD *)&v252[8] = v21.n128_u32[0];
  *((void *)v18 + 23) = 0;
  a2[135] = 0;
  float v232 = (const physx::PxBase **)(a2 + 74);
  float v225 = (uint64_t)(a2 + 26);
  uint64_t v22 = *((void *)a2 + 37);
  if (!v22 || !*((void *)a2 + 34)) {
    goto LABEL_27;
  }
  double v23 = (const physx::PxBase **)(a2 + 68);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 184))(v22);
  if (v24)
  {
    int v25 = v24;
    uint64_t v26 = 0;
    while (1)
    {
      *(void *)float v243 = 0;
      (*(void (**)(const physx::PxBase *, unsigned char *, uint64_t, uint64_t))(*(void *)*v232 + 192))(*v232, v243, 1, v26);
      if (*v23 == *(const physx::PxBase **)v243) {
        break;
      }
      uint64_t v26 = (v26 + 1);
      if (v25 == v26) {
        goto LABEL_11;
      }
    }
    if ((*(uint64_t (**)(void))(**((void **)a2 + 37) + 56))(*((void *)a2 + 37)) == *((void *)a2 + 68))
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)*v23 + 312))(v243);
      if ((v243[0] & 2) != 0)
      {
        float v222 = *(unsigned int (****)(void, unsigned char *, const physx::PxBase *, const physx::PxBase *, float64x2_t *))(a5 + 8);
        if (*(void *)a5) {
          __n128 v21 = *(__n128 *)*(void *)a5;
        }
        else {
          __n128 v21 = 0uLL;
        }
        *(__n128 *)float v243 = v21;
        *(_WORD *)&v243[16] = 6;
        LOWORD(v256.f64[0]) = 0;
        if (!v222 || (**v222)(v222, v243, *v23, *v232, &v256)) {
          goto LABEL_27;
        }
      }
    }
    if (*((unsigned char *)a2 + 280) && *v23) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), *v23, (int8x8_t)v21.n128_u64[0]);
    }
    *((void *)a2 + 34) = 0;
    double v23 = (const physx::PxBase **)(a2 + 74);
    if (!*((unsigned char *)a2 + 304)) {
      goto LABEL_26;
    }
    double v23 = (const physx::PxBase **)(a2 + 74);
    double v27 = *v232;
    if (!*v232) {
      goto LABEL_26;
    }
    double v28 = (physx::Cct::CharacterControllerManager **)(a2 + 78);
    double v23 = (const physx::PxBase **)(a2 + 74);
  }
  else
  {
LABEL_11:
    if (*((unsigned char *)a2 + 304) && *v232) {
      physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), *v232, (int8x8_t)v21.n128_u64[0]);
    }
    *((void *)a2 + 37) = 0;
    if (!*((unsigned char *)a2 + 280)) {
      goto LABEL_26;
    }
    double v27 = *v23;
    if (!*v23) {
      goto LABEL_26;
    }
    double v28 = (physx::Cct::CharacterControllerManager **)(a2 + 72);
  }
  physx::Cct::CharacterControllerManager::unregisterObservedObject(*v28, v27, (int8x8_t)v21.n128_u64[0]);
LABEL_26:
  *double v23 = 0;
LABEL_27:
  float v231 = (long long *)a5;
  float v229 = v20;
  float v227 = a1;
  float v226 = a7;
  if (*((void *)a2 + 34)) {
    goto LABEL_28;
  }
  if (a2[80] != -1) {
    goto LABEL_82;
  }
  __int16 v32 = *(_WORD *)(a5 + 16);
  if ((v32 & 2) != 0)
  {
    uint64_t v33 = *((void *)a2 + 75) + 120;
    *(void *)float v240 = &unk_26E72EC40;
    *(void *)&v240[8] = v33;
    float v34 = *(__n128 **)a5;
    *(void *)&v240[16] = *(void *)(a5 + 8);
    *(_WORD *)&v240[24] = v32;
    __int16 v35 = v32 & 8 | 6;
    if (v34) {
      __n128 v36 = *v34;
    }
    else {
      __n128 v36 = 0uLL;
    }
    float v266 = v36;
    float v267 = v35;
    char v58 = (*(float (**)(_DWORD *))(*(void *)a2 + 16))(a2);
    float v59 = *((double *)a2 + 64);
    float v264 = (const physx::PxBase *)vcvt_f32_f64(*((float64x2_t *)a2 + 31));
    float v265 = v59;
    *(void *)&v243[8] = 0;
    *(void *)&v243[16] = 0;
    *(_DWORD *)&v243[24] = -1;
    *(_WORD *)&v243[28] = 0;
    float v244 = 0;
    *(_OWORD *)&v243[32] = 0uLL;
    *(_DWORD *)&v245[8] = 0;
    BYTE4(v246) = 0;
    float v248 = 0;
    float v249 = 0;
    *(void *)float v243 = &unk_26E72E3C0;
    *(void *)float v245 = 2139095039;
    int v60 = *((void *)a2 + 68);
    float v61 = -*((float *)a2 + 10);
    *(float32x2_t *)&v256.f64[0] = vneg_f32(*(float32x2_t *)(a2 + 8));
    *(float *)&v256.f64[1] = v61;
    float v263 = 0;
    if ((*(unsigned int (**)(float))(*(void *)v60 + 696))(v58 + 0.0))
    {
      if (HIDWORD(v249)) {
        float v62 = (unsigned char *)v248;
      }
      else {
        float v62 = &v243[8];
      }
      float v63 = *(_OWORD *)v62;
      *(_DWORD *)&v243[24] = *((_DWORD *)v62 + 4);
      *(_OWORD *)&v243[8] = v63;
      float v64 = (_WORD *)(v248 + 20);
      if (!HIDWORD(v249)) {
        float v64 = &v243[28];
      }
      *(_WORD *)&v243[28] = *v64;
      float v65 = (_DWORD *)(v248 + 24);
      if (!HIDWORD(v249)) {
        float v65 = &v243[32];
      }
      *(_DWORD *)&v243[32] = *v65;
      float v66 = &v243[36];
      if (HIDWORD(v249)) {
        float v66 = (_DWORD *)(v248 + 28);
      }
      *(_DWORD *)&v243[36] = *v66;
      float v67 = &v243[40];
      if (HIDWORD(v249)) {
        float v67 = (_DWORD *)(v248 + 32);
      }
      *(_DWORD *)&v243[40] = *v67;
      float v68 = &v243[44];
      if (HIDWORD(v249)) {
        float v68 = (_DWORD *)(v248 + 36);
      }
      *(_DWORD *)&v243[44] = *v68;
      float v69 = &v244;
      if (HIDWORD(v249)) {
        float v69 = (uint64_t *)(v248 + 40);
      }
      LODWORD(v244) = *(_DWORD *)v69;
      double v70 = (_DWORD *)&v244 + 1;
      if (HIDWORD(v249)) {
        double v70 = (_DWORD *)(v248 + 44);
      }
      HIDWORD(v244) = *v70;
      float v71 = (_DWORD *)(v248 + 48);
      if (!HIDWORD(v249)) {
        float v71 = v245;
      }
      LODWORD(v63) = *v71;
      *(_DWORD *)float v245 = *v71;
      int v72 = (void *)(v248 + 52);
      if (!HIDWORD(v249)) {
        int v72 = &v245[4];
      }
      *(void *)&v245[4] = *v72;
      float v73 = *(const physx::PxBase **)&v243[16];
      if (*((unsigned char *)a2 + 280))
      {
        int v74 = (const physx::PxBase *)*((void *)a2 + 34);
        if (v74 != *(const physx::PxBase **)&v243[16])
        {
          if (v74) {
            physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), v74, *(int8x8_t *)&v63);
          }
          if (v73) {
            physx::Cct::CharacterControllerManager::registerObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 36), v73, *(int8x8_t *)&v63);
          }
        }
      }
      *((void *)a2 + 34) = v73;
      float v75 = *(const physx::PxBase **)&v243[8];
      if (*((unsigned char *)a2 + 304))
      {
        float32x2_t v76 = *v232;
        if (*v232 != *(const physx::PxBase **)&v243[8])
        {
          if (v76) {
            physx::Cct::CharacterControllerManager::unregisterObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), v76, *(int8x8_t *)&v63);
          }
          if (v75) {
            physx::Cct::CharacterControllerManager::registerObservedObject(*((physx::Cct::CharacterControllerManager **)a2 + 39), v75, *(int8x8_t *)&v63);
          }
        }
      }
      *((void *)a2 + 37) = v75;
      float v77 = *(void *)&v243[16];
      (*(void (**)(float64x2_t *__return_ptr))(**(void **)&v243[8] + 152))(&v256);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v77 + 160))(&v268, v77);
      float v78 = (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v256.f64[1] + 1)) + -0.5;
      double v79 = (float)((float)((float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)) * *((float *)v256.f64 + 1))
                  + (float)(*(float *)v256.f64 * (float)(*(float *)&v269 + *(float *)&v269)))
          + (float)(*(float *)&v256.f64[1] * (float)(v270 + v270));
      float v80 = *(float *)&v257
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*((float *)v256.f64 + 1) * (float)(v270 + v270))
                                          - (float)(*(float *)&v256.f64[1]
                                                  * (float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)))))
                          + (float)((float)(*(float *)&v269 + *(float *)&v269) * v78))
                  + (float)(*(float *)v256.f64 * v79));
      float v81 = *((float *)&v257 + 1)
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*(float *)&v256.f64[1] * (float)(*(float *)&v269 + *(float *)&v269))
                                          - (float)(*(float *)v256.f64 * (float)(v270 + v270))))
                          + (float)((float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)) * v78))
                  + (float)(*((float *)v256.f64 + 1) * v79));
      float v82 = *(float *)&v258
          + (float)((float)((float)(*((float *)&v256.f64[1] + 1)
                                  * (float)((float)(*(float *)v256.f64
                                                  * (float)(*((float *)&v269 + 1) + *((float *)&v269 + 1)))
                                          - (float)(*((float *)v256.f64 + 1) * (float)(*(float *)&v269 + *(float *)&v269))))
                          + (float)((float)(v270 + v270) * v78))
                  + (float)(*(float *)&v256.f64[1] * v79));
      float v83 = (float)((float)((float)(*(float *)v256.f64 * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *(float *)&v268))
                  + (float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 2)))
          - (float)(*((float *)&v268 + 1) * *(float *)&v256.f64[1]);
      float v84 = (float)((float)((float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 1)))
                  + (float)(*(float *)&v256.f64[1] * *(float *)&v268))
          - (float)(*((float *)&v268 + 2) * *(float *)v256.f64);
      float v85 = (float)((float)((float)(*(float *)&v256.f64[1] * *((float *)&v268 + 3))
                          + (float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 2)))
                  + (float)(*(float *)v256.f64 * *((float *)&v268 + 1)))
          - (float)(*(float *)&v268 * *((float *)v256.f64 + 1));
      float v86 = (float)((float)((float)(*((float *)&v256.f64[1] + 1) * *((float *)&v268 + 3))
                          - (float)(*(float *)v256.f64 * *(float *)&v268))
                  - (float)(*((float *)v256.f64 + 1) * *((float *)&v268 + 1)))
          - (float)(*(float *)&v256.f64[1] * *((float *)&v268 + 2));
      float v87 = 0.0 - (float)((float)(v58 - *(float *)v245) * *((float *)a2 + 10));
      *(float32x2_t *)float v18 = vsub_f32(0, vmul_n_f32(*(float32x2_t *)(a2 + 8), v58 - *(float *)v245));
      *((float *)a2 + 89) = v87;
      float v88 = (float)(0.0 - v80) + (float)(0.0 - v80);
      float v89 = (float)(0.0 - v81) + (float)(0.0 - v81);
      float v90 = (float)(0.0 - v82) + (float)(0.0 - v82);
      float v91 = (float)(v86 * v86) + -0.5;
      int v92 = (float)((float)(v89 * v84) + (float)(v83 * v88)) + (float)(v85 * v90);
      *((float *)a2 + 84) = (float)((float)(v88 * v91) - (float)((float)((float)(v84 * v90) - (float)(v85 * v89)) * v86))
                          + (float)(v83 * v92);
      *((float *)a2 + 85) = (float)((float)(v89 * v91) - (float)((float)((float)(v85 * v88) - (float)(v83 * v90)) * v86))
                          + (float)(v84 * v92);
      *((float *)a2 + 86) = (float)((float)(v90 * v91) - (float)((float)((float)(v83 * v89) - (float)(v84 * v88)) * v86))
                          + (float)(v85 * v92);
      a2[138] = (*(uint64_t (**)(void))(**((void **)a2 + 68) + 64))(*((void *)a2 + 68)) - 1;
    }
    if (a6)
    {
      float v256 = 0uLL;
      LODWORD(v257) = -1;
      WORD2(v257) = 0;
      float v259 = 0;
      float v260 = 0;
      float v258 = 0;
      float v261 = 2139095039;
      float v262 = 0;
      float v255 = 0;
      float v93 = -*((float *)a2 + 10);
      *(float32x2_t *)&float v268 = vneg_f32(*(float32x2_t *)(a2 + 8));
      *((float *)&v268 + 2) = v93;
      float v94 = physx::Cct::ObstacleContext::raycastSingle(a6, (uint64_t)&v256, (float32x2_t *)&v264, (float32x2_t *)&v268, &v255, v58 + 0.0);
      if (v94)
      {
        float v95 = *(float *)&v261;
        a9.n128_u32[0] = *(_DWORD *)v245;
        if (*(float *)&v261 < *(float *)v245)
        {
          a2[80] = v255;
          int v96 = v58 - v95;
          float64x2_t v97 = 0.0 - (float)(v96 * *((float *)a2 + 10));
          *((float32x2_t *)v18 + 3) = vsub_f32(0, vmul_n_f32(*(float32x2_t *)(a2 + 8), v96));
          *((float *)a2 + 95) = v97;
          float v268 = 0uLL;
          float v269 = 0;
          worldToLocal((float *)&v253, v94, (double *)&v268);
          *((void *)a2 + 45) = v253;
          a2[92] = v254;
        }
      }
    }
    if (*((void *)a2 + 34))
    {
LABEL_28:
      float v29 = *v232;
      if (*((_WORD *)*v232 + 4) == 6)
      {
        char v30 = 0;
        v21.n128_u64[0] = 0;
        float v31 = 1.0;
        a9.n128_u64[0] = 0;
        a10.n128_u64[0] = 0;
        goto LABEL_87;
      }
      int v37 = (*(uint64_t (**)(void))(**((void **)a2 + 68) + 64))(*((void *)a2 + 68));
      if (v37 == a2[138]) {
        goto LABEL_39;
      }
      a2[138] = v37;
      double v38 = *((double *)a2 + 70);
      double v39 = *((double *)a2 + 71);
      *((double *)a2 + 71) = v38;
      float v40 = (void (***)(unsigned char *__return_ptr))*((void *)a2 + 11);
      if (v40)
      {
        (**v40)(v243);
        char v30 = v243[0];
      }
      else
      {
        char v30 = 0;
      }
      uint64_t v41 = v38 - v39;
      double v42 = *((void *)a2 + 34);
      (*(void (**)(unsigned char *__return_ptr, const physx::PxBase *))(*(void *)v29 + 152))(v243, v29);
      (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(void *)v42 + 160))(&v256, v42);
      float v43 = (float)(*(float *)&v243[12] * *(float *)&v243[12]) + -0.5;
      float v44 = (float)((float)((float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)) * *(float *)&v243[4])
                  + (float)(*(float *)v243 * (float)(*(float *)&v257 + *(float *)&v257)))
          + (float)(*(float *)&v243[8] * (float)(*(float *)&v258 + *(float *)&v258));
      a9.n128_f32[0] = *(float *)&v243[16]
                     + (float)((float)((float)(*(float *)&v243[12]
                                             * (float)((float)(*(float *)&v243[4]
                                                             * (float)(*(float *)&v258 + *(float *)&v258))
                                                     - (float)(*(float *)&v243[8]
                                                             * (float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)))))
                                     + (float)((float)(*(float *)&v257 + *(float *)&v257) * v43))
                             + (float)(*(float *)v243 * v44));
      a10.n128_f32[0] = *(float *)&v243[20]
                      + (float)((float)((float)(*(float *)&v243[12]
                                              * (float)((float)(*(float *)&v243[8]
                                                              * (float)(*(float *)&v257 + *(float *)&v257))
                                                      - (float)(*(float *)v243
                                                              * (float)(*(float *)&v258 + *(float *)&v258))))
                                      + (float)((float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)) * v43))
                              + (float)(*(float *)&v243[4] * v44));
      v21.n128_f32[0] = *(float *)&v243[24]
                      + (float)((float)((float)(*(float *)&v243[12]
                                              * (float)((float)(*(float *)v243
                                                              * (float)(*((float *)&v257 + 1) + *((float *)&v257 + 1)))
                                                      - (float)(*(float *)&v243[4]
                                                              * (float)(*(float *)&v257 + *(float *)&v257))))
                                      + (float)((float)(*(float *)&v258 + *(float *)&v258) * v43))
                              + (float)(*(float *)&v243[8] * v44));
      float v45 = (float)((float)((float)(*(float *)v243 * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *(float *)v256.f64))
                  + (float)(*(float *)&v243[4] * *(float *)&v256.f64[1]))
          - (float)(*((float *)v256.f64 + 1) * *(float *)&v243[8]);
      double v46 = (float)((float)((float)(*(float *)&v243[4] * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *((float *)v256.f64 + 1)))
                  + (float)(*(float *)&v243[8] * *(float *)v256.f64))
          - (float)(*(float *)&v256.f64[1] * *(float *)v243);
      float v47 = (float)((float)((float)(*(float *)&v243[8] * *((float *)&v256.f64[1] + 1))
                          + (float)(*(float *)&v243[12] * *(float *)&v256.f64[1]))
                  + (float)(*(float *)v243 * *((float *)v256.f64 + 1)))
          - (float)(*(float *)v256.f64 * *(float *)&v243[4]);
      float v48 = (float)((float)((float)(*(float *)&v243[12] * *((float *)&v256.f64[1] + 1))
                          - (float)(*(float *)v243 * *(float *)v256.f64))
                  - (float)(*(float *)&v243[4] * *((float *)v256.f64 + 1)))
          - (float)(*(float *)&v243[8] * *(float *)&v256.f64[1]);
      float v49 = *((float *)a2 + 84) + *((float *)a2 + 84);
      int v50 = *((float *)a2 + 85) + *((float *)a2 + 85);
      double v51 = *((float *)a2 + 86) + *((float *)a2 + 86);
      BOOL v52 = (float)(v48 * v48) + -0.5;
      float v53 = (float)((float)(v46 * v50) + (float)(v45 * v49)) + (float)(v47 * v51);
      int v54 = (float)((float)(v48 * (float)((float)(v46 * v51) - (float)(v47 * v50))) + (float)(v49 * v52))
          + (float)(v45 * v53);
      int v55 = (float)((float)(v48 * (float)((float)(v47 * v49) - (float)(v45 * v51))) + (float)(v50 * v52))
          + (float)(v46 * v53);
      float v56 = (float)((float)(v48 * (float)((float)(v45 * v50) - (float)(v46 * v49))) + (float)(v51 * v52))
          + (float)(v47 * v53);
      BOOL v57 = a10.n128_f32[0] + v55;
      a10.n128_f32[0] = (float)(a9.n128_f32[0] + v54) - *((float *)a2 + 87);
      a9.n128_f32[0] = v57 - *((float *)a2 + 88);
      v21.n128_f32[0] = (float)(v21.n128_f32[0] + v56) - *((float *)a2 + 89);
      if ((v30 & 4) != 0)
      {
LABEL_39:
        float v224 = *((unsigned char *)a2 + 585) != 0;
        goto LABEL_99;
      }
LABEL_86:
      float v113 = v41;
      float v31 = 1.0 / v113;
LABEL_87:
      float v114 = fabsf(a10.n128_f32[0]) > 0.000001;
      if (fabsf(a9.n128_f32[0]) > 0.000001) {
        float v114 = 1;
      }
      if (fabsf(v21.n128_f32[0]) > 0.000001) {
        float v114 = 1;
      }
      float v224 = v114;
      if (v114)
      {
        *((unsigned char *)a2 + 585) = 1;
        float v115 = *((float *)a2 + 8);
        float v116 = *((float *)a2 + 9);
        float v117 = *((float *)a2 + 10);
        float v118 = (float)((float)(a9.n128_f32[0] * v116) + (float)(a10.n128_f32[0] * v115))
             + (float)(v21.n128_f32[0] * v117);
        float v119 = v115 * v118;
        float v120 = v116 * v118;
        BOOL v121 = v117 * v118;
        if (v118 > 0.0)
        {
          int v122 = a3[2];
          a3[1] = a3[1] + v119;
          a3[2] = v122 + v120;
          a3[3] = a3[3] + v121;
          if ((v30 & 1) == 0) {
            goto LABEL_98;
          }
          goto LABEL_97;
        }
        *(float *)float v252 = v119 + *(float *)v252;
        *(float *)&v252[4] = v120 + *(float *)&v252[4];
        *(float *)&v252[8] = v121 + *(float *)&v252[8];
        if (v30)
        {
LABEL_97:
          *(float *)float v252 = (float)(a10.n128_f32[0] - v119) + *(float *)v252;
          *(float *)&v252[4] = (float)(a9.n128_f32[0] - v120) + *(float *)&v252[4];
          *(float *)&v252[8] = (float)(v21.n128_f32[0] - v121) + *(float *)&v252[8];
        }
      }
      else
      {
        *((unsigned char *)a2 + 585) = 0;
      }
LABEL_98:
      a10.n128_f32[0] = v31 * a10.n128_f32[0];
      a9.n128_f32[0] = v31 * a9.n128_f32[0];
      a2[130] = a10.n128_u32[0];
      v21.n128_f32[0] = v31 * v21.n128_f32[0];
      a2[131] = a9.n128_u32[0];
      a2[132] = v21.n128_u32[0];
      goto LABEL_99;
    }
  }
  if (a2[80] != -1)
  {
LABEL_82:
    uint64_t v98 = *((double *)a2 + 70);
    float32x2_t v99 = *((double *)a2 + 71);
    *((double *)a2 + 71) = v98;
    uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 72))(a6);
    float v101 = *((void *)a2 + 11);
    if (v101)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v101 + 16))(v243);
      char v30 = v243[0];
    }
    else
    {
      char v30 = 1;
    }
    uint64_t v41 = v98 - v99;
    a10.n128_u64[0] = *(void *)(v100 + 16);
    a10.n128_f32[0] = a10.n128_f64[0];
    uint64_t v102 = *(double *)(v100 + 24);
    float v103 = *(double *)(v100 + 32);
    uint64_t v104 = *(float *)(v100 + 40);
    char v105 = *(float *)(v100 + 44);
    unsigned int v106 = *(float *)(v100 + 48);
    float v107 = *(float *)(v100 + 52);
    float v108 = *((float *)a2 + 90) + *((float *)a2 + 90);
    float v109 = *((float *)a2 + 91) + *((float *)a2 + 91);
    float v110 = *((float *)a2 + 92) + *((float *)a2 + 92);
    float v111 = (float)(v107 * v107) + -0.5;
    float v112 = (float)((float)(v105 * v109) + (float)(v104 * v108)) + (float)(v106 * v110);
    a10.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v105 * v110) - (float)(v106 * v109)))
                                            + (float)(v108 * v111))
                                    + (float)(v104 * v112))
                            + a10.n128_f32[0])
                    - *((float *)a2 + 93);
    a9.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v106 * v108) - (float)(v104 * v110)))
                                           + (float)(v109 * v111))
                                   + (float)(v105 * v112))
                           + v102)
                   - *((float *)a2 + 94);
    v21.n128_f32[0] = (float)((float)((float)((float)(v107 * (float)((float)(v104 * v109) - (float)(v105 * v108)))
                                            + (float)(v110 * v111))
                                    + (float)(v106 * v112))
                            + v103)
                    - *((float *)a2 + 95);
    if ((v30 & 4) != 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
  float v224 = 0;
  *((unsigned char *)a2 + 585) = 0;
  v21.n128_u64[0] = 0;
  *((void *)a2 + 65) = 0;
  a2[132] = 0;
LABEL_99:
  uint64_t v123 = *((void *)a2 + 75);
  float v233 = (uint64_t *)(v123 + 56);
  float v234 = (uint64_t *)(v123 + 40);
  float v235 = (uint64_t *)(v123 + 88);
  float v236 = (uint64_t *)(v123 + 72);
  float v124 = (*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(void *)v123 + 16))(v123, v21, a9, a10);
  if (v124)
  {
    uint64_t v125 = 0;
    float v126 = *(_DWORD ***)(*((void *)a2 + 75) + 104);
    char v127 = (unint64_t)v124 << 16;
    do
    {
      float v128 = *v126;
      if (*v126 == a2) {
        goto LABEL_119;
      }
      uint64_t v129 = *(void *)(a5 + 24);
      if (v129)
      {
        uint64_t v130 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 32))(a2);
        float v131 = (*(uint64_t (**)(_DWORD *))(*(void *)v128 + 32))(v128);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v130, v131)) {
          goto LABEL_119;
        }
      }
      float v132 = v128[2];
      if (v132 == 1)
      {
        physx::Cct::CapsuleController::getCapsule((uint64_t)(v128 - 2), (uint64_t)v243);
        float v135 = *(_DWORD *)(v123 + 96);
        if ((*(_DWORD *)(v123 + 100) & 0x7FFFFFFFu) <= v135)
        {
          physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack((uint64_t)v235, (long long *)v243);
        }
        else
        {
          float v136 = *(void *)(v123 + 88) + 56 * v135;
          *(_OWORD *)float v136 = *(_OWORD *)v243;
          *(_OWORD *)(v136 + 16) = *(_OWORD *)&v243[16];
          *(_OWORD *)(v136 + 32) = *(_OWORD *)&v243[32];
          *(void *)(v136 + 48) = v244;
          ++*(_DWORD *)(v123 + 96);
        }
        *(void *)&v256.f64[0] = v125 & 0xFFFF0000;
        float v138 = *(unsigned int *)(v123 + 80);
        if ((*(_DWORD *)(v123 + 84) & 0x7FFFFFFFu) <= v138)
        {
          float v139 = v123 + 72;
          goto LABEL_118;
        }
        *(void *)(*(void *)(v123 + 72) + 8 * v138) = v125 & 0xFFFF0000;
        *(_DWORD *)(v123 + 80) = v138 + 1;
      }
      else if (!v132)
      {
        physx::Cct::BoxController::getOBB((uint64_t)(v128 - 2), (uint64_t)v243);
        float v133 = *(_DWORD *)(v123 + 64);
        if ((*(_DWORD *)(v123 + 68) & 0x7FFFFFFFu) <= v133)
        {
          physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack((uint64_t)v233, (long long *)v243);
        }
        else
        {
          float v134 = *(void *)(v123 + 56) + 56 * v133;
          *(_OWORD *)float v134 = *(_OWORD *)v243;
          *(void *)(v134 + 16) = *(void *)&v243[16];
          *(_OWORD *)(v134 + 24) = *(_OWORD *)&v243[24];
          *(void *)(v134 + 40) = *(void *)&v243[40];
          *(_DWORD *)(v134 + 48) = v244;
          ++*(_DWORD *)(v123 + 64);
        }
        *(void *)&v256.f64[0] = v125 & 0xFFFF0000;
        float v137 = *(unsigned int *)(v123 + 48);
        if ((*(_DWORD *)(v123 + 52) & 0x7FFFFFFFu) <= v137)
        {
          float v139 = v123 + 40;
LABEL_118:
          physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack(v139, &v256);
          goto LABEL_119;
        }
        *(void *)(*(void *)(v123 + 40) + 8 * v137) = v125 & 0xFFFF0000;
        *(_DWORD *)(v123 + 48) = v137 + 1;
      }
LABEL_119:
      v125 += 0x10000;
      ++v126;
    }
    while (v127 != v125);
  }
  float v228 = a3;
  float v230 = *(double *)&a2;
  if (a6)
  {
    float v140 = *(unsigned int *)(a6 + 16);
    if (v140)
    {
      float v141 = 0;
      float v142 = 0;
      float v144 = (v223 & 4) == 0 || v238 == 0;
      float v237 = v144;
      float v145 = 80 * v140;
      do
      {
        float v146 = *(void *)(a6 + 8);
        float v147 = v146 + v142;
        float v148 = (float64x2_t *)(v146 + v142 + 24);
        float v256 = *v148;
        float v257 = *(void *)(v146 + v142 + 40);
        *(void *)&float v149 = *(void *)(v146 + v142 + 64);
        float v258 = v149;
        float v150 = *(_DWORD *)(v146 + v142 + 72);
        LODWORD(v259) = v150;
        float v151 = *(_DWORD *)(v146 + v142 + 48);
        HIDWORD(v259) = v151;
        float v152 = *(_DWORD *)(v146 + v142 + 52);
        LODWORD(v260) = v152;
        float v153 = *(_DWORD *)(v146 + v142 + 56);
        HIDWORD(v260) = v153;
        float v154 = *(_DWORD *)(v146 + v142 + 60);
        LODWORD(v261) = v154;
        float v155 = *(_DWORD *)(v123 + 64);
        if ((*(_DWORD *)(v123 + 68) & 0x7FFFFFFFu) <= v155)
        {
          physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack((uint64_t)v233, (long long *)&v256);
        }
        else
        {
          uint64_t v156 = *(void *)(v123 + 56) + 56 * v155;
          uint64_t v157 = *v148;
          *(void *)(v156 + 16) = *(void *)(v146 + v142 + 40);
          *(float64x2_t *)uint64_t v156 = v157;
          *((void *)&v149 + 1) = __PAIR64__(v151, v150);
          *(_OWORD *)(v156 + 24) = v149;
          *(_DWORD *)(v156 + 40) = v152;
          *(_DWORD *)(v156 + 44) = v153;
          *(_DWORD *)(v156 + 48) = v154;
          ++*(_DWORD *)(v123 + 64);
        }
        *(void *)float v243 = v141 & 0xFFFF0000 | 1;
        uint64_t v158 = *(unsigned int *)(v123 + 48);
        if ((*(_DWORD *)(v123 + 52) & 0x7FFFFFFFu) <= v158)
        {
          physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack((uint64_t)v234, v243);
        }
        else
        {
          *(void *)(*(void *)(v123 + 40) + 8 * v158) = v141 & 0xFFFF0000 | 1;
          *(_DWORD *)(v123 + 48) = v158 + 1;
        }
        if (!v237)
        {
          memset(v243, 0, 32);
          *(_OWORD *)&v243[32] = 0x3F80000000000000uLL;
          float v244 = 0;
          *(void *)&v245[4] = 0;
          float v246 = 0;
          *(_DWORD *)float v245 = 1065353216;
          float v247 = 1065353216;
          float v248 = 0;
          float v249 = 0;
          float v250 = 1065353216;
          float v251 = v238;
          *(_DWORD *)&v243[4] = -16711681;
          int v159 = *(double *)(v146 + v142 + 40);
          *(_OWORD *)float v240 = *(_OWORD *)(v147 + 48);
          *(float32x2_t *)&v240[16] = vcvt_f32_f64(*v148);
          *(float *)&v240[24] = v159;
          physx::Cm::RenderOutput::operator<<((uint64_t)v243, (uint64_t)v240);
          float32x4_t v160 = -*(float *)(v147 + 72);
          *(float32x2_t *)float v240 = vneg_f32(*(float32x2_t *)(v147 + 64));
          *(float *)&v240[8] = v160;
          *(void *)&v240[12] = *(void *)(v147 + 64);
          *(_DWORD *)&v240[20] = *(_DWORD *)(v147 + 72);
          v240[24] = 1;
          physx::Cm::operator<<(v243, (uint64_t *)v240);
        }
        v142 += 80;
        v141 += 0x10000;
      }
      while (v145 != v142);
    }
    float32x4_t v161 = *(unsigned int *)(a6 + 32);
    if (v161)
    {
      float32x4_t v162 = 0;
      float32x4_t v163 = 0;
      uint64_t v165 = (v223 & 4) == 0 || v238 == 0;
      uint64_t v166 = 72 * v161;
      while (1)
      {
        uint64_t v167 = *(void *)(a6 + 24) + v163;
        uint64_t v168 = *(float *)(v167 + 48);
        uint64_t v169 = *(float *)(v167 + 52);
        uint64_t v170 = v168 + v168;
        float v172 = *(float *)(v167 + 56);
        uint64_t v171 = *(float *)(v167 + 60);
        float v173 = v171 + v171;
        float v174 = (float)((float)(v171 * (float)(v171 + v171)) + -1.0) + (float)(v168 * (float)(v168 + v168));
        float v175 = (float)(v170 * v169) + (float)(v172 * (float)(v171 + v171));
        float v176 = (float)(v170 * v172) - (float)(v169 * v173);
        float v177 = *(float *)(v167 + 64);
        v178 = v177 * v175;
        float v179 = v176 * v177;
        float v180 = (float)(v174 * v177);
        v181 = *(double *)(v167 + 24);
        float v182 = *(double *)(v167 + 32);
        float v183 = v178;
        float v184 = *(double *)(v167 + 40);
        float32x2_t v185 = v179;
        *(double *)float v240 = v181 - v180;
        *(double *)&v240[8] = v182 - v183;
        *(double *)&v240[16] = v184 - v185;
        *(double *)&v240[24] = v181 + v180;
        *(double *)&float v241 = v182 + v183;
        *((double *)&v241 + 1) = v184 + v185;
        LODWORD(v242) = *(_DWORD *)(v167 + 68);
        uint64_t v186 = *(_DWORD *)(v123 + 96);
        if ((*(_DWORD *)(v123 + 100) & 0x7FFFFFFFu) <= v186)
        {
          physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack((uint64_t)v235, (long long *)v240);
        }
        else
        {
          uint64_t v187 = *(void *)(v123 + 88) + 56 * v186;
          *(_OWORD *)uint64_t v187 = *(_OWORD *)v240;
          *(_OWORD *)(v187 + 16) = *(_OWORD *)&v240[16];
          *(_OWORD *)(v187 + 32) = v241;
          *(void *)(v187 + 48) = v242;
          ++*(_DWORD *)(v123 + 96);
        }
        *(void *)float v243 = v162 & 0xFFFF0000 | 2;
        uint64_t v188 = *(unsigned int *)(v123 + 80);
        if ((*(_DWORD *)(v123 + 84) & 0x7FFFFFFFu) > v188) {
          break;
        }
        physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack((uint64_t)v236, v243);
        if (!v165) {
          goto LABEL_153;
        }
LABEL_154:
        v163 += 72;
        v162 += 0x10000;
        if (v166 == v163) {
          goto LABEL_155;
        }
      }
      *(void *)(*(void *)(v123 + 72) + 8 * v188) = v162 & 0xFFFF0000 | 2;
      *(_DWORD *)(v123 + 80) = v188 + 1;
      if (v165) {
        goto LABEL_154;
      }
LABEL_153:
      *(_OWORD *)&v243[32] = 0x3F80000000000000uLL;
      memset(v243, 0, 32);
      float v244 = 0;
      *(void *)&v245[4] = 0;
      float v246 = 0;
      *(_DWORD *)float v245 = 1065353216;
      float v247 = 1065353216;
      float v248 = 0;
      float v249 = 0;
      float v250 = 1065353216;
      float v251 = v238;
      *(_DWORD *)&v243[4] = -16711681;
      float v190 = *(float *)(v167 + 64);
      int v189 = *(float *)(v167 + 68);
      float v191 = *(double *)(v167 + 40);
      float v268 = *(_OWORD *)(v167 + 48);
      float v269 = (uint64_t)vcvt_f32_f64(*(float64x2_t *)(v167 + 24));
      float v270 = v191;
      physx::PxMat44::PxMat44((uint64_t)&v256, (uint64_t)&v268);
      physx::Cm::RenderOutput::outputCapsule((uint64_t)v243, (float32x2_t *)&v256, v189, v190);
      goto LABEL_154;
    }
  }
LABEL_155:
  *(_DWORD *)float v243 = *(_DWORD *)(v123 + 64);
  if (*(_DWORD *)v243)
  {
    float v192 = *v233;
    float v193 = *v234;
  }
  else
  {
    float v192 = 0;
    float v193 = 0;
  }
  *(void *)&v243[8] = v192;
  *(void *)&v243[16] = v193;
  *(_DWORD *)&v243[24] = *(_DWORD *)(v123 + 96);
  if (*(_DWORD *)&v243[24])
  {
    float v194 = *v235;
    float v195 = *v236;
  }
  else
  {
    float v194 = 0;
    float v195 = 0;
  }
  *(void *)&v243[32] = v194;
  *(void *)&v243[40] = v195;
  v256.f64[0] = v230;
  *(void *)&v256.f64[1] = a6;
  *(void *)&float v268 = *(void *)(*(void *)&v230 + 544);
  *((void *)&v268 + 1) = v238;
  float v269 = *(void *)(*(void *)&v230 + 600) + 120;
  *(_DWORD *)(*(void *)&v230 + 468) &= ~2u;
  v266.n128_u64[0] = 0;
  float v264 = 0;
  float v196 = v228[1];
  float v198 = v228[2];
  float v197 = v228[3];
  physx::Cct::SweepTest::moveCharacter(v240, v225, (uint64_t *)&v268, &v256, (uint64_t)v228, (float *)v252, (unsigned int *)v243, v231, a8, v226, v224, &v266, &v264);
  float v200 = v240[0];
  *float v227 = v240[0];
  float v201 = *(_DWORD *)(*(void *)&v230 + 468);
  if (v201)
  {
    *(_DWORD *)(*(void *)&v230 + 468) = v201 | 2;
    v228[1] = v196;
    v228[2] = v198;
    v228[3] = v197;
    float v202 = *(float *)v252;
    if (*(_DWORD *)(*(void *)&v230 + 12) == 1)
    {
      _S3 = *(_DWORD *)&v252[8];
      _D4 = *(float32x2_t *)(*(void *)&v230 + 36);
      __asm { FMLA            S2, S3, V4.S[1] }
      float v202 = *(float *)(*(void *)&v230 + 32) * _S2;
      float v209 = vmul_n_f32(_D4, _S2);
    }
    else
    {
      float v209 = *(float32x2_t *)&v252[4];
    }
    *(float *)float v240 = v202;
    *(float32x2_t *)&v240[4] = v209;
    physx::Cct::SweepTest::moveCharacter((char *)&v253, v225, (uint64_t *)&v268, &v256, (uint64_t)v228, (float *)v240, (unsigned int *)v243, v231, a8, v226, v224, &v266, &v264);
    float v200 = v253;
    *float v227 = v253;
    *(_DWORD *)(*(void *)&v230 + 468) &= ~2u;
  }
  float v210 = (const physx::PxBase *)v266.n128_u64[0];
  if (*(unsigned char *)(*(void *)&v230 + 304))
  {
    float v211 = *v232;
    if (*v232 != (const physx::PxBase *)v266.n128_u64[0])
    {
      if (v211) {
        physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(*(void *)&v230 + 312), v211, v199);
      }
      if (v210) {
        physx::Cct::CharacterControllerManager::registerObservedObject(*(physx::Cct::CharacterControllerManager **)(*(void *)&v230 + 312), v210, v199);
      }
    }
  }
  *(void *)(*(void *)&v230 + 296) = v210;
  float v212 = v264;
  if (*(unsigned char *)(*(void *)&v230 + 280))
  {
    float v213 = *(const physx::PxBase **)(*(void *)&v230 + 272);
    if (v213 != v264)
    {
      if (v213) {
        physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(*(void *)&v230 + 288), v213, v199);
      }
      if (v212) {
        physx::Cct::CharacterControllerManager::registerObservedObject(*(physx::Cct::CharacterControllerManager **)(*(void *)&v230 + 288), v212, v199);
      }
    }
  }
  *(void *)(*(void *)&v230 + 272) = v212;
  *(unsigned char *)(*(void *)&v230 + 584) = v200;
  float v214 = *(_OWORD *)(v228 + 1);
  *(double *)(*(void *)&v230 + 512) = v228[3];
  *(_OWORD *)(*(void *)&v230 + 496) = v214;
  float v215 = *(void *)(*(void *)&v230 + 488);
  if (v215)
  {
    float v216 = v196 - v228[1];
    float v217 = v198 - v228[2];
    float v218 = v197 - v228[3];
    if ((float)((float)((float)(v217 * v217) + (float)(v216 * v216)) + (float)(v218 * v218)) != 0.0)
    {
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v215 + 152))(v240);
      float v219 = *(double *)(*(void *)&v230 + 512);
      *(float32x2_t *)&v240[16] = vcvt_f32_f64(*(float64x2_t *)(*(void *)&v230 + 496));
      *(float *)&v240[24] = v219;
      *(_OWORD *)float v240 = *(_OWORD *)(*(void *)&v230 + 16);
      (*(void (**)(void))(**(void **)(*(void *)&v230 + 488) + 496))();
    }
  }
  float v220 = *(unsigned int **)(*(void *)&v230 + 600);
  resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>((uint64_t)(v220 + 10));
  if ((v220[17] & 0x7FFFFFFF) != 0)
  {
    if (v220[16] <= (v220[17] & 0x7FFFFFFF) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v220 + 14));
      physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::recreate((uint64_t)(v220 + 14), v220[16]);
    }
    else
    {
      v220[16] = 0;
    }
  }
  uint64_t result = resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>((uint64_t)(v220 + 18));
  if ((v220[25] & 0x7FFFFFFF) != 0)
  {
    if (v220[24] <= (v220[25] & 0x7FFFFFFF) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v220 + 22));
      uint64_t result = physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::recreate((uint64_t)(v220 + 22), v220[24]);
      if (!v229) {
        return result;
      }
      goto LABEL_191;
    }
    v220[24] = 0;
  }
  if (!v229) {
    return result;
  }
LABEL_191:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(*(void *)&v230 + 592));
  }
  return result;
}

uint64_t physx::Cct::BoxController::move@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>, float a6@<S0>, __n128 a7@<Q1>)
{
  double v9 = &unk_26E72ECE8;
  int v13 = 0;
  uint64_t v11 = *(void *)(a1 + 520);
  __n128 v10 = *(__n128 *)(a1 + 504);
  __n128 v7 = v10;
  v7.n128_u32[0] = *(_DWORD *)(a1 + 624);
  uint64_t v14 = *(void *)(a1 + 616);
  unsigned __int32 v15 = v7.n128_u32[0];
  int v12 = v14;
  return physx::Cct::Controller::move(a5, (_DWORD *)(a1 + 8), (double *)&v9, a2, a3, a4, 0, a6, a7, v7);
}

uint64_t physx::Cct::CapsuleController::move@<X0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>, float a6@<S0>, __n128 a7@<Q1>)
{
  __n128 v10 = &unk_26E72ED10;
  int v14 = 1;
  uint64_t v12 = *(void *)(a1 + 520);
  __n128 v11 = *(__n128 *)(a1 + 504);
  __n128 v7 = v11;
  float v8 = *(float *)(a1 + 620);
  float v15 = *(float *)(a1 + 616);
  float v16 = v8;
  v7.n128_f32[0] = v15 + (float)(v8 * 0.5);
  float v13 = v7.n128_f32[0];
  return physx::Cct::Controller::move(a5, (_DWORD *)(a1 + 8), (double *)&v10, a2, a3, a4, *(_DWORD *)(a1 + 624) == 1, a6, a7, v7);
}

uint64_t outputConvexToStream(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, uint64_t a9, _WORD *a10)
{
  uint64_t v236 = a8;
  uint64_t v242 = a4;
  uint64_t v244 = a2;
  uint64_t v273 = *MEMORY[0x263EF8340];
  int v264 = 4;
  long long v265 = xmmword_2343679C0;
  uint64_t v266 = 0;
  float v267 = 1.0;
  uint64_t v268 = 0;
  char v269 = 1;
  __int16 v270 = 0;
  char v271 = 0;
  int v14 = *(void (**)(uint64_t, int *))(*(void *)a1 + 120);
  uint64_t v243 = a1;
  v14(a1, &v264);
  uint64_t v15 = v268;
  int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v268 + 72))(v268);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64))(v15);
  uint64_t v245 = a9;
  if (v16)
  {
    float v18 = (unsigned __int8 *)v17;
    double v252 = *(double *)&a7;
    int v19 = 0;
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, float *))(*(void *)v15 + 80))(v15, v20, v254);
      int v19 = v19 + LOWORD(v255) - 2;
      uint64_t v20 = (v20 + 1);
    }
    while (v16 != v20);
    MEMORY[0x270FA5388](v21);
    double v23 = (char *)&v233 - v22;
    bzero((char *)&v233 - v22, v24);
    uint64_t v25 = 0;
    uint64_t v26 = v23;
    do
    {
      (*(void (**)(uint64_t, uint64_t, float *))(*(void *)v15 + 80))(v15, v25, v254);
      unsigned int v27 = LOWORD(v255);
      if (LOWORD(v255) != 2)
      {
        int v28 = *v18;
        unsigned int v29 = 2;
        do
        {
          int v30 = v18[(v29 - 1) % v27];
          int v31 = v18[v29 % v27];
          *uint64_t v26 = v28;
          v26[1] = v30;
          __int16 v32 = v26 + 3;
          v26[2] = v31;
          ++v29;
          v26 += 3;
        }
        while (v27 != v29);
        uint64_t v26 = v32;
      }
      v18 += v27;
      uint64_t v25 = (v25 + 1);
    }
    while (v25 != v16);
    a7 = *(double **)&v252;
  }
  else
  {
    int v19 = 0;
    double v23 = &v272;
  }
  float v33 = *a3;
  float v34 = a3[1];
  float v35 = v34 + v34;
  float v36 = a3[2];
  float v37 = a3[3];
  float v38 = v34 * (float)(v34 + v34);
  float v39 = v36 * (float)(v36 + v36);
  float v40 = (float)(v33 + v33) * v34;
  float v41 = (float)(v33 + v33) * v36;
  float v42 = (float)(v33 + v33) * v37;
  float v43 = v35 * v36;
  float v44 = v35 * v37;
  float v45 = (float)(v36 + v36) * v37;
  float v46 = (float)(1.0 - v38) - v39;
  float v47 = v40 + v45;
  float v48 = v41 - v44;
  float v49 = v40 - v45;
  float v50 = 1.0 - (float)(v33 * (float)(v33 + v33));
  float v51 = v50 - v39;
  float v52 = v43 + v42;
  float v53 = v41 + v44;
  float v54 = v43 - v42;
  float v55 = v50 - v38;
  float v56 = *(float *)&v266;
  float v57 = *((float *)&v265 + 3);
  float v58 = v56 + v56;
  float v59 = v56 * (float)(v56 + v56);
  float v60 = *((float *)&v266 + 1) * (float)(*((float *)&v266 + 1) + *((float *)&v266 + 1));
  float v61 = (float)(v57 + v57) * *(float *)&v266;
  float v62 = (float)(v57 + v57) * *((float *)&v266 + 1);
  float v63 = (float)(v57 + v57) * v267;
  float v64 = v58 * *((float *)&v266 + 1);
  float v65 = v58 * v267;
  float v66 = (float)(*((float *)&v266 + 1) + *((float *)&v266 + 1)) * v267;
  float v67 = (float)(1.0 - v59) - v60;
  float v68 = v61 + v66;
  float v69 = v62 - v65;
  float v70 = v61 - v66;
  float v71 = 1.0 - (float)(v57 * (float)(v57 + v57));
  float v72 = v71 - v60;
  float v73 = v64 + v63;
  float v74 = v62 + v65;
  float v75 = v64 - v63;
  float v76 = v71 - v59;
  float v77 = *(float *)&v265 * v67;
  float v78 = *(float *)&v265 * v70;
  float v79 = v68 * *((float *)&v265 + 1);
  float v80 = v72 * *((float *)&v265 + 1);
  float v81 = v69 * *((float *)&v265 + 2);
  float v82 = v73 * *((float *)&v265 + 2);
  float v83 = v67 * (float)(*(float *)&v265 * v70);
  float v84 = v68 * (float)(v72 * *((float *)&v265 + 1));
  float v85 = (float)(v67 * (float)(*(float *)&v265 * v67)) + (float)(v68 * (float)(v68 * *((float *)&v265 + 1)));
  float v86 = (float)(v67 * (float)(*(float *)&v265 * v74)) + (float)(v68 * (float)(v75 * *((float *)&v265 + 1)));
  float v87 = v85 + (float)(v69 * (float)(v69 * *((float *)&v265 + 2)));
  float v88 = (float)(v83 + v84) + (float)(v69 * (float)(v73 * *((float *)&v265 + 2)));
  float v89 = v86 + (float)(v69 * (float)(v76 * *((float *)&v265 + 2)));
  float v90 = v70 * (float)(*(float *)&v265 * v70);
  float v91 = v72 * (float)(v72 * *((float *)&v265 + 1));
  float v92 = (float)(v70 * v77) + (float)(v72 * v79);
  float v93 = (float)(v70 * (float)(*(float *)&v265 * v74)) + (float)(v72 * (float)(v75 * *((float *)&v265 + 1)));
  float v94 = v92 + (float)(v73 * v81);
  float v95 = (float)(v90 + v91) + (float)(v73 * (float)(v73 * *((float *)&v265 + 2)));
  float v96 = v93 + (float)(v73 * (float)(v76 * *((float *)&v265 + 2)));
  float v97 = (float)((float)(v74 * v77) + (float)(v75 * v79)) + (float)(v76 * v81);
  float v98 = (float)((float)(v74 * v78) + (float)(v75 * v80)) + (float)(v76 * v82);
  float v99 = (float)((float)(v74 * (float)(*(float *)&v265 * v74)) + (float)(v75 * (float)(v75 * *((float *)&v265 + 1))))
      + (float)(v76 * (float)(v76 * *((float *)&v265 + 2)));
  float v100 = v47 * v87;
  float v101 = v48 * v87;
  float v102 = (float)(v46 * v87) + (float)(v49 * v88);
  float v103 = v100 + (float)(v51 * v88);
  float v104 = v101 + (float)(v52 * v88);
  float v105 = v53 * v89;
  float v106 = v54 * v89;
  float v107 = v55 * v89;
  float v108 = (float)(v46 * v94) + (float)(v49 * v95);
  float v109 = (float)(v47 * v94) + (float)(v51 * v95);
  float v110 = (float)(v48 * v94) + (float)(v52 * v95);
  float v111 = v53 * v96;
  float v112 = v54 * v96;
  float v113 = v55 * v96;
  float v114 = (float)(v46 * v97) + (float)(v49 * v98);
  float v115 = (float)(v47 * v97) + (float)(v51 * v98);
  float v116 = (float)(v48 * v97) + (float)(v52 * v98);
  float v117 = v53 * v99;
  float v118 = v54 * v99;
  float v119 = v55 * v99;
  double v120 = a3[5];
  double v121 = a3[6];
  double v122 = a3[4] - *a7;
  double v123 = a7[2];
  uint64_t v124 = v242;
  unsigned int v125 = *(_DWORD *)(v242 + 8);
  int v126 = *(_DWORD *)(v242 + 12);
  float64x2_t v235 = *(float64x2_t *)a7;
  unsigned int v127 = v126 & 0x7FFFFFFF;
  double v128 = v120 - v235.f64[1];
  unsigned int v129 = v125 + 13;
  double v130 = v121 - v123;
  if (v125 + 13 > v127)
  {
    unsigned int v131 = 2 * v127;
    if (!v127) {
      unsigned int v131 = 2;
    }
    if (v129 <= v131) {
      unsigned int v132 = v131;
    }
    else {
      unsigned int v132 = v129;
    }
    double v252 = v123;
    float v247 = v102;
    float v241 = v104;
    float v251 = v107;
    float v250 = v106;
    float v133 = v105;
    float v239 = v109;
    float v249 = v111;
    float v134 = v112;
    float v248 = v113;
    float v135 = v114;
    float v246 = v115;
    float v240 = v117;
    float v238 = v119;
    double v237 = v122;
    double v234 = v128;
    double v233 = v130;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v242, v132);
    double v130 = v233;
    double v128 = v234;
    double v122 = v237;
    float v119 = v238;
    float v117 = v240;
    float v115 = v246;
    float v114 = v135;
    float v113 = v248;
    float v112 = v134;
    float v111 = v249;
    float v109 = v239;
    float v105 = v133;
    float v106 = v250;
    float v107 = v251;
    float v104 = v241;
    float v102 = v247;
    double v123 = v252;
    unsigned int v125 = *(_DWORD *)(v124 + 8);
  }
  *(float *)&double v252 = v105 + v102;
  float v251 = v106 + v103;
  float v250 = v107 + v104;
  float v249 = v111 + v108;
  float v241 = v112 + v109;
  float v240 = v113 + v110;
  float v239 = v117 + v114;
  float v238 = v118 + v115;
  *(float *)&double v237 = v119 + v116;
  float v136 = v122;
  float v248 = v136;
  float v137 = v128;
  float v247 = v137;
  float v138 = v130;
  float v246 = v138;
  uint64_t v139 = *(void *)v124 + 4 * v125;
  *(_DWORD *)(v124 + 8) = v129;
  *(_DWORD *)uint64_t v139 = 2;
  *(void *)(v139 + 4) = v243;
  *(void *)(v139 + 12) = v244;
  float64x2_t v140 = *(float64x2_t *)a7;
  *(double *)(v139 + 36) = a7[2];
  *(float64x2_t *)(v139 + 20) = v140;
  *(_DWORD *)(v139 + 48) = *(_DWORD *)(a5 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 56))(v15);
  uint64_t v142 = result;
  uint64_t v143 = v245;
  if (*(unsigned char *)(v245 + 56))
  {
    float v144 = v123;
    float v145 = *(float *)(v236 + 20);
    float v146 = *(float *)(v236 + 8);
    float v147 = (float)(v145 - v146) * 0.5;
    float v148 = (float)((float)(v145 + v146) * 0.5) - v144;
    float32x2_t v149 = *(float32x2_t *)(v236 + 12);
    float32x2_t v150 = vmul_f32(vsub_f32(v149, *(float32x2_t *)v236), (float32x2_t)0x3F0000003F000000);
    float32x2_t v151 = vsub_f32(vmul_f32(vadd_f32(v149, *(float32x2_t *)v236), (float32x2_t)0x3F0000003F000000), vcvt_f32_f64(v235));
    float32x2_t v260 = vsub_f32(v151, v150);
    float v261 = v148 - v147;
    float32x2_t v262 = vadd_f32(v150, v151);
    float v263 = v147 + v148;
    int v152 = 0;
    if (v19)
    {
      float v153 = v241;
      float v154 = v240;
      float v155 = v239;
      float v156 = v238;
      float v157 = *(float *)&v237;
      float v158 = v248;
      float v159 = v247;
      float v160 = v246;
      do
      {
        unsigned int v161 = *((_DWORD *)v23 + 1);
        unsigned int v162 = *((_DWORD *)v23 + 2);
        float32x4_t v163 = (float *)(v142 + 12 * *(unsigned int *)v23);
        float v164 = v163[1];
        float v165 = v163[2];
        float v166 = v249 * v164;
        float v167 = v153 * v164;
        float v168 = (float)(v250 * *v163) + (float)(v154 * v164);
        float v169 = v155 * v165;
        float v170 = v168 + (float)(v157 * v165);
        float v171 = (float)((float)((float)(v251 * *v163) + v167) + (float)(v156 * v165)) + v159;
        v254[0] = (float)((float)((float)(*(float *)&v252 * *v163) + v166) + v169) + v158;
        v254[1] = v171;
        v254[2] = v170 + v160;
        float v172 = (float *)(v142 + 12 * v161);
        float v173 = v172[1];
        float v174 = v172[2];
        float v175 = v249 * v173;
        float v176 = v153 * v173;
        float v177 = (float)(v250 * *v172) + (float)(v154 * v173);
        float v178 = v155 * v174;
        float v179 = v177 + (float)(v157 * v174);
        float v180 = (float)((float)((float)(v251 * *v172) + v176) + (float)(v156 * v174)) + v159;
        v254[3] = (float)((float)((float)(*(float *)&v252 * *v172) + v175) + v178) + v158;
        float v255 = v180;
        float v256 = v179 + v160;
        v181 = (float *)(v142 + 12 * v162);
        float v182 = v181[1];
        --v19;
        float v183 = v181[2];
        float v184 = (float)(v251 * *v181) + (float)(v153 * v182);
        float v185 = (float)((float)((float)(v250 * *v181) + (float)(v154 * v182)) + (float)(v157 * v183)) + v160;
        float v257 = (float)((float)((float)(*(float *)&v252 * *v181) + (float)(v249 * v182)) + (float)(v155 * v183)) + v158;
        float v258 = (float)(v184 + (float)(v156 * v183)) + v159;
        int v253 = 0;
        float v186 = *(float *)(v143 + 52);
        float v259 = v185;
        uint64_t result = tessellateTriangle(&v253, (uint64_t)v254, -1, a5, a6, (int8x16_t *)&v260, a10, v186);
        v152 += v253;
        v23 += 12;
      }
      while (v19);
    }
    *(_DWORD *)(v139 + 44) = v152;
  }
  else
  {
    unsigned int v187 = *(_DWORD *)(a5 + 8);
    unsigned int v188 = *(_DWORD *)(a5 + 12) & 0x7FFFFFFF;
    unsigned int v189 = v187 + v19;
    unsigned int v190 = v187 + v19 + 1;
    if (v190 > v188)
    {
      unsigned int v191 = 2 * *(_DWORD *)(a5 + 12);
      if (!v188) {
        unsigned int v191 = 2;
      }
      if (v190 <= v191) {
        uint64_t v192 = v191;
      }
      else {
        uint64_t v192 = v190;
      }
      uint64_t result = physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a5, v192);
      unsigned int v187 = *(_DWORD *)(a5 + 8);
    }
    uint64_t v193 = *(void *)a5;
    *(_DWORD *)(a5 + 8) = v189;
    *(_DWORD *)(v139 + 44) = v19;
    float v194 = *(float *)&v252;
    float v195 = v251;
    float v196 = v250;
    float v197 = v249;
    float v198 = v241;
    float v199 = v240;
    float v200 = v239;
    float v201 = v238;
    float v202 = *(float *)&v237;
    float v203 = v248;
    float v204 = v247;
    float v205 = v246;
    if (v19)
    {
      float v206 = (float *)(v193 + 36 * v187);
      do
      {
        unsigned int v207 = *((_DWORD *)v23 + 1);
        unsigned int v208 = *((_DWORD *)v23 + 2);
        float v209 = (float *)(v142 + 12 * *(unsigned int *)v23);
        float v210 = v209[1];
        float v211 = v209[2];
        float v212 = v197 * v210;
        float v213 = v198 * v210;
        float v214 = (float)(v196 * *v209) + (float)(v199 * v210);
        float v215 = v200 * v211;
        float v216 = v214 + (float)(v202 * v211);
        float v217 = (float)((float)((float)(v195 * *v209) + v213) + (float)(v201 * v211)) + v204;
        *float v206 = (float)((float)((float)(v194 * *v209) + v212) + v215) + v203;
        v206[1] = v217;
        v206[2] = v216 + v205;
        float v218 = (float *)(v142 + 12 * v207);
        float v219 = v218[1];
        float v220 = v218[2];
        float v221 = v197 * v219;
        float v222 = v198 * v219;
        float v223 = (float)(v196 * *v218) + (float)(v199 * v219);
        float v224 = v200 * v220;
        float v225 = v223 + (float)(v202 * v220);
        float v226 = (float)((float)((float)(v195 * *v218) + v222) + (float)(v201 * v220)) + v204;
        v206[3] = (float)((float)((float)(v194 * *v218) + v221) + v224) + v203;
        v206[4] = v226;
        v206[5] = v225 + v205;
        float v227 = (float *)(v142 + 12 * v208);
        float v228 = v227[1];
        float v229 = v227[2];
        float v230 = (float)((float)(v195 * *v227) + (float)(v198 * v228)) + (float)(v201 * v229);
        float v231 = (float)((float)((float)(v196 * *v227) + (float)(v199 * v228)) + (float)(v202 * v229)) + v205;
        v206[6] = (float)((float)((float)(v194 * *v227) + (float)(v197 * v228)) + (float)(v200 * v229)) + v203;
        v206[7] = v230 + v204;
        v206[8] = v231;
        v254[0] = NAN;
        uint64_t v232 = *(unsigned int *)(a6 + 8);
        if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v232)
        {
          uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a6, v254);
          float v205 = v246;
          float v204 = v247;
          float v203 = v248;
          float v194 = *(float *)&v252;
        }
        else
        {
          *(_DWORD *)(*(void *)a6 + 4 * v232) = -1;
          ++*(_DWORD *)(a6 + 8);
        }
        v23 += 12;
        v206 += 9;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::CharacterControllerManager(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = &unk_26E72E770;
  *(void *)(a1 + 8) = &unk_26E72E820;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 1061158912;
  *(void *)(a1 + 164) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 172) = 0;
  physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 120, 0x40u, 0);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_DWORD *)(a1 + 196) = 65792;
  *(unsigned char *)(a1 + 200) = a3;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 248) = 1061158912;
  *(void *)(a1 + 252) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 260) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 208, 0x40u, 0);
  uint64_t v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    __n128 v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    __n128 v7 = "<allocation names disabled>";
  }
  float v8 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 72, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 264) = v8;
  physx::shdfnd::MutexImpl::MutexImpl(v8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  (*(void (**)(void))(*(void *)v9 + 264))();
  return a1;
}

void physx::Cct::CharacterControllerManager::~CharacterControllerManager(physx::Cct::CharacterControllerManager *this)
{
  *(void *)this = &unk_26E72E770;
  *((void *)this + 1) = &unk_26E72E820;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 3) = 0;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 33);
  if (*((void *)this + 26)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v3 = *((_DWORD *)this + 47);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((void *)this + 22)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 15)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 29);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 13)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *((void *)this + 11)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 21);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 9)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v7 = *((_DWORD *)this + 17);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 13);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 5)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Cct::CharacterControllerManager::~CharacterControllerManager(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void non-virtual thunk to'physx::Cct::CharacterControllerManager::~CharacterControllerManager(physx::Cct::CharacterControllerManager *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Cct::CharacterControllerManager::~CharacterControllerManager((physx::Cct::CharacterControllerManager *)((char *)this - 8));
  unsigned int v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Cct::CharacterControllerManager::release(int32x2_t *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  for (unint64_t i = *(unsigned int (**)(void))(*(void *)this + 16); i(); unint64_t i = *(unsigned int (**)(void))(*(void *)this
                                                                                                  + 16))
  {
    __n128 v11 = (uint64_t *)(*(uint64_t (**)(int32x2_t *, void))(*(void *)this + 24))(this, 0);
    physx::Cct::CharacterControllerManager::releaseController(this, v11);
  }
  while ((*(unsigned int (**)(int32x2_t *))(*(void *)this + 64))(this))
    (*(void (**)(void))(***(void ***)&this[22] + 16))(**(void **)&this[22]);
  uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)&this[2] + 56))(*(void *)&this[2]);
  (*(void (**)(void))(v12 + 272))();
  float v13 = (physx::shdfnd::Foundation *)(*(uint64_t (**)(int32x2_t *))(*(void *)this + 144))(this);
  return physx::shdfnd::Foundation::decRefCount(v13, v14, v15, v16, v17, v18, v19, v20, a9);
}

uint64_t physx::Cct::CharacterControllerManager::releaseController(int32x2_t *a1, uint64_t *a2)
{
  if (a1[14].i32[0])
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(*(void *)&a1[13] + 8 * v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      unint64_t v7 = a1[14].u32[0];
      if ((uint64_t *)v6 == a2) {
        break;
      }
      if (++v4 >= v7) {
        goto LABEL_7;
      }
    }
    int32x2_t v8 = a1[13];
    unsigned __int32 v9 = v7 - 1;
    a1[14].i32[0] = v9;
    *(void *)(*(void *)&v8 + 8 * v4) = *(void *)(*(void *)&v8 + 8 * v9);
  }
LABEL_7:
  uint64_t v22 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*a2 + 56))(a2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v10 + 192))(v10, &v22, 1, 0);
  if (a1[21].i32[1])
  {
    unint64_t v11 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    uint64_t v14 = (_DWORD *)(*(void *)&a1[18] + 4 * ((a1[19].i32[1] - 1) & ((v13 >> 31) ^ v13)));
    uint64_t v15 = *v14;
    if (v15 != -1)
    {
      int32x2_t v17 = a1[16];
      int32x2_t v16 = a1[17];
      if (*(void *)(*(void *)&v17 + 8 * v15) == v22)
      {
LABEL_13:
        *uint64_t v14 = *(_DWORD *)(*(void *)&v16 + 4 * v15);
        a1[21] = vadd_s32(a1[21], (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(*(void *)&v16 + 4 * v15) = a1[20].i32[1];
        a1[20].i32[1] = v15;
      }
      else
      {
        while (1)
        {
          uint64_t v18 = v15;
          uint64_t v15 = *(unsigned int *)(*(void *)&v16 + 4 * v15);
          if (v15 == -1) {
            break;
          }
          if (*(void *)(*(void *)&v17 + 8 * v15) == v22)
          {
            uint64_t v14 = (_DWORD *)(*(void *)&v16 + 4 * v18);
            goto LABEL_13;
          }
        }
      }
    }
  }
  int v19 = (*(uint64_t (**)(uint64_t *))*a2)(a2);
  uint64_t v20 = *a2;
  if (v19 != 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *))*a2)(a2);
    if (result) {
      return result;
    }
    uint64_t v20 = *a2;
  }
  return (*(uint64_t (**)(uint64_t *))(v20 + 208))(a2);
}

uint64_t physx::Cct::CharacterControllerManager::getScene(physx::Cct::CharacterControllerManager *this)
{
  return *((void *)this + 2);
}

double physx::Cct::CharacterControllerManager::getRenderBuffer(physx::Cct::CharacterControllerManager *this)
{
  if (!*((void *)this + 3))
  {
    uint64_t v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::RenderBuffer>::getName() [T = physx::Cm::RenderBuffer]";
    }
    else {
      int v3 = "<allocation names disabled>";
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 88, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 97);
    *(void *)uint64_t v4 = &unk_26E722EE8;
    double result = 0.0;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *((void *)this + 3) = v4;
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::setDebugRenderingFlags(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 32) = *a2;
  if (!*a2)
  {
    uint64_t v2 = result;
    double result = *(void *)(result + 24);
    if (result) {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(v2 + 24) = 0;
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::getNbControllers(physx::Cct::CharacterControllerManager *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t physx::Cct::CharacterControllerManager::getController(physx::Cct::CharacterControllerManager *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 28) <= a2)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 126, "PxControllerManager::getController(): out-of-range index", a6, a7, a8, vars0);
    return 0;
  }
  else
  {
    int32x2_t v8 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 13) + 8 * a2) + 32);
    return v8();
  }
}

uint64_t physx::Cct::CharacterControllerManager::createController(uint64_t a1, uint64_t a2)
{
  if (((**(uint64_t (***)(uint64_t))a2)(a2) & 1) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 138, "PxControllerManager::createController(): desc.isValid() fails.", v4, v5, v6, v43);
    return 0;
  }
  int v7 = *(_DWORD *)(a2 + 128);
  if (v7 != 1)
  {
    if (!v7)
    {
      uint64_t v8 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        unsigned __int32 v9 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::BoxController>::getName() [T = physx::Cct"
      }
             "::BoxController]";
      else {
        unsigned __int32 v9 = "<allocation names disabled>";
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v8 + 24)
                                                                                             + 16))(v8 + 24, 632, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 147);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)uint64_t v10 = &unk_26E72E9B0;
      unint64_t v13 = (void *)(v10 + 8);
      uint64_t v14 = physx::Cct::Controller::Controller(v10 + 8, a2, v12);
      *(void *)uint64_t v10 = &unk_26E72E4A0;
      *(void *)(v10 + 8) = &unk_26E72E5D0;
      *(_DWORD *)(v10 + 16) = 0;
      float v15 = *(float *)(a2 + 132);
      *(float *)(v10 + 616) = v15;
      float v16 = *(float *)(a2 + 136);
      *(float *)(v10 + 620) = v16;
      float v17 = *(float *)(a2 + 140);
      *(float *)(v10 + 624) = v17;
      LODWORD(v45) = 3;
      float v18 = *(float *)(v10 + 588);
      *((float *)&v45 + 1) = v15 * v18;
      float v46 = v16 * v18;
      float v47 = v17 * v18;
      goto LABEL_14;
    }
    return 0;
  }
  uint64_t v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v20 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::CapsuleController>::getName() [T = physx::Cc"
  }
          "t::CapsuleController]";
  else {
    uint64_t v20 = "<allocation names disabled>";
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v19 + 24) + 16))(v19 + 24, 632, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 153);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16));
  uint64_t v21 = *(void *)(a1 + 16);
  *(void *)uint64_t v10 = &unk_26E72EAC8;
  unint64_t v13 = (void *)(v10 + 8);
  uint64_t v14 = physx::Cct::Controller::Controller(v10 + 8, a2, v21);
  *(void *)uint64_t v10 = &unk_26E72E608;
  *(void *)(v10 + 8) = &unk_26E72E738;
  *(_DWORD *)(v10 + 16) = 1;
  float v22 = *(float *)(a2 + 132);
  *(float *)(v10 + 616) = v22;
  float v23 = *(float *)(a2 + 136);
  *(float *)(v10 + 620) = v23;
  *(_DWORD *)(v10 + 624) = *(_DWORD *)(a2 + 140);
  LODWORD(v45) = 2;
  float v24 = *(float *)(v10 + 588);
  *((float *)&v45 + 1) = v22 * v24;
  float v46 = (float)(v23 * 0.5) * v24;
LABEL_14:
  physx::Cct::Controller::createProxyActor(v14, v11, (uint64_t)&v45, *(void *)(a2 + 104));
  float v45 = v13;
  uint64_t v25 = *(unsigned int *)(a1 + 112);
  if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v25)
  {
    physx::shdfnd::Array<physx::Cct::Controller *,physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>>::growAndPushBack(a1 + 104, &v45);
  }
  else
  {
    *(void *)(*(void *)(a1 + 104) + 8 * v25) = v13;
    *(_DWORD *)(a1 + 112) = v25 + 1;
  }
  v13[75] = a1;
  v13[60] = a1;
  v13[39] = a1;
  v13[36] = a1;
  uint64_t v44 = 0;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v26 + 192))(v26, &v44, 1, 0);
  unsigned int v28 = *(_DWORD *)(a1 + 156);
  if (!v28)
  {
    unsigned int v32 = 0;
    goto LABEL_23;
  }
  unint64_t v29 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
  unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
  unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
  unsigned int v32 = (v28 - 1) & ((v31 >> 31) ^ v31);
  uint64_t v33 = *(unsigned int *)(*(void *)(a1 + 144) + 4 * v32);
  if (v33 == -1)
  {
LABEL_23:
    unsigned int v34 = *(_DWORD *)(a1 + 164);
    if (v34 == -1)
    {
      if (v28) {
        unsigned int v36 = 2 * v28;
      }
      else {
        unsigned int v36 = 16;
      }
      if (v28 >= v36)
      {
        unsigned int v34 = -1;
      }
      else
      {
        physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 120, v36, v27);
        unsigned int v28 = *(_DWORD *)(a1 + 156);
        unsigned int v34 = *(_DWORD *)(a1 + 164);
      }
      uint64_t v35 = v44;
      unint64_t v37 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
      unint64_t v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      unint64_t v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      unsigned int v32 = (v28 - 1) & ((v39 >> 31) ^ v39);
    }
    else
    {
      uint64_t v35 = v44;
    }
    uint64_t v40 = *(void *)(a1 + 136);
    uint64_t v41 = *(void *)(a1 + 144);
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(v40 + 4 * v34);
    *(_DWORD *)(v40 + 4 * v34) = *(_DWORD *)(v41 + 4 * v32);
    *(_DWORD *)(v41 + 4 * v32) = v34;
    *(int32x2_t *)(a1 + 168) = vadd_s32(*(int32x2_t *)(a1 + 168), (int32x2_t)0x100000001);
    *(void *)(*(void *)(a1 + 128) + 8 * v34) = v35;
    return v10;
  }
  while (*(void *)(*(void *)(a1 + 128) + 8 * v33) != v44)
  {
    uint64_t v33 = *(unsigned int *)(*(void *)(a1 + 136) + 4 * v33);
    if (v33 == -1) {
      goto LABEL_23;
    }
  }
  return v10;
}

uint64_t physx::Cct::CharacterControllerManager::purgeControllers(uint64_t this)
{
  if (*(_DWORD *)(this + 112))
  {
    uint64_t v1 = this;
    do
    {
      uint64_t v2 = (uint64_t *)(*(uint64_t (**)(void))(***(void ***)(v1 + 104) + 32))(**(void **)(v1 + 104));
      this = physx::Cct::CharacterControllerManager::releaseController((int32x2_t *)v1, v2);
    }
    while (*(_DWORD *)(v1 + 112));
  }
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::onRelease(uint64_t result, physx::PxBase *a2)
{
  if (*((unsigned __int16 *)a2 + 4) - 5 <= 2)
  {
    uint64_t v3 = result;
    if (*(unsigned char *)(result + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
      double result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 264));
    }
    if (!*(_DWORD *)(v3 + 260)
      || (unint64_t v4 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22),
          unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8)),
          unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27),
          uint64_t v7 = *(unsigned int *)(*(void *)(v3 + 232)
                               + 4 * ((*(_DWORD *)(v3 + 244) - 1) & ((v6 >> 31) ^ v6))),
          v7 == -1))
    {
LABEL_11:
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 216);
      while (*(physx::PxBase **)(v8 + 16 * v7) != a2)
      {
        uint64_t v7 = *(unsigned int *)(*(void *)(v3 + 224) + 4 * v7);
        if (v7 == -1) {
          goto LABEL_11;
        }
      }
      uint64_t v9 = v8 + 16 * v7;
    }
    if (*(unsigned char *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
      double result = pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 264));
    }
    if (v9 && *(_DWORD *)(v3 + 112))
    {
      uint64_t v10 = 0;
      int64x2_t v21 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      int64x2_t v11 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      int64x2_t v20 = v11;
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)(v3 + 104) + 8 * v10);
        if (*(unsigned char *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
          double result = pthread_mutex_lock(*(pthread_mutex_t **)(v12 + 592));
        }
        if (*(physx::PxBase **)(v12 + 296) == a2) {
          break;
        }
        uint64_t v13 = *(unsigned int *)(v12 + 160);
        if (v13)
        {
          uint64_t v14 = *(unsigned int **)(v12 + 152);
          float v15 = &v14[v13];
          while (*(physx::PxBase **)(v14 + 1) != a2)
          {
            uint64_t v14 = (unsigned int *)((char *)v14 + GeomSizes[*v14]);
            if (v14 == v15) {
              goto LABEL_36;
            }
          }
          *(int64x2_t *)(v12 + 168) = v21;
          *(_OWORD *)(v12 + 184) = xmmword_2343AC110;
          v11.i64[0] = v20.i64[0];
          *(int64x2_t *)(v12 + 200) = v20;
        }
LABEL_36:
        if (*(physx::PxBase **)(v12 + 272) != a2) {
          goto LABEL_41;
        }
        float v17 = (const physx::PxBase **)(v12 + 272);
        if (*(unsigned char *)(v12 + 280))
        {
          uint64_t v19 = (physx::Cct::CharacterControllerManager **)(v12 + 288);
          float v18 = a2;
LABEL_39:
          double result = physx::Cct::CharacterControllerManager::unregisterObservedObject(*v19, v18, *(int8x8_t *)v11.i8);
        }
LABEL_40:
        *float v17 = 0;
LABEL_41:
        if (*(unsigned char *)(v3 + 200) && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)) {
          double result = pthread_mutex_unlock(*(pthread_mutex_t **)(v12 + 592));
        }
        if (++v10 >= (unint64_t)*(unsigned int *)(v3 + 112)) {
          return result;
        }
      }
      if (*(unsigned char *)(v12 + 280))
      {
        float v16 = *(const physx::PxBase **)(v12 + 272);
        if (v16) {
          double result = physx::Cct::CharacterControllerManager::unregisterObservedObject(*(physx::Cct::CharacterControllerManager **)(v12 + 288), v16, *(int8x8_t *)v11.i8);
        }
      }
      float v17 = (const physx::PxBase **)(v12 + 296);
      *(void *)(v12 + 272) = 0;
      if (!*(unsigned char *)(v12 + 304)) {
        goto LABEL_40;
      }
      float v18 = *v17;
      if (!*v17) {
        goto LABEL_40;
      }
      uint64_t v19 = (physx::Cct::CharacterControllerManager **)(v12 + 312);
      goto LABEL_39;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'physx::Cct::CharacterControllerManager::onRelease(uint64_t a1, physx::PxBase *a2)
{
  return physx::Cct::CharacterControllerManager::onRelease(a1 - 8, a2);
}

uint64_t physx::Cct::CharacterControllerManager::getNbObstacleContexts(physx::Cct::CharacterControllerManager *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t physx::Cct::CharacterControllerManager::getObstacleContext(physx::Cct::CharacterControllerManager *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 46) > a2) {
    return *(void *)(*((void *)this + 22) + 8 * a2);
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 278, "PxControllerManager::getObstacleContext(): out-of-range index", a6, a7, a8, vars0);
  return 0;
}

uint64_t physx::Cct::CharacterControllerManager::createObstacleContext(physx::Cct::CharacterControllerManager *this)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext>::getName() [T = physx::Cct::"
  }
         "ObstacleContext]";
  else {
    uint64_t v3 = "<allocation names disabled>";
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 96, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 288);
  *(void *)uint64_t v4 = &unk_26E72EC88;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  physx::Cct::HandleManager::HandleManager((physx::Cct::HandleManager *)(v4 + 40));
  *(void *)(v4 + 88) = this;
  uint64_t v7 = v4;
  uint64_t v5 = *((unsigned int *)this + 46);
  if ((*((_DWORD *)this + 47) & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<physx::Cct::ObstacleContext *,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>>::growAndPushBack((uint64_t)this + 176, &v7);
  }
  else
  {
    *(void *)(*((void *)this + 22) + 8 * v5) = v4;
    *((_DWORD *)this + 46) = v5 + 1;
  }
  return v4;
}

uint64_t physx::Cct::CharacterControllerManager::releaseObstacleContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(void *)(*(void *)(a1 + 176) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 176);
    unsigned int v5 = v2 - 1;
    *(_DWORD *)(a1 + 184) = v5;
    *(void *)(v4 + 8 * v3) = *(void *)(v4 + 8 * v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void physx::Cct::CharacterControllerManager::onObstacleUpdated(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 112))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 104) + 8 * v6);
      uint64_t v8 = v7 + 104;
      float v9 = *(double *)(v7 + 512);
      float32x2_t v14 = vcvt_f32_f64(*(float64x2_t *)(v7 + 496));
      float v15 = v9;
      float v10 = -*(float *)(v7 + 40);
      float32x2_t v12 = vneg_f32(*(float32x2_t *)(v7 + 32));
      float v13 = v10;
      float v11 = (*(float (**)(uint64_t))(*(void *)v7 + 16))(v7);
      physx::Cct::SweepTest::onObstacleUpdated(v8, a2, a3, &v14, &v12, v11);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 112));
  }
}

void physx::Cct::CharacterControllerManager::onObstacleAdded(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 112))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 104) + 8 * v6);
      uint64_t v8 = v7 + 104;
      float v9 = *(double *)(v7 + 512);
      float32x2_t v14 = vcvt_f32_f64(*(float64x2_t *)(v7 + 496));
      float v15 = v9;
      float v10 = -*(float *)(v7 + 40);
      float32x2_t v12 = vneg_f32(*(float32x2_t *)(v7 + 32));
      float v13 = v10;
      float v11 = (*(float (**)(uint64_t))(*(void *)v7 + 16))(v7);
      physx::Cct::SweepTest::onObstacleAdded(v8, a2, a3, (float *)&v14, &v12, v11);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 112));
  }
}

uint64_t resetOrClear<physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>>(uint64_t result)
{
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFF) != 0)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 8) <= (*(_DWORD *)(result + 12) & 0x7FFFFFFFu) >> 1)
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(result);
      unsigned int v2 = *(_DWORD *)(v1 + 8);
      return physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::recreate(v1, v2);
    }
    else
    {
      *(_DWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t physx::Cct::CharacterControllerManager::setTessellation(uint64_t this, char a2, float a3)
{
  *(unsigned char *)(this + 196) = a2;
  *(float *)(this + 192) = a3;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setOverlapRecoveryModule(uint64_t this, char a2)
{
  *(unsigned char *)(this + 197) = a2;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setPreciseSweeps(uint64_t this, char a2)
{
  *(unsigned char *)(this + 198) = a2;
  return this;
}

uint64_t physx::Cct::CharacterControllerManager::setPreventVerticalSlidingAgainstCeiling(uint64_t this, char a2)
{
  *(unsigned char *)(this + 199) = a2;
  return this;
}

float physx::Cct::CharacterControllerManager::shiftOrigin(uint64_t a1, float32x2_t *a2, float64x2_t a3)
{
  if (*(_DWORD *)(a1 + 112))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(a1 + 112); ++i)
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 8 * i);
      float v8 = a2->f32[0];
      float v7 = a2->f32[1];
      double v9 = a2->f32[0];
      double v10 = v7;
      double v11 = *(double *)(v6 + 504) - v7;
      *(double *)(v6 + 496) = *(double *)(v6 + 496) - v9;
      *(double *)(v6 + 504) = v11;
      LODWORD(a3.f64[0]) = a2[1].i32[0];
      double v12 = *(float *)a3.f64;
      *(double *)(v6 + 512) = *(double *)(v6 + 512) - *(float *)a3.f64;
      uint64_t v13 = *(void *)(v6 + 600);
      if (v13
        && *(unsigned char *)(v13 + 200)
        && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 592));
        float v8 = a2->f32[0];
        float v7 = a2->f32[1];
        LODWORD(a3.f64[0]) = a2[1].i32[0];
        double v9 = a2->f32[0];
        double v10 = v7;
        double v12 = *(float *)a3.f64;
      }
      double v14 = *(double *)(v6 + 176) - v10;
      *(double *)(v6 + 168) = *(double *)(v6 + 168) - v9;
      *(double *)(v6 + 176) = v14;
      double v15 = *(double *)(v6 + 192);
      *(double *)(v6 + 184) = *(double *)(v6 + 184) - v12;
      *(double *)(v6 + 192) = v15 - v9;
      double v16 = *(double *)(v6 + 208) - v12;
      *(double *)(v6 + 200) = *(double *)(v6 + 200) - v10;
      *(double *)(v6 + 208) = v16;
      if (*(void *)(v6 + 272))
      {
        if (*(_WORD *)(*(void *)(v6 + 296) + 8) != 6)
        {
          *(float *)(v6 + 348) = *(float *)(v6 + 348) - v8;
          *(float *)(v6 + 352) = *(float *)(v6 + 352) - v7;
          float v17 = (float *)(v6 + 356);
LABEL_13:
          *(float *)a3.f64 = *v17 - *(float *)a3.f64;
          *float v17 = *(float *)a3.f64;
        }
      }
      else if (*(_DWORD *)(v6 + 320) != -1)
      {
        *(float *)(v6 + 372) = *(float *)(v6 + 372) - v8;
        *(float *)(v6 + 376) = *(float *)(v6 + 376) - v7;
        float v17 = (float *)(v6 + 380);
        goto LABEL_13;
      }
      uint64_t v18 = *(unsigned int *)(v6 + 160);
      if (v18)
      {
        uint64_t v19 = *(unsigned int **)(v6 + 152);
        int64x2_t v20 = &v19[v18];
        a3 = vcvtq_f64_f32(*a2);
        double v21 = a2[1].f32[0];
        do
        {
          *(float64x2_t *)(v19 + 5) = vsubq_f64(*(float64x2_t *)(v19 + 5), a3);
          *(double *)(v19 + 9) = *(double *)(v19 + 9) - v21;
          uint64_t v19 = (unsigned int *)((char *)v19 + GeomSizes[*v19]);
        }
        while (v19 != v20);
      }
      uint64_t v22 = *(void *)(v6 + 600);
      if (v22
        && *(unsigned char *)(v22 + 200)
        && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
      {
        pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 592));
      }
    }
  }
  if (*(_DWORD *)(a1 + 184))
  {
    unint64_t v23 = 0;
    do
      physx::Cct::ObstacleContext::onOriginShift(*(void *)(*(void *)(a1 + 176) + 8 * v23++), a2);
    while (v23 < *(unsigned int *)(a1 + 184));
  }
  uint64_t v24 = *(void *)(a1 + 24);
  if (v24)
  {
    float v25 = -a2[1].f32[0];
    float32x2_t v27 = vneg_f32(*a2);
    float v28 = v25;
    *(float *)a3.f64 = physx::Cm::RenderBuffer::shift(v24, &v27);
  }
  return *(float *)a3.f64;
}

void physx::Cct::CharacterControllerManager::computeInteractions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(a1 + 112);
  if (v4)
  {
    unsigned int v5 = *(uint64_t **)(a1 + 104);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 651);
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7;
      LODWORD(v4) = v4 - 1;
      uint64_t v9 = *v5++;
      (*(void (**)(uint64_t, float64x2_t *))(*(void *)v9 + 24))(v9, v180);
      *(float32x4_t *)uint64_t v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v180[0]), v180[1]);
      *(float32x2_t *)(v8 + 16) = vcvt_f32_f64(v180[2]);
      v7 += 24;
    }
    while (v4);
    uint64_t v10 = v6 + v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v10 = 0;
  }
  unsigned int v11 = -1431655765 * ((v10 - v6) >> 3);
  float v146 = 0;
  uint64_t v147 = 0;
  if (v11)
  {
    double v12 = (const float *)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 0xFFFFFFFEAAAAAAACLL * ((v10 - v6) >> 3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 611);
    uint64_t v13 = v12;
    uint64_t v14 = 0;
    double v15 = (float *)v6;
    do
    {
      float v16 = *v15;
      v15 += 6;
      v12[v14++] = v16;
    }
    while (v11 != v14);
    uint64_t v181 = 0;
    memset(&v180[1], 0, 32);
    char v182 = 1;
    LODWORD(v180[0].f64[1]) = 0x80000000;
    *(void *)&v180[0].f64[0] = &unk_26E728438;
    physx::Cm::RadixSortBuffered::Sort((physx::Cm::RadixSortBuffered *)v180, v12);
    float64_t v17 = v180[1].f64[0];
    unint64_t v18 = *(void *)&v180[1].f64[0] + 4 * v11;
    v156.i32[0] = 0;
    float64_t v19 = v180[1].f64[0];
    while (1)
    {
      unsigned int v21 = **(_DWORD **)&v19;
      *(void *)&v19 += 4;
      uint64_t v20 = v21;
      LODWORD(v171.f64[0]) = v21;
      do
      {
        if (*(void *)&v17 >= v18) {
          break;
        }
        int v22 = **(_DWORD **)&v17;
        *(void *)&v17 += 4;
      }
      while (v13[v22] < v13[v20]);
      if (*(void *)&v17 >= v18) {
        break;
      }
      unint64_t v23 = *(unsigned __int32 **)&v17;
      do
      {
        unsigned __int32 v25 = *v23++;
        unsigned __int32 v24 = v25;
        v156.i32[0] = v25;
        uint64_t v26 = (float *)(v6 + 24 * LODWORD(v171.f64[0]));
        float v27 = v26[3];
        if (v13[v25] > v27) {
          break;
        }
        if (LODWORD(v171.f64[0]) != v24)
        {
          float v28 = (float *)(v6 + 24 * v24);
          if (*v28 <= v27
            && *v26 <= *(float *)(v6 + 24 * v24 + 12)
            && v28[1] <= *(float *)(v6 + 24 * LODWORD(v171.f64[0]) + 16)
            && v26[1] <= *(float *)(v6 + 24 * v24 + 16)
            && v28[2] <= *(float *)(v6 + 24 * LODWORD(v171.f64[0]) + 20)
            && v26[2] <= *(float *)(v6 + 24 * v24 + 20))
          {
            if ((HIDWORD(v147) & 0x7FFFFFFFu) <= v147)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v146, &v171);
              unsigned int v29 = v147;
            }
            else
            {
              v146[v147] = LODWORD(v171.f64[0]);
              unsigned int v29 = v147 + 1;
              LODWORD(v147) = v147 + 1;
            }
            if ((HIDWORD(v147) & 0x7FFFFFFFu) <= v29)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v146, &v156);
            }
            else
            {
              v146[v29] = v156.i32[0];
              LODWORD(v147) = v147 + 1;
            }
          }
        }
      }
      while ((unint64_t)v23 < v18);
      if (*(void *)&v19 >= v18) {
        goto LABEL_33;
      }
    }
    if (!v13) {
      goto LABEL_34;
    }
LABEL_33:
    (*(void (**)(uint64_t, const float *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
LABEL_34:
    *(void *)&v180[0].f64[0] = &unk_26E728438;
    physx::Cm::RadixSortBuffered::reset((uint64_t)v180);
    if (v147 >= 2)
    {
      unsigned int v30 = v147 >> 1;
      unint64_t v31 = v146;
      float v32 = a3 * 4.0;
      float v33 = 1.0;
      while (1)
      {
        unsigned int v145 = v30;
        uint64_t v34 = *(void *)(a1 + 104);
        uint64_t v35 = *(_DWORD **)(v34 + 8 * *v31);
        unsigned int v36 = *(_DWORD **)(v34 + 8 * v31[1]);
        if (!a2) {
          break;
        }
        uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v35 + 32))(*(void *)(v34 + 8 * *v31));
        uint64_t v38 = (*(uint64_t (**)(_DWORD *))(*(void *)v36 + 32))(v36);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v37, v38)) {
          break;
        }
LABEL_89:
        v31 += 2;
        unsigned int v30 = v145 - 1;
        if (v145 == 1) {
          goto LABEL_90;
        }
      }
      float32x2_t v176 = 0;
      float v177 = 0.0;
      int v39 = v35[2];
      int v40 = v36[2];
      if (v39 <= v40) {
        uint64_t v41 = v36;
      }
      else {
        uint64_t v41 = v35;
      }
      if (v39 <= v40) {
        unsigned int v36 = v35;
      }
      uint64_t v143 = (float32x2_t *)(v36 + 101);
      int v42 = v36[2];
      if (v42)
      {
        if (v42 == 1 && v41[2] == 1)
        {
          float v43 = v32;
          physx::Cct::CapsuleController::getCapsule((uint64_t)(v36 - 2), (uint64_t)v180);
          physx::Cct::CapsuleController::getCapsule((uint64_t)(v41 - 2), (uint64_t)&v171);
          float v44 = *(float *)&v181 + v175;
          float v45 = v180[1].f64[0];
          *(float *)&double v157 = v45;
          float v46 = v180[2].f64[1];
          float v47 = v172;
          float v186 = v47;
          float32x2_t v48 = vcvt_f32_f64(*(float64x2_t *)((char *)&v180[1] + 8));
          float32x2_t v49 = vcvt_f32_f64(v173);
          float v50 = v174;
          v178.i32[0] = 0;
          v168.i32[0] = 0;
          float32x2_t v156 = vcvt_f32_f64(v180[0]);
          float32x2_t v183 = vsub_f32(v48, v156);
          v184[0] = v46 - v45;
          float32x2_t v185 = vcvt_f32_f64(v171);
          unint64_t v152 = (unint64_t)vsub_f32(v49, v185);
          v153[0] = v50 - v47;
          float v51 = sqrtf(physx::Gu::distanceSegmentSegmentSquared((float *)&v156, (float *)&v183, (float *)&v185, (float *)&v152, (float *)&v178, (float *)&v168));
          float v52 = 0.0;
          if (v51 < v44)
          {
            float32x2_t v183 = *v143;
            v184[0] = *((float *)v36 + 103);
            float32x2_t v148 = vsub_f32(vadd_f32(vmul_n_f32(v48, 1.0 - v178.f32[0]), vmul_n_f32(v156, v178.f32[0])), vadd_f32(vmul_n_f32(v49, 1.0 - v168.f32[0]), vmul_n_f32(v185, v168.f32[0])));
            v149[0] = (float)((float)((float)(1.0 - v178.f32[0]) * v46) + (float)(v178.f32[0] * *(float *)&v157))
                    - (float)((float)((float)(1.0 - v168.f32[0]) * v50) + (float)(v168.f32[0] * v186));
            fixDir((float *)&v152, (float *)&v148, (float *)&v183);
            float32x2_t v176 = (float32x2_t)v152;
            float v177 = v153[0];
            float v52 = v44 - v51;
          }
          float v32 = v43;
          float v33 = 1.0;
LABEL_84:
          if (v52 != 0.0)
          {
            if (v52 <= v32) {
              float v139 = v52;
            }
            else {
              float v139 = v32;
            }
            float v140 = (float)(v139 * v177) * 0.5;
            float32x2_t v141 = vmul_f32(vmul_n_f32(v176, v139), (float32x2_t)0x3F0000003F000000);
            *(float32x2_t *)(v36 + 133) = vadd_f32(v141, *(float32x2_t *)(v36 + 133));
            *((float *)v36 + 135) = v140 + *((float *)v36 + 135);
            *(float32x2_t *)(v41 + 133) = vsub_f32(*(float32x2_t *)(v41 + 133), v141);
            *((float *)v41 + 135) = *((float *)v41 + 135) - v140;
          }
          goto LABEL_89;
        }
      }
      else if (v41[2] == 1)
      {
        physx::Cct::BoxController::getOBB((uint64_t)(v36 - 2), (uint64_t)v180);
        physx::Cct::CapsuleController::getCapsule((uint64_t)(v41 - 2), (uint64_t)&v171);
        float v53 = v172;
        float32x2_t v185 = vcvt_f32_f64(v171);
        float v186 = v53;
        float v54 = v174;
        float32x2_t v183 = vcvt_f32_f64(v173);
        v184[0] = v54;
        int v170 = 0;
        uint64_t v55 = *(void *)((char *)v180[2].f64 + 4);
        float v56 = *(float *)&v180[2].f64[1] * (float)(*(float *)&v180[2].f64[1] + *(float *)&v180[2].f64[1]);
        float v57 = *((float *)&v180[2].f64[1] + 1)
            * (float)(*((float *)&v180[2].f64[1] + 1) + *((float *)&v180[2].f64[1] + 1));
        float v58 = (float)(*(float *)&v55 + *(float *)&v55) * *(float *)&v180[2].f64[1];
        float v59 = (float)(*(float *)&v55 + *(float *)&v55) * *((float *)&v180[2].f64[1] + 1);
        float v60 = (float)(*(float *)&v55 + *(float *)&v55) * *(float *)&v181;
        float v61 = (float)(*(float *)&v180[2].f64[1] + *(float *)&v180[2].f64[1]) * *((float *)&v180[2].f64[1] + 1);
        float v62 = (float)(*(float *)&v180[2].f64[1] + *(float *)&v180[2].f64[1]) * *(float *)&v181;
        v156.f32[0] = (float)(v33 - v56) - v57;
        v156.f32[1] = v58
                    + (float)((float)(*((float *)&v180[2].f64[1] + 1) + *((float *)&v180[2].f64[1] + 1))
                            * *(float *)&v181);
        float v63 = v33 - (float)(*(float *)&v55 * (float)(*(float *)&v55 + *(float *)&v55));
        *(float *)&double v157 = v59 - v62;
        *((float *)&v157 + 1) = v58
                              - (float)((float)(*((float *)&v180[2].f64[1] + 1) + *((float *)&v180[2].f64[1] + 1))
                                      * *(float *)&v181);
        *(float *)&double v158 = v63 - v57;
        *((float *)&v158 + 1) = v61 + v60;
        float v159 = v59 + v62;
        float v160 = v61 - v60;
        float v161 = v63 - v56;
        float v64 = v180[1].f64[0];
        float32x2_t v148 = vcvt_f32_f64(v180[0]);
        v149[0] = v64;
        physx::Gu::distanceSegmentBoxSquared((float *)&v185, (float *)&v183, (float *)&v148, (float32x2_t *)&v180[1].f64[1], (float *)&v156, &v170, (float32x2_t *)&v152);
        float v66 = sqrtf(v65);
        float v67 = v175;
        float v52 = 0.0;
        if (v66 < v175)
        {
          float32x2_t v178 = *v143;
          float v179 = *((float *)v36 + 103);
          float32x2_t v166 = vadd_f32(v148, vmul_f32(vadd_f32(v185, v183), (float32x2_t)0xBF000000BF000000));
          float v167 = v149[0] + (float)((float)(v186 + v184[0]) * -0.5);
          fixDir((float *)&v168, (float *)&v166, (float *)&v178);
          float32x2_t v176 = v168;
          float v177 = v169;
          float v52 = v67 - v66;
        }
        goto LABEL_84;
      }
      physx::Cct::BoxController::getOBB((uint64_t)(v36 - 2), (uint64_t)&v171);
      physx::Cct::BoxController::getOBB((uint64_t)(v41 - 2), (uint64_t)&v156);
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      float v70 = v171.f64[0];
      float v71 = v171.f64[1];
      float v72 = v172;
      float v73 = *((float *)&v173.f64[1] + 1);
      float v74 = *(float *)&v174;
      float v75 = v73 * (float)(v73 + v73);
      float v76 = v74 * (float)(v74 + v74);
      float v77 = *((float *)&v174 + 1) * (float)(*((float *)&v174 + 1) + *((float *)&v174 + 1));
      float v78 = (float)(v73 + v73) * *(float *)&v174;
      float v79 = (float)(v73 + v73) * *((float *)&v174 + 1);
      float v80 = (float)(v73 + v73) * v175;
      float v81 = (float)(v74 + v74) * *((float *)&v174 + 1);
      float v82 = (float)(v74 + v74) * v175;
      float v83 = (float)(v33 - v76) - v77;
      float v84 = v78 + (float)((float)(*((float *)&v174 + 1) + *((float *)&v174 + 1)) * v175);
      unint64_t v152 = __PAIR64__(LODWORD(v84), LODWORD(v83));
      float v85 = v78 - (float)((float)(*((float *)&v174 + 1) + *((float *)&v174 + 1)) * v175);
      float v86 = v33 - v75;
      float v87 = (float)(v33 - v75) - v77;
      v153[0] = v79 - v82;
      v153[1] = v85;
      v153[2] = v87;
      v154[0] = v81 + v80;
      float v88 = v79 + v82;
      float v89 = v81 - v80;
      v154[1] = v88;
      v154[2] = v89;
      float v155 = v86 - v76;
      float v90 = *(double *)&v156;
      float v91 = v157;
      float v92 = v158;
      float v93 = v162;
      float v94 = v163;
      float v95 = v164;
      float v96 = v93 * (float)(v93 + v93);
      float v97 = v94 * (float)(v94 + v94);
      float v98 = v95 * (float)(v95 + v95);
      float v99 = (float)(v93 + v93) * v163;
      float v100 = (float)(v93 + v93) * v164;
      float v101 = (float)(v93 + v93) * v165;
      float v102 = (float)(v94 + v94) * v164;
      float v103 = (float)(v94 + v94) * v165;
      float v104 = (float)(v95 + v95) * v165;
      float v105 = (float)(v33 - v97) - v98;
      float v106 = v99 + v104;
      v148.f32[0] = v105;
      v148.f32[1] = v99 + v104;
      float v107 = v99 - v104;
      float v108 = (float)(v33 - v96) - v98;
      v149[0] = v100 - v103;
      v149[1] = v107;
      v149[2] = v108;
      v150[0] = v102 + v101;
      float v109 = v100 + v103;
      v150[1] = v109;
      v150[2] = v102 - v101;
      float v151 = (float)(v33 - v96) - v97;
      float v110 = (float)((float)(v84 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v83))
           + (float)((float)(v92 - v72) * v153[0]);
      float v111 = (float)((float)(v87 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v85))
           + (float)((float)(v92 - v72) * v154[0]);
      float v112 = (float)((float)(v89 * (float)(v91 - v71)) + (float)((float)(v90 - v70) * v88))
           + (float)((float)(v92 - v72) * v155);
      v178.f32[0] = v110;
      v178.f32[1] = v111;
      float v179 = v112;
      do
      {
        uint64_t v113 = 0;
        float v114 = &v153[3 * v69 - 2];
        float v115 = *v114;
        float v116 = v114[1];
        float v117 = v114[2];
        uint64_t v118 = v68;
        do
        {
          float v119 = (float)((float)(v116 * v148.f32[v113 + 1]) + (float)(v115 * v148.f32[v113]))
               + (float)(v117 * *(float *)((char *)&v148 + v113 * 4 + 8));
          *(float *)((char *)v185.f32 + v118) = v119;
          *(float *)((char *)v183.f32 + v118) = fabsf(v119) + 0.000001;
          v113 += 3;
          v118 += 4;
        }
        while (v113 != 9);
        ++v69;
        v68 += 12;
      }
      while (v69 != 3);
      uint64_t v120 = 0;
      float v121 = v159;
      float v122 = v160;
      double v123 = v184;
      float v124 = v161;
      while (1)
      {
        float v125 = (float)(*(float *)((char *)v173.f64 + v120 * 4)
                     + (float)((float)((float)(v122 * *(v123 - 1)) + (float)(v121 * *(v123 - 2))) + (float)(v124 * *v123)))
             - fabsf(v178.f32[v120]);
        if (v125 < 0.0) {
          break;
        }
        *(float *)((char *)v180[0].f64 + v120 * 4) = v125;
        ++v120;
        v123 += 3;
        if (v120 == 3)
        {
          uint64_t v126 = 0;
          float64_t v127 = v173.f64[0];
          float v128 = *(float *)&v173.f64[1];
          while (1)
          {
            float v129 = (float)(*(float *)((char *)&v159 + v126 * 4)
                         + (float)((float)((float)(*((float *)&v127 + 1) * v184[v126 + 1])
                                         + (float)(*(float *)&v127 * v183.f32[v126]))
                                 + (float)(v128 * v184[v126 + 4])))
                 - fabsf((float)((float)(v111 * *(float *)&v187[v126 * 4]) + (float)(v110 * v185.f32[v126]))+ (float)(v112 * *(float *)&v187[v126 * 4 + 12]));
            if (v129 < 0.0) {
              goto LABEL_68;
            }
            *(float *)((char *)&v180[0].f64[1] + v126 * 4 + 4) = v129;
            if (++v126 == 3)
            {
              int v130 = 0;
              float v52 = *(float *)v180[0].f64;
              for (uint64_t i = 1; i != 6; ++i)
              {
                float v132 = *((float *)v180[0].f64 + i);
                if (v132 < v52)
                {
                  int v130 = i;
                  float v52 = *((float *)v180[0].f64 + i);
                }
              }
              float v133 = v153;
              switch(v130)
              {
                case 0:
                  goto LABEL_73;
                case 1:
                  float v83 = v85;
                  float v84 = v87;
                  float v133 = v154;
                  goto LABEL_73;
                case 2:
                  float v83 = v88;
                  float v84 = v89;
                  float v133 = &v155;
                  goto LABEL_73;
                case 3:
                  float v83 = v105;
                  float v84 = v106;
                  float v133 = v149;
                  goto LABEL_73;
                case 4:
                  float v83 = v107;
                  float v84 = v108;
                  float v133 = v150;
                  goto LABEL_73;
                case 5:
                  float v83 = v109;
                  float v84 = v102 - v101;
                  float v133 = &v151;
LABEL_73:
                  float v132 = *v133;
                  break;
                default:
                  break;
              }
              float v134 = (float)((float)((float)(v71 - v91) * v84) + (float)(v83 * (float)(v70 - v90)))
                   + (float)(v132 * (float)(v72 - v92));
              BOOL v135 = v134 < 0.0;
              if (v134 >= 0.0) {
                float v136 = v83;
              }
              else {
                float v136 = -v83;
              }
              if (v135) {
                float v137 = -v84;
              }
              else {
                float v137 = v84;
              }
              if (v135) {
                float v138 = -v132;
              }
              else {
                float v138 = v132;
              }
              float32x2_t v176 = (float32x2_t)__PAIR64__(LODWORD(v137), LODWORD(v136));
              float v177 = v138;
              v180[0].f64[0] = *(float64_t *)v143;
              LODWORD(v180[0].f64[1]) = v36[103];
              fixDir((float *)&v185, (float *)&v176, (float *)v180);
              float32x2_t v176 = v185;
              float v177 = v186;
              goto LABEL_84;
            }
          }
        }
      }
LABEL_68:
      float v52 = 0.0;
      goto LABEL_84;
    }
  }
LABEL_90:
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  }
  if ((v147 & 0x8000000000000000) == 0 && (v147 & 0x7FFFFFFF00000000) != 0)
  {
    if (v146) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t PxCreateControllerManager(physx::shdfnd::Foundation *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  physx::shdfnd::Foundation::incRefCount(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::CharacterControllerManager>::getName() [T = "
  }
          "physx::Cct::CharacterControllerManager]";
  else {
    unsigned int v11 = "<allocation names disabled>";
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 272, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctCharacterControllerManager.cpp", 697);
  return physx::Cct::CharacterControllerManager::CharacterControllerManager(v12, (uint64_t)a1, v8);
}

void physx::Cct::Controller::setUpDirectionInternal(uint64_t a1, uint64_t a2)
{
  float v4 = *(float *)a2;
  if (*(float *)(a1 + 32) != *(float *)a2)
  {
    float v5 = *(float *)(a2 + 4);
LABEL_6:
    uint64_t v6 = 1065353216;
    int v7 = 0;
    physx::PxShortestRotation((float *)&v6, (float *)a2, (float *)&v8);
    *(_OWORD *)(a1 + 16) = v8;
    *(float *)(a1 + 32) = v4;
    *(float *)(a1 + 36) = v5;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 8);
    return;
  }
  float v5 = *(float *)(a2 + 4);
  if (*(float *)(a1 + 36) != v5 || *(float *)(a1 + 40) != *(float *)(a2 + 8)) {
    goto LABEL_6;
  }
}

uint64_t physx::Cct::Controller::getInternalState(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(*(void *)(result + 600) + 200))
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || (char v4 = physx::shdfnd::g_isLockingEnabled) != 0)
    {
      double result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 592));
      char v4 = *(unsigned char *)(*(void *)(v3 + 600) + 200) == 0;
    }
  }
  else
  {
    char v4 = 1;
  }
  *(void *)a2 = *(void *)(v3 + 520);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 528);
  uint64_t v5 = *(void *)(v3 + 296);
  *(void *)(a2 + 16) = *(void *)(v3 + 272);
  *(void *)(a2 + 24) = v5;
  int v6 = *(_DWORD *)(v3 + 468);
  *(unsigned char *)(a2 + 40) = (v6 & 0x10) != 0;
  *(unsigned char *)(a2 + 41) = (v6 & 0x20) != 0;
  LODWORD(v5) = *(_DWORD *)(v3 + 320);
  *(unsigned char *)(a2 + 42) = BYTE1(v6) & 1;
  int v7 = *(unsigned __int8 *)(v3 + 584);
  *(_DWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 36) = v7;
  if ((v4 & 1) == 0 && ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled))
  {
    long long v8 = *(pthread_mutex_t **)(v3 + 592);
    return pthread_mutex_unlock(v8);
  }
  return result;
}

uint64_t physx::Cct::Controller::setPos(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 512) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 496) = v3;
  uint64_t result = *(void *)(a1 + 488);
  if (result)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)result + 152))(&v8);
    float v5 = *(double *)(a1 + 512);
    float32x2_t v9 = vcvt_f32_f64(*(float64x2_t *)(a1 + 496));
    float v10 = v5;
    long long v8 = *(_OWORD *)(a1 + 16);
    return (*(uint64_t (**)(void, long long *, uint64_t, uint64_t))(**(void **)(a1 + 488) + 496))(*(void *)(a1 + 488), &v8, v6, v7);
  }
  return result;
}

uint64_t physx::Cct::BoxController::getType(physx::Cct::BoxController *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cct::BoxController::release(physx::Cct::BoxController *this)
{
  uint64_t v1 = (int32x2_t *)*((void *)this + 76);
  unsigned int v2 = (uint64_t *)(*(uint64_t (**)(void))(*((void *)this + 1) + 32))();
  return physx::Cct::CharacterControllerManager::releaseController(v1, v2);
}

uint64_t physx::Cct::BoxController::setPosition(uint64_t a1, long long *a2)
{
  return 1;
}

uint64_t physx::Cct::BoxController::getPosition(physx::Cct::BoxController *this)
{
  return (uint64_t)this + 504;
}

uint64_t physx::Cct::BoxController::getActor(physx::Cct::BoxController *this)
{
  return *((void *)this + 62);
}

uint64_t physx::Cct::BoxController::setStepOffset(uint64_t this, float a2)
{
  if (a2 >= 0.0) {
    *(float *)(this + 60) = a2;
  }
  return this;
}

float physx::Cct::BoxController::getStepOffset(physx::Cct::BoxController *this)
{
  return *((float *)this + 15);
}

uint64_t physx::Cct::BoxController::setNonWalkableMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t physx::Cct::BoxController::getNonWalkableMode(physx::Cct::BoxController *this)
{
  return *((unsigned int *)this + 5);
}

float physx::Cct::BoxController::getContactOffset(physx::Cct::BoxController *this)
{
  return *((float *)this + 14);
}

uint64_t physx::Cct::BoxController::setContactOffset(uint64_t this, float a2)
{
  if (a2 > 0.0) {
    *(float *)(this + 56) = a2;
  }
  return this;
}

float physx::Cct::BoxController::getUpDirection@<S0>(physx::Cct::BoxController *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 5);
  float result = *((float *)this + 12);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::Cct::BoxController::setUpDirection(uint64_t a1, uint64_t a2)
{
}

float physx::Cct::BoxController::getSlopeLimit(physx::Cct::BoxController *this)
{
  return *((float *)this + 13);
}

uint64_t physx::Cct::BoxController::setSlopeLimit(uint64_t this, float a2)
{
  if (a2 > 0.0) {
    *(float *)(this + 52) = a2;
  }
  return this;
}

uint64_t physx::Cct::BoxController::getScene(physx::Cct::BoxController *this)
{
  return *((void *)this + 69);
}

uint64_t physx::Cct::BoxController::getUserData(physx::Cct::BoxController *this)
{
  return *((void *)this + 13);
}

uint64_t physx::Cct::BoxController::setUserData(uint64_t this, void *a2)
{
  *(void *)(this + 104) = a2;
  return this;
}

uint64_t physx::Cct::BoxController::getState(uint64_t a1, uint64_t a2)
{
  return physx::Cct::Controller::getInternalState(a1 + 8, a2);
}

int8x8_t physx::Cct::BoxController::getStats(uint64_t a1, int8x8_t *a2)
{
  int8x8_t result = vext_s8(*(int8x8_t *)(a1 + 468), *(int8x8_t *)(a1 + 468), 6uLL);
  *a2 = result;
  return result;
}

float physx::Cct::BoxController::getHalfHeightInternal(physx::Cct::BoxController *this)
{
  return *((float *)this + 154);
}

float non-virtual thunk to'physx::Cct::BoxController::getHalfHeightInternal(physx::Cct::BoxController *this)
{
  return *((float *)this + 152);
}

uint64_t non-virtual thunk to'physx::Cct::BoxController::getPxController(physx::Cct::BoxController *this)
{
  return (uint64_t)this - 8;
}

uint64_t physx::Cct::CapsuleController::getType(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cct::CapsuleController::release(physx::Cct::CapsuleController *this)
{
  uint64_t v1 = (int32x2_t *)*((void *)this + 76);
  unsigned int v2 = (uint64_t *)(*(uint64_t (**)(void))(*((void *)this + 1) + 32))();
  return physx::Cct::CharacterControllerManager::releaseController(v1, v2);
}

uint64_t physx::Cct::CapsuleController::setPosition(uint64_t a1, long long *a2)
{
  return 1;
}

uint64_t physx::Cct::CapsuleController::getPosition(physx::Cct::CapsuleController *this)
{
  return (uint64_t)this + 504;
}

uint64_t physx::Cct::CapsuleController::getActor(physx::Cct::CapsuleController *this)
{
  return *((void *)this + 62);
}

uint64_t physx::Cct::CapsuleController::setStepOffset(uint64_t this, float a2)
{
  if (a2 >= 0.0) {
    *(float *)(this + 60) = a2;
  }
  return this;
}

float physx::Cct::CapsuleController::getStepOffset(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 15);
}

uint64_t physx::Cct::CapsuleController::setNonWalkableMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t physx::Cct::CapsuleController::getNonWalkableMode(physx::Cct::CapsuleController *this)
{
  return *((unsigned int *)this + 5);
}

float physx::Cct::CapsuleController::getContactOffset(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 14);
}

uint64_t physx::Cct::CapsuleController::setContactOffset(uint64_t this, float a2)
{
  if (a2 > 0.0) {
    *(float *)(this + 56) = a2;
  }
  return this;
}

float physx::Cct::CapsuleController::getUpDirection@<S0>(physx::Cct::CapsuleController *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *((void *)this + 5);
  float result = *((float *)this + 12);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::Cct::CapsuleController::setUpDirection(uint64_t a1, uint64_t a2)
{
}

float physx::Cct::CapsuleController::getSlopeLimit(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 13);
}

uint64_t physx::Cct::CapsuleController::setSlopeLimit(uint64_t this, float a2)
{
  if (a2 > 0.0) {
    *(float *)(this + 52) = a2;
  }
  return this;
}

uint64_t physx::Cct::CapsuleController::getScene(physx::Cct::CapsuleController *this)
{
  return *((void *)this + 69);
}

uint64_t physx::Cct::CapsuleController::getUserData(physx::Cct::CapsuleController *this)
{
  return *((void *)this + 13);
}

uint64_t physx::Cct::CapsuleController::setUserData(uint64_t this, void *a2)
{
  *(void *)(this + 104) = a2;
  return this;
}

uint64_t physx::Cct::CapsuleController::getState(uint64_t a1, uint64_t a2)
{
  return physx::Cct::Controller::getInternalState(a1 + 8, a2);
}

int8x8_t physx::Cct::CapsuleController::getStats(uint64_t a1, int8x8_t *a2)
{
  int8x8_t result = vext_s8(*(int8x8_t *)(a1 + 468), *(int8x8_t *)(a1 + 468), 6uLL);
  *a2 = result;
  return result;
}

float physx::Cct::CapsuleController::getRadius(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 154);
}

float physx::Cct::CapsuleController::getHeight(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 155);
}

float physx::Cct::CapsuleController::getHalfHeightInternal(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 154) + (float)(*((float *)this + 155) * 0.5);
}

float non-virtual thunk to'physx::Cct::CapsuleController::getHalfHeightInternal(physx::Cct::CapsuleController *this)
{
  return *((float *)this + 152) + (float)(*((float *)this + 153) * 0.5);
}

uint64_t non-virtual thunk to'physx::Cct::CapsuleController::getPxController(physx::Cct::CapsuleController *this)
{
  return (uint64_t)this - 8;
}

BOOL shouldApplyRecoveryModule(unsigned __int16 *a1)
{
  int v1 = a1[4];
  if (v1 != 5) {
    return v1 == 6;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 432))(&var1);
  return var1 & 1;
}

uint64_t SweepBoxUserBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int v38 = 3;
  uint64_t v39 = *(void *)(a2 + 40);
  int v40 = *(_DWORD *)(a2 + 48);
  float64x2_t v13 = *(float64x2_t *)(a3 + 20);
  float32x2_t v36 = vcvt_f32_f64(vsubq_f64(*a4, v13));
  double v14 = *(double *)(a3 + 36);
  float v15 = a4[1].f64[0] - v14;
  float v37 = v15;
  float32x4_t v35 = *(float32x4_t *)(a1 + 284);
  int v32 = 3;
  uint64_t v33 = *(void *)(a3 + 68);
  int v34 = *(_DWORD *)(a3 + 76);
  float32x2_t v30 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v13));
  float v16 = *(double *)(a3 + 60) - v14;
  float v31 = v16;
  long long v17 = *(_OWORD *)(a3 + 80);
  long long v29 = v17;
  v23[0] = 0;
  v23[1] = 0;
  int v24 = -1;
  __int16 v25 = 0;
  long long v27 = 0uLL;
  float32x2_t v26 = 0;
  float v28 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v18 = 1283;
  }
  else {
    __int16 v18 = 1027;
  }
  __int16 v22 = v18;
  int v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v38, &v35, &v32, (uint64_t)&v29, (uint64_t)v23, &v22, *(double *)&v17, 0.0, v14, a10, a11);
  uint64_t result = 0;
  if (v19)
  {
    float v21 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v21;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepBoxUserCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  int v37 = 3;
  uint64_t v38 = *(void *)(a2 + 40);
  int v39 = *(_DWORD *)(a2 + 48);
  float64x2_t v10 = *(float64x2_t *)(a3 + 20);
  float32x2_t v35 = vcvt_f32_f64(vsubq_f64(*a4, v10));
  double v11 = *(double *)(a3 + 36);
  float v12 = a4[1].f64[0] - v11;
  float v36 = v12;
  float32x4_t v34 = *(float32x4_t *)(a1 + 284);
  v32[0] = 2;
  float v33 = 0.0;
  float32x2_t v42 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v10));
  float v13 = *(double *)(a3 + 60) - v11;
  float v43 = v13;
  float32x2_t v40 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 68), v10));
  float v14 = *(double *)(a3 + 84) - v11;
  float v41 = v14;
  v32[1] = *(_DWORD *)(a3 + 92);
  physx::PxTransformFromSegment(&v42, &v40, &v33, (uint64_t)&v24);
  long long v29 = v24;
  HIDWORD(v18) = HIDWORD(v25);
  uint64_t v30 = v25;
  __int32 v31 = v26.i32[0];
  if (v33 == 0.0) {
    float v33 = 0.00000011921;
  }
  long long v24 = 0uLL;
  LODWORD(v25) = -1;
  WORD2(v25) = 0;
  long long v27 = 0uLL;
  float32x2_t v26 = 0;
  float v28 = 3.4028e38;
  LODWORD(v18) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v19 = 1283;
  }
  else {
    __int16 v19 = 1027;
  }
  __int16 v23 = v19;
  int v20 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v37, &v34, v32, (uint64_t)&v29, (uint64_t)&v24, &v23, v18, 0.0, v15, v16, v17);
  uint64_t result = 0;
  if (v20)
  {
    float v22 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v22;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepBoxMesh(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, uint64_t a6, double a7, double a8, double a9, __n128 a10, double a11, float32x4_t a12, double a13, __n128 a14)
{
  uint64_t v14 = *(unsigned int *)(a3 + 44);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = *(void *)(a1 + 16) + 36 * *(unsigned int *)(a3 + 48);
  unsigned int v16 = *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116);
  if (v16 >= v14) {
    unsigned int v16 = 0;
  }
  int v23 = 3;
  uint64_t v24 = *(void *)(a2 + 40);
  int v25 = *(_DWORD *)(a2 + 48);
  double v17 = a4[1].f64[0] - *(double *)(a3 + 36);
  *(float *)&double v17 = v17;
  long long v20 = *(_OWORD *)(a1 + 284);
  float64x2_t v18 = *(float64x2_t *)(a3 + 20);
  double v21 = COERCE_DOUBLE(vcvt_f32_f64(vsubq_f64(*a4, v18)));
  int v22 = LODWORD(v17);
  return sweepVolumeVsMesh(a1, a3, a6, a5, &v23, (int32x2_t *)&v20, v14, v15, v17, v21, v18.f64[0], a10, a11, a12, a13, a14, v16);
}

uint64_t SweepBoxBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int v35 = 3;
  uint64_t v36 = *(void *)(a2 + 40);
  int v37 = *(_DWORD *)(a2 + 48);
  float32x2_t v33 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v13 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v34 = v13;
  float32x4_t v32 = *(float32x4_t *)(a1 + 284);
  int v29 = 3;
  uint64_t v30 = *(void *)(a3 + 56);
  int v31 = *(_DWORD *)(a3 + 64);
  uint64_t v27 = *(void *)(a3 + 44);
  int v28 = *(_DWORD *)(a3 + 52);
  long long v14 = *(_OWORD *)(a3 + 68);
  long long v26 = v14;
  v20[0] = 0;
  v20[1] = 0;
  int v21 = -1;
  __int16 v22 = 0;
  long long v24 = 0uLL;
  float32x2_t v23 = 0;
  float v25 = 3.4028e38;
  LODWORD(v14) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v15 = 1283;
  }
  else {
    __int16 v15 = 1027;
  }
  __int16 v19 = v15;
  int v16 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v35, &v32, &v29, (uint64_t)&v26, (uint64_t)v20, &v19, *(double *)&v14, 0.0, a9, a10, a11);
  uint64_t result = 0;
  if (v16)
  {
    float v18 = v25;
    if (v25 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v24 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v24);
      *(float *)(a6 + 36) = v18;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v23));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v24;
      return 1;
    }
  }
  return result;
}

double SweepBoxSphere(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  int v31 = 3;
  uint64_t v32 = *(void *)(a2 + 40);
  int v33 = *(_DWORD *)(a2 + 48);
  float32x2_t v29 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v13 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v30 = v13;
  float32x4_t v28 = *(float32x4_t *)(a1 + 284);
  v27[0] = 0;
  int v14 = *(_DWORD *)(a3 + 52);
  v27[1] = *(_DWORD *)(a3 + 56);
  uint64_t v25 = *(void *)(a3 + 44);
  int v26 = v14;
  HIDWORD(v15) = 0;
  long long v24 = xmmword_23435FBB0;
  v19[0] = 0;
  v19[1] = 0;
  int v20 = -1;
  __int16 v21 = 0;
  *(_OWORD *)float32x2_t v23 = 0uLL;
  float32x2_t v22 = 0;
  *(_DWORD *)&v23[16] = 2139095039;
  LODWORD(v15) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v16 = 1283;
  }
  else {
    __int16 v16 = 1027;
  }
  __int16 v18 = v16;
  if (physx::PxGeometryQuery::sweep(a5, (uint64_t)&v31, &v28, v27, (uint64_t)&v24, (uint64_t)v19, &v18, v15, 0.0, a9, a10, a11))
  {
    *(_OWORD *)(a6 + 24) = *(_OWORD *)&v23[4];
    *(void *)(a6 + 40) = -1;
    *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v22));
    double result = *(double *)(a3 + 36) + *(float *)v23;
    *(double *)(a6 + 16) = result;
  }
  return result;
}

uint64_t SweepBoxCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  int v33 = 3;
  uint64_t v34 = *(void *)(a2 + 40);
  int v35 = *(_DWORD *)(a2 + 48);
  float32x2_t v31 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v10 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v32 = v10;
  float32x4_t v30 = *(float32x4_t *)(a1 + 284);
  v28[0] = 2;
  float v29 = 0.0;
  v28[1] = *(_DWORD *)(a3 + 68);
  physx::PxTransformFromSegment((float32x2_t *)(a3 + 44), (float32x2_t *)(a3 + 56), &v29, (uint64_t)&v20);
  long long v25 = v20;
  HIDWORD(v14) = HIDWORD(v21);
  uint64_t v26 = v21;
  __int32 v27 = v22.i32[0];
  if (v29 == 0.0) {
    float v29 = 0.00000011921;
  }
  long long v20 = 0uLL;
  LODWORD(v21) = -1;
  WORD2(v21) = 0;
  long long v23 = 0uLL;
  float32x2_t v22 = 0;
  float v24 = 3.4028e38;
  LODWORD(v14) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v15 = 1283;
  }
  else {
    __int16 v15 = 1027;
  }
  __int16 v19 = v15;
  int v16 = physx::PxGeometryQuery::sweep(a5, (uint64_t)&v33, &v30, v28, (uint64_t)&v25, (uint64_t)&v20, &v19, v14, 0.0, v11, v12, v13);
  uint64_t result = 0;
  if (v16)
  {
    float v18 = v24;
    if (v24 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v23 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v23);
      *(float *)(a6 + 36) = v18;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v22));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v23;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleUserBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  LODWORD(v39[0]) = 2;
  float v13 = *(float *)(a2 + 44) * 0.5;
  v39[1] = *(float *)(a2 + 40);
  v39[2] = v13;
  float64x2_t v14 = *(float64x2_t *)(a3 + 20);
  float32x2_t v37 = vcvt_f32_f64(vsubq_f64(*a4, v14));
  double v15 = *(double *)(a3 + 36);
  float v16 = a4[1].f64[0] - v15;
  float v38 = v16;
  float32x4_t v36 = *(float32x4_t *)(a1 + 284);
  int v33 = 3;
  uint64_t v34 = *(void *)(a3 + 68);
  int v35 = *(_DWORD *)(a3 + 76);
  float32x2_t v31 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v14));
  float v17 = *(double *)(a3 + 60) - v15;
  float v32 = v17;
  long long v18 = *(_OWORD *)(a3 + 80);
  long long v30 = v18;
  v24[0] = 0;
  v24[1] = 0;
  int v25 = -1;
  __int16 v26 = 0;
  long long v28 = 0uLL;
  float32x2_t v27 = 0;
  float v29 = 3.4028e38;
  LODWORD(v18) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v19 = 1283;
  }
  else {
    __int16 v19 = 1027;
  }
  __int16 v23 = v19;
  int v20 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v39, &v36, &v33, (uint64_t)&v30, (uint64_t)v24, &v23, *(double *)&v18, 0.0, v15, a10, a11);
  uint64_t result = 0;
  if (v20)
  {
    float v22 = v29;
    if (v29 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v28 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v28);
      *(float *)(a6 + 36) = v22;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v27));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v28;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleUserCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  LODWORD(v38[0]) = 2;
  float v10 = *(float *)(a2 + 44) * 0.5;
  v38[1] = *(float *)(a2 + 40);
  v38[2] = v10;
  float64x2_t v11 = *(float64x2_t *)(a3 + 20);
  float32x2_t v36 = vcvt_f32_f64(vsubq_f64(*a4, v11));
  double v12 = *(double *)(a3 + 36);
  float v13 = a4[1].f64[0] - v12;
  float v37 = v13;
  float32x4_t v35 = *(float32x4_t *)(a1 + 284);
  v33[0] = 2;
  float v34 = 0.0;
  float32x2_t v41 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 44), v11));
  float v14 = *(double *)(a3 + 60) - v12;
  float v42 = v14;
  float32x2_t v39 = vcvt_f32_f64(vsubq_f64(*(float64x2_t *)(a3 + 68), v11));
  float v15 = *(double *)(a3 + 84) - v12;
  float v40 = v15;
  v33[1] = *(_DWORD *)(a3 + 92);
  physx::PxTransformFromSegment(&v41, &v39, &v34, (uint64_t)&v25);
  long long v30 = v25;
  HIDWORD(v19) = HIDWORD(v26);
  uint64_t v31 = v26;
  __int32 v32 = v27.i32[0];
  if (v34 == 0.0) {
    float v34 = 0.00000011921;
  }
  long long v25 = 0uLL;
  LODWORD(v26) = -1;
  WORD2(v26) = 0;
  long long v28 = 0uLL;
  float32x2_t v27 = 0;
  float v29 = 3.4028e38;
  LODWORD(v19) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v20 = 1283;
  }
  else {
    __int16 v20 = 1027;
  }
  __int16 v24 = v20;
  int v21 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v38, &v35, v33, (uint64_t)&v30, (uint64_t)&v25, &v24, v19, 0.0, v16, v17, v18);
  uint64_t result = 0;
  if (v21)
  {
    float v23 = v29;
    if (v29 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v28 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v28);
      *(float *)(a6 + 36) = v23;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v27));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v28;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleMesh(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, uint64_t a6, double a7, double a8, double a9, __n128 a10, double a11, float32x4_t a12, double a13, __n128 a14)
{
  uint64_t v14 = *(unsigned int *)(a3 + 44);
  if (!v14) {
    return 0;
  }
  int v15 = *(_DWORD *)(a2 + 40);
  LODWORD(a9) = 0.5;
  float v16 = *(float *)(a2 + 44) * 0.5;
  uint64_t v17 = *(void *)(a1 + 16) + 36 * *(unsigned int *)(a3 + 48);
  unsigned int v18 = *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116);
  if (v18 >= v14) {
    unsigned int v18 = 0;
  }
  v25[0] = 2;
  v25[1] = v15;
  *(float *)&v25[2] = v16;
  float32x2_t v23 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  double v19 = *(double *)(a3 + 36);
  float v20 = a4[1].f64[0] - v19;
  float v24 = v20;
  return sweepVolumeVsMesh(a1, a3, a6, a5, v25, (int32x2_t *)&v22, v14, v17, *(double *)(a1 + 284), v19, a9, a10, a11, a12, a13, a14, v18);
}

uint64_t SweepCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13 = *(float *)(a2 + 40);
  LODWORD(a9) = 0.5;
  float v14 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v37[0]) = 2;
  v37[1] = v13;
  v37[2] = v14;
  float32x2_t v35 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v15 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v36 = v15;
  float32x4_t v34 = *(float32x4_t *)(a1 + 284);
  int v31 = 3;
  uint64_t v32 = *(void *)(a3 + 56);
  int v33 = *(_DWORD *)(a3 + 64);
  uint64_t v29 = *(void *)(a3 + 44);
  int v30 = *(_DWORD *)(a3 + 52);
  long long v16 = *(_OWORD *)(a3 + 68);
  long long v28 = v16;
  v22[0] = 0;
  v22[1] = 0;
  int v23 = -1;
  __int16 v24 = 0;
  long long v26 = 0uLL;
  float32x2_t v25 = 0;
  float v27 = 3.4028e38;
  LODWORD(v16) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v17 = 1283;
  }
  else {
    __int16 v17 = 1027;
  }
  __int16 v21 = v17;
  int v18 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v37, &v34, &v31, (uint64_t)&v28, (uint64_t)v22, &v21, *(double *)&v16, 0.0, a9, a10, a11);
  uint64_t result = 0;
  if (v18)
  {
    float v20 = v27;
    if (v27 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v26 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v26);
      *(float *)(a6 + 36) = v20;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v25));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v26;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleSphere(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v13 = *(float *)(a2 + 40);
  LODWORD(a9) = 0.5;
  float v14 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v36[0]) = 2;
  v36[1] = v13;
  v36[2] = v14;
  float32x2_t v34 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v15 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v35 = v15;
  float32x4_t v33 = *(float32x4_t *)(a1 + 284);
  v32[0] = 0;
  int v16 = *(_DWORD *)(a3 + 52);
  v32[1] = *(_DWORD *)(a3 + 56);
  uint64_t v30 = *(void *)(a3 + 44);
  int v31 = v16;
  HIDWORD(v17) = 0;
  long long v29 = xmmword_23435FBB0;
  v23[0] = 0;
  v23[1] = 0;
  int v24 = -1;
  __int16 v25 = 0;
  long long v27 = 0uLL;
  float32x2_t v26 = 0;
  float v28 = 3.4028e38;
  LODWORD(v17) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v18 = 1283;
  }
  else {
    __int16 v18 = 1027;
  }
  __int16 v22 = v18;
  int v19 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v36, &v33, v32, (uint64_t)&v29, (uint64_t)v23, &v22, v17, 0.0, a9, a10, a11);
  uint64_t result = 0;
  if (v19)
  {
    float v21 = v28;
    if (v28 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v27 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v27);
      *(float *)(a6 + 36) = v21;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v26));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v27;
      return 1;
    }
  }
  return result;
}

uint64_t SweepCapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  float v10 = *(float *)(a2 + 40);
  float v11 = *(float *)(a2 + 44) * 0.5;
  LODWORD(v35[0]) = 2;
  v35[1] = v10;
  v35[2] = v11;
  float32x2_t v33 = vcvt_f32_f64(vsubq_f64(*a4, *(float64x2_t *)(a3 + 20)));
  float v12 = a4[1].f64[0] - *(double *)(a3 + 36);
  float v34 = v12;
  float32x4_t v32 = *(float32x4_t *)(a1 + 284);
  v30[0] = 2;
  float v31 = 0.0;
  v30[1] = *(_DWORD *)(a3 + 68);
  physx::PxTransformFromSegment((float32x2_t *)(a3 + 44), (float32x2_t *)(a3 + 56), &v31, (uint64_t)&v22);
  long long v27 = v22;
  HIDWORD(v16) = HIDWORD(v23);
  uint64_t v28 = v23;
  __int32 v29 = v24.i32[0];
  if (v31 == 0.0) {
    float v31 = 0.00000011921;
  }
  long long v22 = 0uLL;
  LODWORD(v23) = -1;
  WORD2(v23) = 0;
  long long v25 = 0uLL;
  float32x2_t v24 = 0;
  float v26 = 3.4028e38;
  LODWORD(v16) = *(_DWORD *)(a6 + 36);
  if (*(unsigned char *)(a1 + 339)) {
    __int16 v17 = 1283;
  }
  else {
    __int16 v17 = 1027;
  }
  __int16 v21 = v17;
  int v18 = physx::PxGeometryQuery::sweep(a5, (uint64_t)v35, &v32, v30, (uint64_t)&v27, (uint64_t)&v22, &v21, v16, 0.0, v13, v14, v15);
  uint64_t result = 0;
  if (v18)
  {
    float v20 = v26;
    if (v26 >= *(float *)(a6 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a6 + 24) = *(void *)((char *)&v25 + 4);
      *(_DWORD *)(a6 + 32) = HIDWORD(v25);
      *(float *)(a6 + 36) = v20;
      *(void *)(a6 + 40) = -1;
      *(float64x2_t *)a6 = vaddq_f64(*(float64x2_t *)(a3 + 20), vcvtq_f64_f32(v24));
      *(double *)(a6 + 16) = *(double *)(a3 + 36) + *(float *)&v25;
      return 1;
    }
  }
  return result;
}

uint64_t sweepVolumeVsMesh(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, int *a5, int32x2_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, __n128 a12, double a13, float32x4_t a14, double a15, __n128 a16, unsigned int a17)
{
  v26[0] = 0;
  v26[1] = 0;
  unsigned int v27 = -1;
  __int16 v28 = 0;
  long long v30 = 0uLL;
  float32x2_t v29 = 0;
  float v31 = 3.4028e38;
  LODWORD(a9) = *(_DWORD *)(a3 + 36);
  int v20 = physx::PxMeshQuery::sweep(a4, a5, a6, a7, a8, (uint64_t)v26, &v25, &a17, a9, 0.0, a11, a12, a13, a14, a15, a16, 0);
  uint64_t result = 0;
  if (v20)
  {
    float v22 = v31;
    if (v31 >= *(float *)(a3 + 36))
    {
      return 0;
    }
    else
    {
      *(void *)(a3 + 24) = *(void *)((char *)&v30 + 4);
      *(_DWORD *)(a3 + 32) = HIDWORD(v30);
      *(float *)(a3 + 36) = v22;
      *(float64x2_t *)a3 = vaddq_f64(*(float64x2_t *)(a2 + 20), vcvtq_f64_f32(v29));
      *(double *)(a3 + 16) = *(double *)(a2 + 36) + *(float *)&v30;
      uint64_t v23 = v27;
      *(_DWORD *)(a1 + 4 * *(unsigned int *)(a1 + 112) + 116) = v27;
      uint64_t v24 = *(unsigned int *)(a2 + 48);
      *(_DWORD *)(a3 + 40) = v24 + v23;
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v24 + 4 * v23);
      return 1;
    }
  }
  return result;
}

uint64_t ControllerFilter::preFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 312))(&v17, a3);
  if ((v17 & 4) != 0) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v10 + 52))
  {
    unint64_t v11 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    uint64_t v14 = *(unsigned int *)(*(void *)(v10 + 24)
                          + 4 * ((*(_DWORD *)(v10 + 36) - 1) & ((v13 >> 31) ^ v13)));
    if (v14 != -1)
    {
      while (*(void *)(*(void *)(v10 + 8) + 8 * v14) != a3)
      {
        uint64_t v14 = *(unsigned int *)(*(void *)(v10 + 16) + 4 * v14);
        if (v14 == -1) {
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
LABEL_6:
  int8x16_t v15 = *(uint64_t (****)(void, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v15) {
    return (**v15)(v15, a2, a3, a4, a5);
  }
  else {
    return 2;
  }
}

uint64_t ControllerFilter::postFilter(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ControllerFilter::~ControllerFilter(ControllerFilter *this)
{
}

uint64_t tessellateTriangle(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int8x16_t *a6, _WORD *a7, float a8)
{
  v17[0] = 0;
  v17[1] = a3;
  float32x4_t v10 = *(float32x4_t *)a6;
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
  float32x4_t v12 = (float32x4_t)vextq_s8(*a6, (int8x16_t)v11, 0xCuLL);
  float32x2_t v13 = *(float32x2_t *)a6[1].i8;
  float32x4_t v14 = vsubq_f32(*(float32x4_t *)a6, v12);
  v12.i32[1] = v13.i32[0];
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  v12.i32[2] = v13.i32[1];
  float32x4_t v15 = vaddq_f32(v10, v12);
  v15.i32[3] = v14.i32[3];
  *(float32x2_t *)v10.f32 = vsub_f32(v13, (float32x2_t)vext_s8(*(int8x8_t *)v10.f32, *(int8x8_t *)v11.f32, 4uLL));
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  float32x4_t v20 = vmulq_f32(v15, v11);
  float32x2_t v21 = vmul_f32(*(float32x2_t *)v10.f32, (float32x2_t)0x3F0000003F000000);
  float v22 = a8;
  __int16 v23 = 0;
  uint64_t result = tessellateTriangleRecursive((uint64_t)v17, a2, (float32x4_t *)(a2 + 12), (float32x4_t *)(a2 + 24));
  *a1 += v17[0];
  *a7 += v23;
  return result;
}

uint64_t tessellateTriangleRecursive(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  ++*(_WORD *)(a1 + 52);
  uint64_t result = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 24), (float32x4_t *)(a1 + 36), (float32x4_t *)a2, a3, a4);
  if (result)
  {
    float v9 = *(float *)a2;
    float32x2_t v10 = *(float32x2_t *)a3->f32;
    *(void *)&long long v11 = *(void *)(a2 + 4);
    LODWORD(v12) = HIDWORD(a3->i64[0]);
    float v13 = a3->f32[2];
    float v14 = *((float *)&v11 + 1);
    float v15 = a4->f32[2];
    float v16 = *(float *)(a1 + 48);
    BOOL v17 = (float)((float)((float)((float)(*(float *)&v11 - v12) * (float)(*(float *)&v11 - v12))
                        + (float)((float)(*(float *)a2 - COERCE_FLOAT(a3->i64[0]))
                                * (float)(*(float *)a2 - COERCE_FLOAT(a3->i64[0]))))
                + (float)((float)(v14 - v13) * (float)(v14 - v13))) > v16;
    float32x2_t v18 = *(float32x2_t *)a2;
    float32x2_t v44 = vmul_f32(vadd_f32(*(float32x2_t *)a2, *(float32x2_t *)a3->f32), (float32x2_t)0x3F0000003F000000);
    float v45 = (float)(*((float *)&v11 + 1) + v13) * 0.5;
    float32x2_t v19 = *(float32x2_t *)a4->f32;
    LODWORD(v20) = vsub_f32(v10, *(float32x2_t *)a4->f32).u32[0];
    LODWORD(v21) = HIDWORD(a4->i64[0]);
    BOOL v22 = (float)((float)((float)((float)(v21 - *(float *)&v11) * (float)(v21 - *(float *)&v11))
                        + (float)((float)(COERCE_FLOAT(a4->i64[0]) - v9) * (float)(COERCE_FLOAT(a4->i64[0]) - v9)))
                + (float)((float)(v15 - v14) * (float)(v15 - v14))) > v16;
    float32x2_t v42 = vmul_f32(vadd_f32(v10, *(float32x2_t *)a4->f32), (float32x2_t)0x3F0000003F000000);
    float v43 = (float)(v13 + v15) * 0.5;
    float32x2_t v40 = vmul_f32(vadd_f32(v18, v19), (float32x2_t)0x3F0000003F000000);
    float v41 = (float)(*((float *)&v11 + 1) + v15) * 0.5;
    switch(v17 | (2
                  * ((float)(vmlas_n_f32((float)(v12 - v21) * (float)(v12 - v21), v20, v20)
                           + (float)((float)(v13 - v15) * (float)(v13 - v15))) > v16)) | (4 * v22))
    {
      case 1:
        tessellateTriangleRecursive(a1, a2, &v44, a4);
        float v35 = &v44;
        goto LABEL_18;
      case 2:
        tessellateTriangleRecursive(a1, a2, a3, &v42);
        float32x2_t v33 = &v42;
        uint64_t v34 = a1;
        float v35 = (float32x2_t *)a2;
        goto LABEL_20;
      case 3:
        tessellateTriangleRecursive(a1, a2, &v44, &v42);
        tessellateTriangleRecursive(a1, a2, &v42, a4);
        float v35 = &v44;
        float v36 = &v42;
        uint64_t v34 = a1;
        float32x2_t v33 = (float32x2_t *)a3;
        goto LABEL_21;
      case 4:
        tessellateTriangleRecursive(a1, a2, a3, &v40);
        float v36 = &v40;
        uint64_t v34 = a1;
        float v35 = (float32x2_t *)a3;
        float32x2_t v33 = (float32x2_t *)a4;
        goto LABEL_21;
      case 5:
        tessellateTriangleRecursive(a1, a2, &v44, &v40);
        tessellateTriangleRecursive(a1, &v44, a3, &v40);
        float v35 = &v40;
LABEL_18:
        uint64_t v34 = a1;
        float32x2_t v33 = (float32x2_t *)a3;
        goto LABEL_20;
      case 6:
        tessellateTriangleRecursive(a1, a2, a3, &v42);
        tessellateTriangleRecursive(a1, a2, &v42, &v40);
        float v35 = &v40;
        float32x2_t v33 = &v42;
        uint64_t v34 = a1;
LABEL_20:
        float v36 = (float32x2_t *)a4;
        goto LABEL_21;
      case 7:
        tessellateTriangleRecursive(a1, a2, &v44, &v40);
        tessellateTriangleRecursive(a1, &v44, a3, &v42);
        tessellateTriangleRecursive(a1, &v40, &v42, a4);
        float v35 = &v44;
        float32x2_t v33 = &v42;
        float v36 = &v40;
        uint64_t v34 = a1;
LABEL_21:
        uint64_t result = tessellateTriangleRecursive(v34, v35, v33, v36);
        break;
      default:
        uint64_t v23 = *(void *)(a1 + 8);
        unsigned int v24 = *(_DWORD *)(v23 + 8);
        unsigned int v25 = *(_DWORD *)(v23 + 12) & 0x7FFFFFFF;
        unsigned int v26 = v24 + 1;
        unsigned int v27 = v24 + 2;
        if (v24 + 2 > v25)
        {
          unsigned int v28 = 2 * *(_DWORD *)(v23 + 12);
          if (!v25) {
            unsigned int v28 = 2;
          }
          if (v27 <= v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = v27;
          }
          uint64_t v38 = v11;
          float32x2_t v39 = v10;
          __int32 v37 = v19.i32[0];
          physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate(*(uint64_t **)(a1 + 8), v29);
          v19.i32[0] = v37;
          *(void *)&long long v11 = v38;
          float32x2_t v10 = v39;
          unsigned int v24 = *(_DWORD *)(v23 + 8);
        }
        uint64_t v30 = *(void *)v23 + 36 * v24;
        *(_DWORD *)(v23 + 8) = v26;
        *((float32x2_t *)&v11 + 1) = v10;
        *(float *)uint64_t v30 = v9;
        *(_OWORD *)(v30 + 4) = v11;
        *(float *)(v30 + 20) = v13;
        *(_DWORD *)(v30 + 24) = v19.i32[0];
        *(float *)(v30 + 28) = v21;
        *(float *)(v30 + 32) = v15;
        uint64_t result = *(void *)(a1 + 16);
        float v31 = (_DWORD *)(a1 + 4);
        uint64_t v32 = *(unsigned int *)(result + 8);
        if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) <= v32)
        {
          uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result, v31);
        }
        else
        {
          *(_DWORD *)(*(void *)result + 4 * v32) = *v31;
          ++*(_DWORD *)(result + 8);
        }
        ++*(_DWORD *)a1;
        break;
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 36 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTriangle>::getName() [T = physx::PxTriangle]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 36 * v9;
    uint64_t v12 = *a1;
    unint64_t v13 = result;
    do
    {
      *(void *)unint64_t v13 = *(void *)v12;
      *(void *)(v13 + 8) = *(void *)(v12 + 8);
      *(void *)(v13 + 16) = *(void *)(v12 + 16);
      *(void *)(v13 + 24) = *(void *)(v12 + 24);
      *(_DWORD *)(v13 + 32) = *(_DWORD *)(v12 + 32);
      v13 += 36;
      v12 += 36;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t createInvisibleWalls(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  float v4 = a1[11];
  if (v4 == 0.0) {
    return 0;
  }
  float v8 = *a2;
  float v9 = a2[1];
  float v11 = a2[2];
  float v10 = a2[3];
  float v12 = v10 - *a2;
  float v14 = a2[4];
  float v13 = a2[5];
  float v15 = a2[7];
  float v16 = a2[6] - *a2;
  float v17 = a2[8];
  float v18 = (float)((float)(v14 - v9) * (float)(v17 - v11)) - (float)((float)(v13 - v11) * (float)(v15 - v9));
  float v19 = (float)((float)(v13 - v11) * v16) - (float)(v12 * (float)(v17 - v11));
  float v20 = (float)(v12 * (float)(v15 - v9)) - (float)((float)(v14 - v9) * v16);
  float v21 = sqrtf((float)((float)(v19 * v19) + (float)(v18 * v18)) + (float)(v20 * v20));
  if (v21 > 0.0)
  {
    float v22 = 1.0 / v21;
    float v18 = v18 * v22;
    float v19 = v19 * v22;
    float v20 = v20 * v22;
  }
  float v23 = a1[5];
  float v24 = a1[6];
  float v25 = (float)(v19 * v24) + (float)(v18 * v23);
  float v26 = a1[7];
  float v27 = v25 + (float)(v20 * v26);
  if (v27 < 0.0 || v27 >= a1[8]) {
    return 0;
  }
  float v30 = v4 * v23;
  float v31 = v4 * v24;
  float v32 = v4 * v26;
  float v103 = v8 + (float)(v4 * v23);
  float v104 = v11 + (float)(v4 * v26);
  float v105 = v9 + (float)(v4 * v24);
  int v33 = *(_DWORD *)(a3 + 8);
  unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  unsigned int v35 = v33 + 1;
  unsigned int v36 = v33 + 2;
  float v100 = a2[6];
  float v97 = a2[8];
  float v98 = a2[7];
  if (v33 + 2 <= v34)
  {
    unsigned int v40 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    if (v34) {
      unsigned int v37 = 2 * *(_DWORD *)(a3 + 12);
    }
    else {
      unsigned int v37 = 2;
    }
    if (v36 <= v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = v36;
    }
    float v96 = v4 * v24;
    float v39 = v4 * v26;
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v38);
    float v32 = v39;
    float v31 = v96;
    unsigned int v40 = *(_DWORD *)(a3 + 8);
    unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  float v41 = v10 + v30;
  float v42 = v13 + v32;
  float v43 = v14 + v31;
  uint64_t v44 = *(void *)a3;
  *(_DWORD *)(a3 + 8) = v35;
  float v45 = (float *)(v44 + 36 * v40);
  *float v45 = v8;
  v45[1] = v9;
  v45[2] = v11;
  v45[3] = v10;
  v45[4] = v14;
  v45[5] = v13;
  v45[6] = v103;
  v45[7] = v105;
  v45[8] = v104;
  uint64_t v46 = *(void *)(a2 + 3);
  int v47 = *((_DWORD *)a2 + 5);
  unsigned int v48 = v33 + 3;
  if (v33 + 3 > v34)
  {
    if (v34) {
      unsigned int v49 = 2 * v34;
    }
    else {
      unsigned int v49 = 2;
    }
    if (v48 <= v49) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = v48;
    }
    float v51 = v13 + v32;
    float v52 = v41;
    float v53 = v43;
    float v54 = v32;
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v50);
    float v32 = v54;
    float v43 = v53;
    float v41 = v52;
    float v42 = v51;
    uint64_t v44 = *(void *)a3;
    unsigned int v35 = *(_DWORD *)(a3 + 8);
    unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  float v55 = v98 + v31;
  float v56 = v100 + v30;
  float v57 = v97 + v32;
  *(_DWORD *)(a3 + 8) = v36;
  uint64_t v58 = v44 + 36 * v35;
  float v60 = v103;
  float v59 = v104;
  *(float *)uint64_t v58 = v103;
  *(float *)(v58 + 4) = v105;
  *(float *)(v58 + 8) = v104;
  *(void *)(v58 + 12) = v46;
  *(_DWORD *)(v58 + 20) = v47;
  *(float *)(v58 + 24) = v41;
  *(float *)(v58 + 28) = v43;
  *(float *)(v58 + 32) = v42;
  uint64_t v61 = *(void *)(a2 + 3);
  int v62 = *((_DWORD *)a2 + 5);
  unsigned int v63 = v33 + 4;
  if (v33 + 4 > v34)
  {
    if (v34) {
      unsigned int v64 = 2 * v34;
    }
    else {
      unsigned int v64 = 2;
    }
    if (v63 <= v64) {
      uint64_t v65 = v64;
    }
    else {
      uint64_t v65 = v63;
    }
    float v66 = v56;
    float v67 = v97 + v32;
    float v68 = v55;
    float v69 = v42;
    float v70 = v41;
    float v71 = v43;
    int v72 = *((_DWORD *)a2 + 5);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v65);
    int v62 = v72;
    float v43 = v71;
    float v41 = v70;
    float v42 = v69;
    float v55 = v68;
    float v57 = v67;
    float v56 = v66;
    float v60 = v103;
    float v59 = v104;
    uint64_t v44 = *(void *)a3;
    unsigned int v36 = *(_DWORD *)(a3 + 8);
    unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  *(_DWORD *)(a3 + 8) = v48;
  uint64_t v73 = v44 + 36 * v36;
  *(float *)uint64_t v73 = v41;
  *(float *)(v73 + 4) = v43;
  *(float *)(v73 + 8) = v42;
  *(void *)(v73 + 12) = v61;
  *(_DWORD *)(v73 + 20) = v62;
  *(float *)(v73 + 24) = v56;
  *(float *)(v73 + 28) = v55;
  *(float *)(v73 + 32) = v57;
  long long v74 = *(_OWORD *)(a2 + 3);
  uint64_t v75 = *(void *)(a2 + 7);
  unsigned int v76 = v33 + 5;
  if (v33 + 5 > v34)
  {
    if (v34) {
      unsigned int v77 = 2 * v34;
    }
    else {
      unsigned int v77 = 2;
    }
    if (v76 <= v77) {
      uint64_t v78 = v77;
    }
    else {
      uint64_t v78 = v76;
    }
    long long v101 = *(_OWORD *)(a2 + 3);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v78);
    long long v74 = v101;
    uint64_t v44 = *(void *)a3;
    unsigned int v48 = *(_DWORD *)(a3 + 8);
    unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  uint64_t v79 = v44 + 36 * v48;
  *(_DWORD *)(a3 + 8) = v63;
  *(float *)uint64_t v79 = v56;
  *(float *)(v79 + 4) = v55;
  *(float *)(v79 + 8) = v57;
  *(_OWORD *)(v79 + 12) = v74;
  *(void *)(v79 + 28) = v75;
  int v80 = *((_DWORD *)a2 + 6);
  *(void *)&long long v81 = *(void *)(a2 + 7);
  long long v82 = *(_OWORD *)a2;
  int v83 = *((_DWORD *)a2 + 2);
  unsigned int v84 = v33 + 6;
  if (v33 + 6 > v34)
  {
    if (v34) {
      unsigned int v85 = 2 * v34;
    }
    else {
      unsigned int v85 = 2;
    }
    if (v84 <= v85) {
      uint64_t v86 = v85;
    }
    else {
      uint64_t v86 = v84;
    }
    long long v99 = *(_OWORD *)a2;
    uint64_t v102 = *(void *)(a2 + 7);
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v86);
    *(void *)&long long v82 = v99;
    *(void *)&long long v81 = v102;
    uint64_t v44 = *(void *)a3;
    unsigned int v63 = *(_DWORD *)(a3 + 8);
    unsigned int v34 = *(_DWORD *)(a3 + 12) & 0x7FFFFFFF;
  }
  uint64_t v87 = v44 + 36 * v63;
  *(_DWORD *)(a3 + 8) = v76;
  *(float *)uint64_t v87 = v60;
  *(float *)(v87 + 4) = v105;
  *(float *)(v87 + 8) = v59;
  *(_DWORD *)(v87 + 12) = v80;
  *((void *)&v81 + 1) = v82;
  *(_OWORD *)(v87 + 16) = v81;
  *(_DWORD *)(v87 + 32) = v83;
  uint64_t v88 = *((void *)a2 + 3);
  int v89 = *((_DWORD *)a2 + 8);
  unsigned int v90 = v33 + 7;
  if (v33 + 7 > v34)
  {
    if (v34) {
      unsigned int v91 = 2 * v34;
    }
    else {
      unsigned int v91 = 2;
    }
    if (v90 <= v91) {
      uint64_t v92 = v91;
    }
    else {
      uint64_t v92 = v90;
    }
    physx::shdfnd::Array<physx::PxTriangle,physx::shdfnd::ReflectionAllocator<physx::PxTriangle>>::recreate((uint64_t *)a3, v92);
    uint64_t v44 = *(void *)a3;
    unsigned int v76 = *(_DWORD *)(a3 + 8);
  }
  *(_DWORD *)(a3 + 8) = v84;
  uint64_t v93 = v44 + 36 * v76;
  *(float *)uint64_t v93 = v60;
  *(float *)(v93 + 4) = v105;
  *(float *)(v93 + 8) = v59;
  *(float *)(v93 + 12) = v56;
  *(float *)(v93 + 16) = v55;
  *(float *)(v93 + 20) = v57;
  *(void *)(v93 + 24) = v88;
  *(_DWORD *)(v93 + 32) = v89;
  int v106 = -1;
  int v94 = 6;
  do
  {
    uint64_t v95 = *(unsigned int *)(a4 + 8);
    if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v95)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v106);
    }
    else
    {
      *(_DWORD *)(*(void *)a4 + 4 * v95) = v106;
      ++*(_DWORD *)(a4 + 8);
    }
    --v94;
  }
  while (v94);
  return 6;
}

float *fixDir(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a3[1];
  float v5 = a2[2];
  float v6 = a3[2];
  float v7 = (float)((float)(v3 * v4) + (float)(*a2 * *a3)) + (float)(v5 * v6);
  float v8 = *a2 - (float)(*a3 * v7);
  float v9 = v3 - (float)(v4 * v7);
  float v10 = v5 - (float)(v6 * v7);
  float v11 = (float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v10 * v10);
  float v12 = 0.0;
  float v13 = 0.0;
  float v14 = 0.0;
  if (v11 > 0.0)
  {
    float v15 = 1.0 / sqrtf(v11);
    float v12 = v8 * v15;
    float v13 = v9 * v15;
    float v14 = v10 * v15;
  }
  *uint64_t result = v12;
  result[1] = v13;
  result[2] = v14;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>::getName() [T = physx::PxExtendedBox]";
    }
    else {
      float v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    float v11 = *(long long **)v3;
    unint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      *(void *)(v12 + 16) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      *(_OWORD *)(v12 + 24) = *(long long *)((char *)v11 + 24);
      *(void *)(v12 + 40) = *((void *)v11 + 5);
      *(_DWORD *)(v12 + 48) = *((_DWORD *)v11 + 12);
      v12 += 56;
      float v11 = (long long *)((char *)v11 + 56);
    }
    while (v12 < v10);
    unsigned int v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = v8 + 56 * v14;
  long long v16 = *a2;
  *(void *)(v15 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  *(_OWORD *)(v15 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(v15 + 40) = *((void *)a2 + 5);
  *(_DWORD *)(v15 + 48) = *((_DWORD *)a2 + 12);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v7 = "static const char *physx::shdfnd::ReflectionAllocator<const void *>::getName() [T = const void *]";
    }
    else {
      float v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    float v11 = *(uint64_t **)v3;
    unint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>::getName() [T = physx::PxExtendedCapsule]";
    }
    else {
      float v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 56 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 56 * v9;
    float v11 = *(long long **)v3;
    unint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      long long v14 = v11[1];
      long long v15 = v11[2];
      *(void *)(v12 + 48) = *((void *)v11 + 6);
      *(_OWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)unint64_t v12 = v13;
      v12 += 56;
      float v11 = (long long *)((char *)v11 + 56);
    }
    while (v12 < v10);
    unsigned int v16 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v17 = v8 + 56 * v16;
  long long v18 = *a2;
  long long v19 = a2[1];
  long long v20 = a2[2];
  *(void *)(v17 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(v17 + 16) = v19;
  *(_OWORD *)(v17 + 32) = v20;
  *(_OWORD *)uint64_t v17 = v18;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    float v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    float v11 = 0;
  }
  unint64_t v12 = &v11[4 * v3];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v14 = 0;
    long long v15 = (_DWORD *)(*(void *)(a1 + 8) + 8);
    unsigned int v16 = &v11[v10 + 8];
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      unint64_t v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
      unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      LODWORD(v20) = (v3 - 1) & ((v20 >> 31) ^ v20);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v14;
      *((void *)v16 - 1) = v17;
      int v21 = *v15;
      v15 += 4;
      *(_DWORD *)unsigned int v16 = v21;
      v16 += 16;
      ++v14;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = &v11[v10];
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::Controller *,physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::Controller *>::getName() [T = physx::Cct::Controller *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v8 = (void *)result;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    float v11 = *(uint64_t **)v3;
    unint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxBase const* const,physx::Cct::ObservedRefCounter>,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashMapBase<physx::PxBase const*,physx::Cct::ObservedRefCounter,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 16 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 16 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 16 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext *,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext *>::getName() [T = physx::C"
    }
           "ct::ObstacleContext *]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v8 = (void *)result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unsigned int v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    int32x2_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void const*,physx::shdfnd::ReflectionAllocator<void const*>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<const void *>::getName() [T = const void *]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    unsigned int v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedBox,physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedBox>::getName() [T = physx::PxExtendedBox]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 56 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  unint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 56 * v7;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      *(void *)(v10 + 16) = *((void *)v8 + 2);
      *(_OWORD *)unint64_t v10 = v11;
      *(_OWORD *)(v10 + 24) = *(long long *)((char *)v8 + 24);
      *(void *)(v10 + 40) = *((void *)v8 + 5);
      *(_DWORD *)(v10 + 48) = *((_DWORD *)v8 + 12);
      v10 += 56;
      unint64_t v8 = (long long *)((char *)v8 + 56);
    }
    while (v10 < v9);
    unint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxExtendedCapsule,physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxExtendedCapsule>::getName() [T = physx::PxExtendedCapsule]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 56 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  unint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 56 * v7;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      long long v12 = v8[1];
      long long v13 = v8[2];
      *(void *)(v10 + 48) = *((void *)v8 + 6);
      *(_OWORD *)(v10 + 16) = v12;
      *(_OWORD *)(v10 + 32) = v13;
      *(_OWORD *)unint64_t v10 = v11;
      v10 += 56;
      unint64_t v8 = (long long *)((char *)v8 + 56);
    }
    while (v10 < v9);
    unint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

physx::Cct::HandleManager *physx::Cct::HandleManager::HandleManager(physx::Cct::HandleManager *this)
{
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 1) = 0x200000000;
  *(void *)this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 44);
  uint64_t v2 = *((unsigned int *)this + 3);
  if (!v2)
  {
    *((void *)this + 2) = 0;
    goto LABEL_6;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 45);
  uint64_t v4 = *((unsigned int *)this + 3);
  *((void *)this + 2) = v3;
  if (!v4)
  {
LABEL_6:
    size_t v8 = 0;
    uint64_t v7 = 0;
    *((void *)this + 3) = 0;
    goto LABEL_8;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 46);
  uint64_t v6 = *((unsigned int *)this + 3);
  *((void *)this + 3) = v5;
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 47);
    size_t v8 = (2 * *((_DWORD *)this + 3));
  }
  else
  {
    size_t v8 = 0;
    uint64_t v7 = 0;
  }
LABEL_8:
  *((void *)this + 4) = v7;
  memset(*((void **)this + 2), 255, v8);
  memset(*((void **)this + 3), 255, (2 * *((_DWORD *)this + 3)));
  bzero(*((void **)this + 4), (2 * *((_DWORD *)this + 3)));
  return this;
}

void *physx::Cct::HandleManager::SetupLists(void *this, void **a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  unint64_t v9 = this;
  if (this[4]) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v9[4] = 0;
  if (v9[3]) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v9[3] = 0;
  if (v9[2]) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v9[2] = 0;
  if (*v9) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  void *v9 = a2;
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  return this;
}

uint64_t physx::Cct::HandleManager::Add(physx::Cct::HandleManager *this, void *a2)
{
  int v4 = *((_DWORD *)this + 10);
  if (v4)
  {
    uint64_t v5 = *((unsigned int *)this + 2);
    unsigned int v6 = *(unsigned __int16 *)(*((void *)this + 3) + 2 * v5);
    *(void *)(*(void *)this + 8 * v5) = a2;
    *((_DWORD *)this + 2) = v5 + 1;
    *(_WORD *)(*((void *)this + 2) + 2 * v6) = v5;
    *((_DWORD *)this + 10) = v4 - 1;
    return v6 | (*(unsigned __int16 *)(*((void *)this + 4) + 2 * v6) << 16);
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 == *((_DWORD *)this + 3))
  {
    unsigned int v9 = 2 * v8;
    if (v9 >= 0xFFFF) {
      unsigned int v9 = 0xFFFF;
    }
    *((_DWORD *)this + 3) = v9;
    if (v9)
    {
      unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 94);
      uint64_t v11 = *((unsigned int *)this + 3);
      if (v11)
      {
        long long v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 95);
        uint64_t v13 = *((unsigned int *)this + 3);
        if (v13)
        {
          unint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 96);
          uint64_t v15 = *((unsigned int *)this + 3);
          if (v15)
          {
            unint64_t v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcharacterkinematic/src/CctObstacleContext.cpp", 97);
LABEL_15:
            memcpy(v10, *(const void **)this, (8 * *((_DWORD *)this + 2)));
            memcpy(v12, *((const void **)this + 2), (2 * *((_DWORD *)this + 2)));
            memcpy(v14, *((const void **)this + 3), (2 * *((_DWORD *)this + 2)));
            memcpy(v16, *((const void **)this + 4), (2 * *((_DWORD *)this + 2)));
            memset(&v12[2 * *((unsigned int *)this + 2)], 255, (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            memset(&v14[2 * *((unsigned int *)this + 2)], 255, (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            bzero(&v16[2 * *((unsigned int *)this + 2)], (2 * (*((_DWORD *)this + 3) - *((_DWORD *)this + 2))));
            physx::Cct::HandleManager::SetupLists(this, (void **)v10, (unsigned __int16 *)v12, (unsigned __int16 *)v14, (unsigned __int16 *)v16);
            unsigned int v8 = *((_DWORD *)this + 2);
            goto LABEL_16;
          }
        }
        else
        {
          unint64_t v14 = 0;
        }
LABEL_14:
        unint64_t v16 = 0;
        goto LABEL_15;
      }
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v10 = 0;
    }
    long long v12 = 0;
    goto LABEL_14;
  }
LABEL_16:
  *(void *)(*(void *)this + 8 * v8) = a2;
  uint64_t v17 = *((void *)this + 3);
  *(_WORD *)(*((void *)this + 2) + 2 * v8) = v8;
  *(_WORD *)(v17 + 2 * v8) = v8;
  *((_DWORD *)this + 2) = v8 + 1;
  return v8 | (*(unsigned __int16 *)(*((void *)this + 4) + 2 * v8) << 16);
}

uint64_t *physx::Cct::HandleManager::Remove(uint64_t *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 3);
  if ((unsigned __int16)a2 < v2)
  {
    uint64_t v3 = *(unsigned __int16 *)(this[2] + 2 * (unsigned __int16)a2);
    if (v3 != 0xFFFF && v2 > v3)
    {
      int v5 = *((_DWORD *)this + 2);
      if (v5)
      {
        if (*(unsigned __int16 *)(this[4] + 2 * (unsigned __int16)a2) == HIWORD(a2))
        {
          uint64_t v6 = *this;
          unsigned int v7 = v5 - 1;
          *((_DWORD *)this + 2) = v7;
          *(void *)(v6 + 8 * v3) = *(void *)(v6 + 8 * v7);
          uint64_t v8 = this[2];
          uint64_t v9 = this[3];
          *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v9 + 2 * v7)) = v3;
          *(_WORD *)(v9 + 2 * v3) = *(_WORD *)(v9 + 2 * v7);
          *(_WORD *)(v9 + 2 * v7) = a2;
          *(_WORD *)(v8 + 2 * (unsigned __int16)a2) = -1;
          ++*((_DWORD *)this + 10);
          ++*(_WORD *)(this[4] + 2 * (unsigned __int16)a2);
        }
      }
    }
  }
  return this;
}

void physx::Cct::ObstacleContext::~ObstacleContext(physx::Cct::ObstacleContext *this)
{
  *(void *)this = &unk_26E72EC88;
  physx::Cct::HandleManager::SetupLists((void *)this + 5, 0, 0, 0, 0);
  int v2 = *((_DWORD *)this + 9);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 3) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Cct::ObstacleContext::~ObstacleContext(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Cct::ObstacleContext::release(physx::Cct::ObstacleContext *this)
{
  return physx::Cct::CharacterControllerManager::releaseObstacleContext(*((void *)this + 11), (uint64_t)this);
}

uint64_t physx::Cct::ObstacleContext::getControllerManager(physx::Cct::ObstacleContext *this)
{
  return *((void *)this + 11);
}

uint64_t physx::Cct::ObstacleContext::addObstacle(uint64_t a1, long long *a2)
{
  if (*(_DWORD *)a2 == 2)
  {
    uint64_t v18 = physx::Cct::HandleManager::Add((physx::Cct::HandleManager *)(a1 + 40), (void *)(((unint64_t)*(unsigned int *)(a1 + 32) << 16) | 3));
    uint64_t v5 = v18;
    int v30 = v18;
    long long v19 = a2[1];
    long long v31 = *a2;
    long long v32 = v19;
    uint64_t v33 = *((void *)a2 + 4);
    int v20 = *((_DWORD *)a2 + 10);
    int v21 = *((_DWORD *)a2 + 11);
    int v34 = v20;
    int v35 = v21;
    int v22 = *((_DWORD *)a2 + 12);
    int v23 = *((_DWORD *)a2 + 13);
    int v36 = v22;
    int v37 = v23;
    unint64_t v24 = *((void *)a2 + 7);
    unsigned int v25 = *(_DWORD *)(a1 + 32);
    unsigned int v26 = *(_DWORD *)(a1 + 36) & 0x7FFFFFFF;
    unint64_t v38 = v24;
    if (v26 <= v25)
    {
      physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalCapsuleObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>>::growAndPushBack(a1 + 24, (uint64_t)&v30);
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 24) + 72 * v25;
      long long v28 = v32;
      *(_OWORD *)(v27 + 8) = v31;
      *(_DWORD *)uint64_t v27 = v18;
      *(_OWORD *)(v27 + 24) = v28;
      *(void *)(v27 + 40) = v33;
      *(_DWORD *)(v27 + 48) = v20;
      *(_DWORD *)(v27 + 52) = v21;
      *(_DWORD *)(v27 + 56) = v22;
      *(_DWORD *)(v27 + 60) = v23;
      *(void *)(v27 + 64) = v24;
      ++*(_DWORD *)(a1 + 32);
    }
    goto LABEL_10;
  }
  if (*(_DWORD *)a2 == 3)
  {
    uint64_t v4 = physx::Cct::HandleManager::Add((physx::Cct::HandleManager *)(a1 + 40), (void *)(((unint64_t)*(unsigned int *)(a1 + 16) << 16) | 4));
    uint64_t v5 = v4;
    int v30 = v4;
    long long v6 = a2[1];
    long long v31 = *a2;
    long long v32 = v6;
    uint64_t v33 = *((void *)a2 + 4);
    int v7 = *((_DWORD *)a2 + 10);
    int v8 = *((_DWORD *)a2 + 11);
    int v34 = v7;
    int v35 = v8;
    int v9 = *((_DWORD *)a2 + 12);
    int v10 = *((_DWORD *)a2 + 13);
    int v36 = v9;
    int v37 = v10;
    unsigned int v11 = *((_DWORD *)a2 + 14);
    unsigned int v12 = *((_DWORD *)a2 + 15);
    unint64_t v38 = __PAIR64__(v12, v11);
    int v13 = *((_DWORD *)a2 + 16);
    unsigned int v14 = *(_DWORD *)(a1 + 16);
    unsigned int v15 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
    int v39 = v13;
    if (v15 <= v14)
    {
      physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalBoxObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>>::growAndPushBack(a1 + 8, (uint64_t)&v30);
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 8) + 80 * v14;
      long long v17 = v32;
      *(_OWORD *)(v16 + 8) = v31;
      *(_DWORD *)uint64_t v16 = v4;
      *(_OWORD *)(v16 + 24) = v17;
      *(void *)(v16 + 40) = v33;
      *(_DWORD *)(v16 + 48) = v7;
      *(_DWORD *)(v16 + 52) = v8;
      *(_DWORD *)(v16 + 56) = v9;
      *(_DWORD *)(v16 + 60) = v10;
      *(_DWORD *)(v16 + 64) = v11;
      *(_DWORD *)(v16 + 68) = v12;
      *(_DWORD *)(v16 + 72) = v13;
      ++*(_DWORD *)(a1 + 16);
    }
LABEL_10:
    physx::Cct::CharacterControllerManager::onObstacleAdded(*(void *)(a1 + 88), v5, a1);
    return v5;
  }
  return 0xFFFFFFFFLL;
}

uint64_t physx::Cct::ObstacleContext::removeObstacle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 13);
  if ((unsigned __int16)a2 >= v2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int16 *)(*((void *)this + 7) + 2 * (unsigned __int16)a2);
  if (v4 == 0xFFFF || v2 <= v4) {
    return 0;
  }
  if (*(unsigned __int16 *)(*((void *)this + 9) + 2 * (unsigned __int16)a2) != HIWORD(a2)) {
    return 0;
  }
  int v7 = (uint64_t *)((char *)this + 40);
  uint64_t v8 = *(void *)(*((void *)this + 5) + 8 * v4);
  if (!v8) {
    return 0;
  }
  if ((unsigned __int16)*(void *)(*((void *)this + 5) + 8 * v4) == 3)
  {
    unsigned int v20 = *((_DWORD *)this + 8);
    if (WORD1(v8) < v20)
    {
      physx::Cct::HandleManager::Remove(v7, a2);
      uint64_t v21 = *((void *)this + 3);
      if (v20 - 1 != WORD1(v8))
      {
        uint64_t v22 = (unsigned __int16)*(_DWORD *)(v21 + 72 * (v20 - 1));
        unsigned int v23 = *((_DWORD *)this + 13);
        if ((unsigned __int16)*(_DWORD *)(v21 + 72 * (v20 - 1)) < v23)
        {
          uint64_t v24 = *(unsigned __int16 *)(*((void *)this + 7) + 2 * v22);
          BOOL v25 = v24 != 0xFFFF && v23 > v24;
          if (v25
            && *(unsigned __int16 *)(*((void *)this + 9) + 2 * v22) == HIWORD(*(_DWORD *)(v21 + 72 * (v20 - 1))))
          {
            *(void *)(*((void *)this + 5) + 8 * v24) = v8;
            uint64_t v21 = *((void *)this + 3);
          }
        }
      }
      unsigned int v26 = *((_DWORD *)this + 8) - 1;
      *((_DWORD *)this + 8) = v26;
      uint64_t v27 = v21 + 72 * v26;
      uint64_t v28 = v21 + 72 * WORD1(v8);
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v27;
      uint64_t v29 = *(void *)(v27 + 40);
      long long v30 = *(_OWORD *)(v27 + 24);
      *(_OWORD *)(v28 + 8) = *(_OWORD *)(v27 + 8);
      *(_OWORD *)(v28 + 24) = v30;
      *(void *)(v28 + 40) = v29;
      *(_OWORD *)(v28 + 48) = *(_OWORD *)(v27 + 48);
      *(void *)(v28 + 64) = *(void *)(v27 + 64);
      goto LABEL_33;
    }
    return 0;
  }
  if ((unsigned __int16)*(void *)(*((void *)this + 5) + 8 * v4) != 4) {
    return 0;
  }
  unsigned int v9 = *((_DWORD *)this + 4);
  if (WORD1(v8) >= v9) {
    return 0;
  }
  physx::Cct::HandleManager::Remove(v7, a2);
  uint64_t v10 = *((void *)this + 1);
  if (v9 - 1 != WORD1(v8))
  {
    uint64_t v11 = (unsigned __int16)*(_DWORD *)(v10 + 80 * (v9 - 1));
    unsigned int v12 = *((_DWORD *)this + 13);
    if ((unsigned __int16)*(_DWORD *)(v10 + 80 * (v9 - 1)) < v12)
    {
      uint64_t v13 = *(unsigned __int16 *)(*((void *)this + 7) + 2 * v11);
      BOOL v14 = v13 != 0xFFFF && v12 > v13;
      if (v14 && *(unsigned __int16 *)(*((void *)this + 9) + 2 * v11) == HIWORD(*(_DWORD *)(v10 + 80 * (v9 - 1))))
      {
        *(void *)(*((void *)this + 5) + 8 * v13) = v8;
        uint64_t v10 = *((void *)this + 1);
      }
    }
  }
  unsigned int v15 = *((_DWORD *)this + 4) - 1;
  *((_DWORD *)this + 4) = v15;
  uint64_t v16 = v10 + 80 * v15;
  uint64_t v17 = v10 + 80 * WORD1(v8);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v16;
  uint64_t v18 = *(void *)(v16 + 40);
  long long v19 = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
  *(_OWORD *)(v17 + 24) = v19;
  *(void *)(v17 + 40) = v18;
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(v16 + 48);
  *(void *)(v17 + 64) = *(void *)(v16 + 64);
  *(_DWORD *)(v17 + 72) = *(_DWORD *)(v16 + 72);
LABEL_33:
  uint64_t v31 = *((void *)this + 11);
  uint64_t v32 = *(unsigned int *)(v31 + 112);
  if (!v32) {
    return 1;
  }
  uint64_t v33 = *(void *)(v31 + 104);
  uint64_t result = 1;
  do
  {
    if (*(_DWORD *)(*(void *)v33 + 320) == a2) {
      *(_DWORD *)(*(void *)v33 + 320) = -1;
    }
    v33 += 8;
    --v32;
  }
  while (v32);
  return result;
}

uint64_t physx::Cct::ObstacleContext::updateObstacle(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 52);
  if ((unsigned __int16)a2 < v3)
  {
    uint64_t v4 = *(unsigned __int16 *)(*(void *)(a1 + 56) + 2 * (unsigned __int16)a2);
    if (v4 != 0xFFFF
      && v3 > v4
      && *(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * (unsigned __int16)a2) == HIWORD(a2))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8 * v4);
      if (v6)
      {
        if ((unsigned __int16)v6 - 1 == *(_DWORD *)a3)
        {
          unsigned int v7 = WORD1(v6);
          if ((unsigned __int16)v6 == 3)
          {
            if (v7 < *(_DWORD *)(a1 + 32))
            {
              uint64_t v11 = *(void *)(a1 + 24) + 72 * v7;
              long long v12 = *a3;
              long long v13 = a3[1];
              *(void *)(v11 + 40) = *((void *)a3 + 4);
              *(_OWORD *)(v11 + 24) = v13;
              *(_OWORD *)(v11 + 8) = v12;
              *(_OWORD *)(v11 + 48) = *(long long *)((char *)a3 + 40);
              *(void *)(v11 + 64) = *((void *)a3 + 7);
              goto LABEL_16;
            }
          }
          else if ((unsigned __int16)v6 == 4 && v7 < *(_DWORD *)(a1 + 16))
          {
            uint64_t v8 = *(void *)(a1 + 8) + 80 * v7;
            long long v9 = *a3;
            long long v10 = a3[1];
            *(void *)(v8 + 40) = *((void *)a3 + 4);
            *(_OWORD *)(v8 + 24) = v10;
            *(_OWORD *)(v8 + 8) = v9;
            *(_OWORD *)(v8 + 48) = *(long long *)((char *)a3 + 40);
            *(void *)(v8 + 64) = *((void *)a3 + 7);
            *(_DWORD *)(v8 + 72) = *((_DWORD *)a3 + 16);
LABEL_16:
            physx::Cct::CharacterControllerManager::onObstacleUpdated(*(void *)(a1 + 88), a2, a1);
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t physx::Cct::ObstacleContext::getNbObstacles(physx::Cct::ObstacleContext *this)
{
  return (*((_DWORD *)this + 8) + *((_DWORD *)this + 4));
}

uint64_t physx::Cct::ObstacleContext::getObstacle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 4);
  BOOL v3 = a2 >= v2;
  unsigned int v4 = a2 - v2;
  if (!v3)
  {
    uint64_t v5 = *((void *)this + 1) + 80 * a2;
    return v5 + 8;
  }
  if (v4 < *((_DWORD *)this + 8))
  {
    uint64_t v5 = *((void *)this + 3) + 72 * v4;
    return v5 + 8;
  }
  return 0;
}

unint64_t physx::Cct::ObstacleContext::getObstacleByHandle(physx::Cct::ObstacleContext *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 13);
  if ((unsigned __int16)a2 < v2)
  {
    uint64_t v3 = *(unsigned __int16 *)(*((void *)this + 7) + 2 * (unsigned __int16)a2);
    if (v3 != 0xFFFF
      && v2 > v3
      && *(unsigned __int16 *)(*((void *)this + 9) + 2 * (unsigned __int16)a2) == HIWORD(a2))
    {
      uint64_t v5 = *(void *)(*((void *)this + 5) + 8 * v3);
      if (v5)
      {
        unsigned int v6 = WORD1(v5);
        if ((unsigned __int16)v5 == 3)
        {
          if (WORD1(v5) < *((_DWORD *)this + 8))
          {
            uint64_t v7 = *((void *)this + 3);
            unsigned int v8 = 72;
            return v7 + v6 * (unint64_t)v8 + 8;
          }
        }
        else if ((unsigned __int16)v5 == 4 && WORD1(v5) < *((_DWORD *)this + 4))
        {
          uint64_t v7 = *((void *)this + 1);
          unsigned int v8 = 80;
          return v7 + v6 * (unint64_t)v8 + 8;
        }
      }
    }
  }
  return 0;
}

uint64_t physx::Cct::ObstacleContext::raycastSingle(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, _DWORD *a5, float a6)
{
  long long v39 = 0uLL;
  int v40 = -1;
  __int16 v41 = 0;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  *(void *)uint64_t v44 = 2139095039;
  *(_DWORD *)&v44[8] = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    BOOL v14 = (unsigned int (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_26B7B4DF0[0];
    uint64_t v15 = 80 * v11;
    float v16 = 3.4028e38;
    do
    {
      uint64_t v17 = *(void *)(a1 + 8) + v12;
      int v18 = *(_DWORD *)(v17 + 72);
      int v36 = 3;
      int32x2_t v37 = *(int32x2_t *)(v17 + 64);
      int v38 = v18;
      float v19 = *(double *)(v17 + 40);
      long long v33 = *(_OWORD *)(v17 + 48);
      float32x2_t v34 = vcvt_f32_f64(*(float64x2_t *)(v17 + 24));
      float v35 = v19;
      __int16 v32 = 0;
      if (v14((uint64_t)&v36, (float *)&v33, (float *)a3, a4, &v32, a6, 1, (uint64_t)&v39))
      {
        float v20 = *(float *)v44;
        if (*(float *)v44 < v16)
        {
          uint64_t v13 = v17 + 8;
          *(_OWORD *)a2 = v39;
          *(_DWORD *)(a2 + 16) = v40;
          *(_WORD *)(a2 + 20) = v41;
          *(_OWORD *)(a2 + 24) = v42;
          *(void *)(a2 + 40) = v43;
          *(float *)(a2 + 48) = v20;
          *(void *)(a2 + 52) = *(void *)&v44[4];
          *a5 = *(_DWORD *)(*(void *)(a1 + 8) + v12);
          float v16 = v20;
        }
      }
      v12 += 80;
    }
    while (v15 != v12);
  }
  else
  {
    uint64_t v13 = 0;
    float v16 = 3.4028e38;
  }
  uint64_t v21 = *(unsigned int *)(a1 + 32);
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = off_26B7B4DE8[0];
    uint64_t v24 = 72 * v21;
    do
    {
      uint64_t v25 = *(void *)(a1 + 24) + v22;
      int v36 = 2;
      int32x2_t v37 = vrev64_s32(*(int32x2_t *)(v25 + 64));
      float v26 = *(double *)(v25 + 40);
      long long v33 = *(_OWORD *)(v25 + 48);
      float32x2_t v34 = vcvt_f32_f64(*(float64x2_t *)(v25 + 24));
      float v35 = v26;
      __int16 v31 = 0;
      ((void (*)(uint64_t, float *, float32x2_t *, float32x2_t *, unsigned char *, float, uint64_t, float32x2_t *))v23)((uint64_t)&v36, (float *)&v33, a3, a4, &v31, a6, 1, (float32x2_t *)&v39);
      if (v27)
      {
        float v28 = *(float *)v44;
        if (*(float *)v44 < v16)
        {
          uint64_t v13 = v25 + 8;
          *(_OWORD *)a2 = v39;
          *(_DWORD *)(a2 + 16) = v40;
          *(_WORD *)(a2 + 20) = v41;
          *(_OWORD *)(a2 + 24) = v42;
          *(void *)(a2 + 40) = v43;
          *(float *)(a2 + 48) = v28;
          *(void *)(a2 + 52) = *(void *)&v44[4];
          *a5 = *(_DWORD *)(*(void *)(a1 + 24) + v22);
          float v16 = v28;
        }
      }
      v22 += 72;
    }
    while (v24 != v22);
  }
  return v13;
}

uint64_t physx::Cct::ObstacleContext::raycastSingle(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4, float32x2_t *a5, float a6)
{
  uint64_t v6 = (unsigned __int16)*a3;
  unsigned int v7 = *(_DWORD *)(a1 + 52);
  if (v6 >= v7) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int16 *)(*(void *)(a1 + 56) + 2 * v6);
  if (v8 == 0xFFFF || v7 <= v8) {
    return 0;
  }
  if (*(unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v6) != HIWORD(*a3)) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8 * v8);
  if (!v10) {
    return 0;
  }
  unsigned int v11 = WORD1(v10);
  if ((unsigned __int16)*(void *)(*(void *)(a1 + 40) + 8 * v8) == 4)
  {
    uint64_t v12 = *(void *)(a1 + 8) + 80 * v11;
    int v13 = *(_DWORD *)(v12 + 72);
    int v23 = 3;
    int32x2_t v24 = *(int32x2_t *)(v12 + 64);
    int v25 = v13;
    float v14 = *(double *)(v12 + 40);
    long long v20 = *(_OWORD *)(v12 + 48);
    float32x2_t v21 = vcvt_f32_f64(*(float64x2_t *)(v12 + 24));
    float v22 = v14;
    __int16 v19 = 0;
    int v15 = ((uint64_t (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_26B7B4DF0[0])((uint64_t)&v23, (float *)&v20, a4, a5, &v19, a6, 1, a2);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24) + 72 * v11;
    int v23 = 2;
    int32x2_t v24 = vrev64_s32(*(int32x2_t *)(v12 + 64));
    float v16 = *(double *)(v12 + 40);
    long long v20 = *(_OWORD *)(v12 + 48);
    float32x2_t v21 = vcvt_f32_f64(*(float64x2_t *)(v12 + 24));
    float v22 = v16;
    __int16 v18 = 0;
    int v15 = ((uint64_t (*)(uint64_t, float *, float *, float32x2_t *, __int16 *, float, uint64_t, uint64_t))off_26B7B4DE8[0])((uint64_t)&v23, (float *)&v20, a4, a5, &v18, a6, 1, a2);
  }
  if (v15) {
    return v12 + 8;
  }
  else {
    return 0;
  }
}

uint64_t physx::Cct::ObstacleContext::onOriginShift(uint64_t result, float32x2_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 16);
  if (v2)
  {
    float64x2_t v3 = vcvtq_f64_f32(*a2);
    double v4 = a2[1].f32[0];
    uint64_t v5 = (double *)(*(void *)(result + 8) + 40);
    do
    {
      *((float64x2_t *)v5 - 1) = vsubq_f64(*(float64x2_t *)(v5 - 2), v3);
      *uint64_t v5 = *v5 - v4;
      v5 += 10;
      --v2;
    }
    while (v2);
  }
  uint64_t v6 = *(unsigned int *)(result + 32);
  if (v6)
  {
    float64x2_t v7 = vcvtq_f64_f32(*a2);
    double v8 = a2[1].f32[0];
    long long v9 = (double *)(*(void *)(result + 24) + 40);
    do
    {
      *((float64x2_t *)v9 - 1) = vsubq_f64(*(float64x2_t *)(v9 - 2), v7);
      double *v9 = *v9 - v8;
      v9 += 9;
      --v6;
    }
    while (v6);
  }
  return result;
}

void physx::Cct::SweptBox::~SweptBox(physx::Cct::SweptBox *this)
{
}

uint64_t physx::Cct::SweptBox::computeTemporalBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, double a6)
{
  LODWORD(a6) = *(_DWORD *)(a1 + 48);
  if (*(float *)(a1 + 44) > *(float *)&a6) {
    LODWORD(a6) = *(_DWORD *)(a1 + 44);
  }
  return physx::Cct::computeTemporalBox(a3, (float32x2_t *)(a2 + 300), a4, a5, a6, *(float *)(a1 + 40) + *(float *)(a1 + 40), *(float *)(a2 + 316), *(float *)(a2 + 328));
}

uint64_t physx::Cct::computeTemporalBox(uint64_t result, float32x2_t *a2, float64x2_t *a3, float32x2_t *a4, double a5, float a6, float a7, float a8)
{
  *(float *)&a5 = *(float *)&a5 + a7;
  float v8 = a6 * 0.5;
  float v9 = a2[1].f32[0];
  double v10 = a3[1].f64[0];
  double v11 = (float)(*(float *)&a5 + (float)(fabsf(v9) * v8));
  double v12 = v10 + v11;
  double v13 = v10 + a4[1].f32[0];
  double v14 = v13 - v11;
  double v15 = v13 + v11;
  float64x2_t v16 = *a3;
  float64x2_t v17 = vcvtq_f64_f32(vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0), vabs_f32(*a2), v8));
  float64x2_t v18 = vsubq_f64(*a3, v17);
  float64x2_t v19 = vaddq_f64(*a3, vcvtq_f64_f32(*a4));
  float64x2_t v20 = vsubq_f64(v19, v17);
  float64x2_t v21 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v20), (int8x16_t)v20, (int8x16_t)v18);
  if (v10 - v11 <= v14) {
    double v22 = v10 - v11;
  }
  else {
    double v22 = v14;
  }
  float64x2_t v23 = vaddq_f64(v16, v17);
  float64x2_t v24 = vaddq_f64(v19, v17);
  float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v24, v23), (int8x16_t)v24, (int8x16_t)v23);
  if (v12 < v15) {
    double v12 = v15;
  }
  if (a8 == 0.0) {
    goto LABEL_10;
  }
  float32x2_t v26 = vmul_n_f32(*a2, a8);
  double v27 = v10 - (float)(v9 * a8);
  double v28 = v27 - v11;
  double v29 = v27 + v11;
  float64x2_t v30 = vsubq_f64(v16, vcvtq_f64_f32(v26));
  float64x2_t v31 = vsubq_f64(v30, v17);
  float64x2_t v21 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, v31), (int8x16_t)v31, (int8x16_t)v21);
  if (v22 > v28) {
    double v22 = v28;
  }
  float64x2_t v32 = vaddq_f64(v30, v17);
  float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v32, v25), (int8x16_t)v32, (int8x16_t)v25);
  if (v12 >= v29) {
LABEL_10:
  }
    double v29 = v12;
  *(float64x2_t *)uint64_t result = v21;
  *(double *)(result + 16) = v22;
  *(float64x2_t *)(result + 24) = v25;
  *(double *)(result + 40) = v29;
  return result;
}

void physx::Cct::SweptCapsule::~SweptCapsule(physx::Cct::SweptCapsule *this)
{
}

uint64_t physx::Cct::SweptCapsule::computeTemporalBox(uint64_t a1, uint64_t a2, uint64_t a3, float64x2_t *a4, float32x2_t *a5, double a6)
{
  LODWORD(a6) = *(_DWORD *)(a1 + 40);
  return physx::Cct::computeTemporalBox(a3, (float32x2_t *)(a2 + 300), a4, a5, a6, *(float *)(a1 + 44), *(float *)(a2 + 316), *(float *)(a2 + 328));
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalBoxObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float64x2_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalBoxObstacle>::getN"
    }
           "ame() [T = physx::Cct::ObstacleContext::InternalBoxObstacle]";
    else {
      float64x2_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 80 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 80 * v9;
    uint64_t v11 = *(void *)v3;
    unint64_t v12 = v8;
    do
    {
      *(_DWORD *)unint64_t v12 = *(_DWORD *)v11;
      long long v13 = *(_OWORD *)(v11 + 8);
      long long v14 = *(_OWORD *)(v11 + 24);
      *(void *)(v12 + 40) = *(void *)(v11 + 40);
      *(_OWORD *)(v12 + 24) = v14;
      *(_OWORD *)(v12 + 8) = v13;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
      *(void *)(v12 + 64) = *(void *)(v11 + 64);
      *(_DWORD *)(v12 + 72) = *(_DWORD *)(v11 + 72);
      v12 += 80;
      v11 += 80;
    }
    while (v12 < v10);
    unsigned int v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 80 * v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)a2;
  long long v17 = *(_OWORD *)(a2 + 8);
  long long v18 = *(_OWORD *)(a2 + 24);
  *(void *)(v16 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(v16 + 24) = v18;
  *(_OWORD *)(v16 + 8) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v16 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(v16 + 72) = *(_DWORD *)(a2 + 72);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cct::ObstacleContext::InternalCapsuleObstacle,physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float64x2_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cct::ObstacleContext::InternalCapsuleObstacle>::"
    }
           "getName() [T = physx::Cct::ObstacleContext::InternalCapsuleObstacle]";
    else {
      float64x2_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 72 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 72 * v9;
    uint64_t v11 = *(void *)v3;
    unint64_t v12 = v8;
    do
    {
      *(_DWORD *)unint64_t v12 = *(_DWORD *)v11;
      long long v13 = *(_OWORD *)(v11 + 8);
      long long v14 = *(_OWORD *)(v11 + 24);
      *(void *)(v12 + 40) = *(void *)(v11 + 40);
      *(_OWORD *)(v12 + 24) = v14;
      *(_OWORD *)(v12 + 8) = v13;
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v11 + 48);
      *(void *)(v12 + 64) = *(void *)(v11 + 64);
      v12 += 72;
      v11 += 72;
    }
    while (v12 < v10);
    unsigned int v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v8 + 72 * v15;
  *(_DWORD *)uint64_t v16 = *(_DWORD *)a2;
  long long v17 = *(_OWORD *)(a2 + 8);
  long long v18 = *(_OWORD *)(a2 + 24);
  *(void *)(v16 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(v16 + 24) = v18;
  *(_OWORD *)(v16 + 8) = v17;
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v16 + 64) = *(void *)(a2 + 64);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::PxD6JointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::D6Joint>::getName() [T = physx::Ext::D6Joint]";
  }
  else {
    uint64_t v11 = "<allocation names disabled>";
  }
  unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 120, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 49);
  long long v13 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  physx::Ext::D6Joint::D6Joint((uint64_t)v12, v13, a2, a3, a4, a5);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t))(*(void *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::D6Joint::sShaders, 480);
  v12[12] = v14;
  if (!v14)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::D6Joint::D6Joint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  *(_DWORD *)(a1 + 8) = 196869;
  *(void *)a1 = &unk_26E72F108;
  *(void *)(a1 + 24) = &unk_26E72F320;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 480, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  _Q0 = *a4;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a4->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned long long *)a4);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  __int32 v21 = a4[1].i32[2];
  float32x4_t v22 = vdivq_f32(*a4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  _Q1.i64[0] = a4[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v22;
  *(void *)(a1 + 56) = _Q1.i64[0];
  *(_DWORD *)(a1 + 64) = v21;
  v22.i32[0] = a6[1].i32[2];
  _Q1 = *a6;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a6->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a6);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  uint64_t v27 = a6[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = v22.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v66, a3);
  float v28 = v68;
  float v29 = (float)(a4[1].f32[0] - v70) + (float)(a4[1].f32[0] - v70);
  float v30 = (float)(a4[1].f32[1] - v71) + (float)(a4[1].f32[1] - v71);
  float v31 = (float)(a4[1].f32[2] - v72) + (float)(a4[1].f32[2] - v72);
  float v32 = (float)(v69 * v69) + -0.5;
  float v33 = (float)((float)-(float)(v67 * v30) - (float)(v66 * v29)) - (float)(v68 * v31);
  float v34 = (float)((float)(v69 * (float)((float)(v68 * v30) - (float)(v67 * v31))) + (float)(v29 * v32))
      - (float)(v66 * v33);
  float v35 = (float)(v69 * (float)((float)(v66 * v31) - (float)(v68 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v69 * (float)((float)(v67 * v29) - (float)(v66 * v30))) + (float)(v31 * v32);
  float v38 = a4->f32[2];
  float v37 = a4->f32[3];
  float v39 = a4->f32[1];
  float v40 = (float)((float)((float)(v69 * v39) - (float)(v67 * v37)) - (float)(v68 * a4->f32[0])) + (float)(v38 * v66);
  float v41 = (float)((float)((float)(v69 * v38) - (float)(v68 * v37)) - (float)(v66 * v39)) + (float)(a4->f32[0] * v67);
  float v42 = v35 - (float)(v67 * v33);
  float v43 = (float)((float)((float)(v66 * a4->f32[0]) + (float)(v69 * v37)) + (float)(v67 * v39)) + (float)(v68 * v38);
  *(float *)(v12 + 16) = (float)((float)((float)(v69 * a4->f32[0]) - (float)(v66 * v37)) - (float)(v67 * v38))
                       + (float)(v39 * v68);
  *(float *)(v12 + 20) = v40;
  *(float *)(v12 + 24) = v41;
  *(float *)(v12 + 28) = v43;
  *(float *)(v12 + 32) = v34;
  *(float *)(v12 + 36) = v42;
  *(float *)(v12 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v66, a5);
  uint64_t v44 = 0;
  float v45 = (float)(a6[1].f32[0] - v70) + (float)(a6[1].f32[0] - v70);
  float v46 = (float)(a6[1].f32[1] - v71) + (float)(a6[1].f32[1] - v71);
  float v47 = (float)(a6[1].f32[2] - v72) + (float)(a6[1].f32[2] - v72);
  float v48 = (float)(v69 * v69) + -0.5;
  float v49 = (float)((float)-(float)(v67 * v46) - (float)(v66 * v45)) - (float)(v68 * v47);
  float v50 = (float)((float)(v69 * (float)((float)(v68 * v46) - (float)(v67 * v47))) + (float)(v45 * v48))
      - (float)(v66 * v49);
  float v51 = (float)((float)(v69 * (float)((float)(v66 * v47) - (float)(v68 * v45))) + (float)(v46 * v48))
      - (float)(v67 * v49);
  float v52 = (float)((float)(v69 * (float)((float)(v67 * v45) - (float)(v66 * v46))) + (float)(v47 * v48))
      - (float)(v68 * v49);
  float v54 = a6->f32[2];
  float v53 = a6->f32[3];
  float v55 = a6->f32[1];
  float v56 = (float)((float)((float)(v69 * v55) - (float)(v67 * v53)) - (float)(v68 * a6->f32[0])) + (float)(v54 * v66);
  float v57 = (float)((float)((float)(v69 * v54) - (float)(v68 * v53)) - (float)(v66 * v55)) + (float)(a6->f32[0] * v67);
  float v58 = (float)((float)((float)(v66 * a6->f32[0]) + (float)(v69 * v53)) + (float)(v67 * v55)) + (float)(v68 * v54);
  *(float *)(v12 + 44) = (float)((float)((float)(v69 * a6->f32[0]) - (float)(v66 * v53)) - (float)(v67 * v54))
                       + (float)(v55 * v68);
  *(float *)(v12 + 48) = v56;
  *(float *)(v12 + 52) = v57;
  *(float *)(v12 + 56) = v58;
  *(float *)(v12 + 60) = v50;
  *(float *)(v12 + 64) = v51;
  *(float *)(v12 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v12 = _Q0;
  *(void *)(a1 + 104) = v12;
  *(void *)a1 = &unk_26E72EDC0;
  *(void *)(a1 + 24) = &unk_26E72EFE8;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(v12 + 80) = 0;
  *(void *)(v12 + 88) = 0;
  *(void *)(v12 + 96) = 0;
  *(void *)(v12 + 212) = 0x3F00000000000000;
  *(void *)(v12 + 220) = 0;
  *(_OWORD *)(v12 + 228) = xmmword_234424870;
  *(_DWORD *)(v12 + 244) = 1056964608;
  *(void *)(v12 + 248) = 0;
  *(_OWORD *)(v12 + 256) = xmmword_234424880;
  *(_DWORD *)(v12 + 272) = 1056964608;
  *(void *)(v12 + 276) = 0;
  *(_OWORD *)(v12 + 284) = xmmword_234424890;
  *(_DWORD *)(v12 + 300) = 1070141403;
  *(float *)&_Q0 = *a2 * 0.01;
  *(void *)(v12 + 104) = 0;
  *(void *)(v12 + 112) = 0;
  *(_DWORD *)(v12 + 120) = _Q0;
  *(_DWORD *)(v12 + 124) = 2139095039;
  *(float *)&_Q0 = *a2;
  *(float *)(v12 + 464) = *a2 * 0.000001;
  *(_DWORD *)(v12 + 128) = 0;
  *(float *)(v12 + 132) = *(float *)&_Q0 + *(float *)&_Q0;
  *(void *)(v12 + 136) = 0;
  *(float *)(v12 + 144) = fminf(*(float *)&_Q0 * 0.01, 1.1116e38);
  *(void *)(v12 + 148) = 0xFEAAAAAA7EAAAAAALL;
  float v60 = fminf(*a2 * 0.01, 1.1116e38);
  float v61 = *a2 + *a2;
  *(_DWORD *)(v12 + 156) = 0;
  *(float *)(v12 + 160) = v61;
  *(void *)(v12 + 164) = 0;
  *(float *)(v12 + 172) = v60;
  *(void *)(v12 + 176) = 0xFEAAAAAA7EAAAAAALL;
  float v62 = fminf(*a2 * 0.01, 1.1116e38);
  float v63 = *a2 + *a2;
  *(_DWORD *)(v12 + 184) = 0;
  *(float *)(v12 + 188) = v63;
  *(void *)(v12 + 192) = 0;
  *(float *)(v12 + 200) = v62;
  *(void *)(v12 + 204) = 0xFEAAAAAA7EAAAAAALL;
  do
  {
    uint64_t v64 = v12 + v44;
    *(void *)(v64 + 304) = 0;
    *(void *)(v64 + 312) = 2139095039;
    v44 += 16;
  }
  while (v44 != 96);
  *(_OWORD *)(v12 + 400) = xmmword_23435FBB0;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_DWORD *)(v12 + 448) = 0;
  *(void *)(v12 + 468) = 0x40490FDB501502F9;
  *(_DWORD *)(v12 + 476) = 0;
  return a1;
}

uint64_t physx::Ext::D6Joint::getMotion(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 104) + 4 * a2 + 80);
}

uint64_t physx::Ext::D6Joint::setMotion(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  *(_DWORD *)(*(void *)(a1 + 104) + 4 * a2 + 80) = a3;
  *(unsigned char *)(a1 + 112) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
}

float physx::Ext::D6Joint::getTwistAngle(physx::Ext::D6Joint *this)
{
  (*(void (**)(float *__return_ptr))(*(void *)this + 80))(v7);
  float v1 = 1.0;
  if (v7[0] == 0.0)
  {
    BOOL v4 = 0;
    float v3 = 1.0;
  }
  else
  {
    float v2 = sqrtf((float)((float)(v7[0] * v7[0]) + 0.0) + (float)(v8 * v8));
    float v3 = v8 / v2;
    BOOL v4 = (float)(v7[0] / v2) < 0.0;
  }
  if (v3 < -1.0) {
    float v3 = -1.0;
  }
  if (v3 <= 1.0) {
    float v1 = v3;
  }
  float v5 = acosf(v1);
  float result = v5 + v5;
  if (v4) {
    return -result;
  }
  return result;
}

float physx::Ext::D6Joint::getSwingYAngle(physx::Ext::D6Joint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    float v2 = 0.0;
    float v3 = 0.0;
    float v4 = 1.0;
  }
  else
  {
    float v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    float v2 = *(float *)&v9 / v1;
    float v3 = 0.0 / v1;
    float v4 = v11 / v1;
  }
  float v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  float v6 = -(float)((float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
              + (float)(v3 * *(float *)&v9));
  float v7 = -v5;
  if (v5 >= 0.0)
  {
    float v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    float v6 = (float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
       + (float)(v3 * *(float *)&v9);
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::D6Joint::getSwingZAngle(physx::Ext::D6Joint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    float v2 = 0.0;
    float v3 = 0.0;
    float v4 = 1.0;
  }
  else
  {
    float v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    float v2 = *(float *)&v9 / v1;
    float v3 = 0.0 / v1;
    float v4 = v11 / v1;
  }
  float v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  float v6 = -(float)((float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
              + (float)(v2 * *((float *)&v9 + 1)));
  float v7 = -v5;
  if (v5 >= 0.0)
  {
    float v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    float v6 = (float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
       + (float)(v2 * *((float *)&v9 + 1));
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::D6Joint::getDrive@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 104) + 16 * a2;
  *(void *)a3 = *(void *)(v3 + 304);
  float result = *(float *)(v3 + 312);
  *(float *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(v3 + 316);
  return result;
}

uint64_t physx::Ext::D6Joint::setDrive(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 104) + 16 * a2;
  *(void *)(v3 + 304) = *(void *)a3;
  *(_DWORD *)(v3 + 312) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v3 + 316) = *(_DWORD *)(a3 + 12);
  *(unsigned char *)(a1 + 112) = 1;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

uint64_t physx::Ext::D6Joint::setDistanceLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(void *)(v2 + 120) = *((void *)a2 + 2);
  *(_OWORD *)(v2 + 104) = v3;
  uint64_t v5 = a1 + 96;
  uint64_t v4 = *(void *)(a1 + 96);
  *(unsigned char *)(*(void *)(v5 + 8) + 476) = 1;
  return (*(uint64_t (**)(void))(*(void *)v4 + 72))();
}

double physx::Ext::D6Joint::getDistanceLimit@<D0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 104);
  double result = *(double *)(v2 + 120);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setLinearLimit(uint64_t result, int a2, long long *a3)
{
  uint64_t v3 = *(void *)(result + 104);
  if (a2 == 2)
  {
    long long v5 = *a3;
    *(_OWORD *)(v3 + 196) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 184) = v5;
  }
  else if (a2 == 1)
  {
    long long v6 = *a3;
    *(_OWORD *)(v3 + 168) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 156) = v6;
  }
  else
  {
    if (a2) {
      return result;
    }
    long long v4 = *a3;
    *(_OWORD *)(v3 + 140) = *(long long *)((char *)a3 + 12);
    *(_OWORD *)(v3 + 128) = v4;
  }
  *(unsigned char *)(v3 + 477) = 1;
  return (*(uint64_t (**)(void))(**(void **)(result + 96) + 72))();
}

uint64_t physx::Ext::D6Joint::getLinearLimit@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 104);
  switch(a2)
  {
    case 2:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 184);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 200);
      uint64_t v4 = *(void *)(v3 + 204);
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 156);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 172);
      uint64_t v4 = *(void *)(v3 + 176);
      goto LABEL_7;
    case 0:
      *(_OWORD *)a3 = *(_OWORD *)(v3 + 128);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(v3 + 144);
      uint64_t v4 = *(void *)(v3 + 148);
LABEL_7:
      *(void *)(a3 + 20) = v4;
      return result;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 4) = 0x40000000;
  return result;
}

float physx::Ext::D6Joint::getTwistLimit@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 212);
  float result = *(float *)(v2 + 228);
  *(float *)(a2 + 16) = result;
  *(void *)(a2 + 20) = *(void *)(v2 + 232);
  return result;
}

uint64_t physx::Ext::D6Joint::setTwistLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(_OWORD *)(v2 + 224) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 212) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

__n128 physx::Ext::D6Joint::getPyramidSwingLimit@<Q0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 268);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v2 + 284);
  __n128 result = *(__n128 *)(v2 + 288);
  *(__n128 *)(a2 + 20) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setPyramidSwingLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_DWORD *)(v2 + 300) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(v2 + 268) = v3;
  *(_OWORD *)(v2 + 284) = v4;
  *(_WORD *)(*(void *)(a1 + 104) + 478) = 256;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::D6Joint::getSwingLimit@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  long long v3 = *(_OWORD *)(v2 + 240);
  v2 += 240;
  *(_OWORD *)a2 = v3;
  float result = *(float *)(v2 + 16);
  *(float *)(a2 + 16) = result;
  *(void *)(a2 + 20) = *(void *)(v2 + 20);
  return result;
}

uint64_t physx::Ext::D6Joint::setSwingLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(_OWORD *)(v2 + 252) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 240) = v3;
  *(_WORD *)(*(void *)(a1 + 104) + 478) = 1;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::D6Joint::getDrivePosition@<S0>(physx::Ext::D6Joint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 400);
  *(void *)(a2 + 16) = *(void *)(v2 + 416);
  float result = *(float *)(v2 + 424);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setDrivePosition(uint64_t a1, float32x4_t *a2, int a3)
{
  __int32 v4 = a2[1].i32[2];
  _Q1 = *a2;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a2->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a2);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  long long v13 = *(float32x4_t **)(a1 + 104);
  uint64_t v14 = a2[1].i64[0];
  v13[25] = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  v13[26].i64[0] = v14;
  v13[26].i32[2] = v4;
  if (a3) {
    physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(*(void *)(a1 + 96));
  }
  unsigned int v15 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 72);
  return v15();
}

void *physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(uint64_t a1)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  v12[0] = 0;
  (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 56))(a1, &v11, v12);
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    float result = (void *)v12[v1 - 1];
    if (result)
    {
      float result = (void *)(*(uint64_t (**)(void *))(*result + 56))(result);
      if (result)
      {
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v12[v1 - 1] + 48))(v12[v1 - 1]);
        if (result == 1)
        {
          uint64_t v5 = v12[v1 - 1];
          float result = (*(void *(**)(char *__return_ptr, uint64_t))(*(void *)v5 + 432))(&v10, v5);
          if ((v10 & 1) == 0)
          {
            uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
            float v7 = (*(float (**)(uint64_t))(*(void *)v6 + 880))(v6);
            float v8 = (*(float (**)(uint64_t))(*(void *)v5 + 584))(v5);
            float result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 512))(v5);
            if (v8 < v7 || result != 0)
            {
              if (v8 >= v7) {
                float v7 = v8;
              }
              (*(void (**)(uint64_t))(*(void *)v5 + 592))(v5);
              float result = (void *)(*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 576))(v5, v7);
            }
          }
        }
      }
    }
    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);
  return result;
}

float physx::Ext::D6Joint::getDriveVelocity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  *(void *)a2 = *(void *)(v3 + 428);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 436);
  *(void *)a3 = *(void *)(v3 + 440);
  float result = *(float *)(v3 + 448);
  *(float *)(a3 + 8) = result;
  return result;
}

uint64_t physx::Ext::D6Joint::setDriveVelocity(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 104);
  *(void *)(v5 + 428) = *(void *)a2;
  *(_DWORD *)(v5 + 436) = *(_DWORD *)(a2 + 8);
  *(void *)(v5 + 440) = *(void *)a3;
  *(_DWORD *)(v5 + 448) = *(_DWORD *)(a3 + 8);
  if (a4) {
    physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::wakeUpActors(*(void *)(a1 + 96));
  }
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 72);
  return v6();
}

uint64_t physx::Ext::D6Joint::setProjectionAngularTolerance(physx::Ext::D6Joint *this, float a2)
{
  char v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 472) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::D6Joint::getProjectionAngularTolerance(physx::Ext::D6Joint *this)
{
  return *(float *)(*((void *)this + 13) + 472);
}

uint64_t physx::Ext::D6Joint::setProjectionLinearTolerance(physx::Ext::D6Joint *this, float a2)
{
  char v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 468) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::D6Joint::getProjectionLinearTolerance(physx::Ext::D6Joint *this)
{
  return *(float *)(*((void *)this + 13) + 468);
}

uint64_t physx::Ext::D6Joint::prepareData(physx::Ext::D6Joint *this)
{
  uint64_t result = *((void *)this + 13);
  if (*((unsigned char *)this + 112))
  {
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
    *((unsigned char *)this + 112) = 0;
    *(void *)(result + 456) = 0;
    *(_DWORD *)(result + 452) = 0;
    do
    {
      int v6 = *(_DWORD *)(result + 80 + 4 * v5);
      if (v6)
      {
        if (v6 == 1)
        {
          v3 |= 1 << v5;
          *(_DWORD *)(result + 456) = v3;
        }
      }
      else
      {
        v4 |= 1 << v5;
        *(_DWORD *)(result + 452) = v4;
      }
      ++v5;
    }
    while (v5 != 6);
    BOOL v7 = *(float *)(result + 304) == 0.0 && *(float *)(result + 308) == 0.0;
    int v8 = 0;
    if (!v7 && *(_DWORD *)(result + 80))
    {
      int v8 = 1;
      *(_DWORD *)(result + 460) = 1;
    }
    if ((*(float *)(result + 320) != 0.0 || *(float *)(result + 324) != 0.0) && *(_DWORD *)(result + 84))
    {
      v8 |= 2u;
      *(_DWORD *)(result + 460) = v8;
    }
    if ((*(float *)(result + 336) != 0.0 || *(float *)(result + 340) != 0.0) && *(_DWORD *)(result + 88))
    {
      v8 |= 4u;
      *(_DWORD *)(result + 460) = v8;
    }
    int v9 = *(_DWORD *)(result + 96);
    BOOL v10 = v9 == 0;
    if (*(float *)(result + 384) == 0.0) {
      BOOL v10 = *(float *)(result + 388) == 0.0 || v9 == 0;
    }
    int v12 = *(_DWORD *)(result + 100);
    int v13 = *(_DWORD *)(result + 92);
    if (!v10 && v12 && v13)
    {
      int v14 = v8 | 0x20;
LABEL_43:
      *(_DWORD *)(result + 460) = v14;
      return result;
    }
    if (*(float *)(result + 368) != 0.0 || *(float *)(result + 372) != 0.0)
    {
      if (v13)
      {
        v8 |= 0x10u;
        *(_DWORD *)(result + 460) = v8;
      }
    }
    int v15 = v9 | v12;
    if (*(float *)(result + 352) != 0.0)
    {
      if (!v15) {
        return result;
      }
LABEL_42:
      int v14 = v8 | 8;
      goto LABEL_43;
    }
    BOOL v16 = v15 == 0;
    if (*(float *)(result + 356) != 0.0 && !v16) {
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t non-virtual thunk to'physx::Ext::D6Joint::prepareData(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::prepareData((physx::Ext::D6Joint *)((char *)this - 24));
}

uint64_t physx::Ext::D6Joint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 480);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

float project(float *a1, float *a2, float *a3, BOOL *a4, float a5)
{
  float v7 = *a2;
  float v6 = a2[1];
  float v8 = a2[2];
  float v9 = a3[1];
  float v10 = a3[2];
  float v11 = (float)((float)(v6 * v9) + (float)(*a2 * *a3)) + (float)(v8 * v10);
  if (fabsf(v11) >= 0.000001)
  {
    float v17 = *a3 * v11;
    float v18 = v9 * v11;
    float v19 = v10 * v11;
    float v12 = a2[3];
    float v20 = sqrtf((float)((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19)) + (float)(v12 * v12));
    float v14 = v17 / v20;
    float v15 = v18 / v20;
    float v16 = v19 / v20;
    float v13 = v12 / v20;
  }
  else
  {
    float v12 = a2[3];
    float v13 = 1.0;
    float v14 = 0.0;
    float v15 = 0.0;
    float v16 = 0.0;
  }
  v30[0] = (float)((float)((float)(v7 * v13) - (float)(v12 * v14)) - (float)(v6 * v16)) + (float)(v15 * v8);
  v30[1] = (float)((float)((float)(v6 * v13) - (float)(v12 * v15)) - (float)(v8 * v14)) + (float)(v16 * v7);
  int v30[2] = (float)((float)((float)(v8 * v13) - (float)(v12 * v16)) - (float)(v7 * v15)) + (float)(v14 * v6);
  v30[3] = (float)((float)((float)(v7 * v14) + (float)(v12 * v13)) + (float)(v6 * v15)) + (float)(v8 * v16);
  truncate((uint64_t)&v26, (uint64_t)v30, a4, a5);
  float v21 = v28;
  float v22 = (float)((float)((float)(v13 * v27) + (float)(v29 * v15)) + (float)(v28 * v14)) - (float)(v16 * v26);
  float v23 = (float)((float)((float)(v13 * v28) + (float)(v29 * v16)) + (float)(v26 * v15)) - (float)(v14 * v27);
  float v24 = (float)((float)(v29 * v13) - (float)(v26 * v14)) - (float)(v27 * v15);
  *a1 = (float)((float)((float)(v13 * v26) + (float)(v29 * v14)) + (float)(v27 * v16)) - (float)(v15 * v28);
  a1[1] = v22;
  float result = v24 - (float)(v21 * v16);
  a1[2] = v23;
  a1[3] = result;
  return result;
}

uint64_t truncate(uint64_t result, uint64_t a2, BOOL *a3, float a4)
{
  float v4 = *(float *)(a2 + 12);
  float v5 = *(float *)a2;
  if (v4 >= 0.0)
  {
    _D2 = *(float32x2_t *)(a2 + 4);
  }
  else
  {
    float v5 = -v5;
    _D2 = vneg_f32(*(float32x2_t *)(a2 + 4));
    float v4 = -v4;
  }
  *a3 = v4 < a4;
  if (v4 < a4)
  {
    _S4 = _D2.i32[1];
    __asm { FMLA            S3, S4, V2.S[1] }
    if (_S3 <= 0.0)
    {
      float32x2_t v15 = 0;
      float v14 = 0.0;
    }
    else
    {
      float v13 = 1.0 / sqrtf(_S3);
      float v14 = v5 * v13;
      float32x2_t v15 = vmul_n_f32(_D2, v13);
    }
    float v16 = sqrtf(1.0 - (float)(a4 * a4));
    float v5 = v16 * v14;
    _D2 = vmul_n_f32(v15, v16);
  }
  else
  {
    a4 = v4;
  }
  *(float *)float result = v5;
  *(float32x2_t *)(result + 4) = _D2;
  *(float *)(result + 12) = a4;
  return result;
}

uint64_t D6JointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, int a8, float32x2_t *a9, float32x2_t *a10)
{
  uint64_t v311 = *MEMORY[0x263EF8340];
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v282, a1, a4, (uint64_t)&v296, &v290, a2, (float *)a5, a6, a7);
  unsigned int v17 = *(_DWORD *)(a5 + 460);
  float v18 = v296;
  float v19 = v291;
  if (a8)
  {
    float v21 = v297;
    float v20 = v298;
    float v22 = v299;
    float v23 = v292;
    float v25 = v290.f32[1];
    float v24 = v290.f32[0];
  }
  else
  {
    float v25 = v290.f32[1];
    float v24 = v290.f32[0];
    float v21 = v297;
    float v20 = v298;
    float v22 = v299;
    float v23 = v292;
    if ((float)((float)((float)((float)(v297 * v290.f32[1]) + (float)(v296 * v290.f32[0])) + (float)(v298 * v291))
               + (float)(v299 * v292)) < 0.0)
    {
      float v24 = -v290.f32[0];
      float v25 = -v290.f32[1];
      float v19 = -v291;
      v290.f32[0] = -v290.f32[0];
      v290.f32[1] = -v290.f32[1];
      float v23 = -v292;
      float v291 = -v291;
      float v292 = -v292;
    }
  }
  unsigned int v26 = *(_DWORD *)(a5 + 452);
  int v27 = *(_DWORD *)(a5 + 456);
  float v28 = (float)(v293 - v300) + (float)(v293 - v300);
  float v29 = (float)(v294 - v301) + (float)(v294 - v301);
  float v30 = (float)(v295 - v302) + (float)(v295 - v302);
  float v31 = (float)(v22 * v22) + -0.5;
  float v32 = (float)((float)-(float)(v21 * v29) - (float)(v296 * v28)) - (float)(v20 * v30);
  float v33 = (float)((float)(v22 * (float)((float)(v20 * v29) - (float)(v21 * v30))) + (float)(v28 * v31))
      - (float)(v296 * v32);
  float v34 = (float)((float)(v22 * (float)((float)(v296 * v30) - (float)(v20 * v28))) + (float)(v29 * v31))
      - (float)(v21 * v32);
  float v35 = (float)((float)(v22 * (float)((float)(v21 * v28) - (float)(v296 * v29))) + (float)(v30 * v31))
      - (float)(v20 * v32);
  float v36 = (float)((float)((float)(v22 * v24) - (float)(v296 * v23)) - (float)(v21 * v19)) + (float)(v25 * v20);
  float v37 = (float)((float)((float)(v22 * v25) - (float)(v21 * v23)) - (float)(v20 * v24)) + (float)(v19 * v296);
  float v38 = (float)((float)((float)(v22 * v19) - (float)(v20 * v23)) - (float)(v296 * v25)) + (float)(v24 * v21);
  float v39 = (float)((float)((float)(v296 * v24) + (float)(v22 * v23)) + (float)(v21 * v25)) + (float)(v20 * v19);
  v278[0] = v36;
  v278[1] = v37;
  v278[2] = v38;
  v278[3] = v39;
  float v279 = v33;
  float v280 = v34;
  float v281 = v35;
  float v40 = v21 * (float)(v21 + v21);
  float v41 = v20 * (float)(v20 + v20);
  float v42 = (float)(v296 + v296) * v21;
  float v43 = (float)(v296 + v296) * v20;
  float v44 = (float)(v296 + v296) * v22;
  float v45 = v20 * (float)(v21 + v21);
  float v46 = v22 * (float)(v21 + v21);
  float v47 = v22 * (float)(v20 + v20);
  v270[0] = (float)(1.0 - v40) - v41;
  v270[1] = v42 + v47;
  float v48 = 1.0 - (float)(v296 * (float)(v296 + v296));
  float v271 = v43 - v46;
  float v272 = v42 - v47;
  float v273 = v48 - v41;
  float v274 = v44 + v45;
  float v275 = v43 + v46;
  float v276 = v45 - v44;
  float v277 = v48 - v40;
  float v49 = v24 + v24;
  float v50 = v19 * (float)(v19 + v19);
  float v51 = v25 * (float)(v24 + v24);
  float v52 = v19 * (float)(v24 + v24);
  float v53 = (float)(v25 + v25) * v23;
  float v54 = v23 * (float)(v19 + v19);
  float v262 = v25 * (float)(v25 + v25);
  if ((v17 & 7) != 0)
  {
    char v55 = 0;
    uint64_t v56 = 0;
    *(float *)&unsigned int v57 = *(float *)(a5 + 420) - v34;
    *(float *)&unsigned int v58 = *(float *)(a5 + 424) - v35;
    *(float *)&long long v308 = *(float *)(a5 + 416) - v33;
    *(void *)((char *)&v308 + 4) = __PAIR64__(v58, v57);
    float v59 = &v271;
    uint64_t v60 = v283;
    uint64_t v61 = 304;
    do
    {
      if ((v17 >> v55))
      {
        float v62 = -*(float *)(a5 + v56 + 428);
        int v63 = *(_DWORD *)((char *)&v308 + v56);
        uint64_t v64 = a5 + v61;
        uint64_t v283 = v60 + 80;
        *(_WORD *)(v60 + 78) = 0;
        float v65 = *(v59 - 2);
        *(float *)uint64_t v60 = v65;
        float v66 = *(v59 - 1);
        *(float *)(v60 + 4) = v66;
        float v67 = *v59;
        *(float *)(v60 + 8) = *v59;
        float v68 = (float)(v286 * v65) - (float)(v284 * v67);
        float v69 = (float)(v284 * v66) - (float)(v285 * v65);
        *(float *)(v60 + 16) = (float)(v285 * v67) - (float)(v286 * v66);
        *(float *)(v60 + 20) = v68;
        *(float *)(v60 + 24) = v69;
        *(float *)(v60 + 32) = v65;
        *(float *)(v60 + 36) = v66;
        *(float *)(v60 + 40) = v67;
        float v70 = (float)(v289 * v65) - (float)(v287 * v67);
        float v71 = (float)(v287 * v66) - (float)(v288 * v65);
        *(float *)(v60 + 48) = (float)(v288 * v67) - (float)(v289 * v66);
        *(float *)(v60 + 52) = v70;
        *(float *)(v60 + 56) = v71;
        *(_DWORD *)(v60 + 12) = v63;
        *(float *)(v60 + 28) = v62;
        if (*(_DWORD *)(a5 + 4 * v56 + 316)) {
          __int16 v72 = 35;
        }
        else {
          __int16 v72 = 33;
        }
        *(_WORD *)(v60 + 76) |= v72;
        *(_DWORD *)(v60 + 64) = *(_DWORD *)v64;
        *(_DWORD *)(v60 + 68) = *(_DWORD *)(v64 + 4);
        float v73 = *(float *)(v64 + 8);
        *(float *)(v60 + 44) = -v73;
        *(float *)(v60 + 60) = v73;
        v60 += 80;
      }
      v56 += 4;
      ++v55;
      v59 += 3;
      v61 += 16;
    }
    while (v56 != 12);
  }
  float v74 = (float)(1.0 - v262) - v50;
  float v75 = v54 + v51;
  float v76 = v52 - v53;
  if ((v17 & 0x38) != 0)
  {
    float v77 = *(float *)(a5 + 400);
    float v78 = *(float *)(a5 + 404);
    float v79 = *(float *)(a5 + 408);
    float v80 = *(float *)(a5 + 412);
    if ((float)((float)((float)((float)(v37 * v78) + (float)(v36 * v77)) + (float)(v38 * v79)) + (float)(v39 * v80)) <= 0.0)
    {
      float v77 = -v77;
      float v78 = -v78;
      float v79 = -v79;
      float v80 = -v80;
    }
    float v81 = (float)((float)((float)(v80 * v36) - (float)(v77 * v39)) - (float)(v78 * v38)) + (float)(v37 * v79);
    float v82 = (float)((float)((float)(v80 * v37) - (float)(v78 * v39)) - (float)(v79 * v36)) + (float)(v38 * v77);
    float v83 = (float)((float)((float)(v80 * v38) - (float)(v79 * v39)) - (float)(v77 * v37)) + (float)(v36 * v78);
    if ((v17 & 0x20) != 0)
    {
      float v263 = v54 + v51;
      float v109 = *(float *)(a5 + 440) + *(float *)(a5 + 440);
      float v110 = *(float *)(a5 + 444) + *(float *)(a5 + 444);
      float v111 = *(float *)(a5 + 448) + *(float *)(a5 + 448);
      float v112 = (float)((float)(v21 * v110) + (float)(v18 * v109)) + (float)(v20 * v111);
      float v113 = (float)(v22 * (float)((float)(v110 * (float)-v20) + (float)(v21 * v111))) + (float)(v109 * v31);
      float v114 = (float)(v22 * (float)((float)(v111 * (float)-v18) + (float)(v20 * v109))) + (float)(v110 * v31);
      float v115 = (float)(v22 * (float)((float)(v109 * (float)-v21) + (float)(v18 * v110))) + (float)(v111 * v31);
      long long v308 = xmmword_23435FD50;
      long long v309 = xmmword_23435FD50;
      float v310 = 1.0;
      if (*(float *)(a5 + 384) != 0.0)
      {
        float v257 = v76;
        float v116 = (float)((float)((float)(v18 * v80) + (float)(v22 * v77)) + (float)(v21 * v79))
             + (float)((float)-v78 * v20);
        float v117 = (float)((float)((float)(v21 * v80) + (float)(v22 * v78)) + (float)(v20 * v77))
             + (float)((float)-v79 * v18);
        float v118 = (float)((float)((float)(v20 * v80) + (float)(v22 * v79)) + (float)(v18 * v78))
             + (float)((float)-v77 * v21);
        float v119 = (float)((float)((float)(v77 * (float)-v18) + (float)(v22 * v80)) + (float)((float)-v21 * v78))
             + (float)((float)-v20 * v79);
        float v120 = (float)(v24 * v119) + (float)(v23 * v116);
        float v121 = (float)(v25 * v119) + (float)(v23 * v117);
        float v122 = (float)(v19 * v119) + (float)(v23 * v118);
        float v123 = v23 * v119;
        float v124 = v25 * v117;
        float v125 = (float)((float)(v25 * v117) + (float)(v116 * v24)) + (float)(v118 * v19);
        float v126 = v24 * v116;
        float v127 = (float)(v24 * v117) + (float)(v25 * v116);
        float v128 = (float)(v24 * v118) + (float)(v19 * v116);
        float v129 = (float)((float)(v126 + v126) + (float)(v123 - v125)) * 0.5;
        *(float *)&long long v308 = v129;
        *((float *)&v308 + 1) = (float)(v127 + v122) * 0.5;
        float v130 = (float)(v25 * v118) + (float)(v19 * v117);
        float v131 = (float)((float)(v124 + v124) + (float)(v123 - v125)) * 0.5;
        *((float *)&v308 + 2) = (float)(v128 - v121) * 0.5;
        *((float *)&v308 + 3) = (float)(v127 - v122) * 0.5;
        *(float *)&long long v309 = v131;
        *((float *)&v309 + 1) = (float)(v120 + v130) * 0.5;
        float v132 = (float)((float)((float)(v19 * v118) + (float)(v19 * v118)) + (float)(v123 - v125)) * 0.5;
        *((float *)&v309 + 2) = (float)(v121 + v128) * 0.5;
        *((float *)&v309 + 3) = (float)(v130 - v120) * 0.5;
        float v310 = v132;
        float v133 = v123 + v125;
        float v76 = v257;
        if (v133 == 0.0)
        {
          *(float *)&long long v308 = v129 + 0.00000011921;
          *(float *)&long long v309 = v131 + 0.00000011921;
          float v310 = v132 + 0.00000011921;
        }
      }
      uint64_t v134 = 0;
      uint64_t v135 = v283;
      float v136 = -(float)(v115 + (float)(v20 * v112));
      float v137 = (float *)&v308 + 2;
      float v138 = &v306;
      do
      {
        uint64_t v139 = v135 + v134;
        float v140 = *(v137 - 2);
        float v141 = *(v137 - 1);
        float v142 = *v137;
        v137 += 3;
        float v143 = v142;
        float v144 = (float)((float)(v141 * (float)-(float)(v114 + (float)(v21 * v112)))
                     + (float)(v140 * (float)-(float)(v113 + (float)(v18 * v112))))
             + (float)(v142 * v136);
        float32x2_t v306 = (float32x2_t)__PAIR64__(LODWORD(v82), LODWORD(v81));
        float v307 = v83;
        float v145 = v138->f32[0];
        float v138 = (float32x2_t *)((char *)v138 + 4);
        *(_WORD *)(v139 + 78) = 258;
        *(void *)uint64_t v139 = 0;
        *(_DWORD *)(v139 + 8) = 0;
        *(void *)(v139 + 32) = 0;
        *(_DWORD *)(v139 + 40) = 0;
        *(float *)(v139 + 20) = v141;
        *(float *)(v139 + 24) = v143;
        *(float *)(v139 + 48) = v140;
        *(float *)(v139 + 52) = v141;
        *(float *)(v139 + 56) = v143;
        __int16 v146 = *(_WORD *)(v135 + v134 + 76);
        *(float *)(v139 + 12) = -v145;
        *(float *)(v139 + 16) = v140;
        *(float *)(v139 + 28) = v144;
        if (*(_DWORD *)(a5 + 396)) {
          __int16 v147 = 35;
        }
        else {
          __int16 v147 = 33;
        }
        *(_WORD *)(v139 + 76) = v146 | v147 | 0x40;
        *(_DWORD *)(v139 + 64) = *(_DWORD *)(a5 + 384);
        *(_DWORD *)(v139 + 68) = *(_DWORD *)(a5 + 388);
        float v148 = *(float *)(a5 + 392);
        *(float *)(v139 + 44) = -v148;
        *(float *)(v139 + 60) = v148;
        v134 += 80;
      }
      while (v134 != 240);
      uint64_t v283 = v135 + 240;
      float v75 = v263;
    }
    else
    {
      if ((v17 & 0x10) != 0)
      {
        int v84 = *(_DWORD *)(a5 + 440);
        uint64_t v85 = v283;
        v283 += 80;
        *(_WORD *)(v85 + 78) = 0;
        *(void *)uint64_t v85 = 0;
        *(_DWORD *)(v85 + 8) = 0;
        *(float *)(v85 + 20) = v75;
        *(float *)(v85 + 24) = v76;
        *(void *)(v85 + 32) = 0;
        *(_DWORD *)(v85 + 40) = 0;
        *(float *)(v85 + 48) = v74;
        *(float *)(v85 + 52) = v75;
        *(float *)(v85 + 56) = v76;
        *(float *)(v85 + 12) = v81 * -2.0;
        *(float *)(v85 + 16) = v74;
        __int16 v86 = *(_WORD *)(v85 + 76);
        *(_DWORD *)(v85 + 28) = v84;
        if (*(_DWORD *)(a5 + 380)) {
          __int16 v87 = 35;
        }
        else {
          __int16 v87 = 33;
        }
        *(_WORD *)(v85 + 76) = v86 | v87 | 0x40;
        *(_DWORD *)(v85 + 64) = *(_DWORD *)(a5 + 368);
        *(_DWORD *)(v85 + 68) = *(_DWORD *)(a5 + 372);
        float v88 = *(float *)(a5 + 376);
        *(float *)(v85 + 44) = -v88;
        *(float *)(v85 + 60) = v88;
      }
      if ((v17 & 8) != 0)
      {
        float v89 = v23 * v49;
        float v90 = v19 * (float)(v25 + v25);
        float v91 = 1.0 - (float)(v24 * v49);
        float v92 = (float)((float)((float)(v36 * v77) + (float)(v80 * v39)) + (float)(v78 * v37)) + (float)(v79 * v38);
        float v93 = (float)(v92 * v92) + -0.5;
        float v94 = (float)((float)(v82 * 0.0) + (float)(v81 * 2.0)) + (float)(v83 * 0.0);
        if ((v26 & 0x10) == 0)
        {
          float v95 = v51 - v54;
          int v96 = *(_DWORD *)(a5 + 444);
          uint64_t v97 = v283;
          v283 += 80;
          *(_WORD *)(v97 + 78) = 0;
          *(void *)uint64_t v97 = 0;
          *(_DWORD *)(v97 + 8) = 0;
          *(float *)(v97 + 20) = v91 - v50;
          *(float *)(v97 + 24) = v90 + v89;
          *(void *)(v97 + 32) = 0;
          *(_DWORD *)(v97 + 40) = 0;
          *(float *)(v97 + 48) = v95;
          *(float *)(v97 + 52) = v91 - v50;
          *(float *)(v97 + 56) = v90 + v89;
          *(float *)(v97 + 12) = (float)((float)(v92 * (float)((float)(v82 * -2.0) + (float)(v81 * 0.0)))
                                       + (float)(v93 * 0.0))
                               + (float)(v83 * v94);
          *(float *)(v97 + 16) = v95;
          __int16 v98 = *(_WORD *)(v97 + 76);
          *(_DWORD *)(v97 + 28) = v96;
          if (*(_DWORD *)(a5 + 364)) {
            __int16 v99 = 35;
          }
          else {
            __int16 v99 = 33;
          }
          *(_WORD *)(v97 + 76) = v98 | v99 | 0x40;
          *(_DWORD *)(v97 + 64) = *(_DWORD *)(a5 + 352);
          *(_DWORD *)(v97 + 68) = *(_DWORD *)(a5 + 356);
          float v100 = *(float *)(a5 + 360);
          *(float *)(v97 + 44) = -v100;
          *(float *)(v97 + 60) = v100;
        }
        if ((v26 & 0x20) == 0)
        {
          float v101 = v90 - v89;
          float v102 = v91 - v262;
          float v103 = (float)((float)(v92 * (float)((float)(v81 * -0.0) + (float)(v83 * 2.0))) + (float)(v93 * 0.0))
               + (float)(v82 * v94);
          int v104 = *(_DWORD *)(a5 + 448);
          uint64_t v105 = v283;
          v283 += 80;
          *(_WORD *)(v105 + 78) = 0;
          *(void *)uint64_t v105 = 0;
          *(_DWORD *)(v105 + 8) = 0;
          *(float *)(v105 + 20) = v101;
          *(float *)(v105 + 24) = v102;
          *(void *)(v105 + 32) = 0;
          *(_DWORD *)(v105 + 40) = 0;
          *(float *)(v105 + 48) = v53 + v52;
          *(float *)(v105 + 52) = v101;
          *(float *)(v105 + 56) = v102;
          *(float *)(v105 + 12) = -v103;
          *(float *)(v105 + 16) = v53 + v52;
          __int16 v106 = *(_WORD *)(v105 + 76);
          *(_DWORD *)(v105 + 28) = v104;
          if (*(_DWORD *)(a5 + 364)) {
            __int16 v107 = 35;
          }
          else {
            __int16 v107 = 33;
          }
          *(_WORD *)(v105 + 76) = v106 | v107 | 0x40;
          *(_DWORD *)(v105 + 64) = *(_DWORD *)(a5 + 352);
          *(_DWORD *)(v105 + 68) = *(_DWORD *)(a5 + 356);
          float v108 = *(float *)(a5 + 360);
          *(float *)(v105 + 44) = -v108;
          *(float *)(v105 + 60) = v108;
        }
      }
    }
  }
  if ((v27 & 0x38) != 0)
  {
    if (v36 == 0.0)
    {
      float v152 = 1.0;
      float v150 = 0.0;
      float v151 = 0.0;
    }
    else
    {
      float v149 = sqrtf((float)((float)(v36 * v36) + 0.0) + (float)(v39 * v39));
      float v150 = v36 / v149;
      float v151 = 0.0 / v149;
      float v152 = v39 / v149;
    }
    *(float *)&unsigned int v153 = (float)((float)((float)(v36 * v152) - (float)(v39 * v150)) - (float)(v37 * v151))
                    + (float)(v151 * v38);
    float v154 = (float)((float)((float)(v37 * v152) - (float)(v39 * v151)) - (float)(v38 * v150)) + (float)(v151 * v36);
    *(float *)&unsigned int v155 = (float)((float)((float)(v38 * v152) - (float)(v39 * v151)) - (float)(v36 * v151))
                    + (float)(v150 * v37);
    float v156 = (float)((float)((float)(v36 * v150) + (float)(v39 * v152)) + (float)(v37 * v151)) + (float)(v38 * v151);
    *(void *)&long long v308 = __PAIR64__(LODWORD(v154), v153);
    *((void *)&v308 + 1) = __PAIR64__(LODWORD(v156), v155);
    if ((~v27 & 0x30) == 0)
    {
      if (*(unsigned char *)(a5 + 478))
      {
        int v157 = *(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0 ? *(_DWORD *)(a5 + 256) : 0;
        int v305 = 0;
        uint64_t v303 = *(void *)(a5 + 260);
        int v304 = v157;
        if (physx::Cm::ConeLimitHelperTanLess::getLimit((float *)&v303, (float *)&v308, (float *)&v306, (float *)&v305))
        {
          float v158 = v298;
          float v159 = (float)(v299 * v299) + -0.5;
          float v160 = (float)((float)((float)(v306.f32[1] + v306.f32[1]) * v297)
                       + (float)(v296 * (float)(v306.f32[0] + v306.f32[0])))
               + (float)(v298 * (float)(v307 + v307));
          float v161 = (float)((float)(v299
                               * (float)((float)(v297 * (float)(v307 + v307))
                                       - (float)(v298 * (float)(v306.f32[1] + v306.f32[1]))))
                       + (float)((float)(v306.f32[0] + v306.f32[0]) * v159))
               + (float)(v296 * v160);
          float v162 = (float)((float)(v299
                               * (float)((float)(v298 * (float)(v306.f32[0] + v306.f32[0]))
                                       - (float)(v296 * (float)(v307 + v307))))
                       + (float)((float)(v306.f32[1] + v306.f32[1]) * v159))
               + (float)(v297 * v160);
          float v163 = (float)(v299
                       * (float)((float)(v296 * (float)(v306.f32[1] + v306.f32[1]))
                               - (float)(v297 * (float)(v306.f32[0] + v306.f32[0]))))
               + (float)((float)(v307 + v307) * v159);
          int v164 = v305;
          uint64_t v165 = v283;
          v283 += 80;
          *(_WORD *)(v165 + 78) = 0;
          *(void *)uint64_t v165 = 0;
          float v166 = v163 + (float)(v158 * v160);
          *(_DWORD *)(v165 + 8) = 0;
          *(float *)(v165 + 20) = v162;
          *(float *)(v165 + 24) = v166;
          *(void *)(v165 + 32) = 0;
          *(_DWORD *)(v165 + 40) = 0;
          *(float *)(v165 + 48) = v161;
          *(float *)(v165 + 52) = v162;
          *(float *)(v165 + 56) = v166;
          *(_DWORD *)(v165 + 12) = v164;
          *(float *)(v165 + 16) = v161;
          *(_WORD *)(v165 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v165, a5 + 240);
        }
      }
      if (!*(unsigned char *)(a5 + 479)) {
        goto LABEL_115;
      }
      float v167 = (float *)a5;
      int v168 = 1;
      goto LABEL_62;
    }
    if ((v27 & 0x10) != 0)
    {
      if ((v26 & 0x20) != 0)
      {
        if (*(unsigned char *)(a5 + 479))
        {
          setupPyramidSwingLimits((uint64_t)&v282, (float *)a5, (float *)&v308, &v296, 1, 0);
          goto LABEL_86;
        }
        uint64_t v179 = a5 + 240;
        float v265 = *(float *)(a5 + 260);
        float v181 = atan2f(v154, v156 + 1.0) * 4.0;
        if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0) {
          float v182 = *(float *)(a5 + 256);
        }
        else {
          float v182 = 0.0;
        }
        float v187 = v265;
        if ((float)(v182 - v265) > v181)
        {
          float v188 = -v272;
          float v189 = -v273;
          float v190 = -v274;
          uint64_t v191 = v283;
          v283 += 80;
          *(_WORD *)(v191 + 78) = 0;
          *(void *)uint64_t v191 = 0;
          *(_DWORD *)(v191 + 8) = 0;
          *(float *)(v191 + 20) = v189;
          *(float *)(v191 + 24) = v190;
          *(void *)(v191 + 32) = 0;
          *(_DWORD *)(v191 + 40) = 0;
          *(float *)(v191 + 48) = v188;
          *(float *)(v191 + 52) = v189;
          *(float *)(v191 + 56) = v190;
          *(float *)(v191 + 12) = -(float)((float)-v265 - v181);
          *(float *)(v191 + 16) = v188;
          *(_WORD *)(v191 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v191, a5 + 240);
          float v187 = v265;
        }
        if ((float)(v187 - v182) < v181)
        {
          float v185 = v187 - v181;
          uint64_t v186 = v283;
          v283 += 80;
          *(_WORD *)(v186 + 78) = 0;
          *(void *)uint64_t v186 = 0;
          *(_DWORD *)(v186 + 8) = 0;
          float v175 = v272;
          float v176 = v273;
          float v177 = v274;
          goto LABEL_85;
        }
      }
      else
      {
        if (*(unsigned char *)(a5 + 479))
        {
          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 1005, "D6JointSolverPrep: invalid joint setup. Double pyramid mode not supported.", v14, v15, v16, v252);
          goto LABEL_86;
        }
        float v169 = (float)(v277 * v74) - (float)(v275 * v76);
        float v170 = (float)(v275 * v75) - (float)(v276 * v74);
        float v171 = (float)((float)(v75 * v276) + (float)(v275 * v74)) + (float)(v277 * v76);
        float v172 = -v171;
        float v258 = (float)(v276 * v76) - (float)(v277 * v75);
        float v264 = *(float *)(a5 + 260);
        if (v171 > 1.0) {
          float v172 = -1.0;
        }
        if (v172 > 1.0) {
          float v172 = 1.0;
        }
        float v173 = asinf(v172);
        float v174 = (float)((float)(v169 * v169) + (float)(v258 * v258)) + (float)(v170 * v170);
        float v175 = 0.0;
        float v176 = 0.0;
        float v177 = 0.0;
        if (v174 > 0.0)
        {
          float v178 = 1.0 / sqrtf(v174);
          float v175 = v258 * v178;
          float v176 = v169 * v178;
          float v177 = v170 * v178;
        }
        uint64_t v179 = a5 + 240;
        if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0) {
          float v180 = *(float *)(a5 + 256);
        }
        else {
          float v180 = 0.0;
        }
        float v183 = v264;
        if ((float)(v180 - v264) > v173)
        {
          uint64_t v184 = v283;
          v283 += 80;
          float v259 = v176;
          float v266 = v175;
          *(_WORD *)(v184 + 78) = 0;
          float v253 = v173;
          float v255 = v177;
          *(void *)uint64_t v184 = 0;
          *(_DWORD *)(v184 + 8) = 0;
          *(float *)(v184 + 20) = -v176;
          *(float *)(v184 + 24) = -v177;
          *(void *)(v184 + 32) = 0;
          *(_DWORD *)(v184 + 40) = 0;
          *(float *)(v184 + 48) = -v175;
          *(float *)(v184 + 52) = -v176;
          *(float *)(v184 + 56) = -v177;
          *(float *)(v184 + 12) = -(float)((float)-v183 - v173);
          *(float *)(v184 + 16) = -v175;
          *(_WORD *)(v184 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v184, a5 + 240);
          float v173 = v253;
          float v177 = v255;
          float v176 = v259;
          float v175 = v266;
        }
        if ((float)(v183 - v180) < v173)
        {
          float v185 = v183 - v173;
          uint64_t v186 = v283;
          v283 += 80;
          *(_WORD *)(v186 + 78) = 0;
          *(void *)uint64_t v186 = 0;
          *(_DWORD *)(v186 + 8) = 0;
LABEL_85:
          *(float *)(v186 + 20) = v176;
          *(float *)(v186 + 24) = v177;
          *(void *)(v186 + 32) = 0;
          *(_DWORD *)(v186 + 40) = 0;
          *(float *)(v186 + 48) = v175;
          *(float *)(v186 + 52) = v176;
          *(float *)(v186 + 56) = v177;
          *(float *)(v186 + 12) = v185;
          *(float *)(v186 + 16) = v175;
          *(_WORD *)(v186 + 76) |= 0x40u;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v186, v179);
        }
      }
    }
LABEL_86:
    if ((v27 & 0x20) == 0) {
      goto LABEL_115;
    }
    if ((v26 & 0x10) != 0)
    {
      if (*(unsigned char *)(a5 + 479))
      {
        float v167 = (float *)a5;
        int v168 = 0;
LABEL_62:
        setupPyramidSwingLimits((uint64_t)&v282, v167, (float *)&v308, &v296, v168, 1);
        goto LABEL_115;
      }
      uint64_t v201 = a5 + 240;
      float v268 = *(float *)(a5 + 264);
      float v203 = atan2f(*((float *)&v308 + 2), *((float *)&v308 + 3) + 1.0) * 4.0;
      if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0) {
        float v204 = *(float *)(a5 + 256);
      }
      else {
        float v204 = 0.0;
      }
      float v209 = v268;
      if ((float)(v204 - v268) > v203)
      {
        float v210 = -v275;
        float v211 = -v276;
        float v212 = -v277;
        uint64_t v213 = v283;
        v283 += 80;
        *(_WORD *)(v213 + 78) = 0;
        *(void *)uint64_t v213 = 0;
        *(_DWORD *)(v213 + 8) = 0;
        *(float *)(v213 + 20) = v211;
        *(float *)(v213 + 24) = v212;
        *(void *)(v213 + 32) = 0;
        *(_DWORD *)(v213 + 40) = 0;
        *(float *)(v213 + 48) = v210;
        *(float *)(v213 + 52) = v211;
        *(float *)(v213 + 56) = v212;
        *(float *)(v213 + 12) = -(float)((float)-v268 - v203);
        *(float *)(v213 + 16) = v210;
        *(_WORD *)(v213 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v213, a5 + 240);
        float v209 = v268;
      }
      if ((float)(v209 - v204) >= v203) {
        goto LABEL_115;
      }
      float v207 = v209 - v203;
      uint64_t v208 = v283;
      v283 += 80;
      *(_WORD *)(v208 + 78) = 0;
      *(void *)uint64_t v208 = 0;
      *(_DWORD *)(v208 + 8) = 0;
      float v197 = v275;
      float v198 = v276;
      float v199 = v277;
    }
    else
    {
      if (*(unsigned char *)(a5 + 479))
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtD6Joint.cpp", 1021, "D6JointSolverPrep: invalid joint setup. Double pyramid mode not supported.", v14, v15, v16, v252);
        goto LABEL_115;
      }
      float v192 = (float)(v274 * v74) - (float)(v272 * v76);
      float v193 = (float)(v272 * v75) - (float)(v273 * v74);
      float v194 = (float)((float)(v75 * v273) + (float)(v272 * v74)) + (float)(v274 * v76);
      float v260 = (float)(v273 * v76) - (float)(v274 * v75);
      float v267 = *(float *)(a5 + 264);
      if (v194 < -1.0) {
        float v194 = -1.0;
      }
      if (v194 > 1.0) {
        float v194 = 1.0;
      }
      float v195 = asinf(v194);
      float v196 = (float)((float)(v192 * v192) + (float)(v260 * v260)) + (float)(v193 * v193);
      float v197 = 0.0;
      float v198 = 0.0;
      float v199 = 0.0;
      if (v196 > 0.0)
      {
        float v200 = 1.0 / sqrtf(v196);
        float v197 = -(float)(v260 * v200);
        float v198 = -(float)(v192 * v200);
        float v199 = -(float)(v193 * v200);
      }
      uint64_t v201 = a5 + 240;
      if (*(float *)(a5 + 252) <= 0.0 && *(float *)(a5 + 248) <= 0.0) {
        float v202 = *(float *)(a5 + 256);
      }
      else {
        float v202 = 0.0;
      }
      float v205 = v267;
      if ((float)(v202 - v267) > v195)
      {
        uint64_t v206 = v283;
        v283 += 80;
        float v261 = v198;
        float v269 = v197;
        *(_WORD *)(v206 + 78) = 0;
        float v254 = v195;
        float v256 = v199;
        *(void *)uint64_t v206 = 0;
        *(_DWORD *)(v206 + 8) = 0;
        *(float *)(v206 + 20) = -v198;
        *(float *)(v206 + 24) = -v199;
        *(void *)(v206 + 32) = 0;
        *(_DWORD *)(v206 + 40) = 0;
        *(float *)(v206 + 48) = -v197;
        *(float *)(v206 + 52) = -v198;
        *(float *)(v206 + 56) = -v199;
        *(float *)(v206 + 12) = -(float)((float)-v205 - v195);
        *(float *)(v206 + 16) = -v197;
        *(_WORD *)(v206 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v206, a5 + 240);
        float v195 = v254;
        float v199 = v256;
        float v198 = v261;
        float v197 = v269;
      }
      if ((float)(v205 - v202) >= v195) {
        goto LABEL_115;
      }
      float v207 = v205 - v195;
      uint64_t v208 = v283;
      v283 += 80;
      *(_WORD *)(v208 + 78) = 0;
      *(void *)uint64_t v208 = 0;
      *(_DWORD *)(v208 + 8) = 0;
    }
    *(float *)(v208 + 20) = v198;
    *(float *)(v208 + 24) = v199;
    *(void *)(v208 + 32) = 0;
    *(_DWORD *)(v208 + 40) = 0;
    *(float *)(v208 + 48) = v197;
    *(float *)(v208 + 52) = v198;
    *(float *)(v208 + 56) = v199;
    *(float *)(v208 + 12) = v207;
    *(float *)(v208 + 16) = v197;
    *(_WORD *)(v208 + 76) |= 0x40u;
    physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v208, v201);
LABEL_115:
    if ((v27 & 8) != 0)
    {
      float v214 = sqrtf((float)((float)((float)(v151 * v151) + (float)(v150 * v150)) + (float)(v151 * v151))+ (float)(v152 * v152));
      if (v214 != 0.0)
      {
        float v150 = v150 / v214;
        float v152 = v152 / v214;
      }
      float v215 = -1.0;
      if (v152 >= -1.0) {
        float v215 = v152;
      }
      if (v215 > 1.0) {
        float v215 = 1.0;
      }
      float v216 = acosf(v215);
      float v217 = v216 + v216;
      if (v150 >= 0.0) {
        float v218 = v217;
      }
      else {
        float v218 = -v217;
      }
      float v219 = *(float *)(a5 + 236);
      if (*(float *)(a5 + 224) <= 0.0 && *(float *)(a5 + 220) <= 0.0) {
        float v220 = *(float *)(a5 + 228);
      }
      else {
        float v220 = 0.0;
      }
      float v221 = *(float *)(a5 + 232);
      if ((float)(v219 + v220) > v218)
      {
        uint64_t v222 = v283;
        v283 += 80;
        *(_WORD *)(v222 + 78) = 0;
        *(void *)uint64_t v222 = 0;
        *(_DWORD *)(v222 + 8) = 0;
        *(float *)(v222 + 20) = -v75;
        *(float *)(v222 + 24) = -v76;
        *(void *)(v222 + 32) = 0;
        *(_DWORD *)(v222 + 40) = 0;
        *(float *)(v222 + 48) = -v74;
        *(float *)(v222 + 52) = -v75;
        *(float *)(v222 + 56) = -v76;
        *(float *)(v222 + 12) = -(float)(v219 - v218);
        *(float *)(v222 + 16) = -v74;
        *(_WORD *)(v222 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v222, a5 + 212);
      }
      if ((float)(v221 - v220) < v218)
      {
        uint64_t v223 = v283;
        v283 += 80;
        *(_WORD *)(v223 + 78) = 0;
        *(void *)uint64_t v223 = 0;
        *(_DWORD *)(v223 + 8) = 0;
        *(float *)(v223 + 20) = v75;
        *(float *)(v223 + 24) = v76;
        *(void *)(v223 + 32) = 0;
        *(_DWORD *)(v223 + 40) = 0;
        *(float *)(v223 + 48) = v74;
        *(float *)(v223 + 52) = v75;
        *(float *)(v223 + 56) = v76;
        *(float *)(v223 + 12) = v221 - v218;
        *(float *)(v223 + 16) = v74;
        *(_WORD *)(v223 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v223, a5 + 212);
      }
    }
  }
  if ((v27 & 7) != 0)
  {
    if (*(unsigned char *)(a5 + 476))
    {
      float v224 = computeLimitedDistance(*(_DWORD *)(a5 + 456), (uint64_t)v278, (uint64_t)v270, (float32x2_t *)&v308);
      if (v224 > *(float *)(a5 + 464))
      {
        float v225 = *(float *)(a5 + 124);
        if (*(float *)(a5 + 116) <= 0.0 && *(float *)(a5 + 112) <= 0.0) {
          float v226 = *(float *)(a5 + 120);
        }
        else {
          float v226 = 0.0;
        }
        if ((float)(v224 + v226) > v225)
        {
          float v227 = (float)(1.0 / v224) * *(float *)&v308;
          float v228 = (float)(1.0 / v224) * *((float *)&v308 + 1);
          float v229 = (float)(1.0 / v224) * *((float *)&v308 + 2);
          float v230 = v225 - v224;
          uint64_t v231 = v283;
          v283 += 80;
          *(_WORD *)(v231 + 78) = 0;
          *(float *)uint64_t v231 = v227;
          *(float *)(v231 + 4) = v228;
          *(float *)(v231 + 8) = v229;
          float v232 = (float)(v286 * v227) - (float)(v284 * v229);
          float v233 = (float)(v284 * v228) - (float)(v285 * v227);
          *(float *)(v231 + 16) = (float)(v285 * v229) - (float)(v286 * v228);
          *(float *)(v231 + 20) = v232;
          *(float *)(v231 + 24) = v233;
          *(float *)(v231 + 32) = v227;
          *(float *)(v231 + 36) = v228;
          *(float *)(v231 + 40) = v229;
          float v234 = (float)(v288 * v229) - (float)(v289 * v228);
          float v235 = (float)(v289 * v227) - (float)(v287 * v229);
          float v236 = (float)(v287 * v228) - (float)(v288 * v227);
          *(float *)(v231 + 48) = v234;
          *(float *)(v231 + 52) = v235;
          *(float *)(v231 + 56) = v236;
          *(float *)(v231 + 12) = v230;
          physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v282, v231, a5 + 104);
        }
      }
    }
    if (*(unsigned char *)(a5 + 477))
    {
      if ((v27 & 1) != 0 && *(float *)(a5 + 152) <= *(float *)(a5 + 148)) {
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 128), v270, v279);
      }
      if ((v27 & 2) != 0 && *(float *)(a5 + 180) <= *(float *)(a5 + 176)) {
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 156), &v272, v280);
      }
      if ((v27 & 4) != 0 && *(float *)(a5 + 208) <= *(float *)(a5 + 204)) {
        setupLinearLimit((uint64_t)&v282, (float *)(a5 + 184), &v275, v281);
      }
    }
  }
  if ((v26 & 0x38) == 0x20)
  {
    v26 &= ~0x20u;
    float v243 = v274;
    float v244 = (float)(v75 * v274) - (float)(v76 * v273);
    float v245 = (float)(v76 * v272) - (float)(v74 * v274);
    float v246 = (float)(v74 * v273) - (float)(v75 * v272);
    float v247 = (float)(v75 * v273) + (float)(v74 * v272);
    uint64_t v248 = v283;
    v283 += 80;
    *(_WORD *)(v248 + 78) = 2048;
    *(void *)uint64_t v248 = 0;
    *(_DWORD *)(v248 + 8) = 0;
    *(float *)(v248 + 20) = v245;
    *(float *)(v248 + 24) = v246;
    *(void *)(v248 + 32) = 0;
    *(_DWORD *)(v248 + 40) = 0;
    *(float *)(v248 + 48) = v244;
    *(float *)(v248 + 52) = v245;
    *(float *)(v248 + 56) = v246;
    *(float *)(v248 + 12) = -(float)(v247 + (float)(v76 * v243));
    *(float *)(v248 + 16) = v244;
    *(_WORD *)(v248 + 76) |= 0x50u;
  }
  else if ((v26 & 0x38) == 0x10)
  {
    float v237 = v277;
    float v238 = (float)(v75 * v277) - (float)(v76 * v276);
    float v239 = (float)(v76 * v275) - (float)(v74 * v277);
    float v240 = (float)(v74 * v276) - (float)(v75 * v275);
    float v241 = (float)(v75 * v276) + (float)(v74 * v275);
    uint64_t v242 = v283;
    v283 += 80;
    *(_WORD *)(v242 + 78) = 2048;
    *(void *)uint64_t v242 = 0;
    *(_DWORD *)(v242 + 8) = 0;
    *(float *)(v242 + 20) = v239;
    *(float *)(v242 + 24) = v240;
    *(void *)(v242 + 32) = 0;
    *(_DWORD *)(v242 + 40) = 0;
    *(float *)(v242 + 48) = v238;
    *(float *)(v242 + 52) = v239;
    *(float *)(v242 + 56) = v240;
    *(float *)(v242 + 12) = -(float)(v241 + (float)(v76 * v237));
    *(float *)(v242 + 16) = v238;
    *(_WORD *)(v242 + 76) |= 0x50u;
    v26 &= ~0x10u;
  }
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v282, &v296, (float *)&v290, &v279, v26 & 7, v26 >> 3, (float *)&v308, (float *)&v306);
  float32_t v249 = *((float *)&v308 + 2) + a6[3].f32[0];
  *a9 = vadd_f32(*(float32x2_t *)&v308, a6[2]);
  a9[1].f32[0] = v249;
  float32_t v250 = v307 + a7[3].f32[0];
  *a10 = vadd_f32(v306, a7[2]);
  a10[1].f32[0] = v250;
  return -858993459 * ((unint64_t)(v283 - v282) >> 4);
}

void D6JointProject(uint64_t a1, float *a2, float *a3, int a4)
{
  physx::Ext::joint::computeJointFrames(&v141, &v134, (float *)a1, a2, a3);
  float v9 = v141;
  float v8 = v142;
  float v11 = v143;
  float v10 = v144;
  float v114 = v145;
  float v115 = v138;
  float v12 = (float)(v138 - v114) + (float)(v138 - v114);
  float v13 = (float)(v139 - v146) + (float)(v139 - v146);
  float v14 = (float)(v140 - v147) + (float)(v140 - v147);
  float v15 = (float)(v10 * v10) + -0.5;
  float v16 = (float)((float)-(float)(v142 * v13) - (float)(v141 * v12)) - (float)(v143 * v14);
  float v17 = (float)((float)(v144 * (float)((float)(v143 * v13) - (float)(v142 * v14))) + (float)(v12 * v15))
      - (float)(v141 * v16);
  float v18 = (float)((float)(v144 * (float)((float)(v141 * v14) - (float)(v143 * v12))) + (float)(v13 * v15))
      - (float)(v142 * v16);
  float v113 = v15;
  float v19 = (float)((float)(v144 * (float)((float)(v142 * v12) - (float)(v141 * v13))) + (float)(v14 * v15))
      - (float)(v143 * v16);
  float v20 = (float)((float)((float)(v144 * v134) - (float)(v141 * v137)) - (float)(v142 * v136)) + (float)(v135 * v143);
  float v21 = (float)((float)((float)(v144 * v135) - (float)(v142 * v137)) - (float)(v143 * v134)) + (float)(v136 * v141);
  float v22 = (float)((float)((float)(v144 * v136) - (float)(v143 * v137)) - (float)(v141 * v135)) + (float)(v134 * v142);
  float v116 = v134;
  float v117 = v135;
  float v118 = v137;
  float v119 = v136;
  float v23 = (float)((float)((float)(v141 * v134) + (float)(v144 * v137)) + (float)(v142 * v135)) + (float)(v143 * v136);
  v133[0] = v20;
  v133[1] = v21;
  v133[2] = v22;
  v133[3] = v23;
  v133[4] = v17;
  v133[5] = v18;
  v133[6] = v19;
  unsigned int v24 = *(_DWORD *)(a1 + 452);
  float v124 = v18;
  float v125 = v17;
  if (v24) {
    float v25 = v17;
  }
  else {
    float v25 = 0.0;
  }
  if ((v24 & 2) != 0) {
    float v26 = v18;
  }
  else {
    float v26 = 0.0;
  }
  float v123 = v19;
  if ((v24 & 4) != 0) {
    float v27 = v19;
  }
  else {
    float v27 = 0.0;
  }
  float v28 = *(float *)(a1 + 468);
  float v29 = (float)((float)(v26 * v26) + (float)(v25 * v25)) + (float)(v27 * v27);
  float v126 = v28 * v28;
  float v127 = v27;
  float v128 = v26;
  float v129 = v25;
  if (v29 > (float)(v28 * v28))
  {
    float v30 = 1.0 / sqrtf(v29);
    float v25 = v28 * (float)(v25 * v30);
    float v26 = v28 * (float)(v26 * v30);
    float v27 = v28 * (float)(v27 * v30);
  }
  float v120 = v27;
  float v121 = v26;
  float v122 = v25;
  float v130 = v29;
  unsigned int v31 = v24 >> 3;
  float v32 = cosf(*(float *)(a1 + 472) * 0.5);
  BOOL v132 = 0;
  switch(v31)
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
      *(void *)&long long v131 = __PAIR64__(LODWORD(v21), LODWORD(v20));
      *((void *)&v131 + 1) = __PAIR64__(LODWORD(v23), LODWORD(v22));
      break;
    case 3u:
      uint64_t v148 = 0;
      int v149 = 1065353216;
      goto LABEL_19;
    case 5u:
      uint64_t v33 = 0x3F80000000000000;
      goto LABEL_18;
    case 6u:
      uint64_t v33 = 1065353216;
LABEL_18:
      uint64_t v148 = v33;
      int v149 = 0;
LABEL_19:
      project((float *)&v131, v133, (float *)&v148, &v132, v32);
      break;
    case 7u:
      truncate((uint64_t)&v131, (uint64_t)v133, &v132, v32);
      break;
    default:
      long long v131 = xmmword_23435FBB0;
      break;
  }
  if (v130 > v126 || v132)
  {
    float v35 = (float)(v125 - v129) + v122;
    float v36 = (float)(v124 - v128) + v121;
    float v37 = (float)(v123 - v127) + v120;
    if (a4)
    {
      float v38 = *(float *)(a1 + 60) * -2.0;
      float v39 = *(float *)(a1 + 64) * -2.0;
      float v40 = *(float *)(a1 + 68) * -2.0;
      float v42 = *(float *)(a1 + 52);
      float v41 = *(float *)(a1 + 56);
      float v43 = (float)(v41 * v41) + -0.5;
      float v44 = *(float *)(a1 + 44);
      float v45 = *(float *)(a1 + 48);
      float v46 = (float)((float)(v39 * v45) + (float)(v44 * v38)) + (float)(v42 * v40);
      float v47 = (float)((float)(v38 * v43) - (float)((float)((float)(v45 * v40) - (float)(v42 * v39)) * v41))
          + (float)(v44 * v46);
      float v48 = (float)((float)(v39 * v43) - (float)((float)((float)(v42 * v38) - (float)(v44 * v40)) * v41))
          + (float)(v45 * v46);
      float v49 = (float)((float)(v40 * v43) - (float)((float)((float)(v44 * v39) - (float)(v45 * v38)) * v41))
          + (float)(v42 * v46);
      float v50 = v47 + v47;
      float v51 = v49 + v49;
      float v52 = (float)(*((float *)&v131 + 3) * *((float *)&v131 + 3)) + -0.5;
      float v53 = (float)((float)(*((float *)&v131 + 1) * (float)(v48 + v48)) + (float)(*(float *)&v131 * (float)(v47 + v47)))
          + (float)(*((float *)&v131 + 2) * v51);
      float v54 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 1) * v51)
                                  - (float)(*((float *)&v131 + 2) * (float)(v48 + v48))))
                  + (float)((float)(v47 + v47) * v52))
          + (float)(*(float *)&v131 * v53);
      float v55 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 2) * (float)(v47 + v47)) - (float)(*(float *)&v131 * v51)))
                  + (float)((float)(v48 + v48) * v52))
          + (float)(*((float *)&v131 + 1) * v53);
      float v56 = v37
          + (float)((float)((float)(*((float *)&v131 + 3)
                                  * (float)((float)(*(float *)&v131 * (float)(v48 + v48))
                                          - (float)(*((float *)&v131 + 1) * v50)))
                          + (float)(v51 * v52))
                  + (float)(*((float *)&v131 + 2) * v53));
      float v57 = (float)((float)((float)(*(float *)&v131 * v41) - (float)(*((float *)&v131 + 3) * v44))
                  - (float)(*((float *)&v131 + 1) * v42))
          + (float)(v45 * *((float *)&v131 + 2));
      float v58 = (float)((float)((float)(*((float *)&v131 + 1) * v41) - (float)(*((float *)&v131 + 3) * v45))
                  - (float)(*((float *)&v131 + 2) * v44))
          + (float)(v42 * *(float *)&v131);
      float v59 = (float)((float)((float)(*((float *)&v131 + 2) * v41) - (float)(*((float *)&v131 + 3) * v42))
                  - (float)(*(float *)&v131 * v45))
          + (float)(v44 * *((float *)&v131 + 1));
      float v60 = (float)((float)((float)(*(float *)&v131 * v44) + (float)(*((float *)&v131 + 3) * v41))
                  + (float)(*((float *)&v131 + 1) * v45))
          + (float)(*((float *)&v131 + 2) * v42);
      float v61 = (float)(v35 + v54) + (float)(v35 + v54);
      float v62 = (float)(v36 + v55) + (float)(v36 + v55);
      float v63 = v56 + v56;
      float v64 = (float)((float)(v8 * v62) + (float)(v9 * v61)) + (float)(v11 * (float)(v56 + v56));
      float v65 = (float)((float)(v10 * (float)((float)(v62 * (float)-v11) + (float)(v8 * v63))) + (float)(v61 * v113))
          + (float)(v9 * v64);
      float v66 = (float)((float)(v10 * (float)((float)(v63 * (float)-v9) + (float)(v11 * v61))) + (float)(v62 * v113))
          + (float)(v8 * v64);
      float v67 = (float)((float)(v10 * (float)((float)(v61 * (float)-v8) + (float)(v9 * v62))) + (float)(v63 * v113))
          + (float)(v11 * v64);
      float v68 = v114 + v65;
      float v69 = v146 + v66;
      float v70 = v147 + v67;
      float v71 = (float)((float)((float)(v9 * v60) + (float)(v10 * v57)) + (float)(v8 * v59)) - (float)(v58 * v11);
      float v72 = (float)((float)((float)(v8 * v60) + (float)(v10 * v58)) + (float)(v11 * v57)) - (float)(v59 * v9);
      float v73 = (float)((float)((float)(v11 * v60) + (float)(v10 * v59)) + (float)(v9 * v58)) - (float)(v57 * v8);
      float v74 = (float)((float)((float)(v57 * (float)-v9) + (float)(v10 * v60)) + (float)((float)-v8 * v58))
          + (float)((float)-v11 * v59);
      *a3 = v71;
      a3[1] = v72;
      a3[2] = v73;
      a3[3] = v74;
      a3[4] = v68;
      a3[5] = v69;
      a3[6] = v70;
      float v75 = sqrtf((float)((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73)) + (float)(v74 * v74));
      if (v75 != 0.0)
      {
        *a3 = v71 / v75;
        a3[1] = v72 / v75;
        a3[2] = v73 / v75;
        a3[3] = v74 / v75;
      }
    }
    else
    {
      float v76 = *(float *)(a1 + 32) * -2.0;
      float v77 = *(float *)(a1 + 36) * -2.0;
      float v78 = *(float *)(a1 + 40) * -2.0;
      float v80 = *(float *)(a1 + 24);
      float v79 = *(float *)(a1 + 28);
      float v81 = (float)(v79 * v79) + -0.5;
      float v82 = *(float *)(a1 + 16);
      float v83 = *(float *)(a1 + 20);
      float v84 = (float)((float)(v77 * v83) + (float)(v82 * v76)) + (float)(v80 * v78);
      float v85 = (float)((float)(v76 * v81) - (float)((float)((float)(v83 * v78) - (float)(v80 * v77)) * v79))
          + (float)(v82 * v84);
      float v86 = (float)((float)(v77 * v81) - (float)((float)((float)(v80 * v76) - (float)(v82 * v78)) * v79))
          + (float)(v83 * v84);
      float v87 = (float)((float)((float)(v78 * v81) - (float)((float)((float)(v82 * v77) - (float)(v83 * v76)) * v79))
                  + (float)(v80 * v84))
          - v37;
      float v88 = (float)(v85 - v35) + (float)(v85 - v35);
      float v89 = (float)(v86 - v36) + (float)(v86 - v36);
      float v90 = v87 + v87;
      float v91 = (float)(*((float *)&v131 + 3) * *((float *)&v131 + 3)) + -0.5;
      float v92 = (float)((float)-(float)(*((float *)&v131 + 1) * v89) - (float)(*(float *)&v131 * v88))
          - (float)(*((float *)&v131 + 2) * v90);
      float v93 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 2) * v89) - (float)(*((float *)&v131 + 1) * v90)))
                  + (float)(v88 * v91))
          - (float)(*(float *)&v131 * v92);
      float v94 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*(float *)&v131 * v90) - (float)(*((float *)&v131 + 2) * v88)))
                  + (float)(v89 * v91))
          - (float)(*((float *)&v131 + 1) * v92);
      float v95 = (float)((float)(*((float *)&v131 + 3)
                          * (float)((float)(*((float *)&v131 + 1) * v88) - (float)(*(float *)&v131 * v89)))
                  + (float)(v90 * v91))
          - (float)(*((float *)&v131 + 2) * v92);
      float v96 = (float)((float)((float)-(float)(*(float *)&v131 * v79) - (float)(*((float *)&v131 + 3) * v82))
                  + (float)(*((float *)&v131 + 1) * v80))
          - (float)(v83 * *((float *)&v131 + 2));
      float v97 = (float)((float)((float)-(float)(*((float *)&v131 + 1) * v79) - (float)(*((float *)&v131 + 3) * v83))
                  + (float)(*((float *)&v131 + 2) * v82))
          - (float)(v80 * *(float *)&v131);
      float v98 = (float)((float)((float)-(float)(*((float *)&v131 + 2) * v79) - (float)(*((float *)&v131 + 3) * v80))
                  + (float)(*(float *)&v131 * v83))
          - (float)(v82 * *((float *)&v131 + 1));
      float v99 = (float)((float)((float)(*((float *)&v131 + 3) * v79) - (float)(v82 * *(float *)&v131))
                  - (float)(*((float *)&v131 + 1) * v83))
          - (float)(*((float *)&v131 + 2) * v80);
      float v100 = v95 + v95;
      float v101 = (float)(v118 * v118) + -0.5;
      float v102 = (float)((float)(v117 * (float)(v94 + v94)) + (float)(v116 * (float)(v93 + v93)))
           + (float)(v119 * (float)(v95 + v95));
      float v103 = (float)((float)(v118 * (float)((float)(v119 * (float)(v93 + v93)) - (float)(v116 * v100)))
                   + (float)((float)(v94 + v94) * v101))
           + (float)(v117 * v102);
      float v104 = (float)((float)(v118 * (float)((float)(v116 * (float)(v94 + v94)) - (float)(v117 * (float)(v93 + v93))))
                   + (float)(v100 * v101))
           + (float)(v119 * v102);
      float v105 = v115
           + (float)((float)((float)(v118 * (float)((float)(v117 * v100) - (float)(v119 * (float)(v94 + v94))))
                           + (float)((float)(v93 + v93) * v101))
                   + (float)(v116 * v102));
      float v106 = v139 + v103;
      float v107 = v140 + v104;
      float v108 = (float)((float)((float)(v116 * v99) + (float)(v118 * v96)) + (float)(v117 * v98)) - (float)(v97 * v119);
      float v109 = (float)((float)((float)(v117 * v99) + (float)(v118 * v97)) + (float)(v119 * v96)) - (float)(v98 * v116);
      float v110 = (float)((float)((float)(v119 * v99) + (float)(v118 * v98)) + (float)(v116 * v97)) - (float)(v96 * v117);
      float v111 = (float)((float)((float)(v118 * v99) - (float)(v116 * v96)) - (float)(v117 * v97)) - (float)(v119 * v98);
      *a2 = v108;
      a2[1] = v109;
      a2[2] = v110;
      a2[3] = v111;
      a2[4] = v105;
      a2[5] = v106;
      a2[6] = v107;
      float v112 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v110 * v110))+ (float)(v111 * v111));
      if (v112 != 0.0)
      {
        *a2 = v108 / v112;
        a2[1] = v109 / v112;
        a2[2] = v110 / v112;
        a2[3] = v111 / v112;
      }
    }
  }
}

void D6JointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8 = physx::Ext::joint::computeJointFrames(&v203, &v196, (float *)a2, a3, a4);
  if (a5) {
    (*(void (**)(uint64_t, float *, float *, float))(*(void *)a1 + 16))(a1, &v203, &v196, v8);
  }
  if ((a5 & 2) == 0) {
    return;
  }
  float v10 = v203;
  float v9 = v204;
  float v11 = v205;
  float v12 = (float)(v200 - v207) + (float)(v200 - v207);
  float v13 = (float)(v201 - v208) + (float)(v201 - v208);
  float v14 = (float)(v202 - v209) + (float)(v202 - v209);
  float v15 = (float)(v206 * v206) + -0.5;
  float v16 = (float)((float)-(float)(v204 * v13) - (float)(v203 * v12)) - (float)(v205 * v14);
  float v17 = (float)((float)(v206 * (float)((float)(v205 * v13) - (float)(v204 * v14))) + (float)(v12 * v15))
      - (float)(v203 * v16);
  float v18 = (float)((float)(v206 * (float)((float)(v203 * v14) - (float)(v205 * v12))) + (float)(v13 * v15))
      - (float)(v204 * v16);
  float v19 = (float)((float)(v206 * (float)((float)(v204 * v12) - (float)(v203 * v13))) + (float)(v14 * v15))
      - (float)(v205 * v16);
  float v21 = v198;
  float v20 = v199;
  float v23 = v196;
  float v22 = v197;
  float v189 = (float)((float)((float)(v206 * v196) - (float)(v203 * v199)) - (float)(v204 * v198)) + (float)(v197 * v205);
  float v190 = (float)((float)((float)(v206 * v197) - (float)(v204 * v199)) - (float)(v205 * v196)) + (float)(v198 * v203);
  float v191 = (float)((float)((float)(v206 * v198) - (float)(v205 * v199)) - (float)(v203 * v197)) + (float)(v196 * v204);
  float v192 = (float)((float)((float)(v203 * v196) + (float)(v206 * v199)) + (float)(v204 * v197)) + (float)(v205 * v198);
  float v193 = v17;
  float v194 = v18;
  float v195 = v19;
  float v24 = v10 + v10;
  float v25 = v10 * (float)(v10 + v10);
  float v26 = v9 * (float)(v9 + v9);
  float v27 = v11 * (float)(v11 + v11);
  float v28 = (float)(v10 + v10) * v204;
  float v29 = v24 * v205;
  float v30 = v24 * v206;
  float v31 = (float)(v9 + v9) * v205;
  float v32 = (float)(v9 + v9) * v206;
  float v33 = (float)(v11 + v11) * v206;
  float v34 = (float)(1.0 - v26) - v27;
  float v35 = v28 + v33;
  float v36 = v29 - v32;
  v182[0] = v34;
  v182[1] = v28 + v33;
  float v37 = v28 - v33;
  float v38 = 1.0 - v25;
  float v39 = (float)(1.0 - v25) - v27;
  float v40 = v31 + v30;
  v182[2] = v29 - v32;
  float v183 = v37;
  float v184 = v39;
  float v185 = v31 + v30;
  float v41 = v29 + v32;
  float v42 = v31 - v30;
  float v43 = v38 - v26;
  float v186 = v29 + v32;
  float v187 = v31 - v30;
  float v188 = v43;
  if (*(unsigned char *)(a2 + 477))
  {
    float v44 = &v186;
    switch(*(_DWORD *)(a2 + 456))
    {
      case 1:
        float v45 = (float *)(a2 + 128);
        float v46 = v182;
        uint64_t v47 = a1;
        goto LABEL_10;
      case 2:
        float v45 = (float *)(a2 + 156);
        uint64_t v47 = a1;
        float v46 = &v183;
        float v17 = v18;
        goto LABEL_10;
      case 3:
        float v48 = (float *)(a2 + 128);
        float v49 = (float *)(a2 + 156);
        float v50 = v182;
        uint64_t v51 = a1;
        float v44 = &v183;
        float v19 = v18;
        goto LABEL_13;
      case 4:
        float v45 = (float *)(a2 + 184);
        uint64_t v47 = a1;
        float v46 = &v186;
        float v17 = v19;
LABEL_10:
        visualizeLine(v47, &v207, v46, v45, v17);
        break;
      case 5:
        float v48 = (float *)(a2 + 128);
        float v49 = (float *)(a2 + 184);
        float v50 = v182;
        uint64_t v51 = a1;
        goto LABEL_13;
      case 6:
        float v48 = (float *)(a2 + 156);
        float v49 = (float *)(a2 + 184);
        uint64_t v51 = a1;
        float v50 = &v183;
        float v17 = v18;
LABEL_13:
        visualizeQuad(v51, &v207, v50, v48, v44, v49, v17, v19);
        break;
      case 7:
        if (*(float *)(a2 + 140) <= 0.0 && *(float *)(a2 + 136) <= 0.0) {
          float v52 = *(float *)(a2 + 144);
        }
        else {
          float v52 = 0.0;
        }
        if (*(float *)(a2 + 168) <= 0.0 && *(float *)(a2 + 164) <= 0.0) {
          float v53 = *(float *)(a2 + 172);
        }
        else {
          float v53 = 0.0;
        }
        float v54 = *(float *)(a2 + 148);
        float v55 = *(float *)(a2 + 152);
        float v56 = *(float *)(a2 + 176);
        float v57 = *(float *)(a2 + 180);
        if (*(float *)(a2 + 196) <= 0.0 && *(float *)(a2 + 192) <= 0.0) {
          float v58 = *(float *)(a2 + 200);
        }
        else {
          float v58 = 0.0;
        }
        float v59 = v53 + v57;
        float v60 = v56 - v53;
        float v61 = *(float *)(a2 + 204);
        float v62 = *(float *)(a2 + 208);
        if ((float)(v61 - v58) >= v19
          && (float)(v58 + v62) <= v19
          && v60 >= v18
          && v59 <= v18
          && (float)(v54 - v52) >= v17
          && (float)(v52 + v55) <= v17)
        {
          uint64_t v68 = 0xFFFFFFLL;
        }
        else
        {
          uint64_t v68 = 16711680;
        }
        float v69 = v34 * v55;
        float v70 = v35 * v55;
        float v71 = v36 * v55;
        float v72 = v34 * v54;
        float v73 = v35 * v54;
        float v74 = v36 * v54;
        float v75 = v37 * v57;
        float v76 = v39 * v57;
        float v77 = v40 * v57;
        float v78 = v37 * v56;
        float v79 = v39 * v56;
        float v80 = v40 * v56;
        float v81 = v41 * v62;
        float v82 = v42 * v62;
        float v83 = v43 * v62;
        float v84 = v41 * v61;
        float v85 = v42 * v61;
        float v86 = v43 * v61;
        float v87 = v207 + v69;
        float v88 = v208 + v70;
        float v89 = v209 + v71;
        float v90 = v87 + v75;
        float v91 = v88 + v76;
        float v92 = v89 + v77;
        *(float *)&long long v175 = (float)(v87 + v75) + v81;
        *((float *)&v175 + 1) = (float)(v88 + v76) + v82;
        *((float *)&v175 + 2) = (float)(v89 + v77) + v83;
        float v93 = v207 + v72;
        float v94 = v208 + v73;
        float v95 = v209 + v74;
        float v96 = v93 + v75;
        float v97 = v94 + v76;
        float v98 = v95 + v77;
        *(float *)&long long v172 = (float)(v93 + v75) + v81;
        *((float *)&v172 + 1) = (float)(v94 + v76) + v82;
        *((float *)&v172 + 2) = (float)(v95 + v77) + v83;
        float v99 = v93 + v78;
        float v100 = v94 + v79;
        float v101 = v95 + v80;
        *(float *)&long long v168 = v99 + v81;
        *((float *)&v168 + 1) = v100 + v82;
        *((float *)&v168 + 2) = v101 + v83;
        float v102 = v87 + v78;
        float v103 = v88 + v79;
        float v104 = v89 + v80;
        v210[0] = v102 + v81;
        v210[1] = v103 + v82;
        v210[2] = v104 + v83;
        float v178 = v90 + v84;
        float v179 = v91 + v85;
        float v180 = v92 + v86;
        v213[0] = v96 + v84;
        v213[1] = v97 + v85;
        v213[2] = v98 + v86;
        v212[0] = v99 + v84;
        v212[1] = v100 + v85;
        v212[2] = v101 + v86;
        v211[0] = v102 + v84;
        v211[1] = v103 + v85;
        v211[2] = v104 + v86;
        (*(void (**)(uint64_t, long long *, long long *, uint64_t, float *))(*(void *)a1 + 56))(a1, &v175, &v172, v68, &v186);
        (*(void (**)(uint64_t, long long *, long long *, uint64_t))(*(void *)a1 + 56))(a1, &v172, &v168, v68);
        (*(void (**)(uint64_t, long long *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v168, v210, v68);
        (*(void (**)(uint64_t, float *, long long *, uint64_t))(*(void *)a1 + 56))(a1, v210, &v175, v68);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v178, v213, v68);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v213, v212, v68);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v212, v211, v68);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v211, &v178, v68);
        (*(void (**)(uint64_t, long long *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v175, &v178, v68);
        (*(void (**)(uint64_t, long long *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v172, v213, v68);
        (*(void (**)(uint64_t, long long *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v168, v212, v68);
        (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v210, v211, v68);
        break;
      default:
        break;
    }
  }
  if (*(unsigned char *)(a2 + 476))
  {
    float v105 = computeLimitedDistance(*(_DWORD *)(a2 + 456), (uint64_t)&v189, (uint64_t)v182, (float32x2_t *)&v175);
    if (v105 > *(float *)(a2 + 464))
    {
      if (v105 <= *(float *)(a2 + 124)) {
        uint64_t v106 = 65280;
      }
      else {
        uint64_t v106 = 16711680;
      }
      (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v207, &v200, v106);
    }
  }
  if (v189 == 0.0)
  {
    float v110 = 1.0;
    float v108 = 0.0;
    float v109 = 0.0;
  }
  else
  {
    float v107 = sqrtf((float)((float)(v189 * v189) + 0.0) + (float)(v192 * v192));
    float v108 = v189 / v107;
    float v109 = 0.0 / v107;
    float v110 = v192 / v107;
  }
  float v111 = (float)((float)((float)(v110 * v190) - (float)(v192 * v109)) - (float)(v191 * v108)) + (float)(v109 * v189);
  float v112 = (float)((float)((float)(v110 * v191) - (float)(v192 * v109)) - (float)(v189 * v109)) + (float)(v108 * v190);
  float v113 = (float)((float)((float)(v189 * v108) + (float)(v192 * v110)) + (float)(v190 * v109)) + (float)(v191 * v109);
  float v178 = (float)((float)((float)(v189 * v110) - (float)(v192 * v108)) - (float)(v190 * v109)) + (float)(v109 * v191);
  float v179 = v111;
  float v180 = v112;
  float v181 = v113;
  unsigned int v114 = *(_DWORD *)(a2 + 456);
  if ((v114 & 8) != 0)
  {
    float v115 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v109 * v109)) + (float)(v110 * v110));
    if (v115 != 0.0)
    {
      float v108 = v108 / v115;
      float v110 = v110 / v115;
    }
    if (v110 < -1.0) {
      float v110 = -1.0;
    }
    if (v110 > 1.0) {
      float v110 = 1.0;
    }
    float v116 = acosf(v110);
    float v117 = v116 + v116;
    if (v108 >= 0.0) {
      float v118 = v117;
    }
    else {
      float v118 = -v117;
    }
    if (*(float *)(a2 + 224) <= 0.0 && *(float *)(a2 + 220) <= 0.0) {
      float v119 = *(float *)(a2 + 228);
    }
    else {
      float v119 = 0.0;
    }
    BOOL v120 = (float)(*(float *)(a2 + 236) + v119) > v118 || (float)(*(float *)(a2 + 232) - v119) < v118;
    (*(void (**)(uint64_t, float *, BOOL))(*(void *)a1 + 32))(a1, &v203, v120);
    unsigned int v114 = *(_DWORD *)(a2 + 456);
  }
  if ((~v114 & 0x30) != 0)
  {
    if (((v114 >> 5) & 1) == (v114 & 0x10) >> 4) {
      return;
    }
    float v122 = (float)(v23 + v23) * v21;
    float v123 = v20 * (float)(v22 + v22);
    float v124 = v20 * (float)(v21 + v21);
    float v125 = (float)(1.0 - (float)(v22 * (float)(v22 + v22))) - (float)(v21 * (float)(v21 + v21));
    float v126 = (float)((float)(v23 + v23) * v22) + v124;
    float v127 = v122 - v123;
    long long v175 = xmmword_234423A70;
    uint64_t v176 = 0;
    int v177 = 0;
    long long v172 = xmmword_234421FD0;
    uint64_t v173 = 0;
    int v174 = 0;
    int v128 = *(_DWORD *)(a2 + 452);
    if ((v114 & 0x10) != 0)
    {
      if ((v128 & 0x20) == 0)
      {
        if (*(unsigned char *)(a2 + 479)) {
          return;
        }
        float v136 = (float)(v206 * v206) + -0.5;
        float v137 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
        float v138 = v207
             + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v203 * v137));
        float v139 = v208
             + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v204 * v137));
        float v140 = v209
             + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v136 * 0.0))
                     + (float)(v205 * v137));
        physx::PxQuat::operator*(&v203, (float *)&v172, v210);
        long long v168 = *(_OWORD *)v210;
        float v169 = v138;
        float v170 = v139;
        float v171 = v140;
        float v134 = (float)((float)(v126 * v187) + (float)(v186 * v125)) + (float)(v188 * v127);
        float v135 = *(float *)(a2 + 260);
LABEL_85:
        visualizeDoubleCone(a1, (float *)a2, (uint64_t)&v168, v134, v135);
        return;
      }
      if (*(unsigned char *)(a2 + 479))
      {
        uint64_t v150 = a1;
        float v151 = (float *)a2;
        int v152 = 1;
        char v153 = 0;
        goto LABEL_91;
      }
      float v163 = (float)(v206 * v206) + -0.5;
      float v164 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
      float v165 = v207
           + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v203 * v164));
      float v166 = v208
           + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v204 * v164));
      float v167 = v209
           + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v163 * 0.0))
                   + (float)(v205 * v164));
      physx::PxQuat::operator*(&v203, (float *)&v175, v210);
      long long v168 = *(_OWORD *)v210;
      float v169 = v165;
      float v170 = v166;
      float v171 = v167;
      float v159 = *(float *)(a2 + 260);
      float v160 = *(float *)(a2 + 256);
      uint64_t v161 = a1;
      float v162 = v111;
    }
    else
    {
      if ((v128 & 0x10) == 0)
      {
        if (*(unsigned char *)(a2 + 479)) {
          return;
        }
        float v129 = (float)(v206 * v206) + -0.5;
        float v130 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
        float v131 = v207
             + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v203 * v130));
        float v132 = v208
             + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v204 * v130));
        float v133 = v209
             + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v129 * 0.0))
                     + (float)(v205 * v130));
        physx::PxQuat::operator*(&v203, (float *)&v175, v210);
        long long v168 = *(_OWORD *)v210;
        float v169 = v131;
        float v170 = v132;
        float v171 = v133;
        float v134 = (float)((float)(v126 * v184) + (float)(v183 * v125)) + (float)(v185 * v127);
        float v135 = *(float *)(a2 + 264);
        goto LABEL_85;
      }
      if (*(unsigned char *)(a2 + 479))
      {
        uint64_t v150 = a1;
        float v151 = (float *)a2;
        int v152 = 0;
        goto LABEL_90;
      }
      float v154 = (float)(v206 * v206) + -0.5;
      float v155 = (float)((float)(v204 * 0.0) + (float)(v203 * 0.0)) + (float)(v205 * 0.0);
      float v156 = v207
           + (float)((float)((float)(v206 * (float)((float)(v205 * -0.0) + (float)(v204 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v203 * v155));
      float v157 = v208
           + (float)((float)((float)(v206 * (float)((float)(v203 * -0.0) + (float)(v205 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v204 * v155));
      float v158 = v209
           + (float)((float)((float)(v206 * (float)((float)(v204 * -0.0) + (float)(v203 * 0.0))) + (float)(v154 * 0.0))
                   + (float)(v205 * v155));
      physx::PxQuat::operator*(&v203, (float *)&v172, v210);
      long long v168 = *(_OWORD *)v210;
      float v169 = v156;
      float v170 = v157;
      float v171 = v158;
      float v159 = *(float *)(a2 + 264);
      float v160 = *(float *)(a2 + 256);
      uint64_t v161 = a1;
      float v162 = v112;
    }
    visualizeAngularLimit(v161, (uint64_t)&v168, v160, v162, v113, v159);
    return;
  }
  if (*(unsigned char *)(a2 + 478))
  {
    if (*(float *)(a2 + 252) <= 0.0 && *(float *)(a2 + 248) <= 0.0) {
      float v121 = *(float *)(a2 + 256);
    }
    else {
      float v121 = 0.0;
    }
    float v141 = v113 + 1.0;
    float v142 = atan2f(v112, v141) * 4.0;
    float v143 = atan2f(v111, v141) * 4.0;
    float v144 = *(float *)(a2 + 260);
    float v145 = *(float *)(a2 + 264);
    float v146 = tanf(v145 * 0.25);
    v147.n128_u32[0] = tanf(v144 * 0.25);
    float v148 = fabsf(v143);
    float v149 = fabsf(v142);
    (*(void (**)(uint64_t, float *, BOOL, float, __n128))(*(void *)a1 + 40))(a1, &v203, (float)((float)((float)((float)(v121 + v149) / v145) * (float)((float)(v121 + v149) / v145))+ (float)((float)((float)(v121 + v148) / v144) * (float)((float)(v121 + v148) / v144))) > 1.0, v146, v147);
  }
  if (*(unsigned char *)(a2 + 479))
  {
    uint64_t v150 = a1;
    float v151 = (float *)a2;
    int v152 = 1;
LABEL_90:
    char v153 = 1;
LABEL_91:
    drawPyramid(v150, v151, &v203, &v178, v152, v153);
  }
}

void physx::PxDefaultErrorCallback::~PxDefaultErrorCallback(physx::PxDefaultErrorCallback *this)
{
}

void physx::PxDefaultErrorCallback::reportError(uint64_t a1, int a2, const char *a3, const char *a4, int a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2 > 15)
  {
    if (a2 > 63)
    {
      if (a2 == 64)
      {
        float v6 = "abort";
      }
      else
      {
        if (a2 != 128) {
          return;
        }
        float v6 = "performance warning";
      }
    }
    else if (a2 == 16)
    {
      float v6 = "out of memory";
    }
    else
    {
      if (a2 != 32) {
        return;
      }
      float v6 = "internal error";
    }
LABEL_17:
    sprintf(v8, "%s (%d) : %s : %s\n", a4, a5, v6, a3);
    puts(v8);
    if (a2 == 64)
    {
      while (1)
      {
        puts(v8);
        timespec __rmtp = (timespec)xmmword_2344248A0;
        while (nanosleep(&__rmtp, &__rmtp) == -1)
          ;
      }
    }
  }
  else
  {
    float v6 = "no error";
    switch(a2)
    {
      case -1:
        float v6 = "unknown error";
        goto LABEL_17;
      case 0:
        goto LABEL_17;
      case 1:
        float v6 = "info";
        goto LABEL_17;
      case 2:
        float v6 = "warning";
        goto LABEL_17;
      case 4:
        float v6 = "invalid parameter";
        goto LABEL_17;
      case 8:
        float v6 = "invalid operation";
        goto LABEL_17;
      default:
        return;
    }
  }
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxD6Joint::getConcreteTypeName(physx::PxD6Joint *this)
{
  return "PxD6Joint";
}

void physx::Ext::D6Joint::~D6Joint(physx::Ext::D6Joint *this)
{
  if (physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this))
  {
    uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxD6Joint::isKindOf(physx::PxD6Joint *this, const char *a2)
{
  if (!strcmp("PxD6Joint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  float v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

void physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::D6Joint::getPrep(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::D6Joint::getPrep(physx::Ext::D6Joint *this)
{
  return physx::Ext::D6Joint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::D6Joint::~D6Joint(physx::Ext::D6Joint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

BOOL physx::PxJoint::isKindOf(physx::PxJoint *this, const char *a2)
{
  return !strcmp("PxJoint", a2) || strcmp(a2, "PxBase") == 0;
}

void setupPyramidSwingLimits(uint64_t a1, float *a2, float *a3, float *a4, int a5, int a6)
{
  float v10 = a4[1];
  float v12 = a3[2];
  float v11 = a3[3];
  float v13 = a3[1];
  float v15 = a4[2];
  float v14 = a4[3];
  float v16 = (float)((float)((float)(v11 * *a4) + (float)(v14 * *a3)) + (float)(v10 * v12)) - (float)(v13 * v15);
  float v17 = (float)((float)((float)(v11 * v10) + (float)(v14 * v13)) + (float)(v15 * *a3)) - (float)(v12 * *a4);
  float v18 = (float)((float)((float)(v11 * v15) + (float)(v14 * v12)) + (float)(*a4 * v13)) - (float)(*a3 * v10);
  float v19 = (float)((float)((float)(v14 * v11) - (float)(*a4 * *a3)) - (float)(v10 * v13)) - (float)(v15 * v12);
  uint64_t v20 = (uint64_t)(a2 + 67);
  if (a5)
  {
    float v21 = atan2f(v13, v11 + 1.0) * 4.0;
    float v22 = a2[72];
    float v23 = v19 + v19;
    if (a2[70] <= 0.0 && a2[69] <= 0.0) {
      float v24 = a2[71];
    }
    else {
      float v24 = 0.0;
    }
    float v25 = a2[73];
    float v26 = (float)(v16 * (float)(v17 + v17)) - (float)(v18 * v23);
    float v27 = (float)((float)(v19 * (float)(v19 + v19)) + -1.0) + (float)(v17 * (float)(v17 + v17));
    float v28 = (float)((float)(v17 + v17) * v18) + (float)(v16 * v23);
    if ((float)(v22 + v24) > v21)
    {
      uint64_t v29 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v29 + 80;
      float v43 = (float)(v16 * (float)(v17 + v17)) - (float)(v18 * v23);
      *(_WORD *)(v29 + 78) = 0;
      *(void *)uint64_t v29 = 0;
      *(_DWORD *)(v29 + 8) = 0;
      *(float *)(v29 + 20) = -v27;
      *(float *)(v29 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = -v28;
      *(void *)(v29 + 32) = 0;
      *(_DWORD *)(v29 + 40) = 0;
      *(float *)(v29 + 48) = -v26;
      *(float *)(v29 + 52) = -v27;
      *(float *)(v29 + 56) = -v28;
      *(float *)(v29 + 12) = -(float)(v22 - v21);
      *(float *)(v29 + 16) = -v26;
      *(_WORD *)(v29 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v29, v20);
      float v27 = (float)((float)(v19 * (float)(v19 + v19)) + -1.0) + (float)(v17 * (float)(v17 + v17));
      float v26 = v43;
    }
    if ((float)(v25 - v24) < v21)
    {
      uint64_t v30 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v30 + 80;
      *(_WORD *)(v30 + 78) = 0;
      *(void *)uint64_t v30 = 0;
      *(_DWORD *)(v30 + 8) = 0;
      *(float *)(v30 + 20) = v27;
      *(float *)(v30 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v28;
      *(void *)(v30 + 32) = 0;
      *(_DWORD *)(v30 + 40) = 0;
      *(float *)(v30 + 48) = v26;
      *(float *)(v30 + 52) = v27;
      *(float *)(v30 + 56) = v28;
      *(float *)(v30 + 12) = v25 - v21;
      *(float *)(v30 + 16) = v26;
      *(_WORD *)(v30 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v30, v20);
    }
  }
  if (a6)
  {
    float v31 = atan2f(a3[2], a3[3] + 1.0) * 4.0;
    float v32 = a2[74];
    float v33 = v19 + v19;
    float v34 = v17 * (float)(v18 + v18);
    float v35 = (float)(v19 * (float)(v19 + v19)) + -1.0;
    if (a2[70] <= 0.0 && a2[69] <= 0.0) {
      float v36 = a2[71];
    }
    else {
      float v36 = 0.0;
    }
    float v37 = a2[75];
    float v38 = (float)(v16 * (float)(v18 + v18)) + (float)(v17 * v33);
    float v39 = v34 - (float)(v16 * v33);
    float v40 = v35 + (float)(v18 * (float)(v18 + v18));
    if ((float)(v32 + v36) > v31)
    {
      uint64_t v41 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v41 + 80;
      *(_WORD *)(v41 + 78) = 0;
      *(void *)uint64_t v41 = 0;
      *(_DWORD *)(v41 + 8) = 0;
      *(float *)(v41 + 20) = -v39;
      *(float *)(v41 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = -v40;
      *(void *)(v41 + 32) = 0;
      *(_DWORD *)(v41 + 40) = 0;
      *(float *)(v41 + 48) = -v38;
      *(float *)(v41 + 52) = -v39;
      *(float *)(v41 + 56) = -v40;
      *(float *)(v41 + 12) = -(float)(v32 - v31);
      *(float *)(v41 + 16) = -v38;
      *(_WORD *)(v41 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v41, v20);
    }
    if ((float)(v37 - v36) < v31)
    {
      uint64_t v42 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v42 + 80;
      *(_WORD *)(v42 + 78) = 0;
      *(void *)uint64_t v42 = 0;
      *(_DWORD *)(v42 + 8) = 0;
      *(float *)(v42 + 20) = v39;
      *(float *)(v42 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v40;
      *(void *)(v42 + 32) = 0;
      *(_DWORD *)(v42 + 40) = 0;
      *(float *)(v42 + 48) = v38;
      *(float *)(v42 + 52) = v39;
      *(float *)(v42 + 56) = v40;
      *(float *)(v42 + 12) = v37 - v31;
      *(float *)(v42 + 16) = v38;
      *(_WORD *)(v42 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit(a1, v42, v20);
    }
  }
}

float computeLimitedDistance(unsigned int a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v4 = 0;
  float v5 = (float *)(a3 + 8);
  float32x2_t v6 = 0;
  float v7 = 0.0;
  do
  {
    if ((a1 >> v4))
    {
      float v8 = *(float *)(a2 + 16 + 4 * v4);
      float32x2_t v6 = vadd_f32(v6, vmul_n_f32(*(float32x2_t *)(v5 - 2), v8));
      float v7 = v7 + (float)(v8 * *v5);
    }
    ++v4;
    v5 += 3;
  }
  while (v4 != 3);
  *a4 = v6;
  a4[1].f32[0] = v7;
  return sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v6, v6).i32[1]), v6.f32[0], v6.f32[0]) + (float)(v7 * v7));
}

void setupLinearLimit(uint64_t a1, float *a2, float *a3, float a4)
{
  float v8 = a2[5];
  float v9 = a2[3];
  if (v9 <= 0.0 && a2[2] <= 0.0) {
    float v10 = a2[4];
  }
  else {
    float v10 = 0.0;
  }
  if ((float)(v10 + a4) > v8)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11 + 80;
    *(_WORD *)(v11 + 78) = 0;
    *(void *)uint64_t v11 = *(void *)a3;
    *(float *)(v11 + 8) = a3[2];
    float v13 = a3[1];
    float v12 = a3[2];
    float v15 = *(float *)(a1 + 20);
    float v14 = *(float *)(a1 + 24);
    float v16 = *(float *)(a1 + 16);
    float v17 = (float)(v15 * v12) - (float)(v14 * v13);
    float v18 = (float)(v14 * *a3) - (float)(v16 * v12);
    float v19 = (float)(v16 * v13) - (float)(v15 * *a3);
    *(float *)(v11 + 16) = v17;
    *(float *)(v11 + 20) = v18;
    *(float *)(v11 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v19;
    *(void *)(v11 + 32) = *(void *)a3;
    *(float *)(v11 + 40) = a3[2];
    float v21 = a3[1];
    float v20 = a3[2];
    float v23 = *(float *)(a1 + 32);
    float v22 = *(float *)(a1 + 36);
    float v24 = *(float *)(a1 + 28);
    float v25 = (float)(v23 * v20) - (float)(v22 * v21);
    float v26 = (float)(v22 * *a3) - (float)(v24 * v20);
    float v27 = (float)(v24 * v21) - (float)(v23 * *a3);
    *(float *)(v11 + 48) = v25;
    *(float *)(v11 + 52) = v26;
    *(float *)(v11 + 56) = v27;
    *(float *)(v11 + 12) = v8 - a4;
    physx::Ext::joint::ConstraintHelper::addLimit(a1, v11, (uint64_t)a2);
    float v9 = a2[3];
  }
  float v28 = a2[6];
  if (v9 <= 0.0 && a2[2] <= 0.0) {
    float v29 = a2[4];
  }
  else {
    float v29 = 0.0;
  }
  if ((float)(v29 - a4) > (float)-v28)
  {
    float v30 = *a3;
    float v31 = a3[1];
    float v32 = a3[2];
    float v33 = -*a3;
    uint64_t v34 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v34 + 80;
    *(_WORD *)(v34 + 78) = 0;
    *(float *)uint64_t v34 = v33;
    *(float *)(v34 + 4) = -v31;
    *(float *)(v34 + 8) = -v32;
    float v36 = *(float *)(a1 + 20);
    float v35 = *(float *)(a1 + 24);
    float v37 = *(float *)(a1 + 16);
    *(float *)(v34 + 16) = (float)(v31 * v35) + (float)(v36 * (float)-v32);
    *(float *)(v34 + 20) = (float)(v32 * v37) + (float)(v35 * v33);
    *(float *)(v34 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = (float)(v30 * v36) + (float)(v37 * (float)-v31);
    *(float *)(v34 + 32) = v33;
    *(float *)(v34 + 36) = -v31;
    *(float *)(v34 + 40) = -v32;
    float v39 = *(float *)(a1 + 32);
    float v38 = *(float *)(a1 + 36);
    float v40 = *(float *)(a1 + 28);
    *(float *)(v34 + 48) = (float)(v31 * v38) + (float)(v39 * (float)-v32);
    *(float *)(v34 + 52) = (float)(v32 * v40) + (float)(v38 * v33);
    *(float *)(v34 + 56) = (float)(v30 * v39) + (float)(v40 * (float)-v31);
    *(float *)(v34 + 12) = a4 - v28;
    physx::Ext::joint::ConstraintHelper::addLimit(a1, v34, (uint64_t)a2);
  }
}

uint64_t physx::Ext::joint::ConstraintHelper::prepareLockedAxes(uint64_t result, float *a2, float *a3, float *a4, int a5, int a6, float *a7, float *a8)
{
  unint64_t v8 = *(void *)(result + 8);
  float v9 = *(float *)(result + 16);
  float v10 = *(float *)(result + 20);
  float v12 = *(float *)(result + 24);
  float v11 = *(float *)(result + 28);
  float v13 = *(float *)(result + 32);
  float v14 = *(float *)(result + 36);
  if (a5)
  {
    float v15 = *a2;
    float v16 = a2[1];
    float v17 = a2[2];
    float v18 = a2[3];
    float v19 = v15 + v15;
    float v20 = v16 + v16;
    float v21 = v15 * (float)(v15 + v15);
    float v22 = v16 * (float)(v16 + v16);
    float v23 = v17 * (float)(v17 + v17);
    float v24 = v19 * v16;
    float v25 = v19 * v17;
    float v26 = v19 * v18;
    float v27 = v20 * v17;
    float v28 = v20 * v18;
    float v29 = (float)(v17 + v17) * v18;
    float v30 = (float)(1.0 - v22) - v23;
    float v31 = v24 + v29;
    float v32 = v25 - v28;
    float v33 = 1.0 - v21;
    float v34 = 0.0;
    float v35 = 0.0;
    float v36 = 0.0;
    if (a5)
    {
      float v34 = 0.0 - (float)(v30 * *a4);
      float v35 = 0.0 - (float)(v31 * *a4);
      float v36 = 0.0 - (float)(v32 * *a4);
    }
    float v37 = v24 - v29;
    float v38 = v33 - v23;
    float v39 = v27 + v26;
    if ((a5 & 2) != 0)
    {
      float v40 = a4[1];
      float v34 = v34 - (float)(v37 * v40);
      float v35 = v35 - (float)(v38 * v40);
      float v36 = v36 - (float)(v39 * v40);
    }
    float v41 = v25 + v28;
    float v42 = v27 - v26;
    float v43 = v33 - v22;
    if ((a5 & 4) != 0)
    {
      float v44 = a4[2];
      float v34 = v34 - (float)(v41 * v44);
      float v35 = v35 - (float)(v42 * v44);
      float v36 = v36 - (float)(v43 * v44);
    }
    float v9 = v9 + v34;
    float v10 = v10 + v35;
    float v12 = v12 + v36;
    unint64_t v45 = *(void *)(result + 8);
    if (a5)
    {
      float v46 = -*a4;
      unint64_t v45 = v8 + 80;
      *(_WORD *)(v8 + 78) = 2048;
      *(float *)unint64_t v8 = v30;
      *(float *)(v8 + 4) = v31;
      *(float *)(v8 + 16) = (float)(v10 * v32) - (float)(v12 * v31);
      *(float *)(v8 + 20) = (float)(v12 * v30) - (float)(v9 * v32);
      *(float *)(v8 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = (float)(v9 * v31) - (float)(v10 * v30);
      *(float *)(v8 + 32) = v30;
      *(float *)(v8 + 36) = v31;
      *(float *)(v8 + 40) = v32;
      *(float *)(v8 + 48) = (float)(v13 * v32) - (float)(v14 * v31);
      *(float *)(v8 + 52) = (float)(v14 * v30) - (float)(v11 * v32);
      *(float *)(v8 + 56) = (float)(v11 * v31) - (float)(v13 * v30);
      *(float *)(v8 + 8) = v32;
      *(float *)(v8 + 12) = v46;
      if ((a5 & 2) == 0)
      {
LABEL_10:
        if ((a5 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    else if ((a5 & 2) == 0)
    {
      goto LABEL_10;
    }
    float v47 = -a4[1];
    *(_WORD *)(v45 + 78) = 2048;
    *(float *)unint64_t v45 = v37;
    *(float *)(v45 + 4) = v38;
    *(float *)(v45 + 16) = (float)(v10 * v39) - (float)(v12 * v38);
    *(float *)(v45 + 20) = (float)(v12 * v37) - (float)(v9 * v39);
    *(float *)(v45 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = (float)(v9 * v38) - (float)(v10 * v37);
    *(float *)(v45 + 32) = v37;
    *(float *)(v45 + 36) = v38;
    *(float *)(v45 + 40) = v39;
    *(float *)(v45 + 48) = (float)(v13 * v39) - (float)(v14 * v38);
    *(float *)(v45 + 52) = (float)(v14 * v37) - (float)(v11 * v39);
    *(float *)(v45 + 56) = (float)(v11 * v38) - (float)(v13 * v37);
    *(float *)(v45 + 8) = v39;
    *(float *)(v45 + 12) = v47;
    v45 += 80;
    if ((a5 & 4) == 0)
    {
LABEL_11:
      if (!a6) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
LABEL_17:
    float v48 = -a4[2];
    *(_WORD *)(v45 + 78) = 2048;
    *(float *)unint64_t v45 = v41;
    *(float *)(v45 + 4) = v42;
    *(float *)(v45 + 16) = (float)(v10 * v43) - (float)(v12 * v42);
    *(float *)(v45 + 20) = (float)(v12 * v41) - (float)(v9 * v43);
    *(float *)(v45 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = (float)(v9 * v42) - (float)(v10 * v41);
    *(float *)(v45 + 32) = v41;
    *(float *)(v45 + 36) = v42;
    *(float *)(v45 + 40) = v43;
    *(float *)(v45 + 48) = (float)(v13 * v43) - (float)(v14 * v42);
    *(float *)(v45 + 52) = (float)(v14 * v41) - (float)(v11 * v43);
    *(float *)(v45 + 56) = (float)(v11 * v42) - (float)(v13 * v41);
    *(float *)(v45 + 8) = v43;
    *(float *)(v45 + 12) = v48;
    v45 += 80;
    if (!a6) {
      goto LABEL_28;
    }
    goto LABEL_18;
  }
  unint64_t v45 = *(void *)(result + 8);
  if (!a6) {
    goto LABEL_28;
  }
LABEL_18:
  float v50 = *a2;
  float v49 = a2[1];
  float v51 = a2[2];
  float v52 = a2[3];
  float v54 = a3[2];
  float v53 = a3[3];
  float v55 = *a3;
  float v56 = a3[1];
  float v57 = v52 * *a3;
  float v58 = *a2 * v53;
  float v59 = (float)(v49 * v53) + (float)(v52 * v56);
  float v60 = (float)(v51 * v53) + (float)(v52 * v54);
  float v61 = (float)((float)(v49 * v56) + (float)(*a2 * *a3)) + (float)(v51 * v54);
  float v62 = (float)(v52 * v53) - v61;
  float v63 = (float)(v49 * *a3) + (float)(*a2 * v56);
  float v64 = (float)(v51 * *a3) + (float)(*a2 * v54);
  float v65 = (float)(v52 * v53) + v61;
  float v66 = (float)((float)((float)((float)(v49 * v56) + (float)(v49 * v56)) + v62) * 0.5) + 0.00000011921;
  float v67 = (float)((float)((float)((float)(v51 * v54) + (float)(v51 * v54)) + v62) * 0.5) + 0.00000011921;
  if (v65 != 0.0)
  {
    float v67 = (float)((float)((float)(v51 * v54) + (float)(v51 * v54)) + v62) * 0.5;
    float v66 = (float)((float)((float)(v49 * v56) + (float)(v49 * v56)) + v62) * 0.5;
  }
  if (a6)
  {
    float v68 = (float)((float)((float)(v50 * v55) + (float)(v50 * v55)) + v62) * 0.5;
    if (v65 == 0.0) {
      float v68 = v68 + 0.00000011921;
    }
    float v69 = (float)(v64 - v59) * 0.5;
    float v70 = (float)(v60 + v63) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(void *)unint64_t v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v70;
    *(float *)(v45 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v69;
    *(void *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v68;
    *(float *)(v45 + 52) = v70;
    *(float *)(v45 + 56) = v69;
    *(float *)(v45 + 12) = -(float)((float)((float)((float)(v53 * (float)-v50) + (float)(v52 * v55))
                                          + (float)((float)-v49 * v54))
                                  + (float)(v56 * v51));
    *(float *)(v45 + 16) = v68;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
  float v71 = v57 + v58;
  float v72 = (float)(v49 * v54) + (float)(v51 * v56);
  if ((a6 & 2) != 0)
  {
    float v73 = (float)(v63 - v60) * 0.5;
    float v74 = (float)(v71 + v72) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(void *)unint64_t v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v66;
    *(float *)(v45 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v74;
    *(void *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v73;
    *(float *)(v45 + 52) = v66;
    *(float *)(v45 + 56) = v74;
    *(float *)(v45 + 12) = -(float)((float)((float)((float)(v52 * v56) - (float)(v49 * v53)) - (float)(v51 * v55))
                                  + (float)(v54 * v50));
    *(float *)(v45 + 16) = v73;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
  if ((a6 & 4) != 0)
  {
    float v75 = (float)((float)((float)(v52 * v54) - (float)(v51 * v53)) - (float)(v50 * v56)) + (float)(v55 * v49);
    float v76 = (float)(v64 + v59) * 0.5;
    float v77 = (float)(v72 - v71) * 0.5;
    *(_WORD *)(v45 + 78) = 2048;
    *(void *)unint64_t v45 = 0;
    *(_DWORD *)(v45 + 8) = 0;
    *(float *)(v45 + 20) = v77;
    *(float *)(v45 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v67;
    *(void *)(v45 + 32) = 0;
    *(_DWORD *)(v45 + 40) = 0;
    *(float *)(v45 + 48) = v76;
    *(float *)(v45 + 52) = v77;
    *(float *)(v45 + 56) = v67;
    *(float *)(v45 + 12) = -v75;
    *(float *)(v45 + 16) = v76;
    *(_WORD *)(v45 + 76) |= 0x40u;
    v45 += 80;
  }
LABEL_28:
  *a7 = v9;
  a7[1] = v10;
  a7[2] = v12;
  *a8 = v11;
  a8[1] = v13;
  a8[2] = v14;
  while (v8 < v45)
  {
    *(_WORD *)(v8 + 76) |= 0x10u;
    v8 += 80;
  }
  *(void *)(result + 8) = v45;
  return result;
}

uint64_t physx::Ext::joint::ConstraintHelper::ConstraintHelper(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6, float *a7, float32x2_t *a8, float32x2_t *a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2;
  *a3 = *(_OWORD *)a7;
  physx::Ext::joint::computeJointFrames((float *)a4, (float *)a5, a7, (float *)a8, (float *)a9);
  float32_t v14 = a5[3].f32[0] - a8[3].f32[0];
  *a6 = vsub_f32(a5[2], a8[2]);
  a6[1].f32[0] = v14;
  float v15 = a5[3].f32[0] - a8[3].f32[0];
  *(float32x2_t *)(a1 + 16) = vsub_f32(a5[2], a8[2]);
  *(float *)(a1 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v15;
  float v16 = a5[3].f32[0] - a9[3].f32[0];
  *(float32x2_t *)(a1 + 28) = vsub_f32(a5[2], a9[2]);
  *(float *)(a1 + 36) = v16;
  *(void *)(a1 + 40) = *(void *)(a4 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a4 + 24);
  *(float32x2_t *)(a1 + 52) = a5[2];
  *(_DWORD *)(a1 + 60) = a5[3].i32[0];
  return a1;
}

float physx::Ext::joint::computeJointFrames(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5 = a3[8] + a3[8];
  float v6 = a3[9] + a3[9];
  float v7 = *a4;
  float v8 = a4[1];
  float v10 = a4[2];
  float v9 = a4[3];
  float v12 = a3[6];
  float v11 = a3[7];
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = (float)((float)((float)(v8 * v11) + (float)(v9 * v14)) + (float)(v10 * v13)) - (float)(v12 * *a4);
  *a1 = (float)((float)((float)(*a4 * v11) + (float)(v9 * v13)) + (float)(v8 * v12)) - (float)(v14 * v10);
  float v16 = a3[11];
  float v17 = a3[10] + a3[10];
  float v18 = (float)(v9 * v9) + -0.5;
  float v19 = (float)(v6 * v8) + (float)(v7 * v5);
  float v20 = (float)(v9 * (float)((float)(v8 * v17) - (float)(v10 * v6))) + (float)(v5 * v18);
  float v21 = (float)(v9 * (float)((float)(v10 * v5) - (float)(v7 * v17))) + (float)(v6 * v18);
  float v22 = (float)(v9 * (float)((float)(v7 * v6) - (float)(v8 * v5))) + (float)(v17 * v18);
  float v23 = v19 + (float)(v10 * v17);
  float v24 = v21 + (float)(v8 * v23);
  float v25 = v22 + (float)(v10 * v23);
  float v26 = a4[5];
  float v27 = a4[4] + (float)(v20 + (float)(v7 * v23));
  float v28 = a4[6] + v25;
  a1[1] = v15;
  a1[2] = (float)((float)((float)(v10 * v11) + (float)(v9 * v12)) + (float)(v7 * v14)) - (float)(v13 * v8);
  a1[3] = (float)((float)((float)(v9 * v11) - (float)(v7 * v13)) - (float)(v8 * v14)) - (float)(v10 * v12);
  a1[4] = v27;
  a1[5] = v26 + v24;
  a1[6] = v28;
  float v29 = a3[14];
  float v30 = a3[15] + a3[15];
  float v31 = a3[16] + a3[16];
  float v32 = a3[17] + a3[17];
  float v34 = a5[2];
  float v33 = a5[3];
  float v35 = (float)(v33 * v33) + -0.5;
  float v36 = a5[1];
  float v37 = (float)((float)(v31 * v36) + (float)(*a5 * v30)) + (float)(v34 * v32);
  float v38 = (float)((float)(v33 * (float)((float)(v36 * v32) - (float)(v34 * v31))) + (float)(v30 * v35))
      + (float)(*a5 * v37);
  float v39 = (float)((float)(v33 * (float)((float)(v34 * v30) - (float)(*a5 * v32))) + (float)(v31 * v35))
      + (float)(v36 * v37);
  float v40 = (float)((float)(v33 * (float)((float)(*a5 * v31) - (float)(v36 * v30))) + (float)(v32 * v35))
      + (float)(v34 * v37);
  float v41 = a5[4] + v38;
  float v42 = a5[5] + v39;
  float v43 = a5[6];
  float v45 = a3[12];
  float v44 = a3[13];
  float v46 = (float)((float)((float)(*a5 * v29) + (float)(v33 * v16)) + (float)(v36 * v44)) - (float)(v45 * v34);
  float v47 = (float)((float)((float)(v36 * v29) + (float)(v33 * v45)) + (float)(v34 * v16)) - (float)(v44 * *a5);
  float v48 = (float)((float)((float)(v34 * v29) + (float)(v33 * v44)) + (float)(*a5 * v45)) - (float)(v16 * v36);
  float v49 = (float)((float)((float)(v33 * v29) - (float)(*a5 * v16)) - (float)(v36 * v45)) - (float)(v34 * v44);
  *a2 = v46;
  a2[1] = v47;
  a2[2] = v48;
  a2[3] = v49;
  float result = v43 + v40;
  a2[4] = v41;
  a2[5] = v42;
  a2[6] = result;
  return result;
}

BOOL physx::Cm::ConeLimitHelperTanLess::getLimit(float *a1, float *a2, float *a3, float *a4)
{
  float v7 = a2[2];
  float v8 = a2[3];
  float v10 = *a2;
  float v9 = a2[1];
  float v11 = atan2f(v9, v8 + 1.0) * 4.0;
  float v12 = atan2f(v7, v8 + 1.0) * 4.0;
  float v13 = fabsf(v11);
  float v15 = a1[1];
  float v14 = a1[2];
  float v16 = v13 + v14;
  float v17 = fabsf(v12);
  float v18 = v14 + v17;
  float v19 = *a1;
  float v20 = (float)((float)(v16 / *a1) * (float)(v16 / *a1)) + (float)((float)(v18 / v15) * (float)(v18 / v15));
  if (v20 > 1.0)
  {
    float v21 = v10 + v10;
    float v22 = (float)((float)(v8 * (float)(v8 + v8)) + -1.0) + (float)(v10 * (float)(v10 + v10));
    float v65 = (float)(v21 * v7) - (float)(v9 * (float)(v8 + v8));
    float v66 = (float)(v21 * v9) + (float)(v7 * (float)(v8 + v8));
    if (v19 >= v15)
    {
      if (v17 < 0.000001)
      {
        float v24 = -v19;
        if (v11 > 0.0) {
          float v24 = *a1;
        }
        float v23 = 0.0;
        goto LABEL_19;
      }
    }
    else if (v13 < 0.000001)
    {
      if (v12 <= 0.0) {
        float v23 = -v15;
      }
      else {
        float v23 = a1[1];
      }
      float v24 = 0.0;
LABEL_19:
      float v41 = v24 / (float)(v19 * v19);
      float v42 = v23 / (float)(v15 * v15);
      float v43 = tanf(v24 * 0.25);
      float v44 = tanf(v23 * 0.25);
      float v45 = (float)(v43 * v43) + (float)(v44 * v44);
      float v46 = 1.0 - v45;
      float v47 = 1.0 / (float)(v45 + 1.0);
      float v48 = (float)(v46 + v46) * (float)(v47 * v47);
      float v49 = v44 + v44;
      float v50 = (float)(v44 + v44) * v48;
      float v51 = (float)(v43 * -2.0) * v48;
      float v52 = (float)((float)(1.0 - v45) * v48) + -1.0;
      float v53 = (float)((float)(v41 * v43) + 0.0) + (float)(v44 * v42);
      float v54 = v47 * (float)((float)((float)(3.0 - v45) * (float)(v53 * -4.0)) * (float)(v47 * v47));
      float v55 = (float)(v46 * v54) - (float)((float)(v53 + v53) * v48);
      float v56 = (float)((float)(v42 + v42) * v48) + (float)(v49 * v54);
      float v57 = (float)((float)(v43 * -2.0) * v54) - (float)((float)(v41 + v41) * v48);
      float v58 = (float)(v51 * v55) - (float)(v52 * v57);
      float v59 = (float)(v52 * v56) - (float)(v50 * v55);
      float v60 = 1.0 / sqrtf((float)((float)(v56 * v56) + (float)(v55 * v55)) + (float)(v57 * v57));
      float v61 = (float)((float)(v50 * v57) - (float)(v51 * v56)) * v60;
      float v62 = v58 * v60;
      float v63 = v59 * v60;
      *a3 = v61;
      a3[1] = v62;
      a3[2] = v63;
      *a4 = (float)((float)(v66 * (float)((float)(v51 * v61) - (float)(v52 * v63)))
                  + (float)((float)((float)(v50 * v63) - (float)(v51 * v62)) * v22))
          + (float)((float)((float)(v52 * v62) - (float)(v50 * v61)) * v65);
      return v20 > 1.0;
    }
    float v25 = v19 * v19;
    float v26 = v15 * v15;
    float v27 = v13 * v19;
    float v28 = v17 * v15;
    float v29 = v27 - (float)(v19 * v19);
    if (v29 <= (float)(v28 - (float)(v15 * v15))) {
      float v29 = v28 - (float)(v15 * v15);
    }
    int v30 = 20;
    while (1)
    {
      float v31 = 1.0 / (float)(v25 + v29);
      float v32 = 1.0 / (float)(v26 + v29);
      float v33 = (float)(v27 * v31) * (float)(v27 * v31);
      float v34 = (float)(v28 * v32) * (float)(v28 * v32);
      float v35 = (float)(v33 + v34) + -1.0;
      if (v35 < 0.0001) {
        break;
      }
      float v29 = v29
          + (float)(v35
                  / (float)((float)((float)((float)(v31 * v33) + 0.0) + (float)(v34 * v32))
                          + (float)((float)((float)(v31 * v33) + 0.0) + (float)(v34 * v32))));
      if (!--v30)
      {
        float v36 = v12 * v26;
        float v37 = (float)(v11 * v25) * v31;
        float v38 = v36 * v32;
        float v39 = 1.0
            / sqrtf((float)((float)(v37 / v19) * (float)(v37 / v19)) + (float)((float)(v38 / v15) * (float)(v38 / v15)));
        float v24 = v37 * v39;
        float v23 = v38 * v39;
        goto LABEL_19;
      }
    }
    float v40 = v12 * v26;
    float v24 = (float)(v11 * v25) * v31;
    float v23 = v40 * v32;
    goto LABEL_19;
  }
  return v20 > 1.0;
}

void physx::Ext::joint::ConstraintHelper::addLimit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3 = *(_WORD *)(a2 + 76);
  float v4 = *(float *)(a3 + 8);
  if (*(float *)(a3 + 12) > 0.0 || v4 > 0.0)
  {
    __int16 v6 = v3 | 0x11;
    *(float *)(a2 + 64) = v4;
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a3 + 12);
  }
  else
  {
    *(_WORD *)(a2 + 78) = 2049;
    *(_DWORD *)(a2 + 64) = *(_DWORD *)a3;
    *(_DWORD *)(a2 + 68) = *(_DWORD *)(a3 + 4);
    if (*(float *)(a2 + 12) <= 0.0) {
      __int16 v5 = 16;
    }
    else {
      __int16 v5 = 24;
    }
    __int16 v6 = v5 | v3;
    if (*(float *)a3 > 0.0) {
      v6 |= 4u;
    }
  }
  *(_WORD *)(a2 + 76) = v6;
  *(_DWORD *)(a2 + 44) = 0;
}

uint64_t visualizeLine(uint64_t a1, float *a2, float *a3, float *a4, float a5)
{
  if (a4[3] <= 0.0 && a4[2] <= 0.0) {
    float v5 = a4[4];
  }
  else {
    float v5 = 0.0;
  }
  float v7 = a4[5];
  float v6 = a4[6];
  BOOL v8 = (float)(v7 - v5) >= a5 && (float)(v5 + v6) <= a5;
  float v9 = *a3;
  float v10 = a3[1];
  float v11 = a3[2];
  float v12 = *a2;
  float v13 = a2[1];
  float v14 = a2[2];
  v18[0] = (float)(v6 * *a3) + *a2;
  v18[1] = (float)(v6 * v10) + v13;
  v18[2] = (float)(v6 * v11) + v14;
  v17[0] = (float)(v7 * v9) + v12;
  v17[1] = (float)(v7 * v10) + v13;
  _DWORD v17[2] = (float)(v7 * v11) + v14;
  if (v8) {
    uint64_t v15 = 0xFFFFFFLL;
  }
  else {
    uint64_t v15 = 16711680;
  }
  return (*(uint64_t (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v18, v17, v15);
}

uint64_t visualizeQuad(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8)
{
  if (a4[3] <= 0.0 && a4[2] <= 0.0) {
    float v9 = a4[4];
  }
  else {
    float v9 = 0.0;
  }
  float v10 = a4[5];
  float v11 = a4[6];
  if (a6[3] <= 0.0 && a6[2] <= 0.0) {
    float v12 = a6[4];
  }
  else {
    float v12 = 0.0;
  }
  float v13 = v9 + v11;
  float v14 = v10 - v9;
  float v16 = a6[5];
  float v15 = a6[6];
  if ((float)(v16 - v12) >= a8 && (float)(v12 + v15) <= a8 && v14 >= a7 && v13 <= a7) {
    uint64_t v20 = 0xFFFFFFLL;
  }
  else {
    uint64_t v20 = 16711680;
  }
  float v21 = a3[1];
  float v22 = v11 * *a3;
  float v23 = v11 * v21;
  float v24 = a3[2];
  float v25 = v11 * v24;
  float v26 = v10 * *a3;
  float v27 = v10 * v21;
  float v28 = v10 * v24;
  float v29 = a5[1];
  float v30 = v15 * *a5;
  float v31 = v15 * v29;
  float v32 = a5[2];
  float v33 = v15 * v32;
  float v34 = v16 * *a5;
  float v35 = v16 * v29;
  float v36 = v16 * v32;
  float v37 = *a2;
  float v38 = a2[1];
  float v39 = v22 + *a2;
  float v40 = v23 + v38;
  float v41 = a2[2];
  float v42 = v25 + v41;
  v50[0] = v30 + v39;
  v50[1] = v31 + v40;
  v50[2] = v33 + v42;
  float v43 = v26 + v37;
  float v44 = v27 + v38;
  float v45 = v28 + v41;
  v49[0] = v30 + v43;
  v49[1] = v31 + v44;
  v49[2] = v33 + v45;
  v48[0] = v34 + v43;
  v48[1] = v35 + v44;
  v48[2] = v36 + v45;
  v47[0] = v34 + v39;
  v47[1] = v35 + v40;
  v47[2] = v36 + v42;
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v50, v49, v20);
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v49, v48, v20);
  (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v48, v47, v20);
  return (*(uint64_t (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, v47, v50, v20);
}

uint64_t drawPyramid(uint64_t a1, float *a2, float *a3, float *a4, int a5, char a6)
{
  if (a5)
  {
    float v11 = atan2f(a4[1], a4[3] + 1.0) * 4.0;
    if (a2[70] <= 0.0 && a2[69] <= 0.0) {
      float v12 = a2[71];
    }
    else {
      float v12 = 0.0;
    }
    BOOL v13 = (float)(a2[72] + v12) > v11 || (float)(a2[73] - v12) < v11;
    if (a6) {
      goto LABEL_12;
    }
LABEL_6:
    BOOL v14 = 0;
    float v15 = a2[74];
    float v16 = a2[75];
    goto LABEL_18;
  }
  BOOL v13 = 0;
  if ((a6 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_12:
  float v17 = atan2f(a4[2], a4[3] + 1.0) * 4.0;
  float v15 = a2[74];
  float v16 = a2[75];
  if (a2[70] <= 0.0 && a2[69] <= 0.0) {
    float v18 = a2[71];
  }
  else {
    float v18 = 0.0;
  }
  BOOL v14 = (float)(v16 - v18) < v17;
  if ((float)(v15 + v18) > v17) {
    BOOL v14 = 1;
  }
LABEL_18:
  if (v13 || v14) {
    uint64_t v19 = 4294901760;
  }
  else {
    uint64_t v19 = 4286611584;
  }
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[72], a2[72], v15, v16);
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[73], a2[73], a2[74], a2[75]);
  drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, a2[72], a2[73], a2[74], a2[74]);
  float v20 = a2[72];
  float v21 = a2[73];
  float v22 = a2[75];
  return drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(a1, a3, v19, v20, v21, v22, v22);
}

uint64_t visualizeAngularLimit(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  BOOL v9 = fabsf(atan2f(a4, a5 + 1.0) * 4.0) > (float)(a6 - a3);
  float v11 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, __n128, __n128))(*(void *)a1 + 32);
  v12.n128_f32[0] = a6;
  v10.n128_f32[0] = -a6;
  return v11(a1, a2, v9, v10, v12);
}

uint64_t visualizeDoubleCone(uint64_t a1, float *a2, uint64_t a3, float a4, float a5)
{
  if (a2[63] <= 0.0 && a2[62] <= 0.0) {
    float v8 = a2[64];
  }
  else {
    float v8 = 0.0;
  }
  if (a4 < -1.0) {
    a4 = -1.0;
  }
  if (a4 > 1.0) {
    a4 = 1.0;
  }
  v9.n128_f32[0] = asinf(a4);
  BOOL v10 = (float)(v8 - a5) > v9.n128_f32[0] || (float)(a5 - v8) < v9.n128_f32[0];
  float v11 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, __n128))(*(void *)a1 + 48);
  v9.n128_f32[0] = a5;
  return v11(a1, a3, v10, v9);
}

uint64_t drawPyramid(physx::PxConstraintVisualizer &,physx::Ext::D6JointData const&,physx::PxTransform const&,physx::PxQuat const&,BOOL,BOOL)::Local::drawArc(uint64_t a1, float *a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  unsigned int v13 = 0;
  uint64_t v39 = 0;
  float v40 = 0.0;
  BOOL v14 = a2 + 4;
  do
  {
    float v15 = (float)v13 / 7.0;
    float v16 = (float)((float)(1.0 - v15) * a4) + (float)(v15 * a5);
    __float2 v17 = __sincosf_stret((float)((float)(1.0 - v15) * a6) + (float)(v15 * a7));
    __float2 v18 = __sincosf_stret(v16);
    float v19 = (float)(v18.__cosval * 0.0) + (float)((float)(v17.__cosval * v18.__sinval) + (float)(v17.__sinval * -0.0));
    float v20 = (float)((float)(v18.__sinval * -0.0)
                + (float)((float)(v17.__cosval * v18.__cosval) + (float)(v17.__sinval * -0.0)))
        + (float)((float)((float)((float)(v17.__cosval * 0.0) - v17.__sinval) + 0.0) * 0.0);
    float v21 = (float)((float)((float)(v18.__cosval * 0.0)
                        + (float)((float)(v17.__sinval * v18.__sinval) + (float)(v17.__cosval * 0.0)))
                * 0.0)
        + (float)((float)((float)(v18.__sinval * -0.0)
                        + (float)((float)(v17.__sinval * v18.__cosval) + (float)(v17.__cosval * 0.0)))
                + (float)((float)((float)(v17.__cosval + (float)(v17.__sinval * 0.0)) + 0.0) * 0.0));
    float v22 = (float)((float)(v19 * 0.0) + v20) + (float)((float)(v19 * 0.0) + v20);
    float v23 = v21 + v21;
    float v24 = (float)((float)((float)((float)(v18.__cosval * 0.0) + 0.0) - v18.__sinval)
                + (float)((float)(v18.__cosval + (float)((float)(v18.__sinval * 0.0) + 0.0)) * 0.0))
        + (float)((float)((float)((float)(v18.__cosval * 0.0) + 0.0) - v18.__sinval)
                + (float)((float)(v18.__cosval + (float)((float)(v18.__sinval * 0.0) + 0.0)) * 0.0));
    float v26 = a2[2];
    float v25 = a2[3];
    float v27 = (float)(v25 * v25) + -0.5;
    float v28 = a2[1];
    float v29 = (float)((float)(v28 * v23) + (float)(*a2 * v22)) + (float)(v26 * v24);
    float v30 = (float)((float)(v25 * (float)((float)(v28 * v24) - (float)(v26 * v23))) + (float)(v22 * v27))
        + (float)(*a2 * v29);
    float v31 = (float)((float)(v25 * (float)((float)(v26 * v22) - (float)(*a2 * v24))) + (float)(v23 * v27))
        + (float)(v28 * v29);
    float v32 = (float)((float)(v25 * (float)((float)(*a2 * v23) - (float)(v28 * v22))) + (float)(v24 * v27))
        + (float)(v26 * v29);
    float v33 = a2[5] + v31;
    float v34 = a2[6] + v32;
    *(float *)&uint64_t v37 = a2[4] + v30;
    *((float *)&v37 + 1) = v33;
    float v38 = v34;
    uint64_t result = (*(uint64_t (**)(uint64_t, float *, uint64_t *, uint64_t))(*(void *)a1 + 56))(a1, v14, &v37, a3);
    if (v13) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 56))(a1, &v39, &v37, a3);
    }
    uint64_t v39 = v37;
    float v40 = v38;
    ++v13;
  }
  while (v13 != 8);
  return result;
}

uint64_t physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E72F108;
  *(void *)(a1 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E72F320;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxShape *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxShape *>::getName() [T = physx::PxShape *]";
  }
  else {
    float v8 = "<allocation names disabled>";
  }
  __n128 v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(float *a1, uint64_t a2)
{
  if (a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 48))(a2) == 1
      || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 48))(a2) == 2)
    {
      float v4 = *(void (**)(uint64_t))(*(void *)a2 + 224);
      v4(a2);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 152))(&v15, a2);
      float v7 = v16;
      float v6 = v17;
      float v8 = (float)(v6 * v6) + -0.5;
      float v9 = (float)((float)((float)(v19 * -2.0) * *((float *)&v15 + 1)) + (float)(*(float *)&v15 * (float)(v18 * -2.0)))
         + (float)(v16 * (float)(v20 * -2.0));
      float v10 = -v16;
      float v11 = (float)((float)((float)(v18 * -2.0) * v8)
                  - (float)((float)((float)(*((float *)&v15 + 1) * (float)(v20 * -2.0))
                                  - (float)(v16 * (float)(v19 * -2.0)))
                          * v17))
          + (float)(*(float *)&v15 * v9);
      float v12 = (float)((float)((float)(v19 * -2.0) * v8)
                  - (float)((float)((float)(v16 * (float)(v18 * -2.0)) - (float)(*(float *)&v15 * (float)(v20 * -2.0)))
                          * v17))
          + (float)(*((float *)&v15 + 1) * v9);
      float v13 = -*((float *)&v15 + 1);
      float v14 = (float)((float)(v20 * -2.0) * v8)
          - (float)((float)((float)(*(float *)&v15 * (float)(v19 * -2.0))
                          - (float)(*((float *)&v15 + 1) * (float)(v18 * -2.0)))
                  * v17);
      *a1 = -*(float *)&v15;
      a1[1] = v13;
      a1[2] = v10;
      a1[3] = v6;
      float result = v14 + (float)(v7 * v9);
      a1[4] = v11;
      a1[5] = v12;
      a1[6] = result;
    }
  }
  else
  {
    float result = 0.0;
    *(_OWORD *)a1 = xmmword_23435FBB0;
    *((void *)a1 + 2) = 0;
    a1[6] = 0.0;
  }
  return result;
}

float physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(_WORD *a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a1[4] != 6)
  {
    (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(void *)a1 + 312))(&v7, a1);
    *(void *)a2 = v7;
    *(float *)(a2 + 8) = v8;
    (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(void *)a1 + 328))(&v7, a1);
    *(void *)a3 = v7;
    float result = v8;
    *(float *)(a3 + 8) = v8;
  }
  else
  {
    float result = 0.0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return result;
}

void physx::PxDefaultMemoryOutputStream::~PxDefaultMemoryOutputStream(physx::PxDefaultMemoryOutputStream *this)
{
  *(void *)this = &unk_26E72F3B0;
  if (*((void *)this + 2)) {
    (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E72F3B0;
  if (*((void *)this + 2)) {
    (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::PxDefaultMemoryOutputStream::write(physx::PxDefaultMemoryOutputStream *this, const void *a2, uint64_t a3)
{
  int v6 = *((_DWORD *)this + 6);
  if ((v6 + a3) <= *((_DWORD *)this + 7))
  {
    float v11 = (char *)*((void *)this + 2);
  }
  else
  {
    unsigned int v7 = (v6 + a3) | ((v6 + a3) >> 1) | (((v6 + a3) | ((v6 + a3) >> 1)) >> 2);
    unsigned int v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    int v9 = v8 | HIWORD(v8);
    if ((v9 + 1) > 0x1000) {
      int v10 = v9 + 1;
    }
    else {
      int v10 = 4096;
    }
    *((_DWORD *)this + 7) = v10;
    float v11 = (char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
    memcpy(v11, *((const void **)this + 2), *((unsigned int *)this + 6));
    if (*((void *)this + 2)) {
      (*(void (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
    }
    *((void *)this + 2) = v11;
    int v6 = *((_DWORD *)this + 6);
  }
  memcpy(&v11[v6], a2, a3);
  *((_DWORD *)this + 6) += a3;
  return a3;
}

size_t physx::PxDefaultMemoryInputData::read(physx::PxDefaultMemoryInputData *this, void *__dst, unsigned int a3)
{
  uint64_t v4 = *((unsigned int *)this + 6);
  unsigned int v5 = *((_DWORD *)this + 2) - v4;
  if (a3 >= v5) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = a3;
  }
  memcpy(__dst, (const void *)(*((void *)this + 2) + v4), v6);
  *((_DWORD *)this + 6) += v6;
  return v6;
}

uint64_t physx::PxDefaultMemoryInputData::getLength(physx::PxDefaultMemoryInputData *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t physx::PxDefaultMemoryInputData::seek(uint64_t this, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(this + 8);
  if (v2 >= a2) {
    unsigned int v2 = a2;
  }
  *(_DWORD *)(this + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v2;
  return this;
}

uint64_t physx::PxDefaultMemoryInputData::tell(physx::PxDefaultMemoryInputData *this)
{
  return *((unsigned int *)this + 6);
}

void *physx::PxDistanceJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::DistanceJoint>::getName() [T = physx::Ext::DistanceJoint]";
  }
  else {
    float v11 = "<allocation names disabled>";
  }
  float v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtDistanceJoint.cpp", 45);
  float v13 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  float v14 = physx::Ext::DistanceJoint::DistanceJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, float))(*(void *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::DistanceJoint::sShaders, 112, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::DistanceJoint::getDistance(physx::Ext::DistanceJoint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v2);
  return sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
}

uint64_t physx::Ext::DistanceJoint::setMinDistance(physx::Ext::DistanceJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 80) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::DistanceJoint::getMinDistance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((void *)this + 13) + 80);
}

uint64_t physx::Ext::DistanceJoint::setMaxDistance(physx::Ext::DistanceJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::DistanceJoint::getMaxDistance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((void *)this + 13) + 84);
}

uint64_t physx::Ext::DistanceJoint::setTolerance(physx::Ext::DistanceJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 88) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::DistanceJoint::getTolerance(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((void *)this + 13) + 88);
}

uint64_t physx::Ext::DistanceJoint::setStiffness(physx::Ext::DistanceJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 92) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::DistanceJoint::getStiffness(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((void *)this + 13) + 92);
}

uint64_t physx::Ext::DistanceJoint::setDamping(physx::Ext::DistanceJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 96) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::DistanceJoint::getDamping(physx::Ext::DistanceJoint *this)
{
  return *(float *)(*((void *)this + 13) + 96);
}

uint64_t physx::Ext::DistanceJoint::getDistanceJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(void *)(this + 104) + 100);
  return this;
}

uint64_t physx::Ext::DistanceJoint::setDistanceJointFlags(uint64_t a1, _WORD *a2)
{
  uint64_t v3 = a1 + 96;
  uint64_t v2 = *(void *)(a1 + 96);
  *(_WORD *)(*(void *)(v3 + 8) + 100) = *a2;
  return (*(uint64_t (**)(void))(*(void *)v2 + 72))();
}

uint64_t physx::Ext::DistanceJoint::setDistanceJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (a3) {
    __int16 v4 = *(_WORD *)(v3 + 100) | a2;
  }
  else {
    __int16 v4 = *(_WORD *)(v3 + 100) & ~a2;
  }
  *(_WORD *)(v3 + 100) = v4;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

uint64_t physx::Ext::DistanceJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 112);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t DistanceJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float *a9, float *a10)
{
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)v37, a1, a4, (uint64_t)v48, v44, a2, (float *)a5, a6, a7);
  float v12 = v45;
  float v13 = v46;
  *a9 = v45;
  a9[1] = v13;
  float v14 = v47;
  a9[2] = v47;
  float v15 = v50;
  float v16 = v49 - v12;
  *a10 = v12;
  a10[1] = v13;
  a10[2] = v14;
  float v17 = v15 - v13;
  float v18 = v51 - v14;
  float v19 = sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18));
  if (v19 > 0.0)
  {
    float v16 = v16 * (float)(1.0 / v19);
    float v17 = v17 * (float)(1.0 / v19);
    float v18 = v18 * (float)(1.0 / v19);
  }
  __int16 v20 = *(_WORD *)(a5 + 100);
  if (v19 < 0.00000011921)
  {
    float v16 = 1.0;
    float v17 = 0.0;
    float v18 = 0.0;
  }
  float v21 = v41;
  float v22 = (float)(v39 * v18) - (float)(v40 * v17);
  float v23 = (float)(v40 * v16) - (float)(v38 * v18);
  float v24 = (float)(v38 * v17) - (float)(v39 * v16);
  float v25 = (float)(v42 * v18) - (float)(v43 * v17);
  float v26 = (float)(v43 * v16) - (float)(v41 * v18);
  float v27 = -(float)(v42 * v16);
  *(_WORD *)(a1 + 76) = 16;
  *(float *)a1 = v16;
  *(float *)(a1 + 4) = v17;
  *(float *)(a1 + 8) = v18;
  float v28 = v27 + (float)(v21 * v17);
  *(float *)(a1 + 16) = v22;
  *(float *)(a1 + 20) = v23;
  *(float *)(a1 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = v24;
  *(float *)(a1 + 32) = v16;
  *(float *)(a1 + 36) = v17;
  *(float *)(a1 + 40) = v18;
  *(float *)(a1 + 48) = v25;
  *(float *)(a1 + 52) = v26;
  *(float *)(a1 + 56) = v28;
  if ((v20 & 8) != 0)
  {
    *(_WORD *)(a1 + 76) = 17;
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a5 + 92);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a5 + 96);
    __int16 v29 = 25;
  }
  else
  {
    __int16 v29 = 24;
  }
  float v31 = *(float *)(a5 + 80);
  float v30 = *(float *)(a5 + 84);
  if (v31 == v30 && (v20 & 4) != 0 && (v20 & 2) != 0)
  {
    float v32 = v19 - v30;
    float v33 = *(float *)(a5 + 88);
    if (v32 <= v33)
    {
      float v34 = 0.0;
      if (v32 < (float)-v33) {
        float v34 = v32 + v33;
      }
    }
    else
    {
      float v34 = v32 - v33;
    }
    *(float *)(a1 + 12) = v34;
    return 1;
  }
  if ((v20 & 2) == 0)
  {
    if ((v20 & 4) != 0)
    {
      if (v19 >= v31)
      {
        uint64_t result = 0;
        *(float *)(a1 + 12) = v19 - v31;
        *(_DWORD *)(a1 + 44) = 0;
        *(_DWORD *)(a1 + 60) = 2139095039;
LABEL_25:
        *(_WORD *)(a1 + 76) = v29;
        return result;
      }
LABEL_27:
      *(float *)(a1 + 12) = (float)(v19 - v31) + *(float *)(a5 + 88);
      *(_DWORD *)(a1 + 44) = 0;
    }
    return 1;
  }
  if (v19 > v30)
  {
    *(float *)(a1 + 12) = (float)(v19 - v30) - *(float *)(a5 + 88);
    *(_DWORD *)(a1 + 60) = 0;
    return 1;
  }
  if ((v20 & 4) == 0)
  {
    uint64_t result = 0;
    *(float *)(a1 + 12) = v19 - v30;
    *(_DWORD *)(a1 + 44) = -8388609;
    *(_DWORD *)(a1 + 60) = 0;
    goto LABEL_25;
  }
  if (v19 < v31) {
    goto LABEL_27;
  }
  *(float *)(a1 + 12) = v19 - v31;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 2139095039;
  *(_WORD *)(a1 + 76) = v29;
  *(float *)(a1 + 80) = v16;
  *(float *)(a1 + 84) = v17;
  *(float *)(a1 + 88) = v18;
  *(float *)(a1 + 96) = v22;
  *(float *)(a1 + 100) = v23;
  *(float *)(a1 + 104) = v24;
  *(float *)(a1 + 112) = v16;
  *(float *)(a1 + 116) = v17;
  *(float *)(a1 + 120) = v18;
  *(float *)(a1 + 128) = v25;
  *(float *)(a1 + 132) = v26;
  *(float *)(a1 + 136) = v28;
  if ((*(unsigned char *)(a5 + 100) & 8) != 0)
  {
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a5 + 92);
    *(_DWORD *)(a1 + 148) = *(_DWORD *)(a5 + 96);
    float v30 = *(float *)(a5 + 84);
    __int16 v36 = 25;
  }
  else
  {
    __int16 v36 = 24;
  }
  *(float *)(a1 + 92) = v19 - v30;
  *(_DWORD *)(a1 + 1physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = -8388609;
  *(_DWORD *)(a1 + 140) = 0;
  *(_WORD *)(a1 + 156) = v36;
  return 2;
}

void DistanceJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8 = physx::Ext::joint::computeJointFrames(v16, v12, (float *)a2, a3, a4);
  if (a5) {
    (*(void (**)(uint64_t, float *, float *, float))(*(void *)a1 + 16))(a1, v16, v12, v8);
  }
  if ((a5 & 2) != 0)
  {
    __int16 v9 = *(_WORD *)(a2 + 100);
    if ((v9 & 6) != 0)
    {
      float v10 = sqrtf((float)((float)((float)(v14 - v18) * (float)(v14 - v18)) + (float)((float)(v13 - v17) * (float)(v13 - v17)))+ (float)((float)(v15 - v19) * (float)(v15 - v19)));
      if ((v9 & 2) != 0 && v10 > *(float *)(a2 + 84))
      {
        uint64_t v11 = 16711680;
        if ((v9 & 4) == 0) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v11 = 65280;
        if ((v9 & 4) == 0)
        {
LABEL_12:
          (*(void (**)(uint64_t, float *, float *, uint64_t))(*(void *)a1 + 56))(a1, &v17, &v13, v11);
          return;
        }
      }
      if (v10 < *(float *)(a2 + 80)) {
        uint64_t v11 = 255;
      }
      goto LABEL_12;
    }
  }
}

void *physx::PxFixedJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::FixedJoint>::getName() [T = physx::Ext::FixedJoint]";
  }
  else {
    uint64_t v11 = "<allocation names disabled>";
  }
  float v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtFixedJoint.cpp", 45);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  __int16 v15 = 3;
  physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::Joint((uint64_t)v12, 259, &v15, a2, a3, a4, a5, 0x60u);
  *float v12 = &unk_26E72F730;
  v12[3] = &unk_26E72F8B0;
  *(void *)(v12[13] + 80) = 0x40490FDB501502F9;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, a2, a4);
  v12[12] = v13;
  if (!v13)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::FixedJoint::getProjectionLinearTolerance(physx::Ext::FixedJoint *this)
{
  return *(float *)(*((void *)this + 13) + 80);
}

uint64_t physx::Ext::FixedJoint::setProjectionLinearTolerance(physx::Ext::FixedJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 80) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::FixedJoint::getProjectionAngularTolerance(physx::Ext::FixedJoint *this)
{
  return *(float *)(*((void *)this + 13) + 84);
}

uint64_t physx::Ext::FixedJoint::setProjectionAngularTolerance(physx::Ext::FixedJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

uint64_t physx::Ext::FixedJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 96);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t FixedJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, float *a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)v25, a1, a4, (uint64_t)&v32, &v26, a2, a5, a6, a7);
  if ((float)((float)((float)((float)(v33 * v26.f32[1]) + (float)(v32 * v26.f32[0])) + (float)(v34 * v27))
             + (float)(v35 * v28)) < 0.0)
  {
    v26.f32[0] = -v26.f32[0];
    v26.f32[1] = -v26.f32[1];
    float v27 = -v27;
    float v28 = -v28;
  }
  float v12 = (float)(v29 - v36) + (float)(v29 - v36);
  float v13 = (float)(v30 - v37) + (float)(v30 - v37);
  float v14 = (float)(v31 - v38) + (float)(v31 - v38);
  float v15 = (float)(v35 * v35) + -0.5;
  float v16 = (float)((float)(v33 * v13) + (float)(v32 * v12)) + (float)(v34 * v14);
  v20[0] = (float)((float)(v12 * v15) - (float)((float)((float)(v33 * v14) - (float)(v34 * v13)) * v35))
         + (float)(v32 * v16);
  v20[1] = (float)((float)(v13 * v15) - (float)((float)((float)(v34 * v12) - (float)(v32 * v14)) * v35))
         + (float)(v33 * v16);
  void v20[2] = (float)((float)(v14 * v15) - (float)((float)((float)(v32 * v13) - (float)(v33 * v12)) * v35))
         + (float)(v34 * v16);
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)v25, &v32, (float *)&v26, v20, 7, 7, (float *)&v23, (float *)&v21);
  float32_t v17 = v24 + a6[3].f32[0];
  *a9 = vadd_f32(v23, a6[2]);
  a9[1].f32[0] = v17;
  float32_t v18 = v22 + a7[3].f32[0];
  *a10 = vadd_f32(v21, a7[2]);
  a10[1].f32[0] = v18;
  return -858993459 * ((v25[1] - v25[0]) >> 4);
}

void FixedJointProject(float *a1, float *a2, float *a3, int a4)
{
  physx::Ext::joint::computeDerived(a1, a2, a3, &v118, &v111, &v104, 1);
  float v8 = a1[20];
  float v10 = v108;
  float v9 = v109;
  float v11 = v110;
  float v12 = (float)((float)(v9 * v9) + (float)(v10 * v10)) + (float)(v11 * v11);
  float v13 = v8 * v8;
  if (v12 > (float)(v8 * v8))
  {
    float v14 = 1.0 / sqrtf(v12);
    float v10 = v8 * (float)(v108 * v14);
    float v9 = v8 * (float)(v109 * v14);
    float v11 = v8 * (float)(v110 * v14);
  }
  __float2 v15 = __sincosf_stret(a1[21] * 0.5);
  if (v15.__sinval > 0.9999)
  {
    float v16 = v104;
    float v17 = v105;
    float v19 = v106;
    float cosval = v107;
    goto LABEL_10;
  }
  float cosval = v107;
  float v16 = v104;
  if (v107 >= 0.0)
  {
    float v17 = v105;
    float v19 = v106;
    float v20 = v104;
    float v21 = v105;
    float v22 = v106;
  }
  else
  {
    float v20 = -v104;
    float v17 = v105;
    float v19 = v106;
    float v21 = -v105;
    float v22 = -v106;
  }
  float v23 = (float)((float)(v21 * v21) + (float)(v20 * v20)) + (float)(v22 * v22);
  if (v23 <= (float)(v15.__sinval * v15.__sinval))
  {
LABEL_10:
    if (v12 <= v13) {
      return;
    }
    goto LABEL_11;
  }
  float v24 = 1.0 / sqrtf(v23);
  float v16 = (float)(v15.__sinval * v20) * v24;
  float v17 = (float)(v15.__sinval * v21) * v24;
  float v19 = (float)(v15.__sinval * v22) * v24;
  float cosval = v15.__cosval;
LABEL_11:
  if (a4)
  {
    float v25 = a1[15] * -2.0;
    float v26 = a1[16] * -2.0;
    float v27 = a1[17] * -2.0;
    float v29 = a1[13];
    float v28 = a1[14];
    float v30 = (float)(v28 * v28) + -0.5;
    float v31 = a1[11];
    float v32 = a1[12];
    float v33 = (float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v29 * v27);
    float v34 = (float)((float)(v25 * v30) - (float)((float)((float)(v32 * v27) - (float)(v29 * v26)) * v28))
        + (float)(v31 * v33);
    float v35 = (float)((float)(v26 * v30) - (float)((float)((float)(v29 * v25) - (float)(v31 * v27)) * v28))
        + (float)(v32 * v33);
    float v36 = (float)((float)(v27 * v30) - (float)((float)((float)(v31 * v26) - (float)(v32 * v25)) * v28))
        + (float)(v29 * v33);
    float v37 = v34 + v34;
    float v38 = v35 + v35;
    float v39 = v36 + v36;
    float v40 = (float)(cosval * cosval) + -0.5;
    float v41 = (float)((float)(v17 * (float)(v35 + v35)) + (float)(v16 * (float)(v34 + v34))) + (float)(v19 * v39);
    float v42 = (float)((float)(cosval * (float)((float)(v17 * v39) - (float)(v19 * (float)(v35 + v35))))
                + (float)((float)(v34 + v34) * v40))
        + (float)(v16 * v41);
    float v43 = (float)((float)(cosval * (float)((float)(v19 * v37) - (float)(v16 * v39))) + (float)((float)(v35 + v35) * v40))
        + (float)(v17 * v41);
    float v44 = (float)((float)(cosval * (float)((float)(v16 * v38) - (float)(v17 * v37))) + (float)(v39 * v40))
        + (float)(v19 * v41);
    float v45 = v10 + v42;
    float v46 = (float)((float)((float)(v16 * v28) - (float)(cosval * v31)) - (float)(v17 * v29)) + (float)(v32 * v19);
    float v47 = (float)((float)((float)(v17 * v28) - (float)(cosval * v32)) - (float)(v19 * v31)) + (float)(v29 * v16);
    float v48 = (float)((float)((float)(v19 * v28) - (float)(cosval * v29)) - (float)(v16 * v32)) + (float)(v31 * v17);
    float v49 = (float)((float)((float)(v16 * v31) + (float)(cosval * v28)) + (float)(v17 * v32)) + (float)(v19 * v29);
    float v50 = (float)(v9 + v43) + (float)(v9 + v43);
    float v51 = (float)(v11 + v44) + (float)(v11 + v44);
    float v52 = (float)(v121 * v121) + -0.5;
    float v53 = (float)((float)(v119 * v50) + (float)(v118 * (float)(v45 + v45))) + (float)(v120 * v51);
    float v54 = (float)((float)(v121 * (float)((float)(v119 * v51) - (float)(v120 * v50))) + (float)((float)(v45 + v45) * v52))
        + (float)(v118 * v53);
    float v55 = (float)((float)(v121 * (float)((float)(v120 * (float)(v45 + v45)) - (float)(v118 * v51))) + (float)(v50 * v52))
        + (float)(v119 * v53);
    float v56 = (float)((float)(v121 * (float)((float)(v118 * v50) - (float)(v119 * (float)(v45 + v45)))) + (float)(v51 * v52))
        + (float)(v120 * v53);
    float v57 = v122 + v54;
    float v58 = v123 + v55;
    float v59 = v124 + v56;
    float v60 = (float)((float)((float)(v49 * v118) + (float)(v121 * v46)) + (float)(v119 * v48)) - (float)(v47 * v120);
    float v61 = (float)((float)((float)(v49 * v119) + (float)(v121 * v47)) + (float)(v120 * v46)) - (float)(v48 * v118);
    float v62 = (float)((float)((float)(v49 * v120) + (float)(v121 * v48)) + (float)(v118 * v47)) - (float)(v46 * v119);
    float v63 = (float)((float)((float)(v121 * v49) - (float)(v118 * v46)) - (float)(v119 * v47)) - (float)(v120 * v48);
    *a3 = v60;
    a3[1] = v61;
    a3[2] = v62;
    a3[3] = v63;
    a3[4] = v57;
    a3[5] = v58;
    a3[6] = v59;
    float v64 = sqrtf((float)((float)((float)(v61 * v61) + (float)(v60 * v60)) + (float)(v62 * v62)) + (float)(v63 * v63));
    if (v64 != 0.0)
    {
      *a3 = v60 / v64;
      a3[1] = v61 / v64;
      a3[2] = v62 / v64;
      a3[3] = v63 / v64;
    }
  }
  else
  {
    float v65 = a1[8] * -2.0;
    float v66 = a1[9] * -2.0;
    float v67 = a1[10] * -2.0;
    float v69 = a1[6];
    float v68 = a1[7];
    float v70 = (float)(v68 * v68) + -0.5;
    float v71 = a1[4];
    float v72 = a1[5];
    float v73 = (float)((float)(v66 * v72) + (float)(v71 * v65)) + (float)(v69 * v67);
    float v74 = (float)((float)(v65 * v70) - (float)((float)((float)(v72 * v67) - (float)(v69 * v66)) * v68))
        + (float)(v71 * v73);
    float v75 = (float)((float)(v66 * v70) - (float)((float)((float)(v69 * v65) - (float)(v71 * v67)) * v68))
        + (float)(v72 * v73);
    float v76 = (float)((float)(v67 * v70) - (float)((float)((float)(v71 * v66) - (float)(v72 * v65)) * v68))
        + (float)(v69 * v73);
    float v77 = (float)(v74 - v10) + (float)(v74 - v10);
    float v78 = (float)(v75 - v9) + (float)(v75 - v9);
    float v79 = (float)(v76 - v11) + (float)(v76 - v11);
    float v80 = (float)(cosval * cosval) + -0.5;
    float v81 = (float)((float)-(float)(v17 * v78) - (float)(v16 * v77)) - (float)(v19 * v79);
    float v82 = (float)((float)(cosval * (float)((float)(v19 * v78) - (float)(v17 * v79))) + (float)(v77 * v80))
        - (float)(v16 * v81);
    float v83 = (float)((float)(cosval * (float)((float)(v16 * v79) - (float)(v19 * v77))) + (float)(v78 * v80))
        - (float)(v17 * v81);
    float v84 = (float)((float)(cosval * (float)((float)(v17 * v77) - (float)(v16 * v78))) + (float)(v79 * v80))
        - (float)(v19 * v81);
    float v85 = (float)((float)((float)-(float)(v16 * v68) - (float)(cosval * v71)) + (float)(v17 * v69)) - (float)(v72 * v19);
    float v86 = (float)((float)((float)-(float)(v17 * v68) - (float)(cosval * v72)) + (float)(v19 * v71)) - (float)(v69 * v16);
    float v87 = (float)((float)((float)-(float)(v19 * v68) - (float)(cosval * v69)) + (float)(v16 * v72)) - (float)(v71 * v17);
    float v88 = (float)((float)((float)(cosval * v68) - (float)(v71 * v16)) - (float)(v17 * v72)) - (float)(v19 * v69);
    float v89 = v82 + v82;
    float v90 = v84 + v84;
    float v91 = (float)(v114 * v114) + -0.5;
    float v92 = (float)((float)(v112 * (float)(v83 + v83)) + (float)(v111 * (float)(v82 + v82))) + (float)(v113 * v90);
    float v93 = (float)((float)(v114 * (float)((float)(v112 * v90) - (float)(v113 * (float)(v83 + v83))))
                + (float)((float)(v82 + v82) * v91))
        + (float)(v111 * v92);
    float v94 = (float)((float)(v114 * (float)((float)(v113 * (float)(v82 + v82)) - (float)(v111 * v90)))
                + (float)((float)(v83 + v83) * v91))
        + (float)(v112 * v92);
    float v95 = (float)((float)(v114 * (float)((float)(v111 * (float)(v83 + v83)) - (float)(v112 * v89))) + (float)(v90 * v91))
        + (float)(v113 * v92);
    float v96 = v115 + v93;
    float v97 = v116 + v94;
    float v98 = v117 + v95;
    float v99 = (float)((float)((float)(v88 * v111) + (float)(v114 * v85)) + (float)(v112 * v87)) - (float)(v86 * v113);
    float v100 = (float)((float)((float)(v88 * v112) + (float)(v114 * v86)) + (float)(v113 * v85)) - (float)(v87 * v111);
    float v101 = (float)((float)((float)(v88 * v113) + (float)(v114 * v87)) + (float)(v111 * v86)) - (float)(v85 * v112);
    float v102 = (float)((float)((float)(v114 * v88) - (float)(v111 * v85)) - (float)(v112 * v86)) - (float)(v113 * v87);
    *a2 = v99;
    a2[1] = v100;
    a2[2] = v101;
    a2[3] = v102;
    a2[4] = v96;
    a2[5] = v97;
    a2[6] = v98;
    float v103 = sqrtf((float)((float)((float)(v100 * v100) + (float)(v99 * v99)) + (float)(v101 * v101)) + (float)(v102 * v102));
    if (v103 != 0.0)
    {
      *a2 = v99 / v103;
      a2[1] = v100 / v103;
      a2[2] = v101 / v103;
      a2[3] = v102 / v103;
    }
  }
}

uint64_t FixedJointVisualize(uint64_t result, float *a2, float *a3, float *a4, char a5)
{
  if (a5)
  {
    uint64_t v5 = result;
    float v6 = physx::Ext::joint::computeJointFrames(v8, v7, a2, a3, a4);
    return (*(uint64_t (**)(uint64_t, float *, float *, float))(*(void *)v5 + 16))(v5, v8, v7, v6);
  }
  return result;
}

uint64_t physx::PxDefaultMemoryOutputStream::getSize(physx::PxDefaultMemoryOutputStream *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::PxDefaultMemoryOutputStream::getData(physx::PxDefaultMemoryOutputStream *this)
{
  return *((void *)this + 2);
}

void physx::PxDefaultMemoryInputData::~PxDefaultMemoryInputData(physx::PxDefaultMemoryInputData *this)
{
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxDistanceJoint::getConcreteTypeName(physx::PxDistanceJoint *this)
{
  return "PxDistanceJoint";
}

void physx::Ext::DistanceJoint::~DistanceJoint(physx::Ext::DistanceJoint *this)
{
  if (physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::~Joint((uint64_t)this))
  {
    uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxDistanceJoint::isKindOf(physx::PxDistanceJoint *this, const char *a2)
{
  if (!strcmp("PxDistanceJoint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  float v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::~Joint((uint64_t)this - 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::DistanceJoint::getPrep(physx::Ext::DistanceJoint *this)
{
  return physx::Ext::DistanceJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::DistanceJoint::getPrep(physx::Ext::DistanceJoint *this)
{
  return physx::Ext::DistanceJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::DistanceJoint::~DistanceJoint(physx::Ext::DistanceJoint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::~Joint((uint64_t)this - 24);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxFixedJoint::getConcreteTypeName(physx::PxFixedJoint *this)
{
  return "PxFixedJoint";
}

void physx::Ext::FixedJoint::~FixedJoint(physx::Ext::FixedJoint *this)
{
  if (physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this))
  {
    uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxFixedJoint::isKindOf(physx::PxFixedJoint *this, const char *a2)
{
  if (!strcmp("PxFixedJoint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  float v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::~Joint((uint64_t)this - 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::FixedJoint::getPrep(physx::Ext::FixedJoint *this)
{
  return physx::Ext::FixedJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::FixedJoint::getPrep(physx::Ext::FixedJoint *this)
{
  return physx::Ext::FixedJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::FixedJoint::~FixedJoint(physx::Ext::FixedJoint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

float physx::Ext::DistanceJoint::DistanceJoint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  __int16 v10 = 3;
  float v7 = (void *)physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::Joint(a1, 260, &v10, a3, a4, a5, a6, 0x70u);
  *float v7 = &unk_26E72F480;
  float v7[3] = &unk_26E72F650;
  uint64_t v8 = v7[13];
  *(void *)(v8 + 92) = 0;
  *(void *)(v8 + 80) = 0;
  float result = *a2 * 0.025;
  *(float *)(v8 + 88) = result;
  *(_WORD *)(v8 + 100) = 2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(void *)a1 = &unk_26E72F990;
  *(void *)(a1 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E72FB50;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  if (a8) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else {
    uint64_t v14 = 0;
  }
  __int32 v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  float32x4_t v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned long long *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  uint64_t v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  float v28 = v63;
  float v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  float v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  float v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  float v32 = (float)(v64 * v64) + -0.5;
  float v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  float v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  float v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  float v38 = a5->f32[2];
  float v37 = a5->f32[3];
  float v39 = a5->f32[1];
  float v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  float v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  float v42 = v35 - (float)(v62 * v33);
  float v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  float v44 = v63;
  float v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  float v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  float v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  float v48 = (float)(v64 * v64) + -0.5;
  float v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  float v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  float v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  float v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  float v54 = a7->f32[2];
  float v53 = a7->f32[3];
  float v55 = a7->f32[1];
  float v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  float v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  float v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v14 = _Q0;
  *(void *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(void *)a1 = &unk_26E72FBB8;
  *(void *)(a1 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E72FD28;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  if (a8) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else {
    uint64_t v14 = 0;
  }
  __int32 v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  float32x4_t v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned long long *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  uint64_t v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  float v28 = v63;
  float v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  float v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  float v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  float v32 = (float)(v64 * v64) + -0.5;
  float v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  float v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  float v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  float v38 = a5->f32[2];
  float v37 = a5->f32[3];
  float v39 = a5->f32[1];
  float v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  float v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  float v42 = v35 - (float)(v62 * v33);
  float v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  float v44 = v63;
  float v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  float v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  float v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  float v48 = (float)(v64 * v64) + -0.5;
  float v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  float v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  float v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  float v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  float v54 = a7->f32[2];
  float v53 = a7->f32[3];
  float v55 = a7->f32[1];
  float v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  float v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  float v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v14 = _Q0;
  *(void *)(a1 + 104) = v14;
  return a1;
}

float physx::Ext::joint::computeDerived(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, char a7)
{
  physx::Ext::joint::computeJointFrames(a4, a5, a1, a2, a3);
  float v11 = *a4;
  float v12 = *a5;
  if (a7)
  {
    float v14 = a5[1];
    float v13 = a5[2];
    float v15 = a5[3];
    if ((float)((float)((float)((float)(a4[1] * v14) + (float)(v11 * v12)) + (float)(a4[2] * v13))
               + (float)(a4[3] * v15)) < 0.0)
    {
      float v12 = -v12;
      float v14 = -v14;
      float v13 = -v13;
      float v15 = -v15;
      *a5 = v12;
      a5[1] = v14;
      a5[2] = v13;
      a5[3] = v15;
      float v11 = *a4;
    }
  }
  else
  {
    float v13 = a5[2];
    float v15 = a5[3];
    float v14 = a5[1];
  }
  float v16 = a4[1];
  float v17 = a4[2];
  float v18 = a4[3];
  float v19 = a5[4] - a4[4];
  float v20 = a5[5] - a4[5];
  float v21 = a5[6] - a4[6];
  float v22 = v19 + v19;
  float v23 = v20 + v20;
  float v24 = v21 + v21;
  float v25 = (float)(v18 * v18) + -0.5;
  float v26 = (float)((float)-(float)(v16 * v23) - (float)(v11 * v22)) - (float)(v17 * v24);
  *a6 = (float)((float)((float)(v18 * v12) - (float)(v11 * v15)) - (float)(v16 * v13)) + (float)(v14 * v17);
  a6[1] = (float)((float)((float)(v18 * v14) - (float)(v16 * v15)) - (float)(v17 * v12)) + (float)(v13 * v11);
  a6[2] = (float)((float)((float)(v18 * v13) - (float)(v17 * v15)) - (float)(v11 * v14)) + (float)(v12 * v16);
  a6[3] = (float)((float)((float)(v12 * v11) + (float)(v18 * v15)) + (float)(v16 * v14)) + (float)(v17 * v13);
  float result = (float)((float)(v18 * (float)((float)(v16 * v22) - (float)(v11 * v23))) + (float)(v24 * v25))
         - (float)(v17 * v26);
  a6[4] = (float)((float)(v18 * (float)((float)(v17 * v23) - (float)(v16 * v24))) + (float)(v22 * v25))
        - (float)(v11 * v26);
  a6[5] = (float)((float)(v18 * (float)((float)(v11 * v24) - (float)(v17 * v22))) + (float)(v23 * v25))
        - (float)(v16 * v26);
  a6[6] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxDistanceJoint,physx::PxDistanceJointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E72F990;
  *(void *)(a1 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E72FB50;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E72FBB8;
  *(void *)(a1 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E72FD28;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

void *physx::PxPrismaticJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::PrismaticJoint>::getName() [T = physx::Ext::PrismaticJoint]";
  }
  else {
    float v11 = "<allocation names disabled>";
  }
  float v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtPrismaticJoint.cpp", 45);
  float v13 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  double v14 = physx::Ext::PrismaticJoint::PrismaticJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, double))(*(void *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::PrismaticJoint::sShaders, 128, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::PrismaticJoint::setProjectionAngularTolerance(physx::Ext::PrismaticJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 112) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::PrismaticJoint::getProjectionAngularTolerance(physx::Ext::PrismaticJoint *this)
{
  return *(float *)(*((void *)this + 13) + 112);
}

uint64_t physx::Ext::PrismaticJoint::setProjectionLinearTolerance(physx::Ext::PrismaticJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 108) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::PrismaticJoint::getProjectionLinearTolerance(physx::Ext::PrismaticJoint *this)
{
  return *(float *)(*((void *)this + 13) + 108);
}

uint64_t physx::Ext::PrismaticJoint::getPrismaticJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(void *)(this + 104) + 116);
  return this;
}

uint64_t physx::Ext::PrismaticJoint::setPrismaticJointFlags(uint64_t a1, _WORD *a2)
{
  uint64_t v3 = a1 + 96;
  uint64_t v2 = *(void *)(a1 + 96);
  *(_WORD *)(*(void *)(v3 + 8) + 116) = *a2;
  return (*(uint64_t (**)(void))(*(void *)v2 + 72))();
}

uint64_t physx::Ext::PrismaticJoint::setPrismaticJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (a3) {
    __int16 v4 = *(_WORD *)(v3 + 116) | a2;
  }
  else {
    __int16 v4 = *(_WORD *)(v3 + 116) & ~a2;
  }
  *(_WORD *)(v3 + 116) = v4;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::PrismaticJoint::getLimit@<S0>(physx::Ext::PrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 80);
  float result = *(float *)(v2 + 96);
  *(float *)(a2 + 16) = result;
  *(void *)(a2 + 20) = *(void *)(v2 + 100);
  return result;
}

uint64_t physx::Ext::PrismaticJoint::setLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(_OWORD *)(v2 + 92) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 80) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

uint64_t physx::Ext::PrismaticJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 128);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t PrismaticJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v53, a1, a4, (uint64_t)&v67, &v61, a2, (float *)a5, a6, a7);
  if ((float)((float)((float)((float)(v68 * v61.f32[1]) + (float)(v67 * v61.f32[0])) + (float)(v69 * v62))
             + (float)(v70 * v63)) < 0.0)
  {
    v61.f32[0] = -v61.f32[0];
    v61.f32[1] = -v61.f32[1];
    float v62 = -v62;
    float v63 = -v63;
  }
  __int16 v13 = *(_WORD *)(a5 + 116);
  BOOL v14 = (v13 & 2) != 0 && *(float *)(a5 + 104) >= *(float *)(a5 + 100);
  float v15 = (float)(v64 - v71) + (float)(v64 - v71);
  float v16 = (float)(v65 - v72) + (float)(v65 - v72);
  float v17 = (float)(v66 - v73) + (float)(v66 - v73);
  float v18 = (float)(v70 * v70) + -0.5;
  float v19 = (float)((float)(v68 * v16) + (float)(v67 * v15)) + (float)(v69 * v17);
  v52[0] = (float)((float)(v15 * v18) - (float)((float)((float)(v68 * v17) - (float)(v69 * v16)) * v70))
         + (float)(v67 * v19);
  v52[1] = (float)((float)(v16 * v18) - (float)((float)((float)(v69 * v15) - (float)(v67 * v17)) * v70))
         + (float)(v68 * v19);
  v52[2] = (float)((float)(v17 * v18) - (float)((float)((float)(v67 * v16) - (float)(v68 * v15)) * v70))
         + (float)(v69 * v19);
  if (v14) {
    int v20 = 7;
  }
  else {
    int v20 = 6;
  }
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v53, &v67, (float *)&v61, v52, v20, 7, (float *)&v50, (float *)&v48);
  float32_t v21 = v51 + a6[3].f32[0];
  *a9 = vadd_f32(v50, a6[2]);
  a9[1].f32[0] = v21;
  float32_t v22 = v49 + a7[3].f32[0];
  *a10 = vadd_f32(v48, a7[2]);
  a10[1].f32[0] = v22;
  if ((v13 & 2) != 0 && !v14)
  {
    float v23 = (float)(v70 * v70) + -0.5;
    float v24 = 0.0;
    float v25 = (float)((float)(v68 * 0.0) + (float)(v67 * 2.0)) + (float)(v69 * 0.0);
    float v26 = (float)(v70 * (float)((float)(v69 * -0.0) + (float)(v68 * 0.0))) + (float)(v23 * 2.0);
    float v27 = (float)(v70 * (float)((float)(v67 * -0.0) + (float)(v69 * 2.0))) + (float)(v23 * 0.0);
    float v28 = (float)(v70 * (float)((float)(v68 * -2.0) + (float)(v67 * 0.0))) + (float)(v23 * 0.0);
    float v29 = v52[0];
    float v30 = *(float *)(a5 + 100);
    float v31 = *(float *)(a5 + 92);
    if (v31 <= 0.0 && *(float *)(a5 + 88) <= 0.0) {
      float v24 = *(float *)(a5 + 96);
    }
    float v32 = v26 + (float)(v67 * v25);
    float v33 = v27 + (float)(v68 * v25);
    float v34 = v28 + (float)(v69 * v25);
    if ((float)(v52[0] + v24) > v30)
    {
      uint64_t v35 = v54;
      v54 += 80;
      *(_WORD *)(v35 + 78) = 0;
      *(float *)uint64_t v35 = v32;
      *(float *)(v35 + 4) = v33;
      *(float *)(v35 + 8) = v34;
      float v36 = (float)(v57 * v32) - (float)(v55 * v34);
      float v37 = (float)(v55 * v33) - (float)(v56 * v32);
      *(float *)(v35 + 16) = (float)(v56 * v34) - (float)(v57 * v33);
      *(float *)(v35 + 20) = v36;
      *(float *)(v35 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = v37;
      *(float *)(v35 + 32) = v32;
      *(float *)(v35 + 36) = v33;
      *(float *)(v35 + 40) = v34;
      float v38 = (float)(v60 * v32) - (float)(v58 * v34);
      float v39 = (float)(v58 * v33) - (float)(v59 * v32);
      *(float *)(v35 + 48) = (float)(v59 * v34) - (float)(v60 * v33);
      *(float *)(v35 + 52) = v38;
      *(float *)(v35 + 56) = v39;
      *(float *)(v35 + 12) = v30 - v29;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v53, v35, a5 + 80);
      float v31 = *(float *)(a5 + 92);
    }
    float v40 = *(float *)(a5 + 104);
    if (v31 <= 0.0 && *(float *)(a5 + 88) <= 0.0) {
      float v41 = *(float *)(a5 + 96);
    }
    else {
      float v41 = 0.0;
    }
    if ((float)(v41 - v29) > (float)-v40)
    {
      uint64_t v42 = v54;
      v54 += 80;
      *(_WORD *)(v42 + 78) = 0;
      *(float *)uint64_t v42 = -v32;
      *(float *)(v42 + 4) = -v33;
      *(float *)(v42 + 8) = -v34;
      float v43 = (float)(v34 * v55) + (float)(v57 * (float)-v32);
      float v44 = (float)(v32 * v56) + (float)(v55 * (float)-v33);
      *(float *)(v42 + 16) = (float)(v33 * v57) + (float)(v56 * (float)-v34);
      *(float *)(v42 + 20) = v43;
      *(float *)(v42 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = v44;
      *(float *)(v42 + 32) = -v32;
      *(float *)(v42 + 36) = -v33;
      *(float *)(v42 + 40) = -v34;
      float v45 = (float)(v34 * v58) + (float)(v60 * (float)-v32);
      float v46 = (float)(v32 * v59) + (float)(v58 * (float)-v33);
      *(float *)(v42 + 48) = (float)(v33 * v60) + (float)(v59 * (float)-v34);
      *(float *)(v42 + 52) = v45;
      *(float *)(v42 + 56) = v46;
      *(float *)(v42 + 12) = v29 - v40;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v53, v42, a5 + 80);
    }
  }
  return -858993459 * ((unint64_t)(v54 - v53) >> 4);
}

void PrismaticJointProject(float *a1, float *a2, float *a3, int a4)
{
  physx::Ext::joint::computeDerived(a1, a2, a3, &v117, &v110, &v103, 1);
  float v9 = v108;
  float v8 = v109;
  float v10 = a1[27];
  float v11 = (float)(v9 * v9) + (float)(v8 * v8);
  float v12 = v10 * v10;
  if (v11 > (float)(v10 * v10))
  {
    float v13 = 1.0 / sqrtf(v11);
    float v9 = v10 * (float)(v108 * v13);
    float v8 = v10 * (float)(v109 * v13);
  }
  __float2 v14 = __sincosf_stret(a1[28] * 0.5);
  if (v14.__sinval > 0.9999)
  {
    float v15 = v103;
    float v16 = v104;
    float v18 = v105;
    float cosval = v106;
    goto LABEL_10;
  }
  float cosval = v106;
  float v15 = v103;
  if (v106 >= 0.0)
  {
    float v16 = v104;
    float v18 = v105;
    float v19 = v103;
    float v20 = v104;
    float v21 = v105;
  }
  else
  {
    float v19 = -v103;
    float v16 = v104;
    float v18 = v105;
    float v20 = -v104;
    float v21 = -v105;
  }
  float v22 = (float)((float)(v20 * v20) + (float)(v19 * v19)) + (float)(v21 * v21);
  if (v22 <= (float)(v14.__sinval * v14.__sinval))
  {
LABEL_10:
    if (v11 <= v12) {
      return;
    }
    goto LABEL_11;
  }
  float v23 = 1.0 / sqrtf(v22);
  float v15 = (float)(v14.__sinval * v19) * v23;
  float v16 = (float)(v14.__sinval * v20) * v23;
  float v18 = (float)(v14.__sinval * v21) * v23;
  float cosval = v14.__cosval;
LABEL_11:
  if (a4)
  {
    float v24 = a1[15] * -2.0;
    float v25 = a1[16] * -2.0;
    float v26 = a1[17] * -2.0;
    float v28 = a1[13];
    float v27 = a1[14];
    float v29 = (float)(v27 * v27) + -0.5;
    float v30 = a1[11];
    float v31 = a1[12];
    float v32 = (float)((float)(v25 * v31) + (float)(v30 * v24)) + (float)(v28 * v26);
    float v33 = (float)((float)(v24 * v29) - (float)((float)((float)(v31 * v26) - (float)(v28 * v25)) * v27))
        + (float)(v30 * v32);
    float v34 = (float)((float)(v25 * v29) - (float)((float)((float)(v28 * v24) - (float)(v30 * v26)) * v27))
        + (float)(v31 * v32);
    float v35 = (float)((float)(v26 * v29) - (float)((float)((float)(v30 * v25) - (float)(v31 * v24)) * v27))
        + (float)(v28 * v32);
    float v36 = v33 + v33;
    float v37 = v34 + v34;
    float v38 = v35 + v35;
    float v39 = (float)(cosval * cosval) + -0.5;
    float v40 = (float)((float)(v16 * (float)(v34 + v34)) + (float)(v15 * (float)(v33 + v33))) + (float)(v18 * v38);
    float v41 = (float)((float)(cosval * (float)((float)(v16 * v38) - (float)(v18 * (float)(v34 + v34))))
                + (float)((float)(v33 + v33) * v39))
        + (float)(v15 * v40);
    float v42 = (float)((float)(cosval * (float)((float)(v18 * v36) - (float)(v15 * v38))) + (float)((float)(v34 + v34) * v39))
        + (float)(v16 * v40);
    float v43 = (float)((float)(cosval * (float)((float)(v15 * v37) - (float)(v16 * v36))) + (float)(v38 * v39))
        + (float)(v18 * v40);
    float v44 = (float)((float)((float)(v15 * v27) - (float)(cosval * v30)) - (float)(v16 * v28)) + (float)(v31 * v18);
    float v45 = (float)((float)((float)(v16 * v27) - (float)(cosval * v31)) - (float)(v18 * v30)) + (float)(v28 * v15);
    float v46 = (float)((float)((float)(v18 * v27) - (float)(cosval * v28)) - (float)(v15 * v31)) + (float)(v30 * v16);
    float v47 = (float)((float)((float)(v15 * v30) + (float)(cosval * v27)) + (float)(v16 * v31)) + (float)(v18 * v28);
    float v48 = (float)(v107 + v41) + (float)(v107 + v41);
    float v49 = (float)(v9 + v42) + (float)(v9 + v42);
    float v50 = (float)(v8 + v43) + (float)(v8 + v43);
    float v51 = (float)(v120 * v120) + -0.5;
    float v52 = (float)((float)(v118 * v49) + (float)(v117 * v48)) + (float)(v119 * v50);
    float v53 = (float)((float)(v120 * (float)((float)(v118 * v50) - (float)(v119 * v49))) + (float)(v48 * v51))
        + (float)(v117 * v52);
    float v54 = (float)((float)(v120 * (float)((float)(v119 * v48) - (float)(v117 * v50))) + (float)(v49 * v51))
        + (float)(v118 * v52);
    float v55 = (float)((float)(v120 * (float)((float)(v117 * v49) - (float)(v118 * v48))) + (float)(v50 * v51))
        + (float)(v119 * v52);
    float v56 = v121 + v53;
    float v57 = v122 + v54;
    float v58 = v123 + v55;
    float v59 = (float)((float)((float)(v47 * v117) + (float)(v120 * v44)) + (float)(v118 * v46)) - (float)(v45 * v119);
    float v60 = (float)((float)((float)(v47 * v118) + (float)(v120 * v45)) + (float)(v119 * v44)) - (float)(v46 * v117);
    float v61 = (float)((float)((float)(v47 * v119) + (float)(v120 * v46)) + (float)(v117 * v45)) - (float)(v44 * v118);
    float v62 = (float)((float)((float)(v120 * v47) - (float)(v117 * v44)) - (float)(v118 * v45)) - (float)(v119 * v46);
    *a3 = v59;
    a3[1] = v60;
    a3[2] = v61;
    a3[3] = v62;
    a3[4] = v56;
    a3[5] = v57;
    a3[6] = v58;
    float v63 = sqrtf((float)((float)((float)(v60 * v60) + (float)(v59 * v59)) + (float)(v61 * v61)) + (float)(v62 * v62));
    if (v63 != 0.0)
    {
      *a3 = v59 / v63;
      a3[1] = v60 / v63;
      a3[2] = v61 / v63;
      a3[3] = v62 / v63;
    }
  }
  else
  {
    float v64 = a1[8] * -2.0;
    float v65 = a1[9] * -2.0;
    float v66 = a1[10] * -2.0;
    float v68 = a1[6];
    float v67 = a1[7];
    float v69 = (float)(v67 * v67) + -0.5;
    float v70 = a1[4];
    float v71 = a1[5];
    float v72 = (float)((float)(v65 * v71) + (float)(v70 * v64)) + (float)(v68 * v66);
    float v73 = (float)((float)(v64 * v69) - (float)((float)((float)(v71 * v66) - (float)(v68 * v65)) * v67))
        + (float)(v70 * v72);
    float v74 = (float)((float)(v65 * v69) - (float)((float)((float)(v68 * v64) - (float)(v70 * v66)) * v67))
        + (float)(v71 * v72);
    float v75 = (float)((float)(v66 * v69) - (float)((float)((float)(v70 * v65) - (float)(v71 * v64)) * v67))
        + (float)(v68 * v72);
    float v76 = (float)(v73 - v107) + (float)(v73 - v107);
    float v77 = (float)(v74 - v9) + (float)(v74 - v9);
    float v78 = (float)(v75 - v8) + (float)(v75 - v8);
    float v79 = (float)(cosval * cosval) + -0.5;
    float v80 = (float)((float)-(float)(v16 * v77) - (float)(v15 * v76)) - (float)(v18 * v78);
    float v81 = (float)((float)(cosval * (float)((float)(v18 * v77) - (float)(v16 * v78))) + (float)(v76 * v79))
        - (float)(v15 * v80);
    float v82 = (float)((float)(cosval * (float)((float)(v15 * v78) - (float)(v18 * v76))) + (float)(v77 * v79))
        - (float)(v16 * v80);
    float v83 = (float)((float)(cosval * (float)((float)(v16 * v76) - (float)(v15 * v77))) + (float)(v78 * v79))
        - (float)(v18 * v80);
    float v84 = (float)((float)((float)-(float)(v15 * v67) - (float)(cosval * v70)) + (float)(v16 * v68)) - (float)(v71 * v18);
    float v85 = (float)((float)((float)-(float)(v16 * v67) - (float)(cosval * v71)) + (float)(v18 * v70)) - (float)(v68 * v15);
    float v86 = (float)((float)((float)-(float)(v18 * v67) - (float)(cosval * v68)) + (float)(v15 * v71)) - (float)(v70 * v16);
    float v87 = (float)((float)((float)(cosval * v67) - (float)(v70 * v15)) - (float)(v16 * v71)) - (float)(v18 * v68);
    float v88 = v81 + v81;
    float v89 = v83 + v83;
    float v90 = (float)(v113 * v113) + -0.5;
    float v91 = (float)((float)(v111 * (float)(v82 + v82)) + (float)(v110 * (float)(v81 + v81))) + (float)(v112 * v89);
    float v92 = (float)((float)(v113 * (float)((float)(v111 * v89) - (float)(v112 * (float)(v82 + v82))))
                + (float)((float)(v81 + v81) * v90))
        + (float)(v110 * v91);
    float v93 = (float)((float)(v113 * (float)((float)(v112 * (float)(v81 + v81)) - (float)(v110 * v89)))
                + (float)((float)(v82 + v82) * v90))
        + (float)(v111 * v91);
    float v94 = (float)((float)(v113 * (float)((float)(v110 * (float)(v82 + v82)) - (float)(v111 * v88))) + (float)(v89 * v90))
        + (float)(v112 * v91);
    float v95 = v114 + v92;
    float v96 = v115 + v93;
    float v97 = v116 + v94;
    float v98 = (float)((float)((float)(v87 * v110) + (float)(v113 * v84)) + (float)(v111 * v86)) - (float)(v85 * v112);
    float v99 = (float)((float)((float)(v87 * v111) + (float)(v113 * v85)) + (float)(v112 * v84)) - (float)(v86 * v110);
    float v100 = (float)((float)((float)(v87 * v112) + (float)(v113 * v86)) + (float)(v110 * v85)) - (float)(v84 * v111);
    float v101 = (float)((float)((float)(v113 * v87) - (float)(v110 * v84)) - (float)(v111 * v85)) - (float)(v112 * v86);
    *a2 = v98;
    a2[1] = v99;
    a2[2] = v100;
    a2[3] = v101;
    a2[4] = v95;
    a2[5] = v96;
    a2[6] = v97;
    float v102 = sqrtf((float)((float)((float)(v99 * v99) + (float)(v98 * v98)) + (float)(v100 * v100)) + (float)(v101 * v101));
    if (v102 != 0.0)
    {
      *a2 = v98 / v102;
      a2[1] = v99 / v102;
      a2[2] = v100 / v102;
      a2[3] = v101 / v102;
    }
  }
}

void PrismaticJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8 = physx::Ext::joint::computeJointFrames(&v15, v11, (float *)a2, a3, a4);
  if (a5) {
    (*(void (**)(uint64_t, float *, float *, float))(*(void *)a1 + 16))(a1, &v15, v11, v8);
  }
  if ((a5 & 2) != 0 && (*(_WORD *)(a2 + 116) & 2) != 0)
  {
    float v9 = (float)((float)((float)((float)(v12 - v19) + (float)(v12 - v19)) * (float)((float)(v18 * v18) + -0.5))
               - (float)((float)((float)(v16 * (float)((float)(v14 - v21) + (float)(v14 - v21)))
                               - (float)(v17 * (float)((float)(v13 - v20) + (float)(v13 - v20))))
                       * v18))
       + (float)(v15
               * (float)((float)((float)((float)((float)(v13 - v20) + (float)(v13 - v20)) * v16)
                               + (float)(v15 * (float)((float)(v12 - v19) + (float)(v12 - v19))))
                       + (float)(v17 * (float)((float)(v14 - v21) + (float)(v14 - v21)))));
    float v10 = 0.0;
    if (*(float *)(a2 + 92) <= 0.0 && *(float *)(a2 + 88) <= 0.0) {
      float v10 = *(float *)(a2 + 96);
    }
    (*(void (**)(uint64_t, float *, float *, BOOL))(*(void *)a1 + 24))(a1, &v15, v11, v9 < (float)(v10 + *(float *)(a2 + 104)));
    (*(void (**)(uint64_t, float *, float *, BOOL))(*(void *)a1 + 24))(a1, &v15, v11, v9 > (float)(*(float *)(a2 + 100) - v10));
  }
}

void *physx::PxRevoluteJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::RevoluteJoint>::getName() [T = physx::Ext::RevoluteJoint]";
  }
  else {
    float v11 = "<allocation names disabled>";
  }
  float v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRevoluteJoint.cpp", 45);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  double v14 = physx::Ext::RevoluteJoint::RevoluteJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, double))(*(void *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::RevoluteJoint::sShaders, 144, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

float physx::Ext::RevoluteJoint::getAngle(physx::Ext::RevoluteJoint *this)
{
  (*(void (**)(float *__return_ptr))(*(void *)this + 80))(v7);
  float v1 = 1.0;
  if (v7[0] == 0.0)
  {
    BOOL v4 = 0;
    float v3 = 1.0;
  }
  else
  {
    float v2 = sqrtf((float)((float)(v7[0] * v7[0]) + 0.0) + (float)(v8 * v8));
    float v3 = v8 / v2;
    BOOL v4 = (float)(v7[0] / v2) < 0.0;
  }
  if (v3 < -1.0) {
    float v3 = -1.0;
  }
  if (v3 <= 1.0) {
    float v1 = v3;
  }
  float v5 = acosf(v1);
  float result = v5 + v5;
  if (v4) {
    return -result;
  }
  return result;
}

float physx::Ext::RevoluteJoint::getVelocity(physx::Ext::RevoluteJoint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 96))(&v2);
  return sqrtf((float)((float)(*((float *)&v2 + 1) * *((float *)&v2 + 1)) + (float)(*(float *)&v2 * *(float *)&v2))+ (float)(v3 * v3));
}

float physx::Ext::RevoluteJoint::getLimit@<S0>(physx::Ext::RevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 92);
  float result = *(float *)(v2 + 108);
  *(float *)(a2 + 16) = result;
  *(void *)(a2 + 20) = *(void *)(v2 + 112);
  return result;
}

uint64_t physx::Ext::RevoluteJoint::setLimit(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(_OWORD *)(v2 + 104) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 92) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::RevoluteJoint::getDriveVelocity(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((void *)this + 13) + 80);
}

uint64_t physx::Ext::RevoluteJoint::setDriveVelocity(physx::Ext::RevoluteJoint *this, float a2, int a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  *(float *)(*((void *)this + 13) + 80) = a2;
  if (a3)
  {
    uint64_t v4 = *((void *)this + 12);
    uint64_t v18 = 0;
    v19[0] = 0;
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v4 + 56))(v4, &v18, v19);
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      uint64_t v8 = v19[v5 - 1];
      if (v8)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8))
        {
          if ((*(unsigned int (**)(void))(*(void *)v19[v5 - 1] + 48))(v19[v5 - 1]) == 1)
          {
            uint64_t v9 = v19[v5 - 1];
            (*(void (**)(char *__return_ptr, uint64_t))(*(void *)v9 + 432))(&v17, v9);
            if ((v17 & 1) == 0)
            {
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
              float v11 = (*(float (**)(uint64_t))(*(void *)v10 + 880))(v10);
              float v12 = (*(float (**)(uint64_t))(*(void *)v9 + 584))(v9);
              int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 512))(v9);
              if (v12 < v11 || v13 != 0)
              {
                if (v12 >= v11) {
                  float v11 = v12;
                }
                (*(void (**)(uint64_t))(*(void *)v9 + 592))(v9);
                (*(void (**)(uint64_t, float))(*(void *)v9 + 576))(v9, v11);
              }
            }
          }
        }
      }
      char v6 = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
  }
  uint64_t v15 = *(uint64_t (**)(void))(**((void **)this + 12) + 72);
  return v15();
}

float physx::Ext::RevoluteJoint::getDriveForceLimit(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((void *)this + 13) + 84);
}

uint64_t physx::Ext::RevoluteJoint::setDriveForceLimit(physx::Ext::RevoluteJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 84) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::RevoluteJoint::getDriveGearRatio(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((void *)this + 13) + 88);
}

uint64_t physx::Ext::RevoluteJoint::setDriveGearRatio(physx::Ext::RevoluteJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 88) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

uint64_t physx::Ext::RevoluteJoint::setProjectionAngularTolerance(physx::Ext::RevoluteJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 1physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::RevoluteJoint::getProjectionAngularTolerance(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((void *)this + 13) + 124);
}

uint64_t physx::Ext::RevoluteJoint::setProjectionLinearTolerance(physx::Ext::RevoluteJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 120) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::RevoluteJoint::getProjectionLinearTolerance(physx::Ext::RevoluteJoint *this)
{
  return *(float *)(*((void *)this + 13) + 120);
}

uint64_t physx::Ext::RevoluteJoint::getRevoluteJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(void *)(this + 104) + 128);
  return this;
}

uint64_t physx::Ext::RevoluteJoint::setRevoluteJointFlags(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(result + 104) + 128) = *a2;
  return result;
}

uint64_t physx::Ext::RevoluteJoint::setRevoluteJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (a3) {
    __int16 v4 = *(_WORD *)(v3 + 128) | a2;
  }
  else {
    __int16 v4 = *(_WORD *)(v3 + 128) & ~a2;
  }
  *(_WORD *)(v3 + 128) = v4;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

uint64_t physx::Ext::RevoluteJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 144);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t RevoluteJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, int a8, float32x2_t *a9, float32x2_t *a10)
{
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v60, a1, a4, (uint64_t)&v68, &v62, a2, (float *)a5, a6, a7);
  __int16 v14 = *(_WORD *)(a5 + 128);
  if ((v14 & 1) == 0)
  {
    BOOL v15 = 0;
    if (!a8) {
      goto LABEL_3;
    }
LABEL_6:
    float v16 = v68;
    float v17 = v69;
    float v18 = v70;
    float v19 = v71;
    goto LABEL_7;
  }
  BOOL v15 = *(float *)(a5 + 116) >= *(float *)(a5 + 112);
  if (a8) {
    goto LABEL_6;
  }
LABEL_3:
  float v16 = v68;
  float v17 = v69;
  float v18 = v70;
  float v19 = v71;
  if ((float)((float)((float)((float)(v62.f32[1] * v69) + (float)(v62.f32[0] * v68)) + (float)(v63 * v70))
             + (float)(v64 * v71)) < 0.0)
  {
    v62.f32[0] = -v62.f32[0];
    v62.f32[1] = -v62.f32[1];
    float v63 = -v63;
    float v64 = -v64;
  }
LABEL_7:
  float v20 = (float)(v65 - v72) + (float)(v65 - v72);
  float v21 = (float)(v66 - v73) + (float)(v66 - v73);
  float v22 = (float)(v67 - v74) + (float)(v67 - v74);
  float v23 = (float)(v19 * v19) + -0.5;
  float v24 = (float)((float)(v17 * v21) + (float)(v16 * v20)) + (float)(v18 * v22);
  v55[0] = (float)((float)(v20 * v23) - (float)((float)((float)(v17 * v22) - (float)(v18 * v21)) * v19))
         + (float)(v16 * v24);
  v55[1] = (float)((float)(v21 * v23) - (float)((float)((float)(v18 * v20) - (float)(v16 * v22)) * v19))
         + (float)(v17 * v24);
  v55[2] = (float)((float)(v22 * v23) - (float)((float)((float)(v16 * v21) - (float)(v17 * v20)) * v19))
         + (float)(v18 * v24);
  if (v15) {
    int v25 = 7;
  }
  else {
    int v25 = 6;
  }
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v60, &v68, (float *)&v62, v55, 7, v25, (float *)&v58, (float *)&v56);
  float32_t v26 = v59 + a6[3].f32[0];
  *a9 = vadd_f32(v58, a6[2]);
  a9[1].f32[0] = v26;
  float32_t v27 = v57 + a7[3].f32[0];
  *a10 = vadd_f32(v56, a7[2]);
  a10[1].f32[0] = v27;
  if (!v15)
  {
    float v29 = v70;
    float v28 = v71;
    float v30 = (float)(v28 * v28) + -0.5;
    float v32 = v68;
    float v31 = v69;
    float v33 = (float)((float)(v69 * 0.0) + (float)(v68 * 2.0)) + (float)(v70 * 0.0);
    float v34 = (float)((float)(v71 * (float)((float)(v70 * -0.0) + (float)(v69 * 0.0))) + (float)(v30 * 2.0))
        + (float)(v68 * v33);
    float v35 = (float)((float)(v71 * (float)((float)(v68 * -0.0) + (float)(v70 * 2.0))) + (float)(v30 * 0.0))
        + (float)(v69 * v33);
    float v36 = (float)((float)(v71 * (float)((float)(v69 * -2.0) + (float)(v68 * 0.0))) + (float)(v30 * 0.0))
        + (float)(v70 * v33);
    __int16 v37 = *(_WORD *)(a5 + 128);
    if ((v37 & 2) != 0)
    {
      uint64_t v38 = v61;
      v61 += 80;
      *(_WORD *)(v38 + 78) = 0;
      *(void *)uint64_t v38 = 0;
      *(_DWORD *)(v38 + 8) = 0;
      *(float *)(v38 + 16) = -v34;
      *(float *)(v38 + 20) = -v35;
      *(float *)(v38 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = -v36;
      *(void *)(v38 + 32) = 0;
      *(_DWORD *)(v38 + 40) = 0;
      float v39 = *(float *)(a5 + 88);
      *(float *)(v38 + 48) = -(float)(v34 * v39);
      *(float *)(v38 + 52) = -(float)(v35 * v39);
      *(float *)(v38 + 56) = -(float)(v36 * v39);
      float v40 = *(float *)(a5 + 80);
      *(float *)(v38 + 28) = v40;
      float v41 = *(float *)(a5 + 84);
      *(float *)(v38 + 44) = -v41;
      *(float *)(v38 + 60) = v41;
      __int16 v42 = *(_WORD *)(v38 + 76);
      if ((v37 & 4) != 0)
      {
        if (v40 > 0.0) {
          *(_DWORD *)(v38 + 44) = 0;
        }
        if (v40 < 0.0) {
          *(_DWORD *)(v38 + 60) = 0;
        }
      }
      *(_WORD *)(v38 + 76) = v42 | 0x60;
    }
    if (v14)
    {
      float v43 = (float)((float)((float)(v64 * (float)-v32) + (float)(v28 * v62.f32[0])) + (float)((float)-v31 * v63))
          + (float)(v62.f32[1] * v29);
      float v44 = (float)((float)((float)(v32 * v62.f32[0]) + (float)(v28 * v64)) + (float)(v31 * v62.f32[1]))
          + (float)(v29 * v63);
      float v45 = sqrtf((float)((float)(v43 * v43) + 0.0) + (float)(v44 * v44));
      if (v45 != 0.0)
      {
        float v43 = v43 / v45;
        float v44 = v44 / v45;
      }
      if (v44 < -1.0) {
        float v44 = -1.0;
      }
      if (v44 > 1.0) {
        float v44 = 1.0;
      }
      float v46 = acosf(v44);
      float v47 = v46 + v46;
      if (v43 >= 0.0) {
        float v48 = v47;
      }
      else {
        float v48 = -v47;
      }
      float v49 = *(float *)(a5 + 116);
      if (*(float *)(a5 + 104) <= 0.0 && *(float *)(a5 + 100) <= 0.0) {
        float v50 = *(float *)(a5 + 108);
      }
      else {
        float v50 = 0.0;
      }
      float v51 = *(float *)(a5 + 112);
      if ((float)(v49 + v50) > v48)
      {
        uint64_t v52 = v61;
        v61 += 80;
        *(_WORD *)(v52 + 78) = 0;
        *(void *)uint64_t v52 = 0;
        *(_DWORD *)(v52 + 8) = 0;
        *(float *)(v52 + 20) = -v35;
        *(float *)(v52 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = -v36;
        *(void *)(v52 + 32) = 0;
        *(_DWORD *)(v52 + 40) = 0;
        *(float *)(v52 + 48) = -v34;
        *(float *)(v52 + 52) = -v35;
        *(float *)(v52 + 56) = -v36;
        *(float *)(v52 + 12) = -(float)(v49 - v48);
        *(float *)(v52 + 16) = -v34;
        *(_WORD *)(v52 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v60, v52, a5 + 92);
      }
      if ((float)(v51 - v50) < v48)
      {
        uint64_t v53 = v61;
        v61 += 80;
        *(_WORD *)(v53 + 78) = 0;
        *(void *)uint64_t v53 = 0;
        *(_DWORD *)(v53 + 8) = 0;
        *(float *)(v53 + 20) = v35;
        *(float *)(v53 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = v36;
        *(void *)(v53 + 32) = 0;
        *(_DWORD *)(v53 + 40) = 0;
        *(float *)(v53 + 48) = v34;
        *(float *)(v53 + 52) = v35;
        *(float *)(v53 + 56) = v36;
        *(float *)(v53 + 12) = v51 - v48;
        *(float *)(v53 + 16) = v34;
        *(_WORD *)(v53 + 76) |= 0x40u;
        physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v60, v53, a5 + 92);
      }
    }
  }
  return -858993459 * ((unint64_t)(v61 - v60) >> 4);
}

void RevoluteJointProject(float *a1, float *a2, float *a3, int a4)
{
  physx::Ext::joint::computeJointFrames(&v142, &v135, a1, a2, a3);
  float v8 = v144;
  float v121 = v147;
  float v122 = v139;
  float v119 = v140;
  float v120 = v146;
  float v117 = v141;
  float v118 = v148;
  float v9 = (float)(v139 - v146) + (float)(v139 - v146);
  float v10 = (float)(v140 - v147) + (float)(v140 - v147);
  float v11 = (float)(v141 - v148) + (float)(v141 - v148);
  float v12 = (float)(v145 * v145) + -0.5;
  float v13 = (float)((float)-(float)(v143 * v10) - (float)(v142 * v9)) - (float)(v144 * v11);
  float v14 = (float)((float)(v145 * (float)((float)(v144 * v10) - (float)(v143 * v11))) + (float)(v9 * v12))
      - (float)(v142 * v13);
  float v15 = (float)((float)(v145 * (float)((float)(v142 * v11) - (float)(v144 * v9))) + (float)(v10 * v12))
      - (float)(v143 * v13);
  float v116 = v12;
  float v16 = (float)((float)(v145 * (float)((float)(v143 * v9) - (float)(v142 * v10))) + (float)(v11 * v12))
      - (float)(v144 * v13);
  float v17 = (float)((float)((float)(v145 * v135) - (float)(v142 * v138)) - (float)(v143 * v137)) + (float)(v136 * v144);
  float v127 = v136;
  float v128 = v138;
  float v124 = v145;
  float v18 = a1[30];
  float v19 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
  float v133 = v18 * v18;
  float v134 = v19;
  if (v19 > (float)(v18 * v18))
  {
    float v20 = 1.0 / sqrtf(v19);
    float v14 = v18 * (float)(v14 * v20);
    float v15 = v18 * (float)(v15 * v20);
    float v16 = v18 * (float)(v16 * v20);
  }
  float v123 = v142;
  float v21 = (float)((float)((float)(v145 * v136) - (float)(v143 * v138)) - (float)(v144 * v135)) + (float)(v137 * v142);
  float v125 = v143;
  float v126 = v135;
  float v22 = (float)((float)((float)(v145 * v137) - (float)(v144 * v138)) - (float)(v142 * v136)) + (float)(v135 * v143);
  float v23 = (float)((float)((float)(v142 * v135) + (float)(v145 * v138)) + (float)(v143 * v136)) + (float)(v144 * v137);
  float v129 = v137;
  float v130 = v16;
  float v131 = v15;
  float v132 = v14;
  if (v17 == 0.0)
  {
    float v27 = 1.0;
    float v25 = 0.0;
    float v26 = 0.0;
  }
  else
  {
    float v24 = sqrtf((float)((float)(v17 * v17) + 0.0) + (float)(v23 * v23));
    float v25 = v17 / v24;
    float v26 = 0.0 / v24;
    float v27 = v23 / v24;
  }
  float v28 = (float)((float)((float)(v17 * v27) - (float)(v23 * v25)) - (float)(v21 * v26)) + (float)(v26 * v22);
  float v29 = (float)((float)((float)(v21 * v27) - (float)(v23 * v26)) - (float)(v22 * v25)) + (float)(v26 * v17);
  float v30 = (float)((float)((float)(v22 * v27) - (float)(v23 * v26)) - (float)(v17 * v26)) + (float)(v25 * v21);
  float cosval = (float)((float)((float)(v17 * v25) + (float)(v23 * v27)) + (float)(v21 * v26)) + (float)(v22 * v26);
  __float2 v32 = __sincosf_stret(a1[31] * 0.5);
  if (v32.__sinval > 0.9999) {
    goto LABEL_11;
  }
  float v33 = -v28;
  float v34 = -v29;
  float v35 = -v30;
  if (cosval >= 0.0)
  {
    float v33 = v28;
    float v34 = v29;
    float v35 = v30;
  }
  float v36 = (float)((float)(v34 * v34) + (float)(v33 * v33)) + (float)(v35 * v35);
  if (v36 <= (float)(v32.__sinval * v32.__sinval))
  {
LABEL_11:
    if (v134 <= v133) {
      return;
    }
  }
  else
  {
    float v37 = v32.__sinval * v35;
    float v38 = 1.0 / sqrtf(v36);
    float v28 = (float)(v32.__sinval * v33) * v38;
    float v29 = (float)(v32.__sinval * v34) * v38;
    float v30 = v37 * v38;
    float cosval = v32.__cosval;
  }
  float v39 = (float)((float)((float)(v27 * v28) + (float)(cosval * v25)) + (float)(v29 * v26)) + (float)((float)-v26 * v30);
  float v40 = (float)((float)((float)(v27 * v29) + (float)(cosval * v26)) + (float)(v30 * v25)) + (float)((float)-v26 * v28);
  float v41 = (float)((float)((float)(v27 * v30) + (float)(cosval * v26)) + (float)(v28 * v26)) + (float)((float)-v25 * v29);
  float v42 = (float)((float)((float)(cosval * v27) - (float)(v28 * v25)) - (float)(v29 * v26)) - (float)(v30 * v26);
  if (a4)
  {
    float v43 = a1[15] * -2.0;
    float v44 = a1[16] * -2.0;
    float v45 = a1[17] * -2.0;
    float v47 = a1[13];
    float v46 = a1[14];
    float v48 = (float)(v46 * v46) + -0.5;
    float v49 = a1[11];
    float v50 = a1[12];
    float v51 = (float)((float)(v44 * v50) + (float)(v49 * v43)) + (float)(v47 * v45);
    float v52 = (float)((float)(v43 * v48) - (float)((float)((float)(v50 * v45) - (float)(v47 * v44)) * v46))
        + (float)(v49 * v51);
    float v53 = (float)((float)(v44 * v48) - (float)((float)((float)(v47 * v43) - (float)(v49 * v45)) * v46))
        + (float)(v50 * v51);
    float v54 = (float)((float)(v45 * v48) - (float)((float)((float)(v49 * v44) - (float)(v50 * v43)) * v46))
        + (float)(v47 * v51);
    float v55 = v52 + v52;
    float v56 = v54 + v54;
    float v57 = (float)(v42 * v42) + -0.5;
    float v58 = (float)((float)(v40 * (float)(v53 + v53)) + (float)(v39 * (float)(v52 + v52))) + (float)(v41 * v56);
    float v59 = (float)((float)(v42 * (float)((float)(v40 * v56) - (float)(v41 * (float)(v53 + v53))))
                + (float)((float)(v52 + v52) * v57))
        + (float)(v39 * v58);
    float v60 = (float)((float)(v42 * (float)((float)(v41 * (float)(v52 + v52)) - (float)(v39 * v56)))
                + (float)((float)(v53 + v53) * v57))
        + (float)(v40 * v58);
    float v61 = (float)((float)(v42 * (float)((float)(v39 * (float)(v53 + v53)) - (float)(v40 * v55))) + (float)(v56 * v57))
        + (float)(v41 * v58);
    float v62 = v132 + v59;
    float v63 = (float)((float)((float)(v39 * v46) - (float)(v42 * v49)) - (float)(v40 * v47)) + (float)(v50 * v41);
    float v64 = (float)((float)((float)(v40 * v46) - (float)(v42 * v50)) - (float)(v41 * v49)) + (float)(v47 * v39);
    float v65 = (float)((float)((float)(v41 * v46) - (float)(v42 * v47)) - (float)(v39 * v50)) + (float)(v49 * v40);
    float v66 = (float)((float)((float)(v39 * v49) + (float)(v42 * v46)) + (float)(v40 * v50)) + (float)(v41 * v47);
    float v67 = (float)(v131 + v60) + (float)(v131 + v60);
    float v68 = (float)(v130 + v61) + (float)(v130 + v61);
    float v69 = (float)((float)(v125 * v67) + (float)(v123 * (float)(v62 + v62))) + (float)(v8 * v68);
    float v70 = (float)((float)(v124 * (float)((float)(v68 * (float)-v123) + (float)(v8 * (float)(v62 + v62))))
                + (float)(v67 * v116))
        + (float)(v125 * v69);
    float v71 = (float)((float)(v124 * (float)((float)((float)(v62 + v62) * (float)-v125) + (float)(v123 * v67)))
                + (float)(v68 * v116))
        + (float)(v8 * v69);
    float v72 = v120
        + (float)((float)((float)(v124 * (float)((float)(v67 * (float)-v8) + (float)(v125 * v68)))
                        + (float)((float)(v62 + v62) * v116))
                + (float)(v123 * v69));
    float v73 = v121 + v70;
    float v74 = v118 + v71;
    float v75 = (float)((float)((float)(v123 * v66) + (float)(v124 * v63)) + (float)(v125 * v65)) - (float)(v64 * v8);
    float v76 = (float)((float)((float)(v125 * v66) + (float)(v124 * v64)) + (float)(v8 * v63)) - (float)(v65 * v123);
    float v77 = (float)((float)((float)(v8 * v66) + (float)(v124 * v65)) + (float)(v123 * v64)) - (float)(v63 * v125);
    float v78 = (float)((float)((float)(v63 * (float)-v123) + (float)(v124 * v66)) + (float)((float)-v125 * v64))
        + (float)((float)-v8 * v65);
    *a3 = v75;
    a3[1] = v76;
    a3[2] = v77;
    a3[3] = v78;
    a3[4] = v72;
    a3[5] = v73;
    a3[6] = v74;
    float v79 = sqrtf((float)((float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77)) + (float)(v78 * v78));
    if (v79 != 0.0)
    {
      *a3 = v75 / v79;
      a3[1] = v76 / v79;
      a3[2] = v77 / v79;
      a3[3] = v78 / v79;
    }
  }
  else
  {
    float v80 = a1[8] * -2.0;
    float v81 = a1[9] * -2.0;
    float v82 = a1[10] * -2.0;
    float v84 = a1[6];
    float v83 = a1[7];
    float v85 = (float)(v83 * v83) + -0.5;
    float v86 = a1[4];
    float v87 = a1[5];
    float v88 = (float)((float)(v81 * v87) + (float)(v86 * v80)) + (float)(v84 * v82);
    float v89 = (float)((float)(v80 * v85) - (float)((float)((float)(v87 * v82) - (float)(v84 * v81)) * v83))
        + (float)(v86 * v88);
    float v90 = (float)((float)(v81 * v85) - (float)((float)((float)(v84 * v80) - (float)(v86 * v82)) * v83))
        + (float)(v87 * v88);
    float v91 = (float)((float)(v82 * v85) - (float)((float)((float)(v86 * v81) - (float)(v87 * v80)) * v83))
        + (float)(v84 * v88);
    float v92 = (float)(v89 - v132) + (float)(v89 - v132);
    float v93 = (float)(v90 - v131) + (float)(v90 - v131);
    float v94 = (float)(v91 - v130) + (float)(v91 - v130);
    float v95 = (float)(v42 * v42) + -0.5;
    float v96 = (float)((float)-(float)(v40 * v93) - (float)(v39 * v92)) - (float)(v41 * v94);
    float v97 = (float)((float)(v42 * (float)((float)(v41 * v93) - (float)(v40 * v94))) + (float)(v92 * v95))
        - (float)(v39 * v96);
    float v98 = (float)((float)(v42 * (float)((float)(v39 * v94) - (float)(v41 * v92))) + (float)(v93 * v95))
        - (float)(v40 * v96);
    float v99 = (float)((float)(v42 * (float)((float)(v40 * v92) - (float)(v39 * v93))) + (float)(v94 * v95))
        - (float)(v41 * v96);
    float v100 = (float)((float)((float)-(float)(v39 * v83) - (float)(v42 * v86)) + (float)(v40 * v84)) - (float)(v87 * v41);
    float v101 = (float)((float)((float)-(float)(v40 * v83) - (float)(v42 * v87)) + (float)(v41 * v86)) - (float)(v84 * v39);
    float v102 = (float)((float)((float)-(float)(v41 * v83) - (float)(v42 * v84)) + (float)(v39 * v87)) - (float)(v86 * v40);
    float v103 = (float)((float)((float)(v42 * v83) - (float)(v86 * v39)) - (float)(v40 * v87)) - (float)(v41 * v84);
    float v104 = v99 + v99;
    float v105 = (float)(v128 * v128) + -0.5;
    float v106 = (float)((float)(v127 * (float)(v98 + v98)) + (float)(v126 * (float)(v97 + v97)))
         + (float)(v129 * (float)(v99 + v99));
    float v107 = (float)((float)(v128 * (float)((float)(v129 * (float)(v97 + v97)) - (float)(v126 * v104)))
                 + (float)((float)(v98 + v98) * v105))
         + (float)(v127 * v106);
    float v108 = (float)((float)(v128 * (float)((float)(v126 * (float)(v98 + v98)) - (float)(v127 * (float)(v97 + v97))))
                 + (float)(v104 * v105))
         + (float)(v129 * v106);
    float v109 = v122
         + (float)((float)((float)(v128 * (float)((float)(v127 * v104) - (float)(v129 * (float)(v98 + v98))))
                         + (float)((float)(v97 + v97) * v105))
                 + (float)(v126 * v106));
    float v110 = v117 + v108;
    float v111 = (float)((float)((float)(v126 * v103) + (float)(v128 * v100)) + (float)(v127 * v102)) - (float)(v101 * v129);
    float v112 = (float)((float)((float)(v127 * v103) + (float)(v128 * v101)) + (float)(v129 * v100)) - (float)(v102 * v126);
    float v113 = (float)((float)((float)(v129 * v103) + (float)(v128 * v102)) + (float)(v126 * v101)) - (float)(v100 * v127);
    float v114 = (float)((float)((float)(v128 * v103) - (float)(v126 * v100)) - (float)(v127 * v101)) - (float)(v129 * v102);
    *a2 = v111;
    a2[1] = v112;
    a2[2] = v113;
    a2[3] = v114;
    a2[4] = v109;
    a2[5] = v119 + v107;
    a2[6] = v110;
    float v115 = sqrtf((float)((float)((float)(v112 * v112) + (float)(v111 * v111)) + (float)(v113 * v113)) + (float)(v114 * v114));
    if (v115 != 0.0)
    {
      *a2 = v111 / v115;
      a2[1] = v112 / v115;
      a2[2] = v113 / v115;
      a2[3] = v114 / v115;
    }
  }
}

void RevoluteJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8 = physx::Ext::joint::computeJointFrames(&v21, &v17, (float *)a2, a3, a4);
  if (a5) {
    (*(void (**)(uint64_t, float *, float *, float))(*(void *)a1 + 16))(a1, &v21, &v17, v8);
  }
  if (a5 & 2) != 0 && (*(_WORD *)(a2 + 128))
  {
    float v9 = (float)((float)((float)(v24 * v17) - (float)(v21 * v20)) - (float)(v22 * v19)) + (float)(v18 * v23);
    float v10 = (float)((float)((float)(v21 * v17) + (float)(v24 * v20)) + (float)(v22 * v18)) + (float)(v23 * v19);
    float v11 = sqrtf((float)((float)(v9 * v9) + 0.0) + (float)(v10 * v10));
    if (v11 != 0.0)
    {
      float v9 = v9 / v11;
      float v10 = v10 / v11;
    }
    if (v10 < -1.0) {
      float v10 = -1.0;
    }
    if (v10 > 1.0) {
      float v10 = 1.0;
    }
    float v12 = acosf(v10);
    float v13 = v12 + v12;
    if (v9 >= 0.0) {
      float v14 = v13;
    }
    else {
      float v14 = -v13;
    }
    if (*(float *)(a2 + 104) <= 0.0 && *(float *)(a2 + 100) <= 0.0) {
      float v15 = *(float *)(a2 + 108);
    }
    else {
      float v15 = 0.0;
    }
    BOOL v16 = (float)(*(float *)(a2 + 116) + v15) > v14 || (float)(*(float *)(a2 + 112) - v15) < v14;
    (*(void (**)(uint64_t, float *, BOOL))(*(void *)a1 + 32))(a1, &v21, v16);
  }
}

float physx::Ext::InertiaTensorComputer::translate(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10)
{
  float32x2_t v12 = *a2;
  float v13 = a2[1].f32[0];
  if (COERCE_FLOAT(*a2) != 0.0 || (LODWORD(result) = HIDWORD(*(unint64_t *)a2), v12.f32[1] != 0.0) || v13 != 0.0)
  {
    float v15 = *(float *)(a1 + 44);
    a4.i64[0] = *(void *)(a1 + 36);
    float32x4_t v16 = (float32x4_t)vzip1q_s32(a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 0));
    float v17 = -*(float *)&a4.i32[1];
    *(float32x2_t *)a10.i8 = vadd_f32(v12, *(float32x2_t *)a4.i8);
    v10.f32[0] = v13 + v15;
    if (*(float *)a10.i32 == 0.0 && *(float *)&a10.i32[1] == 0.0 && v10.f32[0] == 0.0)
    {
      float v18 = *(float *)&a4.i32[1] * v17;
      float32x4_t v19 = (float32x4_t)a4;
      v19.i32[0] = *(_DWORD *)(a1 + 44);
      float32x2_t v20 = vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)0x8000000000000000);
      v21.i32[0] = v20.i32[0];
      v21.f32[1] = v15 * *(float *)a4.i32;
      float32x2_t v22 = vadd_f32(v20, v21);
      v20.f32[0] = *(float *)&a4.i32[1] * *(float *)a4.i32;
      float32x2_t v23 = vadd_f32(v22, v20);
      *(float32x2_t *)v19.f32 = vmul_n_f32(*(float32x2_t *)v19.f32, v15);
      v24.i32[1] = 0;
      v24.i64[1] = 0x8000000000000000;
      v24.f32[0] = -*(float *)a4.i32;
      float32x4_t v25 = vmulq_f32(v16, v24);
      float v26 = v18 + v25.f32[0];
      float32x4_t v27 = v25;
      v27.i32[0] = 0;
      v28.i64[0] = v19.i64[0];
      v28.f32[2] = v15 * *(float *)a4.i32;
      v28.i32[3] = v19.i32[1];
      float v29 = vsubq_f32(v27, v19).f32[0];
      float32x4_t v30 = vaddq_f32(v25, v28);
      v30.f32[0] = v29;
      float v31 = v29 + v18;
      float32x4_t v32 = vaddq_f32(v30, v25);
      v27.i32[0] = *(_DWORD *)(a1 + 48);
      float v33 = v31 * v27.f32[0];
      float32x2_t v34 = vmul_f32(v23, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      float v35 = (float)((float)((float)(v15 * -0.0) + (float)(v15 * -0.0)) + (float)(*(float *)&a4.i32[1] * *(float *)a4.i32))
          * v27.f32[0];
      float32x4_t v36 = vmulq_n_f32(v32, v27.f32[0]);
      float v37 = (float)(v26 + 0.0) * v27.f32[0];
    }
    else
    {
      float32x4_t v38 = (float32x4_t)vzip1q_s32(a10, vdupq_lane_s32(*(int32x2_t *)a10.i8, 0));
      float32_t v39 = -*(float *)a10.i32;
      float v40 = *(float *)&a4.i32[1] * v17;
      v41.i32[1] = a4.i32[1];
      v41.i32[0] = *(_DWORD *)(a1 + 44);
      *(float32x2_t *)v11.f32 = vmul_n_f32(v41, v15);
      float32x4_t v42 = (float32x4_t)xmmword_234424B10;
      float32x4_t v43 = (float32x4_t)xmmword_234424B10;
      v43.f32[0] = -*(float *)a4.i32;
      float32x4_t v44 = vmulq_f32(v16, v43);
      float v45 = (float)(v40 + v44.f32[0]) + 0.0;
      *(float *)&unsigned int v46 = v10.f32[0] * *(float *)a10.i32;
      float v47 = -(float)(*(float *)&a10.i32[1] * *(float *)&a10.i32[1]);
      float32_t v48 = *(float *)&a10.i32[1] * *(float *)a10.i32;
      float v49 = v10.f32[0] * -0.0;
      a10.i32[0] = v10.i32[0];
      *(float32x2_t *)v10.f32 = vmul_n_f32(*(float32x2_t *)a10.i8, v10.f32[0]);
      float v50 = (float)(v49 + v49) + v48;
      float32x2_t v51 = vmul_f32(v41, (float32x2_t)0x8000000000000000);
      v52.i32[0] = v51.i32[0];
      v52.f32[1] = v15 * *(float *)a4.i32;
      float32x2_t v53 = vadd_f32(v51, v52);
      v51.f32[0] = *(float *)&a4.i32[1] * *(float *)a4.i32;
      float32x2_t v54 = vmul_f32(*(float32x2_t *)a10.i8, (float32x2_t)0x8000000000000000);
      float32x2_t v55 = vadd_f32(v54, (float32x2_t)__PAIR64__(v46, v54.u32[0]));
      v54.f32[0] = v48;
      float32x2_t v56 = vsub_f32(vadd_f32(v53, v51), vadd_f32(v55, v54));
      float32x4_t v57 = v44;
      v57.i32[0] = 0;
      v55.f32[0] = (float)((float)((float)(v15 * -0.0) + (float)(v15 * -0.0))
                         + (float)(*(float *)&a4.i32[1] * *(float *)a4.i32))
                 - v50;
      v58.i64[0] = v11.i64[0];
      v58.f32[2] = v15 * *(float *)a4.i32;
      v58.i32[3] = v11.i32[1];
      float v59 = vsubq_f32(v57, v11).f32[0];
      float32x4_t v60 = vaddq_f32(v44, v58);
      v60.f32[0] = v59;
      float v61 = v59 + v40;
      v42.f32[0] = v39;
      float32x4_t v62 = vmulq_f32(v38, v42);
      float32x4_t v63 = v62;
      v63.i32[0] = 0;
      v42.i64[0] = v10.i64[0];
      v42.i64[1] = __PAIR64__(v10.u32[1], v46);
      float32x4_t v64 = vaddq_f32(v62, v42);
      v64.f32[0] = vsubq_f32(v63, v10).f32[0];
      v63.f32[0] = v47 + v64.f32[0];
      float v65 = (float)(v47 + v62.f32[0]) + 0.0;
      float32x4_t v66 = vsubq_f32(vaddq_f32(v60, v44), vaddq_f32(v64, v62));
      float v67 = v45 - v65;
      v64.i32[0] = *(_DWORD *)(a1 + 48);
      float v33 = (float)(v61 - v63.f32[0]) * v64.f32[0];
      float32x2_t v34 = vmul_f32(v56, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v64.f32, 0));
      float v35 = v55.f32[0] * v64.f32[0];
      float32x4_t v36 = vmulq_n_f32(v66, v64.f32[0]);
      float v37 = v67 * v64.f32[0];
    }
    *(float *)a1 = v33 + *(float *)a1;
    *(float32x2_t *)(a1 + 4) = vadd_f32(v34, *(float32x2_t *)(a1 + 4));
    *(float *)(a1 + 12) = v35 + *(float *)(a1 + 12);
    *(float32x4_t *)(a1 + 16) = vaddq_f32(v36, *(float32x4_t *)(a1 + 16));
    *(float *)(a1 + 32) = v37 + *(float *)(a1 + 32);
    *(float32x2_t *)(a1 + 36) = vadd_f32(*(float32x2_t *)a4.i8, *a2);
    float result = v15 + a2[1].f32[0];
    *(float *)(a1 + 44) = result;
  }
  return result;
}

uint64_t updateMassAndInertia(int a1, uint64_t a2, float *a3, unsigned int a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t v332 = *MEMORY[0x263EF8340];
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v292 = _D0;
  float v293 = 1.0;
  long long v291 = xmmword_23435FBB0;
  if (a5)
  {
    float v19 = *a5;
    float v20 = a5[1];
    float v21 = a5[2];
    if (!a3) {
      goto LABEL_8;
    }
  }
  else
  {
    float v19 = 0.0;
    float v20 = 0.0;
    float v21 = 0.0;
    if (!a3)
    {
LABEL_8:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 288, "%s: No density specified, setting mass to 1 and inertia to (1,1,1)", a6, a7, a8, (char)"PxRigidBodyExt::updateMassAndInertia");
      uint64_t v35 = 0;
LABEL_72:
      float v226 = 1.0;
      goto LABEL_73;
    }
  }
  if (!a4) {
    goto LABEL_8;
  }
  float v290 = 0.0;
  float32x4_t v288 = 0u;
  long long v289 = 0u;
  float32x4_t v286 = 0u;
  float32x4_t v287 = 0u;
  char v329 = 1;
  uint64_t v331 = 0x1000000000;
  float v330 = &v326;
  unsigned int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2);
  v320.i64[0] = 0;
  physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::resize((uint64_t)&v326, v22, &v320);
  (*(void (**)(uint64_t, long long *, void, void))(*(void *)a2 + 192))(a2, v330, v331, 0);
  float v283 = *a3;
  if ((~*(_DWORD *)a3 & 0x7F800000) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 128, "computeMassAndInertia: Provided mass or density has no valid value", v23, v24, v25, v280);
    int v34 = 0;
    goto LABEL_47;
  }
  float v281 = v20;
  float v282 = v19;
  if (!v331)
  {
    float32x2_t v38 = 0;
    float v41 = 0.0;
    v285.i64[0] = 0;
    float v40 = 0.0;
    float32x4_t v284 = 0u;
LABEL_41:
    int32x4_t v33 = (int32x4_t)v286;
    float32x4_t v287 = v286;
    float32x4_t v288 = v284;
    *(float *)&long long v289 = v40;
    *(float32x2_t *)((char *)&v289 + 4) = v38;
    int v34 = 1;
    HIDWORD(v32) = v285.i32[1];
    *((float *)&v289 + 3) = v41;
    float v290 = v285.f32[0];
    goto LABEL_46;
  }
  uint64_t v36 = 0;
  unsigned int v37 = 0;
  float32x2_t v38 = 0;
  float32x4_t v286 = 0u;
  float v39 = 1.0;
  float v40 = 0.0;
  float v41 = 0.0;
  float32x4_t v285 = 0u;
  float32x4_t v284 = 0u;
  while (1)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**((void **)v330 + v36) + 312))(&v320);
    if ((v320.i8[0] & 1) != 0 || v8) {
      break;
    }
LABEL_38:
    if (++v36 >= (unint64_t)v331) {
      goto LABEL_41;
    }
  }
  if (!a1) {
    goto LABEL_16;
  }
  if (v37 >= a4)
  {
    uint64_t v223 = physx::shdfnd::Foundation::mInstance;
    float v224 = "computeMassAndInertia: Not enough mass/density values provided for all (simulation) shapes";
    uint64_t v225 = 153;
    goto LABEL_45;
  }
  float v283 = a3[v37];
  if ((~LODWORD(v283) & 0x7F800000) != 0)
  {
LABEL_16:
    switch((*(unsigned int (**)(void))(**((void **)v330 + v36) + 64))(*((void *)v330 + v36)))
    {
      case 0xFFFFFFFF:
      case 1u:
      case 5u:
      case 6u:
      case 7u:
        uint64_t v223 = physx::shdfnd::Foundation::mInstance;
        float v224 = "computeMassAndInertia: Dynamic actor with illegal collision shapes";
        uint64_t v225 = 231;
        goto LABEL_45;
      case 0u:
        uint64_t v303 = 0;
        (*(void (**)(void, uint64_t *))(**((void **)v330 + v36) + 96))(*((void *)v330 + v36), &v303);
        (*(void (**)(int *__return_ptr))(**((void **)v330 + v36) + 160))(&v311);
        *(float *)&double v81 = (float)(*((float *)&v303 + 1)
                               * (float)(*((float *)&v303 + 1)
                                       * (float)(*((float *)&v303 + 1)
                                               * (float)(*((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * 4.1888)))))
                       * 0.4;
        LODWORD(v84) = v311;
        LODWORD(v82) = v312;
        *(float *)v69.i32 = *(float *)&v82 + *(float *)&v82;
        float v42 = *(float *)&v82 * (float)(*(float *)&v82 + *(float *)&v82);
        float v43 = *((float *)&v312 + 1) * (float)(*((float *)&v312 + 1) + *((float *)&v312 + 1));
        *(float *)&double v82 = (float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v312;
        float v44 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v312 + 1);
        float v325 = *((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * 4.1888));
        *(float *)v51.i32 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v312 + 2);
        *(float *)&double v83 = *(float *)v69.i32 * *((float *)&v312 + 1);
        *(float *)v69.i32 = *(float *)v69.i32 * *((float *)&v312 + 2);
        *(float *)&double v80 = (float)(*((float *)&v312 + 1) + *((float *)&v312 + 1)) * *((float *)&v312 + 2);
        float v45 = (float)(v39 - v42) - v43;
        float v46 = *(float *)&v82 + *(float *)&v80;
        *(float *)&double v78 = v44 - *(float *)v69.i32;
        float v47 = *(float *)&v82 - *(float *)&v80;
        *(float *)&double v84 = v39 - (float)(*(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84));
        float v48 = *(float *)&v84 - v43;
        *(float *)&double v80 = *(float *)&v83 + *(float *)v51.i32;
        *(float *)v69.i32 = v44 + *(float *)v69.i32;
        float v49 = *(float *)&v83 - *(float *)v51.i32;
        *(float *)&double v84 = *(float *)&v84 - v42;
        float v50 = (float)(*(float *)&v81 * *(float *)&v78) + (float)((float)(*(float *)&v83 + *(float *)v51.i32) * 0.0);
        *(float *)&double v82 = *(float *)v69.i32 * 0.0;
        *(float *)&double v83 = (float)(*(float *)&v83 - *(float *)v51.i32) * 0.0;
        *(float *)v51.i32 = *(float *)&v84 * 0.0;
        float v52 = (float)(*(float *)v69.i32 * 0.0) + (float)((float)(*(float *)&v81 * v45) + (float)(v47 * 0.0));
        float v53 = *(float *)&v83 + (float)((float)(*(float *)&v81 * v46) + (float)(v48 * 0.0));
        float v54 = (float)(*(float *)&v84 * 0.0) + v50;
        float v55 = (float)(*(float *)v69.i32 * 0.0) + (float)((float)(v45 * 0.0) + (float)(*(float *)&v81 * v47));
        float v56 = *(float *)&v83 + (float)((float)(v46 * 0.0) + (float)(*(float *)&v81 * v48));
        float v57 = (float)(*(float *)&v84 * 0.0)
            + (float)((float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v81 * *(float *)&v80));
        float v58 = (float)(v45 * 0.0) + (float)(v47 * 0.0);
        float v59 = (float)(v46 * 0.0) + (float)(v48 * 0.0);
        float v60 = (float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * 0.0);
        float v61 = (float)(*(float *)&v81 * *(float *)v69.i32) + v58;
        float v62 = (float)(*(float *)&v81 * v49) + v59;
        *(float *)&double v81 = (float)(*(float *)&v81 * *(float *)&v84) + v60;
        float v63 = v45 * v53;
        float v64 = v47 * v56;
        float v65 = (float)(v45 * v52) + (float)(v47 * v55);
        float v66 = (float)(v45 * v54) + (float)(v47 * v57);
        *(float *)&unsigned int v67 = (float)(*(float *)v69.i32 * v61) + v65;
        *(float *)&unsigned int v68 = (float)(*(float *)v69.i32 * v62) + (float)(v63 + v64);
        *(float *)v69.i32 = (float)(*(float *)v69.i32 * *(float *)&v81) + v66;
        float v70 = (float)(v46 * v52) + (float)(v48 * v55);
        float v71 = (float)(v46 * v53) + (float)(v48 * v56);
        float v39 = 1.0;
        float v72 = (float)(v46 * v54) + (float)(v48 * v57);
        *(float *)&unsigned int v73 = (float)(v49 * v61) + v70;
        float32_t v74 = (float)(v49 * v62) + v71;
        *(float *)&unsigned int v75 = (float)(v49 * *(float *)&v81) + v72;
        float v76 = (float)(*(float *)&v78 * v52) + (float)(*(float *)&v80 * v55);
        float v77 = (float)(*(float *)&v78 * v53) + (float)(*(float *)&v80 * v56);
        *(float *)&double v78 = (float)(*(float *)&v78 * v54) + (float)(*(float *)&v80 * v57);
        *(float *)&double v80 = *(float *)&v84 * v61;
        float v79 = *(float *)&v84 * v62;
        v320.i64[0] = __PAIR64__(v68, v67);
        *(float *)&double v84 = *(float *)&v84 * *(float *)&v81;
        *(float *)&double v80 = *(float *)&v80 + v76;
        *(float *)&double v81 = v79 + v77;
        v320.i64[1] = __PAIR64__(v73, v69.u32[0]);
        v321.f32[0] = v74;
        *(uint64_t *)((char *)v321.i64 + 4) = __PAIR64__(LODWORD(v80), v75);
        v321.f32[3] = v79 + v77;
        *(float *)&double v82 = *(float *)&v82 + v58;
        *(float *)&double v83 = *(float *)&v83 + v59;
        float v322 = *(float *)&v84 + *(float *)&v78;
        v323.i32[0] = LODWORD(v82);
        *(float *)&double v84 = *(float *)v51.i32 + v60;
        goto LABEL_29;
      case 2u:
        LODWORD(v304) = 0;
        uint64_t v303 = 2;
        (*(void (**)(void, uint64_t *))(**((void **)v330 + v36) + 104))(*((void *)v330 + v36), &v303);
        (*(void (**)(int *__return_ptr))(**((void **)v330 + v36) + 160))(&v311);
        v51.i32[0] = v304;
        *(float *)&double v82 = *((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * 3.1416);
        *(float *)&double v80 = (float)((float)(*((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * *((float *)&v303 + 1)))
                               * 8.0)
                       / 15.0;
        *(float *)&double v81 = *(float *)&v82
                       * (float)((float)((float)((float)(*(float *)v51.i32
                                                       * (float)(*(float *)v51.i32 * *(float *)v51.i32))
                                               + (float)(*(float *)v51.i32
                                                       * (float)(*(float *)v51.i32 * *(float *)v51.i32)))
                                       / 3.0)
                               + (float)((float)((float)((float)(*((float *)&v303 + 1)
                                                               * (float)(*(float *)v51.i32 * *(float *)v51.i32))
                                                       * 4.0)
                                               / 3.0)
                                       + (float)(*(float *)&v80
                                               + (float)((float)((float)(*((float *)&v303 + 1)
                                                                       * (float)(*((float *)&v303 + 1) * *(float *)&v304))
                                                               * 3.0)
                                                       * 0.5))));
        *(float *)&double v83 = *(float *)&v82
                       * (float)(*(float *)&v80
                               + (float)((float)(*((float *)&v303 + 1) * *(float *)&v304) * *((float *)&v303 + 1)));
        float v85 = (float)(*((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * (float)(*((float *)&v303 + 1) * 4.1888)))
            + (float)(*(float *)&v82 * (float)(*(float *)v51.i32 + *(float *)v51.i32));
        LODWORD(v84) = v311;
        v51.i32[0] = v312;
        *(float *)&double v80 = *(float *)&v84 + *(float *)&v84;
        float v86 = *(float *)v51.i32 * (float)(*(float *)v51.i32 + *(float *)v51.i32);
        float v87 = *((float *)&v312 + 1) * (float)(*((float *)&v312 + 1) + *((float *)&v312 + 1));
        float v88 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v312 + 1);
        float v89 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v312 + 2);
        *(float *)&double v82 = (float)(*(float *)v51.i32 + *(float *)v51.i32) * *((float *)&v312 + 1);
        float v90 = (float)(*(float *)v51.i32 + *(float *)v51.i32) * *((float *)&v312 + 2);
        float v91 = (float)(v39 - v86) - v87;
        *(float *)v69.i32 = (float)((float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v312)
                          + (float)((float)(*((float *)&v312 + 1) + *((float *)&v312 + 1)) * *((float *)&v312 + 2));
        *(float *)&double v78 = v88 - v90;
        float v92 = (float)((float)(*(float *)&v84 + *(float *)&v84) * *(float *)&v312)
            - (float)((float)(*((float *)&v312 + 1) + *((float *)&v312 + 1)) * *((float *)&v312 + 2));
        *(float *)&double v84 = v39 - (float)(*(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84));
        float v93 = *(float *)&v84 - v87;
        *(float *)&double v80 = *(float *)&v82 + (float)(*(float *)&v80 * *((float *)&v312 + 2));
        float v94 = v88 + v90;
        float v95 = *(float *)&v82 - v89;
        *(float *)&double v84 = *(float *)&v84 - v86;
        float v96 = (float)(*(float *)&v83 * v91) + (float)(v92 * 0.0);
        float v97 = (float)(*(float *)&v83 * *(float *)v69.i32) + (float)(v93 * 0.0);
        float v98 = (float)(*(float *)&v83 * *(float *)&v78) + (float)(*(float *)&v80 * 0.0);
        *(float *)&double v82 = v94 * 0.0;
        *(float *)&double v83 = v95 * 0.0;
        *(float *)v51.i32 = *(float *)&v84 * 0.0;
        float v99 = (float)(v94 * 0.0) + v96;
        float v100 = (float)(v95 * 0.0) + v97;
        float v101 = (float)(*(float *)&v84 * 0.0) + v98;
        float v325 = v85;
        float v102 = (float)(v94 * 0.0) + (float)((float)(v91 * 0.0) + (float)(v92 * *(float *)&v81));
        float v103 = (float)(v95 * 0.0) + (float)((float)(*(float *)v69.i32 * 0.0) + (float)(v93 * *(float *)&v81));
        float v104 = (float)(*(float *)&v84 * 0.0)
             + (float)((float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * *(float *)&v81));
        float v105 = (float)(v91 * 0.0) + (float)(v92 * 0.0);
        float v106 = (float)(*(float *)v69.i32 * 0.0) + (float)(v93 * 0.0);
        float v107 = (float)(*(float *)&v78 * 0.0) + (float)(*(float *)&v80 * 0.0);
        float v108 = (float)(v94 * *(float *)&v81) + v105;
        float v109 = (float)(v95 * *(float *)&v81) + v106;
        *(float *)&double v81 = (float)(*(float *)&v84 * *(float *)&v81) + v107;
        float v110 = (float)(v91 * v99) + (float)(v92 * v102);
        float v111 = (float)(v91 * v100) + (float)(v92 * v103);
        float v112 = (float)(v91 * v101) + (float)(v92 * v104);
        *(float *)&unsigned int v113 = (float)(v94 * v108) + v110;
        *(float *)&unsigned int v114 = (float)(v94 * v109) + v111;
        *(float *)&unsigned int v115 = (float)(v94 * *(float *)&v81) + v112;
        float v116 = (float)(*(float *)v69.i32 * v99) + (float)(v93 * v102);
        float v117 = (float)(*(float *)v69.i32 * v100) + (float)(v93 * v103);
        *(float *)v69.i32 = (float)(*(float *)v69.i32 * v101) + (float)(v93 * v104);
        *(float *)&unsigned int v118 = (float)(v95 * v108) + v116;
        *(float *)&unsigned int v119 = (float)(v95 * v109) + v117;
        *(float *)v69.i32 = (float)(v95 * *(float *)&v81) + *(float *)v69.i32;
        float v120 = (float)(*(float *)&v78 * v99) + (float)(*(float *)&v80 * v102);
        float v121 = (float)(*(float *)&v78 * v100) + (float)(*(float *)&v80 * v103);
        *(float *)&double v78 = (float)(*(float *)&v78 * v101) + (float)(*(float *)&v80 * v104);
        v320.i64[0] = __PAIR64__(v114, v113);
        *(float *)&double v80 = *(float *)&v84 * v108;
        float v122 = *(float *)&v84 * v109;
        *(float *)&double v84 = *(float *)&v84 * *(float *)&v81;
        *(float *)&double v80 = *(float *)&v80 + v120;
        *(float *)&double v81 = v122 + v121;
        v320.i64[1] = __PAIR64__(v118, v115);
        v321.i64[0] = __PAIR64__(v69.u32[0], v119);
        v321.i32[2] = LODWORD(v80);
        v321.f32[3] = v122 + v121;
        *(float *)&double v82 = *(float *)&v82 + v105;
        *(float *)&double v83 = *(float *)&v83 + v106;
        float v322 = *(float *)&v84 + *(float *)&v78;
        v323.i32[0] = LODWORD(v82);
        *(float *)&double v84 = *(float *)v51.i32 + v107;
        goto LABEL_29;
      case 3u:
        uint64_t v303 = 3;
        uint64_t v304 = 0;
        (*(void (**)(void, uint64_t *))(**((void **)v330 + v36) + 88))(*((void *)v330 + v36), &v303);
        (*(void (**)(int *__return_ptr))(**((void **)v330 + v36) + 160))(&v311);
        if (*((float *)&v303 + 1) == 0.0) {
          float v123 = v39;
        }
        else {
          float v123 = *((float *)&v303 + 1);
        }
        if (*(float *)&v304 == 0.0) {
          float v124 = v39;
        }
        else {
          float v124 = *(float *)&v304;
        }
        float v125 = v123 * v124;
        if (*((float *)&v304 + 1) == 0.0) {
          float v126 = v39;
        }
        else {
          float v126 = *((float *)&v304 + 1);
        }
        float v127 = (float)(v125 * v126) * 8.0;
        float v128 = (float)((float)(*(float *)&v304 * *(float *)&v304)
                     + (float)(*((float *)&v304 + 1) * *((float *)&v304 + 1)))
             * (float)(v127 * 0.33333);
        float v129 = (float)((float)(*((float *)&v303 + 1) * *((float *)&v303 + 1))
                     + (float)(*((float *)&v304 + 1) * *((float *)&v304 + 1)))
             * (float)(v127 * 0.33333);
        float v130 = (float)((float)(*((float *)&v303 + 1) * *((float *)&v303 + 1))
                     + (float)(*(float *)&v304 * *(float *)&v304))
             * (float)(v127 * 0.33333);
        float v325 = v127;
        float v131 = *(float *)&v311;
        float v132 = *(float *)&v312;
        float v133 = v132 + v132;
        float v134 = v132 * (float)(v132 + v132);
        float v135 = *((float *)&v312 + 1) * (float)(*((float *)&v312 + 1) + *((float *)&v312 + 1));
        float v136 = (float)(v131 + v131) * *(float *)&v312;
        float v137 = (float)(v131 + v131) * *((float *)&v312 + 1);
        float v138 = (float)(v131 + v131) * *((float *)&v312 + 2);
        float v139 = v133 * *((float *)&v312 + 1);
        float v140 = v133 * *((float *)&v312 + 2);
        float v141 = (float)(*((float *)&v312 + 1) + *((float *)&v312 + 1)) * *((float *)&v312 + 2);
        float v142 = (float)(v39 - v134) - v135;
        float v143 = v136 + v141;
        float v144 = v137 - v140;
        float v145 = v136 - v141;
        float v146 = v39 - (float)(v131 * (float)(v131 + v131));
        float v147 = v146 - v135;
        float v148 = v139 + v138;
        float v149 = v137 + v140;
        float v150 = v139 - v138;
        float v151 = v146 - v134;
        float v152 = (float)(v128 * v142) + (float)(v145 * 0.0);
        float v153 = (float)(v128 * v143) + (float)(v147 * 0.0);
        float v154 = (float)(v128 * v144) + (float)((float)(v139 + v138) * 0.0);
        float v155 = v149 * 0.0;
        float v156 = v150 * 0.0;
        *(float *)v51.i32 = v151 * 0.0;
        float v157 = (float)(v149 * 0.0) + v152;
        float v158 = (float)(v150 * 0.0) + v153;
        float v159 = (float)(v151 * 0.0) + v154;
        float v160 = (float)(v149 * 0.0) + (float)((float)(v142 * 0.0) + (float)(v129 * v145));
        float v161 = (float)(v150 * 0.0) + (float)((float)(v143 * 0.0) + (float)(v129 * v147));
        float v162 = (float)(v151 * 0.0) + (float)((float)(v144 * 0.0) + (float)(v129 * v148));
        float v163 = (float)(v142 * 0.0) + (float)(v145 * 0.0);
        float v164 = (float)(v143 * 0.0) + (float)(v147 * 0.0);
        float v165 = (float)(v144 * 0.0) + (float)(v148 * 0.0);
        float v166 = (float)(v130 * v149) + v163;
        float v167 = (float)(v130 * v150) + v164;
        *(float *)v69.i32 = (float)(v130 * v151) + v165;
        float v168 = v142 * v158;
        float v169 = v145 * v161;
        float v170 = (float)(v142 * v157) + (float)(v145 * v160);
        float v171 = (float)(v142 * v159) + (float)(v145 * v162);
        *(float *)&unsigned int v172 = (float)(v149 * v166) + v170;
        *(float *)&unsigned int v173 = (float)(v149 * v167) + (float)(v168 + v169);
        *(float *)&unsigned int v174 = (float)(v149 * *(float *)v69.i32) + v171;
        float v175 = (float)(v143 * v157) + (float)(v147 * v160);
        float v176 = (float)(v143 * v158) + (float)(v147 * v161);
        float v39 = 1.0;
        float v177 = (float)(v143 * v159) + (float)(v147 * v162);
        *(float *)&unsigned int v178 = (float)(v150 * v166) + v175;
        float32_t v179 = (float)(v150 * v167) + v176;
        float32_t v180 = (float)(v150 * *(float *)v69.i32) + v177;
        float v181 = v144 * v157;
        float v182 = v144 * v158;
        float v183 = v144 * v159;
        float v184 = v148 * v161;
        *(float *)&double v78 = v183 + (float)(v148 * v162);
        v320.i64[0] = __PAIR64__(v173, v172);
        *(float *)&double v80 = (float)(v151 * v166) + (float)(v181 + (float)(v148 * v160));
        *(float *)&double v81 = (float)(v151 * v167) + (float)(v182 + v184);
        v320.i64[1] = __PAIR64__(v178, v174);
        v321.f32[0] = v179;
        v321.f32[1] = v180;
        v321.f32[2] = *(float *)&v80;
        v321.f32[3] = *(float *)&v81;
        *(float *)&double v82 = v155 + v163;
        *(float *)&double v83 = v156 + v164;
        float v322 = (float)(v151 * *(float *)v69.i32) + *(float *)&v78;
        v323.i32[0] = LODWORD(v82);
        *(float *)&double v84 = (float)(v151 * 0.0) + v165;
LABEL_29:
        v323.i32[1] = LODWORD(v83);
        float v324 = *(float *)&v84;
        float v185 = (float32x2_t *)((char *)&v312 + 12);
        goto LABEL_36;
      case 4u:
        long long v312 = xmmword_2343679C0;
        int v311 = 4;
        float v313 = 0.0;
        float v314 = 0.0;
        float v315 = 1.0;
        uint64_t v316 = 0;
        char v317 = 1;
        __int16 v318 = 0;
        char v319 = 0;
        (*(void (**)(void, int *))(**((void **)v330 + v36) + 120))(*((void *)v330 + v36), &v311);
        float v310 = 0.0;
        (*(void (**)(uint64_t, float *, uint64_t *, float32x2_t *))(*(void *)v316 + 104))(v316, &v310, &v303, &v301);
        if (*(float *)&v312 == v39 && *((float *)&v312 + 1) == v39 && *((float *)&v312 + 2) == v39)
        {
          unsigned int v187 = HIDWORD(v303);
          unsigned int v186 = v303;
          unsigned int v189 = HIDWORD(v304);
          unsigned int v188 = v304;
          unsigned int v190 = v305;
          unsigned int v191 = v306;
          unsigned int v192 = v307;
          unsigned int v193 = v308;
          float v194 = v309;
        }
        else
        {
          float v310 = (float)((float)(*(float *)&v312 * *((float *)&v312 + 1)) * *((float *)&v312 + 2)) * v310;
          float v195 = (float)(v315 * v315) + -0.5;
          float v196 = (float)((float)((float)(v301.f32[1] + v301.f32[1]) * v313)
                       + (float)(*((float *)&v312 + 3) * (float)(v301.f32[0] + v301.f32[0])))
               + (float)(v314 * (float)(v302 + v302));
          float v197 = (float)((float)(v315
                               * (float)((float)(v313 * (float)(v302 + v302))
                                       - (float)(v314 * (float)(v301.f32[1] + v301.f32[1]))))
                       + (float)((float)(v301.f32[0] + v301.f32[0]) * v195))
               + (float)(*((float *)&v312 + 3) * v196);
          float v198 = (float)((float)(v315
                               * (float)((float)(v314 * (float)(v301.f32[0] + v301.f32[0]))
                                       - (float)(*((float *)&v312 + 3) * (float)(v302 + v302))))
                       + (float)((float)(v301.f32[1] + v301.f32[1]) * v195))
               + (float)(v313 * v196);
          float v199 = *((float *)&v312 + 2)
               * (float)((float)((float)(v315
                                       * (float)((float)(*((float *)&v312 + 3) * (float)(v301.f32[1] + v301.f32[1]))
                                               - (float)(v313 * (float)(v301.f32[0] + v301.f32[0]))))
                               + (float)((float)(v302 + v302) * v195))
                       + (float)(v314 * v196));
          float v200 = (float)(*(float *)&v312 * v197) + (float)(*(float *)&v312 * v197);
          float v201 = (float)(*((float *)&v312 + 1) * v198) + (float)(*((float *)&v312 + 1) * v198);
          float v202 = v199 + v199;
          float v203 = (float)((float)(v313 * v201) + (float)(*((float *)&v312 + 3) * v200)) + (float)(v314 * v202);
          v301.f32[0] = (float)((float)(v200 * v195)
                              - (float)((float)((float)(v313 * v202) - (float)(v314 * v201)) * v315))
                      + (float)(*((float *)&v312 + 3) * v203);
          v301.f32[1] = (float)((float)(v201 * v195)
                              - (float)((float)((float)(v314 * v200) - (float)(*((float *)&v312 + 3) * v202)) * v315))
                      + (float)(v313 * v203);
          float v302 = (float)((float)(v202 * v195)
                       - (float)((float)((float)(*((float *)&v312 + 3) * v201) - (float)(v313 * v200)) * v315))
               + (float)(v314 * v203);
          physx::PxMassProperties::scaleInertia((float *)&v303, (float *)&v312 + 3, (float *)&v312, (float *)&v294);
          unsigned int v187 = HIDWORD(v294);
          unsigned int v186 = v294;
          uint64_t v303 = v294;
          unsigned int v189 = HIDWORD(v295);
          unsigned int v188 = v295;
          uint64_t v304 = v295;
          unsigned int v190 = v296;
          unsigned int v191 = v297;
          unsigned int v305 = v296;
          unsigned int v306 = v297;
          unsigned int v192 = v298;
          unsigned int v193 = v299;
          unsigned int v307 = v298;
          unsigned int v308 = v299;
          float v194 = v300;
          float v309 = v300;
        }
        v320.i64[0] = __PAIR64__(v187, v186);
        v320.i64[1] = __PAIR64__(v189, v188);
        v321.i64[0] = __PAIR64__(v191, v190);
        v321.i64[1] = __PAIR64__(v193, v192);
        float32x2_t v323 = v301;
        float v322 = v194;
        float v324 = v302;
        float v325 = v310;
        (*(void (**)(uint64_t *__return_ptr))(**((void **)v330 + v36) + 160))(&v294);
        LODWORD(v84) = v294;
        *(float *)&double v82 = *(float *)&v84 + *(float *)&v84;
        LODWORD(v78) = v295;
        float v204 = *(float *)&v84 * (float)(*(float *)&v84 + *(float *)&v84);
        float v205 = *((float *)&v294 + 1) * (float)(*((float *)&v294 + 1) + *((float *)&v294 + 1));
        float v206 = *(float *)&v78 * (float)(*(float *)&v78 + *(float *)&v78);
        *(float *)&double v84 = (float)(*(float *)&v84 + *(float *)&v84) * *((float *)&v294 + 1);
        *(float *)v51.i32 = *(float *)&v82 * *(float *)&v295;
        float v207 = *(float *)&v82 * *((float *)&v295 + 1);
        float v208 = (float)(*((float *)&v294 + 1) + *((float *)&v294 + 1)) * *(float *)&v295;
        *(float *)&double v83 = (float)(*((float *)&v294 + 1) + *((float *)&v294 + 1)) * *((float *)&v295 + 1);
        *(float *)&double v82 = (float)(*(float *)&v78 + *(float *)&v78) * *((float *)&v295 + 1);
        *(float *)&double v81 = (float)(v39 - v205) - v206;
        *(float *)v69.i32 = *(float *)&v84 + *(float *)&v82;
        float v209 = *(float *)v51.i32 - *(float *)&v83;
        *(float *)&double v84 = *(float *)&v84 - *(float *)&v82;
        *(float *)&double v82 = (float)(v39 - v204) - v206;
        *(float *)&double v78 = v208 + v207;
        *(float *)v51.i32 = *(float *)v51.i32 + *(float *)&v83;
        *(float *)&double v83 = v208 - v207;
        *(float *)&double v80 = (float)(v39 - v204) - v205;
        float v210 = (float)((float)(v320.f32[0] * *(float *)&v81) + (float)(v320.f32[1] * *(float *)&v84))
             + (float)(*(float *)v51.i32 * v320.f32[2]);
        float v211 = (float)((float)(v320.f32[0] * *(float *)v69.i32) + (float)(v320.f32[1] * *(float *)&v82))
             + (float)((float)(v208 - v207) * v320.f32[2]);
        float v212 = (float)((float)(v320.f32[0] * v209) + (float)(v320.f32[1] * (float)(v208 + v207)))
             + (float)(*(float *)&v80 * v320.f32[2]);
        float v213 = (float)((float)(*(float *)&v81 * v320.f32[3]) + (float)(*(float *)&v84 * v321.f32[0]))
             + (float)(*(float *)v51.i32 * v321.f32[1]);
        float v214 = (float)((float)(*(float *)v69.i32 * v320.f32[3]) + (float)(*(float *)&v82 * v321.f32[0]))
             + (float)(*(float *)&v83 * v321.f32[1]);
        float v215 = (float)((float)(v209 * v320.f32[3]) + (float)(*(float *)&v78 * v321.f32[0]))
             + (float)(*(float *)&v80 * v321.f32[1]);
        float v216 = (float)((float)(*(float *)&v81 * v321.f32[2]) + (float)(*(float *)&v84 * v321.f32[3]))
             + (float)(*(float *)v51.i32 * v322);
        float v217 = (float)((float)(*(float *)v69.i32 * v321.f32[2]) + (float)(*(float *)&v82 * v321.f32[3]))
             + (float)(*(float *)&v83 * v322);
        float v218 = (float)((float)(v209 * v321.f32[2]) + (float)(*(float *)&v78 * v321.f32[3]))
             + (float)(*(float *)&v80 * v322);
        float32_t v219 = (float)((float)(*(float *)&v81 * v212) + (float)(*(float *)&v84 * v215))
             + (float)(*(float *)v51.i32 * v218);
        float32_t v220 = (float)((float)(*(float *)v69.i32 * v212) + (float)(*(float *)&v82 * v215))
             + (float)(*(float *)&v83 * v218);
        float v221 = (float)((float)(v209 * v212) + (float)(*(float *)&v78 * v215)) + (float)(*(float *)&v80 * v218);
        v320.f32[0] = (float)((float)(*(float *)&v81 * v210) + (float)(*(float *)&v84 * v213))
                    + (float)(*(float *)v51.i32 * v216);
        v320.f32[1] = (float)((float)(*(float *)&v81 * v211) + (float)(*(float *)&v84 * v214))
                    + (float)(*(float *)v51.i32 * v217);
        v320.f32[2] = v219;
        v320.f32[3] = (float)((float)(*(float *)v69.i32 * v210) + (float)(*(float *)&v82 * v213))
                    + (float)(*(float *)&v83 * v216);
        v321.f32[0] = (float)((float)(*(float *)v69.i32 * v211) + (float)(*(float *)&v82 * v214))
                    + (float)(*(float *)&v83 * v217);
        v321.f32[1] = v220;
        v321.f32[2] = (float)((float)(v209 * v210) + (float)(*(float *)&v78 * v213)) + (float)(*(float *)&v80 * v216);
        v321.f32[3] = (float)((float)(v209 * v211) + (float)(*(float *)&v78 * v214)) + (float)(*(float *)&v80 * v217);
        *(float *)&double v81 = *(float *)&v81 * v323.f32[0];
        *(float *)v69.i32 = *(float *)v69.i32 * v323.f32[0];
        *(float *)&double v82 = *(float *)v69.i32 + (float)(*(float *)&v82 * v323.f32[1]);
        *(float *)&double v78 = (float)(v209 * v323.f32[0]) + (float)(*(float *)&v78 * v323.f32[1]);
        *(float *)&double v83 = *(float *)&v83 * v324;
        *(float *)&double v80 = *(float *)&v80 * v324;
        *(float *)&double v84 = (float)(*(float *)&v81 + (float)(*(float *)&v84 * v323.f32[1]))
                       + (float)(*(float *)v51.i32 * v324);
        *(float *)v51.i32 = *(float *)&v82 + *(float *)&v83;
        float v322 = v221;
        v323.i32[0] = LODWORD(v84);
        *(float *)&double v84 = *(float *)&v78 + *(float *)&v80;
        v323.f32[1] = *(float *)&v82 + *(float *)&v83;
        float v324 = *(float *)&v78 + *(float *)&v80;
        float v185 = (float32x2_t *)&v296;
LABEL_36:
        physx::Ext::InertiaTensorComputer::translate((uint64_t)&v320, v185, v84, v51, v82, v83, v78, v80, v81, v69);
        break;
      default:
        break;
    }
    int32x4_t v31 = (int32x4_t)v285;
    float32x2_t v29 = vmul_n_f32(v38, v285.f32[0]);
    *(float *)&double v30 = v41 * v285.f32[0];
    *(float *)v31.i32 = v285.f32[0] + (float)(v283 * v325);
    float32x2_t v28 = vadd_f32(v29, vmul_n_f32(v323, v283 * v325));
    v29.f32[0] = v39 / *(float *)v31.i32;
    float32x2_t v38 = vmul_n_f32(v28, v39 / *(float *)v31.i32);
    float v41 = (float)(v39 / *(float *)v31.i32) * (float)((float)(v41 * v285.f32[0]) + (float)((float)(v283 * v325) * v324));
    float32x4_t v27 = vaddq_f32(v286, vmulq_n_f32(v320, v283));
    float32x4_t v222 = vaddq_f32(v284, vmulq_n_f32(v321, v283));
    float32x4_t v284 = v222;
    float v40 = v40 + (float)(v283 * v322);
    ++v37;
    v222.f32[0] = *(float *)v31.i32;
    float32x4_t v285 = v222;
    float32x4_t v286 = v27;
    goto LABEL_38;
  }
  uint64_t v223 = physx::shdfnd::Foundation::mInstance;
  float v224 = "computeMassAndInertia: Provided mass or density has no valid value";
  uint64_t v225 = 146;
LABEL_45:
  physx::shdfnd::Foundation::error(v223, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", v225, v224, v23, v24, v25, v280);
  int v34 = 0;
LABEL_46:
  float v20 = v281;
  float v19 = v282;
LABEL_47:
  if ((v331 & 0x8000000000000000) == 0 && (v331 & 0x7FFFFFFF00000000) != 0 && v330 != &v326 && v330) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (!v34)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 280, "%s: Mass and inertia computation failed, setting mass to 1 and inertia to (1,1,1)", v23, v24, v25, (char)"PxRigidBodyExt::updateMassAndInertia");
    goto LABEL_71;
  }
  if (v290 == 0.0)
  {
LABEL_71:
    uint64_t v35 = 0;
    goto LABEL_72;
  }
  if (!a5)
  {
    float v20 = *((float *)&v289 + 2);
    float v19 = *((float *)&v289 + 1);
    float v21 = *((float *)&v289 + 3);
  }
  *(float *)&double v32 = -v19;
  *(float *)v33.i32 = -v20;
  *(float *)&double v26 = -v21;
  *(float *)&long long v326 = -v19;
  *((float *)&v326 + 1) = -v20;
  *((float *)&v326 + 2) = -v21;
  physx::Ext::InertiaTensorComputer::translate((uint64_t)&v287, (float32x2_t *)&v326, v32, v33, v26, *(double *)v27.i64, *(double *)&v28, *(double *)&v29, v30, v31);
  long long v326 = (__int128)v287;
  float32x4_t v327 = v288;
  float v226 = v290;
  int v328 = v289;
  physx::PxDiagonalize((float *)&v326, (float *)&v291, v320.f32);
  uint64_t v292 = v320.i64[0];
  float v293 = v320.f32[2];
  if (v320.f32[0] <= 0.0 || v320.f32[1] <= 0.0 || v320.f32[2] <= 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtRigidBodyExt.cpp", 84, "%s: inertia tensor has negative components (ill-conditioned input expected). Approximation for inertia tensor will be used instead.", v227, v228, v229, (char)"PxRigidBodyExt::updateMassAndInertia");
    (*(void (**)(float32x4_t *__return_ptr, uint64_t, float))(*(void *)a2 + 80))(&v320, a2, 1.01);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 152))(&v326, a2);
    float v230 = (float)(*((float *)&v326 + 3) * *((float *)&v326 + 3)) + -0.5;
    float v231 = (float)((float)((float)(v327.f32[1] * -2.0) * *((float *)&v326 + 1))
                 + (float)(*(float *)&v326 * (float)(v327.f32[0] * -2.0)))
         + (float)(*((float *)&v326 + 2) * (float)(v327.f32[2] * -2.0));
    float v232 = (float)((float)(v320.f32[0] + v320.f32[3]) * 0.5) + (float)((float)(v320.f32[0] + v320.f32[3]) * 0.5);
    float v233 = (float)((float)(v320.f32[1] + v321.f32[0]) * 0.5) + (float)((float)(v320.f32[1] + v321.f32[0]) * 0.5);
    float v234 = (float)((float)(v320.f32[2] + v321.f32[1]) * 0.5) + (float)((float)(v320.f32[2] + v321.f32[1]) * 0.5);
    float v235 = (float)((float)-(float)(*((float *)&v326 + 1) * v233) - (float)(*(float *)&v326 * v232))
         - (float)(*((float *)&v326 + 2) * v234);
    float v236 = (float)((float)((float)((float)(v327.f32[0] * -2.0) * v230)
                         - (float)((float)((float)(*((float *)&v326 + 1) * (float)(v327.f32[2] * -2.0))
                                         - (float)(*((float *)&v326 + 2) * (float)(v327.f32[1] * -2.0)))
                                 * *((float *)&v326 + 3)))
                 + (float)(*(float *)&v326 * v231))
         + (float)((float)((float)(*((float *)&v326 + 3)
                                 * (float)((float)(*((float *)&v326 + 2) * v233) - (float)(*((float *)&v326 + 1) * v234)))
                         + (float)(v232 * v230))
                 - (float)(*(float *)&v326 * v235));
    float v237 = (float)((float)((float)((float)(v327.f32[1] * -2.0) * v230)
                         - (float)((float)((float)(*((float *)&v326 + 2) * (float)(v327.f32[0] * -2.0))
                                         - (float)(*(float *)&v326 * (float)(v327.f32[2] * -2.0)))
                                 * *((float *)&v326 + 3)))
                 + (float)(*((float *)&v326 + 1) * v231))
         + (float)((float)((float)(*((float *)&v326 + 3)
                                 * (float)((float)(*(float *)&v326 * v234) - (float)(*((float *)&v326 + 2) * v232)))
                         + (float)(v233 * v230))
                 - (float)(*((float *)&v326 + 1) * v235));
    float v238 = (float)((float)((float)((float)(v327.f32[2] * -2.0) * v230)
                         - (float)((float)((float)(*(float *)&v326 * (float)(v327.f32[1] * -2.0))
                                         - (float)(*((float *)&v326 + 1) * (float)(v327.f32[0] * -2.0)))
                                 * *((float *)&v326 + 3)))
                 + (float)(*((float *)&v326 + 2) * v231))
         + (float)((float)((float)(*((float *)&v326 + 3)
                                 * (float)((float)(*((float *)&v326 + 1) * v232) - (float)(*(float *)&v326 * v233)))
                         + (float)(v234 * v230))
                 - (float)(*((float *)&v326 + 2) * v235));
    float v239 = (float)-*(float *)&v326 - *(float *)&v326;
    float v240 = (float)-*((float *)&v326 + 1) - *((float *)&v326 + 1);
    float v241 = (float)-*((float *)&v326 + 2) - *((float *)&v326 + 2);
    float v242 = -(float)(*((float *)&v326 + 1) * v240);
    float v243 = -(float)(*((float *)&v326 + 2) * v241);
    float v244 = -(float)(*((float *)&v326 + 2) * v239);
    float v245 = *((float *)&v326 + 3) * v239;
    float v246 = -(float)(*((float *)&v326 + 2) * v240);
    float v247 = *((float *)&v326 + 3) * v240;
    float v248 = (float)(1.0 - v242) - v243;
    float v249 = (float)(*((float *)&v326 + 3) * v241) - (float)(*((float *)&v326 + 1) * v239);
    float v250 = (float)-(float)(*((float *)&v326 + 1) * v239) - (float)(*((float *)&v326 + 3) * v241);
    float v251 = (float)(*(float *)&v326 * v239) + 1.0;
    float v252 = v251 - v243;
    float v253 = v251 - v242;
    float v254 = (float)(v320.f32[3] - v320.f32[0]) * 0.5;
    float v255 = (float)(v321.f32[0] - v320.f32[1]) * 0.5;
    float v256 = (float)(v321.f32[1] - v320.f32[2]) * 0.5;
    float v257 = (float)(v245 + v246) * v255;
    float v258 = (float)(fabsf(v248 * v254) + fabsf(v250 * v255)) + fabsf((float)(v244 + v247) * v256);
    float v259 = (float)(fabsf(v249 * v254) + fabsf(v252 * v255)) + fabsf((float)(v246 - v245) * v256);
    float v260 = (float)(fabsf((float)(v244 - v247) * v254) + fabsf(v257)) + fabsf(v253 * v256);
    float v261 = (float)((float)(v258 + v236) + (float)(v258 - v236)) * 0.5;
    float v262 = (float)((float)(v259 + v237) + (float)(v259 - v237)) * 0.5;
    float v263 = (float)((float)(v260 + v238) + (float)(v260 - v238)) * 0.5;
    if (v261 == 0.0) {
      float v264 = 1.0;
    }
    else {
      float v264 = v261;
    }
    if (v262 == 0.0) {
      float v265 = 1.0;
    }
    else {
      float v265 = v262;
    }
    float v266 = v264 * v265;
    if (v263 == 0.0) {
      float v267 = 1.0;
    }
    else {
      float v267 = v263;
    }
    float v268 = (float)(v267 * v266) * 8.0;
    float v269 = v261 * v261;
    float v270 = v262 * v262;
    float v271 = v263 * v263;
    float v272 = v271 + v270;
    float v273 = v271 + v269;
    float v274 = v269 + v270;
    float v275 = v272 * (float)(v268 * 0.33333);
    float v276 = v273 * (float)(v268 * 0.33333);
    float v277 = v274 * (float)(v268 * 0.33333);
    float v278 = v226 / v268;
    *(float *)&uint64_t v292 = v278 * v275;
    *((float *)&v292 + 1) = v278 * v276;
    float v293 = v278 * v277;
    long long v291 = xmmword_23435FBB0;
  }
  uint64_t v35 = 1;
LABEL_73:
  (*(void (**)(uint64_t, float))(*(void *)a2 + 232))(a2, v226);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 256))(a2, &v292);
  long long v326 = v291;
  v327.i64[0] = __PAIR64__(LODWORD(v20), LODWORD(v19));
  v327.f32[2] = v21;
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 216))(a2, &v326);
  return v35;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxPrismaticJoint::getConcreteTypeName(physx::PxPrismaticJoint *this)
{
  return "PxPrismaticJoint";
}

void physx::Ext::PrismaticJoint::~PrismaticJoint(physx::Ext::PrismaticJoint *this)
{
  if (physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::~Joint((uint64_t)this))
  {
    float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxPrismaticJoint::isKindOf(physx::PxPrismaticJoint *this, const char *a2)
{
  if (!strcmp("PxPrismaticJoint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  uint64_t v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + physx::Ext::Joint<physx::PxFixedJoint,physx::PxFixedJointGeneratedValues>::~Joint((uint64_t)this - 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

float physx::Ext::PrismaticJoint::getPosition(physx::Ext::PrismaticJoint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v2);
  return v3;
}

float physx::Ext::PrismaticJoint::getVelocity(physx::Ext::PrismaticJoint *this)
{
  (*(void (**)(float *__return_ptr))(*(void *)this + 88))(v2);
  return v2[0];
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::PrismaticJoint::getPrep(physx::Ext::PrismaticJoint *this)
{
  return physx::Ext::PrismaticJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::PrismaticJoint::getPrep(physx::Ext::PrismaticJoint *this)
{
  return physx::Ext::PrismaticJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::PrismaticJoint::~PrismaticJoint(physx::Ext::PrismaticJoint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::~Joint((uint64_t)this - 24);
  float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxRevoluteJoint::getConcreteTypeName(physx::PxRevoluteJoint *this)
{
  return "PxRevoluteJoint";
}

void physx::Ext::RevoluteJoint::~RevoluteJoint(physx::Ext::RevoluteJoint *this)
{
  if (physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this))
  {
    float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxRevoluteJoint::isKindOf(physx::PxRevoluteJoint *this, const char *a2)
{
  if (!strcmp("PxRevoluteJoint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  float v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::~Joint((uint64_t)this - 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::RevoluteJoint::getPrep(physx::Ext::RevoluteJoint *this)
{
  return physx::Ext::RevoluteJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::RevoluteJoint::getPrep(physx::Ext::RevoluteJoint *this)
{
  return physx::Ext::RevoluteJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::RevoluteJoint::~RevoluteJoint(physx::Ext::RevoluteJoint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24);
  float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

double physx::Ext::PrismaticJoint::PrismaticJoint(uint64_t a1, float *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  __int16 v12 = 3;
  float v7 = (void *)physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::Joint(a1, 258, &v12, a3, a4, a5, a6, 0x80u);
  *float v7 = &unk_26E72FDA0;
  float v7[3] = &unk_26E72FF58;
  uint64_t v8 = v7[13];
  float v9 = fminf(*a2 * 0.01, 1.1116e38);
  float v10 = *a2 + *a2;
  *(_DWORD *)(v8 + 80) = 0;
  *(float *)(v8 + 84) = v10;
  *(void *)(v8 + 88) = 0;
  *(float *)(v8 + 96) = v9;
  double result = -1.428678e302;
  *(_OWORD *)(v8 + 100) = xmmword_234424B20;
  *(_WORD *)(v8 + 116) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(void *)a1 = &unk_26E730300;
  *(void *)(a1 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E7304A8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  if (a8) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else {
    uint64_t v14 = 0;
  }
  __int32 v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  float32x4_t v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned long long *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  uint64_t v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  float v28 = v63;
  float v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  float v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  float v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  float v32 = (float)(v64 * v64) + -0.5;
  float v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  float v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  float v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  float v38 = a5->f32[2];
  float v37 = a5->f32[3];
  float v39 = a5->f32[1];
  float v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  float v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  float v42 = v35 - (float)(v62 * v33);
  float v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  float v44 = v63;
  float v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  float v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  float v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  float v48 = (float)(v64 * v64) + -0.5;
  float v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  float v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  float v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  float v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  float v54 = a7->f32[2];
  float v53 = a7->f32[3];
  float v55 = a7->f32[1];
  float v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  float v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  float v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v14 = _Q0;
  *(void *)(a1 + 104) = v14;
  return a1;
}

double physx::Ext::RevoluteJoint::RevoluteJoint(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  __int16 v9 = 3;
  uint64_t v6 = (void *)physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::Joint(a1, 257, &v9, a3, a4, a5, a6, 0x90u);
  *uint64_t v6 = &unk_26E730038;
  v6[3] = &unk_26E730220;
  uint64_t v7 = v6[13];
  *(_DWORD *)(v7 + 1physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = 1078530011;
  *(_OWORD *)(v7 + 80) = xmmword_234424B30;
  *(_DWORD *)(v7 + 96) = 1056964608;
  *(void *)(v7 + 100) = 0;
  double result = 0.195796399;
  *(_OWORD *)(v7 + 108) = xmmword_234424B40;
  *(_WORD *)(v7 + 128) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(void *)a1 = &unk_26E730510;
  *(void *)(a1 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E7306E8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  if (a8) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else {
    uint64_t v14 = 0;
  }
  __int32 v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  float32x4_t v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned long long *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  uint64_t v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  float v28 = v63;
  float v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  float v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  float v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  float v32 = (float)(v64 * v64) + -0.5;
  float v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  float v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  float v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  float v38 = a5->f32[2];
  float v37 = a5->f32[3];
  float v39 = a5->f32[1];
  float v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  float v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  float v42 = v35 - (float)(v62 * v33);
  float v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  float v44 = v63;
  float v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  float v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  float v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  float v48 = (float)(v64 * v64) + -0.5;
  float v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  float v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  float v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  float v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  float v54 = a7->f32[2];
  float v53 = a7->f32[3];
  float v55 = a7->f32[1];
  float v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  float v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  float v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v14 = _Q0;
  *(void *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 148) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 144);
  if (v6 < a2)
  {
    uint64_t v7 = *(void *)(v5 + 136);
    uint64_t v8 = (void *)(v7 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 8 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 144) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxShape *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxShape *>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (8 * a2);
  if (v4 <= 0x80 && *(unsigned char *)(result + 128) == 0) {
    *(unsigned char *)(result + 128) = 1;
  }
  else {
    double result = physx::shdfnd::ReflectionAllocator<physx::PxShape *>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(v3 + 144);
  if (v7)
  {
    unint64_t v8 = result + 8 * v7;
    __int16 v9 = *(uint64_t **)(v3 + 136);
    float v10 = (void *)result;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    uint64_t v12 = *(void *)(v3 + 136);
    if (v12 == v3)
    {
      *(unsigned char *)(v3 + 128) = 0;
    }
    else if (v12)
    {
      double result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 136) = v6;
  *(_DWORD *)(v3 + 148) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxPrismaticJoint,physx::PxPrismaticJointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E730300;
  *(void *)(a1 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E7304A8;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E730510;
  *(void *)(a1 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E7306E8;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

void *physx::PxSphericalJointCreate(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float32x4_t *a5)
{
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Ext::SphericalJoint>::getName() [T = physx::Ext::SphericalJoint]";
  }
  else {
    uint64_t v11 = "<allocation names disabled>";
  }
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 112, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtSphericalJoint.cpp", 47);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  double v14 = physx::Ext::SphericalJoint::SphericalJoint((uint64_t)v12, v13, a2, a3, a4, a5);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, double))(*(void *)a1 + 216))(a1, a2, a4, v12 + 3, &physx::Ext::SphericalJoint::sShaders, 128, v14);
  v12[12] = v15;
  if (!v15)
  {
    (*(void (**)(void *))(*v12 + 32))(v12);
    return 0;
  }
  return v12;
}

uint64_t physx::Ext::SphericalJoint::setProjectionLinearTolerance(physx::Ext::SphericalJoint *this, float a2)
{
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  *(float *)(*((void *)v2 + 1) + 108) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::SphericalJoint::getProjectionLinearTolerance(physx::Ext::SphericalJoint *this)
{
  return *(float *)(*((void *)this + 13) + 108);
}

uint64_t physx::Ext::SphericalJoint::setLimitCone(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  long long v3 = *a2;
  *(_OWORD *)(v2 + 92) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)(v2 + 80) = v3;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::SphericalJoint::getLimitCone@<S0>(physx::Ext::SphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 13);
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 80);
  float result = *(float *)(v2 + 96);
  *(float *)(a2 + 16) = result;
  *(void *)(a2 + 20) = *(void *)(v2 + 100);
  return result;
}

uint64_t physx::Ext::SphericalJoint::getSphericalJointFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(*(void *)(this + 104) + 112);
  return this;
}

uint64_t physx::Ext::SphericalJoint::setSphericalJointFlags(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(result + 104) + 112) = *a2;
  return result;
}

uint64_t physx::Ext::SphericalJoint::setSphericalJointFlag(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (a3) {
    __int16 v4 = *(_WORD *)(v3 + 112) | a2;
  }
  else {
    __int16 v4 = *(_WORD *)(v3 + 112) & ~a2;
  }
  *(_WORD *)(v3 + 112) = v4;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))();
}

float physx::Ext::SphericalJoint::getSwingYAngle(physx::Ext::SphericalJoint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    float v2 = 0.0;
    float v3 = 0.0;
    float v4 = 1.0;
  }
  else
  {
    float v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    float v2 = *(float *)&v9 / v1;
    float v3 = 0.0 / v1;
    float v4 = v11 / v1;
  }
  float v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  float v6 = -(float)((float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
              + (float)(v3 * *(float *)&v9));
  float v7 = -v5;
  if (v5 >= 0.0)
  {
    float v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    float v6 = (float)((float)((float)(*((float *)&v9 + 1) * v4) - (float)(v11 * v3)) - (float)(v10 * v2))
       + (float)(v3 * *(float *)&v9);
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

float physx::Ext::SphericalJoint::getSwingZAngle(physx::Ext::SphericalJoint *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 80))(&v9);
  if (*(float *)&v9 == 0.0)
  {
    float v2 = 0.0;
    float v3 = 0.0;
    float v4 = 1.0;
  }
  else
  {
    float v1 = sqrtf((float)((float)(*(float *)&v9 * *(float *)&v9) + 0.0) + (float)(v11 * v11));
    float v2 = *(float *)&v9 / v1;
    float v3 = 0.0 / v1;
    float v4 = v11 / v1;
  }
  float v5 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
     + (float)(v10 * v3);
  float v6 = -(float)((float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
              + (float)(v2 * *((float *)&v9 + 1)));
  float v7 = -v5;
  if (v5 >= 0.0)
  {
    float v7 = (float)((float)((float)(*(float *)&v9 * v2) + (float)(v11 * v4)) + (float)(*((float *)&v9 + 1) * v3))
       + (float)(v10 * v3);
    float v6 = (float)((float)((float)(v10 * v4) - (float)(v11 * v3)) - (float)(*(float *)&v9 * v3))
       + (float)(v2 * *((float *)&v9 + 1));
  }
  return atan2f(v6, v7 + 1.0) * 4.0;
}

uint64_t physx::Ext::SphericalJoint::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 104), 128);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t SphericalJointSolverPrep(uint64_t a1, float32x2_t *a2, uint64_t a3, _OWORD *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, uint64_t a8, float32x2_t *a9, float32x2_t *a10)
{
  physx::Ext::joint::ConstraintHelper::ConstraintHelper((uint64_t)&v55, a1, a4, (uint64_t)&v63, &v57, a2, (float *)a5, a6, a7);
  float v13 = v57.f32[1];
  float v14 = v57.f32[0];
  float v15 = v63;
  float v16 = v64;
  float v17 = v58;
  float v18 = v59;
  float v19 = v65;
  float v20 = v66;
  if ((float)((float)((float)((float)(v57.f32[1] * v64) + (float)(v57.f32[0] * v63)) + (float)(v58 * v65))
             + (float)(v59 * v66)) < 0.0)
  {
    float v14 = -v57.f32[0];
    float v13 = -v57.f32[1];
    float v17 = -v58;
    v57.f32[0] = -v57.f32[0];
    v57.f32[1] = -v57.f32[1];
    float v18 = -v59;
    float v58 = -v58;
    float v59 = -v59;
  }
  if ((*(_WORD *)(a5 + 112) & 2) != 0)
  {
    float v21 = (float)((float)((float)(v66 * v14) - (float)(v63 * v18)) - (float)(v64 * v17)) + (float)(v13 * v65);
    float v22 = (float)((float)((float)(v66 * v13) - (float)(v64 * v18)) - (float)(v65 * v14)) + (float)(v17 * v63);
    float v23 = (float)((float)((float)(v66 * v17) - (float)(v65 * v18)) - (float)(v63 * v13)) + (float)(v14 * v64);
    float v24 = (float)((float)((float)(v63 * v14) + (float)(v66 * v18)) + (float)(v64 * v13)) + (float)(v65 * v17);
    float v25 = 0.0;
    if (v21 == 0.0)
    {
      float v29 = 1.0;
      float v27 = 0.0;
      float v28 = 0.0;
    }
    else
    {
      float v26 = sqrtf((float)((float)(v21 * v21) + 0.0) + (float)(v24 * v24));
      float v27 = v21 / v26;
      float v28 = 0.0 / v26;
      float v29 = v24 / v26;
    }
    v52.f32[0] = (float)((float)((float)(v21 * v29) - (float)(v24 * v27)) - (float)(v22 * v28)) + (float)(v28 * v23);
    v52.f32[1] = (float)((float)((float)(v22 * v29) - (float)(v24 * v28)) - (float)(v23 * v27)) + (float)(v28 * v21);
    float v53 = (float)((float)((float)(v23 * v29) - (float)(v24 * v28)) - (float)(v21 * v28)) + (float)(v27 * v22);
    float v54 = (float)((float)((float)(v21 * v27) + (float)(v24 * v29)) + (float)(v22 * v28)) + (float)(v23 * v28);
    int v49 = 0;
    if (*(float *)(a5 + 92) <= 0.0 && *(float *)(a5 + 88) <= 0.0) {
      float v25 = *(float *)(a5 + 96);
    }
    uint64_t v47 = *(void *)(a5 + 100);
    float v48 = v25;
    if (physx::Cm::ConeLimitHelperTanLess::getLimit((float *)&v47, (float *)&v52, (float *)&v50, (float *)&v49))
    {
      float v30 = v65;
      float v31 = (float)(v66 * v66) + -0.5;
      float v32 = (float)((float)((float)(v50.f32[1] + v50.f32[1]) * v64) + (float)(v63 * (float)(v50.f32[0] + v50.f32[0])))
          + (float)(v65 * (float)(v51 + v51));
      float v33 = (float)((float)(v66
                          * (float)((float)(v64 * (float)(v51 + v51)) - (float)(v65 * (float)(v50.f32[1] + v50.f32[1]))))
                  + (float)((float)(v50.f32[0] + v50.f32[0]) * v31))
          + (float)(v63 * v32);
      float v34 = (float)((float)(v66
                          * (float)((float)(v65 * (float)(v50.f32[0] + v50.f32[0])) - (float)(v63 * (float)(v51 + v51))))
                  + (float)((float)(v50.f32[1] + v50.f32[1]) * v31))
          + (float)(v64 * v32);
      float v35 = (float)(v66
                  * (float)((float)(v63 * (float)(v50.f32[1] + v50.f32[1]))
                          - (float)(v64 * (float)(v50.f32[0] + v50.f32[0]))))
          + (float)((float)(v51 + v51) * v31);
      int v36 = v49;
      uint64_t v37 = v56;
      v56 += 80;
      *(_WORD *)(v37 + 78) = 0;
      *(void *)uint64_t v37 = 0;
      float v38 = v35 + (float)(v30 * v32);
      *(_DWORD *)(v37 + 8) = 0;
      *(float *)(v37 + 20) = v34;
      *(float *)(v37 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = v38;
      *(void *)(v37 + 32) = 0;
      *(_DWORD *)(v37 + 40) = 0;
      *(float *)(v37 + 48) = v33;
      *(float *)(v37 + 52) = v34;
      *(float *)(v37 + 56) = v38;
      *(_DWORD *)(v37 + 12) = v36;
      *(float *)(v37 + 16) = v33;
      *(_WORD *)(v37 + 76) |= 0x40u;
      physx::Ext::joint::ConstraintHelper::addLimit((uint64_t)&v55, v37, a5 + 80);
    }
    float v15 = v63;
    float v16 = v64;
    float v19 = v65;
    float v20 = v66;
  }
  float v39 = (float)(v60 - v67) + (float)(v60 - v67);
  float v40 = (float)(v61 - v68) + (float)(v61 - v68);
  float v41 = (float)(v62 - v69) + (float)(v62 - v69);
  float v42 = (float)(v20 * v20) + -0.5;
  float v43 = (float)((float)(v16 * v40) + (float)(v15 * v39)) + (float)(v19 * v41);
  *(float *)&uint64_t v47 = (float)((float)(v39 * v42) - (float)((float)((float)(v16 * v41) - (float)(v19 * v40)) * v20))
                 + (float)(v15 * v43);
  *((float *)&v47 + 1) = (float)((float)(v40 * v42) - (float)((float)((float)(v19 * v39) - (float)(v15 * v41)) * v20))
                       + (float)(v16 * v43);
  float v48 = (float)((float)(v41 * v42) - (float)((float)((float)(v15 * v40) - (float)(v16 * v39)) * v20))
      + (float)(v19 * v43);
  physx::Ext::joint::ConstraintHelper::prepareLockedAxes((uint64_t)&v55, &v63, (float *)&v57, (float *)&v47, 7, 0, (float *)&v52, (float *)&v50);
  float32_t v44 = v53 + a6[3].f32[0];
  *a9 = vadd_f32(v52, a6[2]);
  a9[1].f32[0] = v44;
  float32_t v45 = v51 + a7[3].f32[0];
  *a10 = vadd_f32(v50, a7[2]);
  a10[1].f32[0] = v45;
  return -858993459 * ((unint64_t)(v56 - v55) >> 4);
}

float SphericalJointProject(float *a1, float *a2, float *a3, int a4)
{
  physx::Ext::joint::computeDerived(a1, a2, a3, &v101, &v94, &v87, 1);
  float result = a1[27];
  float v9 = (float)((float)(v92 * v92) + (float)(v91 * v91)) + (float)(v93 * v93);
  if (v9 > (float)(result * result))
  {
    float v10 = 1.0 / sqrtf(v9);
    float v11 = result * (float)(v91 * v10);
    float v12 = result * (float)(v92 * v10);
    float v13 = result * (float)(v93 * v10);
    if (a4)
    {
      float v14 = a1[15] * -2.0;
      float v15 = a1[16] * -2.0;
      float v16 = a1[17] * -2.0;
      float v18 = a1[13];
      float v17 = a1[14];
      float v19 = (float)(v17 * v17) + -0.5;
      float v20 = a1[11];
      float v21 = a1[12];
      float v22 = (float)((float)(v15 * v21) + (float)(v20 * v14)) + (float)(v18 * v16);
      float v23 = (float)((float)(v14 * v19) - (float)((float)((float)(v21 * v16) - (float)(v18 * v15)) * v17))
          + (float)(v20 * v22);
      float v24 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(v20 * v16)) * v17))
          + (float)(v21 * v22);
      float v25 = (float)((float)(v16 * v19) - (float)((float)((float)(v20 * v15) - (float)(v21 * v14)) * v17))
          + (float)(v18 * v22);
      float v26 = v23 + v23;
      float v27 = v24 + v24;
      float v28 = v25 + v25;
      float v29 = (float)(v90 * v90) + -0.5;
      float v30 = (float)((float)(v88 * (float)(v24 + v24)) + (float)(v87 * (float)(v23 + v23))) + (float)(v89 * v28);
      float v31 = (float)((float)(v90 * (float)((float)(v88 * v28) - (float)(v89 * (float)(v24 + v24))))
                  + (float)((float)(v23 + v23) * v29))
          + (float)(v87 * v30);
      float v32 = (float)((float)(v90 * (float)((float)(v89 * v26) - (float)(v87 * v28))) + (float)((float)(v24 + v24) * v29))
          + (float)(v88 * v30);
      float v33 = v13
          + (float)((float)((float)(v90 * (float)((float)(v87 * v27) - (float)(v88 * v26))) + (float)(v28 * v29))
                  + (float)(v89 * v30));
      float v34 = (float)((float)((float)(v87 * v17) - (float)(v90 * v20)) - (float)(v88 * v18)) + (float)(v21 * v89);
      float v35 = (float)((float)((float)(v88 * v17) - (float)(v90 * v21)) - (float)(v89 * v20)) + (float)(v18 * v87);
      float v36 = (float)((float)((float)(v89 * v17) - (float)(v90 * v18)) - (float)(v87 * v21)) + (float)(v20 * v88);
      float v37 = (float)((float)((float)(v87 * v20) + (float)(v90 * v17)) + (float)(v88 * v21)) + (float)(v89 * v18);
      float v38 = (float)(v11 + v31) + (float)(v11 + v31);
      float v39 = (float)(v12 + v32) + (float)(v12 + v32);
      float v40 = (float)(v104 * v104) + -0.5;
      float v41 = (float)((float)(v102 * v39) + (float)(v101 * v38)) + (float)(v103 * (float)(v33 + v33));
      float v42 = (float)((float)(v104 * (float)((float)(v102 * (float)(v33 + v33)) - (float)(v103 * v39)))
                  + (float)(v38 * v40))
          + (float)(v101 * v41);
      float v43 = (float)((float)(v104 * (float)((float)(v103 * v38) - (float)(v101 * (float)(v33 + v33))))
                  + (float)(v39 * v40))
          + (float)(v102 * v41);
      float v44 = (float)((float)(v104 * (float)((float)(v101 * v39) - (float)(v102 * v38)))
                  + (float)((float)(v33 + v33) * v40))
          + (float)(v103 * v41);
      float v45 = v105 + v42;
      float v46 = v106 + v43;
      float v47 = v107 + v44;
      float result = (float)((float)((float)(v37 * v101) + (float)(v104 * v34)) + (float)(v102 * v36)) - (float)(v35 * v103);
      float v48 = (float)((float)((float)(v37 * v102) + (float)(v104 * v35)) + (float)(v103 * v34)) - (float)(v36 * v101);
      float v49 = (float)((float)((float)(v37 * v103) + (float)(v104 * v36)) + (float)(v101 * v35)) - (float)(v34 * v102);
      float v50 = (float)((float)((float)(v104 * v37) - (float)(v101 * v34)) - (float)(v102 * v35)) - (float)(v103 * v36);
      *a3 = result;
      a3[1] = v48;
      a3[2] = v49;
      a3[3] = v50;
      a3[4] = v45;
      a3[5] = v46;
      a3[6] = v47;
      float v51 = sqrtf((float)((float)((float)(v48 * v48) + (float)(result * result)) + (float)(v49 * v49)) + (float)(v50 * v50));
      if (v51 != 0.0)
      {
        *a3 = result / v51;
        a3[1] = v48 / v51;
        float result = v49 / v51;
        a3[2] = v49 / v51;
        a3[3] = v50 / v51;
      }
    }
    else
    {
      float v52 = a1[8] * -2.0;
      float v53 = a1[9] * -2.0;
      float v54 = a1[10] * -2.0;
      float v56 = a1[6];
      float v55 = a1[7];
      float v57 = (float)(v55 * v55) + -0.5;
      float v58 = a1[4];
      float v59 = a1[5];
      float v60 = (float)((float)(v53 * v59) + (float)(v58 * v52)) + (float)(v56 * v54);
      float v61 = (float)((float)(v52 * v57) - (float)((float)((float)(v59 * v54) - (float)(v56 * v53)) * v55))
          + (float)(v58 * v60);
      float v62 = (float)((float)(v53 * v57) - (float)((float)((float)(v56 * v52) - (float)(v58 * v54)) * v55))
          + (float)(v59 * v60);
      float v63 = (float)((float)((float)(v54 * v57) - (float)((float)((float)(v58 * v53) - (float)(v59 * v52)) * v55))
                  + (float)(v56 * v60))
          - v13;
      float v64 = (float)(v61 - v11) + (float)(v61 - v11);
      float v65 = (float)(v62 - v12) + (float)(v62 - v12);
      float v66 = v63 + v63;
      float v67 = (float)(v90 * v90) + -0.5;
      float v68 = (float)((float)-(float)(v88 * v65) - (float)(v87 * v64)) - (float)(v89 * v66);
      float v69 = (float)((float)(v90 * (float)((float)(v89 * v65) - (float)(v88 * v66))) + (float)(v64 * v67))
          - (float)(v87 * v68);
      float v70 = (float)((float)(v90 * (float)((float)(v87 * v66) - (float)(v89 * v64))) + (float)(v65 * v67))
          - (float)(v88 * v68);
      float v71 = (float)((float)(v90 * (float)((float)(v88 * v64) - (float)(v87 * v65))) + (float)(v66 * v67))
          - (float)(v89 * v68);
      float v72 = (float)((float)((float)-(float)(v87 * v55) - (float)(v90 * v58)) + (float)(v88 * v56)) - (float)(v59 * v89);
      float v73 = (float)((float)((float)-(float)(v88 * v55) - (float)(v90 * v59)) + (float)(v89 * v58)) - (float)(v56 * v87);
      float v74 = (float)((float)((float)-(float)(v89 * v55) - (float)(v90 * v56)) + (float)(v87 * v59)) - (float)(v58 * v88);
      float v75 = (float)((float)((float)(v90 * v55) - (float)(v58 * v87)) - (float)(v88 * v59)) - (float)(v89 * v56);
      float v76 = (float)(v97 * v97) + -0.5;
      float v77 = (float)((float)(v95 * (float)(v70 + v70)) + (float)(v94 * (float)(v69 + v69)))
          + (float)(v96 * (float)(v71 + v71));
      float v78 = (float)((float)(v97 * (float)((float)(v96 * (float)(v69 + v69)) - (float)(v94 * (float)(v71 + v71))))
                  + (float)((float)(v70 + v70) * v76))
          + (float)(v95 * v77);
      float v79 = (float)((float)(v97 * (float)((float)(v94 * (float)(v70 + v70)) - (float)(v95 * (float)(v69 + v69))))
                  + (float)((float)(v71 + v71) * v76))
          + (float)(v96 * v77);
      float v80 = v98
          + (float)((float)((float)(v97 * (float)((float)(v95 * (float)(v71 + v71)) - (float)(v96 * (float)(v70 + v70))))
                          + (float)((float)(v69 + v69) * v76))
                  + (float)(v94 * v77));
      float v81 = v99 + v78;
      float v82 = v100 + v79;
      float result = (float)((float)((float)(v75 * v94) + (float)(v97 * v72)) + (float)(v95 * v74)) - (float)(v73 * v96);
      float v83 = (float)((float)((float)(v75 * v95) + (float)(v97 * v73)) + (float)(v96 * v72)) - (float)(v74 * v94);
      float v84 = (float)((float)((float)(v75 * v96) + (float)(v97 * v74)) + (float)(v94 * v73)) - (float)(v72 * v95);
      float v85 = (float)((float)((float)(v97 * v75) - (float)(v94 * v72)) - (float)(v95 * v73)) - (float)(v96 * v74);
      *a2 = result;
      a2[1] = v83;
      a2[2] = v84;
      a2[3] = v85;
      a2[4] = v80;
      a2[5] = v81;
      a2[6] = v82;
      float v86 = sqrtf((float)((float)((float)(v83 * v83) + (float)(result * result)) + (float)(v84 * v84)) + (float)(v85 * v85));
      if (v86 != 0.0)
      {
        *a2 = result / v86;
        a2[1] = v83 / v86;
        float result = v84 / v86;
        a2[2] = v84 / v86;
        a2[3] = v85 / v86;
      }
    }
  }
  return result;
}

void SphericalJointVisualize(uint64_t a1, uint64_t a2, float *a3, float *a4, char a5)
{
  float v8 = physx::Ext::joint::computeJointFrames(&v38, &v34, (float *)a2, a3, a4);
  if (a5) {
    (*(void (**)(uint64_t, float *, float *, float))(*(void *)a1 + 16))(a1, &v38, &v34, v8);
  }
  if ((a5 & 2) != 0 && (*(_WORD *)(a2 + 112) & 2) != 0)
  {
    float v10 = v34;
    float v9 = v35;
    float v11 = v36;
    float v12 = v37;
    if ((float)((float)((float)((float)(v39 * v35) + (float)(v38 * v34)) + (float)(v40 * v36)) + (float)(v41 * v37)) < 0.0)
    {
      float v10 = -v34;
      float v9 = -v35;
      float v11 = -v36;
      float v34 = -v34;
      float v35 = -v35;
      float v12 = -v37;
      float v36 = -v36;
      float v37 = -v37;
    }
    float v13 = (float)((float)((float)(v41 * v10) - (float)(v38 * v12)) - (float)(v39 * v11)) + (float)(v9 * v40);
    float v14 = (float)((float)((float)(v41 * v9) - (float)(v39 * v12)) - (float)(v40 * v10)) + (float)(v11 * v38);
    float v15 = (float)((float)((float)(v41 * v11) - (float)(v40 * v12)) - (float)(v38 * v9)) + (float)(v10 * v39);
    float v16 = (float)((float)((float)(v38 * v10) + (float)(v41 * v12)) + (float)(v39 * v9)) + (float)(v40 * v11);
    float v17 = 0.0;
    if (v13 == 0.0)
    {
      float v21 = 1.0;
      float v19 = 0.0;
      float v20 = 0.0;
    }
    else
    {
      float v18 = sqrtf((float)((float)(v13 * v13) + 0.0) + (float)(v16 * v16));
      float v19 = v13 / v18;
      float v20 = 0.0 / v18;
      float v21 = v16 / v18;
    }
    float v22 = (float)((float)((float)(v14 * v21) - (float)(v16 * v20)) - (float)(v15 * v19)) + (float)(v20 * v13);
    float v23 = (float)((float)((float)(v15 * v21) - (float)(v16 * v20)) - (float)(v13 * v20)) + (float)(v19 * v14);
    float v24 = (float)((float)((float)(v13 * v19) + (float)(v16 * v21)) + (float)(v14 * v20)) + (float)(v15 * v20);
    if (*(float *)(a2 + 92) <= 0.0 && *(float *)(a2 + 88) <= 0.0) {
      float v17 = *(float *)(a2 + 96);
    }
    float v25 = v24 + 1.0;
    float v26 = atan2f(v22, v24 + 1.0) * 4.0;
    float v27 = atan2f(v23, v25) * 4.0;
    float v28 = *(float *)(a2 + 100);
    float v29 = *(float *)(a2 + 104);
    float v30 = tanf(v29 * 0.25);
    v31.n128_u32[0] = tanf(v28 * 0.25);
    float v32 = fabsf(v26);
    float v33 = fabsf(v27);
    (*(void (**)(uint64_t, float *, BOOL, float, __n128))(*(void *)a1 + 40))(a1, &v38, (float)((float)((float)((float)(v17 + v32) / v28) * (float)((float)(v17 + v32) / v28))+ (float)((float)((float)(v17 + v33) / v29) * (float)((float)(v17 + v33) / v29))) > 1.0, v30, v31);
  }
}

uint64_t physx::PxMeshOverlapUtil::findOverlap(uint64_t *a1, int *a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  char v13 = 0;
  uint64_t result = physx::PxMeshQuery::findOverlapTriangleMesh(a2, a3, a4, a5, *a1, *((_DWORD *)a1 + 259), 0, &v13);
  if (v13)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a4 + 40) + 80))(*(void *)(a4 + 40));
    if (result)
    {
      unsigned int v11 = result;
      uint64_t v12 = *a1;
      if (*((_DWORD *)a1 + 259) >= result)
      {
        unsigned int v11 = *((_DWORD *)a1 + 259);
      }
      else
      {
        if ((uint64_t *)v12 != a1 + 1 && v12) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1);
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtTriangleMeshExt.cpp", 72);
        *a1 = v12;
        *((_DWORD *)a1 + 259) = v11;
      }
      uint64_t result = physx::PxMeshQuery::findOverlapTriangleMesh(a2, a3, a4, a5, v12, v11, 0, &v13);
    }
  }
  *((_DWORD *)a1 + 258) = result;
  return result;
}

uint64_t physx::PxMeshOverlapUtil::findOverlap(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, float *a5, double a6, double a7, double a8, double a9)
{
  char v22 = 1;
  uint64_t result = physx::PxMeshQuery::findOverlapHeightField(a2, a3, (float32x2_t *)a4, a5, *a1, *((_DWORD *)a1 + 259), 0, &v22, a6, a7, a8, a9);
  if (v22)
  {
    int v15 = (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 64))(*(void *)(a4 + 8));
    unsigned int v16 = 2 * v15 * (*(uint64_t (**)(void))(**(void **)(a4 + 8) + 72))(*(void *)(a4 + 8));
    if (v16)
    {
      uint64_t v21 = *a1;
      if (*((_DWORD *)a1 + 259) >= v16)
      {
        unsigned int v16 = *((_DWORD *)a1 + 259);
      }
      else
      {
        if ((uint64_t *)v21 != a1 + 1 && v21) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1);
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtTriangleMeshExt.cpp", 102);
        *a1 = v21;
        *((_DWORD *)a1 + 259) = v16;
      }
      uint64_t result = physx::PxMeshQuery::findOverlapHeightField(a2, a3, (float32x2_t *)a4, a5, v21, v16, 0, &v22, v17, v18, v19, v20);
    }
    else
    {
      uint64_t result = 0;
    }
  }
  *((_DWORD *)a1 + 258) = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::release(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 96))(*(void *)(a1 + 96));
}

const char *physx::PxSphericalJoint::getConcreteTypeName(physx::PxSphericalJoint *this)
{
  return "PxSphericalJoint";
}

void physx::Ext::SphericalJoint::~SphericalJoint(physx::Ext::SphericalJoint *this)
{
  if (physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this))
  {
    float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v1();
  }
}

BOOL physx::PxSphericalJoint::isKindOf(physx::PxSphericalJoint *this, const char *a2)
{
  if (!strcmp("PxSphericalJoint", a2)) {
    return 1;
  }
  return physx::PxJoint::isKindOf(this, a2);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setActors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 64))(*(void *)(a1 + 96));
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a2);
  float v6 = v43;
  float v7 = (float)(*(float *)(a1 + 56) - v45) + (float)(*(float *)(a1 + 56) - v45);
  float v8 = (float)(*(float *)(a1 + 60) - v46) + (float)(*(float *)(a1 + 60) - v46);
  float v9 = (float)(*(float *)(a1 + 64) - v47) + (float)(*(float *)(a1 + 64) - v47);
  float v10 = (float)(v44 * v44) + -0.5;
  float v11 = (float)((float)-(float)(v42 * v8) - (float)(v41 * v7)) - (float)(v43 * v9);
  float v12 = (float)((float)(v44 * (float)((float)(v43 * v8) - (float)(v42 * v9))) + (float)(v7 * v10)) - (float)(v41 * v11);
  float v13 = (float)(v44 * (float)((float)(v41 * v9) - (float)(v43 * v7))) + (float)(v8 * v10);
  float v14 = (float)(v44 * (float)((float)(v42 * v7) - (float)(v41 * v8))) + (float)(v9 * v10);
  float v16 = *(float *)(a1 + 48);
  float v15 = *(float *)(a1 + 52);
  float v17 = *(float *)(a1 + 40);
  float v18 = *(float *)(a1 + 44);
  float v19 = (float)((float)((float)(v44 * v18) - (float)(v42 * v15)) - (float)(v43 * v17)) + (float)(v16 * v41);
  float v20 = (float)((float)((float)(v44 * v16) - (float)(v43 * v15)) - (float)(v41 * v18)) + (float)(v17 * v42);
  float v21 = v13 - (float)(v42 * v11);
  float v22 = (float)((float)((float)(v41 * v17) + (float)(v44 * v15)) + (float)(v42 * v18)) + (float)(v43 * v16);
  float v23 = *(float **)(a1 + 104);
  v23[4] = (float)((float)((float)(v44 * v17) - (float)(v41 * v15)) - (float)(v42 * v16)) + (float)(v18 * v43);
  v23[5] = v19;
  v23[6] = v20;
  v23[7] = v22;
  v23[8] = v12;
  v23[9] = v21;
  v23[10] = v14 - (float)(v6 * v11);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v41, a3);
  float v24 = (float)(*(float *)(a1 + 84) - v45) + (float)(*(float *)(a1 + 84) - v45);
  float v25 = (float)(*(float *)(a1 + 88) - v46) + (float)(*(float *)(a1 + 88) - v46);
  float v26 = (float)(*(float *)(a1 + 92) - v47) + (float)(*(float *)(a1 + 92) - v47);
  float v27 = (float)(v44 * v44) + -0.5;
  float v28 = (float)((float)-(float)(v42 * v25) - (float)(v41 * v24)) - (float)(v43 * v26);
  float v29 = (float)((float)(v44 * (float)((float)(v43 * v25) - (float)(v42 * v26))) + (float)(v24 * v27))
      - (float)(v41 * v28);
  float v30 = (float)((float)(v44 * (float)((float)(v41 * v26) - (float)(v43 * v24))) + (float)(v25 * v27))
      - (float)(v42 * v28);
  float v31 = (float)((float)(v44 * (float)((float)(v42 * v24) - (float)(v41 * v25))) + (float)(v26 * v27))
      - (float)(v43 * v28);
  float v33 = *(float *)(a1 + 76);
  float v32 = *(float *)(a1 + 80);
  float v34 = *(float *)(a1 + 68);
  float v35 = *(float *)(a1 + 72);
  float v36 = (float)((float)((float)(v44 * v35) - (float)(v42 * v32)) - (float)(v43 * v34)) + (float)(v33 * v41);
  float v37 = (float)((float)((float)(v44 * v33) - (float)(v43 * v32)) - (float)(v41 * v35)) + (float)(v34 * v42);
  float v38 = (float)((float)((float)(v41 * v34) + (float)(v44 * v32)) + (float)(v42 * v35)) + (float)(v43 * v33);
  float v39 = *(float **)(a1 + 104);
  v39[11] = (float)((float)((float)(v44 * v34) - (float)(v41 * v32)) - (float)(v42 * v33)) + (float)(v35 * v43);
  v39[12] = v36;
  v39[13] = v37;
  v39[14] = v38;
  v39[15] = v29;
  v39[16] = v30;
  v39[17] = v31;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getActors(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setLocalPose(uint64_t a1, unsigned int a2, float *a3)
{
  v39[1] = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[2];
  float v7 = a3[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a3 * *a3)) + (float)(v6 * v6)) + (float)(v7 * v7));
  float v9 = *a3 / v8;
  float v10 = v5 / v8;
  float v11 = v6 / v8;
  float v12 = v7 / v8;
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  uint64_t v16 = 28 * a2;
  float v17 = (float *)(a1 + v16);
  v17[10] = v9;
  v17[11] = v5 / v8;
  v17[12] = v6 / v8;
  v17[13] = v7 / v8;
  v17[14] = v13;
  v17[15] = v14;
  v17[16] = v15;
  uint64_t v38 = 0;
  v39[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v38, v39);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v31, v39[a2 - 1]);
  float v18 = (float)(v13 - v35) + (float)(v13 - v35);
  float v19 = (float)(v14 - v36) + (float)(v14 - v36);
  float v20 = (float)(v15 - v37) + (float)(v15 - v37);
  float v21 = (float)(v34 * v34) + -0.5;
  float v22 = (float)((float)-(float)(v32 * v19) - (float)(v31 * v18)) - (float)(v33 * v20);
  float v23 = (float)((float)(v34 * (float)((float)(v33 * v19) - (float)(v32 * v20))) + (float)(v18 * v21))
      - (float)(v31 * v22);
  float v24 = (float)((float)(v34 * (float)((float)(v31 * v20) - (float)(v33 * v18))) + (float)(v19 * v21))
      - (float)(v32 * v22);
  float v25 = (float)((float)(v34 * (float)((float)(v32 * v18) - (float)(v31 * v19))) + (float)(v20 * v21))
      - (float)(v33 * v22);
  float v26 = (float)((float)((float)(v34 * v10) - (float)(v32 * v12)) - (float)(v33 * v9)) + (float)(v11 * v31);
  float v27 = (float)((float)((float)(v34 * v11) - (float)(v33 * v12)) - (float)(v31 * v10)) + (float)(v9 * v32);
  float v28 = (float)((float)((float)(v9 * v31) + (float)(v34 * v12)) + (float)(v32 * v10)) + (float)(v33 * v11);
  float v29 = (float *)(*(void *)(a1 + 104) + v16);
  v29[4] = (float)((float)((float)(v34 * v9) - (float)(v31 * v12)) - (float)(v32 * v11)) + (float)(v10 * v33);
  v29[5] = v26;
  v29[6] = v27;
  v29[7] = v28;
  v29[8] = v23;
  v29[9] = v24;
  v29[10] = v25;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getLocalPose@<S0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 28 * a2;
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 40);
  *(void *)(a3 + 16) = *(void *)(v3 + 56);
  float result = *(float *)(v3 + 64);
  *(float *)(a3 + physx::Ext::Joint<physx::PxRevoluteJoint,physx::PxRevoluteJointGeneratedValues>::~Joint((uint64_t)this - 24) = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeTransform@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v73, &v72);
  float v4 = 1.0;
  float v5 = 0.0;
  float v6 = 0.0;
  float v7 = 0.0;
  float v8 = 0.0;
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  float v12 = 1.0;
  if (v73)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 152))(&v66);
    float v5 = 0.0;
    float v4 = 1.0;
    float v10 = *((float *)&v66 + 1);
    float v11 = *(float *)&v66;
    float v9 = v67;
    float v12 = v68;
    float v8 = v69;
    float v7 = v70;
    float v6 = v71;
  }
  float v13 = *(float *)(a1 + 56);
  float v14 = *(float *)(a1 + 60);
  float v15 = *(float *)(a1 + 64);
  float v16 = *(float *)(a1 + 48);
  float v17 = *(float *)(a1 + 52);
  float v18 = 0.0;
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = *(float *)(a1 + 40);
  float v22 = *(float *)(a1 + 44);
  float v23 = 0.0;
  float v24 = 0.0;
  if (v72)
  {
    float v64 = v7;
    float v65 = v8;
    float v62 = *(float *)(a1 + 56);
    float v63 = v6;
    float v60 = *(float *)(a1 + 64);
    float v61 = *(float *)(a1 + 60);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 152))(&v66);
    float v15 = v60;
    float v14 = v61;
    float v13 = v62;
    float v6 = v63;
    float v7 = v64;
    float v8 = v65;
    float v23 = *((float *)&v66 + 1);
    float v24 = *(float *)&v66;
    float v20 = v67;
    float v4 = v68;
    float v19 = v69;
    float v18 = v70;
    float v5 = v71;
  }
  float v25 = (float)((float)((float)(v12 * v17) - (float)(v11 * v21)) - (float)(v10 * v22)) - (float)(v9 * v16);
  float v26 = (float)((float)((float)(v9 * v17) + (float)(v12 * v16)) + (float)(v11 * v22)) - (float)(v21 * v10);
  float v27 = (float)((float)((float)(v10 * v17) + (float)(v12 * v22)) + (float)(v9 * v21)) - (float)(v16 * v11);
  float v28 = (float)((float)((float)(v11 * v17) + (float)(v12 * v21)) + (float)(v10 * v16)) - (float)(v22 * v9);
  float v29 = v15 + v15;
  float v30 = v14 + v14;
  float v31 = (float)((float)(v10 * v30) + (float)(v11 * (float)(v13 + v13))) + (float)(v9 * v29);
  float v32 = (float)(v12 * v12) + -0.5;
  float v33 = v6
      + (float)((float)((float)(v12 * (float)((float)(v11 * v30) - (float)(v10 * (float)(v13 + v13))))
                      + (float)(v29 * v32))
              + (float)(v9 * v31));
  float v34 = v7
      + (float)((float)((float)(v12 * (float)((float)(v9 * (float)(v13 + v13)) - (float)(v11 * v29)))
                      + (float)(v30 * v32))
              + (float)(v10 * v31));
  float v35 = v8
      + (float)((float)((float)(v12 * (float)((float)(v10 * v29) - (float)(v9 * v30)))
                      + (float)((float)(v13 + v13) * v32))
              + (float)(v11 * v31));
  float v36 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v37 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v38 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v39 = (float)(v4 * v4) + -0.5;
  float v40 = (float)((float)(v23 * v37) + (float)(v24 * v36)) + (float)(v20 * v38);
  float v41 = v19
      + (float)((float)((float)(v4 * (float)((float)(v23 * v38) - (float)(v20 * v37))) + (float)(v36 * v39))
              + (float)(v24 * v40));
  float v42 = v18
      + (float)((float)((float)(v4 * (float)((float)(v20 * v36) - (float)(v24 * v38))) + (float)(v37 * v39))
              + (float)(v23 * v40));
  float v43 = v5
      + (float)((float)((float)(v4 * (float)((float)(v24 * v37) - (float)(v23 * v36))) + (float)(v38 * v39))
              + (float)(v20 * v40));
  float v45 = *(float *)(a1 + 76);
  float v44 = *(float *)(a1 + 80);
  float v46 = *(float *)(a1 + 68);
  float v47 = *(float *)(a1 + 72);
  float v48 = (float)((float)((float)(v24 * v44) + (float)(v4 * v46)) + (float)(v23 * v45)) - (float)(v47 * v20);
  float v49 = (float)((float)((float)(v23 * v44) + (float)(v4 * v47)) + (float)(v20 * v46)) - (float)(v45 * v24);
  float v50 = (float)((float)((float)(v20 * v44) + (float)(v4 * v45)) + (float)(v24 * v47)) - (float)(v46 * v23);
  float v51 = (float)((float)((float)(v4 * v44) - (float)(v24 * v46)) - (float)(v23 * v47)) - (float)(v20 * v45);
  float v52 = (float)(v41 - v35) + (float)(v41 - v35);
  float v53 = (float)(v42 - v34) + (float)(v42 - v34);
  float v54 = (float)(v43 - v33) + (float)(v43 - v33);
  float v55 = (float)(v25 * v25) + -0.5;
  float v56 = (float)((float)-(float)(v27 * v53) - (float)(v28 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v25 * (float)((float)(v26 * v53) - (float)(v27 * v54))) + (float)(v52 * v55))
      - (float)(v28 * v56);
  float v58 = (float)((float)(v25 * (float)((float)(v28 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v27 * v56);
  *a2 = (float)((float)((float)(v25 * v48) - (float)(v28 * v51)) - (float)(v27 * v50)) + (float)(v49 * v26);
  a2[1] = (float)((float)((float)(v25 * v49) - (float)(v27 * v51)) - (float)(v26 * v48)) + (float)(v50 * v28);
  a2[2] = (float)((float)((float)(v25 * v50) - (float)(v26 * v51)) - (float)(v28 * v49)) + (float)(v48 * v27);
  a2[3] = (float)((float)((float)(v28 * v48) + (float)(v25 * v51)) + (float)(v27 * v49)) + (float)(v26 * v50);
  float result = (float)((float)(v25 * (float)((float)(v27 * v52) - (float)(v28 * v53))) + (float)(v54 * v55))
         - (float)(v26 * v56);
  a2[4] = v57;
  a2[5] = v58;
  a2[6] = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeLinearVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v49 = 0;
  float v50 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v50, &v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v34, (uint64_t)v50);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v30, (uint64_t)v49);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v50, (uint64_t)v48, (uint64_t)&v45);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v49, (uint64_t)v44, (uint64_t)&v41);
  float v4 = *(float *)(a1 + 56) + *(float *)(a1 + 56);
  float v5 = *(float *)(a1 + 60) + *(float *)(a1 + 60);
  float v6 = *(float *)(a1 + 64) + *(float *)(a1 + 64);
  float v7 = (float)(v37 * v37) + -0.5;
  float v8 = (float)((float)(v5 * v35) + (float)(v34 * v4)) + (float)(v36 * v6);
  float v9 = (float)((float)(v37 * (float)((float)(v35 * v6) - (float)(v36 * v5))) + (float)(v4 * v7)) + (float)(v34 * v8);
  float v10 = (float)((float)(v37 * (float)((float)(v36 * v4) - (float)(v34 * v6))) + (float)(v5 * v7)) + (float)(v35 * v8);
  float v11 = (float)((float)(v37 * (float)((float)(v34 * v5) - (float)(v35 * v4))) + (float)(v6 * v7)) + (float)(v36 * v8);
  float v12 = *(float *)(a1 + 84) + *(float *)(a1 + 84);
  float v13 = *(float *)(a1 + 88) + *(float *)(a1 + 88);
  float v14 = *(float *)(a1 + 92) + *(float *)(a1 + 92);
  float v15 = (float)(v33 * v33) + -0.5;
  float v16 = (float)((float)(v13 * v31) + (float)(v30 * v12)) + (float)(v32 * v14);
  float v17 = (float)((float)(v33 * (float)((float)(v31 * v14) - (float)(v32 * v13))) + (float)(v12 * v15))
      + (float)(v30 * v16);
  float v18 = (float)((float)(v33 * (float)((float)(v32 * v12) - (float)(v30 * v14))) + (float)(v13 * v15))
      + (float)(v31 * v16);
  float v19 = (float)((float)(v33 * (float)((float)(v30 * v13) - (float)(v31 * v12))) + (float)(v14 * v15))
      + (float)(v32 * v16);
  float v20 = (float)(v46 * v11) - (float)(v47 * v10);
  float v21 = (float)((float)(v44[1] - (float)((float)(v43 * v17) - (float)(v41 * v19))) - v48[1])
      + (float)((float)(v47 * v9) - (float)(v45 * v11));
  float v22 = (float)((float)((float)(v44[0] - (float)((float)(v42 * v19) - (float)(v43 * v18))) - v48[0]) + v20) - v38;
  float v23 = (float)((float)((float)(v44[2] - (float)((float)(v41 * v18) - (float)(v42 * v17))) - v48[2])
              + (float)((float)(v45 * v10) - (float)(v46 * v9)))
      - v40;
  float v24 = v22 + v22;
  float v25 = (float)(v21 - v39) + (float)(v21 - v39);
  float v26 = v23 + v23;
  float v27 = (float)((float)(v35 * v25) + (float)(v34 * v24)) + (float)(v36 * v26);
  float v28 = (float)((float)(v25 * v7) - (float)((float)((float)(v36 * v24) - (float)(v34 * v26)) * v37))
      + (float)(v35 * v27);
  float result = (float)((float)(v26 * v7) - (float)((float)((float)(v34 * v25) - (float)(v35 * v24)) * v37))
         + (float)(v36 * v27);
  *a2 = (float)((float)(v24 * v7) - (float)((float)((float)(v35 * v26) - (float)(v36 * v25)) * v37))
      + (float)(v34 * v27);
  a2[1] = v28;
  a2[2] = result;
  return result;
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getRelativeAngularVelocity@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v26 = 0;
  float v27 = 0;
  (*(void (**)(void, _WORD **, _WORD **))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v27, &v26);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v11, (uint64_t)v27);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v27, (uint64_t)v25, (uint64_t)&v22);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getActorVelocity(v26, (uint64_t)v21, (uint64_t)&v18);
  float v3 = (float)((float)(v18 - v22) - v15) + (float)((float)(v18 - v22) - v15);
  float v4 = (float)((float)(v19 - v23) - v16) + (float)((float)(v19 - v23) - v16);
  float v5 = (float)((float)(v20 - v24) - v17) + (float)((float)(v20 - v24) - v17);
  float v6 = (float)(v14 * v14) + -0.5;
  float v7 = (float)((float)(v4 * v12) + (float)(v11 * v3)) + (float)(v13 * v5);
  float v8 = (float)((float)(v3 * v6) - (float)((float)((float)(v12 * v5) - (float)(v13 * v4)) * v14)) + (float)(v11 * v7);
  float v9 = (float)((float)(v4 * v6) - (float)((float)((float)(v13 * v3) - (float)(v11 * v5)) * v14)) + (float)(v12 * v7);
  float result = (float)((float)(v5 * v6) - (float)((float)((float)(v11 * v4) - (float)(v12 * v3)) * v14)) + (float)(v13 * v7);
  *a2 = v8;
  a2[1] = v9;
  a2[2] = result;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 120))();
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getBreakForce(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 128))();
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setConstraintFlags(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  __int16 v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 80))(v2, &v4);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setConstraintFlag(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))();
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstraintFlags(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 88))();
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvMassScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  **(float **)(v2 + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvMassScale0(uint64_t a1)
{
  return **(float **)(a1 + 104);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvInertiaScale0(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 4) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvInertiaScale0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 4);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvMassScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 8) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvMassScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 8);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setInvInertiaScale1(uint64_t a1, float a2)
{
  uint64_t v2 = a1 + 96;
  uint64_t v3 = *(void *)(a1 + 96);
  *(float *)(*(void *)(v2 + 8) + 12) = a2;
  return (*(uint64_t (**)(void))(*(void *)v3 + 72))();
}

float physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getInvInertiaScale1(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 104) + 12);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstraint(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getName(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getScene(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::requiresObjects(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 96));
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, uint64_t *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v6, &v5);
  if (v6) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  v30[1] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  v30[0] = 0;
  (*(void (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v29, v30);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v22, v30[a2 - 1]);
  uint64_t v4 = 28 * a2;
  float v5 = (float)(*(float *)(a1 + v4 + 56) - v26) + (float)(*(float *)(a1 + v4 + 56) - v26);
  float v6 = (float)(*(float *)(a1 + v4 + 60) - v27) + (float)(*(float *)(a1 + v4 + 60) - v27);
  float v7 = (float)(*(float *)(a1 + v4 + 64) - v28) + (float)(*(float *)(a1 + v4 + 64) - v28);
  float v8 = (float)(v25 * v25) + -0.5;
  float v9 = (float)((float)-(float)(v23 * v6) - (float)(v22 * v5)) - (float)(v24 * v7);
  float v10 = (float)((float)(v25 * (float)((float)(v24 * v6) - (float)(v23 * v7))) + (float)(v5 * v8)) - (float)(v22 * v9);
  float v11 = (float)((float)(v25 * (float)((float)(v22 * v7) - (float)(v24 * v5))) + (float)(v6 * v8)) - (float)(v23 * v9);
  float v12 = (float)((float)(v25 * (float)((float)(v23 * v5) - (float)(v22 * v6))) + (float)(v7 * v8)) - (float)(v24 * v9);
  float v14 = *(float *)(a1 + v4 + 48);
  float v13 = *(float *)(a1 + v4 + 52);
  float v15 = *(float *)(a1 + v4 + 40);
  float v16 = *(float *)(a1 + v4 + 44);
  float v17 = (float)((float)((float)(v25 * v16) - (float)(v23 * v13)) - (float)(v24 * v15)) + (float)(v14 * v22);
  float v18 = (float)((float)((float)(v25 * v14) - (float)(v24 * v13)) - (float)(v22 * v16)) + (float)(v15 * v23);
  float v19 = (float)((float)((float)(v22 * v15) + (float)(v25 * v13)) + (float)(v23 * v16)) + (float)(v24 * v14);
  float v20 = (float *)(*(void *)(a1 + 104) + v4);
  v20[4] = (float)((float)((float)(v25 * v15) - (float)(v22 * v13)) - (float)(v23 * v14)) + (float)(v16 * v24);
  v20[5] = v17;
  v20[6] = v18;
  v20[7] = v19;
  v20[8] = v10;
  v20[9] = v11;
  v20[10] = v12;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 96) + 56))(*(void *)(a1 + 96), &v9, v10);
  if (v9)
  {
    if (v10[0]) {
      return result;
    }
    *(float32x2_t *)(a1 + 84) = vsub_f32(*(float32x2_t *)(a1 + 84), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 92) = *(float *)(a1 + 92) - a2[1].f32[0];
    uint64_t v6 = *(void *)(a1 + 104);
    *(float32x2_t *)(v6 + 60) = vsub_f32(*(float32x2_t *)(v6 + 60), *a2);
    float v7 = (float *)(v6 + 68);
  }
  else
  {
    *(float32x2_t *)(a1 + 56) = vsub_f32(*(float32x2_t *)(a1 + 56), *a2);
    float v5 = (float *)&a2[1];
    *(float *)(a1 + 64) = *(float *)(a1 + 64) - a2[1].f32[0];
    float v8 = *(float32x2_t **)(a1 + 104);
    v8[4] = vsub_f32(v8[4], *a2);
    float v7 = (float *)&v8[5];
  }
  *float v7 = *v7 - *v5;
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 72))(*(void *)(a1 + 96));
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onConstraintRelease(void *a1)
{
  if (a1[13]) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[13] = 0;
  uint64_t v2 = *(uint64_t (**)(void *))(*a1 + 32);
  return v2(a1);
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t physx::Ext::SphericalJoint::getPrep(physx::Ext::SphericalJoint *this)
{
  return physx::Ext::SphericalJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::prepareData(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::updatePvdProperties()
{
  return 0;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onConstraintRelease(uint64_t a1)
{
  return physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onConstraintRelease((void *)(a1 - 24));
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(uint64_t a1, unsigned int a2)
{
  return physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onComShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(uint64_t a1, float32x2_t *a2)
{
  return physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::onOriginShift(a1 - 24, a2);
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getExternalReference(uint64_t a1, _DWORD *a2)
{
  uint64_t result = a1 - 24;
  *a2 = 0;
  return result;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getSerializable(uint64_t a1)
{
  return a1 - 24;
}

uint64_t non-virtual thunk to'physx::Ext::SphericalJoint::getPrep(physx::Ext::SphericalJoint *this)
{
  return physx::Ext::SphericalJoint::sShaders;
}

uint64_t non-virtual thunk to'physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::getConstantBlock(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void non-virtual thunk to'physx::Ext::SphericalJoint::~SphericalJoint(physx::Ext::SphericalJoint *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24);
  float v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

double physx::Ext::SphericalJoint::SphericalJoint(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6)
{
  __int16 v9 = 3;
  uint64_t v6 = (void *)physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::Joint(a1, 256, &v9, a3, a4, a5, a6, 0x80u);
  *uint64_t v6 = &unk_26E730750;
  v6[3] = &unk_26E7308F8;
  uint64_t v7 = v6[13];
  *(void *)(v7 + 80) = 0x3F00000000000000;
  *(void *)(v7 + 88) = 0;
  double result = 0.195796399;
  *(_OWORD *)(v7 + 96) = xmmword_234424C70;
  *(_WORD *)(v7 + 112) = 0;
  return result;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::Joint(uint64_t a1, __int16 a2, __int16 *a3, uint64_t a4, float32x4_t *a5, uint64_t a6, float32x4_t *a7, unsigned int a8)
{
  __int16 v13 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v13;
  *(void *)a1 = &unk_26E7309D8;
  *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E730B70;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 16) = 0;
  if (a8) {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, a8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxextensions/src/ExtJoint.h", 454);
  else {
    uint64_t v14 = 0;
  }
  __int32 v15 = a5[1].i32[2];
  _Q1 = *a5;
  _Q2 = vmulq_f32(_Q1, _Q1);
  _S3 = a5->i64[1];
  __asm { FMLA            S2, S3, V1.S[2] }
  _S3 = HIDWORD(*(unsigned long long *)a5);
  __asm { FMLA            S2, S3, V1.S[3] }
  _Q2.f32[0] = sqrtf(_Q2.f32[0]);
  float32x4_t v24 = vdivq_f32(*a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.f32, 0));
  _Q2.i64[0] = a5[1].i64[0];
  *(float32x4_t *)(a1 + 40) = v24;
  *(void *)(a1 + 56) = _Q2.i64[0];
  *(_DWORD *)(a1 + 64) = v15;
  _Q0 = *a7;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _Q2.i32[0] = a7->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _Q2.i32[0] = HIDWORD(*(unsigned long long *)a7);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  _Q2.i32[0] = a7[1].i32[2];
  uint64_t v27 = a7[1].i64[0];
  *(float32x4_t *)(a1 + 68) = vdivq_f32(*a7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  *(void *)(a1 + 84) = v27;
  *(_DWORD *)(a1 + 92) = _Q2.i32[0];
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a4);
  float v28 = v63;
  float v29 = (float)(a5[1].f32[0] - v65) + (float)(a5[1].f32[0] - v65);
  float v30 = (float)(a5[1].f32[1] - v66) + (float)(a5[1].f32[1] - v66);
  float v31 = (float)(a5[1].f32[2] - v67) + (float)(a5[1].f32[2] - v67);
  float v32 = (float)(v64 * v64) + -0.5;
  float v33 = (float)((float)-(float)(v62 * v30) - (float)(v61 * v29)) - (float)(v63 * v31);
  float v34 = (float)((float)(v64 * (float)((float)(v63 * v30) - (float)(v62 * v31))) + (float)(v29 * v32))
      - (float)(v61 * v33);
  float v35 = (float)(v64 * (float)((float)(v61 * v31) - (float)(v63 * v29))) + (float)(v30 * v32);
  float v36 = (float)(v64 * (float)((float)(v62 * v29) - (float)(v61 * v30))) + (float)(v31 * v32);
  float v38 = a5->f32[2];
  float v37 = a5->f32[3];
  float v39 = a5->f32[1];
  float v40 = (float)((float)((float)(v64 * v39) - (float)(v62 * v37)) - (float)(v63 * a5->f32[0])) + (float)(v38 * v61);
  float v41 = (float)((float)((float)(v64 * v38) - (float)(v63 * v37)) - (float)(v61 * v39)) + (float)(a5->f32[0] * v62);
  float v42 = v35 - (float)(v62 * v33);
  float v43 = (float)((float)((float)(v61 * a5->f32[0]) + (float)(v64 * v37)) + (float)(v62 * v39)) + (float)(v63 * v38);
  *(float *)(v14 + 16) = (float)((float)((float)(v64 * a5->f32[0]) - (float)(v61 * v37)) - (float)(v62 * v38))
                       + (float)(v39 * v63);
  *(float *)(v14 + 20) = v40;
  *(float *)(v14 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v41;
  *(float *)(v14 + 28) = v43;
  *(float *)(v14 + 32) = v34;
  *(float *)(v14 + 36) = v42;
  *(float *)(v14 + 40) = v36 - (float)(v28 * v33);
  physx::Ext::Joint<physx::PxD6Joint,physx::PxD6JointGeneratedValues>::getCom(&v61, a6);
  float v44 = v63;
  float v45 = (float)(a7[1].f32[0] - v65) + (float)(a7[1].f32[0] - v65);
  float v46 = (float)(a7[1].f32[1] - v66) + (float)(a7[1].f32[1] - v66);
  float v47 = (float)(a7[1].f32[2] - v67) + (float)(a7[1].f32[2] - v67);
  float v48 = (float)(v64 * v64) + -0.5;
  float v49 = (float)((float)-(float)(v62 * v46) - (float)(v61 * v45)) - (float)(v63 * v47);
  float v50 = (float)((float)(v64 * (float)((float)(v63 * v46) - (float)(v62 * v47))) + (float)(v45 * v48))
      - (float)(v61 * v49);
  float v51 = (float)((float)(v64 * (float)((float)(v61 * v47) - (float)(v63 * v45))) + (float)(v46 * v48))
      - (float)(v62 * v49);
  float v52 = (float)((float)(v64 * (float)((float)(v62 * v45) - (float)(v61 * v46))) + (float)(v47 * v48))
      - (float)(v63 * v49);
  float v54 = a7->f32[2];
  float v53 = a7->f32[3];
  float v55 = a7->f32[1];
  float v56 = (float)((float)((float)(v64 * v55) - (float)(v62 * v53)) - (float)(v63 * a7->f32[0])) + (float)(v54 * v61);
  float v57 = (float)((float)((float)(v64 * v54) - (float)(v63 * v53)) - (float)(v61 * v55)) + (float)(a7->f32[0] * v62);
  float v58 = (float)((float)(v61 * a7->f32[0]) + (float)(v64 * v53)) + (float)(v62 * v55);
  *(float *)(v14 + 44) = (float)((float)((float)(v64 * a7->f32[0]) - (float)(v61 * v53)) - (float)(v62 * v54))
                       + (float)(v55 * v63);
  *(float *)(v14 + 48) = v56;
  *(float *)(v14 + 52) = v57;
  *(float *)(v14 + 56) = v58 + (float)(v44 * v54);
  *(float *)(v14 + 60) = v50;
  *(float *)(v14 + 64) = v51;
  *(float *)(v14 + 68) = v52;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)uint64_t v14 = _Q0;
  *(void *)(a1 + 104) = v14;
  return a1;
}

uint64_t physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint(uint64_t a1)
{
  *(void *)a1 = &unk_26E7309D8;
  *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E730B70;
  if (*(unsigned char *)(a1 + 10))
  {
    if (*(void *)(a1 + 104)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t physx::PxTaskManager::createTaskManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskMgr>::getName() [T = physx::PxTaskMgr]";
  }
  else {
    float v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 144, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 144);
  return physx::PxTaskMgr::PxTaskMgr(v6, a1, a2);
}

uint64_t physx::PxTaskMgr::PxTaskMgr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26E730BD8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1061158912;
  *(void *)(a1 + 68) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 76) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 24, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(_DWORD *)(a1 + 80) = 0;
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    float v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 72, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 88) = v6;
  physx::shdfnd::MutexImpl::MutexImpl(v6);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void physx::PxTaskMgr::~PxTaskMgr(physx::PxTaskMgr *this)
{
  *(void *)this = &unk_26E730BD8;
  int v2 = *((_DWORD *)this + 35);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 16) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 31);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 14) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 27);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 12) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 11);
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::PxTaskMgr::~PxTaskMgr(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::PxTaskMgr::release(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 96))();
  }
  return this;
}

uint64_t physx::PxTaskMgr::decrReference(uint64_t this, atomic_uint *a2)
{
  if (atomic_fetch_add(a2 + 8, 0xFFFFFFFF) == 1)
  {
    int v2 = *(uint64_t (****)(void))(this + 16);
    if (v2) {
      return (**v2)(v2);
    }
    else {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)a2 + 56))(a2);
    }
  }
  return this;
}

void physx::PxTaskMgr::addReference(physx::PxTaskMgr *this, atomic_uint *a2)
{
}

void *physx::PxTaskMgr::resetDependencies(void *this)
{
  uint64_t v1 = (uint64_t)this;
  *((_DWORD *)this + 30) = 0;
  *((_DWORD *)this + 26) = 0;
  int v2 = *((_DWORD *)this + 15);
  if (v2 && *((_DWORD *)this + 19))
  {
    this = memset(*((void **)this + 6), 255, (4 * v2));
    uint64_t v3 = *(void *)(v1 + 40);
    uint64_t v4 = (*(_DWORD *)(v1 + 56) - 1);
    if (*(_DWORD *)(v1 + 56) == 1)
    {
      uint64_t v12 = 0;
    }
    else
    {
      _X10 = v3 + 128;
      int v6 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v6++;
        _X10 += 4;
        --v4;
      }
      while (v4);
      uint64_t v12 = (*(_DWORD *)(v1 + 56) - 1);
    }
    *(_DWORD *)(v3 + 4 * v12) = -1;
    *(_DWORD *)(v1 + 68) = 0;
    *(_DWORD *)(v1 + 76) = 0;
  }
  *(_DWORD *)(v1 + 80) = 0;
  return this;
}

uint64_t physx::PxTaskMgr::startSimulation(uint64_t this)
{
  if (*(_DWORD *)(this + 80))
  {
    uint64_t v1 = this;
    unsigned int v6 = 0;
    if (*(_DWORD *)(this + 120))
    {
      unsigned int v2 = 0;
      do
      {
        uint64_t v3 = *(void *)(v1 + 112);
        if (*(_DWORD *)(v3 + 24 * v2 + 12) != 2
          && atomic_fetch_add((atomic_uint *volatile)(v3 + 24 * v2 + 8), 0xFFFFFFFF) == 1)
        {
          uint64_t v4 = *(unsigned int *)(v1 + 136);
          if ((*(_DWORD *)(v1 + 140) & 0x7FFFFFFFu) <= v4)
          {
            this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v1 + 128, &v6);
          }
          else
          {
            *(_DWORD *)(*(void *)(v1 + 128) + 4 * v4) = v6;
            ++*(_DWORD *)(v1 + 136);
          }
        }
        unsigned int v2 = v6 + 1;
        unsigned int v6 = v2;
      }
      while (v2 < *(_DWORD *)(v1 + 120));
    }
    if (*(_DWORD *)(v1 + 136))
    {
      unint64_t v5 = 0;
      do
        this = physx::PxTaskMgr::dispatchTask((pthread_mutex_t **)v1, *(_DWORD *)(*(void *)(v1 + 128) + 4 * v5++));
      while (v5 < *(unsigned int *)(v1 + 136));
    }
    *(_DWORD *)(v1 + 136) = 0;
  }
  return this;
}

uint64_t physx::PxTaskMgr::dispatchTask(pthread_mutex_t **this, unsigned int a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[11]);
  }
  uint64_t v4 = this[14];
  unint64_t v5 = (char *)v4 + 24 * a2;
  int v8 = *((_DWORD *)v5 + 3);
  uint64_t v7 = v5 + 12;
  int v6 = v8;
  if (!v8)
  {
    uint64_t result = (*(uint64_t (**)(pthread_mutex_t *, void))this[2]->__sig)(this[2], *(&v4->__sig + 3 * a2));
LABEL_11:
    *uint64_t v7 = 2;
    goto LABEL_12;
  }
  if (v6 == 1)
  {
LABEL_10:
    uint64_t result = physx::PxTaskMgr::resolveRow((uint64_t)this, a2);
    goto LABEL_11;
  }
  if (v6 != 2)
  {
    (*(void (**)(pthread_mutex_t *, uint64_t, const char *, const char *, uint64_t))(this[1]->__sig + 16))(this[1], 2, "Unknown task type", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 448);
    goto LABEL_10;
  }
  uint64_t result = (*(uint64_t (**)(pthread_mutex_t *, uint64_t, const char *, const char *, uint64_t))(this[1]->__sig + 16))(this[1], 2, "PxTask dispatched twice", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/task/src/TaskManager.cpp", 431);
LABEL_12:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    float v10 = this[11];
    return pthread_mutex_unlock(v10);
  }
  return result;
}

uint64_t physx::PxTaskMgr::getNamedTask(pthread_mutex_t **this, const char *__s2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[11]);
  }
  if (!*((_DWORD *)this + 19)) {
    goto LABEL_14;
  }
  int v4 = *(unsigned __int8 *)__s2;
  if (*__s2)
  {
    unint64_t v5 = __s2 + 1;
    int v6 = 5381;
    do
    {
      int v6 = (33 * v6) ^ v4;
      int v7 = *(unsigned __int8 *)v5++;
      int v4 = v7;
    }
    while (v7);
  }
  else
  {
    int v6 = 5381;
  }
  uint64_t v8 = *((unsigned int *)&this[6]->__sig + (v6 & (*((_DWORD *)this + 15) - 1)));
  if (v8 == -1)
  {
LABEL_14:
    float v10 = 0;
  }
  else
  {
    __int16 v9 = this[4];
    while (strcmp(*((const char **)&v9->__sig + 2 * v8), __s2))
    {
      uint64_t v8 = *((unsigned int *)&this[5]->__sig + v8);
      if (v8 == -1) {
        goto LABEL_14;
      }
    }
    float v10 = (char *)v9 + 16 * v8;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_unlock(this[11]);
    if (v10) {
      return *((unsigned int *)v10 + 2);
    }
  }
  else if (v10)
  {
    return *((unsigned int *)v10 + 2);
  }
  uint64_t v12 = *(uint64_t (**)(pthread_mutex_t **, void, const char *, uint64_t))&(*this)->__opaque[48];
  return v12(this, 0, __s2, 1);
}

uint64_t physx::PxTaskMgr::getTaskFromID(physx::PxTaskMgr *this, unsigned int a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *(void *)(*((void *)this + 14) + 24 * a2);
  }
  pthread_mutex_lock(*((pthread_mutex_t **)this + 11));
  uint64_t v4 = *(void *)(*((void *)this + 14) + 24 * a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*((pthread_mutex_t **)this + 11));
  }
  return v4;
}

uint64_t physx::PxTaskMgr::submitNamedTask(uint64_t a1, uint64_t a2, char *__s2, int a4, int8x8_t a5)
{
  if (a2)
  {
    *(void *)(a2 + 16) = a1;
    (*(void (**)(uint64_t))(*(void *)a2 + 64))(a2);
  }
  __int16 v9 = &unk_2687A6000;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  }
  if (!*(_DWORD *)(a1 + 76)) {
    goto LABEL_16;
  }
  int v10 = *__s2;
  if (*__s2)
  {
    float v11 = __s2 + 1;
    int v12 = 5381;
    do
    {
      int v12 = (33 * v12) ^ v10;
      int v13 = *v11++;
      int v10 = v13;
    }
    while (v13);
  }
  else
  {
    int v12 = 5381;
  }
  uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * (v12 & (*(_DWORD *)(a1 + 60) - 1)));
  if (v14 == -1)
  {
LABEL_16:
    atomic_fetch_add((atomic_uint *volatile)(a1 + 80), 1u);
    uint64_t v16 = *(unsigned int *)(a1 + 120);
    unsigned int v17 = *(_DWORD *)(a1 + 60);
    if (v17)
    {
      int v18 = *__s2;
      if (*__s2)
      {
        float v19 = __s2 + 1;
        int v20 = 5381;
        do
        {
          int v20 = (33 * v20) ^ v18;
          int v21 = *v19++;
          int v18 = v21;
        }
        while (v21);
      }
      else
      {
        int v20 = 5381;
      }
      unsigned int v22 = v20 & (v17 - 1);
      uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v22);
      if (v23 != -1)
      {
        uint64_t v24 = *(void *)(a1 + 32);
        while (strcmp(*(const char **)(v24 + 16 * v23), __s2))
        {
          uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 40) + 4 * v23);
          if (v23 == -1)
          {
            __int16 v9 = &unk_2687A6000;
            goto LABEL_28;
          }
        }
        uint64_t v31 = v24 + 16 * v23;
        __int16 v9 = (unsigned char *)&unk_2687A6000;
        goto LABEL_44;
      }
    }
    else
    {
      unsigned int v22 = 0;
    }
LABEL_28:
    if (*(_DWORD *)(a1 + 76) == *(_DWORD *)(a1 + 56))
    {
      if (v17) {
        unsigned int v25 = 2 * v17;
      }
      else {
        unsigned int v25 = 16;
      }
      if (v17 < v25)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 24, v25, a5);
        unsigned int v17 = *(_DWORD *)(a1 + 60);
      }
      int v26 = *__s2;
      if (*__s2)
      {
        uint64_t v27 = __s2 + 1;
        int v28 = 5381;
        do
        {
          int v28 = (33 * v28) ^ v26;
          int v29 = *v27++;
          int v26 = v29;
        }
        while (v29);
      }
      else
      {
        int v28 = 5381;
      }
      unsigned int v22 = v28 & (v17 - 1);
    }
    uint64_t v32 = *(unsigned int *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v32 + 1;
    uint64_t v33 = *(void *)(a1 + 48);
    *(_DWORD *)(*(void *)(a1 + 40) + 4 * v32) = *(_DWORD *)(v33 + 4 * v22);
    *(_DWORD *)(v33 + 4 * v22) = v32;
    *(int32x2_t *)(a1 + 72) = vadd_s32(*(int32x2_t *)(a1 + 72), (int32x2_t)0x100000001);
    uint64_t v31 = *(void *)(a1 + 32) + 16 * v32;
    *(void *)uint64_t v31 = __s2;
LABEL_44:
    *(_DWORD *)(v31 + 8) = v16;
    if (a2) {
      *(_DWORD *)(a2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v16;
    }
    DWORD2(v38) = 1;
    uint64_t v39 = -1;
    *(void *)&long long v38 = a2;
    HIDWORD(v38) = a4;
    unsigned int v34 = *(_DWORD *)(a1 + 120);
    if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) <= v34)
    {
      physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(a1 + 112, &v38);
    }
    else
    {
      uint64_t v35 = *(void *)(a1 + 112) + 24 * v34;
      long long v36 = v38;
      *(void *)(v35 + 16) = v39;
      *(_OWORD *)uint64_t v35 = v36;
      ++*(_DWORD *)(a1 + 120);
    }
    goto LABEL_49;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  while (strcmp(*(const char **)(v15 + 16 * v14), __s2))
  {
    uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 40) + 4 * v14);
    if (v14 == -1) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = *(unsigned int *)(v15 + 16 * v14 + 8);
  if (a2)
  {
    uint64_t v30 = *(void *)(a1 + 112) + 24 * v16;
    *(void *)uint64_t v30 = a2;
    *(_DWORD *)(v30 + 12) = a4;
    *(_DWORD *)(a2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v16;
  }
LABEL_49:
  if ((v9[856] & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  }
  return v16;
}

uint64_t physx::PxTaskMgr::submitUnnamedTask(uint64_t a1, uint64_t a2, int a3)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 80), 1u);
  *(void *)(a2 + 16) = a1;
  (*(void (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  }
  unsigned int v6 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v6;
  DWORD2(v11) = 1;
  uint64_t v12 = -1;
  *(void *)&long long v11 = a2;
  HIDWORD(v11) = a3;
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) <= v6)
  {
    physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(a1 + 112, &v11);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 112) + 24 * v6;
    long long v8 = v11;
    *(void *)(v7 + 16) = v12;
    *(_OWORD *)uint64_t v7 = v8;
    ++*(_DWORD *)(a1 + 120);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 88));
  }
  return v9;
}

uint64_t physx::PxTaskMgr::taskCompleted(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  }
  uint64_t result = physx::PxTaskMgr::resolveRow(a1, *(_DWORD *)(a2 + 24));
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v5 = *(pthread_mutex_t **)(a1 + 88);
    return pthread_mutex_unlock(v5);
  }
  return result;
}

uint64_t physx::PxTaskMgr::resolveRow(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this;
  for (uint64_t i = *(unsigned int *)(*(void *)(this + 112) + 24 * a2 + 16); i != -1; uint64_t i = v4[1])
  {
    uint64_t v4 = (unsigned int *)(*(void *)(v2 + 96) + 8 * i);
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(v2 + 112) + 24 * *v4 + 8), 0xFFFFFFFF) == 1) {
      this = physx::PxTaskMgr::dispatchTask((physx::PxTaskMgr *)v2, *v4);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(v2 + 80), 0xFFFFFFFF);
  return this;
}

uint64_t physx::PxTaskMgr::finishBefore(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  }
  uint64_t result = physx::PxTaskTableRow::addDependency(*(void *)(a1 + 112) + 24 * *(unsigned int *)(a2 + 24), a1 + 96, a3);
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 112) + 24 * a3 + 8), 1u);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v7 = *(pthread_mutex_t **)(a1 + 88);
    return pthread_mutex_unlock(v7);
  }
  return result;
}

uint64_t physx::PxTaskTableRow::addDependency(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  unint64_t v7 = a3 | 0xFFFFFFFF00000000;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v5)
  {
    uint64_t result = physx::shdfnd::Array<physx::PxTaskDepTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>>::growAndPushBack(a2, &v7);
  }
  else
  {
    *(void *)(*(void *)a2 + 8 * v5) = v7;
    ++*(_DWORD *)(a2 + 8);
  }
  uint64_t v6 = *(unsigned int *)(v4 + 20);
  if (v6 == -1) {
    *(_DWORD *)(v4 + 16) = v5;
  }
  else {
    *(_DWORD *)(*(void *)a2 + 8 * v6 + 4) = v5;
  }
  *(_DWORD *)(v4 + 20) = v5;
  return result;
}

uint64_t physx::PxTaskMgr::startAfter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 88));
  }
  uint64_t result = physx::PxTaskTableRow::addDependency(*(void *)(a1 + 112) + 24 * a3, a1 + 96, *(_DWORD *)(a2 + 24));
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 112) + 24 * *(unsigned int *)(a2 + 24) + 8), 1u);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v7 = *(pthread_mutex_t **)(a1 + 88);
    return pthread_mutex_unlock(v7);
  }
  return result;
}

uint64_t physx::PxTaskMgr::addReference(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 88));
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)(v3 + 112) + 24 * a2 + 8), 1u);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v4 = *(pthread_mutex_t **)(v3 + 88);
    return pthread_mutex_unlock(v4);
  }
  return this;
}

uint64_t physx::PxTaskMgr::decrReference(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 88));
  }
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(v3 + 112) + 24 * a2 + 8), 0xFFFFFFFF) == 1) {
    this = physx::PxTaskMgr::dispatchTask((pthread_mutex_t **)v3, a2);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v4 = *(pthread_mutex_t **)(v3 + 88);
    return pthread_mutex_unlock(v4);
  }
  return this;
}

uint64_t physx::PxTaskMgr::getReference(physx::PxTaskMgr *this, unsigned int a2)
{
  return *(unsigned int *)(*((void *)this + 14) + 24 * a2 + 8);
}

uint64_t physx::PxTaskMgr::setCpuDispatcher(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t physx::PxTaskMgr::getCpuDispatcher(physx::PxTaskMgr *this)
{
  return *((void *)this + 2);
}

uint64_t physx::shdfnd::Array<physx::PxTaskDepTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskDepTableRow>::getName() [T = physx::PxTaskDepTableRow]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    long long v8 = (void *)result;
  }
  else
  {
    long long v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    long long v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<char const* const,unsigned int>,char const*,physx::shdfnd::Hash<char const*>,physx::shdfnd::internal::HashMapBase<char const*,unsigned int,physx::shdfnd::Hash<char const*>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    long long v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    long long v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 8);
    do
    {
      unsigned int v17 = *(unsigned char **)(v16 + 16 * v15);
      int v18 = *v17;
      if (*v17)
      {
        float v19 = v17 + 1;
        int v20 = 5381;
        do
        {
          int v20 = (33 * v20) ^ v18;
          int v21 = *v19++;
          int v18 = v21;
        }
        while (v21);
      }
      else
      {
        int v20 = 5381;
      }
      unsigned int v22 = v20 & (v3 - 1);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v22];
      *(_DWORD *)&v11[4 * v22] = v15;
      uint64_t v23 = &v13[16 * v15];
      *(void *)uint64_t v23 = v17;
      *((_DWORD *)v23 + 2) = *(_DWORD *)(v16 + 16 * v15++ + 8);
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTaskTableRow,physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTaskTableRow>::getName() [T = physx::PxTaskTableRow]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 24 * v9;
    long long v11 = *(long long **)v3;
    unint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      *(void *)(v12 + 16) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      v12 += 24;
      long long v11 = (long long *)((char *)v11 + 24);
    }
    while (v12 < v10);
    unsigned int v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = v8 + 24 * v14;
  long long v16 = *a2;
  *(void *)(v15 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *REMaterialRenderStateArrayComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t REMaterialRenderStateArrayComponentClear(uint64_t this)
{
  *(void *)(this + 48) = 0;
  ++*(_DWORD *)(this + 56);
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMaterialRenderStateArrayComponentSize(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t REMaterialRenderStateArrayComponentResize(uint64_t a1, unint64_t a2)
{
  re::DynamicArray<re::MaterialRenderFlags>::resize((void *)(a1 + 32), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

uint64_t REMaterialRenderStateArrayComponentSetTriangleFillModeAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6 = *((void *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v6 = *((void *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = v7 + 18 * a2;
  int v10 = *(unsigned __int8 *)(v8 + 4);
  unsigned int v9 = (unsigned char *)(v8 + 4);
  if (!v10) {
    unsigned char *v9 = 1;
  }
  *(unsigned char *)(v7 + 18 * a2 + 5) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetTriangleFillModeAtIndex(void *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = a1[8];
  if (a3) {
    BOOL v8 = *(unsigned char *)(v7 + 18 * a2 + 4) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t result = !v8;
  if (!v8) {
    *a3 = *(unsigned __int8 *)(v7 + 18 * a2 + 5);
  }
  return result;
}

BOOL REMaterialRenderStateArrayComponentHasStateSet(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[6];
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v4 = a1[6];
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v5 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(a1[8] + 18 * a2));
  if (HIDWORD(v5)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  return !v6;
}

uint64_t REMaterialRenderStateArrayComponentSetCullModeAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6 = *((void *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v6 = *((void *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = v7 + 18 * a2;
  int v10 = *(unsigned __int8 *)(v8 + 2);
  unsigned int v9 = (unsigned char *)(v8 + 2);
  if (!v10) {
    unsigned char *v9 = 1;
  }
  *(unsigned char *)(v7 + 18 * a2 + 3) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetCullModeAtIndex(void *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = a1[8];
  if (a3) {
    BOOL v8 = *(unsigned char *)(v7 + 18 * a2 + 2) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t result = !v8;
  if (!v8) {
    *a3 = *(unsigned __int8 *)(v7 + 18 * a2 + 3);
  }
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearTriangleFillModeAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4 = *((void *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v4 = *((void *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *((void *)this + 8) + 18 * a2;
  int v7 = *(unsigned __int8 *)(v5 + 4);
  unint64_t v6 = (unsigned char *)(v5 + 4);
  if (v7) {
    *unint64_t v6 = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentClearCullModeAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4 = *((void *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v4 = *((void *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *((void *)this + 8) + 18 * a2;
  int v7 = *(unsigned __int8 *)(v5 + 2);
  unint64_t v6 = (unsigned char *)(v5 + 2);
  if (v7) {
    *unint64_t v6 = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentSetReadsDepthAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6 = *((void *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v6 = *((void *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = v7 + 18 * a2;
  int v10 = *(unsigned __int8 *)(v8 + 12);
  unsigned int v9 = (unsigned char *)(v8 + 12);
  if (!v10) {
    unsigned char *v9 = 1;
  }
  *(unsigned char *)(v7 + 18 * a2 + 13) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetReadsDepthAtIndex(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = a1[8];
  if (a3) {
    BOOL v8 = *(unsigned char *)(v7 + 18 * a2 + 12) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t result = !v8;
  if (!v8) {
    *a3 = *(unsigned char *)(v7 + 18 * a2 + 13);
  }
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearReadsDepthAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4 = *((void *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v4 = *((void *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *((void *)this + 8) + 18 * a2;
  int v7 = *(unsigned __int8 *)(v5 + 12);
  unint64_t v6 = (unsigned char *)(v5 + 12);
  if (v7) {
    *unint64_t v6 = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentSetWritesDepthAtIndex(re::ecs2::Component *this, unint64_t a2, char a3)
{
  unint64_t v6 = *((void *)this + 6);
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v6 = *((void *)this + 6);
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = v7 + 18 * a2;
  int v10 = *(unsigned __int8 *)(v8 + 10);
  unsigned int v9 = (unsigned char *)(v8 + 10);
  if (!v10) {
    unsigned char *v9 = 1;
  }
  *(unsigned char *)(v7 + 18 * a2 + 11) = a3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REMaterialRenderStateArrayComponentGetWritesDepthAtIndex(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = a1[6];
  if (v6 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize(a1 + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
    unint64_t v6 = a1[6];
  }
  if (v6 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = a1[8];
  if (a3) {
    BOOL v8 = *(unsigned char *)(v7 + 18 * a2 + 10) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t result = !v8;
  if (!v8) {
    *a3 = *(unsigned char *)(v7 + 18 * a2 + 11);
  }
  return result;
}

uint64_t REMaterialRenderStateArrayComponentClearWritesDepthAtIndex(re::ecs2::Component *this, unint64_t a2)
{
  unint64_t v4 = *((void *)this + 6);
  if (v4 <= a2)
  {
    re::DynamicArray<re::MaterialRenderFlags>::resize((void *)this + 4, a2 + 1);
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    unint64_t v4 = *((void *)this + 6);
  }
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *((void *)this + 8) + 18 * a2;
  int v7 = *(unsigned __int8 *)(v5 + 10);
  unint64_t v6 = (unsigned char *)(v5 + 10);
  if (v7) {
    *unint64_t v6 = 0;
  }
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
}

uint64_t REPbrMaterialParametersGetID(uint64_t a1)
{
  return *(void *)(a1 + 296);
}

uint64_t REPbrMaterialParametersSetColorTint(uint64_t a1, int a2, int8x16_t a3)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)a3.i32 == *(float *)(v4 + 368)
    && *(float *)&a3.i32[1] == *(float *)(v4 + 372)
    && (int32x2_t v5 = vceq_f32((float32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), *(float32x2_t *)(v4 + 376)), (v5.i8[0] & 1) != 0)
    && (v5.i8[4] & 1) != 0
    && *(unsigned __int8 *)(v4 + 384) == a2)
  {
    int v6 = *(_DWORD *)(v4 + 520);
  }
  else
  {
    *(int8x16_t *)(v4 + 368) = a3;
    *(unsigned char *)(v4 + 384) = a2;
    int v6 = *(_DWORD *)(v4 + 520) | 1;
  }
  int v7 = *(_DWORD *)(v4 + 516);
  *(_DWORD *)(v4 + 516) = v7 | 1;
  *(_DWORD *)(v4 + 520) = v7 | v6;
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearColorTint(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFE;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetColorTint(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v6 = *(_DWORD *)(v5 + 516);
  if (v6)
  {
    char v7 = *(unsigned char *)(v5 + 384);
    *a2 = *(_OWORD *)(v5 + 368);
    *a3 = v7;
  }
  return v6 & 1;
}

uint64_t REPbrMaterialParametersSetColorTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v3 + 32) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetColorTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 32);
}

uint64_t REPbrMaterialParametersSetAmbientOcclusionTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v3 + 56) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAmbientOcclusionTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 56);
}

uint64_t REPbrMaterialParametersSetMetallicScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 388) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 388) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 2;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 2;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearMetallicScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFD;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetMetallicScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 2) != 0) {
    *a2 = *(_DWORD *)(v3 + 388);
  }
  return (v4 >> 1) & 1;
}

uint64_t REPbrMaterialParametersSetMetallicTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 104);
  *(_OWORD *)(v3 + 104) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetMetallicTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 104);
}

uint64_t REPbrMaterialParametersSetRoughnessScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 396) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 396) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 8;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 8;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearRoughnessScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFF7;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetRoughnessScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 8) != 0) {
    *a2 = *(_DWORD *)(v3 + 396);
  }
  return (v4 >> 3) & 1;
}

uint64_t REPbrMaterialParametersSetRoughnessTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 128);
  *(_OWORD *)(v3 + 128) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 144);
  *(void *)(v3 + 144) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetRoughnessTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 128);
}

uint64_t REPbrMaterialParametersSetEmissiveColor(uint64_t a1, unsigned int a2, int8x16_t a3)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5.i64[0] = a3.u32[1];
  v5.i64[1] = a2;
  int32x2_t v6 = vzip1_s32(*(int32x2_t *)a3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  int8x16_t v8 = vorrq_s8((int8x16_t)vshlq_n_s64(v5, 0x20uLL), v7);
  re::PbrMaterialParameters::setValue<re::ColorGamut3F>(v4 + 32, v4 + 400, v8.i64[0], v8.i64[1], 4);
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearEmissiveColor(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFEF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetEmissiveColor(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v7 = *(_DWORD *)(v5 + 516);
  if ((v7 & 0x10) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 408);
    *(void *)&long long v6 = *(void *)(v5 + 400);
    DWORD2(v6) = v8;
    *a2 = v6;
    *a3 = BYTE4(v8);
  }
  return (v7 >> 4) & 1;
}

uint64_t REPbrMaterialParametersSetEmissiveScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 416) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 416) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x20;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x20;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearEmissiveScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFDF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetEmissiveScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x20) != 0) {
    *a2 = *(_DWORD *)(v3 + 416);
  }
  return (v4 >> 5) & 1;
}

uint64_t REPbrMaterialParametersSetEmissiveTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v3 + 80) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 96);
  *(void *)(v3 + 96) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetEmissiveTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 80);
}

uint64_t REPbrMaterialParametersSetSpecularScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 392) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 392) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 4;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 4;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearSpecularScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFFFB;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetSpecularScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 4) != 0) {
    *a2 = *(_DWORD *)(v3 + 392);
  }
  return (v4 >> 2) & 1;
}

uint64_t REPbrMaterialParametersSetSpecularTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 152);
  *(_OWORD *)(v3 + 152) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 168);
  *(void *)(v3 + 168) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetSpecularTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 152);
}

uint64_t REPbrMaterialParametersSetOpacity(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 380) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 380) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 1;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 1;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetOpacity(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v4 = *(_DWORD *)(v3 + 516);
  if (v4) {
    *a2 = *(_DWORD *)(v3 + 380);
  }
  return v4 & 1;
}

uint64_t REPbrMaterialParametersSetOpacityTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 200);
  *(_OWORD *)(v3 + 200) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 216);
  *(void *)(v3 + 216) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetOpacityTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 200);
}

uint64_t REPbrMaterialParametersGetBlendingType(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 512);
}

uint64_t REPbrMaterialParametersHasClearcoat(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 513);
}

uint64_t REPbrMaterialParametersIsAnisotropic(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 514);
}

uint64_t REPbrMaterialParametersHasSheen(uint64_t a1)
{
  return *(unsigned __int8 *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 515);
}

uint64_t REPbrMaterialParametersSetClearcoatScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 424) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 4physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x80;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x80;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearClearcoatScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFF7F;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetClearcoatScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x80) != 0) {
    *a2 = *(_DWORD *)(v3 + 424);
  }
  return (v4 >> 7) & 1;
}

uint64_t REPbrMaterialParametersSetClearcoatTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 296);
  *(_OWORD *)(v3 + 296) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 312);
  *(void *)(v3 + 312) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 296);
}

uint64_t REPbrMaterialParametersSetClearcoatRoughnessScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 428) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 428) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x100;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x100;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearClearcoatRoughnessScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFEFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetClearcoatRoughnessScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x100) != 0) {
    *a2 = *(_DWORD *)(v3 + 428);
  }
  return (v4 >> 8) & 1;
}

uint64_t REPbrMaterialParametersSetClearcoatRoughnessTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 272);
  *(_OWORD *)(v3 + 272) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 288);
  *(void *)(v3 + 288) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatRoughnessTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 272);
}

uint64_t REPbrMaterialParametersSetClearcoatNormalTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)(v3 + 344) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 360);
  *(void *)(v3 + 360) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetClearcoatNormalTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 344);
}

uint64_t REPbrMaterialParametersSetAnisotropyLevelScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 432) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 432) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x200;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x200;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearAnisotropyLevelScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFDFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetAnisotropyLevelScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x200) != 0) {
    *a2 = *(_DWORD *)(v3 + 432);
  }
  return (v4 >> 9) & 1;
}

uint64_t REPbrMaterialParametersSetAnisotropyLevelTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 224);
  *(_OWORD *)(v3 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 240);
  *(void *)(v3 + 240) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAnisotropyLevelTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 224);
}

uint64_t REPbrMaterialParametersSetAnisotropyAngleScale(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 436) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 436) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x400;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x400;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersClearAnisotropyAngleScale(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFFBFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetAnisotropyAngleScale(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x400) != 0) {
    *a2 = *(_DWORD *)(v3 + 436);
  }
  return (v4 >> 10) & 1;
}

uint64_t REPbrMaterialParametersSetAnisotropyAngleTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 248);
  *(_OWORD *)(v3 + 248) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 264);
  *(void *)(v3 + 264) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetAnisotropyAngleTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 248);
}

uint64_t REPbrMaterialParametersSetSheenColorTint(uint64_t a1, unsigned int a2, int8x16_t a3)
{
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5.i64[0] = a3.u32[1];
  v5.i64[1] = a2;
  int32x2_t v6 = vzip1_s32(*(int32x2_t *)a3.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL));
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  int8x16_t v8 = vorrq_s8((int8x16_t)vshlq_n_s64(v5, 0x20uLL), v7);
  re::PbrMaterialParameters::setValue<re::ColorGamut3F>(v4 + 32, v4 + 440, v8.i64[0], v8.i64[1], 11);
  return re::ecs2::Component::enqueueMarkDirty(v4);
}

uint64_t REPbrMaterialParametersClearSheenColorTint(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFF7FF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetSheenColorTint(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  uint64_t v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v7 = *(_DWORD *)(v5 + 516);
  if ((v7 & 0x800) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 448);
    *(void *)&long long v6 = *(void *)(v5 + 440);
    DWORD2(v6) = v8;
    *a2 = v6;
    *a3 = BYTE4(v8);
  }
  return (v7 >> 11) & 1;
}

uint64_t REPbrMaterialParametersSetSheenColorTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 320);
  *(_OWORD *)(v3 + 320) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 336);
  *(void *)(v3 + 336) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetSheenColorTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 320);
}

uint64_t REPbrMaterialParametersSetUVTransform0(uint64_t a1, float32x4_t a2)
{
  int v2 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v2[29], a2)) & 0x80000000) != 0)
  {
    int v3 = v2[32].i32[2];
  }
  else
  {
    v2[29] = a2;
    int v3 = v2[32].i32[2] | 0x1000;
  }
  __int32 v4 = v2[32].i32[1];
  v2[32].i32[1] = v4 | 0x1000;
  v2[32].i32[2] = v4 | v3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v2);
}

uint64_t REPbrMaterialParametersClearUVTransform0(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFEFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVTransform0(uint64_t a1, void *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x1000) != 0)
  {
    uint64_t v5 = *(void *)(v3 + 472);
    *a2 = *(void *)(v3 + 464);
    a2[1] = v5;
  }
  return (v4 >> 12) & 1;
}

uint64_t REPbrMaterialParametersSetUVOffset0(uint64_t a1, float32x2_t a2)
{
  uint64_t v3 = (float32x2_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint32x2_t v4 = (uint32x2_t)vceq_f32(v3[62], a2);
  if ((vpmin_u32(v4, v4).u32[0] & 0x80000000) != 0)
  {
    int v5 = v3[65].i32[0];
  }
  else
  {
    v3[62] = a2;
    int v5 = v3[65].i32[0] | 0x4000;
  }
  __int32 v6 = v3[64].i32[1];
  v3[64].i32[1] = v6 | 0x4000;
  v3[65].i32[0] = v6 | v5;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

uint64_t REPbrMaterialParametersClearUVOffset0(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFBFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVOffset0(uint64_t a1, void *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x4000) != 0) {
    *a2 = *(void *)(v3 + 496);
  }
  return (v4 >> 14) & 1;
}

uint64_t REPbrMaterialParametersSetUVTransform1(uint64_t a1, float32x4_t a2)
{
  int v2 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v2[30], a2)) & 0x80000000) != 0)
  {
    int v3 = v2[32].i32[2];
  }
  else
  {
    v2[30] = a2;
    int v3 = v2[32].i32[2] | 0x2000;
  }
  __int32 v4 = v2[32].i32[1];
  v2[32].i32[1] = v4 | 0x2000;
  v2[32].i32[2] = v4 | v3;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v2);
}

uint64_t REPbrMaterialParametersClearUVTransform1(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFFDFFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVTransform1(uint64_t a1, void *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x2000) != 0)
  {
    uint64_t v5 = *(void *)(v3 + 488);
    *a2 = *(void *)(v3 + 480);
    a2[1] = v5;
  }
  return (v4 >> 13) & 1;
}

uint64_t REPbrMaterialParametersSetUVOffset1(uint64_t a1, float32x2_t a2)
{
  uint64_t v3 = (float32x2_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint32x2_t v4 = (uint32x2_t)vceq_f32(v3[63], a2);
  if ((vpmin_u32(v4, v4).u32[0] & 0x80000000) != 0)
  {
    int v5 = v3[65].i32[0];
  }
  else
  {
    v3[63] = a2;
    int v5 = v3[65].i32[0] | 0x8000;
  }
  __int32 v6 = v3[64].i32[1];
  v3[64].i32[1] = v6 | 0x8000;
  v3[65].i32[0] = v6 | v5;
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)v3);
}

uint64_t REPbrMaterialParametersClearUVOffset1(uint64_t a1)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v2 = *(_DWORD *)(result + 516);
  *(_DWORD *)(result + 516) = v2 & 0xFFFF7FFF;
  *(_DWORD *)(result + 520) |= v2;
  return result;
}

uint64_t REPbrMaterialParametersGetUVOffset1(uint64_t a1, void *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x8000) != 0) {
    *a2 = *(void *)(v3 + 504);
  }
  return (v4 >> 15) & 1;
}

uint64_t REPbrMaterialParametersSetNormalTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v7);
  long long v4 = *(_OWORD *)(v3 + 176);
  *(_OWORD *)(v3 + 176) = v7;
  long long v7 = v4;
  uint64_t v5 = *(void *)(v3 + 192);
  *(void *)(v3 + 192) = v8;
  uint64_t v8 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetNormalTexture(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 176);
}

uint64_t REPbrMaterialParametersGetOpacityThreshold(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  unsigned int v4 = *(_DWORD *)(v3 + 516);
  if ((v4 & 0x40) != 0) {
    *a2 = *(_DWORD *)(v3 + 420);
  }
  return (v4 >> 6) & 1;
}

uint64_t REPbrMaterialParametersSetOpacityThreshold(uint64_t a1, float a2)
{
  uint64_t v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (*(float *)(v3 + 420) == a2)
  {
    int v4 = *(_DWORD *)(v3 + 520);
  }
  else
  {
    *(float *)(v3 + 420) = a2;
    int v4 = *(_DWORD *)(v3 + 520) | 0x40;
  }
  int v5 = *(_DWORD *)(v3 + 516);
  *(_DWORD *)(v3 + 516) = v5 | 0x40;
  *(_DWORD *)(v3 + 520) = v5 | v4;
  return re::ecs2::Component::enqueueMarkDirty(v3);
}

uint64_t REPbrMaterialParametersGetMaterialAsset(uint64_t a1)
{
  return *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 528);
}

uint64_t re::PbrMaterialParameters::setValue<re::ColorGamut3F>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v6 = *(float *)a2 == *(float *)&a3 && *(float *)(a2 + 4) == *((float *)&a3 + 1) && *(float *)(a2 + 8) == *(float *)&a4;
  if (v6 && *(unsigned __int8 *)(a2 + 12) == BYTE4(a4))
  {
    int v7 = *(_DWORD *)(result + 488);
    int v8 = 1 << a5;
  }
  else
  {
    *(void *)a2 = a3;
    *(_DWORD *)(a2 + 8) = a4;
    *(unsigned char *)(a2 + 12) = BYTE4(a4);
    int v8 = 1 << a5;
    int v7 = *(_DWORD *)(result + 488) | (1 << a5);
  }
  int v9 = *(_DWORD *)(result + 484);
  *(_DWORD *)(result + 484) = v9 | v8;
  *(_DWORD *)(result + 488) = v9 | v7;
  return result;
}

void *REAudioMixGroupsComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

unint64_t REAudioMixGroupsComponentCreateMixGroupID()
{
  for (__buf = 0; __buf < 0x3E8; unint64_t result = __buf)
    arc4random_buf(&__buf, 8uLL);
  return result;
}

BOOL REAudioMixGroupsComponentHasGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v3) != 0;
}

void REAudioMixGroupsComponentUpdateGroup(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2, char a3, float a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  uint64_t v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, &v9);
  if (v7)
  {
    *(float *)(v7 + 104) = a4;
    *(unsigned char *)(v7 + 88) = a3;
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    int v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v9;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentUpdateGroup could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentUpdateGroupGain(re::ecs2::AudioMixGroupsComponent *a1, uint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v9 = a2;
  uint64_t v5 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, &v9);
  if (v5)
  {
    float v6 = 15.0;
    if (a3 <= 15.0) {
      float v6 = a3;
    }
    float v7 = fmaxf(v6, -60.0);
    *(float *)(v5 + 112) = v7;
    *(float *)(v5 + 116) = v7;
    *(_DWORD *)(v5 + 108) = 0;
    *(_DWORD *)(v5 + 100) = 0;
    ++*(_DWORD *)(v5 + 124);
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    int v8 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v9;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentUpdateGroupGain could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentFadeGroup(re::ecs2::AudioMixGroupsComponent *a1, unint64_t a2, float a3, double a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = a2;
  uint64_t v7 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 32, (uint64_t *)&v11);
  if (v7)
  {
    uint64_t v8 = v7;
    BOOL isMixGroupGainDirty = re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(a1, v11);
    re::AudioMixGroup::fadeToGainWithDuration(v8, a3, a4, isMixGroupGainDirty);
    re::ecs2::AudioMixGroupsComponent::markDirtyAndMarkDirtyForNetwork(a1);
  }
  else
  {
    int v10 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v13 = v11;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentFadeGroup could not find a group with id %llu.", buf, 0xCu);
    }
  }
}

void REAudioMixGroupsComponentRemoveGroup(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      if (*(void *)(v7 + 152 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 152 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(void *)(a1 + 48) + 152 * v6);
        uint64_t v10 = *(void *)(a1 + 48) + 152 * v6;
        int v11 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v10 + 8) & 0x80000000 | *(_DWORD *)(a1 + 68);
        --*(_DWORD *)(a1 + 60);
        *(_DWORD *)(a1 + 68) = v6;
        *(_DWORD *)(a1 + 72) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 152 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 152 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 152 * v8 + 8) = *(_DWORD *)(v7 + 152 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 152 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void REAudioMixGroupsComponentRemoveAllGroups(uint64_t a1)
{
}

CFTypeRef REAudioMixGroupsComponentGetGroups(uint64_t a1)
{
  unsigned int v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v55 = 0x7FFFFFFFLL;
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(_DWORD *)(a1 + 60) <= 3u) {
      signed int v3 = 3;
    }
    else {
      signed int v3 = *(_DWORD *)(a1 + 60);
    }
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)&v52, v1, v3);
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)&v52);
    unsigned int v4 = *(_DWORD *)(a1 + 60);
    if (DWORD2(v53) < v4) {
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v52, v4);
    }
    unint64_t v5 = *(unsigned int *)(a1 + 64);
    if (v5)
    {
      uint64_t v6 = 0;
      for (unint64_t i = 0; i < v5; ++i)
      {
        uint64_t v8 = *(void *)(a1 + 48);
        int v9 = (unint64_t *)(v8 + v6);
        if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
        {
          unint64_t v10 = *v9;
          unsigned int v11 = v55;
          unint64_t v12 = *v9 % DWORD2(v53);
          if (v55 == 0x7FFFFFFF)
          {
            unsigned int v11 = v54;
            unsigned int v13 = v54;
            if (v54 == DWORD2(v53))
            {
              re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v52, 2 * HIDWORD(v53));
              unsigned int v13 = v54;
              unint64_t v12 = v10 % DWORD2(v53);
            }
            unsigned int v54 = v13 + 1;
            uint64_t v14 = v53;
            int v15 = *(_DWORD *)(v53 + 152 * v11 + 8);
          }
          else
          {
            uint64_t v14 = v53;
            int v15 = *(_DWORD *)(v53 + 152 * v55 + 8);
            LODWORD(v55) = v15 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v14 + 152 * v11 + 8) = v15 | 0x80000000;
          *(_DWORD *)(v53 + 152 * v11 + 8) = *(_DWORD *)(v53 + 152 * v11 + 8) & 0x80000000 | *(_DWORD *)(*((void *)&v52 + 1) + 4 * v12);
          *(void *)(v53 + 152 * v11) = v10;
          *(void *)(v53 + 152 * v11 + 16) = v9[2];
          uint64_t v16 = v53 + 152 * v11;
          re::DynamicString::DynamicString((re::DynamicString *)(v16 + 24), (const re::DynamicString *)(v9 + 3));
          *(_OWORD *)(v16 + 56) = *(_OWORD *)(v8 + v6 + 56);
          re::DynamicArray<char const*>::DynamicArray(v16 + 72, (uint64_t *)(v8 + v6 + 72));
          long long v17 = *(_OWORD *)(v8 + v6 + 112);
          long long v18 = *(_OWORD *)(v8 + v6 + 128);
          *(void *)(v16 + 144) = *(void *)(v8 + v6 + 144);
          *(_OWORD *)(v16 + 112) = v17;
          *(_OWORD *)(v16 + 128) = v18;
          *(_DWORD *)(*((void *)&v52 + 1) + 4 * v12) = v11;
          ++HIDWORD(v53);
          unint64_t v5 = *(unsigned int *)(a1 + 64);
        }
        v6 += 152;
      }
    }
  }
  float v19 = [MEMORY[0x263EFF980] array];
  if (v54)
  {
    uint64_t v20 = 0;
    int v21 = (int *)(v53 + 8);
    while (1)
    {
      int v22 = *v21;
      v21 += 38;
      if (v22 < 0) {
        break;
      }
      if (v54 == ++v20)
      {
        LODWORD(v20) = v54;
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if (v54 != v20)
  {
    uint64_t v23 = v20;
    uint64_t v24 = v53;
    do
    {
      uint64_t v25 = v24 + 152 * v23;
      re::DynamicString::DynamicString((re::DynamicString *)&v42, (const re::DynamicString *)(v25 + 24));
      long long v45 = *(_OWORD *)(v25 + 56);
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v46, (uint64_t *)(v25 + 72));
      long long v26 = *(_OWORD *)(v25 + 112);
      long long v27 = *(_OWORD *)(v25 + 128);
      uint64_t v51 = *(void *)(v25 + 144);
      long long v49 = v26;
      long long v50 = v27;
      int v28 = [MEMORY[0x263EFF9A0] dictionary];
      if (v43) {
        int v29 = *(unsigned char **)&v44[7];
      }
      else {
        int v29 = v44;
      }
      uint64_t v30 = [NSString stringWithCString:v29 encoding:4];
      [v28 setObject:v30 forKey:@"Name"];

      uint64_t v31 = [NSNumber numberWithUnsignedInteger:(void)v45];
      [v28 setObject:v31 forKey:@"ID"];

      LODWORD(v32) = HIDWORD(v50);
      uint64_t v33 = [NSNumber numberWithFloat:v32];
      [v28 setObject:v33 forKey:@"Gain"];

      LODWORD(v34) = v50;
      uint64_t v35 = [NSNumber numberWithFloat:v34];
      [v28 setObject:v35 forKey:@"Speed"];

      long long v36 = [NSNumber numberWithBool:v49];
      [v28 setObject:v36 forKey:@"MuteState"];

      [v19 addObject:v28];
      if (v46[0])
      {
        if (v48) {
          (*(void (**)(void))(*(void *)v46[0] + 40))();
        }
        uint64_t v48 = 0;
        memset(v46, 0, sizeof(v46));
        ++v47;
      }
      if (v42 && (v43 & 1) != 0) {
        (*(void (**)(void))(*(void *)v42 + 40))();
      }
      uint64_t v24 = v53;
      if (v54 <= (int)v20 + 1) {
        unsigned int v37 = v20 + 1;
      }
      else {
        unsigned int v37 = v54;
      }
      while (1)
      {
        uint64_t v23 = (v20 + 1);
        if (v37 - 1 == v20) {
          break;
        }
        LODWORD(v20) = v20 + 1;
        unsigned int v38 = v23;
        if ((*(_DWORD *)(v53 + 152 * v23 + 8) & 0x80000000) != 0) {
          goto LABEL_42;
        }
      }
      unsigned int v38 = v37;
LABEL_42:
      LODWORD(v20) = v38;
    }
    while (v54 != v38);
  }
  id v39 = v19;
  CFTypeRef v40 = CFAutorelease(v39);

  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v52);
  return v40;
}

CFTypeRef REAudioMixGroupsComponentGetGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v17);
  if (v2)
  {
    uint64_t v3 = v2;
    unsigned int v4 = [MEMORY[0x263EFF9A0] dictionary];
    if (*(unsigned char *)(v3 + 8)) {
      uint64_t v5 = *(void *)(v3 + 16);
    }
    else {
      uint64_t v5 = v3 + 9;
    }
    uint64_t v8 = [NSString stringWithCString:v5 encoding:4];
    [v4 setObject:v8 forKey:@"Name"];

    int v9 = [NSNumber numberWithUnsignedInteger:*(void *)(v3 + 32)];
    [v4 setObject:v9 forKey:@"ID"];

    LODWORD(v10) = *(_DWORD *)(v3 + 116);
    unsigned int v11 = [NSNumber numberWithFloat:v10];
    [v4 setObject:v11 forKey:@"Gain"];

    LODWORD(v12) = *(_DWORD *)(v3 + 104);
    unsigned int v13 = [NSNumber numberWithFloat:v12];
    [v4 setObject:v13 forKey:@"Speed"];

    uint64_t v14 = [NSNumber numberWithBool:*(unsigned __int8 *)(v3 + 88)];
    [v4 setObject:v14 forKey:@"MuteState"];

    id v15 = v4;
    CFTypeRef v7 = CFAutorelease(v15);
  }
  else
  {
    uint64_t v6 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v19 = v17;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroup could not find a group with id %llu.", buf, 0xCu);
    }
    return 0;
  }
  return v7;
}

float REAudioMixGroupsComponentGetGroupFadeTargetGain(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2) {
    return *(float *)(v2 + 116);
  }
  unsigned int v4 = *re::audioLogObjects(0);
  float v3 = -1.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroupFadeTargetGain could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

float REAudioMixGroupsComponentGetGroupFadeDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2) {
    return *(float *)(v2 + 108);
  }
  unsigned int v4 = *re::audioLogObjects(0);
  float v3 = -1.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsComponentGetGroupFadeDuration could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

float REAudioMixGroupsGetGroupSpeed(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v6);
  if (v2) {
    return *(float *)(v2 + 104);
  }
  unsigned int v4 = *re::audioLogObjects(0);
  float v3 = 0.0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v6;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsGetGroupSpeed could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
  }
  return v3;
}

BOOL REAudioMixGroupsGetGroupMuteState(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  uint64_t v2 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 32, &v5);
  if (v2) {
    return *(unsigned char *)(v2 + 88) != 0;
  }
  unsigned int v4 = *re::audioLogObjects(0);
  BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v7 = v5;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "REAudioMixGroupsGetGroupMuteState could not find a group with id %llu. The returned value is meaningless.", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t REColorManagerGetWorkingColorGamut(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t REColorManagerGetWorkingColorSpace(unsigned __int8 *a1)
{
  return re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(*a1);
}

uint64_t REColorManagerGetLDRColorSpaceForColorGamut(int a1)
{
  return re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(a1, 0);
}

uint64_t REColorManagerGetSRGBLDRColorSpaceForColorGamut(int a1)
{
  return re::ColorHelpers::getCGColorSpaceForLDRFromColorGamut(a1, 1);
}

uint64_t REColorManagerGetTargetDisplayColorGamut(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

double REColorManagerSetWorkingColorGamut(unsigned __int8 *a1, int a2)
{
  if (*a1 != a2)
  {
    *a1 = a2;
    re::ColorHelpers::computeGamutTransformMatrix(a2, a1[1], (uint64_t)v5);
    long long v3 = v5[1];
    *((_OWORD *)a1 + 1) = v5[0];
    *((_OWORD *)a1 + 2) = v3;
    double result = *(double *)&v6;
    *((_OWORD *)a1 + 3) = v6;
  }
  return result;
}

double REColorManagerSetTargetDisplayColorGamut(unsigned __int8 *a1, unsigned int a2)
{
  if (a1[1] != a2)
  {
    a1[1] = a2;
    re::ColorHelpers::computeGamutTransformMatrix(*a1, a2, (uint64_t)v5);
    long long v3 = v5[1];
    *((_OWORD *)a1 + 1) = v5[0];
    *((_OWORD *)a1 + 2) = v3;
    double result = *(double *)&v6;
    *((_OWORD *)a1 + 3) = v6;
  }
  return result;
}

uint64_t REColorManagerSetVirtualImmersion(uint64_t result, float a2)
{
  *(float *)(result + 164) = a2;
  return result;
}

float REColorManagerGetVirtualImmersion(uint64_t a1)
{
  return *(float *)(a1 + 164);
}

uint64_t REColorManagerSetVirtualAmbient(uint64_t result, float a2)
{
  *(float *)(result + 168) = a2;
  return result;
}

float REColorManagerGetVirtualAmbient(uint64_t a1)
{
  return *(float *)(a1 + 168);
}

float REColorManagerGetImageStatisticsMin(uint64_t a1)
{
  return *(float *)(a1 + 148);
}

float REColorManagerGetImageStatisticsMax(uint64_t a1)
{
  return *(float *)(a1 + 152);
}

float REColorManagerGetImageStatisticsMean(uint64_t a1)
{
  return *(float *)(a1 + 156);
}

float REColorManagerGetImageStatisticsStdDev(uint64_t a1)
{
  return *(float *)(a1 + 160);
}

double RECGColorToColorGamut(CGColorRef color, _OWORD *a2, unsigned char *a3)
{
  re::ColorGamut4F::ColorGamut4F((float32x2_t *)&v6, color, 1);
  double result = *(double *)&v6;
  *a2 = v6;
  *a3 = v7;
  return result;
}

CGColorRef RECreateCGColorFromColorGamut(char a1, __n128 a2)
{
  __n128 v3 = a2;
  char v4 = a1;
  return re::ColorGamut4F::createCGColor((float32x2_t *)&v3);
}

float REColorManagerGetToeStrength(uint64_t a1)
{
  return *(float *)(a1 + 88);
}

double REColorManagerSetToeStrength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *(float *)long long v6 = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetToeLength(uint64_t a1)
{
  return *(float *)(a1 + 92);
}

double REColorManagerSetToeLength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 1) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderStrength(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

double REColorManagerSetShoulderStrength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 2) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderLength(uint64_t a1)
{
  return *(float *)(a1 + 100);
}

double REColorManagerSetShoulderLength(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v6 + 3) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetShoulderAngle(uint64_t a1)
{
  return *(float *)(a1 + 104);
}

double REColorManagerSetShoulderAngle(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *(float *)&long long v7 = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetGamma(uint64_t a1)
{
  return *(float *)(a1 + 108);
}

double REColorManagerSetGamma(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 1) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetContrast(uint64_t a1)
{
  return *(float *)(a1 + 112);
}

double REColorManagerSetContrast(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 2) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

float REColorManagerGetExposure(uint64_t a1)
{
  return *(float *)(a1 + 116);
}

double REColorManagerSetExposure(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = v4;
  v8[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)&v7 + 3) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)&v6, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetExposureCompensationEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

double REColorManagerSetExposureCompensationEnabled(uint64_t a1, char a2, const re::TonemapUserParameters *a3)
{
  long long v3 = *(_OWORD *)(a1 + 120);
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)(a1 + 132);
  LOBYTE(v7[0]) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a3).n128_u64[0];
  return result;
}

float REColorManagerGetExposureCompensationInputScalar(uint64_t a1)
{
  return *(float *)(a1 + 124);
}

double REColorManagerSetExposureCompensationInputScalar(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 104);
  v7[0] = *(_OWORD *)(a1 + 88);
  v7[1] = v5;
  v8[0] = v4;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v8 + 1) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v7, a4).n128_u64[0];
  return result;
}

float REColorManagerGetExposureCompensationTargetScalar(uint64_t a1)
{
  return *(float *)(a1 + 128);
}

double REColorManagerSetExposureCompensationTargetScalar(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 104);
  v7[0] = *(_OWORD *)(a1 + 88);
  v7[1] = v5;
  v8[0] = v4;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)(a1 + 132);
  *((float *)v8 + 2) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v7, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetRABEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 132);
}

double REColorManagerSetRABEnabled(uint64_t a1, char a2, const re::TonemapUserParameters *a3)
{
  v6[0] = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(a1 + 132);
  long long v3 = *(_OWORD *)(a1 + 104);
  v5[0] = *(_OWORD *)(a1 + 88);
  v5[1] = v3;
  BYTE12(v6[0]) = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v5, a3).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetSystemScalarMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

double REColorManagerSetSystemScalarMode(uint64_t a1, int a2, const re::TonemapUserParameters *a3)
{
  *(_OWORD *)&v6[12] = *(_OWORD *)(a1 + 132);
  long long v3 = *(_OWORD *)(a1 + 104);
  v5[0] = *(_OWORD *)(a1 + 88);
  v5[1] = v3;
  *(_OWORD *)long long v6 = *(_OWORD *)(a1 + 120);
  *(_DWORD *)&v6[16] = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v5, a3).n128_u64[0];
  return result;
}

float REColorManagerGetTargetSDRNits(uint64_t a1)
{
  return *(float *)(a1 + 140);
}

double REColorManagerSetTargetSDRNits(uint64_t a1, float a2, uint64_t a3, const re::TonemapUserParameters *a4)
{
  *(_OWORD *)&v7[12] = *(_OWORD *)(a1 + 132);
  long long v4 = *(_OWORD *)(a1 + 104);
  v6[0] = *(_OWORD *)(a1 + 88);
  v6[1] = v4;
  *(_OWORD *)long long v7 = *(_OWORD *)(a1 + 120);
  *(float *)&v7[20] = a2;
  *(void *)&double result = re::ColorManager::setTonemapUserParameters((re::ColorManager *)a1, (const re::TonemapUserParameters *)v6, a4).n128_u64[0];
  return result;
}

uint64_t REColorManagerGetTonemapLut(uint64_t a1, void *__dst, unint64_t a3)
{
  if (a3 < 0x1000) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 4096;
  memcpy(__dst, (const void *)(a1 + 176), 0x1000uLL);
  return v3;
}

uint64_t REColorManagerGetTonemapInverseLut(uint64_t a1, void *__dst, unint64_t a3)
{
  if (a3 < 0x1000) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 4096;
  memcpy(__dst, (const void *)(a1 + 4272), 0x1000uLL);
  return v3;
}

float REColorManagerSetAverageAREnvLightIntensity(uint64_t a1, float a2)
{
  float result = *(float *)(a1 + 12480) + (float)((float)(a2 - *(float *)(a1 + 12480)) * 0.05);
  *(float *)(a1 + 12480) = result;
  return result;
}

float REColorManagerGetAverageAREnvLightIntensity(uint64_t a1)
{
  return *(float *)(a1 + 12484);
}

void *REHierarchicalTintComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t REHierarchicalTintComponentSetTintAmount(float *a1, re::ecs2::Component *a2, float a3)
{
  a1[7] = a3;
  re::ecs2::NetworkComponent::markComponentDirty((re::ecs2::NetworkComponent *)a1, a2);
  return re::ecs2::Component::enqueueMarkDirty((uint64_t)a1);
}

float REHierarchicalTintComponentGetTintAmount(uint64_t a1)
{
  return *(float *)(a1 + 28);
}

uint64_t getRenderCallbacksComponent(re::ecs2::Scene *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v1 = re::ecs2::ComponentHelper::privateSceneDataEntity(a1, (re::ecs2::Scene *)1);
    if (v1)
    {
      uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (result) {
        return result;
      }
      uint64_t v3 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315138;
        long long v6 = "getRenderCallbacksComponent";
        long long v4 = "%s: invalid component\n";
LABEL_10:
        _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      uint64_t v3 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315138;
        long long v6 = "getRenderCallbacksComponent";
        long long v4 = "%s: invalid private scene entity\n";
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v3 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      long long v6 = "getRenderCallbacksComponent";
      long long v4 = "%s: invalid scene\n";
      goto LABEL_10;
    }
  }
  return 0;
}

id RERenderCallbacksPostProcessGetDevice(id *a1)
{
  if (a1) {
    id v1 = *a1;
  }
  else {
    id v1 = 0;
  }
  id v2 = v1;

  return v2;
}

id RERenderCallbacksPostProcessGetCommandBuffer(uint64_t a1)
{
  if (a1) {
    id v1 = *(id *)(a1 + 8);
  }
  else {
    id v1 = 0;
  }
  id v2 = v1;

  return v2;
}

id *RERenderCallbacksPostProcessGetSourceColorTexture(id *a1)
{
  if (a1) {
    a1 = (id *)a1[2];
  }
  id v1 = a1;
  id v2 = v1;
  if (v1) {

  }
  return v2;
}

id *RERenderCallbacksPostProcessGetSourceDepthTexture(id *a1)
{
  if (a1) {
    a1 = (id *)a1[3];
  }
  id v1 = a1;
  id v2 = v1;
  if (v1) {

  }
  return v2;
}

id *RERenderCallbacksPostProcessGetTargetColorTexture(id *a1)
{
  if (a1) {
    a1 = (id *)a1[4];
  }
  id v1 = a1;
  id v2 = v1;
  if (v1) {

  }
  return v2;
}

double RERenderCallbacksPostProcessGetSimulationTime(uint64_t a1)
{
  if (a1) {
    return *(float *)(a1 + 40);
  }
  else {
    return 0.0;
  }
}

__n128 RERenderCallbacksPostProcessGetProjection(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  if (!a1) {
    uint64_t v1 = MEMORY[0x263EF89A8];
  }
  return *(__n128 *)v1;
}

void RESceneSetPostProcessRenderCallback(re::ecs2::Scene *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
  {
    uint64_t v7 = RenderCallbacksComponent;
    uint64_t v8 = _Block_copy(v5);
    re::ObjCObject::operator=((void **)(v7 + 32), v8);

    re::ObjCObject::operator=((void **)(v7 + 40), v9);
  }
}

void *REScenePostProcessRenderCallbackAddOneOffCameraViewHandle(re::ecs2::Scene *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = (void *)getRenderCallbacksComponent(a1);
  if (result) {
    return re::DynamicArray<unsigned long>::add(result + 13, &v3);
  }
  return result;
}

uint64_t REScenePostProcessRenderCallbackAddCameraViewHandle(re::ecs2::Scene *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = getRenderCallbacksComponent(a1);
  if (result) {
    return re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(result + 56, &v3);
  }
  return result;
}

uint64_t REScenePostProcessRenderCallbackRemoveCameraViewHandle(re::ecs2::Scene *a1, unint64_t a2)
{
  uint64_t result = getRenderCallbacksComponent(a1);
  if (result)
  {
    unint64_t v4 = *(unsigned int *)(result + 80);
    if (v4)
    {
      unint64_t v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      unint64_t v6 = (v5 ^ (v5 >> 31)) % v4;
      uint64_t v7 = *(void *)(result + 64);
      uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
      if (v8 != 0x7FFFFFFF)
      {
        uint64_t v9 = *(void *)(result + 72);
        if (*(void *)(v9 + 24 * v8 + 16) == a2)
        {
          *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
          uint64_t v11 = *(void *)(result + 72);
          uint64_t v12 = v11 + 24 * v8;
          int v15 = *(_DWORD *)(v12 + 8);
          uint64_t v14 = (int *)(v12 + 8);
          int v13 = v15;
          if (v15 < 0)
          {
            *uint64_t v14 = v13 & 0x7FFFFFFF;
            uint64_t v11 = *(void *)(result + 72);
            int v13 = *(_DWORD *)(v11 + 24 * v8 + 8);
          }
          int v16 = *(_DWORD *)(result + 96);
          *(_DWORD *)(v11 + 24 * v8 + 8) = *(_DWORD *)(result + 92) | v13 & 0x80000000;
          --*(_DWORD *)(result + 84);
          *(_DWORD *)(result + 92) = v8;
          *(_DWORD *)(result + 96) = v16 + 1;
        }
        else
        {
          while (1)
          {
            unsigned int v10 = v8;
            LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
            if (v8 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v9 + 24 * v8 + 16) == a2)
            {
              *(_DWORD *)(v9 + 24 * v10 + 8) = *(_DWORD *)(v9 + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 24 * v8 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  return result;
}

void REScenePostProcessRenderCallbackClearCameraViewHandles(re::ecs2::Scene *a1)
{
  uint64_t RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
  {
    uint64_t v2 = RenderCallbacksComponent + 56;
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(v2);
  }
}

id *RESceneGetPostProcessRenderCallback(re::ecs2::Scene *a1)
{
  uint64_t RenderCallbacksComponent = (id *)getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent) {
    uint64_t RenderCallbacksComponent = (id *)RenderCallbacksComponent[5];
  }
  return RenderCallbacksComponent;
}

void RESceneSetPrepareWithDeviceRenderCallback(re::ecs2::Scene *a1, void *a2)
{
  aBlocuint64_t k = a2;
  uint64_t RenderCallbacksComponent = getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent)
  {
    uint64_t v4 = RenderCallbacksComponent;
    unint64_t v5 = _Block_copy(aBlock);
    re::ObjCObject::operator=((void **)(v4 + 48), v5);
  }
}

id *RESceneGetPrepareWithDeviceRenderCallback(re::ecs2::Scene *a1)
{
  uint64_t RenderCallbacksComponent = (id *)getRenderCallbacksComponent(a1);
  if (RenderCallbacksComponent) {
    uint64_t RenderCallbacksComponent = (id *)_Block_copy(RenderCallbacksComponent[6]);
  }
  return RenderCallbacksComponent;
}

uint64_t REBindPointCreateReferenceForEntity(re *a1, const char *a2)
{
  uint64_t result = REBindPointCreateReferenceForEntityString(a1, a2);
  if (!result)
  {
    uint64_t result = REBindPointCreateReferenceForEntityBool(a1, a2);
    if (!result)
    {
      uint64_t result = REBindPointCreateReferenceForEntityInt8(a1, a2);
      if (!result)
      {
        uint64_t result = REBindPointCreateReferenceForEntityUInt8(a1, a2);
        if (!result)
        {
          uint64_t result = REBindPointCreateReferenceForEntityInt16(a1, a2);
          if (!result)
          {
            uint64_t result = REBindPointCreateReferenceForEntityUInt16(a1, a2);
            if (!result)
            {
              uint64_t result = REBindPointCreateReferenceForEntityInt32(a1, a2);
              if (!result)
              {
                uint64_t result = REBindPointCreateReferenceForEntityUInt32(a1, a2);
                if (!result)
                {
                  uint64_t result = REBindPointCreateReferenceForEntityInt64(a1, a2);
                  if (!result)
                  {
                    uint64_t result = REBindPointCreateReferenceForEntityFloat(a1, a2);
                    if (!result)
                    {
                      uint64_t result = REBindPointCreateReferenceForEntityFloat2(a1, a2);
                      if (!result)
                      {
                        uint64_t result = REBindPointCreateReferenceForEntityFloat3(a1, a2);
                        if (!result)
                        {
                          uint64_t result = REBindPointCreateReferenceForEntityFloat4(a1, a2);
                          if (!result)
                          {
                            uint64_t result = REBindPointCreateReferenceForEntityDouble(a1, a2);
                            if (!result)
                            {
                              uint64_t result = REBindPointCreateReferenceForEntityDouble2(a1, a2);
                              if (!result)
                              {
                                uint64_t result = REBindPointCreateReferenceForEntityDouble3(a1, a2);
                                if (!result)
                                {
                                  uint64_t result = REBindPointCreateReferenceForEntityDouble4(a1, a2);
                                  if (!result)
                                  {
                                    uint64_t result = REBindPointCreateReferenceForEntityQuatF(a1, a2);
                                    if (!result)
                                    {
                                      return REBindPointCreateReferenceForEntitySRT(a1, a2);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForEntityString(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::DynamicString>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityBool(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<BOOL>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<unsigned char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<unsigned short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityUInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<unsigned int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityInt64(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<long long>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<float>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityFloat4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<double>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF58))
    {
      _MergedGlobals_518 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_26AF9FF58);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, _MergedGlobals_518, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF68))
    {
      qword_26AF9FF60 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_26AF9FF68);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, qword_26AF9FF60, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityDouble4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF78))
    {
      qword_26AF9FF70 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_26AF9FF78);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, qword_26AF9FF70, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityQuatF(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, re::introspect<re::Quaternion<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntitySRT(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, re::introspect<re::GenericSRT<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponent(re *a1, const char *a2)
{
  uint64_t result = REBindPointCreateReferenceForComponentString(a1, a2);
  if (!result)
  {
    uint64_t result = REBindPointCreateReferenceForComponentBool(a1, a2);
    if (!result)
    {
      uint64_t result = REBindPointCreateReferenceForComponentInt8(a1, a2);
      if (!result)
      {
        uint64_t result = REBindPointCreateReferenceForComponentUInt8(a1, a2);
        if (!result)
        {
          uint64_t result = REBindPointCreateReferenceForComponentInt16(a1, a2);
          if (!result)
          {
            uint64_t result = REBindPointCreateReferenceForComponentUInt16(a1, a2);
            if (!result)
            {
              uint64_t result = REBindPointCreateReferenceForComponentInt32(a1, a2);
              if (!result)
              {
                uint64_t result = REBindPointCreateReferenceForComponentUInt32(a1, a2);
                if (!result)
                {
                  uint64_t result = REBindPointCreateReferenceForComponentInt64(a1, a2);
                  if (!result)
                  {
                    uint64_t result = REBindPointCreateReferenceForComponentFloat(a1, a2);
                    if (!result)
                    {
                      uint64_t result = REBindPointCreateReferenceForComponentFloat2(a1, a2);
                      if (!result)
                      {
                        uint64_t result = REBindPointCreateReferenceForComponentFloat3(a1, a2);
                        if (!result)
                        {
                          uint64_t result = REBindPointCreateReferenceForComponentFloat4(a1, a2);
                          if (!result)
                          {
                            uint64_t result = REBindPointCreateReferenceForComponentDouble(a1, a2);
                            if (!result)
                            {
                              uint64_t result = REBindPointCreateReferenceForComponentDouble2(a1, a2);
                              if (!result)
                              {
                                uint64_t result = REBindPointCreateReferenceForComponentDouble3(a1, a2);
                                if (!result)
                                {
                                  uint64_t result = REBindPointCreateReferenceForComponentDouble4(a1, a2);
                                  if (!result)
                                  {
                                    uint64_t result = REBindPointCreateReferenceForComponentQuatF(a1, a2);
                                    if (!result)
                                    {
                                      return REBindPointCreateReferenceForComponentSRT(a1, a2);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForComponentString(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<re::DynamicString>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentBool(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<BOOL>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<unsigned char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<unsigned short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentUInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<unsigned int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentInt64(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<long long>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, (uint64_t)re::introspect<float>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentFloat4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPoint(v16, re::introspect<double>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF58))
    {
      _MergedGlobals_518 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_26AF9FF58);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, _MergedGlobals_518, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF68))
    {
      qword_26AF9FF60 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_26AF9FF68);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, qword_26AF9FF60, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentDouble4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF78))
    {
      qword_26AF9FF70 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_26AF9FF78);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, qword_26AF9FF70, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentQuatF(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, re::introspect<re::Quaternion<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentSRT(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPoint(v15, re::introspect<re::GenericSRT<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValues(re *a1, const char *a2)
{
  uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesString(a1, a2);
  if (!result)
  {
    uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesBool(a1, a2);
    if (!result)
    {
      uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesInt8(a1, a2);
      if (!result)
      {
        uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesUInt8(a1, a2);
        if (!result)
        {
          uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesInt16(a1, a2);
          if (!result)
          {
            uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesUInt16(a1, a2);
            if (!result)
            {
              uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesInt32(a1, a2);
              if (!result)
              {
                uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesUInt32(a1, a2);
                if (!result)
                {
                  uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesInt64(a1, a2);
                  if (!result)
                  {
                    uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesFloat(a1, a2);
                    if (!result)
                    {
                      uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesFloat2(a1, a2);
                      if (!result)
                      {
                        uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesFloat3(a1, a2);
                        if (!result)
                        {
                          uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesFloat4(a1, a2);
                          if (!result)
                          {
                            uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesDouble(a1, a2);
                            if (!result)
                            {
                              uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesDouble2(a1, a2);
                              if (!result)
                              {
                                uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesDouble3(a1, a2);
                                if (!result)
                                {
                                  uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesDouble4(a1, a2);
                                  if (!result)
                                  {
                                    uint64_t result = REBindPointCreateReferenceForEntityAnimatedValuesQuatF(a1, a2);
                                    if (!result)
                                    {
                                      return REBindPointCreateReferenceForEntityAnimatedValuesSRT(a1, a2);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesString(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::DynamicString>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesBool(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<BOOL>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<unsigned char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<unsigned short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesUInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<unsigned int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesInt64(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<long long>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<float>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesFloat4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<double>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF58))
    {
      _MergedGlobals_518 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_26AF9FF58);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, _MergedGlobals_518, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF68))
    {
      qword_26AF9FF60 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_26AF9FF68);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, qword_26AF9FF60, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesDouble4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF78))
    {
      qword_26AF9FF70 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_26AF9FF78);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, qword_26AF9FF70, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesQuatF(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, re::introspect<re::Quaternion<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForEntityAnimatedValuesSRT(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, re::introspect<re::GenericSRT<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValues(re *a1, const char *a2)
{
  uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesString(a1, a2);
  if (!result)
  {
    uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesBool(a1, a2);
    if (!result)
    {
      uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesInt8(a1, a2);
      if (!result)
      {
        uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesUInt8(a1, a2);
        if (!result)
        {
          uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesInt16(a1, a2);
          if (!result)
          {
            uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesUInt16(a1, a2);
            if (!result)
            {
              uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesInt32(a1, a2);
              if (!result)
              {
                uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesUInt32(a1, a2);
                if (!result)
                {
                  uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesInt64(a1, a2);
                  if (!result)
                  {
                    uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesFloat(a1, a2);
                    if (!result)
                    {
                      uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesFloat2(a1, a2);
                      if (!result)
                      {
                        uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesFloat3(a1, a2);
                        if (!result)
                        {
                          uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesFloat4(a1, a2);
                          if (!result)
                          {
                            uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesDouble(a1, a2);
                            if (!result)
                            {
                              uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesDouble2(a1, a2);
                              if (!result)
                              {
                                uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesDouble3(a1, a2);
                                if (!result)
                                {
                                  uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesDouble4(a1, a2);
                                  if (!result)
                                  {
                                    uint64_t result = REBindPointCreateReferenceForComponentAnimatedValuesQuatF(a1, a2);
                                    if (!result)
                                    {
                                      return REBindPointCreateReferenceForComponentAnimatedValuesSRT(a1, a2);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesString(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<re::DynamicString>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesBool(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<BOOL>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt8(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<unsigned char>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt16(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<unsigned short>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesUInt32(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<unsigned int>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesInt64(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<long long>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, (uint64_t)re::introspect<float>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector2<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector3<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesFloat4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, (uint64_t)re::introspect<re::Vector4<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  float v16[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v16);
    {
      re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v8);
    }
    v9[0] = (uint64_t)a2;
    v9[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v16, re::introspect<double>(void)::info, v9, (uint64_t)&v10);
    re::BindNode::deinit((re::BindNode *)v16);
    if (v13)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v10;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v11;
      *(void *)(v2 + 16) = v12;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v13;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      *(void *)(v2 + 40) = v15;
      uint64_t v15 = 0;
      ++v14;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v11);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble2(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF58, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF58))
    {
      _MergedGlobals_518 = re::introspect_Vector2D(0);
      __cxa_guard_release(&qword_26AF9FF58);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, _MergedGlobals_518, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble3(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF68))
    {
      qword_26AF9FF60 = re::introspect_Vector3D(0);
      __cxa_guard_release(&qword_26AF9FF68);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, qword_26AF9FF60, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesDouble4(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF9FF78))
    {
      qword_26AF9FF70 = re::introspect_Vector4D(0);
      __cxa_guard_release(&qword_26AF9FF78);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, qword_26AF9FF70, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesQuatF(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, re::introspect<re::Quaternion<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

uint64_t REBindPointCreateReferenceForComponentAnimatedValuesSRT(re *a1, const char *a2)
{
  uint64_t v2 = 0;
  v15[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    re::makeBindNode(a1, (uint64_t)v15);
    {
      re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
    }
    v8[0] = (uint64_t)a2;
    v8[1] = strlen(a2);
    re::BindNode::bindPointWithOverride(v15, re::introspect<re::GenericSRT<float>>(void)::info, v8, (uint64_t)&v9);
    re::BindNode::deinit((re::BindNode *)v15);
    if (v12)
    {
      unint64_t v5 = re::globalAllocators(v4);
      uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 48, 8);
      uint64_t v6 = v9;
      *(void *)(v2 + 40) = 0;
      *(_DWORD *)(v2 + 32) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)uint64_t v2 = v6;
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 8) = v10;
      *(void *)(v2 + 16) = v11;
      *(void *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v12;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)(v2 + 40) = v14;
      uint64_t v14 = 0;
      ++v13;
      ++*(_DWORD *)(v2 + 32);
    }
    else
    {
      uint64_t v2 = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v10);
  }
  return v2;
}

re *REBindPointDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1 + 8);
    uint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

uint64_t REBindPointGetString(re::BindPoint *a1, uint64_t *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      if ((*(unsigned char *)(result + 8) & 1) == 0)
      {
        uint64_t v5 = result + 9;
LABEL_8:
        *a2 = v5;
        return 1;
      }
      uint64_t v5 = *(void *)(result + 16);
      if (v5) {
        goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

uint64_t REBindPointGetBool(re::BindPoint *a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(unsigned char *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt8(re::BindPoint *a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(unsigned char *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt8(re::BindPoint *a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(unsigned char *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt16(re::BindPoint *a1, _WORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_WORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt16(re::BindPoint *a1, _WORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_WORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt32(re::BindPoint *a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetUInt32(re::BindPoint *a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetInt64(re::BindPoint *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(void *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat(re::BindPoint *a1, _DWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_DWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat2(re::BindPoint *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(void *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat3(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetFloat4(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble(re::BindPoint *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(void *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble2(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble3(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      long long v5 = *(_OWORD *)(result + 16);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetDouble4(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      long long v5 = *(_OWORD *)(result + 16);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetQuatF(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      *a2 = *(_OWORD *)result;
      return 1;
    }
  }
  return result;
}

uint64_t REBindPointGetSRT(re::BindPoint *a1, _OWORD *a2)
{
  if (!a2) {
    return 0;
  }
  if (result)
  {
    uint64_t result = re::BindPoint::valueUntyped(a1);
    if (result)
    {
      long long v5 = *(_OWORD *)(result + 16);
      long long v6 = *(_OWORD *)(result + 32);
      *a2 = *(_OWORD *)result;
      a2[1] = v5;
      a2[2] = v6;
      return 1;
    }
  }
  return result;
}

re::BindPoint *REBindPointSetOverrideEnabled(re::BindPoint *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      return (re::BindPoint *)re::BindPoint::setIsOverridden(v3, a2);
    }
  }
  return result;
}

uint64_t REBindPointIsOverrideEnabled(re::BindPoint *a1)
{
  if (a1 && *((void *)a1 + 3)) {
    return re::BindPoint::isOverridden(a1);
  }
  else {
    return 0;
  }
}

uint64_t REBindPointIsOverridable(re::BindPoint *a1)
{
  if (a1 && *((void *)a1 + 3)) {
    return re::BindPoint::supportsOverrideValue(a1);
  }
  else {
    return 0;
  }
}

BOOL REBindPointIsValid(BOOL result)
{
  if (result) {
    return *(void *)(result + 24) != 0;
  }
  return result;
}

re::BindPoint *REBindPointIsAlive(re::BindPoint *result)
{
  if (result) {
    return (re::BindPoint *)re::BindPoint::isAlive(result);
  }
  return result;
}

uint64_t REBindPointMarkAsWritten(uint64_t this, int a2)
{
  if (this)
  {
    uint64_t v2 = this;
    if (*(void *)(this + 24))
    {
      if (!a2)
      {
LABEL_6:
        re::BindPoint::markAsWritten(v2);
        return 1;
      }
      if (a2 == 1)
      {
        this = re::BindPoint::supportsOverrideValue((re::BindPoint *)this);
        if (!this) {
          return this;
        }
        goto LABEL_6;
      }
    }
    return 0;
  }
  return this;
}

CFStringRef REBindKeyEscape(const char *a1)
{
  uint64_t v8 = a1;
  uint64_t v9 = (_anonymous_namespace_ *)strlen(a1);
  uint64_t v5 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  re::DynamicString::setCapacity(&v4, 0);
  re::internal::escapeBindingKey(&v8, (re::DynamicString *)&v4);
  if (v5) {
    uint64_t v1 = v6;
  }
  else {
    uint64_t v1 = (char *)&v5 + 1;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v2;
}

CFStringRef REBindKeyUnescape(const char *a1)
{
  uint64_t v8 = a1;
  uint64_t v9 = (_anonymous_namespace_ *)strlen(a1);
  uint64_t v5 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  re::DynamicString::setCapacity(&v4, 0);
  re::internal::unescapeBindingKey((uint64_t *)&v8, (re::DynamicString *)&v4);
  if (v5) {
    uint64_t v1 = v6;
  }
  else {
    uint64_t v1 = (char *)&v5 + 1;
  }
  CFStringRef v2 = CFStringCreateWithCString(0, v1, 0x8000100u);
  if (v4 && (v5 & 1) != 0) {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v2;
}

uint64_t REBindPointSetString(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::DynamicString>((uint64_t)a1, (re::DynamicString *)&v9);
LABEL_10:
      uint64_t v7 = 1;
      goto LABEL_11;
    }
    if (!a3)
    {
      long long v6 = (re::DynamicString *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        re::DynamicString::operator=(v6, (re::DynamicString *)&v9);
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
LABEL_11:
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v7;
}

uint64_t REBindPointSetBool(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  unsigned __int8 v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<BOOL>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt8(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  unsigned __int8 v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<char>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt8(re::BindPoint *a1, unsigned __int8 a2, int a3)
{
  unsigned __int8 v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<char>((unsigned __int8 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (unsigned __int8 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt16(re::BindPoint *a1, unsigned __int16 a2, int a3)
{
  unsigned __int16 v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<short>((unsigned __int16 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (unsigned __int16 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt16(re::BindPoint *a1, unsigned __int16 a2, int a3)
{
  unsigned __int16 v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<short>((unsigned __int16 *)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (unsigned __int16 *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt32(re::BindPoint *a1, int a2, int a3)
{
  int v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<int>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (int *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetUInt32(re::BindPoint *a1, int a2, int a3)
{
  int v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<int>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (int *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetInt64(re::BindPoint *a1, uint64_t a2, int a3)
{
  uint64_t v8 = a2;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<long long>(a1, &v8);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = (uint64_t *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a2;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat(re::BindPoint *a1, int a2, float a3)
{
  float v8 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<float>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a2)
    {
      uint64_t v7 = (float *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat2(re::BindPoint *a1, int a2, float32x2_t a3)
{
  float32x2_t v8 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector2<float>>((uint64_t)a1, &v8);
      return 1;
    }
    if (!a2)
    {
      uint64_t v7 = (double *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *uint64_t v7 = *(double *)&a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat3(re::BindPoint *a1, int a2, float32x4_t a3)
{
  float32x4_t v7 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector3<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      long long v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *long long v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetFloat4(re::BindPoint *a1, int a2, float32x4_t a3)
{
  float32x4_t v7 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector4<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      long long v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *long long v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble(re::BindPoint *a1, int a2, double a3)
{
  double v8 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<double>(a1, &v8);
      return 1;
    }
    if (!a2)
    {
      float32x4_t v7 = (double *)re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        *float32x4_t v7 = a3;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble2(re::BindPoint *a1, int a2, float64x2_t a3)
{
  float64x2_t v7 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector2<double>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      long long v6 = (float64x2_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *long long v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble3(re::BindPoint *a1, uint64_t a2, int a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  float64x2_t v9 = *(float64x2_t *)a2;
  long long v10 = v5;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::Vector3<double>>(a1, &v9);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        long long v8 = v10;
        *(float64x2_t *)uint64_t v7 = v9;
        *(_OWORD *)(v7 + 16) = v8;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetDouble4(re::BindPoint *a1, uint64_t a2, int a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  float64x2_t v9 = *(float64x2_t *)a2;
  long long v10 = v5;
  if (result)
  {
    if (a3 == 1)
    {
      re::BindPoint::setValue<re::Vector4<double>>(a1, &v9);
      return 1;
    }
    if (!a3)
    {
      uint64_t v7 = re::BindPoint::baseValueUntyped(a1);
      if (v7)
      {
        long long v8 = v10;
        *(float64x2_t *)uint64_t v7 = v9;
        *(_OWORD *)(v7 + 16) = v8;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetQuatF(re::BindPoint *a1, int a2, float32x4_t a3)
{
  float32x4_t v7 = a3;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::Vector4<float>>(a1, &v7);
      return 1;
    }
    if (!a2)
    {
      long long v6 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v6)
      {
        *long long v6 = v7;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointSetSRT(re::BindPoint *a1, int a2, float32x4_t a3, __n128 a4, __n128 a5)
{
  float32x4_t v11 = a3;
  __n128 v12 = a4;
  __n128 v13 = a5;
  if (result)
  {
    if (a2 == 1)
    {
      re::BindPoint::setValue<re::GenericSRT<float>>((float32x4_t *)a1, &v11);
      return 1;
    }
    if (!a2)
    {
      long long v8 = (float32x4_t *)re::BindPoint::baseValueUntyped(a1);
      if (v8)
      {
        float32x4_t v9 = v11;
        __n128 v10 = v13;
        v8[1] = (float32x4_t)v12;
        uint64_t v8[2] = (float32x4_t)v10;
        *long long v8 = v9;
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t REBindPointBoundComponent(re::BindPoint *a1)
{
  uint64_t v1 = re::BindPoint::boundOwner(a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (char *)v1;
  uint64_t result = v2;
  long long v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    long long v8 = v3;
    uint64_t v9 = v2;
    long long v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    int v7 = v6;
    uint64_t v3 = v8;
    uint64_t result = v9;
    if (v7)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      long long v5 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      uint64_t v3 = v8;
      uint64_t result = v9;
    }
  }
  if (v5[297] != v3) {
    return 0;
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::DynamicString>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      uint64_t v3 = &qword_268772000;
      {
        uint64_t v3 = &qword_268772000;
        if (v4)
        {
          re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v5);
          uint64_t v3 = &qword_268772000;
        }
      }
      return (re::BindPoint *)(v2 == v3[452]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<BOOL>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(char ***)v1;
      uint64_t v3 = &off_268773000;
      {
        uint64_t v3 = &off_268773000;
        if (v4)
        {
          re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v5);
          uint64_t v3 = &off_268773000;
        }
      }
      return (re::BindPoint *)(v2 == v3[187]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<char>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      uint64_t v3 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      {
        uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        if (v4)
        {
          re::introspect<char>(void)::info = (uint64_t)re::introspect_char(0, v5);
          uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        }
      }
      return (re::BindPoint *)(v2 == v3[72]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<unsigned char>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(char **)v1;
      uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      {
        uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        if (v4)
        {
          re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v5);
          uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        }
      }
      return (re::BindPoint *)(v2 == v3[371]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<short>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      uint64_t v3 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      {
        uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        if (v4)
        {
          re::introspect<short>(void)::info = (uint64_t)re::introspect_short(0, v5);
          uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        }
      }
      return (re::BindPoint *)(v2 == v3[141]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<unsigned short>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      uint64_t v3 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      {
        uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        if (v4)
        {
          re::introspect<unsigned short>(void)::info = (uint64_t)re::introspect_uint16_t(0, v5);
          uint64_t v3 = (void *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        }
      }
      return (re::BindPoint *)(v2 == v3[147]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<int>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(char ***)v1;
      uint64_t v3 = &off_268773000;
      {
        uint64_t v3 = &off_268773000;
        if (v4)
        {
          re::introspect<int>(void)::info = re::introspect_int(0, v5);
          uint64_t v3 = &off_268773000;
        }
      }
      return (re::BindPoint *)(v2 == v3[267]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<unsigned int>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(char ***)v1;
      uint64_t v3 = &off_268773000;
      {
        uint64_t v3 = &off_268773000;
        if (v4)
        {
          re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v5);
          uint64_t v3 = &off_268773000;
        }
      }
      return (re::BindPoint *)(v2 == v3[269]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<long long>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(char **)v1;
      uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      {
        uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        if (v4)
        {
          re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v5);
          uint64_t v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        }
      }
      return (re::BindPoint *)(v2 == v3[147]);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<float>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<float>(void)::info = re::introspect_float(0, v5);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3632));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector2<float>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3664));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector3<float>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3680));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector4<float>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3696));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<double>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v5);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3648));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector2<double>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF58, memory_order_acquire) & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_26AF9FF58))
        {
          _MergedGlobals_518 = re::introspect_Vector2D(0);
          __cxa_guard_release(&qword_26AF9FF58);
        }
      }
      return (re::BindPoint *)(v2 == _MergedGlobals_518);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector3<double>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF68, memory_order_acquire) & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_26AF9FF68))
        {
          qword_26AF9FF60 = re::introspect_Vector3D(0);
          __cxa_guard_release(&qword_26AF9FF68);
        }
      }
      return (re::BindPoint *)(v2 == qword_26AF9FF60);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Vector4<double>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FF78, memory_order_acquire) & 1) == 0)
      {
        if (__cxa_guard_acquire(&qword_26AF9FF78))
        {
          qword_26AF9FF70 = re::introspect_Vector4D(0);
          __cxa_guard_release(&qword_26AF9FF78);
        }
      }
      return (re::BindPoint *)(v2 == qword_26AF9FF70);
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::Quaternion<float>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3712));
    }
  }
  return result;
}

re::BindPoint *anonymous namespace'::isAlive<re::GenericSRT<float>>(re::BindPoint *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (re::BindPoint *)re::BindPoint::isAlive(result);
    if (result)
    {
      uint64_t v2 = *(void *)v1;
      unint64_t v3 = 0x268771000uLL;
      {
        unint64_t v3 = 0x268771000;
        if (v4)
        {
          re::introspect<re::GenericSRT<float>>(void)::info = re::introspect_SRT(0);
          unint64_t v3 = 0x268771000;
        }
      }
      return (re::BindPoint *)(v2 == *(void *)(v3 + 3888));
    }
  }
  return result;
}

uint64_t re::BindPoint::setValue<re::DynamicString>(uint64_t result, re::DynamicString *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    int v4 = (re::BindPoint *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        long long v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 797;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        __int16 v23 = 2048;
        uint64_t v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)v4 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      uint64_t v14 = (re::DynamicString *)v13;
      if (!re::BindPoint::isOverridden(v4)
        || (uint64_t result = re::DynamicString::operator!=((uint64_t)v14, (uint64_t)a2), result))
      {
        re::DynamicString::operator=(v14, a2);
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        uint64_t v15 = (re::DynamicString *)result;
        uint64_t result = re::DynamicString::operator!=(result, (uint64_t)a2);
        if (result)
        {
          re::DynamicString::operator=(v15, a2);
          return re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

unsigned __int8 *re::BindPoint::setValue<char>(unsigned __int8 *result, unsigned __int8 *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    int v4 = (re::BindPoint *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v18 = 136315906;
        __int16 v19 = "operator[]";
        __int16 v20 = 1024;
        int v21 = 797;
        __int16 v22 = 2048;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)v4 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      uint64_t v14 = (unsigned char *)v13;
      uint64_t result = (unsigned __int8 *)re::BindPoint::isOverridden(v4);
      int v15 = *a2;
      if (!result || *v14 != v15)
      {
        *uint64_t v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (unsigned __int8 *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        int v16 = *a2;
        if (*result != v16)
        {
          *uint64_t result = v16;
          return (unsigned __int8 *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

unsigned __int16 *re::BindPoint::setValue<short>(unsigned __int16 *result, unsigned __int16 *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    int v4 = (re::BindPoint *)result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v18 = 136315906;
        __int16 v19 = "operator[]";
        __int16 v20 = 1024;
        int v21 = 797;
        __int16 v22 = 2048;
        uint64_t v23 = v10;
        __int16 v24 = 2048;
        uint64_t v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)v4 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      uint64_t v14 = (_WORD *)v13;
      uint64_t result = (unsigned __int16 *)re::BindPoint::isOverridden(v4);
      int v15 = *a2;
      if (!result || (unsigned __int16)*v14 != v15)
      {
        *uint64_t v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (unsigned __int16 *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        int v16 = *a2;
        if (*result != v16)
        {
          *uint64_t result = v16;
          return (unsigned __int16 *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

re::BindPoint *re::BindPoint::setValue<long long>(re::BindPoint *result, uint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    int v4 = result;
    MEMORY[0x270FA5388](result);
    int v6 = (void *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v16[1] = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        int v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 797;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        __int16 v23 = 2048;
        uint64_t v24 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)v4 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      uint64_t result = (re::BindPoint *)re::BindPoint::isOverridden(v4);
      uint64_t v15 = *a2;
      if (!result || *v14 != v15)
      {
        *uint64_t v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      uint64_t result = (re::BindPoint *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result && *(void *)result != *a2)
      {
        *(void *)uint64_t result = *a2;
        return (re::BindPoint *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector2<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 3);
  if (v2)
  {
    MEMORY[0x270FA5388](a1);
    int v6 = (void *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v19[1] = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v20 = 136315906;
        __int16 v21 = "operator[]";
        __int16 v22 = 1024;
        int v23 = 797;
        __int16 v24 = 2048;
        uint64_t v25 = v10;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)a1 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = v2 - 1;
    uint64_t v13 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      uint64_t v14 = (float64x2_t *)v13;
      if (!re::BindPoint::isOverridden(a1)
        || (int8x16_t v15 = (int8x16_t)vceqq_f64(*v14, *a2),
            *(void *)&double result = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v15), 1), v15).u64[0],
            (*(void *)&result & 0x8000000000000000) != 0))
      {
        *uint64_t v14 = *a2;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      int v17 = (float64x2_t *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (v17)
      {
        int8x16_t v18 = (int8x16_t)vceqq_f64(*v17, *a2);
        *(void *)&double result = vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), v18).u64[0];
        if ((*(void *)&result & 0x8000000000000000) != 0)
        {
          *int v17 = *a2;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector3<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 3);
  if (v2)
  {
    MEMORY[0x270FA5388](a1);
    int v6 = (void *)((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v20[1] = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        __int16 v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 797;
        __int16 v25 = 2048;
        uint64_t v26 = v10;
        __int16 v27 = 2048;
        uint64_t v28 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)a1 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v2 - 1);
    if (v12)
    {
      uint64_t v13 = (float64x2_t *)v12;
      if (!re::BindPoint::isOverridden(a1)
        || (int8x16_t v14 = (int8x16_t)vceqq_f64(*v13, *a2),
            *(void *)&double result = vornq_s8(vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v14), 1), (int8x16_t)vceqq_f64(v13[1], a2[1])), v14).u64[0], (*(void *)&result & 0x8000000000000000) != 0))
      {
        float64x2_t v16 = a2[1];
        *uint64_t v13 = *a2;
        v13[1] = v16;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      int v17 = (float64x2_t *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v2 - 1);
      if (v17)
      {
        int8x16_t v18 = (int8x16_t)vceqq_f64(*v17, *a2);
        *(void *)&double result = vornq_s8(vornq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)vmvnq_s8(v18), 1), (int8x16_t)vceqq_f64(v17[1], a2[1])), v18).u64[0];
        if ((*(void *)&result & 0x8000000000000000) != 0)
        {
          float64x2_t v19 = a2[1];
          *int v17 = *a2;
          v17[1] = v19;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

double re::BindPoint::setValue<re::Vector4<double>>(re::BindPoint *a1, float64x2_t *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 3);
  if (v2)
  {
    MEMORY[0x270FA5388](a1);
    int v6 = (void *)((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200) {
      size_t v7 = 512;
    }
    else {
      size_t v7 = v5;
    }
    bzero((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a1 + 3);
    do
    {
      if (v10 == v9)
      {
        v20[1] = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        __int16 v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 797;
        __int16 v25 = 2048;
        uint64_t v26 = v10;
        __int16 v27 = 2048;
        uint64_t v28 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v11 = (void *)(*((void *)a1 + 5) + v8);
      if (!*v11) {
        float32x4_t v11 = (void *)v11[2];
      }
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    uint64_t v12 = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 120))(*v6, 0, v6 + 1, v2 - 1);
    if (v12)
    {
      uint64_t v13 = (float64x2_t *)v12;
      if (!re::BindPoint::isOverridden(a1)
        || (int8x16_t v14 = vornq_s8(vmvnq_s8((int8x16_t)vceqq_f64(*v13, *a2)), (int8x16_t)vceqq_f64(v13[1], a2[1])),
            *(void *)&double result = vorrq_s8(v14, (int8x16_t)vdupq_laneq_s64((int64x2_t)v14, 1)).u64[0],
            (*(void *)&result & 0x8000000000000000) != 0))
      {
        float64x2_t v16 = a2[1];
        *uint64_t v13 = *a2;
        v13[1] = v16;
        re::BindPoint::setIsOverridden((uint64_t)a1, 1);
LABEL_14:
        re::BindPoint::markAsWritten((uint64_t)a1);
      }
    }
    else
    {
      int v17 = (float64x2_t *)(*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*v6 + 88))(*v6, 0, v6 + 1, v2 - 1);
      if (v17)
      {
        int8x16_t v18 = vornq_s8(vmvnq_s8((int8x16_t)vceqq_f64(*v17, *a2)), (int8x16_t)vceqq_f64(v17[1], a2[1]));
        *(void *)&double result = vorrq_s8(v18, (int8x16_t)vdupq_laneq_s64((int64x2_t)v18, 1)).u64[0];
        if ((*(void *)&result & 0x8000000000000000) != 0)
        {
          float64x2_t v19 = a2[1];
          *int v17 = *a2;
          v17[1] = v19;
          goto LABEL_14;
        }
      }
    }
  }
  return result;
}

uint64_t REPrimitiveRenderAddContext(re::RenderManager *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)a1 + 13);
  if (v1)
  {
    uint64_t v1 = *(void *)(v1 + 312);
    uint64_t v2 = v1 + 224;
    uint64_t v3 = v1 + 272;
  }
  else
  {
    uint64_t v2 = 224;
    uint64_t v3 = 272;
  }
  uint64_t v4 = *(void *)v3;
  unint64_t v5 = (_anonymous_namespace_ *)(v1 + 256);
  re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v10, *(void *)v2, a1);
  __n128 v6 = re::DynamicArray<re::PrimitiveRenderingContext>::add(v5, (uint64_t)v10);
  if (v17)
  {
    if (v21) {
      (*(void (**)(__n128))(*(void *)v17 + 40))(v6);
    }
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    ++v20;
  }
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v16);
  if (v11)
  {
    if (v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    ++v14;
  }
  for (uint64_t i = 976; i != 816; i -= 40)
    re::DynamicArray<unsigned long>::deinit((uint64_t)&v10[i]);
  do
  {
    re::DynamicArray<unsigned long>::deinit((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 656);
  do
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v10[i]);
    i -= 40;
  }
  while (i != 496);
  for (uint64_t j = 240; j != -40; j -= 40)
    re::DynamicArray<unsigned long>::deinit((uint64_t)&v10[j]);
  return v4;
}

uint64_t REPrimitiveRenderClearContext(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v2 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = (unint64_t *)(*(void *)(v2 + 288) + 1200 * a2);
  re::PrimitiveRenderingDynamicGeometry::init((re::PrimitiveRenderingDynamicGeometry *)v3, v3[147]);
  return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear((uint64_t)(v3 + 132));
}

BOOL REPrimitiveRenderContextIsEmpty(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v2 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = (re::PrimitiveRenderingContext *)(*(void *)(v2 + 288) + 1200 * a2);
  return re::PrimitiveRenderingContext::isEmpty(v3);
}

uint64_t REPrimitiveRenderAddPoint(uint64_t a1, unint64_t a2, __n128 a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v3 + 272) <= a2)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(v3 + 288) + 1200 * a2;
  v6[0] = a3;
  return re::PrimitiveRenderingContext::addPoint(v4, v6);
}

uint64_t REPrimitiveRenderAddLine(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v6 = *(void *)(v5 + 272);
  if (v6 <= a2)
  {
    memset(v14, 0, sizeof(v14));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v9 = 136315906;
    *(void *)&v9[4] = "operator[]";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 789;
    __int16 v10 = 2048;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 288) + 1200 * a2;
  v14[0] = a3;
  *(__n128 *)uint64_t v9 = a4;
  return re::PrimitiveRenderingContext::addLine(v7, v14, v9);
}

uint64_t REPrimitiveRenderAddShape(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4, __n128 a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v7 = *(void *)(v6 + 272);
  if (v7 <= a2)
  {
    memset(v15, 0, sizeof(v15));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v10 = 136315906;
    *(void *)&v10[4] = "operator[]";
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = 789;
    __int16 v11 = 2048;
    unint64_t v12 = a2;
    __int16 v13 = 2048;
    unint64_t v14 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *(void *)(v6 + 288) + 1200 * a2;
  v15[0] = a4;
  *(__n128 *)__int16 v10 = a5;
  return re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(v8, a3, v15, v10);
}

double REPrimitiveRenderSetPointColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(1, a3, v7, (_anonymous_namespace_ *)(v5 + 40), (unsigned char *)(v5 + 513), *(void *)(v5 + 16), *(void *)(v5 + 520), (re *)*(void *)(v5 + 1192)).n128_u64[0];
  return result;
}

float REPrimitiveRenderSetPointSize(uint64_t a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v9 = a4;
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v6 = *(void *)(v5 + 272);
  if (v6 <= a2)
  {
    uint64_t v10 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v11 = 136315906;
    unint64_t v12 = "operator[]";
    __int16 v13 = 1024;
    int v14 = 789;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    __int16 v17 = 2048;
    unint64_t v18 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 288) + 1200 * a2;
  return re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(2, a3, &v9, (_anonymous_namespace_ *)(v7 + 80), (unsigned char *)(v7 + 514), *(void *)(v7 + 16), *(void *)(v7 + 520), *(re **)(v7 + 1192));
}

double REPrimitiveRenderSetLineColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, a3, v7, (_anonymous_namespace_ *)(v5 + 200), (unsigned char *)(v5 + 517), *(void *)(v5 + 136), *(void *)(v5 + 528), (re *)*(void *)(v5 + 1192)).n128_u64[0];
  return result;
}

float REPrimitiveRenderSetLineWidth(uint64_t a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  float v9 = a4;
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v6 = *(void *)(v5 + 272);
  if (v6 <= a2)
  {
    uint64_t v10 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v11 = 136315906;
    unint64_t v12 = "operator[]";
    __int16 v13 = 1024;
    int v14 = 789;
    __int16 v15 = 2048;
    unint64_t v16 = a2;
    __int16 v17 = 2048;
    unint64_t v18 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v7 = *(void *)(v5 + 288) + 1200 * a2;
  return re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(6, a3, &v9, (_anonymous_namespace_ *)(v7 + 240), (unsigned char *)(v7 + 518), *(void *)(v7 + 136), *(void *)(v7 + 528), *(re **)(v7 + 1192));
}

double REPrimitiveRenderSetShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, __n128 a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(v6, a3, a4, 3, v8);
}

double REPrimitiveRenderSetShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, __n128 a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(v6, a3, a4, 2, v8);
}

uint64_t REPrimitiveRenderSetUniformPointColor(uint64_t result, unint64_t a2, __n128 a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 104) + 312);
  if (*(void *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = (__n128 *)(*(void *)(v3 + 288) + 1200 * a2);
  if (v4[32].n128_u8[1])
  {
    v4[3].n128_u64[1] = 0;
    ++v4[4].n128_u32[0];
    v4[32].n128_u8[1] = 0;
  }
  if (v4[21].n128_u32[0] != 3) {
    v4[21].n128_u32[0] = 3;
  }
  v4[20] = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformPointSize(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 104) + 312);
  if (*(void *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(v3 + 288) + 1200 * a2;
  if (*(unsigned char *)(v4 + 514))
  {
    *(void *)(v4 + 96) = 0;
    ++*(_DWORD *)(v4 + 104);
    *(unsigned char *)(v4 + 514) = 0;
  }
  if (*(_DWORD *)(v4 + 368)) {
    *(_DWORD *)(v4 + 368) = 0;
  }
  *(float *)(v4 + 352) = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformLineColor(uint64_t result, unint64_t a2, __n128 a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 104) + 312);
  if (*(void *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = (__n128 *)(*(void *)(v3 + 288) + 1200 * a2);
  if (v4[32].n128_u8[5])
  {
    v4[13].n128_u64[1] = 0;
    ++v4[14].n128_u32[0];
    v4[32].n128_u8[5] = 0;
  }
  if (v4[29].n128_u32[0] != 3) {
    v4[29].n128_u32[0] = 3;
  }
  v4[28] = a3;
  return result;
}

uint64_t REPrimitiveRenderSetUniformLineWidth(uint64_t result, unint64_t a2, float a3)
{
  uint64_t v3 = *(void *)(*(void *)(result + 104) + 312);
  if (*(void *)(v3 + 272) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(v3 + 288) + 1200 * a2;
  if (*(unsigned char *)(v4 + 518))
  {
    *(void *)(v4 + 256) = 0;
    ++*(_DWORD *)(v4 + 264);
    *(unsigned char *)(v4 + 518) = 0;
  }
  if (*(_DWORD *)(v4 + 496)) {
    *(_DWORD *)(v4 + 496) = 0;
  }
  *(float *)(v4 + 480) = a3;
  return result;
}

double REPrimitiveRenderSetUniformShapeColor(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,re::PrimitiveRenderingShape>(v5, a3, 3u, v7).n128_u64[0];
  return result;
}

double REPrimitiveRenderSetUniformShapeScale(uint64_t a1, unint64_t a2, unsigned int a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,re::PrimitiveRenderingShape>(v5, a3, 2u, v7).n128_u64[0];
  return result;
}

void REPrimitiveRenderSetPointMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
    unint64_t v7 = *(void *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v9 = 136315906;
      uint64_t v10 = "operator[]";
      __int16 v11 = 1024;
      int v12 = 789;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unint64_t v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)(*(void *)(v6 + 288) + 1200 * a2 + 1096) = *(void *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void REPrimitiveRenderSetLineMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
    unint64_t v7 = *(void *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v9 = 136315906;
      uint64_t v10 = "operator[]";
      __int16 v11 = 1024;
      int v12 = 789;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unint64_t v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)(*(void *)(v6 + 288) + 1200 * a2 + 1104) = *(void *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void REPrimitiveRenderSetShapeMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
    unint64_t v7 = *(void *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v9 = 136315906;
      uint64_t v10 = "operator[]";
      __int16 v11 = 1024;
      int v12 = 789;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unint64_t v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)(*(void *)(v6 + 288) + 1200 * a2 + 1112) = *(void *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

uint64_t REPrimitiveRenderRegisterCustomShape(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6) {
    unint64_t v7 = *(void **)(v6 + 312);
  }
  else {
    unint64_t v7 = 0;
  }
  v11[0] = a2;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v9[0] = a3;
  v9[1] = a4;
  return re::PrimitiveRenderer::addCustomShape(v7, v11, v10, v9);
}

uint64_t REPrimitiveRenderAddCustomShape(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v7 = *(void *)(v6 + 272);
  if (v7 <= a2)
  {
    memset(v15, 0, sizeof(v15));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v10 = 136315906;
    *(void *)&v10[4] = "operator[]";
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = 789;
    __int16 v11 = 2048;
    unint64_t v12 = a2;
    __int16 v13 = 2048;
    unint64_t v14 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *(void *)(v6 + 288) + 1200 * a2;
  v15[0] = a4;
  *(__n128 *)uint64_t v10 = a5;
  return re::PrimitiveRenderingContext::addShape<unsigned long>(v8, a3, v15, v10);
}

double REPrimitiveRenderSetCustomShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,unsigned long>(v6, a3, a4, 3, v8);
}

double REPrimitiveRenderSetUniformCustomShapeColor(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>(v5, a3, 3u, v7).n128_u64[0];
  return result;
}

double REPrimitiveRenderSetCustomShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, __n128 a5)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v5 + 272) <= a2)
  {
    memset(v8, 0, sizeof(v8));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(void *)(v5 + 288) + 1200 * a2;
  v8[0] = a5;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,unsigned long>(v6, a3, a4, 2, v8);
}

double REPrimitiveRenderSetUniformCustomShapeScale(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a1 + 104) + 312);
  if (*(void *)(v4 + 272) <= a2)
  {
    memset(v7, 0, sizeof(v7));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(v4 + 288) + 1200 * a2;
  v7[0] = a4;
  *(void *)&double result = re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>(v5, a3, 2u, v7).n128_u64[0];
  return result;
}

void REPrimitiveRenderAddStaticMesh(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v8 = *(void *)(v7 + 272);
  if (v8 <= a2)
  {
    int32x4_t v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    long long v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    int32x4_t v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    long long v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v8;
    __int16 v26 = 2048;
    unint64_t v27 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = (void (**)(void, void))v6;
  uint64_t v10 = *(void *)(v7 + 288);
  uint64_t v11 = v10 + 1200 * a2;
  unint64_t v8 = *(void *)(v11 + 1072);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  int32x4_t v16 = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v12 = 0x7F0000007FLL;
  *((void *)&v12 + 1) = 0x7F0000007FLL;
  long long v17 = v12;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add((_anonymous_namespace_ *)(v11 + 1056), (uint64_t)&v13);
  re::DynamicArray<re::PrimitiveMeshAttribute>::deinit((uint64_t)&v13);
  unint64_t v3 = *(void *)(v11 + 1072);
  if (v3 <= v8) {
    goto LABEL_5;
  }
  v9[2](v9, *(void *)(v10 + 1200 * a2 + 1088) + 96 * v8);
}

void REPrimitiveRenderStaticMeshAddStandardAttribute(_anonymous_namespace_ *a1, const char *a2, char a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4;
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  id v9 = v7;
  unint64_t v8 = v7;
  v11.n128_u64[0] = 0;
  v11.n128_u64[1] = (unint64_t)"";
  id v14 = 0;
  int v15 = 0;
  int v16 = 0;
  re::StringID::operator=(v11.n128_u64, v10);
  __int16 v12 = 1;
  char v13 = a3;
  NS::SharedPtr<MTL::Texture>::operator=(&v14, &v9);
  if (v9)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v11);
  if (v14)
  {

    id v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v11);
}

void REPrimitiveRenderStaticMeshAddCustomAttribute(_anonymous_namespace_ *a1, const char *a2, char a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = a4;
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  id v9 = v7;
  unint64_t v8 = v7;
  v11.n128_u64[0] = 0;
  v11.n128_u64[1] = (unint64_t)"";
  id v14 = 0;
  int v15 = 0;
  int v16 = 0;
  re::StringID::operator=(v11.n128_u64, v10);
  __int16 v12 = 0;
  char v13 = a3;
  NS::SharedPtr<MTL::Texture>::operator=(&v14, &v9);
  if (v9)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v11);
  if (v14)
  {

    id v14 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v11);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat(_anonymous_namespace_ *a1, const char *a2, float a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  float v6 = a3;
  v5[0] = 0;
  v5[1] = (uint64_t)"";
  re::PrimitiveMeshAttribute::uniformCustomAttribute<float>(v5, (int *)&v6, (uint64_t)&v7);
  re::StringID::destroyString((re::StringID *)v5);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v7);
  if (v8)
  {

    id v8 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v7);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat2(_anonymous_namespace_ *a1, const char *a2, double a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = (uint64_t)"";
  double v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector2<float>>(v7, (unint64_t *)&v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat3(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = (uint64_t)"";
  __n128 v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(v7, &v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

void REPrimitiveRenderStaticMeshAddUniformCustomAttributeFloat4(_anonymous_namespace_ *a1, const char *a2, __n128 a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = 0;
  v7[1] = (uint64_t)"";
  __n128 v6 = a3;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(v7, &v6, (uint64_t)&v8);
  re::StringID::destroyString((re::StringID *)v7);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add(a1, &v8);
  if (v9)
  {

    id v9 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t REPrimitiveRenderStaticMeshSetVertexCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t REPrimitiveRenderStaticMeshSetIndexCount(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

__n128 *REPrimitiveRenderStaticMeshSetAABB(__n128 *result, __n128 a2, __n128 a3)
{
  result[3] = a2;
  result[4] = a3;
  return result;
}

void REPrimitiveRenderSetMeshMaterial(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a3, v8);
  uint64_t v5 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)v8);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 104) + 312);
    unint64_t v7 = *(void *)(v6 + 272);
    if (v7 <= a2)
    {
      v8[3] = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v9 = 136315906;
      uint64_t v10 = "operator[]";
      __int16 v11 = 1024;
      int v12 = 789;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      __int16 v15 = 2048;
      unint64_t v16 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)(*(void *)(v6 + 288) + 1200 * a2 + 1120) = *(void *)(v5 + 1664);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

double REPrimitiveRenderSetMeshMaterialTechniqueMapping(uint64_t a1, unint64_t a2, char *__s, const char *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 312);
  unint64_t v6 = *(void *)(v5 + 272);
  if (v6 <= a2)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)__int16 v15 = 136315906;
    *(void *)&v15[4] = "operator[]";
    *(_WORD *)&v15[12] = 1024;
    *(_DWORD *)&v15[14] = 789;
    __int16 v16 = 2048;
    unint64_t v17 = a2;
    __int16 v18 = 2048;
    unint64_t v19 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = *(void *)(v5 + 288);
  size_t v10 = strlen(__s);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)__s, v10, 0, (unint64_t *)v20);
    uint64_t v11 = (*((void *)&v20[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v20[0] << 6) + (*(void *)&v20[0] >> 2)) ^ *(void *)&v20[0];
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)__int16 v15 = v11;
  size_t v12 = strlen(a4);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)a4, v12, 0, (unint64_t *)v20);
    uint64_t v13 = (*((void *)&v20[0] + 1) - 0x61C8864680B583E9 + (*(void *)&v20[0] << 6) + (*(void *)&v20[0] >> 2)) ^ *(void *)&v20[0];
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)&v15[8] = v13;
  *(void *)&double result = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)(v9 + 1200 * a2 + 1136), (__n128 *)v15).n128_u64[0];
  return result;
}

double REAudioGeneratorBlockConfigurationCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  return result;
}

re *REAudioGeneratorBlockConfigurationDestroy(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    if (*((unsigned char *)v1 + 8)) {
      v3.n128_f64[0] = re::DynamicString::deinit((re *)((char *)v1 + 16));
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, re *, __n128))(*(void *)v2 + 40);
    return (re *)v4(v2, v1, v3);
  }
  return result;
}

_DWORD *REAudioGeneratorBlockConfigurationSetLayoutTag(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

uint64_t REAudioGeneratorBlockConfigurationGetLayoutTag(unsigned int *a1)
{
  return *a1;
}

unsigned __int8 *REAudioGeneratorBlockConfigurationSetMixGroupName(uint64_t a1, id a2)
{
  if (a2)
  {
    __n128 v3 = (_anonymous_namespace_ *)[a2 UTF8String];
    LOBYTE(v9) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v6);
    re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 8), &v9);
    if (_BYTE)v9 && v10 && (v11) {
      (*(void (**)(void))(*(void *)v10 + 40))();
    }
    double result = v6;
    if (v6 && (v7 & 1) != 0)
    {
      uint64_t v5 = v8;
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 40))(result, v5);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
    double result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(a1 + 8), &v9);
    if ((_BYTE)v9)
    {
      double result = (unsigned __int8 *)v10;
      if (v10)
      {
        if (v11)
        {
          uint64_t v5 = v12;
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 40))(result, v5);
        }
      }
    }
  }
  return result;
}

id REAudioGeneratorBlockConfigurationGetMixGroupName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 24)) {
      uint64_t v1 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v1 = a1 + 25;
    }
    uint64_t v2 = [NSString stringWithUTF8String:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

void *REShadowClusterRootComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 REShadowClusterRootComponentGetClusterBound(__n128 *a1)
{
  return a1[2];
}

double REBlendSpaceDefinitionBuilderCreate(_anonymous_namespace_ *a1)
{
  int v1 = (int)a1;
  __n128 v3 = re::globalAllocators(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 128, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E730CD0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v1;
  *(void *)(v4 + 120) = v4 + 24;
  return result;
}

uint64_t REBlendSpaceDefinitionBuilderAddUniformAxis(_anonymous_namespace_ *a1, const char *a2, int a3, float a4, float a5)
{
  uint64_t v9 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v12[0] = 0;
  v12[1] = "";
  uint64_t v10 = re::BlendSpaceBuilder::addAxis(v9, (const re::StringID *)v12, a3, a4, a5);
  re::StringID::destroyString((re::StringID *)v12);
  return v10;
}

uint64_t REBlendSpaceDefinitionBuilderAddAxis(_anonymous_namespace_ *a1, const char *a2)
{
  __n128 v3 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::BlendSpaceBuilder::addAxis(v3, (const re::StringID *)v6, 0, 0.0, 0.0);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t REBlendSpaceDefinitionBuilderSetDefaultControlValueForAxis(uint64_t a1, unint64_t a2, float a3)
{
  return re::BlendSpaceBuilder::setDefaultControlValueForAxis(a1 + 112, a2, a3);
}

void REBlendSpaceDefinitionBuilderSetControlValueBindPathForAxis(_anonymous_namespace_ *a1, unint64_t a2, const char *a3)
{
  uint64_t v5 = (_anonymous_namespace_ *)((char *)a1 + 112);
  v6[0] = 0;
  v6[1] = "";
  re::BlendSpaceBuilder::setControlValueBindPath(v5, a2, (const re::StringID *)v6);
  re::StringID::destroyString((re::StringID *)v6);
}

uint64_t REBlendSpaceDefinitionBuilderAddSample(_anonymous_namespace_ *a1, const char *a2)
{
  __n128 v3 = (_anonymous_namespace_ *)((char *)a1 + 112);
  *(void *)&v6.var0 = 0;
  v6.uint64_t var1 = "";
  uint64_t v4 = re::BlendSpaceBuilder::addSample(v3, &v6);
  re::StringID::destroyString((re::StringID *)&v6);
  return v4;
}

unint64_t REBlendSpaceDefinitionBuilderAddSampleUniform(_anonymous_namespace_ *a1, const char *a2, int a3, int a4)
{
  char v7 = (_anonymous_namespace_ *)((char *)a1 + 112);
  *(void *)&v10.var0 = 0;
  v10.uint64_t var1 = "";
  unint64_t v8 = re::BlendSpaceBuilder::addSampleUniform(v7, &v10, a3, a4);
  re::StringID::destroyString((re::StringID *)&v10);
  return v8;
}

uint64_t REBlendSpaceDefinitionBuilderSetSamplePosition(uint64_t a1, unint64_t a2, float *a3, uint64_t a4)
{
  return re::BlendSpaceBuilder::setSamplePosition(a1 + 112, a2, a3, a4);
}

uint64_t REBlendSpaceDefinitionBuilderSetSampleFalloff(uint64_t a1, unint64_t a2, float a3)
{
  return re::BlendSpaceBuilder::setSampleFalloff(a1 + 112, a2, a3);
}

uint64_t REBlendSpaceDefinitionBuilderBuild(uint64_t a1)
{
  re::BlendSpaceBuilder::build((re::BlendSpaceBuilder *)(a1 + 112), (uint64_t)v7);
  if (v7[0])
  {
    uint64_t v2 = re::globalAllocators(v1);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
    *(void *)uint64_t v3 = &unk_26E730D18;
    *(_OWORD *)(v3 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(void *)(v3 + 104) = 0;
    *(_OWORD *)(v3 + 72) = 0u;
    uint64_t v4 = v8;
    uint64_t v5 = v8 + 1;
    *(_DWORD *)(v3 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = *(_DWORD *)v8;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v3 + 32, v5);
    re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v3 + 72, v4 + 6);
    if (v7[0]) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  return v3;
}

void *re::Shareable<anonymous namespace'::REBlendSpaceBuilder>::~Shareable(void *a1)
{
  *a1 = &unk_26E730CD0;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<anonymous namespace'::REBlendSpaceBuilder>::~Shareable(void *a1)
{
  *a1 = &unk_26E730CD0;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::Shareable<re::BlendSpaceDefinition>::~Shareable(void *a1)
{
  *a1 = &unk_26E730D18;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::BlendSpaceDefinition>::~Shareable(void *a1)
{
  *a1 = &unk_26E730D18;
  re::DynamicArray<re::BlendSpaceSampleDefinition>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::BlendSpaceAxisDefinition>::deinit((uint64_t)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

__n128 REGeomInstanceCreate(re *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  unsigned __int32 v5 = a1;
  StringID v6 = re::globalAllocators(a1);
  char v7 = (__n128 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 112, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v7, 0);
  v7->n128_u64[0] = (unint64_t)&unk_26E6DF860;
  v7[6].n128_u64[0] = 0;
  v7[6].n128_u64[1] = 0;
  uint64_t v7[2] = a2;
  float v7[3] = a3;
  __n128 result = a5;
  v7[4] = a4;
  __n128 v7[5] = a5;
  v7[6].n128_u32[0] = v5;
  return result;
}

__n128 REGeomInstanceGetTransform(__n128 *a1)
{
  return a1[2];
}

uint64_t REGeomInstanceGetModelIndex(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void ThreadContext::process(ThreadContext *this, void *a2)
{
  *((unsigned char *)this + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 1;
  unint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(void *)this;
  if (v2 < *(void *)(*(void *)this + 48))
  {
    uint64_t v5 = 40 * v2;
    do
    {
      uint64_t v6 = *(void *)(v3 + 24);
      char v7 = (re::FileStreamReader *)(v6 + v5);
      memset(&v25, 0, sizeof(v25));
      int v8 = *(_DWORD *)(v6 + v5 + 24);
      if (*(_DWORD *)(v3 + 56) == 1)
      {
        if (v8 == 1 || *((_DWORD *)v7 + 7) == 0)
        {
LABEL_30:
          int v21 = 4;
LABEL_31:
          atomic_fetch_add((atomic_ullong *volatile)(v3 + 64), 1uLL);
          goto LABEL_43;
        }
        std::string::operator=(&v25, (const std::string *)(v6 + v5));
        std::string::append(&v25, ".arz");
      }
      else
      {
        if (!v8) {
          goto LABEL_30;
        }
        std::string::operator=(&v25, (const std::string *)(v6 + v5));
        char v10 = (char *)&v25 + HIBYTE(v25.__r_.__value_.__r.__words[2]);
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v11 = &v25;
        }
        else {
          char v11 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v10 = (char *)(v25.__r_.__value_.__r.__words[0] + v25.__r_.__value_.__l.__size_);
        }
        std::string::erase(&v25, v10 - (char *)v11 - 4, 4uLL);
      }
      uint64_t v12 = v6 + v5;
      int v13 = *(_DWORD *)(v6 + v5 + 28);
      if (qword_26AF9FF98)
      {
        uint64_t v14 = 120;
        if (v13 == 1) {
          uint64_t v14 = 112;
        }
        if (!v13) {
          uint64_t v14 = 104;
        }
        ++*(void *)&_MergedGlobals_519[v14];
      }
      __int16 v15 = (Compression *)*((void *)this + 1);
      int v16 = *(_DWORD *)(*(void *)this + 56);
      int v17 = *(char *)(v12 + 23);
      __int16 v18 = (re::FileStreamReader *)(v6 + v5);
      if (v16 == 1)
      {
        if (v17 < 0) {
          __int16 v18 = *(re::FileStreamReader **)v7;
        }
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v19 = &v25;
        }
        else {
          unint64_t v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        char v20 = RECompressionInit(v15, 1, *(_DWORD *)(*(void *)this + 60), v13, v18, (re::FileStreamWriter *)v19);
        *((unsigned char *)this + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v20;
        if ((v20 & 1) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v17 < 0) {
          __int16 v18 = *(re::FileStreamReader **)v7;
        }
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v25;
        }
        else {
          uint64_t v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        int v23 = RECompressionInit(v15, v16, *(_DWORD *)(v6 + v5 + 32), v13, v18, (re::FileStreamWriter *)v22);
        *((unsigned char *)this + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v23;
        if (!v23) {
          goto LABEL_42;
        }
      }
      *((unsigned char *)this + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = RECompressionProcess(*((void *)this + 1), 0, 0);
      RECompressionDeinit(*((Compression **)this + 1));
      if (*((unsigned char *)this + 24))
      {
        if (*(char *)(v12 + 23) < 0) {
          char v7 = *(re::FileStreamReader **)v7;
        }
        int v24 = unlink((const char *)v7);
        *((unsigned char *)this + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v24 == 0;
        if (!v24)
        {
          uint64_t v3 = *(void *)this;
          if (!*(void *)(*(void *)this + 216))
          {
            int v21 = 0;
            goto LABEL_31;
          }
          std::mutex::lock((std::mutex *)(v3 + 88));
          objc_msgSend(*(id *)(*(void *)this + 216), "setCompletedUnitCount:", objc_msgSend(*(id *)(*(void *)this + 216), "completedUnitCount") + 1);
          std::mutex::unlock((std::mutex *)(*(void *)this + 88));
          if (([*(id *)(*(void *)this + 216) isCancelled] & 1) == 0)
          {
            int v21 = 0;
            uint64_t v3 = *(void *)this;
            goto LABEL_31;
          }
        }
      }
LABEL_42:
      int v21 = 2;
LABEL_43:
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if ((v21 | 4) != 4)
      {
        uint64_t v3 = *(void *)this;
        break;
      }
      ++v2;
      uint64_t v3 = *(void *)this;
      v5 += 40;
    }
    while (v2 < *(void *)(*(void *)this + 48));
  }
  atomic_fetch_add((atomic_ullong *volatile)(v3 + 72), 1uLL);
}

double _REArchivalStatsCreate(re *a1)
{
  int v1 = re::globalAllocators(a1);
  unint64_t v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 48, 8);
  double result = 0.0;
  *unint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  return result;
}

re *_REArchivalStatsDelete(re *result)
{
  if (result)
  {
    int v1 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(result)[2] + 40);
    return (re *)v1();
  }
  return result;
}

uint64_t _REArchivalStatsGetSourceSize(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t _REArchivalStatsGetDestinationSize(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double _REArchivalStatsGetRatio(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double _REArchivalStatsGetArchivalMilliseconds(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t _REArchivalStatsGetCompressionStreamCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

double _REArchivalStatsGetCompressionMilliseconds(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

void _REArchiveOperationCreateWithURL()
{
}

BOOL _REArchiveOperationSetEnvelopeVersion(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v3 = a2 - 1;
  if ((a2 - 1) > 1)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = a2;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "%u is not a valid REArchiveEnvelopeVersion enum value.", (uint8_t *)v6, 8u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 33) = a2;
  }
  return v3 < 2;
}

uint64_t _REArchiveOperationSetArchiveCompressionLevel(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t _REArchiveOperationSetStreamCompression(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

BOOL _REArchiveOperationArchiveToURL(uint64_t a1, void *a2)
{
  return archiveOperationArchiveToURL(a1, a2, 0);
}

BOOL archiveOperationArchiveToURL(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 24) path];
  uint64_t v7 = (char *)[v6 UTF8String];

  id v8 = [a2 path];
  uint64_t v9 = (char *)[v8 UTF8String];

  if (*(void *)a1)
  {
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    [*(id *)a1 setTotalUnitCount:v10];
    [*(id *)a1 setCompletedUnitCount:0];
    id v11 = *(id *)a1;
  }
  else
  {
    id v11 = 0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 33);
  return archiveInternal(v7, v9, v12, v11, a3);
}

uint64_t _REArchiveOperationUnarchiveToURL(uint64_t a1, void *a2)
{
  return archiveOperationUnarchiveToURL(a1, a2, 0);
}

uint64_t archiveOperationUnarchiveToURL(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 24) path];
  uint64_t v7 = (char *)[v6 UTF8String];

  id v8 = [a2 path];
  uint64_t v9 = (re *)[v8 UTF8String];

  if (*(void *)a1)
  {
    [*(id *)a1 setTotalUnitCount:0];
    [*(id *)a1 setCompletedUnitCount:0];
  }
  int v10 = *(unsigned __int8 *)(a1 + 32);
  v12[0] = *(unsigned char *)(a1 + 8);
  if (v12[0]) {
    uint64_t v13 = *(void *)(a1 + 16);
  }
  return unarchiveInternal(v7, v9, v10 != 0, v12, *(void **)a1, a3);
}

BOOL REArchivePackage(char *a1, char *a2)
{
  return archiveInternal(a1, a2, 1, 0, 0);
}

BOOL archiveInternal(char *a1, char *a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v9 = a4;
  qword_26AF9FF98 = a5;
  if (a5)
  {
    _MergedGlobals_519 = 0;
    qword_26AF9FFA0 = (uint64_t)a1;
    qword_26AF9FFA8 = (uint64_t)a2;
    qword_26AF9FFB8 = 0;
    ftw(a1, (int (__cdecl *)(const char *, const stat *, int))ArchiveStats::GetDirectoryEntrySize, 1);
    qword_26AF9FFB0 = qword_26AF9FFB8;
  }
  BOOL v10 = RERealityArchiveArchiveFromDirectoryWithEnvelope(a1, a2, a3);
  ArchiveStats::Package::Stop((ArchiveStats::Package *)v10);
  if (!v10)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    id v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      uint64_t v14 = a2;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Error archiving file: %s", (uint8_t *)&v13, 0xCu);
    }
  }
  return v10;
}

BOOL _REArchivePackageWithProfiling(char *a1, char *a2, uint64_t a3)
{
  return archiveInternal(a1, a2, 1, 0, a3);
}

uint64_t REUnarchivePackage(char *a1, re *a2)
{
  v3[0] = 0;
  return unarchiveInternal(a1, a2, 1, v3, 0, 0);
}

uint64_t unarchiveInternal(char *a1, re *a2, int a3, unsigned __int8 *a4, void *a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v127 = *MEMORY[0x263EF8340];
  id v12 = a5;
  qword_26AF9FF98 = a6;
  if (a6)
  {
    _MergedGlobals_519[0] = 1;
    qword_26AF9FFA0 = (uint64_t)a1;
    qword_26AF9FFA8 = (uint64_t)a2;
    stat(a1, &v123);
    qword_26AF9FFB0 = v123.st_size;
  }
  int v13 = (re::RealityArchive *)RERealityArchiveCreateByOpeningFileAtPath((re::RealityArchive *)a1, 0);
  if (v13)
  {
    uint64_t v14 = v13;
    BOOL v15 = RERealityArchiveUnarchiveToDirectory(v13, a2);

    ArchiveStats::Package::Stop(v16);
    if (v15) {
      goto LABEL_143;
    }
    goto LABEL_123;
  }
  int v118 = *a4;
  if (*a4) {
    uint64_t v114 = *((void *)a4 + 1);
  }
  id v17 = v12;
  if (qword_26AF9FF98)
  {
    qword_26AF9FFC0 = mach_absolute_time();
    qword_26AF9FFC8 = 0;
  }
  BOMCopierNew();
  __int16 v18 = (void *)MEMORY[0x263EFF9A0];
  std::string::size_type v19 = *MEMORY[0x263EFFB40];
  *(void *)&long long buf = @"copyResources";
  *((void *)&buf + 1) = @"extractPKZip";
  __str.__r_.__value_.__r.__words[0] = v19;
  __str.__r_.__value_.__l.__size_ = v19;
  float v125 = @"sequesterResources";
  __str.__r_.__value_.__r.__words[2] = v19;
  char v20 = [NSDictionary dictionaryWithObjects:&__str forKeys:&buf count:3];
  int v21 = [v18 dictionaryWithDictionary:v20];

  id v117 = v12;
  if (v17)
  {
    unsigned int v115 = v7;
    uint64_t v22 = [MEMORY[0x263F08850] defaultManager];
    int v23 = [NSString stringWithUTF8String:a1];
    int v24 = [v22 enumeratorAtPath:v23];

    long long v121 = 0u;
    long long v122 = 0u;
    *(_OWORD *)__p = 0u;
    long long v120 = 0u;
    id v25 = v24;
    uint64_t v26 = [v25 countByEnumeratingWithState:__p objects:&v123 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)v120;
      do
      {
        uint64_t v30 = v27;
        do
        {
          if (*(void *)v120 != v29) {
            objc_enumerationMutation(v25);
          }
          --v30;
        }
        while (v30);
        v28 += v27;
        uint64_t v27 = [v25 countByEnumeratingWithState:__p objects:&v123 count:16];
      }
      while (v27);
    }
    else
    {
      uint64_t v28 = 0;
    }

    objc_msgSend(v17, "setTotalUnitCount:", objc_msgSend(v17, "totalUnitCount") + v28);
    BOMCopierSetUserData();
    BOMCopierSetCopyFileFinishedHandler();

    uint64_t v7 = v115;
    id v12 = v117;
  }
  if (v118)
  {
    long long v31 = [NSNumber numberWithInteger:v114];
    [v21 setValue:v31 forKey:@"zlibCompressionLevel"];
  }
  int v32 = BOMCopierCopyWithOptions();
  BOMCopierFree();
  if (qword_26AF9FF98) {
    qword_26AF9FFC8 = mach_absolute_time();
  }

  if (!v32 && a3)
  {
    id v34 = v17;
    uint64_t v35 = (std::string *)std::string::basic_string[abi:nn180100]<0>(&__str, (char *)a2);
    long long v36 = (SharedContext *)std::string::append(v35, "/assets/");
    if (qword_26AF9FF98)
    {
      qword_26AF9FFE0 = 0x400000000;
      qword_26AF9FFF0 = 0;
      *(void *)&dword_26AF9FFF8 = 0;
      qword_26AF9FFE8 = 0;
      long long v36 = (SharedContext *)mach_absolute_time();
      qword_26AF9FFD0 = (uint64_t)v36;
      qword_26AF9FFD8 = 0;
    }
    uint64_t v37 = SharedContext::instance(v36);
    id v38 = v34;
    std::mutex::lock((std::mutex *)(v37 + 152));
    id v39 = *(void **)(qword_26AF9FF90 + 216);
    *(void *)(qword_26AF9FF90 + 216) = 0;

    uint64_t v40 = qword_26AF9FF90;
    atomic_store(0, (unint64_t *)(qword_26AF9FF90 + 64));
    atomic_store(0, (unint64_t *)(v40 + 72));
    atomic_store(0, (unsigned int *)(v40 + 80));
    global_queue = (_anonymous_namespace_ *)dispatch_get_global_queue(0, 0);
    *(void *)(v40 + 232) = global_queue;
    *(void *)(v40 + 304) = v40;
    *(void *)(v40 + 320) = 0;
    *(void *)(v40 + 312) = RECompressionCreate(global_queue);
    std::string::operator=((std::string *)v37, &__str);
    *(void *)(v37 + 56) = 0x400000000;
    objc_storeStrong((id *)(v37 + 216), v7);
    if (*(char *)(v37 + 23) >= 0) {
      uint64_t v42 = (const char *)v37;
    }
    else {
      uint64_t v42 = *(const char **)v37;
    }
    char v43 = opendir(v42);
    if (v43)
    {
      float v44 = v43;
      id v116 = v38;
      long long v45 = readdir(v43);
      if (v45)
      {
        while (1)
        {
          d_name = v45->d_name;
          if (strcmp(v45->d_name, "."))
          {
            if (strcmp(d_name, "..")) {
              break;
            }
          }
LABEL_108:
          long long v45 = readdir(v44);
          if (!v45) {
            goto LABEL_128;
          }
        }
        int v47 = *(char *)(v37 + 23);
        if (v47 >= 0) {
          size_t v48 = *(unsigned __int8 *)(v37 + 23);
        }
        else {
          size_t v48 = *(void *)(v37 + 8);
        }
        size_t v49 = strlen(d_name);
        unint64_t v50 = v48 + v49;
        if (v48 + v49 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_145:
        }
          abort();
        size_t v51 = v49;
        if (v50 > 0x16)
        {
          uint64_t v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v53 = v50 | 7;
          }
          uint64_t v54 = v53 + 1;
          long long v52 = operator new(v53 + 1);
          __p[1] = (void *)v50;
          *(void *)&long long v120 = v54 | 0x8000000000000000;
          __p[0] = v52;
          unint64_t v50 = (v54 | 0x8000000000000000) >> 56;
        }
        else
        {
          long long v52 = 0;
          __p[1] = 0;
          *(void *)&long long v120 = 0;
          __p[0] = 0;
          BYTE7(v120) = v50;
        }
        if ((v50 & 0x80u) == 0) {
          uint64_t v55 = __p;
        }
        else {
          uint64_t v55 = (void **)v52;
        }
        if (v48)
        {
          if (v47 >= 0) {
            float v56 = (const char *)v37;
          }
          else {
            float v56 = *(const char **)v37;
          }
          memmove(v55, v56, v48);
        }
        float v57 = (char *)v55 + v48;
        if (v51) {
          memmove(v57, d_name, v51);
        }
        v57[v51] = 0;
        if (SBYTE7(v120) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v123, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&v123.st_dev = *(_OWORD *)__p;
          *(void *)&v123.st_uid = v120;
        }
        if ((v123.st_gid & 0x80000000) == 0) {
          float v58 = &v123;
        }
        else {
          float v58 = *(stat **)&v123.st_dev;
        }
        RECompressionQuery((const char *)v58, &v123.st_rdev, (int *)&v123.st_atimespec, &v123.st_rdev + 1, 0, 0);
        if ((v123.st_gid & 0x80000000) == 0) {
          float v59 = (char *)&v123;
        }
        else {
          float v59 = *(char **)&v123.st_dev;
        }
        float v60 = strrchr(v59, 46);
        if (v60 && !strcmp(v60, ".arz"))
        {
          if (v123.st_rdev) {
            goto LABEL_72;
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          float v61 = (id)CoreRELog::log;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
            goto LABEL_70;
          }
          if ((v123.st_gid & 0x80000000) == 0) {
            float v83 = &v123;
          }
          else {
            float v83 = *(stat **)&v123.st_dev;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v83;
          float v84 = v61;
          float v85 = "Unexpected .arz extension on file which does not appear to be compressed: %s";
        }
        else
        {
          if (v123.st_rdev != 1)
          {
LABEL_72:
            float v63 = *(char **)(v37 + 32);
            unint64_t v62 = *(void *)(v37 + 40);
            if ((unint64_t)v63 >= v62)
            {
              float v65 = *(void ***)(v37 + 24);
              unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - (char *)v65) >> 3);
              unint64_t v67 = v66 + 1;
              if (v66 + 1 > 0x666666666666666) {
                goto LABEL_145;
              }
              unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (void)v65) >> 3);
              if (2 * v68 > v67) {
                unint64_t v67 = 2 * v68;
              }
              if (v68 >= 0x333333333333333) {
                unint64_t v69 = 0x666666666666666;
              }
              else {
                unint64_t v69 = v67;
              }
              if (v69)
              {
                if (v69 > 0x666666666666666) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                float v70 = (char *)operator new(40 * v69);
              }
              else
              {
                float v70 = 0;
              }
              uint64_t v73 = &v70[8 * ((v63 - (char *)v65) >> 3)];
              if (SHIBYTE(v123.st_gid) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&v70[8 * ((v63 - (char *)v65) >> 3)], *(const std::string::value_type **)&v123.st_dev, v123.st_ino);
                float v65 = *(void ***)(v37 + 24);
                float v63 = *(char **)(v37 + 32);
              }
              else
              {
                *(_OWORD *)uint64_t v73 = *(_OWORD *)&v123.st_dev;
                *((void *)v73 + 2) = *(void *)&v123.st_uid;
              }
              float v74 = &v70[40 * v69];
              float v75 = &v70[40 * v66];
              *((void *)v75 + 3) = *(void *)&v123.st_rdev;
              *((_DWORD *)v75 + 8) = v123.st_atimespec.tv_sec;
              uint64_t v72 = v73 + 40;
              if (v63 == (char *)v65)
              {
                *(void *)(v37 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v73;
                *(void *)(v37 + 32) = v72;
                *(void *)(v37 + 40) = v74;
              }
              else
              {
                uint64_t v76 = 0;
                do
                {
                  float v77 = (std::string *)&v73[v76 - 40];
                  float v78 = (const std::string::value_type **)&v63[v76 - 40];
                  if (v63[v76 - 17] < 0)
                  {
                    std::string::__init_copy_ctor_external(v77, *v78, *(void *)&v63[v76 - 32]);
                  }
                  else
                  {
                    long long v79 = *(_OWORD *)v78;
                    *(void *)&v73[v76 - 24] = *(void *)&v63[v76 - 24];
                    *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v79;
                  }
                  float v80 = &v73[v76];
                  uint64_t v81 = *(void *)&v63[v76 - 16];
                  *((_DWORD *)v80 - 2) = *(_DWORD *)&v63[v76 - 8];
                  *((void *)v80 - 2) = v81;
                  v76 -= 40;
                }
                while (&v63[v76] != (char *)v65);
                float v65 = *(void ***)(v37 + 24);
                float v82 = *(void ***)(v37 + 32);
                *(void *)(v37 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = &v73[v76];
                *(void *)(v37 + 32) = v72;
                *(void *)(v37 + 40) = v74;
                while (v82 != v65)
                {
                  if (*((char *)v82 - 17) < 0) {
                    operator delete(*(v82 - 5));
                  }
                  v82 -= 5;
                }
              }
              if (v65) {
                operator delete(v65);
              }
            }
            else
            {
              if (SHIBYTE(v123.st_gid) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v37 + 32), *(const std::string::value_type **)&v123.st_dev, v123.st_ino);
              }
              else
              {
                long long v64 = *(_OWORD *)&v123.st_dev;
                *((void *)v63 + 2) = *(void *)&v123.st_uid;
                *(_OWORD *)float v63 = v64;
              }
              uint64_t v71 = *(void *)&v123.st_rdev;
              *((_DWORD *)v63 + 8) = v123.st_atimespec.tv_sec;
              *((void *)v63 + 3) = v71;
              uint64_t v72 = v63 + 40;
            }
            *(void *)(v37 + 32) = v72;
            if (SHIBYTE(v123.st_gid) < 0) {
              operator delete(*(void **)&v123.st_dev);
            }
            if (SBYTE7(v120) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_108;
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          float v61 = (id)CoreRELog::log;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
LABEL_70:

            goto LABEL_72;
          }
          if ((v123.st_gid & 0x80000000) == 0) {
            float v86 = &v123;
          }
          else {
            float v86 = *(stat **)&v123.st_dev;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v86;
          float v84 = v61;
          float v85 = "Missing .arz extension on file which appears to be compressed: %s";
        }
        _os_log_error_impl(&dword_233120000, v84, OS_LOG_TYPE_ERROR, v85, (uint8_t *)&buf, 0xCu);
        goto LABEL_70;
      }
LABEL_128:
      closedir(v44);
      id v38 = v116;
      id v12 = v117;
    }
    *(void *)(v37 + 48) = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v37 + 32) - *(void *)(v37 + 24)) >> 3);
    float v89 = *(void **)(v37 + 216);
    if (v89) {
      objc_msgSend(v89, "setTotalUnitCount:", *(void *)(v37 + 48) + objc_msgSend(*(id *)(v37 + 216), "totalUnitCount"));
    }

    float v91 = (SharedContext *)SharedContext::instance(v90);
    float v92 = (SharedContext *)SharedContext::instance(v91);
    uint64_t v93 = SharedContext::instance(v92) + 304;
    float v94 = (void *)*((void *)v92 + 32);
    *((void *)v92 + 32) = 0;

    *((void *)v92 + 30) = re::Job::init(void (*)(void *),void *)::{lambda(re::Job&)#1}::__invoke;
    *((void *)v92 + 34) = ThreadContext::process;
    *((void *)v92 + 35) = v93;
    float v96 = (SharedContext *)SharedContext::instance(v95);
    float v97 = (SharedContext *)SharedContext::instance(v96);
    uint64_t v98 = (uint64_t)v97 + 224;
    float v99 = (SharedContext *)SharedContext::instance(v97);
    uint64_t v100 = (uint64_t)v99 + 240;
    float v101 = (SharedContext *)SharedContext::instance(v99);
    uint64_t v102 = SharedContext::instance(v101);
    DispatchJobManager::runAsync(v98, v100, 1u, (unsigned int *)(v102 + 80));
    float v104 = (dispatch_queue_t *)SharedContext::instance(v103);
    float v105 = (SharedContext *)SharedContext::instance((SharedContext *)v104);
    float v106 = (atomic_uint *)((char *)v105 + 80);
    while (atomic_load_explicit(v106, memory_order_acquire))
      dispatch_sync(v104[29], &__block_literal_global_44);
    uint64_t v107 = SharedContext::instance(v105);
    uint64_t v108 = *(void *)(v107 + 24);
    for (uint64_t i = *(void *)(v107 + 32); i != v108; i -= 40)
    {
      if (*(char *)(i - 17) < 0) {
        operator delete(*(void **)(i - 40));
      }
    }
    *(void *)(v107 + 32) = v108;
    uint64_t v110 = qword_26AF9FF90;
    RECompressionDestroy(*(_anonymous_namespace_ **)(qword_26AF9FF90 + 312));
    *(void *)(v110 + 312) = 0;
    float v111 = *(void **)(qword_26AF9FF90 + 216);
    *(void *)(qword_26AF9FF90 + 216) = 0;

    std::mutex::unlock((std::mutex *)(v107 + 152));
    if (qword_26AF9FF98)
    {
      float v112 = (ArchiveStats::Package *)mach_absolute_time();
      qword_26AF9FFD8 = (uint64_t)v112;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    ArchiveStats::Package::Stop(v112);
    goto LABEL_143;
  }
  ArchiveStats::Package::Stop(v33);
  if (!v32)
  {
LABEL_143:
    uint64_t v88 = 1;
    goto LABEL_144;
  }
LABEL_123:
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  float v87 = (id)CoreRELog::log;
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    v123.st_dev = 136315138;
    *(void *)&v123.st_mode = a1;
    _os_log_error_impl(&dword_233120000, v87, OS_LOG_TYPE_ERROR, "Error unarchiving file: %s", (uint8_t *)&v123, 0xCu);
  }

  uint64_t v88 = 0;
LABEL_144:

  return v88;
}

uint64_t _REUnarchivePackageWithProfiling(char *a1, re *a2, uint64_t a3)
{
  v4[0] = 0;
  return unarchiveInternal(a1, a2, 1, v4, 0, a3);
}

uint64_t REArchiveGetDefaultEnvelopeVersion()
{
  return 1;
}

void ArchiveStats::Package::Stop(ArchiveStats::Package *this)
{
  if (qword_26AF9FF98)
  {
    if (_MergedGlobals_519 == 1)
    {
      qword_26AF9FFB8 = 0;
      ftw((const char *)qword_26AF9FFA8, (int (__cdecl *)(const char *, const stat *, int))ArchiveStats::GetDirectoryEntrySize, 1);
      off_t st_size = qword_26AF9FFB8;
    }
    else
    {
      stat((const char *)qword_26AF9FFA8, &v17);
      off_t st_size = v17.st_size;
    }
    uint64_t v2 = qword_26AF9FF98;
    if (qword_26AF9FF98)
    {
      uint64_t v3 = qword_26AF9FFB0;
      double v4 = (double)qword_26AF9FFB0;
      double v5 = (double)st_size;
      if (!st_size) {
        double v5 = 1.0;
      }
      *(void *)(qword_26AF9FF98 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      *(void *)(v2 + 32) = 0;
      *(void *)(v2 + 40) = 0;
      *(void *)uint64_t v2 = v3;
      *(void *)(v2 + 8) = st_size;
      *(double *)(v2 + 16) = v4 / v5;
      uint64_t v7 = qword_26AF9FFC0;
      uint64_t v6 = qword_26AF9FFC8;
      double v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
      if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
      {
        if (mach_timebase_info((mach_timebase_info_t)&v17))
        {
          double v8 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
          double v11 = NAN;
          goto LABEL_13;
        }
        LODWORD(v9) = v17.st_dev;
        LODWORD(v10) = *(_DWORD *)&v17.st_mode;
        double v8 = (double)v9 / (double)v10;
        re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v8;
      }
      double v11 = v8 * (double)(unint64_t)(v6 - v7);
LABEL_13:
      *(double *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v11 / 1000000.0;
      *(_DWORD *)(v2 + 32) = qword_26AF9FFF0 + qword_26AF9FFE8 + dword_26AF9FFF8;
      uint64_t v13 = qword_26AF9FFD0;
      uint64_t v12 = qword_26AF9FFD8;
      if (v8 < 0.0)
      {
        if (mach_timebase_info((mach_timebase_info_t)&v17))
        {
          double v16 = NAN;
LABEL_18:
          *(double *)(v2 + 40) = v16 / 1000000.0;
          qword_26AF9FF98 = 0;
          return;
        }
        LODWORD(v14) = v17.st_dev;
        LODWORD(v15) = *(_DWORD *)&v17.st_mode;
        double v8 = (double)v14 / (double)v15;
        re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v8;
      }
      double v16 = v8 * (double)(unint64_t)(v12 - v13);
      goto LABEL_18;
    }
  }
}

uint64_t ArchiveStats::GetDirectoryEntrySize(ArchiveStats *this, const char *a2, const stat *a3)
{
  qword_26AF9FFB8 += *((void *)a2 + 12);
  return 0;
}

void FileFinished()
{
  BOMCopierUserData();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setCompletedUnitCount:", objc_msgSend(v0, "completedUnitCount") + 1);
  if ([v0 isCancelled]) {
    BOMCopierCancelCopy();
  }
}

uint64_t SharedContext::instance(SharedContext *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_26AF9FF88, memory_order_acquire) != -1)
  {
    uint64_t v2 = &v3;
    uint64_t v3 = SharedContext::_init;
    std::__call_once(&qword_26AF9FF88, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<void (&)(void)>>);
  }
  return qword_26AF9FF90;
}

double SharedContext::_init(SharedContext *this)
{
  double result = 0.0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(void *)(v1 + 88) = 850045863;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(void *)(v1 + 144) = 0;
  *(void *)(v1 + 152) = 850045863;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(void *)(v1 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = &unk_26E721088;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(void *)(v1 + 264) = "Unnamed";
  *(void *)(v1 + 304) = 0;
  *(void *)(v1 + 312) = 0;
  *(unsigned char *)(v1 + 328) = 0;
  *(void *)(v1 + 320) = 0;
  qword_26AF9FF90 = v1;
  return result;
}

uint64_t std::__call_once_proxy[abi:nn180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

uint64_t re::Job::init(void (*)(void *),void *)::{lambda(re::Job&)#1}::__invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
  *(void *)a1 = 0;
  return result;
}

void *REMeshSceneComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REMeshSceneComponentCopyInstances(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::MeshInstanceCollection::make((re::MeshInstanceCollection *)3);
  uint64_t v3 = v2;
  unint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(a1 + 48) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 8;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    LODWORD(v8) = 0;
    uint64_t v13 = v5;
    uint64_t v55 = v2 + 8;
    unsigned int v14 = *(_DWORD *)(a1 + 64);
    uint64_t v53 = v2;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 48) + 32 * v13;
      unint64_t v17 = *(void *)(v15 + 16);
      double v16 = (void *)(v15 + 16);
      LODWORD(v56) = 0;
      int v18 = *((_DWORD *)v16 - 1);
      LODWORD(v56) = v18;
      unint64_t v19 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v17 >> 31) ^ (v17 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v17 >> 31) ^ (v17 >> 1))) >> 27));
      unint64_t v20 = v19 ^ (v19 >> 31);
      if (*v55)
      {
        int v54 = v8;
        unint64_t v8 = v4;
        unint64_t v21 = v20 % *((unsigned int *)v3 + 8);
        uint64_t v22 = *(unsigned int *)(*((void *)v3 + 2) + 4 * v21);
        if (v22 != 0x7FFFFFFF)
        {
          uint64_t v23 = *((void *)v3 + 3);
          while (!re::StringID::operator==((void *)(v23 + 32 * v22 + 8), v16))
          {
            uint64_t v22 = *(_DWORD *)(v23 + 32 * v22) & 0x7FFFFFFF;
            if (v22 == 0x7FFFFFFF)
            {
              uint64_t v3 = v53;
              goto LABEL_21;
            }
          }
          unint64_t v4 = v8;
          uint64_t v3 = v53;
          LODWORD(v8) = v54;
          goto LABEL_24;
        }
LABEL_21:
        unint64_t v4 = v8;
        LODWORD(v8) = v54;
      }
      else
      {
        LODWORD(v21) = 0;
      }
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<unsigned int &>((uint64_t)v55, v21, v20, (StringID *)v16, &v56);
      ++*((_DWORD *)v3 + 12);
      int v18 = v56;
      unsigned int v14 = *(_DWORD *)(a1 + 64);
LABEL_24:
      if (v8 <= v18 + 1) {
        unint64_t v8 = (v18 + 1);
      }
      else {
        unint64_t v8 = v8;
      }
      if (v14 <= (int)v5 + 1) {
        unsigned int v24 = v5 + 1;
      }
      else {
        unsigned int v24 = v14;
      }
      while (1)
      {
        uint64_t v13 = (v5 + 1);
        if (v24 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        unsigned int v25 = v13;
        if ((*(_DWORD *)(*(void *)(a1 + 48) + 32 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_34;
        }
      }
      unsigned int v25 = v24;
LABEL_34:
      LODWORD(v5) = v25;
      if (v4 == v25) {
        goto LABEL_9;
      }
    }
  }
  unint64_t v8 = 0;
LABEL_9:
  re::DynamicArray<re::StringID>::resize((uint64_t)(v3 + 56), v8);
  re::DynamicArray<re::StringID>::resize((uint64_t)(v3 + 96), v8);
  re::DynamicArray<re::GenericSRT<float>>::resize((void *)v3 + 17, v8);
  uint64_t v9 = *(unsigned int *)(a1 + 64);
  if (v9)
  {
    uint64_t v10 = 0;
    double v11 = (int *)(*(void *)(a1 + 48) + 8);
    while (1)
    {
      int v12 = *v11;
      v11 += 8;
      if (v12 < 0) {
        break;
      }
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(a1 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 != v10)
  {
    uint64_t v26 = v10;
    while (1)
    {
      uint64_t v27 = *(void *)(a1 + 48) + 32 * v26;
      unint64_t v28 = *(unsigned int *)(v27 + 12);
      if (*((void *)v3 + 9) <= v28) {
        break;
      }
      re::StringID::operator=((unint64_t *)(*((void *)v3 + 11) + 16 * v28), (uint64_t *)(v27 + 16));
      if (*(_DWORD *)(a1 + 64) <= (v10 + 1)) {
        int v29 = v10 + 1;
      }
      else {
        int v29 = *(_DWORD *)(a1 + 64);
      }
      while (1)
      {
        uint64_t v26 = (v10 + 1);
        if (v29 - 1 == v10) {
          break;
        }
        LODWORD(v10) = v10 + 1;
        int v30 = v26;
        if ((*(_DWORD *)(*(void *)(a1 + 48) + 32 * v26 + 8) & 0x80000000) != 0) {
          goto LABEL_48;
        }
      }
      int v30 = v29;
LABEL_48:
      LODWORD(v10) = v30;
      if (v9 == v30) {
        goto LABEL_49;
      }
    }
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
LABEL_49:
  uint64_t v31 = *(unsigned int *)(a1 + 112);
  if (v31)
  {
    uint64_t v32 = 0;
    long long v33 = (int *)(*(void *)(a1 + 96) + 8);
    while (1)
    {
      int v34 = *v33;
      v33 += 8;
      if (v34 < 0) {
        break;
      }
      if (v31 == ++v32)
      {
        LODWORD(v32) = *(_DWORD *)(a1 + 112);
        break;
      }
    }
  }
  else
  {
    LODWORD(v32) = 0;
  }
  if (v31 != v32)
  {
    uint64_t v35 = v32;
    while (1)
    {
      uint64_t v36 = *(void *)(a1 + 96) + 32 * v35;
      unint64_t v37 = *(unsigned int *)(v36 + 12);
      if (*((void *)v3 + 14) <= v37) {
        break;
      }
      re::StringID::operator=((unint64_t *)(*((void *)v3 + 16) + 16 * v37), (uint64_t *)(v36 + 16));
      if (*(_DWORD *)(a1 + 112) <= (v32 + 1)) {
        int v38 = v32 + 1;
      }
      else {
        int v38 = *(_DWORD *)(a1 + 112);
      }
      while (1)
      {
        uint64_t v35 = (v32 + 1);
        if (v38 - 1 == v32) {
          break;
        }
        LODWORD(v32) = v32 + 1;
        int v39 = v35;
        if ((*(_DWORD *)(*(void *)(a1 + 96) + 32 * v35 + 8) & 0x80000000) != 0) {
          goto LABEL_65;
        }
      }
      int v39 = v38;
LABEL_65:
      LODWORD(v32) = v39;
      if (v31 == v39) {
        goto LABEL_66;
      }
    }
LABEL_85:
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
LABEL_66:
  uint64_t v40 = *(unsigned int *)(a1 + 160);
  if (v40)
  {
    uint64_t v41 = 0;
    uint64_t v42 = (int *)(*(void *)(a1 + 144) + 8);
    while (1)
    {
      int v43 = *v42;
      v42 += 16;
      if (v43 < 0) {
        break;
      }
      if (v40 == ++v41)
      {
        LODWORD(v41) = *(_DWORD *)(a1 + 160);
        break;
      }
    }
  }
  else
  {
    LODWORD(v41) = 0;
  }
  if (v40 != v41)
  {
    uint64_t v44 = v41;
    while (1)
    {
      uint64_t v45 = *(void *)(a1 + 144) + (v44 << 6);
      unint64_t v46 = *(unsigned int *)(v45 + 12);
      if (*((void *)v3 + 19) <= v46) {
        break;
      }
      int v47 = (_OWORD *)(*((void *)v3 + 21) + 48 * v46);
      long long v48 = *(_OWORD *)(v45 + 16);
      long long v49 = *(_OWORD *)(v45 + 48);
      v47[1] = *(_OWORD *)(v45 + 32);
      v47[2] = v49;
      _OWORD *v47 = v48;
      if (*(_DWORD *)(a1 + 160) <= (v41 + 1)) {
        int v50 = v41 + 1;
      }
      else {
        int v50 = *(_DWORD *)(a1 + 160);
      }
      while (1)
      {
        uint64_t v44 = (v41 + 1);
        if (v50 - 1 == v41) {
          break;
        }
        LODWORD(v41) = v41 + 1;
        int v51 = v44;
        if ((*(_DWORD *)(*(void *)(a1 + 144) + (v44 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_82;
        }
      }
      int v51 = v50;
LABEL_82:
      LODWORD(v41) = v51;
      if (v40 == v51) {
        return v3;
      }
    }
LABEL_86:
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v3;
}

void *REMeshSceneComponentSetInstances(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v22 = (re::StringID *)(a1 + 32);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 32);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 80);
  unint64_t v4 = (unint64_t *)(a1 + 128);
  re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 128);
  unsigned int v23 = 0;
  unint64_t v5 = a2[9];
  if (v5)
  {
    unsigned int v6 = 0;
    while (v5 > v6)
    {
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>(v22, &v23, (StringID *)(a2[11] + 16 * v6));
      unint64_t v5 = a2[14];
      if (v5 <= v6) {
        goto LABEL_22;
      }
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>((re::StringID *)(a1 + 80), &v23, (StringID *)(a2[16] + 16 * v6));
      unint64_t v5 = a2[19];
      if (v5 <= v6) {
        goto LABEL_23;
      }
      uint64_t v7 = a2[21];
      unint64_t v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v6 ^ ((unint64_t)v6 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (v6 ^ ((unint64_t)v6 >> 30))) >> 27));
      unint64_t v9 = v8 ^ (v8 >> 31);
      unint64_t v10 = *v4;
      if (!*v4
        || (unint64_t v10 = v9 % *(unsigned int *)(a1 + 152),
            uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 136) + 4 * v10),
            v11 == 0x7FFFFFFF))
      {
LABEL_11:
        uint64_t v13 = *(unsigned int *)(a1 + 164);
        if (v13 == 0x7FFFFFFF)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 160);
          int v14 = v13;
          if (v13 == *(_DWORD *)(a1 + 152))
          {
            re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1 + 128, 2 * *(_DWORD *)(a1 + 156));
            unint64_t v10 = v9 % *(unsigned int *)(a1 + 152);
            int v14 = *(_DWORD *)(a1 + 160);
          }
          *(_DWORD *)(a1 + 160) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 144);
          int v16 = *(_DWORD *)(v15 + (v13 << 6) + 8);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 144);
          int v16 = *(_DWORD *)(v15 + (v13 << 6) + 8);
          *(_DWORD *)(a1 + 164) = v16 & 0x7FFFFFFF;
        }
        unint64_t v17 = (long long *)(v7 + 48 * v6);
        *(_DWORD *)(v15 + (v13 << 6) + 8) = v16 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 144) + (v13 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 144) + (v13 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 136) + 4 * v10);
        *(void *)(*(void *)(a1 + 144) + (v13 << 6)) = v9;
        *(_DWORD *)(*(void *)(a1 + 144) + (v13 << 6) + 12) = v6;
        int v18 = (_OWORD *)(*(void *)(a1 + 144) + (v13 << 6));
        long long v19 = *v17;
        long long v20 = v17[2];
        v18[2] = v17[1];
        float v18[3] = v20;
        v18[1] = v19;
        *(_DWORD *)(*(void *)(a1 + 136) + 4 * v10) = v13;
        ++*(_DWORD *)(a1 + 156);
        ++*(_DWORD *)(a1 + 168);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 144);
        while (*(_DWORD *)(v12 + (v11 << 6) + 12) != v6)
        {
          uint64_t v11 = *(_DWORD *)(v12 + (v11 << 6) + 8) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF) {
            goto LABEL_11;
          }
        }
      }
      unsigned int v23 = ++v6;
      unint64_t v5 = a2[9];
      if (v6 >= v5) {
        goto LABEL_18;
      }
    }
    uint64_t v24 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    uint64_t v24 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    uint64_t v24 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v25 = 136315906;
    uint64_t v26 = "operator[]";
    __int16 v27 = 1024;
    int v28 = 789;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    __int16 v31 = 2048;
    unint64_t v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_18:
  return re::ecs2::Component::markDirty((void *)a1);
}

re::StringID *re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add<re::StringID&>(re::StringID *result, _DWORD *a2, StringID *a3)
{
  unint64_t v5 = result;
  unint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *((unsigned int *)result + 6);
    uint64_t v10 = *(unsigned int *)(*((void *)result + 1) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *((void *)result + 2);
      if (*(_DWORD *)(v11 + 32 * v10 + 12) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(_DWORD *)(v11 + 32 * v10 + 12) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t v12 = *((unsigned int *)result + 9);
  if (v12 == 0x7FFFFFFF)
  {
    uint64_t v12 = *((unsigned int *)result + 8);
    int v13 = v12;
    if (v12 == *((_DWORD *)result + 6))
    {
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)result, 2 * *((_DWORD *)result + 7));
      LODWORD(v9) = v8 % *((unsigned int *)v5 + 6);
      int v13 = *((_DWORD *)v5 + 8);
    }
    *((_DWORD *)v5 + 8) = v13 + 1;
    uint64_t v14 = *((void *)v5 + 2);
    int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
  }
  else
  {
    uint64_t v14 = *((void *)result + 2);
    int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
    *((_DWORD *)result + 9) = v15 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*((void *)v5 + 2) + 32 * v12 + 8) = *(_DWORD *)(*((void *)v5 + 2) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v5 + 1) + 4 * v9);
  *(void *)(*((void *)v5 + 2) + 32 * v12) = v8;
  *(_DWORD *)(*((void *)v5 + 2) + 32 * v12 + 12) = *a2;
  uint64_t result = re::StringID::StringID((re::StringID *)(*((void *)v5 + 2) + 32 * v12 + 16), a3);
  *(_DWORD *)(*((void *)v5 + 1) + 4 * v9) = v12;
  ++*((_DWORD *)v5 + 7);
  ++*((_DWORD *)v5 + 10);
  return result;
}

void REMeshSceneComponentModifyInstances(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = REMeshSceneComponentCopyInstances(a1);
  (*(void (**)(uint64_t, char *))(a2 + 16))(a2, v4);
  REMeshSceneComponentSetInstances(a1, v4);
  CFRelease(v4);
}

id REVFXAssetEnumerateBuiltInAssets(re *a1)
{
  Class VFXSceneClass = re::getVFXSceneClass(a1);
  if (VFXSceneClass)
  {
    uint64_t v2 = [(objc_class *)VFXSceneClass builtinEffectIdentifiers];
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v5, 2u);
    }

    uint64_t v2 = 0;
  }
  return v2;
}

id REVFXAssetGetBuiltInEffectsBundle(re *a1)
{
  Class VFXSceneClass = re::getVFXSceneClass(a1);
  if (VFXSceneClass)
  {
    uint64_t v2 = [(objc_class *)VFXSceneClass vfxAssetsFrameworkBundle];
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v5, 2u);
    }

    uint64_t v2 = 0;
  }
  return v2;
}

id REVFXGetLibraryURLForSystemName(void *a1)
{
  uint64_t v1 = a1;
  Class VFXSceneClass = re::getVFXSceneClass(v1);
  if (VFXSceneClass)
  {
    uint64_t v3 = [(objc_class *)VFXSceneClass vfxLibraryURLFor:v1];
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", v6, 2u);
    }

    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t REVFXAssetGetAssetVersion(uint64_t a1)
{
  uint64_t v1 = a1;
  re::AssetAPIHelper::assetHandleCreate(a1, v6);
  uint64_t v2 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v6);
  if (v1)
  {
    uint64_t v3 = [*(id *)(v2 + 64) scene];
    unint64_t v4 = v3;
    if (v3) {
      uint64_t v1 = [v3 version];
    }
    else {
      uint64_t v1 = 0;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  return v1;
}

uint64_t re::AssetHandle::asset<re::VFXAsset>(re::VFXAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::VFXAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    unint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = v4;
      unint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        unint64_t v8 = (char *)v7[18];
      }
      else {
        unint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void REVFXAssetEnumerateParameterInfos(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v28);
  uint64_t v4 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v28);
  if (v4)
  {
    id v5 = *(id *)(v4 + 64);
    unint64_t v6 = [v5 scene];
    if (v6)
    {
      long long v20 = v6;
      id v21 = v5;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      obuint64_t j = [v6 bindings];
      uint64_t v7 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v23 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v25 != v23) {
              objc_enumerationMutation(obj);
            }
            uint64_t v10 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            uint64_t v11 = [v10 userManual];
            uint64_t v12 = [v10 identifier];
            int v13 = [v10 objectName];
            uint64_t v14 = [v10 bindingName];
            uint64_t v15 = [v10 type];
            uint64_t v16 = [v10 semantic];
            [v10 min];
            double v18 = v17;
            [v10 max];
            v3[2](v3, v12, v13, v14, v15, v16, v11, v18, v19);
          }
          uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
        }
        while (v8);
      }

      unint64_t v6 = v20;
      id v5 = v21;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
}

void REVFXAssetEnumerateParameterInfosWithEnum(uint64_t a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v29);
  uint64_t v3 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v29);
  if (v3)
  {
    id v4 = *(id *)(v3 + 64);
    id v5 = [v4 scene];
    if (v5)
    {
      double v19 = v5;
      id v20 = v4;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      obuint64_t j = [v5 bindings];
      uint64_t v24 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v24)
      {
        uint64_t v22 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v26 != v22) {
              objc_enumerationMutation(obj);
            }
            uint64_t v7 = *(void **)(*((void *)&v25 + 1) + 8 * i);
            uint64_t v8 = [v7 userManual];
            int v9 = [v7 enumName];
            uint64_t v10 = [v7 enumCases];
            uint64_t v11 = [v7 identifier];
            uint64_t v12 = [v7 objectName];
            int v13 = [v7 bindingName];
            uint64_t v14 = [v7 type];
            uint64_t v15 = [v7 semantic];
            [v7 min];
            double v17 = v16;
            [v7 max];
            v23[2](v23, v11, v12, v13, v14, v15, v8, v9, v17, v18, v10);
          }
          uint64_t v24 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
        }
        while (v24);
      }

      id v5 = v19;
      id v4 = v20;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
}

void REVFXAssetEnumerateParameterDescriptions(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  re::AssetAPIHelper::assetHandleCreate(a1, v21);
  uint64_t v4 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v21);
  if (v4)
  {
    id v5 = *(id *)(v4 + 64);
    unint64_t v6 = [v5 scene];
    if (v6)
    {
      double v16 = v6;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v7 = [v6 bindings];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)v18;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v18 != v10) {
              objc_enumerationMutation(v7);
            }
            uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
            int v13 = [v12 identifier];
            uint64_t v14 = [v12 objectName];
            uint64_t v15 = [v12 bindingName];
            v3[2](v3, v13, v14, v15, [v12 type]);
          }
          uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
        }
        while (v9);
      }

      unint64_t v6 = v16;
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v21);
}

void REVFXAssetFindParameterInfo(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v24);
  uint64_t v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v24);
  if (v10)
  {
    uint64_t v11 = [*(id *)(v10 + 64) scene];
    uint64_t v12 = v11;
    if (v11)
    {
      if (v8) {
        [v11 bindingOf:v7 named:v8];
      }
      else {
      int v13 = [v11 firstBindingWithName:0];
      }
      uint64_t v14 = v13;
      if (v13)
      {
        uint64_t v23 = [v13 userManual];
        uint64_t v15 = [v14 identifier];
        double v16 = [v14 objectName];
        long long v17 = [v14 bindingName];
        uint64_t v18 = [v14 type];
        uint64_t v19 = [v14 semantic];
        [v14 min];
        double v21 = v20;
        [v14 max];
        v9[2](v9, v15, v16, v17, v18, v19, v23, v21, v22);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
}

void REVFXAssetFindParameterInfoWithEnum(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v27);
  uint64_t v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v27);
  if (v10)
  {
    uint64_t v11 = [*(id *)(v10 + 64) scene];
    uint64_t v12 = v11;
    if (v11)
    {
      if (v8) {
        [v11 bindingOf:v7 named:v8];
      }
      else {
      int v13 = [v11 firstBindingWithName:0];
      }
      uint64_t v14 = v13;
      if (v13)
      {
        long long v26 = [v13 userManual];
        long long v25 = [v14 enumName];
        uint64_t v15 = [v14 enumCases];
        double v16 = [v14 identifier];
        [v14 objectName];
        long long v17 = v24 = v7;
        uint64_t v18 = [v14 bindingName];
        uint64_t v19 = [v14 type];
        uint64_t v20 = [v14 semantic];
        [v14 min];
        double v22 = v21;
        [v14 max];
        v9[2](v9, v16, v17, v18, v19, v20, v26, v25, v22, v23, v15);

        id v7 = v24;
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
}

void REVFXAssetFindParameterDescription(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  re::AssetAPIHelper::assetHandleCreate(a1, v18);
  uint64_t v10 = re::AssetHandle::asset<re::VFXAsset>((re::VFXAsset *)v18);
  if (v10)
  {
    uint64_t v11 = [*(id *)(v10 + 64) scene];
    uint64_t v12 = v11;
    if (v11)
    {
      if (v8) {
        [v11 bindingOf:v7 named:v8];
      }
      else {
      int v13 = [v11 firstBindingWithName:0];
      }
      uint64_t v14 = v13;
      if (v13)
      {
        uint64_t v15 = [v13 identifier];
        double v16 = [v14 objectName];
        long long v17 = [v14 bindingName];
        v9[2](v9, v15, v16, v17, [v14 type]);
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
}

uint64_t RERenderManagerGetCameraStreamManager(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void RECameraStreamManagerSetARKitPassthrough(uint64_t a1, void *a2, void *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, float a8)
{
  id v11 = a2;
  id v12 = a3;
  uint64_t v20 = v11;
  id v13 = v11;
  id v19 = v12;
  id v14 = v12;
  *(__n128 *)(a1 + 1760) = a4;
  *(__n128 *)(a1 + 1776) = a5;
  *(__n128 *)(a1 + 1792) = a6;
  *(__n128 *)(a1 + 1808) = a7;
  *(float *)(a1 + 18physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = a8;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1832), &v20);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 1840), &v19);
  if (v19)
  {

    id v19 = 0;
  }
  if (v20)
  {

    uint64_t v20 = 0;
  }
}

void *REBallSocketJointComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REBallSocketJointComponentGetBodyA(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
}

uint64_t REBallSocketJointComponentSetBodyA(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 32), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

char *REBallSocketJointComponentGetBodyB(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(void *)(a1 + 16));
}

uint64_t REBallSocketJointComponentSetBodyB(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 56), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REBallSocketJointComponentGetLocalAnchorPoseA(__n128 *a1)
{
  return a1[5];
}

uint64_t REBallSocketJointComponentSetLocalAnchorPoseA(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 80) = a2;
  *(__n128 *)(this + 96) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REBallSocketJointComponentGetLocalAnchorPoseB(__n128 *a1)
{
  return a1[7];
}

uint64_t REBallSocketJointComponentSetLocalAnchorPoseB(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 112) = a2;
  *(__n128 *)(this + 128) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REBallSocketJointComponentGetCollisionsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t REBallSocketJointComponentSetCollisionsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 144) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

void *REHingeJointComponentGetComponentType()
{
  if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1) {
    dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
  }
  return re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

char *REHingeJointComponentGetBodyA(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(void *)(a1 + 16));
}

uint64_t REHingeJointComponentSetBodyA(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 32), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

char *REHingeJointComponentGetBodyB(uint64_t a1)
{
  return re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(void *)(a1 + 16));
}

uint64_t REHingeJointComponentSetBodyB(uint64_t a1, uint64_t a2)
{
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 56), a2);
  return re::ecs2::Component::enqueueMarkDirty(a1);
}

__n128 REHingeJointComponentGetLocalAnchorPoseA(__n128 *a1)
{
  return a1[5];
}

uint64_t REHingeJointComponentSetLocalAnchorPoseA(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 80) = a2;
  *(__n128 *)(this + 96) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

__n128 REHingeJointComponentGetLocalAnchorPoseB(__n128 *a1)
{
  return a1[7];
}

uint64_t REHingeJointComponentSetLocalAnchorPoseB(uint64_t this, __n128 a2, __n128 a3)
{
  *(__n128 *)(this + 112) = a2;
  *(__n128 *)(this + 128) = a3;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REHingeJointComponentGetCollisionsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t REHingeJointComponentSetCollisionsEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 144) = a2;
  return re::ecs2::Component::enqueueMarkDirty(this);
}

uint64_t REMeshSortingComponentGetSortGroupId(uint64_t a1)
{
  uint64_t v1 = 176;
  if (!*(void *)(a1 + 176)) {
    uint64_t v1 = 32;
  }
  return *(void *)(a1 + v1);
}

void **RETimelineDefinitionCreateTimelineAsset(AssetService *a1, uint64_t a2)
{
  if (v5[1])
  {
    uint64_t v2 = v5[0];
    if (v5[0]) {
      uint64_t v3 = v5[0] + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return v2;
}

re::TimelineAsset *anonymous namespace'::TimelineDefinition::assetHandle(void ***this, AssetService *a2, uint64_t a3)
{
  id v5 = (_anonymous_namespace_::TimelineDefinition *)this;
  unint64_t v6 = (const re::AssetHandle *)&a2[3];
  if (!a2[4].var0) {
    goto LABEL_15;
  }
  if (!LOBYTE(a2[11].var0)) {
    return re::AssetHandle::AssetHandle(v5, v6);
  }
  var0 = a2[6].var0;
  if (!var0)
  {
    uint64_t v8 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a2[3]);
    if (v8) {
      var0 = *(void ***)(v8 + 8);
    }
    else {
      var0 = 0;
    }
  }
  re::StringID::StringID((re::StringID *)&v20, (const StringID *)(var0 + 3));
  if (LOBYTE(a2[11].var0))
  {
    if ((v20 ^ (unint64_t)a2[12].var0) >= 2)
    {
      re::StringID::destroyString((re::StringID *)&v20);
      goto LABEL_15;
    }
    uint64_t v9 = a2[13].var0;
    if (v9 != (void **)__s2)
    {
      int v10 = strcmp((const char *)v9, __s2);
      goto LABEL_12;
    }
    re::StringID::destroyString((re::StringID *)&v20);
    return re::AssetHandle::AssetHandle(v5, v6);
  }
  int v10 = LOBYTE(a2[11].var0) | 1;
LABEL_12:
  re::StringID::destroyString((re::StringID *)&v20);
  if (!v10) {
    return re::AssetHandle::AssetHandle(v5, v6);
  }
LABEL_15:
  id v11 = a2[6].var0;
  if (!v11)
  {
    this = (void ***)re::AssetHandle::asset<re::TimelineAsset>(v6);
    if (this) {
      id v11 = this[1];
    }
    else {
      id v11 = 0;
    }
  }
  if (LOBYTE(a2[11].var0))
  {
    id v13 = (uint64_t *)&a2[12];
  }
  else
  {
    id v14 = a2[6].var0;
    if (!v14)
    {
      uint64_t v15 = re::AssetHandle::asset<re::TimelineAsset>(v6);
      if (v15) {
        id v14 = *(void ***)(v15 + 8);
      }
      else {
        id v14 = 0;
      }
    }
    id v13 = (uint64_t *)(v14 + 3);
  }
  re::StringID::operator=(v12 + 3, v13);
  uint64_t result = (re::TimelineAsset *)re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v12, v17);
  if (result)
  {
    uint64_t v18 = result;
    id v19 = re::TimelineAsset::assetType(result);
    return (re::TimelineAsset *)(*(uint64_t (**)(uint64_t, re::TimelineAsset *, uint64_t *, void, void, void))(*(void *)a3 + 416))(a3, v18, v19, 0, 0, 0);
  }
  else
  {
    *(void *)id v5 = 0;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
  }
  return result;
}

uint64_t RETimelineDefinitionCreateFromTimeline(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, (uint64_t *)&v5);
  uint64_t v2 = re::globalAllocators(v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  long long v7 = v5;
  long long v5 = 0uLL;
  uint64_t v8 = v6;
  uint64_t v6 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  return v3;
}

uint64_t RETimelineDefinitionGetTimelineType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  uint64_t v2 = *(unsigned int *)(v1 + 8);
  if (v2 > 0x3D) {
    return 0;
  }
  else {
}
  }

uint64_t RETimelineDefinitionGetAnimationLayer(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  return *(unsigned int *)(v1 + 12);
}

_anonymous_namespace_ *RETimelineDefinitionSetAnimationLayer(_anonymous_namespace_::TimelineDefinition *a1, int a2)
{
  *((_DWORD *)result + 3) = a2;
  return result;
}

_anonymous_namespace_ *anonymous namespace'::TimelineDefinition::timelineAssetData(_anonymous_namespace_::TimelineDefinition *this)
{
  float v12[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)((char *)this + 48);
  uint64_t result = (_anonymous_namespace_ *)*((void *)this + 6);
  if (result) {
    return result;
  }
  uint64_t v4 = (char *)this + 24;
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    unsigned int v6 = atomic_load((unsigned int *)(v5 + 704));
    if (v6 == 2) {
      goto LABEL_7;
    }
    uint64_t v7 = *((void *)this + 4);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::loadNow(v7, 0);
LABEL_7:
  uint64_t result = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>((_anonymous_namespace_::TimelineDefinition *)((char *)this + 24));
  if (result)
  {
    uint64_t v8 = *((void *)result + 1);
    v10[0] = &unk_26E730D60;
    v10[3] = v10;
    uint64_t v11 = v9;
    v12[3] = v12;
    v12[0] = &unk_26E730D60;
    std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::operator=[abi:nn180100](v3, &v11);
    std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v11);
    std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v10);
    if (*(void *)v4)
    {

      *(void *)uint64_t v4 = 0;
    }
    *((void *)this + 4) = 0;
    return (_anonymous_namespace_ *)*((void *)this + 6);
  }
  return result;
}

uint64_t RETimelineDefinitionGetFillMode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  return *(char *)(v1 + 16);
}

_anonymous_namespace_ *RETimelineDefinitionSetFillMode(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  *((unsigned char *)result + 16) = a2;
  return result;
}

uint64_t RETimelineDefinitionGetName(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v1 = a1 + 96;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (!v2)
    {
      uint64_t v3 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
      if (v3) {
        uint64_t v2 = *(void *)(v3 + 8);
      }
      else {
        uint64_t v2 = 0;
      }
    }
    uint64_t v1 = v2 + 24;
  }
  return *(void *)(v1 + 8);
}

void anonymous namespace'::TimelineDefinition::setName(_anonymous_namespace_::TimelineDefinition *this, const char *__s2)
{
  uint64_t v3 = (char *)this + 88;
  if (!*((unsigned char *)this + 88)) {
    goto LABEL_14;
  }
  if (__s2)
  {
    uint64_t v4 = *__s2;
    if (*__s2)
    {
      char v5 = __s2[1];
      if (v5)
      {
        unsigned int v6 = __s2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v13 = 2 * v4;
  v14[0] = __s2;
  if ((*((void *)this + 12) ^ (unint64_t)(2 * v4)) >= 2)
  {
    re::StringID::destroyString((re::StringID *)&v13);
    goto LABEL_14;
  }
  uint64_t v8 = (const char *)*((void *)this + 13);
  if (v8 == __s2)
  {
    int v10 = (re::StringID *)&v13;
LABEL_17:
    re::StringID::destroyString(v10);
    return;
  }
  int v9 = strcmp(v8, __s2);
  re::StringID::destroyString((re::StringID *)&v13);
  if (v9)
  {
LABEL_14:
    uint64_t v11 = 0;
    id v12 = "";
    LOBYTE(v13) = 1;
    v14[0] = v11;
    v14[1] = v12;
    uint64_t v11 = 0;
    id v12 = "";
    re::Optional<re::StringID>::operator=((uint64_t)v3, (unsigned __int8 *)&v13);
    if ((_BYTE)v13) {
      re::StringID::destroyString((re::StringID *)v14);
    }
    int v10 = (re::StringID *)&v11;
    goto LABEL_17;
  }
}

uint64_t RETimelineDefinitionGetTargetPath(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  if (*(unsigned char *)(v1 + 48)) {
    return *(void *)(v1 + 56);
  }
  else {
    return v1 + 49;
  }
}

re::DynamicString *RETimelineDefinitionSetTargetPath(_anonymous_namespace_::TimelineDefinition *a1, const char *a2)
{
  v5[0] = a2;
  v5[1] = strlen(a2);
  return re::DynamicString::operator=(v3, (uint64_t)v5);
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    uint64_t v5 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
    if (v5) {
      uint64_t v4 = *(void *)(v5 + 8);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  int v6 = *((_DWORD *)v3 + 2);
  if (v6 == *(_DWORD *)(v4 + 8))
  {
    switch(v6)
    {
      case 11:
        float v7 = *((double *)v3 + 10);
        float v8 = *(double *)(v4 + 80);
        if (v7 != v8 && vabds_f32(v7, v8) >= (float)((float)((float)(fabsf(v7) + fabsf(v8)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 88)
          && *(unsigned char *)(v4 + 88)
          && *((unsigned char *)v3 + 96)
          && *(unsigned char *)(v4 + 96)
          && !*((unsigned char *)v3 + 104)
          && !*(unsigned char *)(v4 + 104))
        {
          *(void *)long long buf = (char *)v3 + 88;
          *(void *)&buf[8] = (char *)v3 + 96;
          stat v123 = (float *)(v4 + 92);
          uint64_t v124 = v4 + 100;
          int v118 = buf;
          uint64_t v119 = 2;
          id v116 = &v123;
          uint64_t v117 = 2;
          uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<float>((re *)&v118, (uint64_t)&v116, (uint64_t)buf, 2uLL);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 12:
        float v45 = *((double *)v3 + 10);
        float v46 = *(double *)(v4 + 80);
        if (v45 != v46 && vabds_f32(v45, v46) >= (float)((float)((float)(fabsf(v45) + fabsf(v46)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 88)
          && *(unsigned char *)(v4 + 88)
          && *((unsigned char *)v3 + 104)
          && *(unsigned char *)(v4 + 104)
          && !*((unsigned char *)v3 + 120)
          && !*(unsigned char *)(v4 + 120))
        {
          *(void *)long long buf = (char *)v3 + 88;
          *(void *)&buf[8] = (char *)v3 + 104;
          stat v123 = (float *)(v4 + 96);
          uint64_t v124 = v4 + 112;
          int v118 = buf;
          uint64_t v119 = 2;
          id v116 = &v123;
          uint64_t v117 = 2;
          uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<double>((re *)&v118, (uint64_t)&v116, (uint64_t)buf, 2uLL);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 13:
        float v47 = *((double *)v3 + 10);
        float v48 = *(double *)(v4 + 80);
        if (v47 != v48 && vabds_f32(v47, v48) >= (float)((float)((float)(fabsf(v47) + fabsf(v48)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 88)
          && *(unsigned char *)(v4 + 88)
          && *((unsigned char *)v3 + 104)
          && *(unsigned char *)(v4 + 104)
          && !*((unsigned char *)v3 + 120)
          && !*(unsigned char *)(v4 + 120))
        {
          *(void *)long long buf = (char *)v3 + 88;
          *(void *)&buf[8] = (char *)v3 + 104;
          stat v123 = (float *)(v4 + 96);
          uint64_t v124 = v4 + 112;
          int v118 = buf;
          uint64_t v119 = 2;
          id v116 = &v123;
          uint64_t v117 = 2;
          uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector2<float>>((re *)&v118, &v116, (uint64_t)buf, 2uLL);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 14:
        float v49 = *((double *)v3 + 10);
        float v50 = *(double *)(v4 + 80);
        if (v49 != v50 && vabds_f32(v49, v50) >= (float)((float)((float)(fabsf(v49) + fabsf(v50)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 96)
          && *(unsigned char *)(v4 + 96)
          && *((unsigned char *)v3 + 128)
          && *(unsigned char *)(v4 + 128)
          && !*((unsigned char *)v3 + 160)
          && !*(unsigned char *)(v4 + 160))
        {
          goto LABEL_59;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 15:
        float v31 = *((double *)v3 + 10);
        float v32 = *(double *)(v4 + 80);
        if (v31 != v32 && vabds_f32(v31, v32) >= (float)((float)((float)(fabsf(v31) + fabsf(v32)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 96)
          && *(unsigned char *)(v4 + 96)
          && *((unsigned char *)v3 + 128)
          && *(unsigned char *)(v4 + 128)
          && !*((unsigned char *)v3 + 160)
          && !*(unsigned char *)(v4 + 160))
        {
LABEL_59:
          *(void *)long long buf = (char *)v3 + 96;
          *(void *)&buf[8] = (char *)v3 + 128;
          stat v123 = (float *)(v4 + 112);
          uint64_t v124 = v4 + 144;
          int v118 = buf;
          uint64_t v119 = 2;
          id v116 = &v123;
          uint64_t v117 = 2;
          uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v118, &v116, (uint64_t)buf, 2uLL);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 16:
        float v51 = *((double *)v3 + 10);
        float v52 = *(double *)(v4 + 80);
        if (v51 != v52 && vabds_f32(v51, v52) >= (float)((float)((float)(fabsf(v51) + fabsf(v52)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_403;
          }
          goto LABEL_292;
        }
        if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_399;
          }
          goto LABEL_239;
        }
        if (*((unsigned char *)v3 + 96)
          && *(unsigned char *)(v4 + 96)
          && *((unsigned char *)v3 + 128)
          && *(unsigned char *)(v4 + 128)
          && !*((unsigned char *)v3 + 160)
          && !*(unsigned char *)(v4 + 160))
        {
          *(void *)long long buf = (char *)v3 + 96;
          *(void *)&buf[8] = (char *)v3 + 128;
          stat v123 = (float *)(v4 + 112);
          uint64_t v124 = v4 + 144;
          int v118 = buf;
          uint64_t v119 = 2;
          id v116 = &v123;
          uint64_t v117 = 2;
          uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Quaternion<float>>((re *)&v118, &v116, (uint64_t)buf, 2uLL);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_401;
        }
        goto LABEL_254;
      case 17:
        float v53 = *((double *)v3 + 10);
        float v54 = *(double *)(v4 + 80);
        if (v53 == v54 || vabds_f32(v53, v54) < (float)((float)((float)(fabsf(v53) + fabsf(v54)) + 1.0) * 0.00001))
        {
          if (*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))
          {
            if (CoreRELog::onceToken != -1) {
LABEL_399:
            }
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_239:
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              long long v28 = "Cannot make additive animation from existing additive from-to-by animation.";
              goto LABEL_48;
            }
          }
          else
          {
            if (*((unsigned char *)v3 + 96)
              && *(unsigned char *)(v4 + 96)
              && *((unsigned char *)v3 + 160)
              && *(unsigned char *)(v4 + 160)
              && !*((unsigned char *)v3 + 224)
              && !*(unsigned char *)(v4 + 224))
            {
              *(void *)long long buf = (char *)v3 + 96;
              *(void *)&buf[8] = (char *)v3 + 160;
              stat v123 = (float *)(v4 + 112);
              uint64_t v124 = v4 + 176;
              int v118 = buf;
              uint64_t v119 = 2;
              id v116 = &v123;
              uint64_t v117 = 2;
              uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::GenericSRT<float>>((re *)&v118, (uint64_t)&v116, (uint64_t)buf, 2uLL);
              goto LABEL_192;
            }
            if (CoreRELog::onceToken != -1) {
LABEL_401:
            }
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_254:
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              long long v28 = "Currently only supports from-to animations.";
              goto LABEL_48;
            }
          }
        }
        else
        {
          if (CoreRELog::onceToken != -1) {
LABEL_403:
          }
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_292:
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Cannot make additive animation from differing from-to-by durations.";
            goto LABEL_48;
          }
        }
        break;
      case 18:
        uint64_t v55 = *(void *)(v4 + 232);
        if (*((void *)v3 + 29) != v55) {
          goto LABEL_214;
        }
        if (!v55) {
          goto LABEL_131;
        }
        long long v56 = (void *)*((void *)v3 + 31);
        long long v57 = *(void **)(v4 + 248);
        uint64_t v58 = 16 * v55;
        do
        {
          if (!re::StringID::operator==(v56, v57))
          {
LABEL_214:
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              long long v28 = "Cannot make additive animation from differing from' joints.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v56 += 2;
          v57 += 2;
          v58 -= 16;
        }
        while (v58);
LABEL_131:
        uint64_t v59 = *(void *)(v4 + 272);
        if (*((void *)v3 + 34) != v59) {
          goto LABEL_271;
        }
        if (v59)
        {
          long long v60 = (void *)*((void *)v3 + 36);
          uint64_t v61 = *(void **)(v4 + 288);
          uint64_t v62 = 16 * v59;
          while (re::StringID::operator==(v60, v61))
          {
            v60 += 2;
            v61 += 2;
            v62 -= 16;
            if (!v62) {
              goto LABEL_136;
            }
          }
LABEL_271:
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Cannot make additive animation from differing 'to' joints.";
            goto LABEL_48;
          }
          break;
        }
LABEL_136:
        uint64_t v63 = *(void *)(v4 + 312);
        if (*((void *)v3 + 39) != v63) {
          goto LABEL_358;
        }
        if (v63)
        {
          long long v64 = (void *)*((void *)v3 + 41);
          float v65 = *(void **)(v4 + 328);
          uint64_t v66 = 16 * v63;
          while (re::StringID::operator==(v64, v65))
          {
            v64 += 2;
            v65 += 2;
            v66 -= 16;
            if (!v66) {
              goto LABEL_141;
            }
          }
LABEL_358:
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Cannot make additive animation from differing 'by' joints.";
            goto LABEL_48;
          }
          break;
        }
LABEL_141:
        if (*((unsigned char *)v3 + 88)
          && *(unsigned char *)(v4 + 88)
          && *((unsigned char *)v3 + 120)
          && *(unsigned char *)(v4 + 120)
          && !*((unsigned char *)v3 + 152)
          && !*(unsigned char *)(v4 + 152))
        {
          if (*((void *)v3 + 13) == *(void *)(v4 + 104) && *((void *)v3 + 17) == *(void *)(v4 + 136))
          {
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Cannot make additive animations from differnt joint transform count.";
            goto LABEL_48;
          }
        }
        else
        {
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Currently only supports from-to animations.";
            goto LABEL_48;
          }
        }
        break;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_43;
      case 27:
        float v67 = *((float *)v3 + 19);
        float v68 = *(float *)(v4 + 76);
        if (v67 != v68 && vabds_f32(v67, v68) >= (float)((float)((float)(fabsf(v67) + fabsf(v68)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v69 = *((float *)v3 + 20);
        float v70 = *(float *)(v4 + 80);
        if (v69 != v70 && vabds_f32(v69, v70) >= (float)((float)((float)(fabsf(v69) + fabsf(v70)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        uint64_t v71 = (float *)*((void *)v3 + 13);
        if (!v71)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v71;
          uint64_t v72 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v72;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<float>((re *)buf, &v123, *(float **)buf, v71);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 28:
        float v33 = *((float *)v3 + 19);
        float v34 = *(float *)(v4 + 76);
        if (v33 != v34 && vabds_f32(v33, v34) >= (float)((float)((float)(fabsf(v33) + fabsf(v34)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v35 = *((float *)v3 + 20);
        float v36 = *(float *)(v4 + 80);
        if (v35 != v36 && vabds_f32(v35, v36) >= (float)((float)((float)(fabsf(v35) + fabsf(v36)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v37 = *((void *)v3 + 13);
        if (!v37)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v37;
          uint64_t v38 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v38;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<double>((re *)buf, (uint64_t)&v123, *(double **)buf, v37);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 29:
        float v73 = *((float *)v3 + 19);
        float v74 = *(float *)(v4 + 76);
        if (v73 != v74 && vabds_f32(v73, v74) >= (float)((float)((float)(fabsf(v73) + fabsf(v74)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v75 = *((float *)v3 + 20);
        float v76 = *(float *)(v4 + 80);
        if (v75 != v76 && vabds_f32(v75, v76) >= (float)((float)((float)(fabsf(v75) + fabsf(v76)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v77 = *((void *)v3 + 13);
        if (!v77)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v77;
          uint64_t v78 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v78;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Vector2<float>>((re *)buf, &v123, *(uint64_t *)buf, v77);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 30:
        float v79 = *((float *)v3 + 19);
        float v80 = *(float *)(v4 + 76);
        if (v79 != v80 && vabds_f32(v79, v80) >= (float)((float)((float)(fabsf(v79) + fabsf(v80)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v81 = *((float *)v3 + 20);
        float v82 = *(float *)(v4 + 80);
        if (v81 != v82 && vabds_f32(v81, v82) >= (float)((float)((float)(fabsf(v81) + fabsf(v82)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v83 = *((void *)v3 + 13);
        if (!v83)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72))) {
          goto LABEL_175;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 31:
        float v85 = *((float *)v3 + 19);
        float v86 = *(float *)(v4 + 76);
        if (v85 != v86 && vabds_f32(v85, v86) >= (float)((float)((float)(fabsf(v85) + fabsf(v86)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v87 = *((float *)v3 + 20);
        float v88 = *(float *)(v4 + 80);
        if (v87 != v88 && vabds_f32(v87, v88) >= (float)((float)((float)(fabsf(v87) + fabsf(v88)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v83 = *((void *)v3 + 13);
        if (!v83)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
LABEL_175:
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v83;
          uint64_t v84 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v84;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)buf, &v123, *(uint64_t *)buf, v83);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 32:
        float v89 = *((float *)v3 + 19);
        float v90 = *(float *)(v4 + 76);
        if (v89 != v90 && vabds_f32(v89, v90) >= (float)((float)((float)(fabsf(v89) + fabsf(v90)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v91 = *((float *)v3 + 20);
        float v92 = *(float *)(v4 + 80);
        if (v91 != v92 && vabds_f32(v91, v92) >= (float)((float)((float)(fabsf(v91) + fabsf(v92)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v93 = *((void *)v3 + 13);
        if (!v93)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v93;
          uint64_t v94 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v94;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Quaternion<float>>((re *)buf, &v123, *(uint64_t *)buf, v93);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 33:
        float v39 = *((float *)v3 + 19);
        float v40 = *(float *)(v4 + 76);
        if (v39 != v40 && vabds_f32(v39, v40) >= (float)((float)((float)(fabsf(v39) + fabsf(v40)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_402;
          }
          goto LABEL_303;
        }
        float v41 = *((float *)v3 + 20);
        float v42 = *(float *)(v4 + 80);
        if (v41 != v42 && vabds_f32(v41, v42) >= (float)((float)((float)(fabsf(v41) + fabsf(v42)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_404;
          }
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_400;
          }
          goto LABEL_269;
        }
        unint64_t v43 = *((void *)v3 + 13);
        if (!v43)
        {
          if (CoreRELog::onceToken != -1) {
            goto LABEL_405;
          }
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v43;
          uint64_t v44 = *(void *)(v4 + 104);
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v44;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::GenericSRT<float>>((re *)buf, (uint64_t)&v123, *(uint64_t *)buf, v43);
          goto LABEL_192;
        }
        if (CoreRELog::onceToken != -1) {
          goto LABEL_406;
        }
        goto LABEL_352;
      case 34:
        uint64_t v95 = *(void *)(v4 + 168);
        if (*((void *)v3 + 21) != v95) {
          goto LABEL_218;
        }
        if (!v95) {
          goto LABEL_198;
        }
        float v96 = (void *)*((void *)v3 + 23);
        float v97 = *(void **)(v4 + 184);
        uint64_t v98 = 16 * v95;
        do
        {
          if (!re::StringID::operator==(v96, v97))
          {
LABEL_218:
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              long long v28 = "Cannot make additive sampled animation from non-matching joints.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v96 += 2;
          v97 += 2;
          v98 -= 16;
        }
        while (v98);
LABEL_198:
        float v99 = (uint64_t *)*((void *)v3 + 13);
        if (v99)
        {
          unint64_t v100 = 0;
          uint64_t v101 = (uint64_t)v3 + 88;
          uint64_t v102 = (uint64_t *)(*((void *)v3 + 15) + 8);
          while (1)
          {
            uint64_t v103 = *v102;
            v102 += 3;
            if (v95 != v103) {
              break;
            }
            if (v99 == (uint64_t *)++v100) {
              goto LABEL_202;
            }
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            uint64_t v112 = *(void *)(re::DynamicArray<re::SkeletalPoseAssetData>::operator[](v101, v100) + 8);
            *(_DWORD *)long long buf = 134218496;
            *(void *)&uint8_t buf[4] = v100;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v95;
            __int16 v121 = 2048;
            uint64_t v122 = v112;
            long long v28 = "Joint transform for frame %zu do not match joint count (%zu != %zu).";
LABEL_370:
            __int16 v29 = v10;
            uint32_t v30 = 32;
            goto LABEL_49;
          }
          break;
        }
LABEL_202:
        uint64_t v104 = *(void *)(v4 + 104);
        if (v104)
        {
          unint64_t v105 = 0;
          float v106 = (uint64_t *)(*(void *)(v4 + 120) + 8);
          while (1)
          {
            uint64_t v107 = *v106;
            v106 += 3;
            if (v95 != v107) {
              break;
            }
            if (v104 == ++v105) {
              goto LABEL_206;
            }
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            uint64_t v114 = *(void *)(re::DynamicArray<re::AssetHandle>::operator[](v4 + 88, v105) + 8);
            *(_DWORD *)long long buf = 134218496;
            *(void *)&uint8_t buf[4] = v105;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v95;
            __int16 v121 = 2048;
            uint64_t v122 = v114;
            long long v28 = "Base joint transform for frame %zu do not match joint count (%zu != %zu).";
            goto LABEL_370;
          }
          break;
        }
LABEL_206:
        float v108 = *((float *)v3 + 19);
        float v109 = *(float *)(v4 + 76);
        if (v108 != v109
          && vabds_f32(v108, v109) >= (float)((float)((float)(fabsf(v108) + fabsf(v109)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
LABEL_402:
          }
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_303;
        }
        float v110 = *((float *)v3 + 20);
        float v111 = *(float *)(v4 + 80);
        if (v110 != v111
          && vabds_f32(v110, v111) >= (float)((float)((float)(fabsf(v110) + fabsf(v111)) + 1.0) * 0.00001))
        {
          if (CoreRELog::onceToken != -1) {
LABEL_404:
          }
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_318;
        }
        if (*((unsigned __int8 *)v3 + 73) != *(unsigned __int8 *)(v4 + 73))
        {
          if (CoreRELog::onceToken != -1) {
LABEL_400:
          }
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_269;
        }
        if (!v99)
        {
          if (CoreRELog::onceToken != -1) {
LABEL_405:
          }
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          goto LABEL_333;
        }
        if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
        {
          *(void *)long long buf = *((void *)v3 + 15);
          *(void *)&buf[8] = v99;
          stat v123 = *(float **)(v4 + 120);
          uint64_t v124 = v104;
          uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)buf, (uint64_t *)&v123, *(uint64_t *)buf, v99);
LABEL_192:
          *((unsigned char *)v3 + 72) = result;
          return result;
        }
        if (CoreRELog::onceToken != -1) {
LABEL_406:
        }
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        goto LABEL_352;
      default:
        if (v6 != 59)
        {
LABEL_43:
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            long long v28 = "Unsupported additive animation type.";
            goto LABEL_48;
          }
          break;
        }
        uint64_t v11 = *(void *)(v4 + 144);
        if (*((void *)v3 + 18) != v11) {
          goto LABEL_222;
        }
        if (!v11) {
          goto LABEL_27;
        }
        id v12 = (void *)*((void *)v3 + 20);
        uint64_t v13 = *(void **)(v4 + 160);
        uint64_t v14 = 16 * v11;
        do
        {
          if (!re::StringID::operator==(v12, v13))
          {
LABEL_222:
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              long long v28 = "Cannot make additive sampled animation from non-matching weights.";
              goto LABEL_48;
            }
            goto LABEL_20;
          }
          v12 += 2;
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
LABEL_27:
        uint64_t v15 = (void *)*((void *)v3 + 13);
        if (v15)
        {
          unint64_t v16 = 0;
          uint64_t v17 = (uint64_t)v3 + 88;
          uint64_t v18 = (uint64_t *)(*((void *)v3 + 15) + 8);
          while (1)
          {
            uint64_t v19 = *v18;
            v18 += 3;
            if (v11 != v19) {
              break;
            }
            if (v15 == (void *)++v16) {
              goto LABEL_31;
            }
          }
          if (CoreRELog::onceToken != -1) {
            dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
          }
          int v10 = (id)CoreRELog::log;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            uint64_t v113 = *(void *)(re::DynamicArray<re::SkeletalPoseAssetData>::operator[](v17, v16) + 8);
            *(_DWORD *)long long buf = 134218496;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v11;
            __int16 v121 = 2048;
            uint64_t v122 = v113;
            long long v28 = "Weights for frame %zu do not match weight count (%zu != %zu).";
            goto LABEL_370;
          }
        }
        else
        {
LABEL_31:
          uint64_t v20 = *(void *)(v4 + 104);
          if (v20)
          {
            unint64_t v21 = 0;
            double v22 = (uint64_t *)(*(void *)(v4 + 120) + 8);
            while (1)
            {
              uint64_t v23 = *v22;
              v22 += 3;
              if (v11 != v23) {
                break;
              }
              if (v20 == ++v21) {
                goto LABEL_35;
              }
            }
            if (CoreRELog::onceToken != -1) {
              dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
            }
            int v10 = (id)CoreRELog::log;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              uint64_t v115 = *(void *)(re::DynamicArray<re::AssetHandle>::operator[](v4 + 88, v21) + 8);
              *(_DWORD *)long long buf = 134218496;
              *(void *)&uint8_t buf[4] = v21;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v11;
              __int16 v121 = 2048;
              uint64_t v122 = v115;
              long long v28 = "Base weights for frame %zu do not match weight count (%zu != %zu).";
              goto LABEL_370;
            }
          }
          else
          {
LABEL_35:
            float v24 = *((float *)v3 + 19);
            float v25 = *(float *)(v4 + 76);
            if (v24 == v25 || vabds_f32(v24, v25) < (float)((float)((float)(fabsf(v24) + fabsf(v25)) + 1.0) * 0.00001))
            {
              float v26 = *((float *)v3 + 20);
              float v27 = *(float *)(v4 + 80);
              if (v26 == v27
                || vabds_f32(v26, v27) < (float)((float)((float)(fabsf(v26) + fabsf(v27)) + 1.0) * 0.00001))
              {
                if (*((unsigned __int8 *)v3 + 73) == *(unsigned __int8 *)(v4 + 73))
                {
                  if (v15)
                  {
                    if (!(*((unsigned __int8 *)v3 + 72) | *(unsigned __int8 *)(v4 + 72)))
                    {
                      *(void *)long long buf = *((void *)v3 + 15);
                      *(void *)&buf[8] = v15;
                      stat v123 = *(float **)(v4 + 120);
                      uint64_t v124 = v20;
                      uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>((re *)buf, &v123, *(uint64_t *)buf, v15);
                      goto LABEL_192;
                    }
                    if (CoreRELog::onceToken != -1) {
                      goto LABEL_406;
                    }
LABEL_352:
                    int v10 = (id)CoreRELog::log;
                    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      long long v28 = "Cannot make additive sampled animation from existing additive animation.";
                      goto LABEL_48;
                    }
                  }
                  else
                  {
                    if (CoreRELog::onceToken != -1) {
                      goto LABEL_405;
                    }
LABEL_333:
                    int v10 = (id)CoreRELog::log;
                    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      long long v28 = "Cannot make additive sampled animation from empty animation.";
                      goto LABEL_48;
                    }
                  }
                }
                else
                {
                  if (CoreRELog::onceToken != -1) {
                    goto LABEL_400;
                  }
LABEL_269:
                  int v10 = (id)CoreRELog::log;
                  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)long long buf = 0;
                    long long v28 = "Cannot make additive sampled animation from differing interpolation settings.";
                    goto LABEL_48;
                  }
                }
              }
              else
              {
                if (CoreRELog::onceToken != -1) {
                  goto LABEL_404;
                }
LABEL_318:
                int v10 = (id)CoreRELog::log;
                if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)long long buf = 0;
                  long long v28 = "Cannot make additive sampled animation from differing start times.";
                  goto LABEL_48;
                }
              }
            }
            else
            {
              if (CoreRELog::onceToken != -1) {
                goto LABEL_402;
              }
LABEL_303:
              int v10 = (id)CoreRELog::log;
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                long long v28 = "Cannot make additive sampled animation from differing intervals.";
                goto LABEL_48;
              }
            }
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      long long v28 = "Unable to make additive animation from differing timeline types.";
LABEL_48:
      __int16 v29 = v10;
      uint32_t v30 = 2;
LABEL_49:
      _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, v28, buf, v30);
    }
  }
LABEL_20:

  return 0;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  float v9 = a2;
  uint64_t v3 = v2;
  int v4 = *((_DWORD *)v2 + 2);
  if (v4 == 27)
  {
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    float v8 = (float *)*((void *)v2 + 13);
    uint64_t v14 = (float *)*((void *)v2 + 15);
    uint64_t v15 = v8;
    *(void *)long long buf = &v9;
    uint64_t v13 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<float>((re *)&v14, (float **)buf, v14, v8);
  }
  else
  {
    if (v4 != 11)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Unsupported additive float animation type.";
      goto LABEL_26;
    }
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v2 + 104))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v14 = (float *)((char *)v2 + 88);
    uint64_t v15 = (float *)((char *)v2 + 96);
    v10[0] = &v14;
    v10[1] = 2;
    uint64_t v11 = &v9;
    *(void *)long long buf = &v11;
    uint64_t v13 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<float>((re *)v10, (uint64_t)buf, (uint64_t)&v14, 2uLL);
  }
  *((unsigned char *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseDouble(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  double v9 = a2;
  uint64_t v3 = v2;
  int v4 = *((_DWORD *)v2 + 2);
  if (v4 == 28)
  {
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v8 = *((void *)v2 + 13);
    uint64_t v14 = (double *)*((void *)v2 + 15);
    uint64_t v15 = (char *)v8;
    *(void *)long long buf = &v9;
    uint64_t v13 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<double>((re *)&v14, (uint64_t)buf, v14, v8);
  }
  else
  {
    if (v4 != 12)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Unsupported additive double animation type.";
      goto LABEL_26;
    }
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v2 + 120))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v14 = (double *)((char *)v2 + 88);
    uint64_t v15 = (char *)v2 + 104;
    v10[0] = &v14;
    v10[1] = 2;
    uint64_t v11 = &v9;
    *(void *)long long buf = &v11;
    uint64_t v13 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<double>((re *)v10, (uint64_t)buf, (uint64_t)&v14, 2uLL);
  }
  *((unsigned char *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat2(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v4 = v3;
  int v5 = *((_DWORD *)v3 + 2);
  if (v5 == 29)
  {
    *(double *)uint64_t v11 = a2;
    if (*((unsigned char *)v3 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      float v7 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v9 = *((void *)v3 + 13);
    uint64_t v15 = *((void *)v3 + 15);
    uint64_t v16 = (char *)v9;
    *(void *)long long buf = v11;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Vector2<float>>((re *)&v15, buf, v15, v9);
  }
  else
  {
    if (v5 != 13)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      float v7 = "Unsupported additive float2 animation type.";
      goto LABEL_26;
    }
    double v10 = a2;
    if (*((unsigned char *)v3 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      float v7 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, v7, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v3 + 120))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v6 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      float v7 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v15 = (uint64_t)v3 + 88;
    uint64_t v16 = (char *)v3 + 104;
    v11[0] = &v15;
    v11[1] = 2;
    id v12 = &v10;
    *(void *)long long buf = &v12;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector2<float>>((re *)v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((unsigned char *)v4 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat3(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = v2;
  int v4 = *((_DWORD *)v2 + 2);
  if (v4 == 30)
  {
    __n128 v11 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v8 = *((void *)v2 + 13);
    uint64_t v15 = *((void *)v2 + 15);
    uint64_t v16 = (char *)v8;
    *(void *)long long buf = &v11;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 14)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Unsupported additive float3 animation type.";
      goto LABEL_26;
    }
    __n128 v10 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v15 = (uint64_t)v2 + 96;
    uint64_t v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    id v12 = &v10;
    *(void *)long long buf = &v12;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((unsigned char *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseFloat4(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = v2;
  int v4 = *((_DWORD *)v2 + 2);
  if (v4 == 31)
  {
    __n128 v11 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v8 = *((void *)v2 + 13);
    uint64_t v15 = *((void *)v2 + 15);
    uint64_t v16 = (char *)v8;
    *(void *)long long buf = &v11;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Vector3<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 15)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Unsupported additive float4 animation type.";
      goto LABEL_26;
    }
    __n128 v10 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v15 = (uint64_t)v2 + 96;
    uint64_t v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    id v12 = &v10;
    *(void *)long long buf = &v12;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Vector3<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((unsigned char *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseQuaternion(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = v2;
  int v4 = *((_DWORD *)v2 + 2);
  if (v4 == 32)
  {
    __n128 v11 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v8 = *((void *)v2 + 13);
    uint64_t v15 = *((void *)v2 + 15);
    uint64_t v16 = (char *)v8;
    *(void *)long long buf = &v11;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::Quaternion<float>>((re *)&v15, buf, v15, v8);
  }
  else
  {
    if (v4 != 16)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Unsupported additive quaternion animation type.";
      goto LABEL_26;
    }
    __n128 v10 = a2;
    if (*((unsigned char *)v2 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v2 + 160))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      int v5 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      int v6 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v15 = (uint64_t)v2 + 96;
    uint64_t v16 = (char *)v2 + 128;
    v11.n128_u64[0] = (unint64_t)&v15;
    v11.n128_u64[1] = 2;
    id v12 = &v10;
    *(void *)long long buf = &v12;
    uint64_t v14 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::Quaternion<float>>((re *)&v11, buf, (uint64_t)&v15, 2uLL);
  }
  *((unsigned char *)v3 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSRT(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v11[0] = a2;
  v11[1] = a3;
  void v11[2] = a4;
  int v5 = v4;
  int v6 = *((_DWORD *)v4 + 2);
  if (v6 == 33)
  {
    if (*((unsigned char *)v4 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      float v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v8 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_26;
    }
    unint64_t v10 = *((void *)v4 + 13);
    uint64_t v16 = *((void *)v4 + 15);
    uint64_t v17 = (char *)v10;
    *(void *)long long buf = v11;
    uint64_t v15 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForValues<re::GenericSRT<float>>((re *)&v16, (uint64_t)buf, v16, v10);
  }
  else
  {
    if (v6 != 17)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      float v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v8 = "Unsupported additive SRT animation type.";
      goto LABEL_26;
    }
    if (*((unsigned char *)v4 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      float v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v8 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_26:
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
LABEL_16:

      return 0;
    }
    if (*((unsigned char *)v4 + 224))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      float v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v8 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_26;
    }
    uint64_t v16 = (uint64_t)v4 + 96;
    uint64_t v17 = (char *)v4 + 160;
    v12[0] = &v16;
    v12[1] = 2;
    uint64_t v13 = v11;
    *(void *)long long buf = &v13;
    uint64_t v15 = 1;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::GenericSRT<float>>((re *)v12, (uint64_t)buf, (uint64_t)&v16, 2uLL);
  }
  *((unsigned char *)v5 + 72) = result;
  return result;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSkeletalPose(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v6 = v5;
  int v7 = *((_DWORD *)v5 + 2);
  if (v7 == 34)
  {
    if (*((void *)v5 + 21) != a3)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v10 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_46;
      }
      *(_WORD *)long long buf = 0;
      __n128 v11 = "Cannot make additive animation, number of joints do not match joint count.";
      goto LABEL_45;
    }
    uint64_t v12 = *((void *)v5 + 13);
    if (v12)
    {
      uint64_t v13 = (uint64_t *)(*((void *)v5 + 15) + 8);
      uint64_t v14 = 24 * v12;
      while (1)
      {
        uint64_t v15 = *v13;
        v13 += 3;
        if (v15 != a3) {
          break;
        }
        v14 -= 24;
        if (!v14) {
          goto LABEL_19;
        }
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v10 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_46;
      }
      *(_WORD *)long long buf = 0;
      __n128 v11 = "Cannot make additive animation, number of joint transforms do not match joint count.";
      goto LABEL_45;
    }
LABEL_19:
    *(void *)long long buf = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)float v27 = a2;
    uint64_t v28 = a3;
    re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)buf, (uint64_t)v27);
    if (*((unsigned char *)v6 + 72))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      *(_WORD *)float v27 = 0;
      uint64_t v17 = "Cannot make additive sampled animation from existing additive animation.";
      goto LABEL_54;
    }
    uint64_t v20 = (uint64_t *)*((void *)v6 + 13);
    uint64_t v29 = *((void *)v6 + 15);
    uint32_t v30 = v20;
    *(void *)float v27 = buf;
    uint64_t v28 = 1;
    uint64_t v21 = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)&v29, (uint64_t *)v27, v29, v20);
LABEL_57:
    uint64_t v18 = v21;
    *((unsigned char *)v6 + 72) = v21;
    goto LABEL_58;
  }
  if (v7 != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_WORD *)long long buf = 0;
    __n128 v11 = "Unsupported additive skeletal pose animation type.";
    goto LABEL_45;
  }
  if (*((unsigned char *)v5 + 88)) {
    BOOL v8 = *((void *)v5 + 13) == a3;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_WORD *)long long buf = 0;
    __n128 v11 = "Cannot make additive animation, from-to-by animation from joint count does not match.";
LABEL_45:
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
LABEL_46:

    return 0;
  }
  unint64_t v9 = (uint64_t *)((char *)v5 + 120);
  if (*((unsigned char *)v5 + 120) && *((void *)v5 + 17) != a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_WORD *)long long buf = 0;
    __n128 v11 = "Cannot make additive animation, from-to-by animation from joint count does not match.";
    goto LABEL_45;
  }
  *(void *)long long buf = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  *(void *)float v27 = a2;
  uint64_t v28 = a3;
  re::FixedArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)buf, (uint64_t)v27);
  if (!*((unsigned char *)v6 + 72))
  {
    if (*((unsigned char *)v6 + 152))
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      *(_WORD *)float v27 = 0;
      uint64_t v17 = "From-to-by animation with by value is already an additive animation.";
      goto LABEL_54;
    }
    uint64_t v29 = (uint64_t)v6 + 88;
    uint32_t v30 = v9;
    v22[0] = &v29;
    v22[1] = 2;
    uint64_t v23 = buf;
    *(void *)float v27 = &v23;
    uint64_t v28 = 1;
    uint64_t v21 = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>((re *)v22, v27, (uint64_t)&v29, (void *)2);
    goto LABEL_57;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v16 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    goto LABEL_55;
  }
  *(_WORD *)float v27 = 0;
  uint64_t v17 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_54:
  _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v17, v27, 2u);
LABEL_55:

  uint64_t v18 = 0;
LABEL_58:
  if (*(void *)buf && v25) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  return v18;
}

uint64_t RETimelineDefinitionMakeAdditiveFromBaseSkeletalPoses(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) != 34)
  {
    if (CoreRELog::onceToken == -1) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
  BOOL v8 = v7;
  if (*((unsigned char *)v7 + 72))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot make additive animation from existing additive from-to-by animation.";
    goto LABEL_33;
  }
  if (*((void *)v7 + 21) != a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot make additive animation, number of joints do not match joint count.";
    goto LABEL_33;
  }
  uint64_t v13 = *((void *)v7 + 13);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(*((void *)v7 + 15) + 8);
    uint64_t v15 = 24 * v13;
    while (1)
    {
      uint64_t v16 = *v14;
      v14 += 3;
      if (v16 != a4) {
        break;
      }
      v15 -= 24;
      if (!v15) {
        goto LABEL_16;
      }
    }
    if (CoreRELog::onceToken == -1)
    {
LABEL_30:
      unint64_t v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        unint64_t v10 = "Cannot make additive animation, number of joint transforms do not match joint count.";
LABEL_33:
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
LABEL_43:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_30;
  }
LABEL_16:
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
    {
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
      _os_crash();
      __break(1u);
    }
    else
    {
      if (v18)
      {
        uint64_t v20 = v18;
        uint64_t v21 = v18;
        if (a3 != 1)
        {
          bzero(v18, 24 * a3 - 24);
          uint64_t v21 = (_anonymous_namespace_ *)((char *)v20 + 24 * a3 - 24);
        }
        uint64_t v22 = 0;
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        uint64_t v23 = v20;
        *((void *)v21 + 2) = 0;
        while (1)
        {
          v27[0] = *(void *)(a2 + 8 * v22);
          v27[1] = a4;
          if (a3 == v22) {
            break;
          }
          re::FixedArray<re::GenericSRT<float>>::operator=(v23, (uint64_t)v27);
          ++v22;
          uint64_t v23 = (_anonymous_namespace_ *)((char *)v23 + 24);
          if (a3 == v22) {
            goto LABEL_35;
          }
        }
        int v27[2] = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        *(_OWORD *)long long buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v28 = 136315906;
        *(void *)&v28[4] = "operator[]";
        *(_WORD *)&v28[12] = 1024;
        *(_DWORD *)&v28[14] = 468;
        __int16 v29 = 2048;
        unint64_t v30 = a3;
        __int16 v31 = 2048;
        unint64_t v32 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_8:
        unint64_t v9 = (id)CoreRELog::log;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          unint64_t v10 = "Unsupported additive skeletal poses animation type.";
          goto LABEL_33;
        }
LABEL_9:

        return 0;
      }
    }
    re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v20 = 0;
LABEL_35:
  float v24 = (uint64_t *)*((void *)v8 + 13);
  *(void *)long long buf = *((void *)v8 + 15);
  *(void *)&uint8_t buf[8] = v24;
  *(void *)uint64_t v28 = v20;
  *(void *)&v28[8] = a3;
  uint64_t v11 = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)buf, (uint64_t *)v28, *(uint64_t *)buf, v24);
  *((unsigned char *)v8 + 72) = v11;
  if (a3)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 24 * a3;
    do
    {
      re::FixedArray<CoreIKTransform>::deinit((uint64_t *)((char *)v20 + v25));
      v25 += 24;
    }
    while (v26 != v25);
  }
  return v11;
}

BOOL RETimelineDefinitionMakeAdditiveFromBaseBlendShapeWeights(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  if (*((_DWORD *)v7 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Unsupported additive blend shape weights animation type.";
    goto LABEL_36;
  }
  BOOL v8 = v7;
  if (!*((unsigned char *)v7 + 72))
  {
    if (*((void *)v7 + 18) != a4)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v10 = "Cannot make additive animation, number of weights do not match weight count.";
      goto LABEL_36;
    }
    uint64_t v13 = *((void *)v7 + 13);
    if (v13)
    {
      uint64_t v14 = (uint64_t *)(*((void *)v7 + 15) + 8);
      uint64_t v15 = 24 * v13;
      while (1)
      {
        uint64_t v16 = *v14;
        v14 += 3;
        if (v16 != a4) {
          break;
        }
        v15 -= 24;
        if (!v15) {
          goto LABEL_17;
        }
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      *(_WORD *)long long buf = 0;
      unint64_t v10 = "Cannot make additive animation, number of weights do not match weight count.";
      goto LABEL_36;
    }
LABEL_17:
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)buf);
    uint64_t v28 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    int v27 = 0;
    float v24 = buf;
    re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(&v24, 0);
    ++v27;
    if (v25 >= a3)
    {
      if (!a3)
      {
LABEL_30:
        uint64_t v18 = (void *)*((void *)v8 + 13);
        uint64_t v21 = *((void *)v8 + 15);
        uint64_t v22 = v18;
        uint64_t v19 = v28;
        unint64_t v20 = v26;
        BOOL v11 = re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>((re *)&v21, &v19, v21, v18);
        *((unsigned char *)v8 + 72) = v11;
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v24);
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)buf);
        return v11;
      }
    }
    else
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::setCapacity(&v24, a3);
    }
    do
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v19 = *a2;
      unint64_t v20 = a4;
      re::FixedArray<int>::operator=((_anonymous_namespace_ *)&v21, (uint64_t)&v19);
      unint64_t v17 = v26;
      if (v26 >= v25)
      {
        re::DynamicArray<re::BlendShapeWeightsAssetData>::growCapacity(&v24, v26 + 1);
        unint64_t v17 = v26;
      }
      re::FixedArray<float>::FixedArray((uint64_t *)(v28 + 24 * v17), (uint64_t)&v21);
      ++v26;
      ++v27;
      if (v21 && v22) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      ++a2;
      --a3;
    }
    while (a3);
    goto LABEL_30;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unint64_t v9 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    goto LABEL_10;
  }
  *(_WORD *)long long buf = 0;
  unint64_t v10 = "Cannot make additive animation from existing additive from-to-by animation.";
LABEL_36:
  _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_10:

  return 0;
}

BOOL RETimelineDefinitionIsAdditive(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  BOOL result = 0;
  switch(*(_DWORD *)(v1 + 8))
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x25:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      BOOL result = *(unsigned __int8 *)(v1 + 72) != 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RETimelineDefinitionSetAdditive(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  uint64_t v4 = 0;
  switch(*((_DWORD *)v3 + 2))
  {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x25:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x30:
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      *((unsigned char *)v3 + 72) = a2;
      uint64_t v4 = 1;
      break;
    default:
      return v4;
  }
  return v4;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloatAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 120, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 11);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D3618;
  v8[0] = &unk_26E730E38;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E730E38;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByDoubleAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 144, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 12);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)uint64_t v4 = &unk_26E6CF670;
  v8[0] = &unk_26E730EB8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E730EB8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat2Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 144, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 13);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)uint64_t v4 = &unk_26E6CF7A0;
  v8[0] = &unk_26E730F38;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E730F38;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat3Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 208, 16);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 14);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  *(void *)uint64_t v4 = &unk_26E6CF8D0;
  v8[0] = &unk_26E730FB8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E730FB8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByFloat4Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 208, 16);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 15);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  *(void *)uint64_t v4 = &unk_26E6CFA00;
  v8[0] = &unk_26E731038;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731038;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByQuaternionAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 208, 16);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 16);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(void *)(v4 + 192) = 0;
  *(void *)uint64_t v4 = &unk_26E6CFB30;
  v8[0] = &unk_26E7310B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7310B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToBySRTAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 304, 16);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 17);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 96) = 0;
  *(unsigned char *)(v4 + 160) = 0;
  *(unsigned char *)(v4 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v4 + 288) = 0;
  *(void *)uint64_t v4 = &unk_26E6CFC60;
  v8[0] = &unk_26E731138;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731138;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToBySkeletalPoseAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 336, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 18);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)uint64_t v4 = &unk_26E6CFE28;
  *(void *)(v4 + 328) = 0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_DWORD *)(v4 + 280) = 0;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_DWORD *)(v4 + 320) = 0;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
  *(_DWORD *)(v4 + 240) = 0;
  v8[0] = &unk_26E7311B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7311B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 312, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 50);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0x3FF0000000000000;
  *(unsigned char *)(v4 + 88) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 192) = 0;
  *(void *)uint64_t v4 = &unk_26E6CFF58;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 216) = 0;
  *(void *)(v4 + 304) = 0;
  *(_OWORD *)(v4 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_DWORD *)(v4 + 256) = 0;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_DWORD *)(v4 + 296) = 0;
  v8[0] = &unk_26E731238;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731238;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  int v5 = v7;
  return v5;
}

double computeBlendTreeDuration(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0.0;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  double v4 = 0.0;
  do
  {
    uint64_t v5 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(*(void *)(a1 + 32) + v2));
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        double v7 = (*(double (**)(uint64_t))(*(void *)v6 + 40))(v6);
        if (v4 < v7) {
          double v4 = v7;
        }
      }
    }
    ++v3;
    v2 += 24;
  }
  while (v3 < *(void *)(a1 + 16));
  return v4;
}

double RETimelineDefinitionGetDuration(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  switch(*(_DWORD *)(v1 + 8))
  {
    case 1:
      uint64_t v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v1 + 72));
      if (!v11) {
        return 0.0;
      }
      if (*(unsigned char *)(v1 + 152)) {
        v4.n128_u64[0] = *(void *)(v1 + 160);
      }
      if (*(unsigned char *)(v1 + 96)) {
        double v23 = *(double *)(v1 + 104);
      }
      else {
        double v23 = 0.0;
      }
      if (*(unsigned char *)(v1 + 112))
      {
        if (!*(unsigned char *)(v1 + 152))
        {
          double v24 = *(double *)(v1 + 120);
LABEL_60:
          double v26 = v24 - v23;
          BOOL v20 = v24 < v23;
          v4.n128_u64[0] = 0;
          if (!v20) {
            v4.n128_f64[0] = v26;
          }
        }
      }
      else if (!*(unsigned char *)(v1 + 152))
      {
        uint64_t v25 = *(void *)(v11 + 16);
        if (v25) {
          (*(void (**)(uint64_t, __n128))(*(void *)v25 + 40))(v25, v4);
        }
        else {
          double v24 = 0.0;
        }
        goto LABEL_60;
      }
      double v21 = *(double *)(v1 + 144);
      float v22 = *(float *)(v1 + 168);
      return v21 + v4.n128_f64[0] / v22;
    case 2:
      if (!*(void *)(v1 + 88)) {
        return 0.0;
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      double v5 = 0.0;
      do
      {
        uint64_t v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(*(void *)(v1 + 104) + v12));
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15)
          {
            double v16 = (*(double (**)(uint64_t))(*(void *)v15 + 40))(v15);
            if (v5 < v16) {
              double v5 = v16;
            }
          }
        }
        ++v13;
        v12 += 24;
      }
      while (v13 < *(void *)(v1 + 88));
      return v5;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x3C:
      uint64_t v3 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(v1 + 80));
      if (!v3) {
        return 0.0;
      }
      if (*(unsigned char *)(v1 + 160)) {
        v4.n128_u64[0] = *(void *)(v1 + 168);
      }
      if (*(unsigned char *)(v1 + 104)) {
        double v8 = *(double *)(v1 + 112);
      }
      else {
        double v8 = 0.0;
      }
      if (*(unsigned char *)(v1 + 120))
      {
        if (*(unsigned char *)(v1 + 160)) {
          goto LABEL_47;
        }
        double v9 = *(double *)(v1 + 128);
      }
      else
      {
        if (*(unsigned char *)(v1 + 160)) {
          goto LABEL_47;
        }
        uint64_t v10 = *(void *)(v3 + 16);
        if (v10) {
          (*(void (**)(uint64_t, __n128))(*(void *)v10 + 40))(v10, v4);
        }
        else {
          double v9 = 0.0;
        }
      }
      double v19 = v9 - v8;
      BOOL v20 = v9 < v8;
      v4.n128_u64[0] = 0;
      if (!v20) {
        v4.n128_f64[0] = v19;
      }
LABEL_47:
      double v21 = *(double *)(v1 + 152);
      float v22 = *(float *)(v1 + 176);
      return v21 + v4.n128_f64[0] / v22;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x32:
      return *(double *)(v1 + 80);
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x3B:
      uint64_t v6 = *(void *)(v1 + 104);
      if (v6) {
        return (double)(unint64_t)(v6 - 1) * *(float *)(v1 + 76);
      }
      else {
        return 0.0;
      }
    case 0x25:
      return *(float *)(v1 + 76);
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
      return computeBlendTreeDuration(v1 + 248);
    case 0x30:
      return (float)re::TimelineEventData::totalDuration((re::TimelineEventData *)(v1 + 80));
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v17 = (id)CoreRELog::log;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v27 = 0;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Unsupported timeline for getting duration property.", v27, 2u);
      }

      return NAN;
  }
}

uint64_t RETimelineDefinitionSetDuration(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_2;
    default:
      if (v4 == 37)
      {
        float v7 = a2;
        *((float *)v3 + 19) = v7;
        return 1;
      }
      if (v4 == 50)
      {
LABEL_2:
        *((double *)v3 + 10) = a2;
        return 1;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v6 = (id)CoreRELog::log;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v8 = 0;
        _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Unsupported timeline for setting duration property.", v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    int v2 = *(unsigned __int8 *)(v1 + 88);
    uint64_t v3 = v1 + 92;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'from' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    int v2 = *(unsigned __int8 *)(v1 + 96);
    uint64_t v3 = v1 + 100;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'to' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloatByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 11)
  {
    int v2 = *(unsigned __int8 *)(v1 + 104);
    uint64_t v3 = v1 + 108;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float 'by' value from non-float from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloatFromValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      int v5 = *a2;
      if (!*((unsigned char *)v3 + 88)) {
        *((unsigned char *)v3 + 88) = 1;
      }
      *((_DWORD *)v3 + 23) = v5;
    }
    else if (*((unsigned char *)v3 + 88))
    {
      *((unsigned char *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'from' value for non-float from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 11;
}

BOOL RETimelineDefinitionSetFloatToValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      int v5 = *a2;
      if (!*((unsigned char *)v3 + 96)) {
        *((unsigned char *)v3 + 96) = 1;
      }
      *((_DWORD *)v3 + 25) = v5;
    }
    else if (*((unsigned char *)v3 + 96))
    {
      *((unsigned char *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'to' value for non-float from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 11;
}

BOOL RETimelineDefinitionSetFloatByValue(_anonymous_namespace_::TimelineDefinition *a1, int *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 11)
  {
    if (a2)
    {
      int v5 = *a2;
      if (!*((unsigned char *)v3 + 104)) {
        *((unsigned char *)v3 + 104) = 1;
      }
      *((_DWORD *)v3 + 27) = v5;
    }
    else if (*((unsigned char *)v3 + 104))
    {
      *((unsigned char *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float 'by' value for non-float from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 11;
}

uint64_t RETimelineDefinitionGetDoubleFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    int v2 = *(unsigned __int8 *)(v1 + 88);
    uint64_t v3 = v1 + 96;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'from' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetDoubleToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    int v2 = *(unsigned __int8 *)(v1 + 104);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'to' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetDoubleByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 12)
  {
    int v2 = *(unsigned __int8 *)(v1 + 120);
    uint64_t v3 = v1 + 128;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get double 'by' value from non-double from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetDoubleFromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 88)) {
        *((unsigned char *)v3 + 88) = 1;
      }
      *((void *)v3 + 12) = v5;
    }
    else if (*((unsigned char *)v3 + 88))
    {
      *((unsigned char *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'from' value for non-double from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 12;
}

BOOL RETimelineDefinitionSetDoubleToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 104)) {
        *((unsigned char *)v3 + 104) = 1;
      }
      *((void *)v3 + 14) = v5;
    }
    else if (*((unsigned char *)v3 + 104))
    {
      *((unsigned char *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'to' value for non-double from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 12;
}

BOOL RETimelineDefinitionSetDoubleByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 12)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 120)) {
        *((unsigned char *)v3 + 120) = 1;
      }
      *((void *)v3 + 16) = v5;
    }
    else if (*((unsigned char *)v3 + 120))
    {
      *((unsigned char *)v3 + 120) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set double 'by' value for non-double from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 12;
}

uint64_t RETimelineDefinitionGetFloat2FromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    int v2 = *(unsigned __int8 *)(v1 + 88);
    uint64_t v3 = v1 + 96;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'from' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat2ToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    int v2 = *(unsigned __int8 *)(v1 + 104);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'to' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat2ByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 13)
  {
    int v2 = *(unsigned __int8 *)(v1 + 120);
    uint64_t v3 = v1 + 128;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float2 'by' value from non-float2 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat2FromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 88)) {
        *((unsigned char *)v3 + 88) = 1;
      }
      *((void *)v3 + 12) = v5;
    }
    else if (*((unsigned char *)v3 + 88))
    {
      *((unsigned char *)v3 + 88) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'from' value for non-float2 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 13;
}

BOOL RETimelineDefinitionSetFloat2ToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 104)) {
        *((unsigned char *)v3 + 104) = 1;
      }
      *((void *)v3 + 14) = v5;
    }
    else if (*((unsigned char *)v3 + 104))
    {
      *((unsigned char *)v3 + 104) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'to' value for non-float2 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 13;
}

BOOL RETimelineDefinitionSetFloat2ByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 13)
  {
    if (a2)
    {
      uint64_t v5 = *a2;
      if (!*((unsigned char *)v3 + 120)) {
        *((unsigned char *)v3 + 120) = 1;
      }
      *((void *)v3 + 16) = v5;
    }
    else if (*((unsigned char *)v3 + 120))
    {
      *((unsigned char *)v3 + 120) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float2 'by' value for non-float2 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 13;
}

uint64_t RETimelineDefinitionGetFloat3FromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    int v2 = *(unsigned __int8 *)(v1 + 96);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'from' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat3ToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    int v2 = *(unsigned __int8 *)(v1 + 128);
    uint64_t v3 = v1 + 144;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'to' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat3ByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 14)
  {
    int v2 = *(unsigned __int8 *)(v1 + 160);
    uint64_t v3 = v1 + 176;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float3 'by' value from non-float3 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat3FromValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 96)) {
        *((unsigned char *)v3 + 96) = 1;
      }
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((unsigned char *)v3 + 96))
    {
      *((unsigned char *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'from' value for non-float3 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 14;
}

BOOL RETimelineDefinitionSetFloat3ToValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 128)) {
        *((unsigned char *)v3 + 128) = 1;
      }
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((unsigned char *)v3 + 128))
    {
      *((unsigned char *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'to' value for non-float3 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 14;
}

BOOL RETimelineDefinitionSetFloat3ByValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 14)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 160)) {
        *((unsigned char *)v3 + 160) = 1;
      }
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((unsigned char *)v3 + 160))
    {
      *((unsigned char *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float3 'by' value for non-float3 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 14;
}

uint64_t RETimelineDefinitionGetFloat4FromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    int v2 = *(unsigned __int8 *)(v1 + 96);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'from' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat4ToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    int v2 = *(unsigned __int8 *)(v1 + 128);
    uint64_t v3 = v1 + 144;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'to' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat4ByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 15)
  {
    int v2 = *(unsigned __int8 *)(v1 + 160);
    uint64_t v3 = v1 + 176;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get float4 'by' value from non-float4 from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetFloat4FromValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 96)) {
        *((unsigned char *)v3 + 96) = 1;
      }
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((unsigned char *)v3 + 96))
    {
      *((unsigned char *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'from' value for non-float4 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 15;
}

BOOL RETimelineDefinitionSetFloat4ToValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 128)) {
        *((unsigned char *)v3 + 128) = 1;
      }
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((unsigned char *)v3 + 128))
    {
      *((unsigned char *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'to' value for non-float4 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 15;
}

BOOL RETimelineDefinitionSetFloat4ByValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 15)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 160)) {
        *((unsigned char *)v3 + 160) = 1;
      }
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((unsigned char *)v3 + 160))
    {
      *((unsigned char *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set float4 'by' value for non-float4 from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 15;
}

uint64_t RETimelineDefinitionGetQuaternionFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    int v2 = *(unsigned __int8 *)(v1 + 96);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'from' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetQuaternionToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    int v2 = *(unsigned __int8 *)(v1 + 128);
    uint64_t v3 = v1 + 144;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'to' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetQuaternionByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 16)
  {
    int v2 = *(unsigned __int8 *)(v1 + 160);
    uint64_t v3 = v1 + 176;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get quaternion 'by' value from non-quaternion from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetQuaternionFromValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 96)) {
        *((unsigned char *)v3 + 96) = 1;
      }
      *((_OWORD *)v3 + 7) = v5;
    }
    else if (*((unsigned char *)v3 + 96))
    {
      *((unsigned char *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'from' value for non-quaternion from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 16;
}

BOOL RETimelineDefinitionSetQuaternionToValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 128)) {
        *((unsigned char *)v3 + 128) = 1;
      }
      *((_OWORD *)v3 + 9) = v5;
    }
    else if (*((unsigned char *)v3 + 128))
    {
      *((unsigned char *)v3 + 128) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'to' value for non-quaternion from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 16;
}

BOOL RETimelineDefinitionSetQuaternionByValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 16)
  {
    if (a2)
    {
      long long v5 = *a2;
      if (!*((unsigned char *)v3 + 160)) {
        *((unsigned char *)v3 + 160) = 1;
      }
      *((_OWORD *)v3 + 11) = v5;
    }
    else if (*((unsigned char *)v3 + 160))
    {
      *((unsigned char *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set quaternion 'by' value for non-quaternion from-to-by animation.", v8, 2u);
    }
  }
  return v4 == 16;
}

uint64_t RETimelineDefinitionGetSRTFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    int v2 = *(unsigned __int8 *)(v1 + 96);
    uint64_t v3 = v1 + 112;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'from' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetSRTToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    int v2 = *(unsigned __int8 *)(v1 + 160);
    uint64_t v3 = v1 + 176;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'to' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionGetSRTByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 17)
  {
    int v2 = *(unsigned __int8 *)(v1 + 224);
    uint64_t v3 = v1 + 240;
    if (v2) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get RESRT 'by' value from non-RESRT from-to-by animation.", v6, 2u);
    }

    return 0;
  }
}

BOOL RETimelineDefinitionSetSRTFromValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      long long v5 = a2[1];
      long long v13 = *a2;
      long long v14 = v5;
      long long v15 = a2[2];
      uint64_t v6 = (_OWORD *)((char *)v3 + 112);
      if (*((unsigned char *)v3 + 96))
      {
        long long v7 = *a2;
        long long v8 = a2[2];
        *((_OWORD *)v3 + 8) = a2[1];
        *((_OWORD *)v3 + 9) = v8;
        *uint64_t v6 = v7;
      }
      else
      {
        *((unsigned char *)v3 + 96) = 1;
        long long v11 = v14;
        *uint64_t v6 = v13;
        *((_OWORD *)v3 + 8) = v11;
        *((_OWORD *)v3 + 9) = v15;
      }
    }
    else if (*((unsigned char *)v3 + 96))
    {
      *((unsigned char *)v3 + 96) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'from' value for non-RESRT from-to-by animation.", v12, 2u);
    }
  }
  return v4 == 17;
}

BOOL RETimelineDefinitionSetSRTToValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      long long v5 = a2[1];
      long long v13 = *a2;
      long long v14 = v5;
      long long v15 = a2[2];
      uint64_t v6 = (_OWORD *)((char *)v3 + 176);
      if (*((unsigned char *)v3 + 160))
      {
        long long v7 = *a2;
        long long v8 = a2[2];
        *((_OWORD *)v3 + 12) = a2[1];
        *((_OWORD *)v3 + 13) = v8;
        *uint64_t v6 = v7;
      }
      else
      {
        *((unsigned char *)v3 + 160) = 1;
        long long v11 = v14;
        *uint64_t v6 = v13;
        *((_OWORD *)v3 + 12) = v11;
        *((_OWORD *)v3 + 13) = v15;
      }
    }
    else if (*((unsigned char *)v3 + 160))
    {
      *((unsigned char *)v3 + 160) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'to' value for non-RESRT from-to-by animation.", v12, 2u);
    }
  }
  return v4 == 17;
}

BOOL RETimelineDefinitionSetSRTByValue(_anonymous_namespace_::TimelineDefinition *a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 17)
  {
    if (a2)
    {
      long long v5 = a2[1];
      long long v13 = *a2;
      long long v14 = v5;
      long long v15 = a2[2];
      uint64_t v6 = (_OWORD *)((char *)v3 + 240);
      if (*((unsigned char *)v3 + 224))
      {
        long long v7 = *a2;
        long long v8 = a2[2];
        *((_OWORD *)v3 + 16) = a2[1];
        *((_OWORD *)v3 + 17) = v8;
        *uint64_t v6 = v7;
      }
      else
      {
        *((unsigned char *)v3 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 1;
        long long v11 = v14;
        *uint64_t v6 = v13;
        *((_OWORD *)v3 + 16) = v11;
        *((_OWORD *)v3 + 17) = v15;
      }
    }
    else if (*((unsigned char *)v3 + 224))
    {
      *((unsigned char *)v3 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    double v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set RESRT 'by' value for non-RESRT from-to-by animation.", v12, 2u);
    }
  }
  return v4 == 17;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18) {
    return *(void *)(v1 + 232);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToJointCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18) {
    return *(void *)(v1 + 272);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByJointCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18) {
    return *(void *)(v1 + 312);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint count for non-SkeletalPose from-to-by animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    long long v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 216, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 88))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 18;
}

uint64_t *anonymous namespace'::resizeFixedArray<re::GenericSRT<float>>(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 != a2)
  {
    int v4 = result;
    uint64_t v5 = *result;
    *BOOL result = 0;
    result[1] = 0;
    uint64_t v6 = result[2];
    result[2] = 0;
    long long v7 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit(result);
    if (v2 >= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = v2;
    }
    if (v8)
    {
      uint64_t v9 = 0;
      for (unint64_t i = 0; i != v8; ++i)
      {
        if (v4[1] <= i)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v11 = (_OWORD *)(v4[2] + v9);
        long long v12 = *(_OWORD *)(v6 + v9);
        long long v13 = *(_OWORD *)(v6 + v9 + 32);
        v11[1] = *(_OWORD *)(v6 + v9 + 16);
        void v11[2] = v13;
        *uint64_t v11 = v12;
        v9 += 48;
      }
    }
    if (v2 && v5)
    {
      long long v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40);
      return (uint64_t *)v14(v5, v6);
    }
  }
  return result;
}

BOOL RETimelineDefinitionSetSkeletalPoseToJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 256, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 120))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 18;
}

BOOL RETimelineDefinitionSetSkeletalPoseByJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 18)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 296, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 152))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint count for non-SkeletalPose from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 18;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseFromJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        BOOL v20 = "";
        unint64_t v12 = *((void *)v8 + 29);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          double v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 31) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        BOOL v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetSkeletalPoseToJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseToJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        BOOL v20 = "";
        unint64_t v12 = *((void *)v8 + 34);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          double v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 36) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        BOOL v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetSkeletalPoseByJointNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseByJointCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        BOOL v20 = "";
        unint64_t v12 = *((void *)v8 + 39);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          double v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 41) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        BOOL v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(void *)(v3 + 232) > a2) {
      return *(void *)(*(void *)(v3 + 248) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(void *)(v3 + 272) > a2) {
      return *(void *)(*(void *)(v3 + 288) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 18)
  {
    if (*(void *)(v3 + 312) > a2) {
      return *(void *)(*(void *)(v3 + 328) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint name, invalid joint index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint name for non-SkeletalPose from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 29) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 29);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 31) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseToJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 34) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 34);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 36) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseByJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint name for non-SkeletalPose from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 39) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 39);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 41) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint name, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(unsigned char *)(v1 + 88)) {
      return *(void *)(v1 + 112);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'from' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(unsigned char *)(v1 + 120)) {
      return *(void *)(v1 + 144);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'to' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetSkeletalPoseByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 18)
  {
    if (*(unsigned char *)(v1 + 152)) {
      return *(void *)(v1 + 176);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Sketetal Pose 'by' joint values for non-SkeletalPose from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseFromValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseFromJointCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (*((void *)v8 + 13) <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = (_OWORD *)(*((void *)v8 + 14) + v9);
      long long v12 = *(_OWORD *)(a2 + v9);
      long long v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      void v11[2] = v13;
      *uint64_t v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

BOOL RETimelineDefinitionSetSkeletalPoseToValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseToJointCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (*((void *)v8 + 17) <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = (_OWORD *)(*((void *)v8 + 18) + v9);
      long long v12 = *(_OWORD *)(a2 + v9);
      long long v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      void v11[2] = v13;
      *uint64_t v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

BOOL RETimelineDefinitionSetSkeletalPoseByValue(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetSkeletalPoseByJointCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (*((void *)v8 + 21) <= v10)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = (_OWORD *)(*((void *)v8 + 22) + v9);
      long long v12 = *(_OWORD *)(a2 + v9);
      long long v13 = *(_OWORD *)(a2 + v9 + 32);
      v11[1] = *(_OWORD *)(a2 + v9 + 16);
      void v11[2] = v13;
      *uint64_t v11 = v12;
      ++v10;
      v9 += 48;
    }
    while (a3 != v10);
  }
  return v7;
}

uint64_t RETimelineDefinitionSetSkeletalPoseFromJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'from' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v6 + 88))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'from' joint value for invalid 'from' pose.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v6 + 13) > a2)
  {
    BOOL v7 = (__n128 *)(*((void *)v6 + 14) + 48 * a2);
    *BOOL v7 = a3;
    v7[1] = a4;
    uint64_t v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    unint64_t v16 = a2;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'from' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseToJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'to' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v6 + 120))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'to' joint value for invalid 'to' pose.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v6 + 17) > a2)
  {
    BOOL v7 = (__n128 *)(*((void *)v6 + 18) + 48 * a2);
    *BOOL v7 = a3;
    v7[1] = a4;
    uint64_t v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    unint64_t v16 = a2;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'to' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseByJointValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v6 + 2) != 18)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'by' joint value for non-SkeletalPose from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v6 + 152))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v10 = "Cannot set Sketetal Pose 'by' joint value for invalid 'by' pose.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v6 + 21) > a2)
  {
    BOOL v7 = (__n128 *)(*((void *)v6 + 22) + 48 * a2);
    *BOOL v7 = a3;
    v7[1] = a4;
    uint64_t v7[2] = a5;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v11 = (id)CoreRELog::log;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    unint64_t v16 = a2;
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Cannot set Sketetal Pose 'by' joint value, invalid joint index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50) {
    return *(void *)(v1 + 208);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToWeightCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50) {
    return *(void *)(v1 + 248);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByWeightCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50) {
    return *(void *)(v1 + 288);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight count for non-BlendShapeWeights from-to-by animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 192, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 88))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 88, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 50;
}

void anonymous namespace'::resizeFixedArray<float>(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 != a2)
  {
    uint64_t v5 = *a1;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    BOOL v7 = (_anonymous_namespace_ *)re::FixedArray<CoreIKTransform>::deinit(a1);
    if (v2 >= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = v2;
    }
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v11 = a1[1];
      uint64_t v10 = a1[2];
      do
      {
        if (v11 == v9)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v6 + 4 * v9);
        ++v9;
      }
      while (v8 != v9);
    }
    if (v2 && v5)
    {
      long long v12 = *(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40);
      v12(v5, v6);
    }
  }
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 232, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 120))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 120, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 50;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByWeightCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 50)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 272, a2);
    if (a2)
    {
      if (!*((unsigned char *)v5 + 152))
      {
        LOBYTE(v8) = 1;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
        if ((_BYTE)v8)
        {
          if (v9 && v10) {
            (*(void (**)(void))(*(void *)v9 + 40))();
          }
        }
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      re::Optional<re::SkeletalPoseAssetData>::operator=((unsigned __int8 *)v5 + 152, &v8);
      if ((_BYTE)v8 && v9 && v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v8) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight count for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v8, 2u);
    }
  }
  return v4 == 50;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        int v20 = "";
        unint64_t v12 = *((void *)v8 + 26);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          int v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 28) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        int v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsToWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        int v20 = "";
        unint64_t v12 = *((void *)v8 + 31);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          int v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 33) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        int v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByWeightNames(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsByWeightCount(a1, a3);
  if (v6)
  {
    if (a3)
    {
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = *(const char **)(a2 + 8 * v10);
        uint64_t v19 = 0;
        int v20 = "";
        unint64_t v12 = *((void *)v8 + 36);
        if (v12 <= v10)
        {
          uint64_t v21 = 0;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v22 = 136315906;
          int v23 = "operator[]";
          __int16 v24 = 1024;
          int v25 = 789;
          __int16 v26 = 2048;
          unint64_t v27 = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v13 = (void *)(*((void *)v8 + 38) + v9);
        uint64_t v14 = v19;
        long long v15 = v20;
        uint64_t v19 = 0;
        int v20 = "";
        uint64_t v16 = v13[1];
        unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL | *v13 & 1;
        v13[1] = v15;
        *(void *)&v30[0] = v17;
        *((void *)&v30[0] + 1) = v16;
        *long long v13 = v14;
        re::StringID::destroyString((re::StringID *)v30);
        re::StringID::destroyString((re::StringID *)&v19);
        ++v10;
        v9 += 16;
      }
      while (a3 != v10);
    }
  }
  return v6;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(void *)(v3 + 208) > a2) {
      return *(void *)(*(void *)(v3 + 224) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(void *)(v3 + 248) > a2) {
      return *(void *)(*(void *)(v3 + 264) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 50)
  {
    if (*(void *)(v3 + 288) > a2) {
      return *(void *)(*(void *)(v3 + 304) + 16 * a2 + 8);
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 134217984;
      unint64_t v8 = a2;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight name, invalid weight index: %zu.", (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight name for non-BlendShapeWeights from-to-by animation.", (uint8_t *)&v7, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 26) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 26);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 28) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 31) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 31);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 33) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v14 = (id)CoreRELog::log;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight name for non-BlendShapeWeights from-to-by animation.", buf, 2u);
    }

    return 0;
  }
  BOOL v6 = v5;
  if (*((void *)v5 + 36) > a2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    unint64_t v7 = *((void *)v6 + 36);
    if (v7 > a2)
    {
      unint64_t v8 = (void *)(*((void *)v6 + 38) + 16 * a2);
      uint64_t v9 = v17;
      unint64_t v10 = v18;
      uint64_t v17 = 0;
      uint64_t v18 = "";
      uint64_t v11 = v8[1];
      unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
      v8[1] = v10;
      *(void *)long long buf = v12;
      *(void *)&uint8_t buf[8] = v11;
      *unint64_t v8 = v9;
      re::StringID::destroyString((re::StringID *)buf);
      re::StringID::destroyString((re::StringID *)&v17);
      return 1;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    unint64_t v16 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a2;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v15 = (id)CoreRELog::log;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight name, invalid weight index: %zu.", buf, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsFromValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(unsigned char *)(v1 + 88)) {
      return *(void *)(v1 + 112);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'from' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsToValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(unsigned char *)(v1 + 120)) {
      return *(void *)(v1 + 144);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'to' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsByValue(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 50)
  {
    if (*(unsigned char *)(v1 + 152)) {
      return *(void *)(v1 + 176);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get Blend Shape Weights 'by' weight values for non-BlendShapeWeights from-to-by animation.", v4, 2u);
    }
  }
  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsFromValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsFromWeightCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v8 + 13);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((void *)v8 + 14) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsToValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsToWeightCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v8 + 17);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((void *)v8 + 18) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsByValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, unint64_t a3)
{
  BOOL v6 = RETimelineDefinitionSetBlendShapeWeightsByWeightCount(a1, a3);
  BOOL v7 = v6;
  if (a3 && v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)v8 + 21);
    do
    {
      if (v10 == v9)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((void *)v8 + 22) + 4 * v9) = *(_DWORD *)(a2 + 4 * v9);
      ++v9;
    }
    while (a3 != v9);
  }
  return v7;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsFromValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'from' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v5 + 88))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'from' weight value for invalid 'from' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v5 + 13) > a2)
  {
    *(float *)(*((void *)v5 + 14) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = 134217984;
    unint64_t v11 = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsToValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'to' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v5 + 120))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'to' weight value for invalid 'to' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v5 + 17) > a2)
  {
    *(float *)(*((void *)v5 + 18) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = 134217984;
    unint64_t v11 = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsByValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'by' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v5 + 152))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    BOOL v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v10) = 0;
    unint64_t v8 = "Cannot set Blend Shape Weights 'by' weight value for invalid 'by' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v10, 2u);
LABEL_12:

    return 0;
  }
  if (*((void *)v5 + 21) > a2)
  {
    *(float *)(*((void *)v5 + 22) + 4 * a2) = a3;
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v10 = 134217984;
    unint64_t v11 = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight value, invalid weight index: %zu.", (uint8_t *)&v10, 0xCu);
  }

  return 0;
}

float RETimelineDefinitionGetBlendShapeWeightsFromWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'from' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v3 + 88))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'from' weight value for invalid 'from' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((void *)v3 + 13) > a2) {
    return *(float *)(*((void *)v3 + 14) + 4 * a2);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  BOOL v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v8 = 134217984;
    unint64_t v9 = a2;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'from' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

float RETimelineDefinitionGetBlendShapeWeightsToWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'to' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v3 + 120))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'to' weight value for invalid 'to' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((void *)v3 + 17) > a2) {
    return *(float *)(*((void *)v3 + 18) + 4 * a2);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  BOOL v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v8 = 134217984;
    unint64_t v9 = a2;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'to' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

float RETimelineDefinitionGetBlendShapeWeightsByWeightValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v3 + 2) != 50)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'by' weight value for non-BlendShapeWeights from-to-by animation.";
    goto LABEL_20;
  }
  if (!*((unsigned char *)v3 + 152))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(v8) = 0;
    BOOL v6 = "Cannot set Blend Shape Weights 'by' weight value for invalid 'by' value.";
LABEL_20:
    _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 2u);
LABEL_12:

    return NAN;
  }
  if (*((void *)v3 + 21) > a2) {
    return *(float *)(*((void *)v3 + 22) + 4 * a2);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  BOOL v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v8 = 134217984;
    unint64_t v9 = a2;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Cannot set Blend Shape Weights 'by' weight value, invalid weight index: %zu.", (uint8_t *)&v8, 0xCu);
  }

  return NAN;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloatAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 27);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0898;
  v8[0] = &unk_26E7312B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7312B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledDoubleAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 28);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0948;
  v8[0] = &unk_26E731338;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731338;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat2Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 29);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D09F8;
  v8[0] = &unk_26E7313B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7313B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat3Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 30);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0AA8;
  v8[0] = &unk_26E731438;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731438;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledFloat4Animation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 31);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0B58;
  v8[0] = &unk_26E7314B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7314B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledQuaternionAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 32);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0C08;
  v8[0] = &unk_26E731538;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731538;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledSRTAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 33);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0CB8;
  v8[0] = &unk_26E7315B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7315B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledSkeletalPoseAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 200, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 34);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0D68;
  *(void *)(v4 + 184) = 0;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_DWORD *)(v4 + 176) = 0;
  *(_WORD *)(v4 + 192) = 257;
  *(unsigned char *)(v4 + 194) = 1;
  v8[0] = &unk_26E731638;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731638;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 168, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 59);
  *(_WORD *)(v4 + 72) = 256;
  *(_DWORD *)(v4 + 76) = 1023969417;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0E18;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 152) = 0;
  v8[0] = &unk_26E7316B8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7316B8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  uint64_t v5 = v7;
  return v5;
}

float RETimelineDefinitionGetFrameInterval(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(float *)(v1 + 76);
    default:
      if (v3 == 59) {
        return *(float *)(v1 + 76);
      }
      else {
        return NAN;
      }
  }
}

uint64_t RETimelineDefinitionSetFrameInterval(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    default:
      if (v4 != 59) {
        return 0;
      }
LABEL_2:
      *((float *)v3 + 19) = a2;
      return 1;
  }
}

float RETimelineDefinitionGetStartTime(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  float result = NAN;
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_6;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      float result = *(double *)(v1 + 80);
      break;
    default:
      if (v3 == 59) {
LABEL_6:
      }
        float result = *(float *)(v1 + 80);
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionSetStartTime(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  uint64_t result = 0;
  int v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      *((double *)v3 + 10) = a2;
      return 1;
    default:
      if (v5 != 59) {
        return result;
      }
LABEL_2:
      *((float *)v3 + 20) = a2;
      return 1;
  }
}

float RETimelineDefinitionGetEndTime(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  float result = NAN;
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_6;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      float result = *(double *)(v1 + 88);
      break;
    default:
      if (v3 == 59) {
LABEL_6:
      }
        float result = *(float *)(v1 + 84);
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionSetEndTime(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  uint64_t result = 0;
  int v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    case 35:
    case 36:
    case 37:
      return result;
    case 38:
      *((double *)v3 + 11) = a2;
      return 1;
    default:
      if (v5 != 59) {
        return result;
      }
LABEL_2:
      *((float *)v3 + 21) = a2;
      return 1;
  }
}

BOOL RETimelineDefinitionGetInterpolationEnabled(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(unsigned char *)(v1 + 73) != 0;
    default:
      return v3 == 59 && *(unsigned char *)(v1 + 73) != 0;
  }
}

uint64_t RETimelineDefinitionSetInterpolationEnabled(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  switch(v4)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      goto LABEL_2;
    default:
      if (v4 != 59) {
        return 0;
      }
LABEL_2:
      *((unsigned char *)v3 + 73) = a2;
      return 1;
  }
}

uint64_t RETimelineDefinitionGetValueCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  switch(v3)
  {
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      return *(void *)(v1 + 104);
    default:
      if (v3 == 59) {
        return *(void *)(v1 + 104);
      }
      else {
        return -1;
      }
  }
}

uint64_t re::DynamicArray<re::SkeletalPoseAssetData>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 24 * a2;
}

uint64_t RETimelineDefinitionSetValueCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = v3;
  int v5 = *((_DWORD *)v3 + 2);
  switch(v5)
  {
    case 27:
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 28:
      re::DynamicArray<double>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 29:
      re::DynamicArray<unsigned long>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 30:
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 31:
      re::DynamicArray<re::Vector4<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 32:
      re::DynamicArray<re::Quaternion<float>>::resize((uint64_t)v3 + 88, a2);
      return 1;
    case 33:
      re::DynamicArray<re::GenericSRT<float>>::resize((void *)v3 + 11, a2);
      return 1;
    case 34:
      unint64_t v8 = *((void *)v3 + 13);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v3 + 11, a2);
      if (v8 >= a2) {
        return 1;
      }
      uint64_t v9 = 24 * v8;
      while (*((void *)v4 + 13) > v8)
      {
        ++v8;
        v9 += 24;
        if (a2 == v8) {
          return 1;
        }
      }
      goto LABEL_23;
    default:
      if (v5 != 59) {
        return 0;
      }
      unint64_t v6 = *((void *)v3 + 13);
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v3 + 11, a2);
      if (v6 < a2)
      {
        uint64_t v7 = 24 * v6;
        do
        {
          if (*((void *)v4 + 13) <= v6)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          ++v6;
          v7 += 24;
        }
        while (a2 != v6);
      }
      return 1;
  }
}

uint64_t RETimelineDefinitionGetFloatValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 27) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetDoubleValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 28) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat2Values(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 29) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat3Values(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 30) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetFloat4Values(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 31) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetQuaternionValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 32) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionGetSRTValues(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 33) {
    return *(void *)(v1 + 120);
  }
  else {
    return 0;
  }
}

BOOL RETimelineDefinitionSetFloatValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 27)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<float>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 27;
}

BOOL RETimelineDefinitionSetDoubleValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 28)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<double>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 28;
}

BOOL RETimelineDefinitionSetFloat2Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 29)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 29;
}

BOOL RETimelineDefinitionSetFloat3Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 30)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 30;
}

BOOL RETimelineDefinitionSetFloat4Values(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 31)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Vector4<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 31;
}

BOOL RETimelineDefinitionSetQuaternionValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 32)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 32;
}

BOOL RETimelineDefinitionSetSRTValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 33)
  {
    v8[0] = a2;
    v8[1] = a3;
    re::DynamicArray<re::GenericSRT<float>>::operator=((_anonymous_namespace_ *)((char *)v5 + 88), (uint64_t)v8);
  }
  return v6 == 33;
}

uint64_t RETimelineDefinitionSetFloatIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, float a3)
{
  if (*((_DWORD *)v5 + 2) != 27 || *((void *)v5 + 13) <= a2) {
    return 0;
  }
  *(float *)(*((void *)v5 + 15) + 4 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetDoubleIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, double a3)
{
  if (*((_DWORD *)v5 + 2) != 28 || *((void *)v5 + 13) <= a2) {
    return 0;
  }
  *(double *)(*((void *)v5 + 15) + 8 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat2IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, double a3)
{
  if (*((_DWORD *)v5 + 2) != 29 || *((void *)v5 + 13) <= a2) {
    return 0;
  }
  *(double *)(*((void *)v5 + 15) + 8 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat3IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  if (*((_DWORD *)v4 + 2) != 30 || *((void *)v4 + 13) <= a2) {
    return 0;
  }
  *(__n128 *)(*((void *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetFloat4IndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  if (*((_DWORD *)v4 + 2) != 31 || *((void *)v4 + 13) <= a2) {
    return 0;
  }
  *(__n128 *)(*((void *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetQuaternionIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3)
{
  if (*((_DWORD *)v4 + 2) != 32 || *((void *)v4 + 13) <= a2) {
    return 0;
  }
  *(__n128 *)(*((void *)v4 + 15) + 16 * a2) = a3;
  return 1;
}

uint64_t RETimelineDefinitionSetSRTIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (*((_DWORD *)v6 + 2) != 33 || *((void *)v6 + 13) <= a2) {
    return 0;
  }
  uint64_t v7 = (__n128 *)(*((void *)v6 + 15) + 48 * a2);
  *uint64_t v7 = a3;
  v7[1] = a4;
  uint64_t v7[2] = a5;
  return 1;
}

BOOL RETimelineDefinitionSetSkeleton(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    int v5 = v3;
    re::AssetAPIHelper::assetHandleCreate(a2, (uint64_t *)&v10);
    long long v6 = *((_OWORD *)v5 + 8);
    *((_OWORD *)v5 + 8) = v10;
    long long v10 = v6;
    uint64_t v7 = *((void *)v5 + 18);
    *((void *)v5 + 18) = v11;
    uint64_t v11 = v7;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Cannot set skeleton for any animation type other than SampledSkeletalPoseAnimation.", (uint8_t *)&v10, 2u);
    }
  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetSkeletalJointCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 34) {
    return *(void *)(v1 + 168);
  }
  else {
    return -1;
  }
}

BOOL RETimelineDefinitionSetSkeletalJointCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    int v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 152, a2);
    uint64_t v6 = *((void *)v5 + 13);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 15);
      uint64_t v8 = 24 * v6;
      do
      {
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetSkeletalJointName(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 34 && *(void *)(v3 + 168) > a2) {
    return *(void *)(*(void *)(v3 + 184) + 16 * a2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionSetSkeletalJointName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 34) {
    return 0;
  }
  uint64_t v6 = v5;
  if (*((void *)v5 + 21) <= a2) {
    return 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = "";
  unint64_t v7 = *((void *)v6 + 21);
  if (v7 <= a2)
  {
    uint64_t v17 = 0;
    memset(v26, 0, sizeof(v26));
    unint64_t v14 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    uint64_t v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = a2;
    __int16 v24 = 2048;
    unint64_t v25 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = (void *)(*((void *)v6 + 23) + 16 * a2);
  uint64_t v9 = v15;
  long long v10 = v16;
  uint64_t v15 = 0;
  unint64_t v16 = "";
  uint64_t v11 = v8[1];
  unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
  v8[1] = v10;
  *(void *)&v26[0] = v12;
  *((void *)&v26[0] + 1) = v11;
  *uint64_t v8 = v9;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v15);
  return 1;
}

__n128 RETimelineDefinitionGetSkeletalPoseIndexJointValue(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (!v5) {
    uint64_t v5 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
  if (*(_DWORD *)(v5 + 8) == 34)
  {
    result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
    if (*(void *)(v5 + 104) > a2)
    {
      uint64_t v7 = *(void *)(v5 + 120) + 24 * a2;
      result.n128_u64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
      if (*(void *)(v7 + 8) > a3) {
        return *(__n128 *)(*(void *)(v7 + 16) + 48 * a3);
      }
    }
  }
  return result;
}

BOOL RETimelineDefinitionSetSkeletalPoses(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  LODWORD(v10) = *((_DWORD *)v9 + 2);
  if (v10 == 34)
  {
    uint64_t v11 = v9;
    re::DynamicArray<re::StringID>::resize((uint64_t)v9 + 152, a5);
    if (a5)
    {
      uint64_t v13 = 0;
      long long v10 = 0;
      while (1)
      {
        uint64_t v15 = *(const char **)(a2 + 8 * (void)v10);
        uint64_t v32 = 0;
        uint64_t v33 = "";
        unint64_t v16 = *((void *)v11 + 21);
        if (v16 <= (unint64_t)v10) {
          break;
        }
        uint64_t v17 = (void *)(*((void *)v11 + 23) + v13);
        uint64_t v18 = v32;
        uint64_t v19 = v33;
        uint64_t v32 = 0;
        uint64_t v33 = "";
        uint64_t v20 = v17[1];
        unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
        v17[1] = v19;
        *(void *)long long buf = v21;
        *(void *)&uint8_t buf[8] = v20;
        *uint64_t v17 = v18;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v32);
        long long v10 = (uint64_t *)((char *)v10 + 1);
        v13 += 16;
        if ((uint64_t *)a5 == v10) {
          goto LABEL_6;
        }
      }
      uint64_t v34 = 0;
      long long v47 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v44 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v35 = 136315906;
      long long v36 = "operator[]";
      __int16 v37 = 1024;
      int v38 = 789;
      __int16 v39 = 2048;
      float v40 = v10;
      __int16 v41 = 2048;
      unint64_t v42 = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_6:
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v11 + 11, a4);
      LODWORD(v10) = 34;
      if (!a4) {
        return v10 == 34;
      }
      unint64_t v14 = 0;
      while (1)
      {
        a2 = *((void *)v11 + 13);
        if (a2 <= (unint64_t)v14) {
          break;
        }
        __int16 v22 = (uint64_t *)(*((void *)v11 + 15) + 24 * (void)v14);
        if (a5)
        {
          uint64_t v23 = 0;
          __int16 v24 = 0;
          while (1)
          {
            unint64_t v25 = v22[1];
            if (v25 <= (unint64_t)v24) {
              break;
            }
            __int16 v26 = (long long *)(*(void *)(a3 + 8 * (void)v14) + v23);
            uint64_t v27 = (_OWORD *)(v22[2] + v23);
            long long v28 = *v26;
            long long v29 = v26[2];
            v27[1] = v26[1];
            int v27[2] = v29;
            *uint64_t v27 = v28;
            __int16 v24 = (uint64_t *)((char *)v24 + 1);
            v23 += 48;
            if ((uint64_t *)a5 == v24) {
              goto LABEL_13;
            }
          }
          uint64_t v32 = 0;
          long long v47 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v44 = 0u;
          long long v30 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v35 = 136315906;
          long long v36 = "operator[]";
          __int16 v37 = 1024;
          int v38 = 468;
          __int16 v39 = 2048;
          float v40 = v24;
          __int16 v41 = 2048;
          unint64_t v42 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_20;
        }
LABEL_13:
        unint64_t v14 = (uint64_t *)((char *)v14 + 1);
        if (v14 == (uint64_t *)a4) {
          return v10 == 34;
        }
      }
    }
    uint64_t v32 = 0;
    long long v47 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v35 = 136315906;
    long long v36 = "operator[]";
    __int16 v37 = 1024;
    int v38 = 789;
    __int16 v39 = 2048;
    float v40 = v14;
    __int16 v41 = 2048;
    unint64_t v42 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_23:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v30 = (id)CoreRELog::log;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "Cannot set skeletal poses for incompatible animation.", buf, 2u);
  }

  return v10 == 34;
}

BOOL RETimelineDefinitionSetSkeletalPosePoseCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v3 + 11, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal poses for incompatible animation.", v7, 2u);
    }
  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionSetSkeletalPosesValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 34)
  {
    uint64_t v8 = v7;
    if (*((void *)v7 + 21) == a4)
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v7 + 11, (unint64_t)a3);
      if (!a3) {
        return 1;
      }
      unint64_t v9 = 0;
      while (1)
      {
        if (*((void *)v8 + 13) <= v9)
        {
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_23;
        }
        if (a4) {
          break;
        }
LABEL_10:
        if (++v9 == a3) {
          return 1;
        }
      }
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = *((void *)v8 + 15) + 24 * v9;
      while (*(void *)(v12 + 8) > v11)
      {
        uint64_t v13 = (long long *)(*(void *)(a2 + 8 * v9) + v10);
        unint64_t v14 = (_OWORD *)(*(void *)(v12 + 16) + v10);
        long long v15 = *v13;
        long long v16 = v13[2];
        v14[1] = v13[1];
        void v14[2] = v16;
        *unint64_t v14 = v15;
        ++v11;
        v10 += 48;
        if (a4 == v11) {
          goto LABEL_10;
        }
      }
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      memset(buf, 0, sizeof(buf));
      a4 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      a3 = (id)CoreRELog::log;
      if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
    }
    uint64_t v21 = *((void *)v8 + 21);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v21;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a4;
    uint64_t v18 = "Skeletal Pose cannot set joint values, joint count does not match: %zu != %zu";
    uint64_t v19 = a3;
    uint32_t v20 = 22;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
LABEL_23:
    }
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    a3 = (id)CoreRELog::log;
    if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v18 = "Cannot set skeletal pose values for incompatible animation.";
    uint64_t v19 = a3;
    uint32_t v20 = 2;
  }
  _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
LABEL_18:

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseIndexValues(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 34)
  {
    uint64_t v8 = v7;
    if (*((void *)v7 + 21) != a4)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      long long v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      uint64_t v20 = *((void *)v8 + 21);
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = v20;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = a4;
      uint64_t v17 = "Skeletal Pose cannot set joint values, joint count does not match: %zu != %zu";
      uint64_t v18 = v16;
      uint32_t v19 = 22;
      goto LABEL_20;
    }
    if (*((void *)v7 + 13) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      long long v16 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = a2;
      uint64_t v17 = "Skeletal Pose cannot set joint value for index %zu.";
      uint64_t v18 = v16;
      uint32_t v19 = 12;
      goto LABEL_20;
    }
    unint64_t v9 = (uint64_t *)(*((void *)v7 + 15) + 24 * a2);
    if (!a4) {
      return 1;
    }
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    while (v9[1] > v11)
    {
      uint64_t v12 = (_OWORD *)(v9[2] + v10);
      long long v13 = *(_OWORD *)(a3 + v10);
      long long v14 = *(_OWORD *)(a3 + v10 + 32);
      v12[1] = *(_OWORD *)(a3 + v10 + 16);
      void v12[2] = v14;
      *uint64_t v12 = v13;
      ++v11;
      v10 += 48;
      if (a4 == v11) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else if (CoreRELog::onceToken == -1)
  {
    goto LABEL_10;
  }
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_10:
  long long v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    uint64_t v17 = "Cannot set skeletal pose index values for incompatible animation.";
    uint64_t v18 = v16;
    uint32_t v19 = 2;
LABEL_20:
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)buf, v19);
  }
LABEL_21:

  return 0;
}

uint64_t RETimelineDefinitionSetSkeletalPoseIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v8 + 2) != 34)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    long long v13 = "Cannot set skeletal pose index value for incompatible animation.";
LABEL_14:
    long long v14 = v12;
    uint32_t v15 = 2;
    goto LABEL_15;
  }
  if (*((void *)v8 + 21) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v12 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    long long v13 = "Skeletal Pose cannot set joint values, not enough joints.";
    goto LABEL_14;
  }
  if (*((void *)v8 + 13) > a2)
  {
    uint64_t v9 = *((void *)v8 + 15) + 24 * a2;
    if (*(void *)(v9 + 8) > a3)
    {
      uint64_t v10 = (__n128 *)(*(void *)(v9 + 16) + 48 * a3);
      __n128 *v10 = a4;
      v10[1] = a5;
      void v10[2] = a6;
      return 1;
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)long long buf = 0u;
    a2 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_21:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v12 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    goto LABEL_18;
  }
  *(_DWORD *)long long buf = 134217984;
  *(void *)&uint8_t buf[4] = a2;
  long long v13 = "Skeletal Pose cannot set joint value for index %zu.";
  long long v14 = v12;
  uint32_t v15 = 12;
LABEL_15:
  _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v13, buf, v15);
LABEL_18:

  return 0;
}

BOOL RETimelineDefinitionGetSkeletalPoseScaleChannelMask(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 34) {
    return *(unsigned char *)(v1 + 192) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose scale channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseScaleChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((unsigned char *)v3 + 192) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose scale channel mask for incompatible animation.", v7, 2u);
    }
  }
  return v4 == 34;
}

BOOL RETimelineDefinitionGetSkeletalPoseRotationChannelMask(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 34) {
    return *(unsigned char *)(v1 + 193) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose rotation channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseRotationChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((unsigned char *)v3 + 193) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose rotation channel mask for incompatible animation.", v7, 2u);
    }
  }
  return v4 == 34;
}

BOOL RETimelineDefinitionGetSkeletalPoseTranslationChannelMask(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 34) {
    return *(unsigned char *)(v1 + 194) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get skeletal pose translation channel mask for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSkeletalPoseTranslationChannelMask(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 34)
  {
    *((unsigned char *)v3 + 194) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot set skeletal pose translation channel mask for incompatible animation.", v7, 2u);
    }
  }
  return v4 == 34;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightsCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 59) {
    return *(void *)(v1 + 144);
  }
  else {
    return -1;
  }
}

BOOL RETimelineDefinitionSetBlendShapeWeightsWeightsCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 59)
  {
    uint64_t v5 = v3;
    re::DynamicArray<re::StringID>::resize((uint64_t)v3 + 128, a2);
    uint64_t v6 = *((void *)v5 + 13);
    if (v6)
    {
      uint64_t v7 = (uint64_t *)*((void *)v5 + 15);
      uint64_t v8 = 24 * v6;
      do
      {
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  return v4 == 59;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsWeightName(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v3 + 8) == 59 && *(void *)(v3 + 144) > a2) {
    return *(void *)(*(void *)(v3 + 160) + 16 * a2 + 8);
  }
  else {
    return 0;
  }
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsWeightName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, const char *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 59) {
    return 0;
  }
  uint64_t v6 = v5;
  if (*((void *)v5 + 18) <= a2) {
    return 0;
  }
  uint64_t v15 = 0;
  long long v16 = "";
  unint64_t v7 = *((void *)v6 + 18);
  if (v7 <= a2)
  {
    uint64_t v17 = 0;
    memset(v26, 0, sizeof(v26));
    unint64_t v14 = v7;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    uint32_t v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = a2;
    __int16 v24 = 2048;
    unint64_t v25 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = (void *)(*((void *)v6 + 20) + 16 * a2);
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  uint64_t v15 = 0;
  long long v16 = "";
  uint64_t v11 = v8[1];
  unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
  v8[1] = v10;
  *(void *)&v26[0] = v12;
  *((void *)&v26[0] + 1) = v11;
  *uint64_t v8 = v9;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v15);
  return 1;
}

float RETimelineDefinitionGetBlendShapeWeightsIndexWeightValue(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  if (!v5) {
    uint64_t v5 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v5 + 8) == 59
    && *(void *)(v5 + 104) > a2
    && (uint64_t v6 = *(void *)(v5 + 120) + 24 * a2, *(void *)(v6 + 8) > a3))
  {
    return *(float *)(*(void *)(v6 + 16) + 4 * a3);
  }
  else
  {
    return NAN;
  }
}

BOOL RETimelineDefinitionSetBlendShapeWeightsData(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  LODWORD(v10) = *((_DWORD *)v9 + 2);
  if (v10 == 59)
  {
    uint64_t v11 = v9;
    re::DynamicArray<re::StringID>::resize((uint64_t)v9 + 128, a5);
    if (a5)
    {
      uint64_t v10 = 0;
      long long v13 = 0;
      while (1)
      {
        uint64_t v15 = *(const char **)(a2 + 8 * (void)v13);
        uint64_t v27 = 0;
        long long v28 = "";
        unint64_t v16 = *((void *)v11 + 18);
        if (v16 <= (unint64_t)v13) {
          break;
        }
        uint64_t v17 = (void *)(*((void *)v11 + 20) + v10);
        uint64_t v18 = v27;
        uint32_t v19 = v28;
        uint64_t v27 = 0;
        long long v28 = "";
        uint64_t v20 = v17[1];
        unint64_t v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
        v17[1] = v19;
        *(void *)long long buf = v21;
        *(void *)&uint8_t buf[8] = v20;
        *uint64_t v17 = v18;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v27);
        long long v13 = (uint64_t *)((char *)v13 + 1);
        v10 += 16;
        if ((uint64_t *)a5 == v13) {
          goto LABEL_6;
        }
      }
      uint64_t v29 = 0;
      long long v42 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v30 = 136315906;
      long long v31 = "operator[]";
      __int16 v32 = 1024;
      int v33 = 789;
      __int16 v34 = 2048;
      int v35 = v13;
      __int16 v36 = 2048;
      unint64_t v37 = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
LABEL_6:
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v11 + 11, a4);
      LODWORD(v10) = 59;
      if (!a4) {
        return v10 == 59;
      }
      unint64_t v14 = 0;
      while (1)
      {
        a2 = *((void *)v11 + 13);
        if (a2 <= (unint64_t)v14) {
          break;
        }
        __int16 v22 = (uint64_t *)(*((void *)v11 + 15) + 24 * (void)v14);
        if (a5)
        {
          uint64_t v23 = 0;
          uint64_t v24 = v22[1];
          while (v24 != v23)
          {
            *(_DWORD *)(v22[2] + 4 * v23) = *(_DWORD *)(*(void *)(a3 + 8 * (void)v14) + 4 * v23);
            if (a5 == ++v23) {
              goto LABEL_13;
            }
          }
          uint64_t v27 = 0;
          long long v42 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v39 = 0u;
          unint64_t v25 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v30 = 136315906;
          long long v31 = "operator[]";
          __int16 v32 = 1024;
          int v33 = 468;
          __int16 v34 = 2048;
          int v35 = (uint64_t *)v24;
          __int16 v36 = 2048;
          unint64_t v37 = v24;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_20;
        }
LABEL_13:
        unint64_t v14 = (uint64_t *)((char *)v14 + 1);
        if (v14 == (uint64_t *)a4) {
          return v10 == 59;
        }
      }
    }
    uint64_t v27 = 0;
    long long v42 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v39 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v30 = 136315906;
    long long v31 = "operator[]";
    __int16 v32 = 1024;
    int v33 = 789;
    __int16 v34 = 2048;
    int v35 = v14;
    __int16 v36 = 2048;
    unint64_t v37 = a2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_23;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_23:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  unint64_t v25 = (id)CoreRELog::log;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
LABEL_20:
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Cannot set blend shape weights for incompatible animation.", buf, 2u);
  }

  return v10 == 59;
}

uint64_t RETimelineDefinitionGetBlendShapeWeightsSampleCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  if (*((_DWORD *)v1 + 2) == 59) {
    return *((void *)v1 + 13);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Cannot get blend shape weights sample count for incompatible animation.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetBlendShapeWeightsSampleCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 59)
  {
    re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v3 + 11, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot set blend shape weights sample count for incompatible animation.", v7, 2u);
    }
  }
  return v4 == 59;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsSampleValues(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 59)
  {
    uint64_t v8 = v7;
    if (*((void *)v7 + 18) == a4)
    {
      re::DynamicArray<re::SkeletalPoseAssetData>::resize((void *)v7 + 11, (unint64_t)a3);
      if (!a3) {
        return 1;
      }
      uint64_t v9 = 0;
      uint64_t v10 = *((void *)v8 + 13);
      while (1)
      {
        if (v9 == v10)
        {
          long long v21 = 0u;
          long long v22 = 0u;
          long long v20 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_23;
        }
        if (a4) {
          break;
        }
LABEL_10:
        if (++v9 == a3) {
          return 1;
        }
      }
      uint64_t v11 = 0;
      uint64_t v12 = *((void *)v8 + 15) + 24 * v9;
      uint64_t v13 = *(void *)(v12 + 8);
      while (v13 != v11)
      {
        *(_DWORD *)(*(void *)(v12 + 16) + 4 * v11) = *(_DWORD *)(*(void *)(a2 + 8 * v9) + 4 * v11);
        if (a4 == ++v11) {
          goto LABEL_10;
        }
      }
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      memset(buf, 0, sizeof(buf));
      a4 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      a3 = (id)CoreRELog::log;
      if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
    }
    uint64_t v18 = *((void *)v8 + 18);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a4;
    uint64_t v15 = "Blend Shape Weights animation sample cannot set weight values, weight count does not match: %zu != %zu";
    unint64_t v16 = a3;
    uint32_t v17 = 22;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
LABEL_23:
    }
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    a3 = (id)CoreRELog::log;
    if (!os_log_type_enabled(a3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "Cannot set blend shape weights sample values for incompatible animation.";
    unint64_t v16 = a3;
    uint32_t v17 = 2;
  }
  _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
LABEL_18:

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsIndexValues(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 59)
  {
    uint64_t v8 = v7;
    if (*((void *)v7 + 18) != a4)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      uint64_t v17 = *((void *)v8 + 18);
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = v17;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = a4;
      unint64_t v14 = "Blend Shape Weights cannot set weight values, weight count does not match: %zu != %zu";
      uint64_t v15 = v13;
      uint32_t v16 = 22;
      goto LABEL_20;
    }
    if (*((void *)v7 + 13) <= a2)
    {
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = a2;
      unint64_t v14 = "Blend Shape Weights cannot set weight value for index %zu.";
      uint64_t v15 = v13;
      uint32_t v16 = 12;
      goto LABEL_20;
    }
    uint64_t v9 = (uint64_t *)(*((void *)v7 + 15) + 24 * a2);
    if (!a4) {
      return 1;
    }
    uint64_t v10 = 0;
    uint64_t v11 = v9[1];
    while (v11 != v10)
    {
      *(_DWORD *)(v9[2] + 4 * v10) = *(_DWORD *)(a3 + 4 * v10);
      if (a4 == ++v10) {
        return 1;
      }
    }
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else if (CoreRELog::onceToken == -1)
  {
    goto LABEL_10;
  }
  dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
LABEL_10:
  uint64_t v13 = (id)CoreRELog::log;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    unint64_t v14 = "Cannot set blend shape weights index values for incompatible animation.";
    uint64_t v15 = v13;
    uint32_t v16 = 2;
LABEL_20:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buf, v16);
  }
LABEL_21:

  return 0;
}

uint64_t RETimelineDefinitionSetBlendShapeWeightsIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3, float a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "Cannot set blend shape weights index value for incompatible animation.";
LABEL_14:
    uint64_t v12 = v10;
    uint32_t v13 = 2;
    goto LABEL_15;
  }
  if (*((void *)v7 + 18) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "Blend Shape Weights cannot set weight value, not enough weights.";
    goto LABEL_14;
  }
  if (*((void *)v7 + 13) > a2)
  {
    uint64_t v8 = *((void *)v7 + 15) + 24 * a2;
    if (*(void *)(v8 + 8) > a3)
    {
      *(float *)(*(void *)(v8 + 16) + 4 * a3) = a4;
      return 1;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    a2 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_21:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v10 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    goto LABEL_18;
  }
  *(_DWORD *)long long buf = 134217984;
  *(void *)&uint8_t buf[4] = a2;
  uint64_t v11 = "Blend Shape Weights cannot set weight value for index %zu.";
  uint64_t v12 = v10;
  uint32_t v13 = 12;
LABEL_15:
  _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
LABEL_18:

  return 0;
}

float RETimelineDefinitionGetBlendShapeWeightsIndexValue(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 59)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v9 = "Cannot get blend shape weights index value for incompatible animation.";
LABEL_14:
    uint64_t v10 = v8;
    uint32_t v11 = 2;
    goto LABEL_15;
  }
  if (*((void *)v5 + 18) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v9 = "Blend Shape Weights cannot get weight value, not enough weights.";
    goto LABEL_14;
  }
  if (*((void *)v5 + 13) > a2)
  {
    uint64_t v6 = *((void *)v5 + 15) + 24 * a2;
    if (*(void *)(v6 + 8) > a3) {
      return *(float *)(*(void *)(v6 + 16) + 4 * a3);
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    a2 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_21:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v8 = (id)CoreRELog::log;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    goto LABEL_18;
  }
  *(_DWORD *)long long buf = 134217984;
  *(void *)&uint8_t buf[4] = a2;
  uint64_t v9 = "Blend Shape Weights cannot get weight value for index %zu.";
  uint64_t v10 = v8;
  uint32_t v11 = 12;
LABEL_15:
  _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
LABEL_18:

  return NAN;
}

void createClipAssetData(uint64_t *a1, uint64_t a2, AssetService *a3)
{
  uint64_t v5 = a1;
  uint64_t v50 = *MEMORY[0x263EF8340];
  var0 = a3[6].var0;
  if (!var0)
  {
    a1 = (uint64_t *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a3[3]);
    var0 = (void **)a1[1];
  }
  *uint64_t v5 = 0;
  v5[4] = 0;
  switch(*((_DWORD *)var0 + 2))
  {
    case 3:
    case 0xB:
    case 0x13:
    case 0x1B:
    case 0x27:
    case 0x33:
LABEL_9:
      uint64_t v24 = re::globalAllocators((re *)a1);
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 184, 8);
      uint64_t v26 = re::TimelineAssetData::TimelineAssetData(v25, 3);
      *(unsigned char *)(v26 + 72) = 0;
      *(unsigned char *)(v26 + 120) = 0;
      *(void *)(v26 + 136) = 0;
      *(unsigned char *)(v26 + 144) = 0;
      *(void *)(v26 + 152) = 0;
      *(unsigned char *)(v26 + 160) = 0;
      *(void *)(v26 + 88) = 0;
      *(void *)(v26 + 96) = 0;
      *(void *)(v26 + 80) = 0;
      *(unsigned char *)(v26 + 104) = 0;
      *(_DWORD *)(v26 + 176) = 1065353216;
      *(unsigned char *)(v26 + 180) = 0;
      *(void *)uint64_t v26 = &unk_26E6CED00;
      v45[0] = &unk_26E731738;
      long long v46 = v45;
      *(void *)&long long v47 = v26;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731738;
      goto LABEL_15;
    case 4:
    case 0xC:
    case 0x14:
    case 0x1C:
    case 0x28:
    case 0x34:
LABEL_8:
      long long v21 = re::globalAllocators((re *)a1);
      uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21[2] + 32))(v21[2], 184, 8);
      uint64_t v23 = re::TimelineAssetData::TimelineAssetData(v22, 4);
      *(unsigned char *)(v23 + 72) = 0;
      *(unsigned char *)(v23 + 120) = 0;
      *(void *)(v23 + 136) = 0;
      *(unsigned char *)(v23 + 144) = 0;
      *(void *)(v23 + 152) = 0;
      *(unsigned char *)(v23 + 160) = 0;
      *(void *)(v23 + 88) = 0;
      *(void *)(v23 + 96) = 0;
      *(void *)(v23 + 80) = 0;
      *(unsigned char *)(v23 + 104) = 0;
      *(_DWORD *)(v23 + 176) = 1065353216;
      *(unsigned char *)(v23 + 180) = 0;
      *(void *)uint64_t v23 = &unk_26E6CEDB0;
      v45[0] = &unk_26E7317B8;
      long long v46 = v45;
      *(void *)&long long v47 = v23;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E7317B8;
      goto LABEL_15;
    case 5:
    case 0xD:
    case 0x15:
    case 0x1D:
    case 0x29:
    case 0x35:
LABEL_10:
      uint64_t v27 = re::globalAllocators((re *)a1);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[2] + 32))(v27[2], 184, 8);
      uint64_t v29 = re::TimelineAssetData::TimelineAssetData(v28, 5);
      *(unsigned char *)(v29 + 72) = 0;
      *(unsigned char *)(v29 + 120) = 0;
      *(void *)(v29 + 136) = 0;
      *(unsigned char *)(v29 + 144) = 0;
      *(void *)(v29 + 152) = 0;
      *(unsigned char *)(v29 + 160) = 0;
      *(void *)(v29 + 88) = 0;
      *(void *)(v29 + 96) = 0;
      *(void *)(v29 + 80) = 0;
      *(unsigned char *)(v29 + 104) = 0;
      *(_DWORD *)(v29 + 176) = 1065353216;
      *(unsigned char *)(v29 + 180) = 0;
      *(void *)uint64_t v29 = &unk_26E6CEEB8;
      v45[0] = &unk_26E731838;
      long long v46 = v45;
      *(void *)&long long v47 = v29;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731838;
      goto LABEL_15;
    case 6:
    case 0xE:
    case 0x16:
    case 0x1E:
    case 0x2A:
    case 0x36:
LABEL_11:
      int v30 = re::globalAllocators((re *)a1);
      uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30[2] + 32))(v30[2], 184, 8);
      uint64_t v32 = re::TimelineAssetData::TimelineAssetData(v31, 6);
      *(unsigned char *)(v32 + 72) = 0;
      *(unsigned char *)(v32 + 120) = 0;
      *(void *)(v32 + 136) = 0;
      *(unsigned char *)(v32 + 144) = 0;
      *(void *)(v32 + 152) = 0;
      *(unsigned char *)(v32 + 160) = 0;
      *(void *)(v32 + 88) = 0;
      *(void *)(v32 + 96) = 0;
      *(void *)(v32 + 80) = 0;
      *(unsigned char *)(v32 + 104) = 0;
      *(_DWORD *)(v32 + 176) = 1065353216;
      *(unsigned char *)(v32 + 180) = 0;
      *(void *)uint64_t v32 = &unk_26E6CEFC0;
      v45[0] = &unk_26E7318B8;
      long long v46 = v45;
      *(void *)&long long v47 = v32;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E7318B8;
      goto LABEL_15;
    case 7:
    case 0xF:
    case 0x17:
    case 0x1F:
    case 0x2B:
    case 0x37:
LABEL_12:
      int v33 = re::globalAllocators((re *)a1);
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33[2] + 32))(v33[2], 184, 8);
      uint64_t v35 = re::TimelineAssetData::TimelineAssetData(v34, 7);
      *(unsigned char *)(v35 + 72) = 0;
      *(unsigned char *)(v35 + 120) = 0;
      *(void *)(v35 + 136) = 0;
      *(unsigned char *)(v35 + 144) = 0;
      *(void *)(v35 + 152) = 0;
      *(unsigned char *)(v35 + 160) = 0;
      *(void *)(v35 + 88) = 0;
      *(void *)(v35 + 96) = 0;
      *(void *)(v35 + 80) = 0;
      *(unsigned char *)(v35 + 104) = 0;
      *(_DWORD *)(v35 + 176) = 1065353216;
      *(unsigned char *)(v35 + 180) = 0;
      *(void *)uint64_t v35 = &unk_26E6CF0C8;
      v45[0] = &unk_26E731938;
      long long v46 = v45;
      *(void *)&long long v47 = v35;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731938;
      goto LABEL_15;
    case 8:
    case 0x10:
    case 0x18:
    case 0x20:
    case 0x2C:
    case 0x39:
LABEL_13:
      __int16 v36 = re::globalAllocators((re *)a1);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36[2] + 32))(v36[2], 184, 8);
      uint64_t v38 = re::TimelineAssetData::TimelineAssetData(v37, 8);
      *(unsigned char *)(v38 + 72) = 0;
      *(unsigned char *)(v38 + 120) = 0;
      *(void *)(v38 + 136) = 0;
      *(unsigned char *)(v38 + 144) = 0;
      *(void *)(v38 + 152) = 0;
      *(unsigned char *)(v38 + 160) = 0;
      *(void *)(v38 + 88) = 0;
      *(void *)(v38 + 96) = 0;
      *(void *)(v38 + 80) = 0;
      *(unsigned char *)(v38 + 104) = 0;
      *(_DWORD *)(v38 + 176) = 1065353216;
      *(unsigned char *)(v38 + 180) = 0;
      *(void *)uint64_t v38 = &unk_26E6CF1D0;
      v45[0] = &unk_26E7319B8;
      long long v46 = v45;
      *(void *)&long long v47 = v38;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E7319B8;
      goto LABEL_15;
    case 9:
    case 0x11:
    case 0x19:
    case 0x21:
    case 0x25:
    case 0x2D:
    case 0x38:
LABEL_4:
      unint64_t v7 = re::globalAllocators((re *)a1);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 184, 8);
      uint64_t v9 = re::TimelineAssetData::TimelineAssetData(v8, 9);
      *(unsigned char *)(v9 + 72) = 0;
      *(unsigned char *)(v9 + 120) = 0;
      *(void *)(v9 + 136) = 0;
      *(unsigned char *)(v9 + 144) = 0;
      *(void *)(v9 + 152) = 0;
      *(unsigned char *)(v9 + 160) = 0;
      *(void *)(v9 + 88) = 0;
      *(void *)(v9 + 96) = 0;
      *(void *)(v9 + 80) = 0;
      *(unsigned char *)(v9 + 104) = 0;
      *(_DWORD *)(v9 + 176) = 1065353216;
      *(unsigned char *)(v9 + 180) = 0;
      *(void *)uint64_t v9 = &unk_26E6CF2D8;
      v45[0] = &unk_26E731A38;
      long long v46 = v45;
      *(void *)&long long v47 = v9;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731A38;
      goto LABEL_15;
    case 0xA:
    case 0x12:
    case 0x1A:
    case 0x22:
    case 0x2E:
    case 0x3A:
LABEL_14:
      long long v39 = re::globalAllocators((re *)a1);
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39[2] + 32))(v39[2], 184, 8);
      uint64_t v41 = re::TimelineAssetData::TimelineAssetData(v40, 10);
      *(unsigned char *)(v41 + 72) = 0;
      *(unsigned char *)(v41 + 120) = 0;
      *(void *)(v41 + 136) = 0;
      *(unsigned char *)(v41 + 144) = 0;
      *(void *)(v41 + 152) = 0;
      *(unsigned char *)(v41 + 160) = 0;
      *(void *)(v41 + 88) = 0;
      *(void *)(v41 + 96) = 0;
      *(void *)(v41 + 80) = 0;
      *(unsigned char *)(v41 + 104) = 0;
      *(_DWORD *)(v41 + 176) = 1065353216;
      *(unsigned char *)(v41 + 180) = 0;
      *(void *)uint64_t v41 = &unk_26E6CF3E0;
      v45[0] = &unk_26E731AB8;
      long long v46 = v45;
      *(void *)&long long v47 = v41;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731AB8;
      goto LABEL_15;
    case 0x30:
      switch(*((unsigned char *)var0 + 552))
      {
        case 1:
          goto LABEL_8;
        case 2:
          goto LABEL_10;
        case 3:
          goto LABEL_11;
        case 4:
          goto LABEL_12;
        case 5:
          goto LABEL_13;
        case 6:
          goto LABEL_4;
        case 7:
          goto LABEL_14;
        default:
          goto LABEL_9;
      }
    case 0x32:
    case 0x3B:
    case 0x3C:
    case 0x3D:
      uint32_t v11 = re::globalAllocators((re *)a1);
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 184, 8);
      uint64_t v13 = re::TimelineAssetData::TimelineAssetData(v12, 60);
      *(unsigned char *)(v13 + 72) = 0;
      *(unsigned char *)(v13 + 120) = 0;
      *(void *)(v13 + 136) = 0;
      *(unsigned char *)(v13 + 144) = 0;
      *(void *)(v13 + 152) = 0;
      *(unsigned char *)(v13 + 160) = 0;
      *(void *)(v13 + 88) = 0;
      *(void *)(v13 + 96) = 0;
      *(void *)(v13 + 80) = 0;
      *(unsigned char *)(v13 + 104) = 0;
      *(_DWORD *)(v13 + 176) = 1065353216;
      *(unsigned char *)(v13 + 180) = 0;
      *(void *)uint64_t v13 = &unk_26E6CF4E8;
      v45[0] = &unk_26E731B38;
      long long v46 = v45;
      *(void *)&long long v47 = v13;
      float v49 = (char *)&v47 + 8;
      uint64_t v10 = &unk_26E731B38;
LABEL_15:
      *((void *)&v47 + 1) = v10;
      std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::operator=[abi:nn180100](v5, (uint64_t *)&v47);
      std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v47);
      std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v45);
      long long v42 = (void *)*v5;
      uint64_t v43 = *((void *)&v47 + 1);
      long long v44 = *(_OWORD *)(*v5 + 80);
      v42[10] = v47;
      v42[11] = v43;
      long long v47 = v44;
      uint64_t v20 = v42[12];
      v42[12] = v48;
      break;
    default:
      long long v14 = re::globalAllocators((re *)a1);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14[2] + 32))(v14[2], 176, 8);
      uint64_t v16 = re::TimelineAssetData::TimelineAssetData(v15, 1);
      *(void *)uint64_t v16 = &unk_26E6CEBD0;
      *(unsigned char *)(v16 + 112) = 0;
      *(void *)(v16 + 128) = 0;
      *(unsigned char *)(v16 + 136) = 0;
      *(void *)(v16 + 144) = 0;
      *(unsigned char *)(v16 + 152) = 0;
      *(void *)(v16 + 80) = 0;
      *(void *)(v16 + 88) = 0;
      *(void *)(v16 + 72) = 0;
      *(unsigned char *)(v16 + 96) = 0;
      *(_DWORD *)(v16 + 168) = 1065353216;
      *(unsigned char *)(v16 + 172) = 0;
      v45[0] = &unk_26E731BB8;
      long long v46 = v45;
      *(void *)&long long v47 = v16;
      float v49 = (char *)&v47 + 8;
      *((void *)&v47 + 1) = &unk_26E731BB8;
      std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::operator=[abi:nn180100](v5, (uint64_t *)&v47);
      std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v47);
      std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v45);
      uint64_t v17 = (void *)*v5;
      uint64_t v18 = *((void *)&v47 + 1);
      long long v19 = *(_OWORD *)(*v5 + 72);
      v17[9] = v47;
      v17[10] = v18;
      long long v47 = v19;
      uint64_t v20 = v17[11];
      v17[11] = v48;
      break;
  }
  uint64_t v48 = v20;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v47);
}

uint64_t *std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::TimelineAssetData *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  uint64_t v6 = a1 + 1;
  unint64_t v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v6 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      a1[4] = (uint64_t)v6;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
    }
    else
    {
      a1[4] = (uint64_t)v8;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTimelineClip(const char *a1, uint64_t a2, AssetService *a3)
{
  __n128 v7[5] = *MEMORY[0x263EF8340];
  createClipAssetData(v7, a2, a3);
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](v7);
  uint64_t v4 = v6;
  return v4;
}

uint64_t RETimelineDefinitionCreateClipSourceRef(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    uint64_t v5 = 0;
    *(void *)long long buf = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    switch(v3)
    {
      case 1:
        uint64_t v6 = (uint64_t *)(v1 + 72);
        goto LABEL_13;
      case 2:
        goto LABEL_17;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60) {
          goto LABEL_17;
        }
LABEL_12:
        uint64_t v6 = (uint64_t *)(v1 + 80);
LABEL_13:
        re::AssetHandle::operator=((uint64_t)buf, v6);
        if (v11 && (unsigned int v7 = atomic_load((unsigned int *)(v11 + 704)), v7 == 2))
        {
          uint64_t v5 = v9;
        }
        else
        {
          uint64_t v5 = 0;
        }
LABEL_17:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip source from timeline clips.", buf, 2u);
    }

    return 0;
  }
  return v5;
}

uint64_t RETimelineDefinitionSetClipSource(uint64_t *a1, uint64_t a2, AssetService *a3)
{
  v32[5] = *(void ***)MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 6;
  uint64_t v7 = a1[6];
  if (!v7)
  {
    uint64_t v8 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v8) {
      uint64_t v7 = *(void *)(v8 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  var0 = a3[6].var0;
  if (!var0)
  {
    uint64_t v10 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)&a3[3]);
    if (v10) {
      var0 = *(void ***)(v10 + 8);
    }
    else {
      var0 = 0;
    }
  }
  int v11 = *(_DWORD *)(v7 + 8);
  switch(v11)
  {
    case 1:
      goto LABEL_39;
    case 2:
      goto LABEL_20;
    case 3:
      int v12 = *((_DWORD *)var0 + 2) - 3;
      goto LABEL_33;
    case 4:
      unsigned int v19 = *((_DWORD *)var0 + 2);
      unsigned int v20 = v19 - 4;
      goto LABEL_30;
    case 5:
      int v12 = *((_DWORD *)var0 + 2) - 5;
      goto LABEL_33;
    case 6:
      int v12 = *((_DWORD *)var0 + 2) - 6;
      goto LABEL_33;
    case 7:
      int v12 = *((_DWORD *)var0 + 2) - 7;
      goto LABEL_33;
    case 8:
      unsigned int v19 = *((_DWORD *)var0 + 2);
      unsigned int v20 = v19 - 8;
LABEL_30:
      unsigned int v21 = __PAIR64__(v19, v20) >> 2;
      goto LABEL_34;
    case 9:
      HIDWORD(v23) = *((_DWORD *)var0 + 2) - 9;
      LODWORD(v23) = HIDWORD(v23);
      unsigned int v22 = v23 >> 2;
      BOOL v24 = v22 > 9;
      int v25 = 1 << v22;
      int v26 = 725;
      goto LABEL_35;
    case 10:
      int v12 = *((_DWORD *)var0 + 2) - 10;
LABEL_33:
      HIDWORD(v27) = v12;
      LODWORD(v27) = v12;
      unsigned int v21 = v27 >> 2;
LABEL_34:
      BOOL v24 = v21 > 9;
      int v25 = 1 << v21;
      int v26 = 597;
LABEL_35:
      int v28 = v25 & v26;
      if (!v24 && v28 != 0) {
        goto LABEL_39;
      }
      goto LABEL_17;
    default:
      if (v11 == 60)
      {
        unsigned int v13 = *((_DWORD *)var0 + 2);
        BOOL v24 = v13 > 0x3D;
        uint64_t v14 = (1 << v13) & 0x3804000000000000;
        if (v24 || v14 == 0)
        {
LABEL_17:
          createClipAssetData((uint64_t *)v32, a2, a3);
          std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::operator=[abi:nn180100](v6, (uint64_t *)v32);
          uint64_t v16 = a1[3];
          if (v16)
          {

            a1[3] = 0;
          }
          a1[4] = 0;
          std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v32);
        }
        else
        {
LABEL_39:
          int v30 = *(_DWORD *)(v7 + 8);
          switch(v30)
          {
            case 1:
                  + 72;
              goto LABEL_41;
            case 2:
              goto LABEL_42;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
              goto LABEL_40;
            default:
              if (v30 != 60) {
                goto LABEL_42;
              }
LABEL_40:
                  + 80;
LABEL_41:
              re::AssetHandle::operator=((uint64_t)v31, (uint64_t *)v32);
LABEL_42:
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
              break;
          }
        }
        return 1;
      }
      else
      {
LABEL_20:
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v17 = (id)CoreRELog::log;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v32[0]) = 0;
          _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Can only set clip source of timeline clips.", (uint8_t *)v32, 2u);
        }

        return 0;
      }
  }
}

uint64_t RETimelineDefinitionGetClipStart(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 1:
        int v6 = *(unsigned __int8 *)(v1 + 96);
        uint64_t v7 = v1 + 104;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60) {
          return result;
        }
LABEL_12:
        int v6 = *(unsigned __int8 *)(v1 + 104);
        uint64_t v7 = v1 + 112;
LABEL_13:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip start for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipStart(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          uint64_t v9 = *a2;
          if (!*((unsigned char *)v3 + 96)) {
            *((unsigned char *)v3 + 96) = 1;
          }
          *((void *)v3 + 13) = v9;
        }
        else if (*((unsigned char *)v3 + 96))
        {
          *((unsigned char *)v3 + 96) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            uint64_t v6 = *a2;
            if (!*((unsigned char *)v3 + 104)) {
              *((unsigned char *)v3 + 104) = 1;
            }
            *((void *)v3 + 14) = v6;
          }
          else if (*((unsigned char *)v3 + 104))
          {
            *((unsigned char *)v3 + 104) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can only set clip start for timeline clips.", v10, 2u);
    }
  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipEnd(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 1:
        int v6 = *(unsigned __int8 *)(v1 + 112);
        uint64_t v7 = v1 + 120;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60) {
          return result;
        }
LABEL_12:
        int v6 = *(unsigned __int8 *)(v1 + 120);
        uint64_t v7 = v1 + 128;
LABEL_13:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip end for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipEnd(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          uint64_t v9 = *a2;
          if (!*((unsigned char *)v3 + 112)) {
            *((unsigned char *)v3 + 112) = 1;
          }
          *((void *)v3 + 15) = v9;
        }
        else if (*((unsigned char *)v3 + 112))
        {
          *((unsigned char *)v3 + 112) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            uint64_t v6 = *a2;
            if (!*((unsigned char *)v3 + 120)) {
              *((unsigned char *)v3 + 120) = 1;
            }
            *((void *)v3 + 16) = v6;
          }
          else if (*((unsigned char *)v3 + 120))
          {
            *((unsigned char *)v3 + 120) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can only set clip end for timeline clips.", v10, 2u);
    }
  }
  return v5 & 1;
}

double RETimelineDefinitionGetClipOffset(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    double result = 0.0;
    switch(v3)
    {
      case 1:
        double result = *(double *)(v1 + 128);
        break;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60) {
LABEL_12:
        }
          double result = *(double *)(v1 + 136);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip offset for timeline clips.", v6, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipOffset(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        *((double *)v3 + 16) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60) {
LABEL_3:
        }
          *((double *)v3 + 17) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Can only set clip offset for timeline clips.", v8, 2u);
    }
  }
  return v5 & 1;
}

double RETimelineDefinitionGetClipDelay(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    double result = 0.0;
    switch(v3)
    {
      case 1:
        double result = *(double *)(v1 + 144);
        break;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60) {
LABEL_12:
        }
          double result = *(double *)(v1 + 152);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip delay for timeline clips.", v6, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipDelay(_anonymous_namespace_::TimelineDefinition *a1, double a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        *((double *)v3 + 18) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60) {
LABEL_3:
        }
          *((double *)v3 + 19) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Can only set clip delay for timeline clips.", v8, 2u);
    }
  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipDuration(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    uint64_t result = 0;
    switch(v3)
    {
      case 1:
        int v6 = *(unsigned __int8 *)(v1 + 152);
        uint64_t v7 = v1 + 160;
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60) {
          return result;
        }
LABEL_12:
        int v6 = *(unsigned __int8 *)(v1 + 160);
        uint64_t v7 = v1 + 168;
LABEL_13:
        if (v6) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = 0;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip duration for timeline clips.", v8, 2u);
    }

    return 0;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipDuration(_anonymous_namespace_::TimelineDefinition *a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        if (a2)
        {
          uint64_t v9 = *a2;
          if (!*((unsigned char *)v3 + 152)) {
            *((unsigned char *)v3 + 152) = 1;
          }
          *((void *)v3 + 20) = v9;
        }
        else if (*((unsigned char *)v3 + 152))
        {
          *((unsigned char *)v3 + 152) = 0;
        }
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          if (a2)
          {
            uint64_t v6 = *a2;
            if (!*((unsigned char *)v3 + 160)) {
              *((unsigned char *)v3 + 160) = 1;
            }
            *((void *)v3 + 21) = v6;
          }
          else if (*((unsigned char *)v3 + 160))
          {
            *((unsigned char *)v3 + 160) = 0;
          }
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can only set clip duration for timeline clips.", v10, 2u);
    }
  }
  return v5 & 1;
}

float RETimelineDefinitionGetClipSpeed(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    float result = 0.0;
    switch(v3)
    {
      case 1:
        uint64_t v6 = (float *)(v1 + 168);
        uint64_t v7 = (unsigned char *)(v1 + 136);
        goto LABEL_13;
      case 2:
        return result;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 != 60) {
          return result;
        }
LABEL_12:
        uint64_t v6 = (float *)(v1 + 176);
        uint64_t v7 = (unsigned char *)(v1 + 144);
LABEL_13:
        float result = *v6;
        if (*v7) {
          float result = -result;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip speed for timeline clips.", v8, 2u);
    }

    return NAN;
  }
  return result;
}

unint64_t RETimelineDefinitionSetClipSpeed(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        float v9 = -a2;
        if (!*((unsigned char *)v3 + 136)) {
          float v9 = a2;
        }
        *((float *)v3 + 42) = v9;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60)
        {
LABEL_3:
          float v6 = -a2;
          if (!*((unsigned char *)v3 + 144)) {
            float v6 = a2;
          }
          *((float *)v3 + 44) = v6;
        }
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Can only set clip speed for timeline clips.", v10, 2u);
    }
  }
  return v5 & 1;
}

uint64_t RETimelineDefinitionGetClipLoopBehavior(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1)
  {
    uint64_t v2 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v2) {
      uint64_t v1 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v1 = 0;
    }
  }
  int v3 = *(_DWORD *)(v1 + 8);
  if ((0x10000000000007FAuLL >> v3))
  {
    char v5 = -1;
    switch(v3)
    {
      case 1:
        char v5 = *(unsigned char *)(v1 + 172);
        break;
      case 2:
        return v5;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_12;
      default:
        if (v3 == 60) {
LABEL_12:
        }
          char v5 = *(unsigned char *)(v1 + 180);
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only get clip loop behavior for timeline clips.", v7, 2u);
    }

    return -1;
  }
  return v5;
}

unint64_t RETimelineDefinitionSetClipLoopBehavior(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  unint64_t v5 = 0x10000000000007FAuLL >> v4;
  if ((0x10000000000007FAuLL >> v4))
  {
    switch(v4)
    {
      case 1:
        *((unsigned char *)v3 + 172) = a2;
        break;
      case 2:
        return v5 & 1;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
        goto LABEL_3;
      default:
        if (v4 == 60) {
LABEL_3:
        }
          *((unsigned char *)v3 + 180) = a2;
        break;
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    float v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Can only set clip loop behavior for timeline clips.", v8, 2u);
    }
  }
  return v5 & 1;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTimelineGroup(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 2);
  *(void *)uint64_t v4 = &unk_26E6CEC28;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 72) = 0;
  *(_DWORD *)(v4 + 96) = 0;
  v8[0] = &unk_26E731C38;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731C38;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  unint64_t v5 = v7;
  return v5;
}

uint64_t RETimelineDefinitionGetChildrenTimelineCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 2) {
    return *(void *)(v1 + 88);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get children count for timeline groups.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetChildrenTimelineCount(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 2)
  {
    re::DynamicArray<re::AssetHandle>::resize((uint64_t)v3 + 72, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Can only set children count for timeline groups.", v7, 2u);
    }
  }
  return v4 == 2;
}

uint64_t RETimelineDefinitionCreateChildTimelineRef(void *a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[6];
  if (!v3)
  {
    a1 = (void *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    uint64_t v3 = a1[1];
  }
  if (*(_DWORD *)(v3 + 8) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(buf[0]) = 0;
    int v12 = "Can only set children count for timeline groups.";
    goto LABEL_28;
  }
  if (*(void *)(v3 + 88) <= a2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(v3 + 88);
      LODWORD(buf[0]) = 134218240;
      *(void *)((char *)buf + 4) = a2;
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 14) = v13;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)buf, 0x16u);
    }

    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)(v3 + 104) + 24 * a2 + 8);
  if (!v4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v9 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    LOWORD(buf[0]) = 0;
    int v12 = "Timeline child is not valid.";
    goto LABEL_28;
  }
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_25:
      uint64_t v9 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
LABEL_12:

        return 0;
      }
      LOWORD(buf[0]) = 0;
      int v12 = "Timeline child is not loaded.";
LABEL_28:
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v12, (uint8_t *)buf, 2u);
      goto LABEL_12;
    }
LABEL_30:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_25;
  }
  if (*(void *)(v3 + 88) <= a2)
  {
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  float v6 = (const re::AssetHandle *)(*(void *)(v3 + 104) + 24 * a2);
  uint64_t v7 = re::globalAllocators((re *)a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 112, 8);
  re::AssetHandle::AssetHandle((re::AssetHandle *)buf, v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  return v8;
}

uint64_t RETimelineDefinitionSetChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3, unint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Can only set children count for timeline groups.", (uint8_t *)buf, 2u);
    }

    return 0;
  }
  uint64_t v8 = v7;
  if (*((void *)v7 + 11) > a4)
  {
    unint64_t v9 = *((void *)v8 + 11);
    if (v9 > a4)
    {
      uint64_t v10 = *((void *)v8 + 13) + 24 * a4;
      uint64_t v11 = *(void *)(v10 + 8);
      *(void *)(v10 + 8) = v19;
      uint64_t v19 = v11;
      int v12 = *(void ***)v10;
      *(void *)uint64_t v10 = 0;
      *(void *)uint64_t v10 = v18;
      uint64_t v18 = v12;
      uint64_t v13 = *(void *)(v10 + 16);
      *(void *)(v10 + 16) = v20;
      uint64_t v20 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v18);
      return 1;
    }
    uint64_t v21 = 0;
    memset(buf, 0, sizeof(buf));
    uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v22 = 136315906;
    unint64_t v23 = "operator[]";
    __int16 v24 = 1024;
    int v25 = 789;
    __int16 v26 = 2048;
    unint64_t v27 = a4;
    __int16 v28 = 2048;
    unint64_t v29 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v16 = (id)CoreRELog::log;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *((void *)v8 + 11);
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + 4) = a4;
    WORD6(buf[0]) = 2048;
    *(void *)((char *)buf + 14) = v17;
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)buf, 0x16u);
  }

  return 0;
}

BOOL RETimelineDefinitionAddChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 2)
  {
    uint64_t v7 = (void *)((char *)v5 + 72);
    re::DynamicArray<re::AssetHandle>::add(v7, (uint64_t *)v10);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10[0]) = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Can only add children for timeline groups.", (uint8_t *)v10, 2u);
    }
  }
  return v6 == 2;
}

uint64_t RETimelineDefinitionInsertChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, AssetService *a3, unint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) != 2)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Can only insert children for timeline groups.", (uint8_t *)&v13, 2u);
    }

    return 0;
  }
  uint64_t v8 = v7;
  if (*((void *)v7 + 11) < a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *((void *)v8 + 11);
      int v13 = 134218240;
      unint64_t v14 = a4;
      __int16 v15 = 2048;
      uint64_t v16 = v12;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Cannot insert child index (%zu), children count: %zu", (uint8_t *)&v13, 0x16u);
    }

    return 0;
  }
  re::DynamicArray<re::AssetHandle>::insert((void *)v8 + 9, a4, (uint64_t *)&v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return 1;
}

uint64_t RETimelineDefinitionRemoveChildTimeline(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v3 + 2) == 2)
  {
    uint64_t v4 = v3;
    if (*((void *)v3 + 11) > a2)
    {
      re::DynamicArray<re::AssetHandle>::removeStableAt((uint64_t)v3 + 72, a2);
      return 1;
    }
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *((void *)v4 + 11);
      int v9 = 134218240;
      unint64_t v10 = a2;
      __int16 v11 = 2048;
      uint64_t v12 = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Timeline group child index (%zu) does not exist, children count: %zu", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Can only remove children from timeline groups.", (uint8_t *)&v9, 2u);
    }
  }
  return 0;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateOrbitAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 160, 16);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 37);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0EC8;
  *(_DWORD *)(v4 + 76) = 1065353216;
  *(_OWORD *)(v4 + 80) = xmmword_23435FD60;
  *(void *)(v4 + 96) = 0x3F8000003F800000;
  *(void *)(v4 + 104) = 1065353216;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0x3F80000000000000;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0;
  *(_WORD *)(v4 + 144) = 1;
  *(_DWORD *)(v4 + 148) = 1065353216;
  v8[0] = &unk_26E731CB8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E731CB8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  unsigned int v5 = v7;
  return v5;
}

double RETimelineDefinitionGetAxis(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 37)
  {
    long long v2 = *(_OWORD *)(v1 + 80);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get axis for orbit animations.", v5, 2u);
    }

    *(void *)&long long v2 = vdupq_n_s32(0x7FC00000u).u64[0];
  }
  return *(double *)&v2;
}

BOOL RETimelineDefinitionSetAxis(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2)
{
  unsigned __int32 v3 = v2->n128_u32[2];
  if (v3 == 37)
  {
    v2[5] = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Can only set axis for orbit animations.", buf, 2u);
    }
  }
  return v3 == 37;
}

double RETimelineDefinitionGetStartTransform(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 37)
  {
    long long v2 = *(_OWORD *)(v1 + 96);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int32 v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get start transform for orbit animations.", v5, 2u);
    }

    *(void *)&long long v2 = vdupq_n_s32(0x7FC00000u).u64[0];
  }
  return *(double *)&v2;
}

BOOL RETimelineDefinitionSetStartTransform(_anonymous_namespace_::TimelineDefinition *a1, __n128 a2, __n128 a3, __n128 a4)
{
  unsigned __int32 v5 = v4->n128_u32[2];
  if (v5 == 37)
  {
    v4[6] = a2;
    v4[7] = a3;
    v4[8] = a4;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Can only set start transform for orbit animations.", buf, 2u);
    }
  }
  return v5 == 37;
}

BOOL RETimelineDefinitionGetSpinClockwise(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 37) {
    return *(unsigned char *)(v1 + 144) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unsigned __int32 v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get spin clockwise state for orbit animations.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetSpinClockwise(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((unsigned char *)v3 + 144) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int32 v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Can only set spin clockwise state for orbit animations.", v7, 2u);
    }
  }
  return v4 == 37;
}

BOOL RETimelineDefinitionGetOrientToPath(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 37) {
    return *(unsigned char *)(v1 + 145) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unsigned __int32 v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get orient to path for orbit animations.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionSetOrientToPath(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((unsigned char *)v3 + 145) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int32 v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Can only set orient to path for orbit animations.", v7, 2u);
    }
  }
  return v4 == 37;
}

float RETimelineDefinitionGetRotationCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 37) {
    return *(float *)(v1 + 148);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  unsigned __int32 v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Can only get rotation count for orbit animations.", v4, 2u);
  }

  return NAN;
}

BOOL RETimelineDefinitionSetRotationCount(_anonymous_namespace_::TimelineDefinition *a1, float a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 37)
  {
    *((float *)v3 + 37) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned __int32 v5 = (id)CoreRELog::log;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Can only set rotation count for orbit animations.", v7, 2u);
    }
  }
  return v4 == 37;
}

uint64_t RETimelineDefinitionCreateFloatBlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 39);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D0FD0;
  v13[0] = &unk_26E731D38;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E731D38;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E731DB8;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateDoubleBlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 40);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D1080;
  v13[0] = &unk_26E731E00;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E731E00;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E731E80;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat2BlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 41);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D1130;
  v13[0] = &unk_26E731EC8;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E731EC8;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E731F48;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat3BlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 42);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D11E0;
  v13[0] = &unk_26E731F90;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E731F90;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E732010;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateFloat4BlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 43);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D1290;
  v13[0] = &unk_26E732058;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E732058;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E7320D8;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateQuaternionBlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 44);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D1340;
  v13[0] = &unk_26E732120;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E732120;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E7321A0;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateSRTBlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 45);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D13F0;
  v13[0] = &unk_26E7321E8;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E7321E8;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E732268;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionCreateSkeletalPoseBlendTree(re *a1)
{
  v15[4] = *MEMORY[0x263EF8340];
  long long v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 288, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 46);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 160) = 0;
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  *(void *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_DWORD *)(v4 + 232) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)(v4 + 280) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(void *)uint64_t v4 = &unk_26E6D14A0;
  v13[0] = &unk_26E7322B0;
  v13[3] = v13;
  uint64_t v14 = v4;
  v15[3] = v15;
  v15[0] = &unk_26E7322B0;
  unsigned __int32 v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 608, 8);
  *(void *)uint64_t v7 = &unk_26E732330;
  uint64_t v8 = v7 + 112;
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  *(void *)(v7 + 120) = 0;
  *(_DWORD *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 180) = 0u;
  *(void *)(v7 + 196) = 0x7FFFFFFFLL;
  uint64_t v9 = v7 + 208;
  unint64_t v10 = re::StringID::invalid((re::StringID *)(v7 + 208));
  *(void *)(v6 + 2physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)(v6 + 232) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_DWORD *)(v6 + 288) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_DWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_DWORD *)(v6 + 368) = 0;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_DWORD *)(v6 + 408) = 0;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(void *)(v6 + 484) = 0x7FFFFFFFLL;
  *(unsigned char *)(v6 + 496) = 0;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_DWORD *)(v6 + 552) = 0;
  *(void *)(v6 + 556) = 0x7FFFFFFFLL;
  *(void *)(v6 + 600) = 0;
  *(void *)(v6 + 584) = 0;
  *(_DWORD *)(v6 + 592) = 0;
  *(void *)(v6 + 568) = 0;
  *(void *)(v6 + 576) = 0;
      + 80;
  *(void *)(v6 + 504) = v11;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  return v6;
}

uint64_t RETimelineDefinitionBlendTreeAddRigNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, float a5)
{
  uint64_t v11 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddRigNode(a1, a2, a3, a4, &v11, a5);
      break;
    default:
      return v11;
  }
  return v11;
}

void TimelineDefinitionForBlendTree<float>::doAddRigNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, uint64_t *a5, float a6)
{
  *(void *)&v16.var0 = 0;
  v16.uint64_t var1 = "";
  *(void *)&v15.var0 = 0;
  v15.uint64_t var1 = "";
  *(void *)&v14.var0 = 0;
  if (a4)
  {
    v14.uint64_t var1 = "";
  }
  else
  {
    v14.uint64_t var1 = "";
  }
  *a5 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v16, &v15, &v14, a6);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v16);
}

uint64_t RETimelineDefinitionBlendTreeAddBlend(_anonymous_namespace_ *a1, const char *a2, const char *a3, float a4)
{
  uint64_t v9 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddBlendNode(a1, a2, a3, &v9, a4);
      break;
    default:
      return v9;
  }
  return v9;
}

void TimelineDefinitionForBlendTree<float>::doAddBlendNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t *a4, float a5)
{
  *(void *)&v13.var0 = 0;
  v13.uint64_t var1 = "";
  *(void *)&v12.var0 = 0;
  if (a3)
  {
    v12.uint64_t var1 = "";
  }
  else
  {
    v12.uint64_t var1 = "";
  }
  *(void *)&v14.var0 = 128540770;
  v14.uint64_t var1 = "Blend";
  uint64_t v11 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v14, &v13, &v12, a5);
  re::StringID::destroyString((re::StringID *)&v14);
  *a4 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v13);
}

uint64_t RETimelineDefinitionBlendTreeAddAdditiveBlend(_anonymous_namespace_ *a1, const char *a2, const char *a3, float a4)
{
  uint64_t v9 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode(a1, a2, a3, &v9, a4);
      break;
    default:
      return v9;
  }
  return v9;
}

void TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t *a4, float a5)
{
  *(void *)&v13.var0 = 0;
  v13.uint64_t var1 = "";
  *(void *)&v12.var0 = 0;
  if (a3)
  {
    v12.uint64_t var1 = "";
  }
  else
  {
    v12.uint64_t var1 = "";
  }
  *(void *)&v14.var0 = 0xF17087402FF81E3ALL;
  v14.uint64_t var1 = "BlendAdditive";
  uint64_t v11 = re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v14, &v13, &v12, a5);
  re::StringID::destroyString((re::StringID *)&v14);
  *a4 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  re::StringID::destroyString((re::StringID *)&v13);
}

uint64_t RETimelineDefinitionBlendTreeAddTimelineSource(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, const char *a3, AssetService *a4, const char *a5, float a6)
{
  uint64_t v10 = -1;
  uint64_t v21 = -1;
  {
    case '\'':
      uint64_t v11 = (re::AssetHandle *)v20;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a3, (re::TimelineAsset *)v20, a5, &v21, a6);
      goto LABEL_10;
    case '(':
      uint64_t v11 = (re::AssetHandle *)v19;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v19, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a3, (re::TimelineAsset *)v19, a5, &v21, a6);
      goto LABEL_10;
    case ')':
      uint64_t v11 = (re::AssetHandle *)v18;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v18, a5, &v21, a6);
      goto LABEL_10;
    case '*':
      uint64_t v11 = (re::AssetHandle *)v17;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v17, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v17, a5, &v21, a6);
      goto LABEL_10;
    case '+':
      uint64_t v11 = (re::AssetHandle *)v16;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v16, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v16, a5, &v21, a6);
      goto LABEL_10;
    case ',':
      uint64_t v11 = (re::AssetHandle *)v15;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v15, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v15, a5, &v21, a6);
      goto LABEL_10;
    case '-':
      uint64_t v11 = (re::AssetHandle *)v14;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a3, (re::TimelineAsset *)v14, a5, &v21, a6);
      goto LABEL_10;
    case '.':
      uint64_t v11 = (re::AssetHandle *)v13;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, (const re::AssetHandle *)v22);
      TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a3, (re::TimelineAsset *)v13, a5, &v21, a6);
LABEL_10:
      re::AssetHandle::~AssetHandle(v11);
      uint64_t v10 = v21;
      break;
    default:
      break;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  return v10;
}

void TimelineDefinitionForBlendTree<float>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 3;
  LODWORD(v17) = v14 - 3;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<double>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = *(_DWORD *)(v13 + 8);
  LODWORD(v17) = v14 - 4;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 5;
  LODWORD(v17) = v14 - 5;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 6;
  LODWORD(v17) = v14 - 6;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = v14 - 7;
  LODWORD(v17) = v14 - 7;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add empty timeline to blend tree.";
    goto LABEL_26;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  int v14 = *(_DWORD *)(v13 + 8);
  if (v14 == 2)
  {
    if (*(void *)(v13 + 88) == 1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v27, *(const re::AssetHandle **)(v13 + 104));
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a2, v27, a4, a5, a6);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v27);
    }
    return;
  }
  HIDWORD(v17) = *(_DWORD *)(v13 + 8);
  LODWORD(v17) = v14 - 8;
  unsigned int v16 = v17 >> 2;
  BOOL v18 = v16 > 9;
  int v19 = (1 << v16) & 0x255;
  if (v18 || v19 == 0)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    StringID v15 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_WORD *)&buf.var0 = 0;
    unint64_t v23 = "Cannot add incompatible timeline type to blend tree.";
LABEL_26:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, 2u);
LABEL_9:

    return;
  }
  *(void *)&buf.var0 = 0;
  buf.uint64_t var1 = "";
  *(void *)&v25.var0 = 0;
  if (a4)
  {
    v25.uint64_t var1 = "";
  }
  else
  {
    v25.uint64_t var1 = "";
  }
  *(void *)&v24.var0 = 0;
  v24.uint64_t var1 = "";
  *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v25, &v24, a6);
  re::StringID::destroyString((re::StringID *)&v24);
  re::StringID::destroyString((re::StringID *)&v25);
  re::StringID::destroyString((re::StringID *)&buf);
  re::DynamicArray<re::AssetHandle>::add(v22, a3);
}

void TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)&buf.var0 = 0;
    BOOL v18 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  uint64_t v14 = *(unsigned int *)(v13 + 8);
  if (v14 > 0x2D) {
    goto LABEL_19;
  }
  if (((1 << v14) & 0x201202020200) != 0)
  {
    *(void *)&buf.var0 = 0;
    buf.uint64_t var1 = "";
    *(void *)&v20.var0 = 0;
    if (a4)
    {
      v20.uint64_t var1 = "";
    }
    else
    {
      v20.uint64_t var1 = "";
    }
    *(void *)&v19.var0 = 0;
    v19.uint64_t var1 = "";
    *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v20, &v19, a6);
    re::StringID::destroyString((re::StringID *)&v19);
    re::StringID::destroyString((re::StringID *)&v20);
    re::StringID::destroyString((re::StringID *)&buf);
    re::DynamicArray<re::AssetHandle>::add(v17, a3);
    return;
  }
  if (v14 != 2)
  {
LABEL_19:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)&buf.var0 = 0;
    BOOL v18 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 2u);
LABEL_10:

    return;
  }
  if (*(void *)(v13 + 88) == 1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v22, *(const re::AssetHandle **)(v13 + 104));
    TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a2, v22, a4, a5, a6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  }
}

void TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, re::TimelineAsset *a3, const char *a4, uint64_t *a5, float a6)
{
  if (!*((void *)a3 + 1))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)&buf.var0 = 0;
    BOOL v18 = "Cannot add empty timeline to blend tree.";
    goto LABEL_24;
  }
  StringID v12 = (_anonymous_namespace_ *)re::AssetHandle::asset<re::TimelineAsset>(a3);
  if (!v12) {
    return;
  }
  uint64_t v13 = *((void *)v12 + 1);
  uint64_t v14 = *(unsigned int *)(v13 + 8);
  if (v14 > 0x2E) {
    goto LABEL_19;
  }
  if (((1 << v14) & 0x400C04040400) != 0)
  {
    *(void *)&buf.var0 = 0;
    buf.uint64_t var1 = "";
    *(void *)&v20.var0 = 0;
    if (a4)
    {
      v20.uint64_t var1 = "";
    }
    else
    {
      v20.uint64_t var1 = "";
    }
    *(void *)&v19.var0 = 0;
    v19.uint64_t var1 = "";
    *a5 = re::AnimationBlendTreeBuilder<float>::addClip((uint64_t)a1 + 112, &buf, &v20, &v19, a6);
    re::StringID::destroyString((re::StringID *)&v19);
    re::StringID::destroyString((re::StringID *)&v20);
    re::StringID::destroyString((re::StringID *)&buf);
    re::DynamicArray<re::AssetHandle>::add(v17, a3);
    return;
  }
  if (v14 != 2)
  {
LABEL_19:
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unsigned int v16 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)&buf.var0 = 0;
    BOOL v18 = "Cannot add incompatible timeline type to blend tree.";
LABEL_24:
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, 2u);
LABEL_10:

    return;
  }
  if (*(void *)(v13 + 88) == 1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v22, *(const re::AssetHandle **)(v13 + 104));
    TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a2, v22, a4, a5, a6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  }
}

void RETimelineDefinitionBlendTreeAddTimeline(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, uint64_t a3, const char *a4, float a5)
{
  {
    case '\'':
      uint64_t v10 = v18;
      re::AssetAPIHelper::assetHandleCreate(a3, v18);
      TimelineDefinitionForBlendTree<float>::doAddTimeline(a1, a2, (re::TimelineAsset *)v18, a4, &v19, a5);
      goto LABEL_10;
    case '(':
      uint64_t v10 = v17;
      re::AssetAPIHelper::assetHandleCreate(a3, v17);
      TimelineDefinitionForBlendTree<double>::doAddTimeline(a1, a2, (re::TimelineAsset *)v17, a4, &v19, a5);
      goto LABEL_10;
    case ')':
      uint64_t v10 = v16;
      re::AssetAPIHelper::assetHandleCreate(a3, v16);
      TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v16, a4, &v19, a5);
      goto LABEL_10;
    case '*':
      uint64_t v10 = v15;
      re::AssetAPIHelper::assetHandleCreate(a3, v15);
      TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v15, a4, &v19, a5);
      goto LABEL_10;
    case '+':
      uint64_t v10 = v14;
      re::AssetAPIHelper::assetHandleCreate(a3, v14);
      TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v14, a4, &v19, a5);
      goto LABEL_10;
    case ',':
      uint64_t v10 = v13;
      re::AssetAPIHelper::assetHandleCreate(a3, v13);
      TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v13, a4, &v19, a5);
      goto LABEL_10;
    case '-':
      uint64_t v10 = v12;
      re::AssetAPIHelper::assetHandleCreate(a3, v12);
      TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline(a1, a2, (re::TimelineAsset *)v12, a4, &v19, a5);
      goto LABEL_10;
    case '.':
      uint64_t v10 = v11;
      re::AssetAPIHelper::assetHandleCreate(a3, v11);
      TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline(a1, a2, (re::TimelineAsset *)v11, a4, &v19, a5);
LABEL_10:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
      break;
    default:
      return;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddInput(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, float a6)
{
  uint64_t v13 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddInput(a1, a2, a3, a4, a5, &v13, a6);
      break;
    default:
      return v13;
  }
  return v13;
}

void TimelineDefinitionForBlendTree<float>::doAddInput(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, void *a6, float a7)
{
  *(void *)&v20.var0 = 0;
  v20.uint64_t var1 = "";
  *(void *)&v19.var0 = 0;
  v19.uint64_t var1 = "";
  *(void *)&v18.var0 = 0;
  if (a4)
  {
    v18.uint64_t var1 = "";
  }
  else
  {
    v18.uint64_t var1 = "";
  }
  *(void *)&v17.var0 = 0;
  if (a5)
  {
    v17.uint64_t var1 = "";
  }
  else
  {
    v17.uint64_t var1 = "";
  }
  unsigned int v16 = (_anonymous_namespace_ *)*((void *)a1 + 63);
  re::StringID::StringID((re::StringID *)v21, &v20);
  v22[0] = 141610836;
  v22[1] = "Input";
  if (*(void *)&v19.var0 <= 1uLL && v19.var1 && !*v19.var1)
  {
    v23[0] = 0x19BD80BACLL;
    v23[1] = "unused";
  }
  else
  {
    re::StringID::StringID((re::StringID *)v23, &v19);
  }
  re::StringID::StringID((re::StringID *)v24, &v18);
  re::StringID::StringID((re::StringID *)v25, &v17);
  *(float *)&v25[4] = a7;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v16, v21);
  re::StringID::destroyString((re::StringID *)v25);
  re::StringID::destroyString((re::StringID *)v24);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)v21);
  *a6 = *(void *)(*((void *)a1 + 63) + 16) - 1;
  re::StringID::destroyString((re::StringID *)&v17);
  re::StringID::destroyString((re::StringID *)&v18);
  re::StringID::destroyString((re::StringID *)&v19);
  re::StringID::destroyString((re::StringID *)&v20);
}

uint64_t RETimelineDefinitionBlendTreeAddConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3)
{
  uint64_t v7 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddConnection(a1, a2, a3, 0, 0, &v7);
      break;
    default:
      return v7;
  }
  return v7;
}

void TimelineDefinitionForBlendTree<float>::doAddConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5, uint64_t *a6)
{
  *(void *)&v17.var0 = 0;
  v17.uint64_t var1 = "";
  *(void *)&v16.var0 = 0;
  v16.uint64_t var1 = "";
  *(void *)&v15.var0 = 0;
  if (a4)
  {
    v15.uint64_t var1 = "";
  }
  else
  {
    v15.uint64_t var1 = "";
  }
  *(void *)&v14.var0 = 0;
  if (a5)
  {
    v14.uint64_t var1 = "";
  }
  else
  {
    v14.uint64_t var1 = "";
  }
  *a6 = re::AnimationBlendTreeBuilder<float>::addConnection((uint64_t)a1 + 112, &v17, &v16, &v15, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  re::StringID::destroyString((re::StringID *)&v15);
  re::StringID::destroyString((re::StringID *)&v16);
  re::StringID::destroyString((re::StringID *)&v17);
}

uint64_t RETimelineDefinitionBlendTreeAddBlendSpace(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v132 = 0;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v133 = 0x7FFFFFFFLL;
  if (a5)
  {
    for (uint64_t i = 0; i != a5; ++i)
    {
      uint64_t v8 = *(const char **)(a4 + 8 * i);
      *(void *)&v135.var0 = 0;
      v135.uint64_t var1 = "";
      unint64_t v10 = *(void *)&v135.var0;
      unint64_t v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v10 >> 31) ^ (v10 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v10 >> 31) ^ (v10 >> 1))) >> 27));
      unint64_t v12 = v11 ^ (v11 >> 31);
      if ((void)v130)
      {
        unint64_t v13 = v12 % DWORD2(v131);
        uint64_t v14 = *(unsigned int *)(*((void *)&v130 + 1) + 4 * v13);
        if (v14 != 0x7FFFFFFF)
        {
          uint64_t v15 = v131;
          uint64_t var1 = v135.var1;
          do
          {
            if ((*(void *)(v15 + 48 * v14 + 8) ^ v10) <= 1)
            {
              StringID v17 = *(const char **)(v15 + 48 * v14 + 16);
              if (v17 == var1 || !strcmp(v17, var1)) {
                goto LABEL_13;
              }
            }
            uint64_t v14 = *(_DWORD *)(v15 + 48 * v14) & 0x7FFFFFFF;
          }
          while (v14 != 0x7FFFFFFF);
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::AssetHandle&>((uint64_t)&v130, v13, v12, &v135, (const re::AssetHandle *)&v129);
      ++HIDWORD(v133);
LABEL_13:
      re::StringID::destroyString((re::StringID *)&v135);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v129);
    }
  }
  {
    case '\'':
      int v18 = *(_DWORD *)(a6 + 24);
      if (!v18) {
        goto LABEL_135;
      }
      uint64_t v19 = (uint64_t)a1 + 112;
      uint64_t v20 = *((void *)a1 + 63);
      *(_DWORD *)(v20 + 80) = v18;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v20 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v20 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v21 = *(void *)(a6 + 88);
      if (!v21) {
        goto LABEL_136;
      }
      int v22 = *(const StringID **)(a6 + 104);
      uint64_t v23 = v21 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v19, v22, &v129, v22, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v19, v22, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v22 += 4;
        v23 -= 64;
      }
      while (v23);
      uint64_t v24 = *(void *)(a6 + 88);
      if (!v24) {
        goto LABEL_136;
      }
      StringID v25 = *(void **)(a6 + 104);
      __int16 v26 = &v25[8 * v24];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v28 = 0xBF58476D1CE4E5B9 * ((*v25 >> 31) ^ (*v25 >> 1));
          uint64_t v29 = v131;
          uint64_t v30 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v28 ^ (v28 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v30 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v29 + 48 * v30 + 8), v25))
            {
              uint64_t v30 = *(_DWORD *)(v29 + 48 * v30) & 0x7FFFFFFF;
              if (v30 == 0x7FFFFFFF) {
                goto LABEL_27;
              }
            }
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v29 = v131;
        }
LABEL_27:
        uint64_t v30 = 0x7FFFFFFFLL;
LABEL_28:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v27 + 248), (re::AssetHandle *)(v29 + 48 * v30 + 24));
        v25 += 8;
        uint64_t v31 = 1;
        if (v25 == v26) {
          goto LABEL_137;
        }
      }
    case '(':
      int v32 = *(_DWORD *)(a6 + 24);
      if (!v32) {
        goto LABEL_135;
      }
      uint64_t v33 = (uint64_t)a1 + 112;
      uint64_t v34 = *((void *)a1 + 63);
      *(_DWORD *)(v34 + 80) = v32;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v34 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v34 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v35 = *(void *)(a6 + 88);
      if (!v35) {
        goto LABEL_136;
      }
      __int16 v36 = *(const StringID **)(a6 + 104);
      uint64_t v37 = v35 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v33, v36, &v129, v36, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v33, v36, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v36 += 4;
        v37 -= 64;
      }
      while (v37);
      uint64_t v38 = *(void *)(a6 + 88);
      if (!v38) {
        goto LABEL_136;
      }
      long long v39 = *(void **)(a6 + 104);
      uint64_t v40 = &v39[8 * v38];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v42 = 0xBF58476D1CE4E5B9 * ((*v39 >> 31) ^ (*v39 >> 1));
          uint64_t v43 = v131;
          uint64_t v44 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v42 ^ (v42 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v44 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v43 + 48 * v44 + 8), v39))
            {
              uint64_t v44 = *(_DWORD *)(v43 + 48 * v44) & 0x7FFFFFFF;
              if (v44 == 0x7FFFFFFF) {
                goto LABEL_42;
              }
            }
            goto LABEL_43;
          }
        }
        else
        {
          uint64_t v43 = v131;
        }
LABEL_42:
        uint64_t v44 = 0x7FFFFFFFLL;
LABEL_43:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v41 + 248), (re::AssetHandle *)(v43 + 48 * v44 + 24));
        v39 += 8;
        uint64_t v31 = 1;
        if (v39 == v40) {
          goto LABEL_137;
        }
      }
    case ')':
      int v45 = *(_DWORD *)(a6 + 24);
      if (!v45) {
        goto LABEL_135;
      }
      uint64_t v46 = (uint64_t)a1 + 112;
      uint64_t v47 = *((void *)a1 + 63);
      *(_DWORD *)(v47 + 80) = v45;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v47 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v47 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v48 = *(void *)(a6 + 88);
      if (!v48) {
        goto LABEL_136;
      }
      float v49 = *(const StringID **)(a6 + 104);
      uint64_t v50 = v48 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v46, v49, &v129, v49, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v46, v49, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v49 += 4;
        v50 -= 64;
      }
      while (v50);
      uint64_t v51 = *(void *)(a6 + 88);
      if (!v51) {
        goto LABEL_136;
      }
      float v52 = *(void **)(a6 + 104);
      float v53 = &v52[8 * v51];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v55 = 0xBF58476D1CE4E5B9 * ((*v52 >> 31) ^ (*v52 >> 1));
          uint64_t v56 = v131;
          uint64_t v57 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v55 ^ (v55 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v57 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v56 + 48 * v57 + 8), v52))
            {
              uint64_t v57 = *(_DWORD *)(v56 + 48 * v57) & 0x7FFFFFFF;
              if (v57 == 0x7FFFFFFF) {
                goto LABEL_57;
              }
            }
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v56 = v131;
        }
LABEL_57:
        uint64_t v57 = 0x7FFFFFFFLL;
LABEL_58:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v54 + 248), (re::AssetHandle *)(v56 + 48 * v57 + 24));
        v52 += 8;
        uint64_t v31 = 1;
        if (v52 == v53) {
          goto LABEL_137;
        }
      }
    case '*':
      int v58 = *(_DWORD *)(a6 + 24);
      if (!v58) {
        goto LABEL_135;
      }
      uint64_t v59 = (uint64_t)a1 + 112;
      uint64_t v60 = *((void *)a1 + 63);
      *(_DWORD *)(v60 + 80) = v58;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v60 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v60 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v61 = *(void *)(a6 + 88);
      if (!v61) {
        goto LABEL_136;
      }
      uint64_t v62 = *(const StringID **)(a6 + 104);
      uint64_t v63 = v61 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v59, v62, &v129, v62, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v59, v62, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v62 += 4;
        v63 -= 64;
      }
      while (v63);
      uint64_t v64 = *(void *)(a6 + 88);
      if (!v64) {
        goto LABEL_136;
      }
      float v65 = *(void **)(a6 + 104);
      uint64_t v66 = &v65[8 * v64];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v68 = 0xBF58476D1CE4E5B9 * ((*v65 >> 31) ^ (*v65 >> 1));
          uint64_t v69 = v131;
          uint64_t v70 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v68 ^ (v68 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v70 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v69 + 48 * v70 + 8), v65))
            {
              uint64_t v70 = *(_DWORD *)(v69 + 48 * v70) & 0x7FFFFFFF;
              if (v70 == 0x7FFFFFFF) {
                goto LABEL_72;
              }
            }
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v69 = v131;
        }
LABEL_72:
        uint64_t v70 = 0x7FFFFFFFLL;
LABEL_73:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v67 + 248), (re::AssetHandle *)(v69 + 48 * v70 + 24));
        v65 += 8;
        uint64_t v31 = 1;
        if (v65 == v66) {
          goto LABEL_137;
        }
      }
    case '+':
      int v71 = *(_DWORD *)(a6 + 24);
      if (!v71) {
        goto LABEL_135;
      }
      uint64_t v72 = (uint64_t)a1 + 112;
      uint64_t v73 = *((void *)a1 + 63);
      *(_DWORD *)(v73 + 80) = v71;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v73 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v73 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v74 = *(void *)(a6 + 88);
      if (!v74) {
        goto LABEL_136;
      }
      float v75 = *(const StringID **)(a6 + 104);
      uint64_t v76 = v74 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v72, v75, &v129, v75, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v72, v75, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v75 += 4;
        v76 -= 64;
      }
      while (v76);
      uint64_t v77 = *(void *)(a6 + 88);
      if (!v77) {
        goto LABEL_136;
      }
      uint64_t v78 = *(void **)(a6 + 104);
      float v79 = &v78[8 * v77];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v81 = 0xBF58476D1CE4E5B9 * ((*v78 >> 31) ^ (*v78 >> 1));
          uint64_t v82 = v131;
          uint64_t v83 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v81 ^ (v81 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v81 ^ (v81 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v83 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v82 + 48 * v83 + 8), v78))
            {
              uint64_t v83 = *(_DWORD *)(v82 + 48 * v83) & 0x7FFFFFFF;
              if (v83 == 0x7FFFFFFF) {
                goto LABEL_87;
              }
            }
            goto LABEL_88;
          }
        }
        else
        {
          uint64_t v82 = v131;
        }
LABEL_87:
        uint64_t v83 = 0x7FFFFFFFLL;
LABEL_88:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v80 + 248), (re::AssetHandle *)(v82 + 48 * v83 + 24));
        v78 += 8;
        uint64_t v31 = 1;
        if (v78 == v79) {
          goto LABEL_137;
        }
      }
    case ',':
      int v84 = *(_DWORD *)(a6 + 24);
      if (!v84) {
        goto LABEL_135;
      }
      uint64_t v85 = (uint64_t)a1 + 112;
      uint64_t v86 = *((void *)a1 + 63);
      *(_DWORD *)(v86 + 80) = v84;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v86 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v86 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v87 = *(void *)(a6 + 88);
      if (!v87) {
        goto LABEL_136;
      }
      float v88 = *(const StringID **)(a6 + 104);
      uint64_t v89 = v87 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v85, v88, &v129, v88, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v85, v88, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v88 += 4;
        v89 -= 64;
      }
      while (v89);
      uint64_t v90 = *(void *)(a6 + 88);
      if (!v90) {
        goto LABEL_136;
      }
      float v91 = *(void **)(a6 + 104);
      float v92 = &v91[8 * v90];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v94 = 0xBF58476D1CE4E5B9 * ((*v91 >> 31) ^ (*v91 >> 1));
          uint64_t v95 = v131;
          uint64_t v96 = *(unsigned int *)(*((void *)&v130 + 1)
                                + 4
                                * (((0x94D049BB133111EBLL * (v94 ^ (v94 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                   * (v94 ^ (v94 >> 27))) >> 31))
                                 % DWORD2(v131)));
          if (v96 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v95 + 48 * v96 + 8), v91))
            {
              uint64_t v96 = *(_DWORD *)(v95 + 48 * v96) & 0x7FFFFFFF;
              if (v96 == 0x7FFFFFFF) {
                goto LABEL_102;
              }
            }
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v95 = v131;
        }
LABEL_102:
        uint64_t v96 = 0x7FFFFFFFLL;
LABEL_103:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v93 + 248), (re::AssetHandle *)(v95 + 48 * v96 + 24));
        v91 += 8;
        uint64_t v31 = 1;
        if (v91 == v92) {
          goto LABEL_137;
        }
      }
    case '-':
      int v97 = *(_DWORD *)(a6 + 24);
      if (!v97) {
        goto LABEL_135;
      }
      uint64_t v98 = (uint64_t)a1 + 112;
      uint64_t v99 = *((void *)a1 + 63);
      *(_DWORD *)(v99 + 80) = v97;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v99 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v99 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v100 = *(void *)(a6 + 88);
      if (!v100) {
        goto LABEL_136;
      }
      uint64_t v101 = *(const StringID **)(a6 + 104);
      uint64_t v102 = v100 << 6;
      do
      {
        *(void *)&v129.var0 = 0;
        v129.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addClip(v98, v101, &v129, v101, 0.0);
        re::StringID::destroyString((re::StringID *)&v129);
        *(void *)&v129.var0 = 7012804;
        v129.uint64_t var1 = "root";
        *(void *)&v135.var0 = 0;
        v135.uint64_t var1 = "";
        *(void *)&v134.var0 = 0;
        v134.uint64_t var1 = "";
        re::AnimationBlendTreeBuilder<float>::addConnection(v98, v101, &v129, &v135, &v134);
        re::StringID::destroyString((re::StringID *)&v134);
        re::StringID::destroyString((re::StringID *)&v135);
        re::StringID::destroyString((re::StringID *)&v129);
        v101 += 4;
        v102 -= 64;
      }
      while (v102);
      uint64_t v103 = *(void *)(a6 + 88);
      if (!v103) {
        goto LABEL_136;
      }
      uint64_t v104 = *(void **)(a6 + 104);
      unint64_t v105 = &v104[8 * v103];
      while (1)
      {
        if ((void)v130)
        {
          unint64_t v107 = 0xBF58476D1CE4E5B9 * ((*v104 >> 31) ^ (*v104 >> 1));
          uint64_t v108 = v131;
          uint64_t v109 = *(unsigned int *)(*((void *)&v130 + 1)
                                 + 4
                                 * (((0x94D049BB133111EBLL * (v107 ^ (v107 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v107 ^ (v107 >> 27))) >> 31))
                                  % DWORD2(v131)));
          if (v109 != 0x7FFFFFFF)
          {
            while (!re::StringID::operator==((void *)(v108 + 48 * v109 + 8), v104))
            {
              uint64_t v109 = *(_DWORD *)(v108 + 48 * v109) & 0x7FFFFFFF;
              if (v109 == 0x7FFFFFFF) {
                goto LABEL_117;
              }
            }
            goto LABEL_118;
          }
        }
        else
        {
          uint64_t v108 = v131;
        }
LABEL_117:
        uint64_t v109 = 0x7FFFFFFFLL;
LABEL_118:
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v106 + 248), (re::AssetHandle *)(v108 + 48 * v109 + 24));
        v104 += 8;
        uint64_t v31 = 1;
        if (v104 == v105) {
          goto LABEL_137;
        }
      }
    case '.':
      int v110 = *(_DWORD *)(a6 + 24);
      if (!v110) {
        goto LABEL_135;
      }
      uint64_t v111 = (uint64_t)a1 + 112;
      uint64_t v112 = *((void *)a1 + 63);
      *(_DWORD *)(v112 + 80) = v110;
      re::DynamicArray<re::BlendSpaceAxisDefinition>::operator=(v112 + 88, (uint64_t *)(a6 + 32));
      re::DynamicArray<re::BlendSpaceSampleDefinition>::operator=(v112 + 128, (uint64_t *)(a6 + 72));
      *(void *)&v135.var0 = 7012804;
      v135.uint64_t var1 = "root";
      *(void *)&v134.var0 = 0;
      v134.uint64_t var1 = "";
      *(void *)&v129.var0 = 128540770;
      v129.uint64_t var1 = "Blend";
      re::AnimationBlendTreeBuilder<float>::addRigNode((uint64_t)a1 + 112, &v129, &v135, &v134, 1.0);
      re::StringID::destroyString((re::StringID *)&v129);
      re::StringID::destroyString((re::StringID *)&v134);
      re::StringID::destroyString((re::StringID *)&v135);
      uint64_t v113 = *(void *)(a6 + 88);
      if (v113)
      {
        uint64_t v114 = *(const StringID **)(a6 + 104);
        uint64_t v115 = v113 << 6;
        do
        {
          *(void *)&v129.var0 = 0;
          v129.uint64_t var1 = "";
          re::AnimationBlendTreeBuilder<float>::addClip(v111, v114, &v129, v114, 0.0);
          re::StringID::destroyString((re::StringID *)&v129);
          *(void *)&v129.var0 = 7012804;
          v129.uint64_t var1 = "root";
          *(void *)&v135.var0 = 0;
          v135.uint64_t var1 = "";
          *(void *)&v134.var0 = 0;
          v134.uint64_t var1 = "";
          re::AnimationBlendTreeBuilder<float>::addConnection(v111, v114, &v129, &v135, &v134);
          re::StringID::destroyString((re::StringID *)&v134);
          re::StringID::destroyString((re::StringID *)&v135);
          re::StringID::destroyString((re::StringID *)&v129);
          v114 += 4;
          v115 -= 64;
        }
        while (v115);
        uint64_t v116 = *(void *)(a6 + 88);
        if (v116)
        {
          uint64_t v117 = *(void **)(a6 + 104);
          int v118 = &v117[8 * v116];
          while (1)
          {
            if (!(void)v130) {
              break;
            }
            unint64_t v120 = 0xBF58476D1CE4E5B9 * ((*v117 >> 31) ^ (*v117 >> 1));
            uint64_t v121 = v131;
            uint64_t v122 = *(unsigned int *)(*((void *)&v130 + 1)
                                   + 4
                                   * (((0x94D049BB133111EBLL * (v120 ^ (v120 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                        * (v120 ^ (v120 >> 27))) >> 31))
                                    % DWORD2(v131)));
            if (v122 == 0x7FFFFFFF) {
              goto LABEL_132;
            }
            while (!re::StringID::operator==((void *)(v121 + 48 * v122 + 8), v117))
            {
              uint64_t v122 = *(_DWORD *)(v121 + 48 * v122) & 0x7FFFFFFF;
              if (v122 == 0x7FFFFFFF) {
                goto LABEL_132;
              }
            }
LABEL_133:
            re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v119 + 248), (re::AssetHandle *)(v121 + 48 * v122 + 24));
            v117 += 8;
            uint64_t v31 = 1;
            if (v117 == v118) {
              goto LABEL_137;
            }
          }
          uint64_t v121 = v131;
LABEL_132:
          uint64_t v122 = 0x7FFFFFFFLL;
          goto LABEL_133;
        }
      }
LABEL_136:
      uint64_t v31 = 1;
LABEL_137:
      re::HashTable<re::StringID,re::AssetHandle,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v130);
      return v31;
    default:
LABEL_135:
      uint64_t v31 = 0;
      goto LABEL_137;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddRigConnection(_anonymous_namespace_ *a1, const char *a2, const char *a3, const char *a4, const char *a5)
{
  uint64_t v11 = -1;
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      TimelineDefinitionForBlendTree<float>::doAddConnection(a1, a2, a4, a3, a5, &v11);
      break;
    default:
      return v11;
  }
  return v11;
}

uint64_t RETimelineDefinitionCreateBlendTreeNodeSourceRef(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4) {
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      goto LABEL_59;
    case '(':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case ')':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case '*':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case '+':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case ',':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case '-':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_26;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v7 = (id)CoreRELog::log;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    case '.':
      if (*(void *)(v3 + 96) <= a2)
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v7 = (id)CoreRELog::log;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
LABEL_59:
          uint64_t v8 = *(void *)(v3 + 96);
          *(_DWORD *)StringID buf = 134218240;
          *(void *)&uint8_t buf[4] = a2;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v8;
          _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", buf, 0x16u);
        }
LABEL_60:

LABEL_61:
        uint64_t v6 = 0;
      }
      else
      {
LABEL_26:
        getBlendTreeClip<float>((re::AssetHandle *)buf, (void *)v3, a2);
        uint64_t v6 = *(void *)&buf[8];
        uint64_t v10 = *(void *)buf;
        uint64_t v11 = *(void *)&buf[8];
        memset(buf, 0, sizeof(buf));
        uint64_t v12 = *(void *)&buf[16];
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        if (v6)
        {
          uint64_t v6 = *(void *)buf;
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
      return v6;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)StringID buf = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", buf, 2u);
      }

      goto LABEL_61;
  }
}

unint64_t getBlendTreeClip<float>(re::AssetHandle *a1, void *a2, unint64_t a3)
{
  unint64_t result = re::AnimationBlendTreeDefinition::findClipIndex((re::AnimationBlendTreeDefinition *)(a2 + 10), a3);
  if (result >= a2[33])
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
  }
  else
  {
    uint64_t v6 = (const re::AssetHandle *)(a2[35] + 24 * result);
    return (unint64_t)re::AssetHandle::AssetHandle(a1, v6);
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeNodeCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v1 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      uint64_t result = *(void *)(v1 + 96);
      break;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v3 = (id)CoreRELog::log;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", v4, 2u);
      }

      uint64_t result = -1;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeReplaceClip(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v41 = *MEMORY[0x263EF8340];
  BOOL result = RETimelineDefinitionBlendTreeNodeIsClipSource((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v8 = v7;
    switch(*((_DWORD *)v7 + 2))
    {
      case '\'':
        unint64_t ClipIndex = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v7 + 80), v4);
        if (ClipIndex >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = ClipIndex;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        unint64_t v10 = *((void *)v8 + 33);
        if (v10 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_6;
      case '(':
        unint64_t v12 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v7 + 80), v4);
        if (v12 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v12;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        unint64_t v13 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v13 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v13;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        unint64_t v14 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v14 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v14;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        unint64_t v15 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v15 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v15;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        unint64_t v16 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v16 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v16;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        unint64_t v17 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v17 >= *((void *)v8 + 33)) {
          goto LABEL_32;
        }
        unint64_t v4 = v17;
        re::AssetAPIHelper::assetHandleCreate(a3, &v24);
        a3 = *((void *)v8 + 33);
        if (a3 > v4) {
          goto LABEL_31;
        }
        uint64_t v27 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        *(_OWORD *)StringID buf = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v28 = 136315906;
        uint64_t v29 = "operator[]";
        __int16 v30 = 1024;
        int v31 = 789;
        __int16 v32 = 2048;
        unint64_t v33 = v4;
        __int16 v34 = 2048;
        unint64_t v35 = a3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        unint64_t v18 = re::AnimationBlendTreeDefinition::findClipIndex((_anonymous_namespace_ *)((char *)v8 + 80), v4);
        if (v18 >= *((void *)v8 + 33))
        {
LABEL_32:
          BOOL result = 0;
        }
        else
        {
          unint64_t v4 = v18;
          re::AssetAPIHelper::assetHandleCreate(a3, &v24);
          unint64_t v19 = *((void *)v8 + 33);
          if (v19 <= v4)
          {
            uint64_t v27 = 0;
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            *(_OWORD *)StringID buf = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v28 = 136315906;
            uint64_t v29 = "operator[]";
            __int16 v30 = 1024;
            int v31 = 789;
            __int16 v32 = 2048;
            unint64_t v33 = v4;
            __int16 v34 = 2048;
            unint64_t v35 = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_31:
          uint64_t v20 = (uint64_t *)(*((void *)v8 + 35) + 24 * v4);
          uint64_t v21 = v20[1];
          v20[1] = v25;
          uint64_t v25 = v21;
          uint64_t v22 = *v20;
          *uint64_t v20 = 0;
          *uint64_t v20 = v24;
          uint64_t v24 = v22;
          uint64_t v23 = v20[2];
          void v20[2] = v26;
          uint64_t v26 = v23;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
          BOOL result = 1;
        }
        break;
      case ')':
        goto LABEL_14;
      case '*':
        goto LABEL_17;
      case '+':
        goto LABEL_20;
      case ',':
        goto LABEL_23;
      case '-':
        goto LABEL_26;
      case '.':
        goto LABEL_29;
      default:
LABEL_6:
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v11 = (id)CoreRELog::log;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)StringID buf = 0;
          _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", buf, 2u);
        }

        goto LABEL_32;
    }
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsClipSource(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4) {
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(void *)(v3 + 96) <= a2) {
        goto LABEL_10;
      }
      unsigned __int32 v5 = (void *)(*(void *)(v3 + 112) + 88 * a2 + 16);
      BOOL result = re::StringID::operator==(v5, re::AnimationBlendTreeNodeDescription::kClip);
      break;
    default:
LABEL_10:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeNodeGetName(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case '(':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ')':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '*':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '+':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ',':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '-':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '.':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        uint64_t v7 = *(void *)(v3 + 96);
        int v8 = 134218240;
        unint64_t v9 = a2;
        __int16 v10 = 2048;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

BOOL RETimelineDefinitionBlendTreeNodeIsBlend(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4) {
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(void *)(v3 + 96) <= a2) {
        goto LABEL_10;
      }
      unsigned __int32 v5 = (re::AnimationBlendTreeNodeDescription *)(*(void *)(v3 + 112) + 88 * a2);
      BOOL result = re::AnimationBlendTreeNodeDescription::isBlend(v5);
      break;
    default:
LABEL_10:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsBlendAdditive(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4) {
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(void *)(v3 + 96) <= a2) {
        goto LABEL_10;
      }
      unsigned __int32 v5 = (void *)(*(void *)(v3 + 112) + 88 * a2 + 16);
      BOOL result = re::StringID::operator==(v5, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      break;
    default:
LABEL_10:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL RETimelineDefinitionBlendTreeNodeIsInput(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v4 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24));
    if (v4) {
      uint64_t v3 = *(void *)(v4 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      if (*(void *)(v3 + 96) <= a2) {
        goto LABEL_10;
      }
      unsigned __int32 v5 = (void *)(*(void *)(v3 + 112) + 88 * a2 + 16);
      BOOL result = re::StringID::operator==(v5, re::AnimationBlendTreeNodeDescription::kInput);
      break;
    default:
LABEL_10:
      BOOL result = 0;
      break;
  }
  return result;
}

float RETimelineDefinitionBlendTreeNodeGetWeight(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case '(':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ')':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '*':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '+':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ',':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '-':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '.':
      if (*(void *)(v3 + 96) > a2) {
        return *(float *)(*(void *)(v3 + 112) + 88 * a2 + 80);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        uint64_t v7 = *(void *)(v3 + 96);
        int v8 = 134218240;
        unint64_t v9 = a2;
        __int16 v10 = 2048;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return NAN;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return NAN;
  }
}

uint64_t RETimelineDefinitionBlendTreeNodeGetWeightPath(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case '(':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ')':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '*':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '+':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ',':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '-':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '.':
      if (*(void *)(v3 + 96) > a2) {
        return *(void *)(*(void *)(v3 + 112) + 88 * a2 + 72);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        uint64_t v7 = *(void *)(v3 + 96);
        int v8 = 134218240;
        unint64_t v9 = a2;
        __int16 v10 = 2048;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

BOOL RETimelineDefinitionBlendTreeNodeIsAdditive(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    unint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_48;
    case '(':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_49;
    case ')':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_49;
    case '*':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_49;
    case '+':
      unint64_t v6 = *(void *)(v3 + 96);
      if (v6 > a2) {
        goto LABEL_42;
      }
      memset(buf, 0, sizeof(buf));
      unint64_t v3 = v6;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      if (*(void *)(v3 + 96) > a2)
      {
LABEL_42:
        uint64_t v7 = (void *)(*(void *)(v3 + 112) + 88 * a2 + 16);
        return re::StringID::operator==(v7, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v4 = (id)CoreRELog::log;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
LABEL_48:
          uint64_t v9 = *(void *)(v3 + 96);
          LODWORD(buf[0]) = 134218240;
          *(void *)((char *)buf + 4) = a2;
          WORD6(buf[0]) = 2048;
          *(void *)((char *)buf + 14) = v9;
          _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid node index (%zu), node count: %zu", (uint8_t *)buf, 0x16u);
        }
LABEL_49:

        return 0;
      }
    case ',':
      goto LABEL_31;
    case '-':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_49;
    case '.':
      if (*(void *)(v3 + 96) > a2) {
        goto LABEL_42;
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      goto LABEL_49;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)buf, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeConnectionCount(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v1 + 8))
  {
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
      uint64_t result = *(void *)(v1 + 136);
      break;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unint64_t v3 = (id)CoreRELog::log;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", v4, 2u);
      }

      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetSource(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case '(':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ')':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '*':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '+':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ',':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '-':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '.':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 8);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        uint64_t v7 = *(void *)(v3 + 136);
        int v8 = 134218240;
        unint64_t v9 = a2;
        __int16 v10 = 2048;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid connection index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeConnectionGetTarget(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    uint64_t v3 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  switch(*(_DWORD *)(v3 + 8))
  {
    case '\'':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case '(':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ')':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '*':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '+':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case ',':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '-':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      goto LABEL_50;
    case '.':
      if (*(void *)(v3 + 136) > a2) {
        return *(void *)(*(void *)(v3 + 152) + 160 * a2 + 88);
      }
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      uint64_t v4 = (id)CoreRELog::log;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        uint64_t v7 = *(void *)(v3 + 136);
        int v8 = 134218240;
        unint64_t v9 = a2;
        __int16 v10 = 2048;
        uint64_t v11 = v7;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid connection index (%zu), node count: %zu", (uint8_t *)&v8, 0x16u);
      }
LABEL_50:

      return 0;
    default:
      if (CoreRELog::onceToken != -1) {
        dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
      }
      unsigned __int32 v5 = (id)CoreRELog::log;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Invalid blend tree definition type.", (uint8_t *)&v8, 2u);
      }

      return 0;
  }
}

uint64_t RETimelineDefinitionBlendTreeAddNodeFromSource(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[6];
  if (!v6)
  {
    uint64_t v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v7) {
      uint64_t v6 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (!v8) {
    uint64_t v8 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24)) + 8);
  }
  int v9 = *(_DWORD *)(v6 + 8);
  if (v9 != *(_DWORD *)(v8 + 8)) {
    return 0;
  }
  switch(v9)
  {
    case '\'':
      __int16 v10 = *(void **)(a2 + 48);
      if (!v10)
      {
        uint64_t v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v11) {
          __int16 v10 = *(void **)(v11 + 8);
        }
        else {
          __int16 v10 = 0;
        }
      }
      unint64_t v27 = v10[12];
      if (v27 <= a3)
      {
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_133:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_134:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_135:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_136:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        uint64_t v57 = 0;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v58 = 136315906;
        uint64_t v59 = "operator[]";
        __int16 v60 = 1024;
        int v61 = 797;
        __int16 v62 = 2048;
        unint64_t v63 = a3;
        __int16 v64 = 2048;
        unint64_t v65 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v28 = v10[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v30 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v32 = v28 + 88 * a3;
        float v33 = *(float *)(v32 + 80);
        __int16 v34 = *(const char **)(v32 + 72);
        if (!v30) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v10, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        unint64_t v35 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<float>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v35, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case '(':
      unint64_t v13 = *(void **)(a2 + 48);
      if (!v13)
      {
        uint64_t v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v14) {
          unint64_t v13 = *(void **)(v14 + 8);
        }
        else {
          unint64_t v13 = 0;
        }
      }
      unint64_t v27 = v13[12];
      if (v27 <= a3) {
        goto LABEL_132;
      }
      uint64_t v28 = v13[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v36 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v37 = v28 + 88 * a3;
        float v33 = *(float *)(v37 + 80);
        __int16 v34 = *(const char **)(v37 + 72);
        if (!v36) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v13, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        long long v38 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<double>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v38, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case ')':
      unint64_t v15 = *(void **)(a2 + 48);
      if (!v15)
      {
        uint64_t v16 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v16) {
          unint64_t v15 = *(void **)(v16 + 8);
        }
        else {
          unint64_t v15 = 0;
        }
      }
      unint64_t v27 = v15[12];
      if (v27 <= a3) {
        goto LABEL_133;
      }
      uint64_t v28 = v15[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v39 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v40 = v28 + 88 * a3;
        float v33 = *(float *)(v40 + 80);
        __int16 v34 = *(const char **)(v40 + 72);
        if (!v39) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v15, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        uint64_t v41 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector2<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v41, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case '*':
      unint64_t v17 = *(void **)(a2 + 48);
      if (!v17)
      {
        uint64_t v18 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v18) {
          unint64_t v17 = *(void **)(v18 + 8);
        }
        else {
          unint64_t v17 = 0;
        }
      }
      unint64_t v27 = v17[12];
      if (v27 <= a3) {
        goto LABEL_134;
      }
      uint64_t v28 = v17[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v42 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v43 = v28 + 88 * a3;
        float v33 = *(float *)(v43 + 80);
        __int16 v34 = *(const char **)(v43 + 72);
        if (!v42) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v17, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        uint64_t v44 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector3<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v44, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case '+':
      unint64_t v19 = *(void **)(a2 + 48);
      if (!v19)
      {
        uint64_t v20 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v20) {
          unint64_t v19 = *(void **)(v20 + 8);
        }
        else {
          unint64_t v19 = 0;
        }
      }
      unint64_t v27 = v19[12];
      if (v27 <= a3) {
        goto LABEL_135;
      }
      uint64_t v28 = v19[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v45 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v46 = v28 + 88 * a3;
        float v33 = *(float *)(v46 + 80);
        __int16 v34 = *(const char **)(v46 + 72);
        if (!v45) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v19, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        uint64_t v47 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Vector4<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v47, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case ',':
      uint64_t v21 = *(void **)(a2 + 48);
      if (!v21)
      {
        uint64_t v22 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v22) {
          uint64_t v21 = *(void **)(v22 + 8);
        }
        else {
          uint64_t v21 = 0;
        }
      }
      unint64_t v27 = v21[12];
      if (v27 <= a3) {
        goto LABEL_136;
      }
      uint64_t v28 = v21[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v48 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v49 = v28 + 88 * a3;
        float v33 = *(float *)(v49 + 80);
        __int16 v34 = *(const char **)(v49 + 72);
        if (!v48) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v21, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        uint64_t v50 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::Quaternion<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v50, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case '-':
      uint64_t v23 = *(void **)(a2 + 48);
      if (!v23)
      {
        uint64_t v24 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v24) {
          uint64_t v23 = *(void **)(v24 + 8);
        }
        else {
          uint64_t v23 = 0;
        }
      }
      unint64_t v27 = v23[12];
      if (v27 <= a3) {
        goto LABEL_137;
      }
      uint64_t v28 = v23[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v51 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v52 = v28 + 88 * a3;
        float v33 = *(float *)(v52 + 80);
        __int16 v34 = *(const char **)(v52 + 72);
        if (!v51) {
          goto LABEL_122;
        }
        goto LABEL_115;
      }
      if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v23, a3);
        if (!*((void *)&v66 + 1)) {
          goto LABEL_120;
        }
        float v53 = (const char *)*((void *)v29 + 1);
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
        TimelineDefinitionForBlendTree<re::GenericSRT<float>>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v53, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
        goto LABEL_119;
      }
      if (!re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput)) {
        goto LABEL_125;
      }
      goto LABEL_124;
    case '.':
      uint64_t v25 = *(void **)(a2 + 48);
      if (!v25)
      {
        uint64_t v26 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
        if (v26) {
          uint64_t v25 = *(void **)(v26 + 8);
        }
        else {
          uint64_t v25 = 0;
        }
      }
      unint64_t v27 = v25[12];
      if (v27 <= a3) {
        goto LABEL_138;
      }
      uint64_t v28 = v25[14];
      uint64_t v29 = (re::AnimationBlendTreeNodeDescription *)(v28 + 88 * a3);
      uint64_t v57 = -1;
      if (re::AnimationBlendTreeNodeDescription::isBlend(v29))
      {
        BOOL v54 = re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kBlendAdditive);
        int v31 = (const char *)*((void *)v29 + 1);
        uint64_t v55 = v28 + 88 * a3;
        float v33 = *(float *)(v55 + 80);
        __int16 v34 = *(const char **)(v55 + 72);
        if (v54) {
LABEL_115:
        }
          TimelineDefinitionForBlendTree<float>::doAddAdditiveBlendNode((_anonymous_namespace_ *)a1, v31, v34, &v57, v33);
        else {
LABEL_122:
        }
          TimelineDefinitionForBlendTree<float>::doAddBlendNode((_anonymous_namespace_ *)a1, v31, v34, &v57, v33);
      }
      else if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kClip))
      {
        getBlendTreeClip<float>((re::AssetHandle *)&v66, v25, a3);
        if (*((void *)&v66 + 1))
        {
          uint64_t v56 = (const char *)*((void *)v29 + 1);
          re::AssetHandle::AssetHandle((re::AssetHandle *)&v58, (const re::AssetHandle *)&v66);
          TimelineDefinitionForBlendTree<re::SkeletalPose>::doAddTimeline((_anonymous_namespace_::TimelineDefinition *)a1, v56, (re::TimelineAsset *)&v58, *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
LABEL_119:
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v58);
        }
LABEL_120:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v66);
      }
      else if (re::StringID::operator==((void *)v29 + 2, re::AnimationBlendTreeNodeDescription::kInput))
      {
LABEL_124:
        TimelineDefinitionForBlendTree<float>::doAddInput((_anonymous_namespace_ *)a1, *((const char **)v29 + 1), *(const char **)(v28 + 88 * a3 + 40), *(const char **)(v28 + 88 * a3 + 56), *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
      }
      else
      {
LABEL_125:
        TimelineDefinitionForBlendTree<float>::doAddRigNode((_anonymous_namespace_ *)a1, *(const char **)(v28 + 88 * a3 + 24), *((const char **)v29 + 1), *(const char **)(v28 + 88 * a3 + 72), &v57, *(float *)(v28 + 88 * a3 + 80));
      }
      uint64_t result = v57;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t RETimelineDefinitionBlendTreeAddConnectionFromSource(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[6];
  if (!v6)
  {
    uint64_t v7 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    if (v7) {
      uint64_t v6 = *(void *)(v7 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (!v8) {
    uint64_t v8 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24)) + 8);
  }
  int v9 = *(_DWORD *)(v6 + 8);
  if (v9 == *(_DWORD *)(v8 + 8))
  {
    switch(v9)
    {
      case '\'':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v11 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v11) {
            uint64_t v10 = *(void *)(v11 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_59:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_63:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_65;
      case '(':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v13 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v13) {
            uint64_t v10 = *(void *)(v13 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_59;
      case ')':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v14 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v14) {
            uint64_t v10 = *(void *)(v14 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_60;
      case '*':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v15 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v15) {
            uint64_t v10 = *(void *)(v15 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_61;
      case '+':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v16 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v16) {
            uint64_t v10 = *(void *)(v16 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_62;
      case ',':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v17 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v17) {
            uint64_t v10 = *(void *)(v17 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_63;
      case '-':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v18 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v18) {
            uint64_t v10 = *(void *)(v18 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) > a3) {
          goto LABEL_57;
        }
        goto LABEL_64;
      case '.':
        uint64_t v10 = *(void *)(a2 + 48);
        if (!v10)
        {
          uint64_t v19 = re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a2 + 24));
          if (v19) {
            uint64_t v10 = *(void *)(v19 + 8);
          }
          else {
            uint64_t v10 = 0;
          }
        }
        if (*(void *)(v10 + 136) <= a3)
        {
LABEL_65:
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_57:
        uint64_t v20 = (const char **)(*(void *)(v10 + 152) + 160 * a3);
        *(void *)&long long v21 = -1;
        TimelineDefinitionForBlendTree<float>::doAddConnection((_anonymous_namespace_ *)a1, v20[1], v20[11], v20[9], v20[19], (uint64_t *)&v21);
        return v21;
      default:
        return 0;
    }
  }
  return 0;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateTypedEventTimeline(re *a1, const char *a2, char a3)
{
  v15[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = re::globalAllocators(a1);
  uint64_t v7 = (re::EventTimelineAssetData *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 640, 8);
  re::EventTimelineAssetData::EventTimelineAssetData(v7);
  v13[0] = &unk_26E732378;
  uint64_t v13[3] = v13;
  uint64_t v14 = v8;
  uint64_t v15[3] = v15;
  v15[0] = &unk_26E732378;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v14);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v13);
  int v9 = v12;
  uint64_t v14 = 0;
  v15[0] = "";
  re::StringID::operator=((unint64_t *)v10 + 10, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  *((unsigned char *)v10 + 552) = a3;
  return v9;
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateEventTimeline(re *a1)
{
  return RETimelineDefinitionCreateTypedEventTimeline(a1, (const char *)a1, -1);
}

uint64_t RETimelineDefinitionEventTimelineGetAnimatableType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 48)
  {
    return *(char *)(v1 + 552);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned __int32 v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }

    return -1;
  }
}

uint64_t RETimelineDefinitionEventTimelineGetEventTypeName(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 48) {
    return *(void *)(v1 + 88);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

BOOL RETimelineDefinitionEventTimelineGetReversible(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  if (*(_DWORD *)(v1 + 8) == 48) {
    return *(unsigned char *)(v1 + 592) != 0;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

void RETimelineDefinitionEventTimelineSetReversible(_anonymous_namespace_::TimelineDefinition *a1, char a2)
{
  if (*((_DWORD *)v3 + 2) == 48)
  {
    *((unsigned char *)v3 + 592) = a2;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v4 = (id)CoreRELog::log;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned __int32 v5 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetAnimatableType - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }
  }
}

BOOL RETimelineDefinitionEventTimelineSetConstantData(_anonymous_namespace_::TimelineDefinition *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)v5 + 2);
  if (v6 == 48)
  {
    uint64_t v7 = v5;
    v11[0] = a2;
    v11[1] = a3;
    re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)buf, (uint64_t)v11);
    re::FixedArray<unsigned char>::operator=((uint64_t *)v7 + 70, (uint64_t *)buf);
    uint64_t v8 = (void *)*((void *)v7 + 73);
    *((void *)v7 + 73) = 0;

    if (*(void *)buf && v13) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v9 = (id)CoreRELog::log;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }
  }
  return v6 == 48;
}

BOOL RETimelineDefinitionEventTimelineSetAndRetainSwiftConstantData(_anonymous_namespace_::TimelineDefinition *a1, void *a2)
{
  int v4 = *((_DWORD *)v3 + 2);
  if (v4 == 48)
  {
    unsigned __int32 v5 = v3;
    uint64_t v8 = a2;
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v5 + 70);
    re::ObjCObject::operator=((id *)v5 + 73, (id *)&v8);
    int v6 = v8;
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }
  }

  return v4 == 48;
}

id RETimelineDefinitionEventTimelineGetSwiftConstantData(_anonymous_namespace_::TimelineDefinition *a1)
{
  if (*((_DWORD *)v1 + 2) == 48)
  {
    id v2 = *((id *)v1 + 73);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned __int32 v5 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", v5, 2u);
    }

    return 0;
  }
  return v2;
}

uint64_t RETimelineDefinitionEventTimelineGetConstantDataSize(_anonymous_namespace_::TimelineDefinition *a1)
{
  if (*((_DWORD *)v1 + 2) == 48) {
    return *((void *)v1 + 71);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetConstantData(_anonymous_namespace_::TimelineDefinition *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v1 + 2) == 48)
  {
    if (*((void *)v1 + 71)) {
      return *((void *)v1 + 72);
    }
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_9:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)StringID buf = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.", buf, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineAddEvent(_anonymous_namespace_::TimelineDefinition *a1, float a2, float a3)
{
  if (*((_DWORD *)v5 + 2) != 48)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v8 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    __int16 v12 = 0;
    uint64_t v9 = "RETimelineDefinitionEventTimelineAddEvent - Wrong timeline type. Expected an event timeline.";
    uint64_t v10 = (uint8_t *)&v12;
    goto LABEL_13;
  }
  re::TimelineEventData::addEvent((_anonymous_namespace_ *)((char *)v5 + 80), a2, a3, v6, (uint64_t)&v12);
  if ((_BYTE)v12) {
    return v13;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  long long v8 = (id)CoreRELog::log;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    __int16 v11 = 0;
    uint64_t v9 = "Cannot set event on timline. Check that time and duration does not overlap with existing event.";
    uint64_t v10 = (uint8_t *)&v11;
LABEL_13:
    _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, v9, v10, 2u);
  }
LABEL_11:

  return -1;
}

BOOL RETimelineDefinitionEventTimelineAddParameter(_anonymous_namespace_::TimelineDefinition *a1, const char *a2, int a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (void *)((char *)v5 + 80);
    *(void *)&v10.var0 = 0;
    v10.uint64_t var1 = "";
    BOOL v7 = re::TimelineEventData::addParameterDescription(v6, &v10, a3);
    re::StringID::destroyString((re::StringID *)&v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)&v10.var0 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineAddParameter - Wrong timeline type. Expected an event timeline.", (uint8_t *)&v10, 2u);
    }

    return 0;
  }
  return v7;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterData(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v9 + 2) == 48)
  {
    StringID v10 = v9;
    *(void *)StringID buf = a4;
    *(void *)&uint8_t buf[8] = a5;
    re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)v22, (uint64_t)buf);
    if (a2)
    {
      uint64_t v11 = *a2;
      if (*a2)
      {
        char v12 = a2[1];
        if (v12)
        {
          uint64_t v13 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v11 = 31 * v11 + v12;
            int v14 = *v13++;
            char v12 = v14;
          }
          while (v14);
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    v21[0] = 2 * v11;
    v21[1] = a2;
    uint64_t v17 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v10 + 216, v21);
    if (v17 && v17[1] == 5)
    {
      unint64_t v18 = *v17 + *((void *)v10 + 57) * a3;
      unint64_t v19 = *((void *)v10 + 60);
      if (v19 <= v18)
      {
        v22[3] = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v23 = 136315906;
        long long v24 = "operator[]";
        __int16 v25 = 1024;
        int v26 = 789;
        __int16 v27 = 2048;
        unint64_t v28 = v18;
        __int16 v29 = 2048;
        unint64_t v30 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::FixedArray<unsigned char>::operator=((uint64_t *)(*((void *)v10 + 62) + 24 * v18), v22);
      uint64_t v16 = 1;
    }
    else
    {
      uint64_t v16 = 0;
    }
    re::StringID::destroyString((re::StringID *)v21);
    if (v22[0] && v22[1]) {
      (*(void (**)(void))(*(void *)v22[0] + 40))();
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v16;
}

uint64_t RETimelineDefinitionEventTimelineSetAndRetainSwiftParameter(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    long long v8 = v7;
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    v21[0] = 2 * v9;
    v21[1] = a2;
    id v15 = a4;
    id v20 = v15;
    uint64_t v16 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v8 + 216, v21);
    if (v16 && v16[1] == 6)
    {
      unint64_t v17 = *v16 + *((void *)v8 + 63) * a3;
      unint64_t v18 = *((void *)v8 + 66);
      if (v18 <= v17)
      {
        void v21[2] = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        int v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 789;
        __int16 v26 = 2048;
        unint64_t v27 = v17;
        __int16 v28 = 2048;
        unint64_t v29 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::ObjCObject::operator=((id *)(*((void *)v8 + 68) + 8 * v17), &v20);
      uint64_t v14 = 1;
      id v15 = v20;
    }
    else
    {
      uint64_t v14 = 0;
    }

    re::StringID::destroyString((re::StringID *)v21);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterInt(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    long long v8 = v7;
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    v19[0] = 2 * v9;
    v19[1] = a2;
    id v15 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v7 + 216, v19);
    if (v15 && v15[1] == 2)
    {
      unint64_t v16 = *v15 + *((void *)v8 + 39) * a3;
      unint64_t v17 = *((void *)v8 + 42);
      if (v17 <= v16)
      {
        void v19[2] = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v20 = 136315906;
        long long v21 = "operator[]";
        __int16 v22 = 1024;
        int v23 = 789;
        __int16 v24 = 2048;
        unint64_t v25 = v16;
        __int16 v26 = 2048;
        unint64_t v27 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((void *)v8 + 44) + 4 * v16) = a4;
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v19);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterInt - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterFloat(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    long long v8 = v7;
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    v20[0] = 2 * v9;
    v20[1] = a2;
    id v15 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v7 + 216, v20);
    if (v15 && v15[1] == 1)
    {
      unint64_t v16 = *v15 + *((void *)v8 + 33) * a3;
      unint64_t v17 = *((void *)v8 + 36);
      if (v17 <= v16)
      {
        void v20[2] = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)StringID buf = 0u;
        unint64_t v19 = v17;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        __int16 v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        unint64_t v26 = v16;
        __int16 v27 = 2048;
        unint64_t v28 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(*((void *)v8 + 38) + 4 * v16) = a4;
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterFloat - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterString(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, const char *a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v7 + 2) == 48)
  {
    long long v8 = v7;
    if (a2)
    {
      uint64_t v9 = *a2;
      if (*a2)
      {
        char v10 = a2[1];
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v9 = 31 * v9 + v10;
            int v12 = *v11++;
            char v10 = v12;
          }
          while (v12);
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    v20[0] = 2 * v9;
    v20[1] = a2;
    v19[0] = 0;
    v19[1] = (uint64_t)"";
    id v15 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v8 + 216, v20);
    if (v15 && v15[1] == 3)
    {
      unint64_t v16 = *v15 + *((void *)v8 + 45) * a3;
      unint64_t v17 = *((void *)v8 + 48);
      if (v17 <= v16)
      {
        void v20[2] = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)StringID buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        __int16 v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        unint64_t v26 = v16;
        __int16 v27 = 2048;
        unint64_t v28 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::StringID::operator=((unint64_t *)(*((void *)v8 + 50) + 16 * v16), v19);
      uint64_t v14 = 1;
    }
    else
    {
      uint64_t v14 = 0;
    }
    re::StringID::destroyString((re::StringID *)v19);
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v13 = (id)CoreRELog::log;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterString - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v14;
}

uint64_t RETimelineDefinitionEventTimelineSetParameterVector4(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3, __n128 a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v6 + 2) == 48)
  {
    BOOL v7 = v6;
    if (a2)
    {
      uint64_t v8 = *a2;
      if (*a2)
      {
        char v9 = a2[1];
        if (v9)
        {
          char v10 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v8 = 31 * v8 + v9;
            int v11 = *v10++;
            char v9 = v11;
          }
          while (v11);
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    v20[0] = 2 * v8;
    v20[1] = a2;
    uint64_t v14 = (void *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v6 + 216, v20);
    if (v14 && v14[1] == 4)
    {
      unint64_t v15 = *v14 + *((void *)v7 + 51) * a3;
      unint64_t v16 = *((void *)v7 + 54);
      if (v16 <= v15)
      {
        void v20[2] = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(_OWORD *)StringID buf = 0u;
        unint64_t v18 = v16;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        __int16 v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        unint64_t v26 = v15;
        __int16 v27 = 2048;
        unint64_t v28 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(__n128 *)(*((void *)v7 + 56) + 16 * v15) = a4;
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 0;
    }
    re::StringID::destroyString((re::StringID *)v20);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineSetParameterVector4 - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  return v13;
}

uint64_t RETimelineDefinitionEventTimelineGetEventCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  if (*((_DWORD *)v1 + 2) == 48) {
    return *((void *)v1 + 24) + *((void *)v1 + 14);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventCount - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0x7FFFFFFFLL;
}

float RETimelineDefinitionEventTimelineGetEventStartTime(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  if (*((_DWORD *)v3 + 2) == 48)
  {
    unint64_t v4 = *((void *)v3 + 14);
    BOOL v5 = a2 >= v4;
    unint64_t v6 = a2 - v4;
    if (!v5)
    {
      BOOL v7 = (void *)((char *)v3 + 128);
      return *(float *)(*v7 + 4 * a2);
    }
    if (v6 < *((void *)v3 + 24))
    {
      BOOL v7 = (void *)((char *)v3 + 208);
      a2 = v6;
      return *(float *)(*v7 + 4 * a2);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventStartTime. - Wrong timeline type. Expected an event timeline.", v10, 2u);
    }
  }
  return NAN;
}

float RETimelineDefinitionEventTimelineGetEventDuration(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  if (*((_DWORD *)v3 + 2) == 48)
  {
    unint64_t v4 = *((void *)v3 + 19);
    BOOL v5 = a2 >= v4;
    unint64_t v6 = a2 - v4;
    if (v5)
    {
      float result = NAN;
      if (v6 < *((void *)v3 + 24)) {
        return 0.0;
      }
    }
    else
    {
      return *(float *)(*((void *)v3 + 21) + 4 * a2);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetEventDuration - Wrong timeline type. Expected an event timeline.", v9, 2u);
    }

    return NAN;
  }
  return result;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterCount(_anonymous_namespace_::TimelineDefinition *a1)
{
  if (*((_DWORD *)v1 + 2) == 48) {
    return *((unsigned int *)v1 + 61);
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v3 = (id)CoreRELog::log;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterCount - Wrong timeline type. Expected an event timeline.", v4, 2u);
  }

  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterName(_anonymous_namespace_::TimelineDefinition *a1, unint64_t a2)
{
  if (*((_DWORD *)v3 + 2) == 48)
  {
    unint64_t v4 = (_anonymous_namespace_ *)((char *)v3 + 80);
    return re::TimelineEventData::parameterName(v4, a2);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v6 = (id)CoreRELog::log;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterName - Wrong timeline type. Expected an event timeline.", v7, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionEventTimelineGetParameterType(_anonymous_namespace_::TimelineDefinition *a1, char *a2)
{
  if (*((_DWORD *)v3 + 2) == 48)
  {
    if (a2)
    {
      uint64_t v4 = *a2;
      if (*a2)
      {
        char v5 = a2[1];
        if (v5)
        {
          unint64_t v6 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v4 = 31 * v4 + v5;
            int v7 = *v6++;
            char v5 = v7;
          }
          while (v7);
        }
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    v12[0] = 2 * v4;
    v12[1] = a2;
    uint64_t v10 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3 + 216, v12);
    if (v10) {
      unsigned __int8 v9 = *(unsigned char *)(v10 + 8);
    }
    else {
      unsigned __int8 v9 = 0;
    }
    re::StringID::destroyString((re::StringID *)v12);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v8 = (id)CoreRELog::log;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12[0]) = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterType - Wrong timeline type. Expected an event timeline.", (uint8_t *)v12, 2u);
    }

    return 0;
  }
  return v9;
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterData(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)v5 + 2) != 48)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)StringID buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", buf, 2u);
    }

    return 0;
  }
  uint64_t v6 = (uint64_t)v5 + 80;
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)StringID buf = 2 * v7;
  *(void *)&uint8_t buf[8] = a2;
  uint64_t v12 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(v6, a3, buf);
  re::StringID::destroyString((re::StringID *)buf);
  if (!v12) {
    return 0;
  }
  if (!*(void *)(v12 + 8))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(v12 + 16);
}

uint64_t re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 5) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<re::FixedArray<unsigned char>>::parameter((void *)(a1 + 376), a2, v6);
}

id RETimelineDefinitionEventTimelineGetEventSwiftParameter(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) != 48)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v15[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", (uint8_t *)v15, 2u);
    }

    return 0;
  }
  uint64_t v6 = (uint64_t)v5 + 80;
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  v15[0] = 2 * v7;
  v15[1] = a2;
  uint64_t v12 = (void **)re::TimelineEventData::parameter<re::ObjCObject>(v6, a3, v15);
  re::StringID::destroyString((re::StringID *)v15);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (!*v12) {
    return 0;
  }
  return v13;
}

uint64_t re::TimelineEventData::parameter<re::ObjCObject>(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 6) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<re::ObjCObject>::parameter((void *)(a1 + 424), a2, v6);
}

uint64_t RETimelineDefinitionEventTimelineGetEventParameterDataSize(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        char v8 = a2[1];
        if (v8)
        {
          unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v7 = 31 * v7 + v8;
            int v10 = *v9++;
            char v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    uint64_t v12 = re::TimelineEventData::parameter<re::FixedArray<unsigned char>>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
    if (v12) {
      return *(void *)(v12 + 8);
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterData - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }
  }
  return 0;
}

uint64_t RETimelineDefinitionEventTimelineGetParameterInt(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        char v8 = a2[1];
        if (v8)
        {
          unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v7 = 31 * v7 + v8;
            int v10 = *v9++;
            char v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    uint64_t v12 = re::TimelineEventData::parameter<int>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterInt - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<int>(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 2) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<int>::parameter((void *)(a1 + 232), a2, v6);
}

uint64_t RETimelineDefinitionEventTimelineGetParameterFloat(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        char v8 = a2[1];
        if (v8)
        {
          unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v7 = 31 * v7 + v8;
            int v10 = *v9++;
            char v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    uint64_t v12 = re::TimelineEventData::parameter<float>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterFloat - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<float>(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 1) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<int>::parameter((void *)(a1 + 184), a2, v6);
}

const char *RETimelineDefinitionEventTimelineGetParameterString(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        char v8 = a2[1];
        if (v8)
        {
          unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v7 = 31 * v7 + v8;
            int v10 = *v9++;
            char v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    uint64_t v13 = re::TimelineEventData::parameter<re::StringID>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
    if (v13) {
      return *(const char **)(v13 + 8);
    }
    else {
      return "";
    }
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterString - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
}

uint64_t RETimelineDefinitionEventTimelineGetParameterVector4(_anonymous_namespace_::TimelineDefinition *a1, char *a2, uint64_t a3)
{
  if (*((_DWORD *)v5 + 2) == 48)
  {
    uint64_t v6 = (uint64_t)v5 + 80;
    if (a2)
    {
      uint64_t v7 = *a2;
      if (*a2)
      {
        char v8 = a2[1];
        if (v8)
        {
          unsigned __int8 v9 = (unsigned __int8 *)(a2 + 2);
          do
          {
            uint64_t v7 = 31 * v7 + v8;
            int v10 = *v9++;
            char v8 = v10;
          }
          while (v10);
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    v14[0] = 2 * v7;
    v14[1] = a2;
    uint64_t v12 = re::TimelineEventData::parameter<re::Vector4<float>>(v6, a3, v14);
    re::StringID::destroyString((re::StringID *)v14);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    int v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v14[0]) = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "RETimelineDefinitionEventTimelineGetParameterVector4 - Wrong timeline type. Expected an event timeline.", (uint8_t *)v14, 2u);
    }

    return 0;
  }
  return v12;
}

uint64_t re::TimelineEventData::parameter<re::Vector4<float>>(uint64_t a1, uint64_t a2, void *a3)
{
  char v5 = (uint64_t *)re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, a3);
  if (!v5 || v5[1] != 4) {
    return 0;
  }
  uint64_t v6 = *v5;
  return re::EventParameterArray<re::StringID>::parameter((void *)(a1 + 328), a2, v6);
}

_anonymous_namespace_::TimelineDefinition *RETimelineDefinitionCreateAudioAnimation(re *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  id v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 96, 8);
  uint64_t v4 = re::TimelineAssetData::TimelineAssetData(v3, 38);
  *(unsigned char *)(v4 + 72) = 0;
  *(void *)uint64_t v4 = &unk_26E6D0F20;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  v8[0] = &unk_26E7323F8;
  v8[3] = v8;
  uint64_t v9 = v4;
  v10[3] = v10;
  v10[0] = &unk_26E7323F8;
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](&v9);
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](v8);
  char v5 = v7;
  return v5;
}

uint64_t RETimelineDefinitionGetEasingFunction(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 24)) + 8);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  switch(v2)
  {
    case 11:
      uint64_t result = *(void *)(v1 + 112);
      break;
    case 12:
    case 13:
      uint64_t result = *(void *)(v1 + 136);
      break;
    case 14:
    case 15:
    case 16:
      uint64_t result = *(void *)(v1 + 192);
      break;
    case 17:
      uint64_t result = *(void *)(v1 + 288);
      break;
    case 18:
      goto LABEL_6;
    default:
      if (v2 == 50)
      {
LABEL_6:
        uint64_t result = *(void *)(v1 + 184);
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v4 = (id)CoreRELog::log;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)char v5 = 0;
          _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Cannot get easing function from non-from-to-by animation.", v5, 2u);
        }

        uint64_t result = 0;
      }
      break;
  }
  return result;
}

_anonymous_namespace_ *RETimelineDefinitionCreateEasingFunctionEx(void *a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[6];
  if (!v1)
  {
    a1 = (void *)re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3));
    uint64_t v1 = a1[1];
  }
  int v2 = *(_DWORD *)(v1 + 8);
  switch(v2)
  {
    case 11:
      uint64_t v3 = (_anonymous_namespace_ **)(v1 + 112);
      goto LABEL_10;
    case 12:
    case 13:
      uint64_t v3 = (_anonymous_namespace_ **)(v1 + 136);
      goto LABEL_10;
    case 14:
    case 15:
    case 16:
      uint64_t v3 = (_anonymous_namespace_ **)(v1 + 192);
      goto LABEL_10;
    case 17:
      uint64_t v3 = (_anonymous_namespace_ **)(v1 + 288);
      goto LABEL_10;
    case 18:
      goto LABEL_6;
    default:
      if (v2 == 50)
      {
LABEL_6:
        uint64_t v3 = (_anonymous_namespace_ **)(v1 + 184);
LABEL_10:
        uint64_t v4 = *v3;
        if (*v3)
        {
          v8[0] = (_anonymous_namespace_ *)&unk_26E732478;
          v8[3] = (_anonymous_namespace_ *)v8;
          *(void *)StringID buf = v5;
          v10[3] = v10;
          v10[0] = &unk_26E732478;
          std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](v8);
          re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>((re *)buf, v8);
          uint64_t v4 = v8[0];
          std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
        }
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        uint64_t v7 = (id)CoreRELog::log;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)StringID buf = 0;
          _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Cannot get easing function from non-from-to-by animation.", buf, 2u);
        }

        return 0;
      }
      return v4;
  }
}

uint64_t RETimelineDefinitionSetEasingFunction(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[6];
  if (!v4) {
    uint64_t v4 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3)) + 8);
  }
  int v5 = *(_DWORD *)(v4 + 8);
  switch(v5)
  {
    case 11:
      uint64_t v13 = re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunction", 7673, *((void (****)(void))v12 + 14));
      *((void *)v12 + 14) = 0;
      if (a2)
      {
      }
      return 1;
    case 12:
    case 13:
      int v11 = re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunction", 7673, *((void (****)(void))v10 + 17));
      *((void *)v10 + 17) = 0;
      if (a2)
      {
      }
      return 1;
    case 14:
    case 15:
    case 16:
      uint64_t v7 = re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunction", 7673, *((void (****)(void))v6 + 24));
      *((void *)v6 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      if (a2)
      {
      }
      return 1;
    case 17:
      long long v15 = re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunction", 7673, *((void (****)(void))v14 + 36));
      *((void *)v14 + 36) = 0;
      if (a2)
      {
      }
      return 1;
    case 18:
      goto LABEL_7;
    default:
      if (v5 == 50)
      {
LABEL_7:
        uint64_t v9 = re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunction", 7673, *((void (****)(void))v8 + 23));
        *((void *)v8 + 23) = 0;
        if (a2)
        {
        }
        return 1;
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        long long v17 = (id)CoreRELog::log;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long v18 = 0;
          _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Cannot set easing function for non-from-to-by animation.", v18, 2u);
        }

        return 0;
      }
  }
}

uint64_t RETimelineDefinitionSetEasingFunctionEx(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[6];
  if (!v4) {
    uint64_t v4 = *(void *)(re::AssetHandle::asset<re::TimelineAsset>((re::TimelineAsset *)(a1 + 3)) + 8);
  }
  int v5 = *(_DWORD *)(v4 + 8);
  switch(v5)
  {
    case 11:
      re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunctionEx", 7755, *((void (****)(void))v12 + 14));
      *((void *)v12 + 14) = 0;
      uint64_t v13 = *(void *)(a2 + 24);
      if (v13) {
      return 1;
      }
    case 12:
    case 13:
      re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunctionEx", 7755, *((void (****)(void))v10 + 17));
      *((void *)v10 + 17) = 0;
      uint64_t v11 = *(void *)(a2 + 24);
      if (v11) {
      return 1;
      }
    case 14:
    case 15:
    case 16:
      re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunctionEx", 7755, *((void (****)(void))v6 + 24));
      *((void *)v6 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
      uint64_t v7 = *(void *)(a2 + 24);
      if (v7) {
      return 1;
      }
    case 17:
      re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunctionEx", 7755, *((void (****)(void))v14 + 36));
      *((void *)v14 + 36) = 0;
      uint64_t v15 = *(void *)(a2 + 24);
      if (v15) {
      return 1;
      }
    case 18:
      goto LABEL_7;
    default:
      if (v5 == 50)
      {
LABEL_7:
        re::internal::destroyPersistent<re::EasingFunction>((re *)"assignEasingFunctionEx", 7755, *((void (****)(void))v8 + 23));
        *((void *)v8 + 23) = 0;
        uint64_t v9 = *(void *)(a2 + 24);
        if (v9) {
        return 1;
        }
      }
      else
      {
        if (CoreRELog::onceToken != -1) {
          dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
        }
        long long v17 = (id)CoreRELog::log;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long v18 = 0;
          _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Cannot set easing function for non-from-to-by animation.", v18, 2u);
        }

        return 0;
      }
  }
}

void std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E730D60;
  return result;
}

void std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E730D60;
}

void std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  int v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1},std::allocator<anonymous namespace'::TimelineDefinition::timelineAssetData(void)::{lambda(re::TimelineAssetData *)#1}>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t anonymous namespace'::makeAdditive<re::SkeletalPoseAssetData>(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  float v3 = *(double *)(a1 + 80);
  float v4 = *(double *)(a2 + 80);
  if (v3 != v4 && vabds_f32(v3, v4) >= (float)((float)((float)(fabsf(v3) + fabsf(v4)) + 1.0) * 0.00001))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)StringID buf = 0;
    char v8 = "Cannot make additive animation from differing from-to-by durations.";
    goto LABEL_25;
  }
  if (*(unsigned __int8 *)(a1 + 72) | *(unsigned __int8 *)(a2 + 72))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v7 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    *(_WORD *)StringID buf = 0;
    char v8 = "Cannot make additive animation from existing additive from-to-by animation.";
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v5 = *(unsigned char *)(a2 + 88) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && *(unsigned char *)(a1 + 120) && *(unsigned char *)(a2 + 120) && !*(unsigned char *)(a1 + 152) && !*(unsigned char *)(a2 + 152))
  {
    *(void *)StringID buf = a1 + 88;
    uint64_t v13 = a1 + 120;
    v11[0] = a2 + 96;
    v11[1] = a2 + 128;
    v10[0] = buf;
    v10[1] = 2;
    v9[0] = v11;
    v9[1] = 2;
    uint64_t result = re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>((re *)v10, v9, (uint64_t)buf, (void *)2);
    *(unsigned char *)(a1 + 72) = result;
    return result;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  uint64_t v7 = (id)CoreRELog::log;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)StringID buf = 0;
    char v8 = "Currently only supports from-to animations.";
LABEL_25:
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
  }
LABEL_26:

  return 0;
}

uint64_t re::AnimationHelper::makeAdditiveForOptionalValueReferences<re::SkeletalPoseAssetData>(re *a1, void *a2, uint64_t a3, void *a4)
{
  if (*((void **)a1 + 1) != a4)
  {
    long long v18 = *re::animationLogObjects(a1);
    uint64_t result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)StringID buf = 0;
    uint64_t v19 = "Cannot make additive values, output values expected to match input values size.";
    goto LABEL_35;
  }
  float v4 = a2;
  if (!a2[1])
  {
    long long v18 = *re::animationLogObjects(a1);
    uint64_t result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)StringID buf = 0;
    uint64_t v19 = "Cannot make additive values, base values array size must not be zero.";
LABEL_35:
    _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, v19, buf, 2u);
    return 0;
  }
  *(void *)StringID buf = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::AnimationValueTraits<re::SkeletalPoseAssetData>::init((uint64_t *)buf, *(void *)*a2);
  unint64_t v9 = 0;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10 && v4[1])
  {
    unint64_t v9 = 0;
    while (a4 != (void *)v9)
    {
      char v8 = *(unsigned __int8 **)(*(void *)a1 + 8 * v9);
      uint64_t v11 = *(unsigned char **)(a3 + 8 * v9);
      if ((*v8 != 0) != (*v11 != 0))
      {
        re::Optional<re::SkeletalPoseAssetData>::operator=(v11, v8);
        unint64_t v10 = *((void *)a1 + 1);
      }
      if (v10 <= v9) {
        goto LABEL_37;
      }
      unint64_t v12 = v4[1];
      if (**(unsigned char **)(*(void *)a1 + 8 * v9))
      {
        if (v12 <= v9) {
          goto LABEL_40;
        }
        re::AnimationValueTraits<re::SkeletalPoseAssetData>::invert(*(void *)(*v4 + 8 * v9), (uint64_t)buf);
        unint64_t v14 = *((void *)a1 + 1);
        if (v14 <= v9) {
          goto LABEL_41;
        }
        re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(void *)(*(void *)a1 + 8 * v9) + 8, (uint64_t)buf, *(void *)(a3 + 8 * v9) + 8);
        unint64_t v10 = *((void *)a1 + 1);
        unint64_t v12 = v4[1];
      }
      if (v10 <= ++v9 || v12 <= v9)
      {
        unint64_t v9 = v9;
        goto LABEL_17;
      }
    }
    re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a4, a4);
    _os_crash();
    __break(1u);
LABEL_37:
    re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v10);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_17:
    if (v10 <= v9)
    {
LABEL_26:
      if (*(void *)buf)
      {
        if (v21) {
          (*(void (**)(void))(**(void **)buf + 40))();
        }
      }
      return 1;
    }
    if ((unint64_t)a4 <= v9) {
      float v4 = (void *)v9;
    }
    else {
      float v4 = a4;
    }
    while (v4 != (void *)v9)
    {
      uint64_t v15 = *(unsigned __int8 **)(*(void *)a1 + 8 * v9);
      long long v16 = *(unsigned char **)(a3 + 8 * v9);
      if ((*v15 != 0) != (*v16 != 0))
      {
        re::Optional<re::SkeletalPoseAssetData>::operator=(v16, v15);
        unint64_t v10 = *((void *)a1 + 1);
      }
      if (v10 <= v9) {
        goto LABEL_39;
      }
      re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(void *)(*(void *)a1 + 8 * v9) + 8, (uint64_t)buf, *(void *)(a3 + 8 * v9) + 8);
      ++v9;
      unint64_t v10 = *((void *)a1 + 1);
      if (v10 <= v9) {
        goto LABEL_26;
      }
    }
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, a4);
  _os_crash();
  __break(1u);
LABEL_39:
  re::internal::assertLog((re::internal *)6, (uint64_t)v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v10);
  _os_crash();
  __break(1u);
LABEL_40:
  re::internal::assertLog((re::internal *)6, (uint64_t)v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v12);
  _os_crash();
  __break(1u);
LABEL_41:
  re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v14);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::AnimationHelper::makeAdditiveForValues<re::BlendShapeWeightsAssetData>(re *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (*((void **)a1 + 1) != a4)
  {
    uint64_t v11 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)StringID buf = 0;
    uint64_t v13 = "Cannot make additive values, output values expected to match input values size.";
    goto LABEL_9;
  }
  float v4 = a2;
  if (!a2[1])
  {
    uint64_t v11 = *re::animationLogObjects(a1);
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)StringID buf = 0;
    uint64_t v13 = "Cannot make additive values, base values array size must not be zero.";
LABEL_9:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v13, buf, 2u);
    return 0;
  }
  BOOL v5 = a4;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  unint64_t v8 = *(void *)(*a2 + 8);
  if (v8)
  {
    unint64_t v9 = *((void *)a1 + 1);
    BOOL v10 = v4[1] != 0;
  }
  else
  {
    BOOL v10 = 1;
    unint64_t v9 = (unint64_t)a4;
  }
  unint64_t v14 = 0;
  if (v9 && v10)
  {
    unint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *v4 + 24 * v14;
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16) {
        break;
      }
LABEL_18:
      if (v9 <= v14) {
        goto LABEL_37;
      }
      if ((void *)v14 == v5) {
        goto LABEL_38;
      }
      re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(*(void *)(*(void *)a1 + 24 * v14 + 8), *(void *)(*(void *)a1 + 24 * v14 + 16), v23, v24, *(void *)(a3 + 24 * v14 + 8), *(void *)(a3 + 24 * v14 + 16));
      ++v14;
      unint64_t v9 = *((void *)a1 + 1);
      if (v9 <= v14 || v4[1] <= v14)
      {
        unint64_t v14 = v14;
        goto LABEL_23;
      }
    }
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(v15 + 16);
    uint64_t v20 = v23;
    uint64_t v19 = v24;
    while (v20 != v17)
    {
      *(float *)(v19 + 4 * v17) = -*(float *)(v18 + 4 * v17);
      if (v16 == ++v17) {
        goto LABEL_18;
      }
    }
    uint64_t v25 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    *(_OWORD *)StringID buf = 0u;
    BOOL v5 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    __int16 v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 468;
    __int16 v30 = 2048;
    uint64_t v31 = v20;
    __int16 v32 = 2048;
    uint64_t v33 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_36:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
    _os_crash();
    __break(1u);
LABEL_37:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v9);
    _os_crash();
    __break(1u);
LABEL_38:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v5);
    _os_crash();
    __break(1u);
  }
LABEL_23:
  if (v9 > v14)
  {
    if ((unint64_t)v5 <= v14) {
      float v4 = (void *)v14;
    }
    else {
      float v4 = v5;
    }
    uint64_t v21 = 24 * v14;
    while (v4 != (void *)v14)
    {
      re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(*(void *)(*(void *)a1 + v21 + 8), *(void *)(*(void *)a1 + v21 + 16), v23, v24, *(void *)(a3 + v21 + 8), *(void *)(a3 + v21 + 16));
      ++v14;
      v21 += 24;
      if (*((void *)a1 + 1) <= v14) {
        goto LABEL_30;
      }
    }
    goto LABEL_36;
  }
LABEL_30:
  if (v22)
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
  }
  return 1;
}

float re::AnimationValueTraits<re::BlendShapeWeightsAssetData>::combine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    for (uint64_t i = 0; i != a1; ++i)
    {
      if (a3 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a5 == i) {
        goto LABEL_8;
      }
      float result = *(float *)(a2 + 4 * i) + *(float *)(a4 + 4 * i);
      *(float *)(a6 + 4 * i) = result;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::TimelineAssetData *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(re::TimelineAssetData *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v6);
  }
  float v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::TimelineAssetData *)>::__value_func[abi:nn180100]((uint64_t)v4, v5);
}

uint64_t std::__function::__value_func<void ()(re::TimelineAssetData *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v3;
      *(void *)(a2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  }
  return a1;
}

uint64_t anonymous namespace'::TimelineDefinition::TimelineDefinition(uint64_t a1, const re::AssetHandle *a2)
{
  *(void *)a1 = &unk_26E730DF0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 24), a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void anonymous namespace'::TimelineDefinition::~TimelineDefinition(_anonymous_namespace_::TimelineDefinition *this)
{
  JUMPOUT(0x237DBCBD0);
}

{
  *(void *)this = &unk_26E730DF0;
  if (*((unsigned char *)this + 88)) {
    re::StringID::destroyString((_anonymous_namespace_::TimelineDefinition *)((char *)this + 96));
  }
  std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 6);
  re::AssetHandle::~AssetHandle((_anonymous_namespace_::TimelineDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_26E730E38;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E730E38;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t re::make::shared::object<anonymous namespace'::TimelineDefinition,std::unique_ptr<re::TimelineAssetData,std::function<void ()(re::TimelineAssetData*)>>>@<X0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  float v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 112, 8);
  *a2 = result;
  return result;
}

uint64_t anonymous namespace'::TimelineDefinition::TimelineDefinition(uint64_t a1, uint64_t *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  *(void *)a1 = &unk_26E730DF0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)(a1 + 48) = v4;
  std::__function::__value_func<void ()(re::TimelineAssetData *)>::__value_func[abi:nn180100](a1 + 56, (uint64_t)(a2 + 1));
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E730EB8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E730EB8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E730F38;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E730F38;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E730FB8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E730FB8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731038;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731038;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateFromToByFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7310B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7310B8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731138;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731138;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7311B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7311B8;
}

void std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToBySkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731238;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731238;
}

void std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7312B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7312B8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloatAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloatAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731338;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731338;
}

void std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledDoubleAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledDoubleAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7313B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7313B8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat2Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat2Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731438;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731438;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat3Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat3Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7314B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7314B8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledFloat4Animation::$_0,std::allocator<RETimelineDefinitionCreateSampledFloat4Animation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731538;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731538;
}

void std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledQuaternionAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7315B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7315B8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSRTAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSRTAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731638;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731638;
}

void std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledSkeletalPoseAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7316B8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7316B8;
}

void std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0,std::allocator<RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731738;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731738;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7317B8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7317B8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_1>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731838;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731838;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_2>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7318B8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7318B8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_3>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731938;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731938;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_4>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7319B8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7319B8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_5>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731A38;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731A38;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_6>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731AB8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731AB8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_7>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731B38;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731B38;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_8>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731BB8;
  return result;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731BB8;
}

void std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9,std::allocator<createClipAssetData(REAssetManager *,RETimelineDefinition *)::$_9>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void re::make::shared::object<anonymous namespace'::TimelineDefinition,re::AssetHandle &>(re *a1, const re::AssetHandle *a2)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 112, 8);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
  *(void *)a1 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731C38;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731C38;
}

void std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateTimelineGroup::$_0,std::allocator<RETimelineDefinitionCreateTimelineGroup::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731CB8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731CB8;
}

void std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateOrbitAnimation::$_0,std::allocator<RETimelineDefinitionCreateOrbitAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731D38;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731D38;
}

void std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloatBlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloatBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<float>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E731DB8;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E731DB8;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731E00;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731E00;
}

void std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateDoubleBlendTree::$_0,std::allocator<RETimelineDefinitionCreateDoubleBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<double>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E731E80;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E731E80;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731EC8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731EC8;
}

void std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat2BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat2BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector2<float>>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E731F48;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E731F48;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E731F90;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E731F90;
}

void std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat3BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat3BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector3<float>>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E732010;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E732010;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E732058;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732058;
}

void std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateFloat4BlendTree::$_0,std::allocator<RETimelineDefinitionCreateFloat4BlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Vector4<float>>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E7320D8;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E7320D8;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E732120;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732120;
}

void std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateQuaternionBlendTree::$_0,std::allocator<RETimelineDefinitionCreateQuaternionBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::Quaternion<float>>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E7321A0;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E7321A0;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7321E8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7321E8;
}

void std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSRTBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSRTBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::GenericSRT<float>>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E732268;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E732268;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7322B0;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7322B0;
}

void std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0,std::allocator<RETimelineDefinitionCreateSkeletalPoseBlendTree::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void TimelineDefinitionForBlendTree<re::SkeletalPose>::~TimelineDefinitionForBlendTree(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26E732330;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
}

{
  re::StringID *v2;
  uint64_t vars8;

  *a1 = (uint64_t)&unk_26E732330;
  uint64_t v2 = (re::StringID *)(a1 + 26);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 71));
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 65);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 56);
  re::DynamicArray<re::RigGraphInputValue>::deinit((uint64_t)(a1 + 48));
  re::DynamicArray<re::RigGraphConnection>::deinit(a1 + 43);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)(a1 + 38));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 33));
  re::DynamicArray<re::RigGraphParameterProxy>::deinit((uint64_t)(a1 + 28));
  re::StringID::destroyString(v2);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::DynamicArray<re::AnimationBlendTreeBuilder<float>::BlendTreeBuilderNode>::deinit((uint64_t)(a1 + 15));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::AnimationBlendTreeBuilder<float>::addRigNode(uint64_t a1, const StringID *a2, StringID *a3, const StringID *a4, float a5)
{
  unint64_t v9 = *(_anonymous_namespace_ **)(a1 + 392);
  re::StringID::StringID((re::StringID *)v11, a3);
  re::StringID::StringID((re::StringID *)v12, a2);
  v13[0] = 0;
  v13[1] = "";
  v14[0] = 0;
  v14[1] = "";
  re::StringID::StringID((re::StringID *)v15, a4);
  *(float *)&v15[4] = a5;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v9, v11);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  return *(void *)(*(void *)(a1 + 392) + 16) - 1;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addClip(uint64_t a1, const StringID *a2, const StringID *a3, const StringID *a4, float a5)
{
  BOOL v10 = *(_anonymous_namespace_ **)(a1 + 392);
  re::StringID::StringID((re::StringID *)v13, a2);
  v14[0] = 4206304;
  v14[1] = "Clip";
  if (*(void *)&a4->var0 <= 1uLL)
  {
    uint64_t var1 = a4->var1;
    if (var1)
    {
      if (!*var1) {
        a4 = a2;
      }
    }
  }
  re::StringID::StringID((re::StringID *)v15, a4);
  v16[0] = 0;
  v16[1] = "";
  re::StringID::StringID((re::StringID *)v17, a3);
  *(float *)&v17[4] = a5;
  re::DynamicArray<re::AnimationBlendTreeNodeDescription>::add(v10, v13);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  return *(void *)(*(void *)(a1 + 392) + 16) - 1;
}

uint64_t re::AnimationBlendTreeBuilder<float>::addConnection(uint64_t a1, const StringID *a2, const StringID *a3, const StringID *a4, const StringID *a5)
{
  unint64_t v8 = (void *)(*(void *)(a1 + 392) + 40);
  re::StringID::StringID((re::StringID *)v11, a2);
  re::StringID::invalid((re::StringID *)v12);
  re::StringID::StringID((re::StringID *)v13, a4);
  re::StringID::invalid((re::StringID *)v14);
  re::StringID::invalid((re::StringID *)v15);
  re::StringID::StringID((re::StringID *)v16, a3);
  re::StringID::invalid((re::StringID *)v17);
  re::StringID::StringID((re::StringID *)v18, a5);
  re::StringID::invalid((re::StringID *)v19);
  re::StringID::invalid((re::StringID *)v20);
  re::DynamicArray<re::RigGraphConnection>::add(v8, v11);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)v18);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)v16);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)v12);
  re::StringID::destroyString((re::StringID *)v11);
  return *(void *)(*(void *)(a1 + 392) + 56) - 1;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E732378;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732378;
}

void std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateTypedEventTimeline::$_0,std::allocator<RETimelineDefinitionCreateTypedEventTimeline::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

uint64_t re::EventParameterArray<re::FixedArray<unsigned char>>::parameter(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 24 * v3;
}

uint64_t re::EventParameterArray<re::ObjCObject>::parameter(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 8 * v3;
}

uint64_t re::EventParameterArray<int>::parameter(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 + *a1 * a2;
  if (a1[3] <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a1[5] + 4 * v3;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E7323F8;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7323F8;
}

void std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::operator()(_anonymous_namespace_ *a1, void (****a2)(void))
{
  uint64_t v2 = *a2;
  if (v2)
  {
    (**v2)(v2);
    v3();
  }
}

uint64_t std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateAudioAnimation::$_0,std::allocator<RETimelineDefinitionCreateAudioAnimation::$_0>,void ()(re::TimelineAssetData *)>::target_type()
{
}

void std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::~__func()
{
}

void *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E732478;
  return result;
}

void std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732478;
}

re *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::EasingFunction>((re *)"operator()", 7655, *a2);
}

uint64_t std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RETimelineDefinitionCreateEasingFunctionEx::$_0,std::allocator<RETimelineDefinitionCreateEasingFunctionEx::$_0>,void ()(re::EasingFunction *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::EasingFunction *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = v3;
      *(void *)(a2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::EasingFunction *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::EasingFunction *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(re::EasingFunction *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v4);
}

_anonymous_namespace_ *re::make::shared::object<re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>,std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>@<X0>(re *a1@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t v4 = re::globalAllocators(a1);
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 64, 8);
  uint64_t result = re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(v5, (uint64_t *)a1);
  *a2 = result;
  return result;
}

_anonymous_namespace_ *re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>(_anonymous_namespace_ *a1, uint64_t *a2)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)a1 = &unk_26E732508;
  uint64_t v4 = *a2;
  *a2 = 0;
  *((void *)a1 + 3) = v4;
  std::__function::__value_func<void ()(re::EasingFunction *)>::__value_func[abi:nn180100]((uint64_t)a1 + 32, (uint64_t)(a2 + 1));
  return a1;
}

void *re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::~Shareable(void *a1)
{
  *a1 = &unk_26E732508;
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](a1 + 3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>>::~Shareable(void *a1)
{
  *a1 = &unk_26E732508;
  std::unique_ptr<re::EasingFunction,std::function<void ()(re::EasingFunction*)>>::~unique_ptr[abi:nn180100](a1 + 3);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void RERenderGraphEmitterAssetRegisterProviders(re *a1, uint64_t a2)
{
  if (*(void *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v8);
    re::AssetHandle::loadNow(v9, 0);
    if (v9)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v9 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v9 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v8);
        if (v4)
        {
          uint64_t v5 = *(void *)(a2 + 104);
          if (v5) {
            uint64_t v6 = *(void *)(v5 + 296);
          }
          else {
            uint64_t v6 = 0;
          }
          (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16), v6, *(void *)(v4 + 24));
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderGraphEmitterAssetRegisterProviders::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetRegisterProviders, but DrawingManager was null!", (uint8_t *)&v8, 2u);
    }
  }
}

void RERenderGraphEmitterAssetUnregisterProviders(re *a1, uint64_t a2)
{
  if (*(void *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, v8);
    uint64_t v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(a2 + 104);
      if (v5) {
        uint64_t v6 = *(void *)(v5 + 296);
      }
      else {
        uint64_t v6 = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v6);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderGraphEmitterAssetUnregisterProviders::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetUnregisterProviders, but DrawingManager was null!", (uint8_t *)v8, 2u);
    }
  }
}

uint64_t re::AssetHandle::asset<re::RenderGraphEmitterAsset>(re::RenderGraphEmitterAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::RenderGraphEmitterAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      uint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      BOOL v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void RERenderGraphEmitterAssetExecute(re *a1, uint64_t a2)
{
  if (*(void *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v6);
    re::AssetHandle::loadNow(v7, 0);
    if (v7)
    {
      unsigned int v3 = atomic_load((unsigned int *)(v7 + 704));
      if (v3 == 2)
      {
        ++*(_DWORD *)(v7 + 260);
        uint64_t v4 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v6);
        if (v4) {
          (*(void (**)(void, uint64_t))(**(void **)(v4 + 16) + 32))(*(void *)(v4 + 16), a2);
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderGraphEmitterAssetExecute::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v5 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetExecute, but DrawingManager was null!", (uint8_t *)&v6, 2u);
    }
  }
}

void RERenderGraphEmitterAssetExecuteWorkload(re *a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 104))
  {
    re::AssetAPIHelper::assetHandleCreate((uint64_t)a1, &v8);
    re::AssetHandle::loadNow(v9, 0);
    if (v9)
    {
      unsigned int v5 = atomic_load((unsigned int *)(v9 + 704));
      if (v5 == 2)
      {
        ++*(_DWORD *)(v9 + 260);
        uint64_t v6 = re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)&v8);
        if (v6) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 16) + 40))(*(void *)(v6 + 16), a2, a3);
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  }
  else if ((atomic_exchange((atomic_uchar *volatile)&RERenderGraphEmitterAssetExecuteWorkload::__FILE____LINE___logged, 1u) & 1) == 0)
  {
    uint64_t v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Tried to call RERenderGraphEmitterAssetExecute, but DrawingManager was null!", (uint8_t *)&v8, 2u);
    }
  }
}

void RERenderGraphEmitterAssetSetRuntimeSetting(uint64_t a1, const char *a2, char *a3)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v26);
  uint64_t v5 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v26);
  if (v5)
  {
    uint64_t v6 = *(re::BindNode ***)(v5 + 16);
    uint64_t v7 = &off_268773000;
    {
      uint64_t v7 = &off_268773000;
      if (v16)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v17);
        uint64_t v7 = &off_268773000;
      }
    }
    if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v7[187], a2, a3) & 1) == 0)
    {
      unint64_t v8 = 0x268771000uLL;
      {
        unint64_t v8 = 0x268771000;
        if (v18)
        {
          re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v19);
          unint64_t v8 = 0x268771000;
        }
      }
      if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, *(const re::IntrospectionBase **)(v8 + 3648), a2, a3) & 1) == 0)
      {
        unint64_t v9 = 0x268771000uLL;
        {
          unint64_t v9 = 0x268771000;
          if (v20)
          {
            re::introspect<float>(void)::info = re::introspect_float(0, v21);
            unint64_t v9 = 0x268771000;
          }
        }
        if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, *(const re::IntrospectionBase **)(v9 + 3632), a2, a3) & 1) == 0)
        {
          BOOL v10 = &off_268773000;
          {
            BOOL v10 = &off_268773000;
            if (v22)
            {
              re::introspect<int>(void)::info = re::introspect_int(0, v23);
              BOOL v10 = &off_268773000;
            }
          }
          if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v10[267], a2, a3) & 1) == 0)
          {
            uint64_t v11 = &off_268773000;
            {
              uint64_t v11 = &off_268773000;
              if (v24)
              {
                re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v25);
                uint64_t v11 = &off_268773000;
              }
            }
            if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, (const re::IntrospectionBase *)v11[269], a2, a3) & 1) == 0)
            {
              unint64_t v12 = (const re::IntrospectionBase *)re::introspect<re::Vector2<float>>();
              if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, v12, a2, a3) & 1) == 0)
              {
                uint64_t v13 = (const re::IntrospectionBase *)re::introspect<re::Vector3<float>>();
                if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, v13, a2, a3) & 1) == 0)
                {
                  unint64_t v14 = (const re::IntrospectionBase *)re::introspect<re::Vector4<float>>();
                  if ((re::RenderGraphEmitterBase::setRuntimeSetting(v6, v14, a2, a3) & 1) == 0)
                  {
                    uint64_t v15 = (const re::IntrospectionBase *)re::introspect<re::Quaternion<float>>();
                    re::RenderGraphEmitterBase::setRuntimeSetting(v6, v15, a2, a3);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v26);
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingBool(uint64_t a1, const char *a2, char a3)
{
  char v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    uint64_t v6 = &off_268773000;
    {
      unint64_t v12 = v5;
      uint64_t v6 = &off_268773000;
      int v11 = v9;
      uint64_t v5 = v12;
      if (v11)
      {
        re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v10);
        uint64_t v6 = &off_268773000;
        uint64_t v5 = v12;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v6[187], a2, &v14);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingDouble(uint64_t a1, const char *a2, double a3)
{
  double v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      unint64_t v12 = v5;
      unint64_t v6 = 0x268771000;
      int v11 = v9;
      uint64_t v5 = v12;
      if (v11)
      {
        re::introspect<double>(void)::info = (uint64_t)re::introspect_double(0, v10);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v12;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3648), a2, (char *)&v14);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingFloat(uint64_t a1, const char *a2, float a3)
{
  float v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      unint64_t v12 = v5;
      unint64_t v6 = 0x268771000;
      int v11 = v9;
      uint64_t v5 = v12;
      if (v11)
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v10);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v12;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3632), a2, (char *)&v14);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingInt32(uint64_t a1, const char *a2, int a3)
{
  int v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = &off_268773000;
    {
      unint64_t v12 = v5;
      unint64_t v6 = &off_268773000;
      int v11 = v9;
      uint64_t v5 = v12;
      if (v11)
      {
        re::introspect<int>(void)::info = re::introspect_int(0, v10);
        unint64_t v6 = &off_268773000;
        uint64_t v5 = v12;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v6[267], a2, (char *)&v14);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingUInt32(uint64_t a1, const char *a2, int a3)
{
  int v14 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v13);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v13);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = &off_268773000;
    {
      unint64_t v12 = v5;
      unint64_t v6 = &off_268773000;
      int v11 = v9;
      uint64_t v5 = v12;
      if (v11)
      {
        re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v10);
        unint64_t v6 = &off_268773000;
        uint64_t v5 = v12;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, (const re::IntrospectionBase *)v6[269], a2, (char *)&v14);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector2F(uint64_t a1, const char *a2, double a3)
{
  double v13 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      int v11 = v5;
      unint64_t v6 = 0x268771000;
      int v10 = v9;
      uint64_t v5 = v11;
      if (v10)
      {
        re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v11;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3664), a2, (char *)&v13);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector3F(uint64_t a1, const char *a2, __n128 a3)
{
  __n128 v13 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      int v11 = v5;
      unint64_t v6 = 0x268771000;
      int v10 = v9;
      uint64_t v5 = v11;
      if (v10)
      {
        re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v11;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3680), a2, (char *)&v13);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingVector4F(uint64_t a1, const char *a2, __n128 a3)
{
  __n128 v13 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      int v11 = v5;
      unint64_t v6 = 0x268771000;
      int v10 = v9;
      uint64_t v5 = v11;
      if (v10)
      {
        re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v11;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3696), a2, (char *)&v13);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v7;
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingQuaternionF(uint64_t a1, const char *a2, __n128 a3)
{
  __n128 v13 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v4 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v4)
  {
    uint64_t v5 = *(re::BindNode ***)(v4 + 16);
    unint64_t v6 = 0x268771000uLL;
    {
      int v11 = v5;
      unint64_t v6 = 0x268771000;
      int v10 = v9;
      uint64_t v5 = v11;
      if (v10)
      {
        re::introspect<re::Quaternion<float>>(void)::info = re::introspect_QuaternionF(0);
        unint64_t v6 = 0x268771000;
        uint64_t v5 = v11;
      }
    }
    uint64_t v7 = re::RenderGraphEmitterBase::setRuntimeSetting(v5, *(const re::IntrospectionBase **)(v6 + 3712), a2, (char *)&v13);
  }
  else
  {
    uint64_t v7 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v7;
}

void RERenderGraphSelectionEmitterAddCallback(uint64_t a1, uint64_t a2, void *a3)
{
  float v11[4] = *MEMORY[0x263EF8340];
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v6 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    unint64_t v8 = _Block_copy(v5);
    v11[0] = &unk_26E732550;
    v11[1] = v8;
    uint64_t v11[3] = v11;
    unint64_t v9 = *(void *)(*(void *)(a2 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(a2 + 136) + 16) << 60);
    re::RenderGraphSelectionEmitter::addSelectionCompleteCallback(v7, (uint64_t *)&v9, (uint64_t)v11);
    std::__function::__value_func<void ()(re::Slice<unsigned long long> const&)>::~__value_func[abi:nn180100](v11);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
}

void RERenderGraphSelectionEmitterAddConcludeCallback(uint64_t a1, uint64_t a2, void *a3)
{
  float v11[4] = *MEMORY[0x263EF8340];
  id v5 = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v6 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    unint64_t v8 = _Block_copy(v5);
    v11[0] = &unk_26E7325E0;
    v11[1] = v8;
    uint64_t v11[3] = v11;
    unint64_t v9 = *(void *)(*(void *)(a2 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(a2 + 136) + 16) << 60);
    re::RenderGraphSelectionEmitter::addSelectionConcludeCallback(v7, (uint64_t *)&v9, (uint64_t)v11);
    std::__function::__value_func<void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::~__value_func[abi:nn180100](v11);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
}

void RERenderGraphSelectionEmitterSetFilteredEntityIDs(uint64_t a1, const __CFArray *a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3) {
    re::RenderGraphSelectionEmitter::setFilteredEntityIDSet(*(re::RenderGraphSelectionEmitter **)(v3 + 16), a2);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

void RERenderGraphSelectionEmitterSetParams(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v10[3] = (uint64_t)&unk_26E719590;
  *(void *)((char *)&v12 + 4) = -1;
  *(int32x4_t *)&v13[8] = vdupq_n_s32(0x7FC00000u);
  *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)&v13[8];
  *(void *)&long long v11 = __PAIR64__(a3, a2);
  *((void *)&v11 + 1) = __PAIR64__(a5, a4);
  LODWORD(v12) = a6 ^ 1;
  re::AssetAPIHelper::assetHandleCreate(a1, v10);
  uint64_t v6 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v10);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    *(void *)(v7 + 4physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = *(void *)&v13[32];
    long long v8 = v11;
    *(_OWORD *)(v7 + 376) = v12;
    long long v9 = *(_OWORD *)&v13[16];
    *(_OWORD *)(v7 + 392) = *(_OWORD *)v13;
    *(_OWORD *)(v7 + 408) = v9;
    *(_OWORD *)(v7 + 360) = v8;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
}

void RERenderGraphSelectionEmitterSetParamsWithTargetSize(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8)
{
  uint64_t v12[3] = (uint64_t)&unk_26E719590;
  *(int32x4_t *)&v15[8] = vdupq_n_s32(0x7FC00000u);
  *(_OWORD *)&unsigned char v15[24] = *(_OWORD *)&v15[8];
  *(void *)&long long v13 = __PAIR64__(a3, a2);
  *((void *)&v13 + 1) = __PAIR64__(a5, a4);
  LODWORD(v14) = a6 ^ 1;
  *(void *)((char *)&v14 + 4) = __PAIR64__(a8, a7);
  re::AssetAPIHelper::assetHandleCreate(a1, v12);
  uint64_t v8 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    *(void *)(v9 + 4physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = *(void *)&v15[32];
    long long v10 = v13;
    *(_OWORD *)(v9 + 376) = v14;
    long long v11 = *(_OWORD *)&v15[16];
    *(_OWORD *)(v9 + 392) = *(_OWORD *)v15;
    *(_OWORD *)(v9 + 408) = v11;
    *(_OWORD *)(v9 + 360) = v10;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
}

void RERenderGraphSelectionEmitterSetConcludeParams(uint64_t a1, __n128 a2, __n128 a3)
{
  DWORD2(v9) = -1;
  float v7[3] = (uint64_t)&unk_26E719590;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(void *)&long long v9 = 0xFFFFFFFF00000000;
  *(__n128 *)&v10[8] = a2;
  *(__n128 *)&v10[24] = a3;
  re::AssetAPIHelper::assetHandleCreate(a1, v7);
  uint64_t v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v7);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    *(void *)(v4 + 4physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = *(void *)&v10[32];
    long long v5 = v8;
    *(_OWORD *)(v4 + 376) = v9;
    long long v6 = *(_OWORD *)&v10[16];
    *(_OWORD *)(v4 + 392) = *(_OWORD *)v10;
    *(_OWORD *)(v4 + 408) = v6;
    *(_OWORD *)(v4 + 360) = v5;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void RERenderGraphSelectionEmitterSetConcludeParamsWithTargetSize(uint64_t a1, unsigned int a2, unsigned int a3, __n128 a4, __n128 a5)
{
  v9[3] = (uint64_t)&unk_26E719590;
  *(void *)&long long v10 = -1;
  *((void *)&v10 + 1) = -1;
  LODWORD(v11) = 0;
  *(void *)((char *)&v11 + 4) = __PAIR64__(a3, a2);
  *(__n128 *)&unsigned __int8 v12[8] = a4;
  *(__n128 *)&v12[24] = a5;
  re::AssetAPIHelper::assetHandleCreate(a1, v9);
  uint64_t v5 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v9);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    *(void *)(v6 + 4physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = *(void *)&v12[32];
    long long v7 = v10;
    *(_OWORD *)(v6 + 376) = v11;
    long long v8 = *(_OWORD *)&v12[16];
    *(_OWORD *)(v6 + 392) = *(_OWORD *)v12;
    *(_OWORD *)(v6 + 408) = v8;
    *(_OWORD *)(v6 + 360) = v7;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
}

void RERenderGraphSelectionEmitterSetScene(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3) {
    re::StringID::operator=((unint64_t *)(*(void *)(v3 + 16) + 456), (uint64_t *)(*(void *)(a2 + 104) + 272));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

BOOL RERenderGraphSimpleForwardEmitterGetDisplayWireframe(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v1 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v1) {
    BOOL v2 = *(unsigned char *)(*(void *)(v1 + 16) + 136) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return v2;
}

void RERenderGraphSimpleForwardEmitterSetDisplayWireframe(uint64_t a1, char a2)
{
  re::AssetAPIHelper::assetHandleCreate(a1, v4);
  uint64_t v3 = re::AssetHandle::asset<re::RenderGraphEmitterAsset>((re::RenderGraphEmitterAsset *)v4);
  if (v3) {
    *(unsigned char *)(*(void *)(v3 + 16) + 136) = a2;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
}

uint64_t RERenderGraphSimpleForwardEmitterGetDebugMaterialTechniqueNameCount()
{
  return -1;
}

uint64_t RERenderGraphSimpleForwardEmitterGetDebugMaterialTechniqueName()
{
  return 0;
}

uint64_t re::AssetHandle::loadedAsset<re::RenderGraphEmitterAsset>(re::RenderGraphEmitterAsset *a1)
{
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  BOOL v2 = re::RenderGraphEmitterAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::__clone(uint64_t a1)
{
  BOOL v2 = operator new(0x10uLL);
  *BOOL v2 = &unk_26E732550;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E732550;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddCallback::$_0>,void ()(re::Slice<unsigned long long> const&)>::target_type()
{
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::__clone(uint64_t a1)
{
  BOOL v2 = operator new(0x10uLL);
  *BOOL v2 = &unk_26E7325E0;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7325E0;
  uint64_t result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RERenderGraphSelectionEmitterAddConcludeCallback::$_0,std::allocator<RERenderGraphSelectionEmitterAddConcludeCallback::$_0>,void ()(re::Slice<re::RenderGraphSelectionConcludeResult> const&)>::target_type()
{
}

uint64_t REStateParameterBlackboardAssetCreateAsset(re *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1);
  int v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 104, 8);
  *int v16 = &unk_26E6CE620;
  *(_OWORD *)(v16 + 1) = 0u;
  *(_OWORD *)(v16 + 3) = 0u;
  *(_OWORD *)(v16 + 5) = 0u;
  *(_OWORD *)(v16 + 7) = 0u;
  *(_OWORD *)(v16 + 9) = 0u;
  uint64_t v85 = (_anonymous_namespace_ *)v16;
  *(_OWORD *)(v16 + 11) = 0u;
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v87 = (uint64_t *)a8;
  if (a2)
  {
    uint64_t v83 = a5;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = &v90;
    uint64_t v21 = (const char **)(a3 + 8);
    do
    {
      int v22 = *(v21 - 1);
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v23 = *v21;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v25 = (uint64_t *)v102;
      if (v102 <= (unint64_t)v19)
      {
        uint64_t v104 = 0;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v105 = 136315906;
        float v106 = "operator[]";
        __int16 v107 = 1024;
        int v108 = 468;
        __int16 v109 = 2048;
        int v110 = v19;
        __int16 v111 = 2048;
        uint64_t v112 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        uint64_t v104 = 0;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v105 = 136315906;
        float v106 = "operator[]";
        __int16 v107 = 1024;
        int v108 = 468;
        __int16 v109 = 2048;
        int v110 = v19;
        __int16 v111 = 2048;
        uint64_t v112 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        uint64_t v104 = 0;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v105 = 136315906;
        float v106 = "operator[]";
        __int16 v107 = 1024;
        int v108 = 468;
        __int16 v109 = 2048;
        int v110 = v20;
        __int16 v111 = 2048;
        uint64_t v112 = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        uint64_t v104 = 0;
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        long long v113 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v105 = 136315906;
        float v106 = "operator[]";
        __int16 v107 = 1024;
        int v108 = 468;
        __int16 v109 = 2048;
        int v110 = v20;
        __int16 v111 = 2048;
        uint64_t v112 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v26 = (void *)(v103 + v18);
      uint64_t v27 = v88;
      __int16 v28 = v89;
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v29 = *(void *)(v103 + v18 + 8);
      unint64_t v30 = v27 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v103 + v18) & 1;
      v26[1] = v28;
      *(void *)&long long v113 = v30;
      *((void *)&v113 + 1) = v29;
      *int v26 = v27;
      re::StringID::destroyString((re::StringID *)&v113);
      uint64_t v31 = v90;
      __int16 v32 = v91;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v33 = v26[3];
      unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFFELL | v26[2] & 1;
      uint64_t v26[3] = v32;
      *(void *)&long long v113 = v34;
      *((void *)&v113 + 1) = v33;
      void v26[2] = v31;
      re::StringID::destroyString((re::StringID *)&v113);
      re::StringID::destroyString((re::StringID *)&v90);
      re::StringID::destroyString((re::StringID *)&v88);
      uint64_t v19 = (uint64_t *)((char *)v19 + 1);
      v18 += 32;
      v21 += 2;
    }
    while (a2 != v19);
    a2 = &v101;
    a8 = (unint64_t)v87;
    a5 = v83;
  }
  if (a4)
  {
    uint64_t v35 = 0;
    uint64_t v19 = 0;
    int v20 = &v90;
    long long v36 = (const char **)(a5 + 8);
    do
    {
      long long v37 = *(v36 - 1);
      uint64_t v88 = 0;
      uint64_t v89 = "";
      long long v38 = *v36;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v25 = (uint64_t *)v99;
      if (v99 <= (unint64_t)v19) {
        goto LABEL_26;
      }
      uint64_t v40 = (void *)(v100 + v35);
      uint64_t v41 = v88;
      BOOL v42 = v89;
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v43 = *(void *)(v100 + v35 + 8);
      unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v100 + v35) & 1;
      v40[1] = v42;
      *(void *)&long long v113 = v44;
      *((void *)&v113 + 1) = v43;
      *uint64_t v40 = v41;
      re::StringID::destroyString((re::StringID *)&v113);
      uint64_t v45 = v90;
      uint64_t v46 = v91;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v47 = v40[3];
      unint64_t v48 = v45 & 0xFFFFFFFFFFFFFFFELL | v40[2] & 1;
      v40[3] = v46;
      *(void *)&long long v113 = v48;
      *((void *)&v113 + 1) = v47;
      v40[2] = v45;
      re::StringID::destroyString((re::StringID *)&v113);
      re::StringID::destroyString((re::StringID *)&v90);
      re::StringID::destroyString((re::StringID *)&v88);
      uint64_t v19 = (uint64_t *)((char *)v19 + 1);
      v35 += 32;
      v36 += 2;
    }
    while (a4 != v19);
    a4 = &v98;
    a8 = (unint64_t)v87;
  }
  if (a6)
  {
    uint64_t v49 = 0;
    int v20 = 0;
    uint64_t v17 = &v90;
    uint64_t v50 = (const char **)(a7 + 8);
    do
    {
      BOOL v51 = *(v50 - 1);
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v52 = *v50;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v25 = (uint64_t *)v96;
      if (v96 <= (unint64_t)v20) {
        goto LABEL_27;
      }
      BOOL v54 = (void *)(v97 + v49);
      uint64_t v55 = v88;
      uint64_t v56 = v89;
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v57 = *(void *)(v97 + v49 + 8);
      unint64_t v58 = v55 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v97 + v49) & 1;
      v54[1] = v56;
      *(void *)&long long v113 = v58;
      *((void *)&v113 + 1) = v57;
      *BOOL v54 = v55;
      re::StringID::destroyString((re::StringID *)&v113);
      uint64_t v59 = v90;
      __int16 v60 = v91;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v61 = v54[3];
      unint64_t v62 = v59 & 0xFFFFFFFFFFFFFFFELL | v54[2] & 1;
      v54[3] = v60;
      *(void *)&long long v113 = v62;
      *((void *)&v113 + 1) = v61;
      v54[2] = v59;
      re::StringID::destroyString((re::StringID *)&v113);
      re::StringID::destroyString((re::StringID *)&v90);
      re::StringID::destroyString((re::StringID *)&v88);
      int v20 = (uint64_t *)((char *)v20 + 1);
      v49 += 32;
      v50 += 2;
    }
    while (a6 != v20);
    a6 = &v95;
    a8 = (unint64_t)v87;
  }
  if (a8)
  {
    uint64_t v64 = 0;
    int v20 = 0;
    unint64_t v65 = (const char **)(a9 + 8);
    do
    {
      long long v66 = *(v65 - 1);
      uint64_t v88 = 0;
      uint64_t v89 = "";
      long long v67 = *v65;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v17 = v93;
      if (v93 <= v20) {
        goto LABEL_28;
      }
      long long v69 = (void *)(v94 + v64);
      uint64_t v70 = v88;
      uint64_t v71 = v89;
      uint64_t v88 = 0;
      uint64_t v89 = "";
      uint64_t v72 = *(void *)(v94 + v64 + 8);
      unint64_t v73 = v70 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v94 + v64) & 1;
      v69[1] = v71;
      *(void *)&long long v113 = v73;
      *((void *)&v113 + 1) = v72;
      *long long v69 = v70;
      re::StringID::destroyString((re::StringID *)&v113);
      uint64_t v74 = v90;
      float v75 = v91;
      uint64_t v90 = 0;
      float v91 = "";
      uint64_t v76 = v69[3];
      unint64_t v77 = v74 & 0xFFFFFFFFFFFFFFFELL | v69[2] & 1;
      v69[3] = v75;
      *(void *)&long long v113 = v77;
      *((void *)&v113 + 1) = v76;
      v69[2] = v74;
      re::StringID::destroyString((re::StringID *)&v113);
      re::StringID::destroyString((re::StringID *)&v90);
      re::StringID::destroyString((re::StringID *)&v88);
      int v20 = (uint64_t *)((char *)v20 + 1);
      v64 += 32;
      v65 += 2;
    }
    while (v87 != v20);
    uint64_t v78 = &v92;
  }
  else
  {
    uint64_t v78 = 0;
  }
  inited = re::StateParameterBlackboardAsset::initWithInitData(v85, (uint64_t)a2, (uint64_t)a4, (uint64_t)a6, (uint64_t)v78);
  re::StateParameterBlackboardAsset::assetType(inited);
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 416))(&v113);
  uint64_t v80 = v113;
  if ((void)v113) {
    id v81 = (id)(v113 + 8);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v113);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v92);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v95);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v98);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(&v101);
  return v80;
}

uint64_t RENetDiscoveryViewCreateWithAddresses()
{
  return MEMORY[0x270F59000]();
}

uint64_t RENetDiscoveryViewAddAddress()
{
  return MEMORY[0x270F58FF8]();
}

uint64_t RENetDiscoveryViewRemoveAddress()
{
  return MEMORY[0x270F59060]();
}

uint64_t RENetDiscoveryViewNotifyJoin()
{
  return MEMORY[0x270F59010]();
}

uint64_t RENetDiscoveryViewNotifyLeave()
{
  return MEMORY[0x270F59018]();
}

uint64_t RENetDiscoveryViewCreateWithCallbacks(void *a1)
{
  RESyncDiscoveryViewObserverCreate();
  if (a1[1]) {
    RESyncDiscoveryViewObserverOnCreate();
  }
  if (a1[2]) {
    RESyncDiscoveryViewObserverOnDestroy();
  }
  if (a1[3]) {
    RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  }
  if (a1[4]) {
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
  }
  if (a1[5]) {
    RESyncDiscoveryViewObserverOnGetAuthData();
  }
  if (a1[6]) {
    RESyncDiscoveryViewObserverOnRequestIdentity();
  }
  if (a1[7]) {
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
  }
  uint64_t v2 = RESyncDiscoveryViewCreateWithObserver();
  RESyncRelease();
  return v2;
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__RENetDiscoveryViewCreateWithCallbacks_block_invoke_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)(a1 + 32) + 16))(&v5);
  *(_DWORD *)a2 = v5;
  uint64_t v4 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v4;
  return result;
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke_6(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacks_block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetDiscoveryViewCreateWithCallbacksV2(void *a1)
{
  RESyncDiscoveryViewObserverCreate();
  if (a1[1]) {
    RESyncDiscoveryViewObserverOnCreate();
  }
  if (a1[2]) {
    RESyncDiscoveryViewObserverOnDestroy();
  }
  if (a1[3]) {
    RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  }
  if (a1[4]) {
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
  }
  if (a1[5]) {
    RESyncDiscoveryViewObserverOnGetAuthData();
  }
  if (a1[6]) {
    RESyncDiscoveryViewObserverOnRequestIdentity();
  }
  if (a1[7]) {
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
  }
  uint64_t v2 = RESyncDiscoveryViewCreateWithObserver();
  RESyncRelease();
  return v2;
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)(a1 + 32) + 16))(&v5);
  *(_DWORD *)a2 = v5;
  uint64_t v4 = v7;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v4;
  return result;
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_6(uint64_t a1)
{
  return 0;
}

uint64_t __RENetDiscoveryViewCreateWithCallbacksV2_block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetIdentityCreateWithCallbacks(void *a1)
{
  RESyncDiscoveryIdentityObserverCreate();
  if (a1[1]) {
    RESyncDiscoveryIdentityObserverOnCreate();
  }
  if (a1[2]) {
    RESyncDiscoveryIdentityObserverOnDestroy();
  }
  if (a1[3]) {
    RESyncDiscoveryIdentityObserverOnGetDisplayName();
  }
  if (a1[4]) {
    RESyncDiscoveryIdentityObserverOnGetAddress();
  }
  if (a1[5]) {
    RESyncDiscoveryIdentityObserverOnIsLocal();
  }
  uint64_t v2 = RESyncIdentityCreateWithObserver();
  RESyncRelease();
  return v2;
}

uint64_t __RENetIdentityCreateWithCallbacks_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetIdentityCreateWithCallbacks_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetIdentityCreateWithCallbacks_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetIdentityCreateWithCallbacks_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __RENetIdentityCreateWithCallbacks_block_invoke_5(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t RENetIdentityGetDisplayName()
{
  return MEMORY[0x270F59090]();
}

uint64_t RENetIdentityIsLocal()
{
  return MEMORY[0x270F59098]();
}

void RENetAuthDataInvalid(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t REMaterialParametersServiceCreatePbrParameters(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v2);
  return v2;
}

uint64_t REMaterialParametersServiceCreateUnlitParameters(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, __n128 a6, float a7)
{
  __n128 v14 = a6;
  char v15 = a4;
  re::AssetAPIHelper::assetHandleCreate(a5, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, __n128 *, uint64_t *, float))(*(void *)a1 + 24))(&v13, a1, a2, a3, &v14, v12, a7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v13;
}

uint64_t REMaterialParametersServiceFindUnlitParametersByID(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result)
  {
    uint64_t v2 = result;
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REMaterialParametersServiceFindPbrParametersByID(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result)
  {
    uint64_t v2 = result;
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t REMaterialParametersServiceGetParametersTypeForID(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (result)
  {
    uint64_t v2 = (re::ecs2::EntityComponentCollection *)(result + 32);
    if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      return 1;
    }
    else
    {
      return 2
           * (re::ecs2::EntityComponentCollection::get(v2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0);
    }
  }
  return result;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreate(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 88, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(void *)uint64_t v2 = &unk_26E732770;
  *(void *)(v2 + 80) = 0;
  *(_OWORD *)(v2 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  return v2;
}

uint64_t REMeshDeformationDefinitionAssetBuilderCreateFromAsset(uint64_t a1)
{
  re::AssetAPIHelper::assetHandleCreate(a1, &v8);
  uint64_t v2 = re::MeshDeformationAsset::assetType(v1);
  if (v9 && v2 == *(uint64_t **)(v9 + 264))
  {
    uint64_t v5 = re::globalAllocators((re *)v2);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 88, 8);
    uint64_t v6 = re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)&v8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
    *(void *)uint64_t v4 = &unk_26E732770;
    *(void *)(v4 + 80) = 0;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0u;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v11, (const re::AssetHandle *)v10);
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v11);
    re::AssetHandle::operator=(v4 + 24, buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  }
  else
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v3 = (id)CoreRELog::log;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Asset reference is not a valid Mesh Deformation Asset.", (uint8_t *)buf, 2u);
    }

    uint64_t v4 = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  return v4;
}

void REMeshDeformationDefinitionAssetBuilderAddFromMeshDeformationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, v34);
  uint64_t v4 = re::AssetHandle::asset<re::MeshDeformationAsset>((re::MeshDeformationAsset *)v34);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (uint64_t *)(a1 + 24);
    uint64_t v10 = *(void *)(v5 + 16);
    if (v10)
    {
      long long v11 = v8;
      unint64_t v12 = *((void *)v8 + 2);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 <= v7)
      {
LABEL_28:
        uint64_t v35 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v36 = 136315906;
        long long v37 = "copy";
        __int16 v38 = 1024;
        int v39 = 643;
        __int16 v40 = 2048;
        unint64_t v41 = v7;
        __int16 v42 = 2048;
        unint64_t v43 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_29;
      }
      unint64_t v13 = v7 + v10;
      if (__CFADD__(v7, v10))
      {
LABEL_29:
        re::internal::assertLog((re::internal *)7, v9, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v12, v7, v10);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v14 = *(void *)(v5 + 32);
      if (v12 >= v13)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(*(void *)(v5 + 32), (uint64_t *)(v14 + 40 * v10), *((void *)v8 + 4) + 40 * v7);
      }
      else
      {
        re::DynamicArray<re::DeformationStackDefinition>::growCapacity(v8, v7 + v10);
        uint64_t v15 = *((void *)v11 + 2);
        int v16 = (uint64_t *)(v14 + 40 * (v15 - v7));
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition const*,re::DeformationStackDefinition const*,re::DeformationStackDefinition*,0>(v14, v16, *((void *)v11 + 4) + 40 * v7);
        if (v15 - v7 != v10)
        {
          uint64_t v17 = *((void *)v11 + 4) + 40 * *((void *)v11 + 2);
          uint64_t v18 = 40 * v10 + 40 * v7 - 40 * v15;
          do
          {
            uint64_t v19 = re::DynamicArray<re::DeformationDefinition>::DynamicArray(v17, v16);
            v16 += 5;
            uint64_t v17 = v19 + 40;
            v18 -= 40;
          }
          while (v18);
        }
        *((void *)v11 + 2) = v13;
      }
      ++*((_DWORD *)v11 + 6);
    }
    uint64_t v10 = *(void *)(v5 + 56);
    if (v10)
    {
      uint64_t v21 = v20;
      unint64_t v22 = *((void *)v20 + 7);
      unint64_t v13 = v22 + 1;
      if (v22 + 1 <= v2)
      {
LABEL_30:
        uint64_t v35 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v36 = 136315906;
        long long v37 = "copy";
        __int16 v38 = 1024;
        int v39 = 643;
        __int16 v40 = 2048;
        unint64_t v41 = v2;
        __int16 v42 = 2048;
        unint64_t v43 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        re::internal::assertLog((re::internal *)7, v23, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v22, v2, v10);
        _os_crash();
        __break(1u);
      }
      unint64_t v23 = v2 + v10;
      if (__CFADD__(v2, v10)) {
        goto LABEL_31;
      }
      int v24 = *(unint64_t **)(v5 + 72);
      if (v22 >= v23)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(*(unint64_t **)(v5 + 72), &v24[6 * v10], *((void *)v20 + 9) + 48 * v2);
      }
      else
      {
        unint64_t v33 = v2 + v10;
        re::DynamicArray<re::MeshDeformationIndex>::growCapacity((void *)v20 + 5, v23);
        unint64_t v25 = *((void *)v21 + 7) - v2;
        int v26 = &v24[6 * v25];
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex const*,re::MeshDeformationIndex const*,re::MeshDeformationIndex*>(v24, v26, *((void *)v21 + 9) + 48 * v2);
        if (v25 != v10)
        {
          uint64_t v27 = 0;
          __int16 v28 = &v24[6 * v10];
          uint64_t v10 = *((void *)v21 + 9) + 48 * *((void *)v21 + 7);
          do
          {
            uint64_t v29 = &v26[v27];
            *(unsigned char *)(v10 + v27 * 8) = v26[v27];
            re::StringID::StringID((re::StringID *)(v10 + v27 * 8 + 8), (const StringID *)&v26[v27 + 1]);
            re::StringID::StringID((re::StringID *)(v10 + v27 * 8 + 24), (const StringID *)&v26[v27 + 3]);
            *(void *)(v10 + v27 * 8 + 40) = v26[v27 + 5];
            v27 += 6;
          }
          while (v29 + 6 != v28);
        }
        *((void *)v21 + 7) = v33;
      }
      ++*((_DWORD *)v21 + 16);
    }
    if (v2 < v30)
    {
      unint64_t v13 = 48 * v2 + 40;
      while (1)
      {
        unint64_t v32 = *((void *)v31 + 7);
        if (v32 <= v2) {
          break;
        }
        *(void *)(*((void *)v31 + 9) + v13) += v7;
        ++v2;
        v13 += 48;
        if (v30 == v2) {
          goto LABEL_26;
        }
      }
      uint64_t v35 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v36 = 136315906;
      long long v37 = "operator[]";
      __int16 v38 = 1024;
      int v39 = 789;
      __int16 v40 = 2048;
      unint64_t v41 = v2;
      __int16 v42 = 2048;
      unint64_t v43 = v32;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
  }
LABEL_26:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v34);
}

uint64_t re::AssetHandle::asset<re::MeshDeformationAsset>(re::MeshDeformationAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v2 = re::MeshDeformationAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      unint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

re *anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(uint64_t *a1)
{
  float v16[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 3;
  uint64_t result = (re *)a1[3];
  if (result) {
    return result;
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = atomic_load((unsigned int *)(v4 + 704));
    if (v5 == 2) {
      goto LABEL_7;
    }
    uint64_t v6 = a1[1];
  }
  else
  {
    uint64_t v6 = 0;
  }
  re::AssetHandle::loadNow(v6, 0);
LABEL_7:
  uint64_t result = (re *)re::AssetHandle::asset<re::MeshDeformationAsset>((re::MeshDeformationAsset *)a1);
  if (result)
  {
    unint64_t v7 = result;
    uint64_t v8 = re::globalAllocators(result);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 80, 8);
    uint64_t v10 = v9;
    *(void *)(v9 + 32) = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + physx::Ext::Joint<physx::PxSphericalJoint,physx::PxSphericalJointGeneratedValues>::~Joint((uint64_t)this - 24) = 0;
    if (*(void *)v7)
    {
      unint64_t v11 = *((void *)v7 + 2);
      *(void *)uint64_t v9 = *(void *)v7;
      re::DynamicArray<re::DeformationStackDefinition>::setCapacity((void *)v9, v11);
      ++*(_DWORD *)(v10 + 24);
      re::DynamicArray<re::DeformationStackDefinition>::copy((void *)v10, (uint64_t)v7);
    }
    *(void *)(v10 + 40) = 0;
    *(void *)(v10 + 48) = 0;
    *(void *)(v10 + 56) = 0;
    *(_DWORD *)(v10 + 64) = 0;
    uint64_t v12 = *((void *)v7 + 5);
    *(void *)(v10 + 72) = 0;
    if (v12)
    {
      unint64_t v13 = *((void *)v7 + 7);
      *(void *)(v10 + 40) = v12;
      re::DynamicArray<re::MeshDeformationIndex>::setCapacity((void *)(v10 + 40), v13);
      ++*(_DWORD *)(v10 + 64);
      re::DynamicArray<re::MeshDeformationIndex>::copy((void *)(v10 + 40), (uint64_t)v7 + 40);
    }
    v14[0] = &unk_26E7326F0;
    uint64_t v14[3] = v14;
    uint64_t v15 = v10;
    uint64_t v16[3] = v16;
    v16[0] = &unk_26E7326F0;
    std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::operator=[abi:nn180100](v3, &v15);
    std::unique_ptr<re::MeshDeformationAsset,std::function<void ()(re::MeshDeformationAsset*)>>::~unique_ptr[abi:nn180100](&v15);
    std::__function::__value_func<void ()(re::MeshDeformationAsset *)>::~__value_func[abi:nn180100](v14);
    if (*a1)
    {

      *a1 = 0;
    }
    a1[1] = 0;
    return (re *)a1[3];
  }
  return result;
}

void REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMesh(uint64_t a1, uint64_t a2)
{
  re::AssetAPIHelper::assetHandleCreate(a2, v6);
  uint64_t v3 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v6);
  if (v3)
  {
    uint64_t v4 = (const re::MeshAsset *)v3;
    re::MeshDeformationAsset::addDefaultModelStackDefinitionsForAllInstances(v5, v4);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMeshModel(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, v12);
  uint64_t v5 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v12);
  if (!v5)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = (const re::MeshAsset *)v5;
  uint64_t v7 = 416;
  if (!*(unsigned char *)(v5 + 952)) {
    uint64_t v7 = 24;
  }
  if (*(void *)(v5 + v7) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)StringID buf = 134217984;
      unint64_t v14 = a3;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh model index: %zu", buf, 0xCu);
    }

    goto LABEL_11;
  }
  uint64_t v9 = re::MeshDeformationAsset::addDefaultModelStackDefinitionForModel(v8, v6, a3);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDefaultDeformationStacksForMeshInstance(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  re::AssetAPIHelper::assetHandleCreate(a2, v12);
  uint64_t v5 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v12);
  if (!v5)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = (const re::MeshAsset *)v5;
  uint64_t v7 = 376;
  if (!*(unsigned char *)(v5 + 952)) {
    uint64_t v7 = 64;
  }
  if (*(void *)(v5 + v7) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    uint64_t v10 = (id)CoreRELog::log;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)StringID buf = 134217984;
      unint64_t v14 = a3;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid mesh instance index: %zu", buf, 0xCu);
    }

    goto LABEL_11;
  }
  uint64_t v9 = re::MeshDeformationAsset::addDefaultModelStackDefinitionForInstance(v8, v6, a3);
LABEL_12:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return v9;
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetDeformationStackCount(uint64_t a1)
{
}

uint64_t anonymous namespace'::MutableAssetRef<re::MeshDeformationAsset>::get(re::MeshDeformationAsset *a1)
{
  uint64_t result = *((void *)a1 + 3);
  if (result) {
    return result;
  }
  uint64_t v3 = *((void *)a1 + 1);
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_6;
  }
  unsigned int v4 = atomic_load((unsigned int *)(v3 + 704));
  if (v4 != 2)
  {
    uint64_t v5 = *((void *)a1 + 1);
LABEL_6:
    re::AssetHandle::loadNow(v5, 0);
  }
  return re::AssetHandle::asset<re::MeshDeformationAsset>(a1);
}

uint64_t REMeshDeformationDefinitionAssetBuilderAddDeformationStack(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 24);
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  re::DynamicArray<re::DeformationStackDefinition>::add(v2, (uint64_t)v4);
  re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)v4);
}

uint64_t REMeshDeformationDefinitionAssetBuilderGetDeformationStackDeformerCount(uint64_t a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) > a2)
  {
    if (*(void *)(v4 + 16) > a2) {
      return *(void *)(*(void *)(v4 + 32) + 40 * a2 + 16);
    }
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_9:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v6 = (id)CoreRELog::log;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return 0;
}

CFTypeRef REMeshDeformationDefinitionAssetBuilderDeformationStackGetDeformerName(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      long long v10 = (id)CoreRELog::log;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)StringID buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_18:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v11 = (id)CoreRELog::log;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)StringID buf = 134217984;
      *(void *)&uint8_t buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  CFStringRef v8 = CFStringCreateWithCString(0, *(const char **)(*(void *)(v7 + 32) + 40 * a3 + 8), 0x8000100u);
  return CFAutorelease(v8);
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackRemoveDeformer(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_6:
      long long v9 = (id)CoreRELog::log;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)StringID buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_16:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_6;
  }
  if (*((void *)v6 + 2) <= a2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *((void *)v6 + 4) + 40 * a2;
  if (*(void *)(v7 + 16) > a3)
  {
    re::DynamicArray<re::DeformationDefinition>::removeStableAt(v7, a3);
    return 1;
  }
  if (CoreRELog::onceToken != -1) {
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  }
  long long v10 = (id)CoreRELog::log;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
  }

  return 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackMoveDeformer(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_11:
      long long v13 = (id)CoreRELog::log;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
LABEL_16:

        return 0;
      }
      *(_DWORD *)StringID buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      long long v14 = "Invalid deformation stack index: %zu";
LABEL_24:
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
      goto LABEL_16;
    }
LABEL_26:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_11;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_26;
  }
  long long v9 = (void *)(*((void *)v8 + 4) + 40 * a2);
  unint64_t v10 = v9[2];
  if (v10 <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_24;
  }
  if (v10 <= a4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v15 = (id)CoreRELog::log;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)StringID buf = 134217984;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid new deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  long long v11 = (void *)(v9[4] + 40 * a3);
  *(void *)StringID buf = *v11;
  *(void *)&uint8_t buf[8] = v11[1];
  *long long v11 = 0;
  v11[1] = "";
  *(void *)&long long v17 = v11[2];
  uint64_t v11[2] = 0;
  *((void *)&v17 + 1) = v11[3];
  uint64_t v11[3] = 0;
  *(void *)&long long v18 = v11[4];
  float v11[4] = 0;
  re::DynamicArray<re::DeformationDefinition>::removeStableAt((uint64_t)v9, a3);
  re::DynamicArray<re::DeformationDefinition>::insert(v9, a4, (uint64_t *)buf);
  if ((void)v17)
  {
    if (*((void *)&v17 + 1))
    {
      (*(void (**)(void))(*(void *)v17 + 40))();
      *((void *)&v17 + 1) = 0;
      *(void *)&long long v18 = 0;
    }
    *(void *)&long long v17 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddBlendShape(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_DWORD **)&v11[16] = 0;
      *(void *)StringID buf = 0x1954B86F1FEF5A4;
      *(void *)&uint8_t buf[8] = "Blend Shape";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v11 = 136315906;
    *(void *)&float v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  long long v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}

BOOL REMeshDeformationDefinitionAssetBuilderDeformerIsBlendShape(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_8:
      long long v11 = (id)CoreRELog::log;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)StringID buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_19:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_8;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    __int16 v12 = (id)CoreRELog::log;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)StringID buf = 134217984;
      *(void *)&uint8_t buf[4] = a3;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Invalid deformer index: %zu", buf, 0xCu);
    }

    return 0;
  }
  uint64_t v8 = (void *)(*(void *)(v7 + 32) + 40 * a3);
  if (*v8 >> 1 != 0xCAA5C378FF7AD2) {
    return 0;
  }
  long long v9 = (char *)v8[1];
  return v9 == "Blend Shape" || strcmp(v9, "Blend Shape") == 0;
}

BOOL REMeshDeformationDefinitionAssetBuilderBlendShapeGetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v5 = (re::MeshDeformationAsset *)(a1 + 24);
                 + 16) <= a2)
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      unint64_t v13 = (id)CoreRELog::log;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)StringID buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*(void *)(v6 + 16) <= a2)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v6 + 32) + 40 * a2;
  if (*(void *)(v7 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    __int16 v12 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 32);
  long long v9 = (void *)(v8 + 40 * a3);
  if (*v9 >> 1 != 0xCAA5C378FF7AD2 || (unint64_t v10 = (char *)v9[1], v10 != "Blend Shape") && strcmp(v10, "Blend Shape"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    __int16 v12 = "Not a blend shape deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v8 + 40 * a3 + 24) != 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    long long v11 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    __int16 v12 = "Unexpected blend shape deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  return **(unsigned char **)(v8 + 40 * a3 + 32) != 0;
}

uint64_t REMeshDeformationDefinitionAssetBuilderBlendShapeSetForceCPU(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v7 = (uint64_t *)(a1 + 24);
  {
    if (CoreRELog::onceToken == -1)
    {
LABEL_12:
      long long v15 = (id)CoreRELog::log;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)StringID buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
      }

      return 0;
    }
LABEL_29:
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    goto LABEL_12;
  }
  if (*((void *)v8 + 2) <= a2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v9 = *((void *)v8 + 4) + 40 * a2;
  if (*(void *)(v9 + 16) <= a3)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    long long v14 = "Invalid deformer index: %zu";
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(v9 + 32);
  long long v11 = (void *)(v10 + 40 * a3);
  if (*v11 >> 1 != 0xCAA5C378FF7AD2 || (__int16 v12 = (char *)v11[1], v12 != "Blend Shape") && strcmp(v12, "Blend Shape"))
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    long long v14 = "Not a blend shape deformer index: %zu";
LABEL_27:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
LABEL_18:

    return 0;
  }
  if (*(void *)(v10 + 40 * a3 + 24) != 4)
  {
    if (CoreRELog::onceToken != -1) {
      dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
    }
    unint64_t v13 = (id)CoreRELog::log;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a3;
    long long v14 = "Unexpected blend shape deformation option size for deformer index: %zu";
    goto LABEL_27;
  }
  **(unsigned char **)(v10 + 40 * a3 + 32) = a4;
  return 1;
}

uint64_t REMeshDeformationDefinitionAssetBuilderDeformationStackAddSkinning(uint64_t a1, unint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t *)(a1 + 24);
  {
    unint64_t v5 = *((void *)v4 + 2);
    if (v5 > a2)
    {
      uint64_t v6 = (void *)(*((void *)v4 + 4) + 40 * a2);
      memset(v11, 0, 24);
      **(_WORD **)&v11[16] = 0;
      *(void *)StringID buf = 0x4550755B7A2;
      *(void *)&uint8_t buf[8] = "Skinning";
      long long v15 = *(_OWORD *)v11;
      uint64_t v7 = *(void *)&v11[16];
      memset(v11, 0, 24);
      *(void *)&long long v16 = v7;
      re::DynamicArray<re::DeformationDefinition>::add(v6, (uint64_t *)buf);
      if ((void)v15)
      {
        if (*((void *)&v15 + 1))
        {
          (*(void (**)(void))(*(void *)v15 + 40))();
          *((void *)&v15 + 1) = 0;
          *(void *)&long long v16 = 0;
        }
        *(void *)&long long v15 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      uint64_t v8 = v6[2] - 1;
      if (*(void *)v11 && *(void *)&v11[8]) {
        (*(void (**)(void))(**(void **)v11 + 40))();
      }
      return v8;
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)StringID buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v11 = 136315906;
    *(void *)&float v11[4] = "operator[]";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 789;
    *(_WORD *)&v11[18] = 2048;
    *(void *)&v11[20] = a2;
    __int16 v12 = 2048;
    unint64_t v13 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (CoreRELog::onceToken != -1) {
LABEL_16:
  }
    dispatch_once(&CoreRELog::onceToken, &__block_literal_global_66);
  uint64_t v9 = (id)CoreRELog::log;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)StringID buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Invalid deformation stack index: %zu", buf, 0xCu);
  }

  return -1;
}