void re::buildSphere(re::GeomMesh *a1, unsigned __int16 *a2)
{
  unsigned char v4[736];

  re::GeomMesh::GeomMesh((re::GeomMesh *)v4, 0);
  re::buildSphere((uint64_t)v4, a2);
  re::DynamicArray<re::GeomMesh>::clear(a1);
  re::DynamicArray<re::GeomMesh>::add((uint64_t)a1, (uint64_t)v4);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v4);
}

void re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::~Callable()
{
}

uint64_t re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::operator()(uint64_t a1, float *a2, float *a3, float32x4_t *a4, float32x4_t *a5)
{
  float v7 = *a3;
  v8 = *(float **)(a1 + 8);
  float v26 = v8[1];
  float v9 = v8[2];
  float v10 = v8[3];
  float v11 = v9 - v10;
  float v12 = v10 + (float)(*a3 * (float)(v9 - v10));
  __float2 v13 = __sincosf_stret(*a2 * 6.2832);
  *(float *)&uint64_t v14 = v13.__cosval * v12;
  float v15 = (float)(v7 * v26) + v26 * -0.5;
  *((float *)&v14 + 1) = v15;
  v16.i32[1] = 0;
  v16.i32[3] = 0;
  v16.f32[0] = -v13.__sinval;
  v16.f32[2] = -v13.__cosval;
  v17.f32[0] = v13.__cosval * v11;
  v17.f32[1] = v26;
  v17.f32[2] = -(float)(v13.__sinval * v11);
  int32x4_t v18 = (int32x4_t)vmulq_f32(v16, v16);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  float32x4_t v21 = vmulq_n_f32(v16, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  int32x4_t v22 = (int32x4_t)vmulq_f32(v17, v17);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  *a4 = v21;
  *a5 = vmulq_n_f32(v17, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  return v14;
}

void *re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70DA88;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70DA88;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::size()
{
  return 16;
}

re::internal::GeomBaseMesh *re::internal::GeomBaseMesh::GeomBaseMesh(re::internal::GeomBaseMesh *this, const re::internal::GeomBaseMesh *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (!*((void *)this + 2)) {
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  }
  re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomBaseMesh *)((char *)this + 48), (const re::internal::GeomBaseMesh *)((char *)a2 + 48));
  return this;
}

uint64_t (***re::FunctionBase<24ul,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::destroyCallable(uint64_t a1))(void)
{
  result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

re::GeomAttribute *re::anonymous namespace'::getOrAddVector3Attribute(uint64_t a1, char *a2, int a3)
{
  result = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!result)
  {
    return re::GeomMesh::addAttribute(a1, a2, a3, 7);
  }
  return result;
}

uint64_t re::anonymous namespace'::accessVector3Attribute(uint64_t a1, const char *a2)
{
  uint64_t v2 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  uint64_t v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v3, 0);
  (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  return v4;
}

uint64_t re::anonymous namespace'::modifyVector3Attribute(uint64_t a1, const char *a2)
{
  uint64_t v2 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  uint64_t v3 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return v3;
}

re::GeomAttribute *re::computeSmoothVertexNormals(re *this, re::GeomMesh *a2)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v5 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexNormal");
  if (v5
        (unint64_t v5 = (unint64_t)result) != 0))
  {
    if ((*(unsigned int (**)(unint64_t))(*(void *)v5 + 16))(v5))
    {
      float v7 = (float32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
      unsigned int v8 = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    }
    else
    {
      unsigned int v8 = 0;
      float v7 = 0;
    }
    uint64_t v9 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v4);
    unsigned int v11 = v10;
    uint64_t v12 = *(unsigned int *)(v4 + 16);
    if (v12)
    {
      uint64_t v13 = v8;
      uint64_t v14 = *(unsigned int *)(v4 + 16);
      float v15 = v7;
      while (v13)
      {
        *v15++ = 0uLL;
        --v13;
        if (!--v14) {
          goto LABEL_10;
        }
      }
      *(void *)&long long v27 = 0;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v8;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_31;
    }
LABEL_10:
    float v26 = (re::GeomAttribute *)v5;
    uint64_t v16 = *(unsigned int *)(v4 + 40);
    if (*(_DWORD *)(v4 + 40))
    {
      unint64_t v2 = 0;
      while (1)
      {
        unint64_t v5 = *(void *)(v4 + 40);
        if (v5 <= v2) {
          break;
        }
        long long v27 = *(_OWORD *)(*(void *)(v4 + 56) + 16 * v2);
        unint64_t v3 = HIDWORD(v27);
        if (HIDWORD(v27) == -1)
        {
          unint64_t v3 = v27;
          if (v8 <= v27) {
            goto LABEL_37;
          }
          v19.i64[0] = v20;
          v19.i64[1] = v21;
          v7[v27] = vaddq_f32(v7[v27], v19);
          unint64_t v3 = DWORD1(v27);
          if (v8 <= DWORD1(v27)) {
            goto LABEL_38;
          }
          v7[DWORD1(v27)] = vaddq_f32(v7[DWORD1(v27)], v19);
          unint64_t v3 = DWORD2(v27);
          if (v8 <= DWORD2(v27)) {
            goto LABEL_39;
          }
        }
        else
        {
          unint64_t v5 = v27;
          if (v8 <= v27) {
            goto LABEL_33;
          }
          v19.i64[0] = v17;
          v19.i64[1] = v18;
          v7[v27] = vaddq_f32(v7[v27], v19);
          unint64_t v5 = DWORD1(v27);
          if (v8 <= DWORD1(v27)) {
            goto LABEL_34;
          }
          v7[DWORD1(v27)] = vaddq_f32(v7[DWORD1(v27)], v19);
          unint64_t v5 = DWORD2(v27);
          if (v8 <= DWORD2(v27)) {
            goto LABEL_35;
          }
          v7[DWORD2(v27)] = vaddq_f32(v7[DWORD2(v27)], v19);
          if (v8 <= v3) {
            goto LABEL_36;
          }
        }
        v7[v3] = vaddq_f32(v19, v7[v3]);
        if (++v2 == v16) {
          goto LABEL_23;
        }
      }
LABEL_32:
      *(void *)&long long v27 = 0;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      unsigned int v8 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 797;
      __int16 v32 = 2048;
      unint64_t v33 = v2;
      __int16 v34 = 2048;
      unint64_t v35 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v5;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v5;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v5;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v3;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v3;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v3;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v3;
      __int16 v34 = 2048;
      unint64_t v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_23:
    if (v12)
    {
      uint64_t v4 = v8;
      uint64_t v22 = v8;
      result = v26;
      while (v22)
      {
        int32x4_t v23 = (int32x4_t)vmulq_f32(*v7, *v7);
        v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
        float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
        float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
        *float v7 = vmulq_n_f32(*v7, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
        ++v7;
        --v22;
        if (!--v12) {
          return result;
        }
      }
LABEL_31:
      *(void *)&long long v27 = 0;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v28 = 136315906;
      v29 = "operator[]";
      __int16 v30 = 1024;
      int v31 = 609;
      __int16 v32 = 2048;
      unint64_t v33 = v4;
      __int16 v34 = 2048;
      unint64_t v35 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_32;
    }
    return v26;
  }
  return result;
}

uint64_t re::computeSmoothFaceVaryingNormals(re *this, re::GeomMesh *a2, float a3)
{
  uint64_t v160 = *MEMORY[0x263EF8340];
  uint64_t v9 = (re *)((char *)this + 64);
  if (re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexNormal")) {
    re::internal::GeomAttributeManager::deleteAttribute(v9, "vertexNormal");
  }
  unsigned int v10 = &v123;
  uint64_t v103 = 0;
  unint64_t v11 = (unint64_t)&v108;
  unint64_t v100 = 0;
  unint64_t v101 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  int v102 = 0;
  v95[1] = 0;
  v96 = 0;
  v95[0] = 0;
  int v97 = 0;
  re::DynamicArray<re::GeomCell4>::resize(v95, *((unsigned int *)this + 10));
  uint64_t v12 = *((unsigned int *)this + 10);
  if (*((_DWORD *)this + 10))
  {
    uint64_t v13 = 0;
    unint64_t v14 = (unint64_t)v96;
    float v15 = (_DWORD *)(v98 + 12);
    do
    {
      if (v14 == v13) {
        goto LABEL_195;
      }
      *float v15 = -1;
      v15 += 4;
      ++v13;
    }
    while (v12 != v13);
  }
  uint64_t v16 = (_DWORD *)((char *)this + 16);
  unint64_t v17 = (unint64_t)(float)((float)*((unsigned int *)this + 4) * 1.3);
  if (v100 < v17) {
    re::DynamicArray<re::Quaternion<float>>::setCapacity(&v99, v17);
  }
  v124 = this;
  v125[0] = 0;
  v125[1] = 0;
  unint64_t v126 = 0;
  unint64_t v4 = (unint64_t)&v134 + 8;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  int v127 = 0;
  int v130 = 0;
  long long v131 = 0u;
  long long v132 = 0u;
  int v136 = 0;
  int v133 = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  int v139 = 0;
  int v142 = 0;
  uint64_t v144 = 0;
  uint64_t v143 = 0;
  uint64_t v145 = 0;
  int v146 = 1;
  v148 = 0;
  uint64_t v147 = 0;
  unint64_t v149 = 0;
  float v123 = cosf(a3);
  re::internal::GeomVertexConnectivity::buildVertexConnectivity((unsigned int *)this + 4, (uint64_t)&v108);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v131 + 8, (uint64_t)&v108);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v134 + 8, (uint64_t)&v113 + 8);
  uint64_t v19 = *((void *)&v137 + 1);
  if (*((void *)&v137 + 1) && *((void *)&v116 + 1) && *((void *)&v137 + 1) != *((void *)&v116 + 1))
  {
LABEL_211:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
  }
  *((void *)&v137 + 1) = *((void *)&v116 + 1);
  *((void *)&v116 + 1) = v19;
  long long v20 = v138;
  long long v138 = v117;
  long long v117 = v20;
  uint64_t v21 = v140;
  *(void *)&long long v140 = v119;
  *(void *)&long long v119 = v21;
  int v22 = ++v118;
  ++v139;
  if (v19)
  {
    if (v21)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
      int v22 = v118;
    }
    *(void *)&long long v119 = 0;
    long long v117 = 0uLL;
    *((void *)&v116 + 1) = 0;
    int v118 = v22 + 1;
  }
  if (*((void *)&v113 + 1))
  {
    if ((void)v116) {
      (*(void (**)(void))(**((void **)&v113 + 1) + 40))();
    }
    *(void *)&long long v116 = 0;
    long long v114 = 0uLL;
    *((void *)&v113 + 1) = 0;
    ++v115;
  }
  v92 = this;
  unint64_t v6 = (unint64_t)&v128 + 8;
  if (v108 && (void)v113) {
    (*(void (**)(void))(*(void *)v108 + 40))();
  }
  unint64_t v23 = *((unsigned int *)v124 + 10);
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)&v128 + 8, v23);
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v125, v23);
  uint64_t v24 = re::GeomMesh::accessVertexPositions(v124);
  if (v23)
  {
    unint64_t v3 = v24;
    unsigned int v26 = v25;
    unint64_t v4 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      unint64_t v5 = *((void *)v124 + 5);
      if (v5 <= v27) {
        goto LABEL_196;
      }
      *(_OWORD *)v105 = *(_OWORD *)(*((void *)v124 + 7) + v4);
      unint64_t v5 = v126;
      if (v126 <= v27) {
        break;
      }
      unint64_t v5 = *((void *)&v129 + 1);
      if (*((void *)&v129 + 1) <= v27) {
        goto LABEL_198;
      }
      uint64_t v28 = v128;
      uint64_t v29 = v131;
      if (*(_DWORD *)&v105[12] == -1) {
      else
      }
      __int16 v32 = (unint64_t *)(v28 + 16 * v27);
      v33.i64[0] = v30;
      v33.i64[1] = v31;
      float32x4_t v34 = vmulq_f32(v33, v33);
      *__int16 v32 = v30;
      v32[1] = v31;
      float v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0];
      if (v35 <= 0.0)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
      }
      else
      {
        float v36 = v35;
        float32x2_t v37 = vrsqrte_f32((float32x2_t)LODWORD(v35));
        float32x2_t v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v37, v37)));
        float32x4_t v41 = vmulq_n_f32(v33, vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v38, v38))).f32[0]);
        uint64_t v40 = v41.i64[1];
        uint64_t v39 = v41.i64[0];
      }
      v42 = (uint64_t *)(v29 + 16 * v27);
      uint64_t *v42 = v39;
      v42[1] = v40;
      ++v27;
      v4 += 16;
      if (v23 == v27) {
        goto LABEL_35;
      }
    }
LABEL_197:
    *(void *)v150 = 0;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)unint64_t v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v157[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v157[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v157[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v157[0].n128_u32[3] + 2) = 789;
    v157[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v157[1].n128_u64 + 4) = v27;
    v157[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v157[1].n128_u64[1] + 6) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_198:
    *(void *)v150 = 0;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)unint64_t v11 = 0u;
    unint64_t v14 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v157[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v157[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v157[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v157[0].n128_u32[3] + 2) = 789;
    v157[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v157[1].n128_u64 + 4) = v27;
    v157[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v157[1].n128_u64[1] + 6) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_199:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_200:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_201:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_202:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v4;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_205:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v3;
    __int16 v106 = 2048;
    *(void *)v107 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v11;
    __int16 v106 = 2048;
    *(void *)v107 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_207:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    uint64_t v84 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v4;
    __int16 v106 = 2048;
    *(void *)v107 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_208;
  }
LABEL_35:
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  unint64_t v110 = 0;
  uint64_t v122 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  int v111 = 0;
  int v115 = 0;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  int v118 = 0;
  int v121 = 0;
  if (*v16)
  {
    unsigned int v43 = 0;
    do
    {
      ++v111;
      ++v115;
      ++v118;
      unint64_t v110 = 0;
      *((void *)&v114 + 1) = 0;
      *((void *)&v117 + 1) = 0;
      *((void *)&v120 + 1) = 0;
      ++v121;
      re::internal::GeomVertexConnectivity::faceVertices((re::internal::GeomVertexConnectivity *)((char *)&v131 + 8), v43, (void *)&v140 + 1);
      unint64_t v44 = v149;
      unint64_t v45 = DWORD2(v141);
      if ((BYTE8(v141) & 0x3F) != 0) {
        unint64_t v46 = (DWORD2(v141) >> 6) + 1;
      }
      else {
        unint64_t v46 = DWORD2(v141) >> 6;
      }
      unint64_t v149 = DWORD2(v141);
      v157[0].n128_u64[0] = 0;
      re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v144, v46, v157);
      unsigned int v93 = v43;
      if (v45 && v44 > v45)
      {
        uint64_t v47 = v149 & 0x3F;
        if ((v149 & 0x3F) != 0)
        {
          BOOL v48 = v47 == 63;
          uint64_t v49 = -1 << v47;
          if (v48) {
            uint64_t v50 = 63;
          }
          else {
            uint64_t v50 = ~v49;
          }
        }
        else
        {
          uint64_t v50 = 63;
        }
        v51 = (int8x8_t *)&v147;
        if ((v146 & 1) == 0) {
          v51 = v148;
        }
        *(void *)&v51[v145 - 1] &= v50;
      }
      else if (!v45)
      {
        unint64_t v5 = 1;
        goto LABEL_55;
      }
      for (unint64_t i = 0; i != v45; ++i)
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)&v144, i);
      unint64_t v5 = 0;
LABEL_55:
      if (v145)
      {
        v53 = v148;
        if (v146) {
          v53 = (int8x8_t *)&v147;
        }
        v54 = &v53[v145];
        do
        {
          uint64_t v55 = 0;
          do
          {
            int8x8_t v56 = *v53++;
            uint8x8_t v57 = (uint8x8_t)vcnt_s8(v56);
            v57.i16[0] = vaddlv_u8(v57);
            v55 += v57.u32[0];
          }
          while (v53 != v54);
          if (!v55) {
            break;
          }
          if ((v5 & 1) == 0)
          {
            unint64_t v4 = 0;
            unint64_t v3 = 0;
            unint64_t v14 = 0xFFFFFFFFLL;
            float v58 = -1.0;
            while (1)
            {
              if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)&v144, v3))
              {
                unint64_t v59 = *((void *)&v141 + 1);
                if (*((void *)&v141 + 1) <= v3) {
                  goto LABEL_188;
                }
                unint64_t v59 = v126;
                unint64_t v11 = *(unsigned int *)(v143 + v4);
                if (v126 <= v11) {
                  goto LABEL_189;
                }
                float32x4_t v60 = vmulq_f32(*(float32x4_t *)(v128 + 16 * v11), *(float32x4_t *)(v128 + 16 * v11));
                float v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0];
                if (v61 <= v58) {
                  unint64_t v14 = v14;
                }
                else {
                  unint64_t v14 = v3;
                }
                if (v61 > v58) {
                  float v58 = v61;
                }
              }
              ++v3;
              v4 += 8;
              if (v45 == v3) {
                goto LABEL_74;
              }
            }
          }
          unint64_t v14 = 0xFFFFFFFFLL;
LABEL_74:
          unint64_t v3 = v14;
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v144, v14);
          unint64_t v4 = *((void *)&v141 + 1);
          if (*((void *)&v141 + 1) <= (unint64_t)v14) {
            goto LABEL_201;
          }
          re::DynamicArray<int>::add((void *)&v116 + 1, (_DWORD *)(v143 + 8 * v14));
          unint64_t v14 = *((void *)&v141 + 1);
          if (*((void *)&v141 + 1) <= v3) {
            goto LABEL_202;
          }
          re::DynamicArray<unsigned char>::add((void *)&v119 + 1, (unsigned char *)(v143 + 8 * v3 + 4));
          unint64_t v14 = *((void *)&v141 + 1);
          if (*((void *)&v141 + 1) <= v3) {
            goto LABEL_203;
          }
          unint64_t v14 = v126;
          unint64_t v4 = *(unsigned int *)(v143 + 8 * v3);
          if (v126 <= v4) {
            goto LABEL_204;
          }
          float32x4_t v94 = *(float32x4_t *)(v128 + 16 * v4);
          if ((v5 & 1) == 0)
          {
            unint64_t v14 = 0;
            unint64_t v3 = 0;
            int v62 = 1;
            while (1)
            {
              if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)&v144, v3))
              {
                LODWORD(v104) = 0;
                unint64_t v11 = *((void *)&v141 + 1);
                if (*((void *)&v141 + 1) <= v3) {
                  goto LABEL_190;
                }
                unint64_t v6 = v126;
                unint64_t v11 = *(unsigned int *)(v143 + v14);
                LODWORD(v104) = *(_DWORD *)(v143 + v14);
                if (v126 <= v4) {
                  goto LABEL_191;
                }
                float32x4_t v63 = vmulq_f32(*(float32x4_t *)(v128 + 16 * v4), *(float32x4_t *)(v128 + 16 * v4));
                if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0] > 0.0)
                {
                  if (v126 <= v11) {
                    goto LABEL_192;
                  }
                  float32x4_t v64 = vmulq_f32(*(float32x4_t *)(v128 + 16 * v11), *(float32x4_t *)(v128 + 16 * v11));
                  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0] > 0.0)
                  {
                    unint64_t v6 = *((void *)&v129 + 1);
                    if (*((void *)&v129 + 1) <= v4) {
                      goto LABEL_193;
                    }
                    if (*((void *)&v129 + 1) <= v11) {
                      goto LABEL_194;
                    }
                    float32x4_t v65 = vmulq_f32(*(float32x4_t *)(v131 + 16 * v4), *(float32x4_t *)(v131 + 16 * v11));
                    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0] >= v123)
                    {
                      re::DynamicArray<int>::add((void *)&v116 + 1, &v104);
                      unint64_t v11 = *((void *)&v141 + 1);
                      if (*((void *)&v141 + 1) <= v3) {
                        goto LABEL_205;
                      }
                      re::DynamicArray<unsigned char>::add((void *)&v119 + 1, (unsigned char *)(v143 + v14 + 4));
                      unint64_t v11 = v104;
                      unint64_t v6 = v126;
                      if (v126 <= v104) {
                        goto LABEL_206;
                      }
                      float32x4_t v94 = vaddq_f32(v94, *(float32x4_t *)(v128 + 16 * v104));
                      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v144, v3);
                      ++v62;
                    }
                  }
                }
              }
              ++v3;
              v14 += 8;
              if (v45 == v3) {
                goto LABEL_94;
              }
            }
          }
          int v62 = 1;
LABEL_94:
          int v66 = DWORD2(v114);
          if (DWORD2(v114))
          {
            unint64_t v67 = (DWORD2(v114) - 1);
            v68 = (unsigned char *)v110;
            if (v110 <= v67) {
              goto LABEL_210;
            }
            int v66 = *(_DWORD *)(v113 + 4 * v67);
          }
          v157[0].n128_u32[0] = v66 + v62;
          re::DynamicArray<int>::add(&v108, v157);
          int32x4_t v69 = (int32x4_t)vmulq_f32(v94, v94);
          v69.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1))).u32[0];
          float32x2_t v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
          float32x2_t v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
          v157[0] = (__n128)vmulq_n_f32(v94, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)((char *)&v113 + 8), v157);
          v53 = v148;
          if (v146) {
            v53 = (int8x8_t *)&v147;
          }
          v54 = &v53[v145];
        }
        while (v145);
      }
      unint64_t v14 = *((void *)&v114 + 1);
      if (DWORD2(v114))
      {
        unint64_t v3 = 0;
        while (1)
        {
          if (v14 <= v3) {
            goto LABEL_199;
          }
          int v72 = v101;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v99, (__n128 *)(v116 + 16 * v3));
          unint64_t v14 = v110;
          if (v3)
          {
            unint64_t v4 = v3 - 1;
            if (v110 <= v3 - 1) {
              goto LABEL_207;
            }
            unint64_t v73 = *(unsigned int *)(v113 + 4 * v4);
          }
          else
          {
            unint64_t v73 = 0;
          }
          if (v110 <= v3) {
            goto LABEL_200;
          }
          unint64_t v74 = *(unsigned int *)(v113 + 4 * v3);
          if (v73 < v74) {
            break;
          }
LABEL_120:
          ++v3;
          unint64_t v14 = *((void *)&v114 + 1);
          if (v3 >= DWORD2(v114)) {
            goto LABEL_121;
          }
        }
        unint64_t v14 = *((void *)&v117 + 1);
        unint64_t v4 = *((void *)&v120 + 1);
        if (*((void *)&v117 + 1) <= v73) {
          unint64_t v5 = v73;
        }
        else {
          unint64_t v5 = *((void *)&v117 + 1);
        }
        if (*((void *)&v120 + 1) <= v73) {
          unint64_t v59 = v73;
        }
        else {
          unint64_t v59 = *((void *)&v120 + 1);
        }
        v75 = (unsigned int *)(v119 + 4 * v73);
        unint64_t v11 = (unint64_t)v96;
        uint64_t v76 = v98;
        v77 = (unsigned __int8 *)(v122 + v73);
        unint64_t v78 = v74 - v73;
        unint64_t v79 = v59 - v73;
        unint64_t v80 = v5 - v73;
        while (v80)
        {
          if (!v79) {
            goto LABEL_186;
          }
          unint64_t v6 = *v75;
          if (v11 <= v6) {
            goto LABEL_187;
          }
          unsigned int v81 = *v77++;
          *(_DWORD *)(v76 + 16 * v6 + 4 * v81) = v72;
          ++v75;
          --v79;
          --v80;
          if (!--v78) {
            goto LABEL_120;
          }
        }
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v5;
        __int16 v106 = 2048;
        *(void *)v107 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_186:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v59;
        __int16 v106 = 2048;
        *(void *)v107 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_187:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v6;
        __int16 v106 = 2048;
        *(void *)v107 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_188:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v3;
        __int16 v106 = 2048;
        *(void *)v107 = v59;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_189:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v11;
        __int16 v106 = 2048;
        *(void *)v107 = v59;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_190:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 789;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v3;
        __int16 v106 = 2048;
        *(void *)v107 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_191:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 797;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v4;
        __int16 v106 = 2048;
        *(void *)v107 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_192:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 797;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v11;
        __int16 v106 = 2048;
        *(void *)v107 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_193:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 797;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v4;
        __int16 v106 = 2048;
        *(void *)v107 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_194:
        *(void *)v150 = 0;
        long long v158 = 0u;
        long long v159 = 0u;
        memset(v157, 0, sizeof(v157));
        unsigned int v10 = (float *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v105 = 136315906;
        *(void *)&v105[4] = "operator[]";
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = 797;
        *(_WORD *)&v105[18] = 2048;
        *(void *)&v105[20] = v11;
        __int16 v106 = 2048;
        *(void *)v107 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        v157[0].n128_u64[0] = 0;
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)unsigned int v10 = 0u;
        unint64_t v27 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v108) = 136315906;
        *(void *)(v11 + 4) = "operator[]";
        WORD2(v109) = 1024;
        *(_DWORD *)(v11 + 14) = 789;
        WORD1(v110) = 2048;
        *(void *)(v11 + 20) = v14;
        __int16 v112 = 2048;
        *(void *)(v11 + 30) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_196:
        *(void *)v105 = 0;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)unint64_t v11 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v157[0].n128_u32[0] = 136315906;
        *(unint64_t *)((char *)v157[0].n128_u64 + 4) = (unint64_t)"operator[]";
        v157[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&v157[0].n128_u32[3] + 2) = 797;
        v157[1].n128_u16[1] = 2048;
        *(unint64_t *)((char *)v157[1].n128_u64 + 4) = v27;
        v157[1].n128_u16[6] = 2048;
        *(unint64_t *)((char *)&v157[1].n128_u64[1] + 6) = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_197;
      }
LABEL_121:
      unsigned int v43 = v93 + 1;
    }
    while (v93 + 1 < *v16);
  }
  *(void *)&v107[2] = 0;
  memset(v105, 0, sizeof(v105));
  re::DynamicArray<float>::resize((uint64_t)v105, *((unsigned int *)v92 + 10));
  uint64_t v82 = *((unsigned int *)v92 + 10);
  if (*((_DWORD *)v92 + 10))
  {
    uint64_t v83 = 0;
    uint64_t v84 = *(void *)&v105[16];
    uint64_t v85 = *(void *)&v107[2];
    while (v84 != v83)
    {
      *(_DWORD *)(v85 + 4 * v83) = v83;
      if (v82 == ++v83) {
        goto LABEL_126;
      }
    }
LABEL_208:
    uint64_t v104 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v150 = 136315906;
    *(void *)&v150[4] = "operator[]";
    __int16 v151 = 1024;
    int v152 = 789;
    __int16 v153 = 2048;
    uint64_t v154 = v84;
    __int16 v155 = 2048;
    uint64_t v156 = v84;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_209;
  }
LABEL_126:
  uint64_t v86 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v92, "vertexNormal", 7, v101, v95, (uint64_t *)v105);
  unsigned int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 16))(v86);
  if (v87)
  {
    uint64_t v88 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v86, 0);
    unsigned int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 16))(v86);
  }
  else
  {
    uint64_t v88 = 0;
  }
  if (v101)
  {
    uint64_t v89 = 0;
    uint64_t v84 = v87;
    while (v89 != v87)
    {
      *(_OWORD *)(v88 + 16 * v89) = *(_OWORD *)(v103 + 16 * v89);
      if (v101 <= ++v89) {
        goto LABEL_133;
      }
    }
LABEL_209:
    uint64_t v104 = 0;
    v68 = v150;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    unint64_t v67 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v150 = 136315906;
    *(void *)&v150[4] = "operator[]";
    __int16 v151 = 1024;
    int v152 = 609;
    __int16 v153 = 2048;
    uint64_t v154 = v84;
    __int16 v155 = 2048;
    uint64_t v156 = v84;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_210:
    *(void *)v150 = 0;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(v157, 0, sizeof(v157));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v105 = 136315906;
    *(void *)&v105[4] = "operator[]";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 789;
    *(_WORD *)&v105[18] = 2048;
    *(void *)&v105[20] = v67;
    __int16 v106 = 2048;
    *(void *)v107 = v68;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_211;
  }
LABEL_133:
  if (*(void *)v105 && *(void *)&v107[2]) {
    (*(void (**)(void))(**(void **)v105 + 40))();
  }
  if (*((void *)&v119 + 1))
  {
    if (v122) {
      (*(void (**)(void))(**((void **)&v119 + 1) + 40))();
    }
    uint64_t v122 = 0;
    long long v120 = 0uLL;
    *((void *)&v119 + 1) = 0;
    ++v121;
  }
  if (*((void *)&v116 + 1))
  {
    if ((void)v119) {
      (*(void (**)(void))(**((void **)&v116 + 1) + 40))();
    }
    *(void *)&long long v119 = 0;
    long long v117 = 0uLL;
    *((void *)&v116 + 1) = 0;
    ++v118;
  }
  if (*((void *)&v113 + 1))
  {
    if ((void)v116) {
      (*(void (**)(void))(**((void **)&v113 + 1) + 40))();
    }
    *(void *)&long long v116 = 0;
    long long v114 = 0uLL;
    *((void *)&v113 + 1) = 0;
    ++v115;
  }
  if (v108 && (void)v113) {
    (*(void (**)(void))(*(void *)v108 + 40))();
  }
  if (v144)
  {
    int v90 = v146;
    if ((v146 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v144 + 40))();
      int v90 = v146;
    }
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    int v146 = (v90 | 1) + 2;
  }
  if (*((void *)&v140 + 1))
  {
    if (v143) {
      (*(void (**)(void))(**((void **)&v140 + 1) + 40))();
    }
    uint64_t v143 = 0;
    long long v141 = 0uLL;
    *((void *)&v140 + 1) = 0;
    ++v142;
  }
  if (*((void *)&v137 + 1))
  {
    if ((void)v140) {
      (*(void (**)(void))(**((void **)&v137 + 1) + 40))();
    }
    *(void *)&long long v140 = 0;
    long long v138 = 0uLL;
    *((void *)&v137 + 1) = 0;
    ++v139;
  }
  if (*((void *)&v134 + 1))
  {
    if ((void)v137) {
      (*(void (**)(void))(**((void **)&v134 + 1) + 40))();
    }
    *(void *)&long long v137 = 0;
    long long v135 = 0uLL;
    *((void *)&v134 + 1) = 0;
    ++v136;
  }
  if (*((void *)&v131 + 1))
  {
    if ((void)v134) {
      (*(void (**)(void))(**((void **)&v131 + 1) + 40))();
    }
    *(void *)&long long v134 = 0;
    long long v132 = 0uLL;
    *((void *)&v131 + 1) = 0;
    ++v133;
  }
  if (*((void *)&v128 + 1))
  {
    if ((void)v131) {
      (*(void (**)(void))(**((void **)&v128 + 1) + 40))();
    }
    *(void *)&long long v131 = 0;
    long long v129 = 0uLL;
    *((void *)&v128 + 1) = 0;
    ++v130;
  }
  if (v125[0] && (void)v128) {
    (*(void (**)(void))(*(void *)v125[0] + 40))();
  }
  if (v95[0] && v98) {
    (*(void (**)(void))(*(void *)v95[0] + 40))();
  }
  if (v99 && v103) {
    (*(void (**)(void))(*(void *)v99 + 40))();
  }
  return v86;
}

uint64_t re::GeomAttribute::modifyValues<re::Vector3<float>>(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 0;
  }
  uint64_t v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return v2;
}

uint64_t re::GeomAttribute::accessValues<re::Vector3<float>>(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 0;
  }
  uint64_t v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return v2;
}

uint64_t re::computeVertexTangentsAndBitangentsInternal(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v199 = *MEMORY[0x263EF8340];
  if (a2)
  {
    unint64_t v6 = a2;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 16))(a4))
    {
      unint64_t v12 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
      unint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v12 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a5 + 16))(a5))
    {
      float32x2_t v37 = (float32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
      a5 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    }
    else
    {
      a5 = 0;
      float32x2_t v37 = 0;
    }
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v38 = 0;
      uint64_t v39 = v13;
      uint64_t v26 = a5;
      while (v13 != v38)
      {
        uint64_t v40 = (void *)(v12 + 16 * v38);
        *uint64_t v40 = 0;
        v40[1] = 0;
        if (a5 == v38) {
          goto LABEL_205;
        }
        float32x4_t v41 = &v37[v38];
        v41->i64[0] = 0;
        v41->i64[1] = 0;
        if (++v38 >= (unint64_t)*(unsigned int *)(a1 + 16)) {
          goto LABEL_67;
        }
      }
      goto LABEL_204;
    }
LABEL_67:
    BOOL v42 = 0;
    if (a3 && *(unsigned char *)(a6 + 4)) {
      BOOL v42 = a3[16] == 1;
    }
    BOOL v160 = v42;
    unint64_t v7 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
    unsigned int v44 = v43;
    v161 = (int *)a6;
    uint64_t v163 = (uint64_t)a3;
    if ((*(unsigned int (**)(unint64_t))(*(void *)v6 + 16))(v6))
    {
      uint64_t v26 = re::internal::GeomTypedAttribute<double>::operator[](v6, 0);
      unsigned int v165 = (*(uint64_t (**)(unint64_t))(*(void *)v6 + 16))(v6);
    }
    else
    {
      unsigned int v165 = 0;
      uint64_t v26 = 0;
    }
    *(void *)&v185[32] = 0;
    memset(v185, 0, 28);
    unint64_t v45 = *(unsigned int *)(a1 + 16);
    v194.i32[0] = 0;
    re::DynamicArray<float>::resize(v185, v45, &v194);
    uint64_t v46 = a1;
    a6 = *(void *)(a1 + 40);
    if (!a6)
    {
LABEL_98:
      unint64_t v88 = *(unsigned int *)(a1 + 16);
      if (v88)
      {
        unint64_t v49 = 0;
        uint64_t v26 = a5;
        a6 = v13;
        do
        {
          unint64_t v6 = *(void *)&v185[16];
          if (*(void *)&v185[16] <= v49) {
            goto LABEL_206;
          }
          float v89 = *(float *)(*(void *)&v185[32] + 4 * v49);
          if (v89 > 0.0)
          {
            if (v49 >= v13) {
              goto LABEL_214;
            }
            float v90 = 1.0 / v89;
            *(float32x4_t *)(v12 + 16 * v49) = vmulq_n_f32(*(float32x4_t *)(v12 + 16 * v49), v90);
            if (v49 >= a5) {
              goto LABEL_215;
            }
            v37[v49] = vmulq_n_f32(v37[v49], v90);
            unint64_t v88 = *(unsigned int *)(a1 + 16);
          }
        }
        while (++v49 < v88);
      }
      int v91 = *v161;
      if (*v161 != 2)
      {
        if (v160)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v163 + 16))(v163))
          {
            uint64_t v26 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v163, 0);
            float32x4_t v94 = (long long *)(*(unsigned int (**)(uint64_t))(*(void *)v163 + 16))(v163);
          }
          else
          {
            float32x4_t v94 = 0;
            uint64_t v26 = 0;
          }
          uint64_t v46 = a1;
          float v123 = (long long *)*(unsigned int *)(a1 + 16);
          if (v123)
          {
            v124 = 0;
            a6 = v13;
            unint64_t v6 = a5;
            while ((long long *)v13 != v124)
            {
              if (v94 == v124) {
                goto LABEL_224;
              }
              float32x4_t v125 = *(float32x4_t *)(v12 + 16 * (void)v124);
              float32x4_t v126 = *(float32x4_t *)(v26 + 16 * (void)v124);
              float32x4_t v127 = vmulq_f32(v125, v126);
              *(float32x4_t *)(v12 + 16 * (void)v124) = vsubq_f32(v125, vmulq_n_f32(v126, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0]));
              if ((long long *)a5 == v124) {
                goto LABEL_225;
              }
              float32x4_t v128 = v37[(void)v124];
              float32x4_t v129 = *(float32x4_t *)(v26 + 16 * (void)v124);
              float32x4_t v130 = vmulq_f32(v128, v129);
              v37[(void)v124] = vsubq_f32(v128, vmulq_n_f32(v129, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).f32[0]));
              v124 = (long long *)((char *)v124 + 1);
              if (v123 == v124) {
                goto LABEL_185;
              }
            }
            goto LABEL_222;
          }
LABEL_185:
          int v91 = *v161;
        }
        if (v91 == 1)
        {
          uint64_t v131 = *(unsigned int *)(v46 + 16);
          if (v131)
          {
            unint64_t v19 = v13;
            unint64_t v13 = a5;
            unint64_t v132 = v19;
            uint64_t v133 = a5;
            while (v132)
            {
              float32x4_t v134 = *(float32x4_t *)v12;
              float32x4_t v135 = vmulq_f32(v134, v134);
              LODWORD(v136) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).u32[0];
              if (fabsf(v136) < 1.0e-10)
              {
                uint64_t v140 = 0;
                uint64_t v141 = 0;
              }
              else
              {
                float v137 = v136;
                float32x2_t v138 = vrsqrte_f32((float32x2_t)LODWORD(v136));
                float32x2_t v139 = vmul_f32(v138, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v138, v138)));
                float32x4_t v142 = vmulq_n_f32(v134, vmul_f32(v139, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v139, v139))).f32[0]);
                uint64_t v141 = v142.i64[1];
                uint64_t v140 = v142.i64[0];
              }
              *(void *)unint64_t v12 = v140;
              *(void *)(v12 + 8) = v141;
              if (!v133) {
                goto LABEL_223;
              }
              float32x4_t v143 = *v37;
              float32x4_t v144 = vmulq_f32(v143, v143);
              LODWORD(v145) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).u32[0];
              if (fabsf(v145) < 1.0e-10)
              {
                uint64_t v149 = 0;
                uint64_t v150 = 0;
              }
              else
              {
                float v146 = v145;
                float32x2_t v147 = vrsqrte_f32((float32x2_t)LODWORD(v145));
                float32x2_t v148 = vmul_f32(v147, vrsqrts_f32((float32x2_t)LODWORD(v146), vmul_f32(v147, v147)));
                float32x4_t v151 = vmulq_n_f32(v143, vmul_f32(v148, vrsqrts_f32((float32x2_t)LODWORD(v146), vmul_f32(v148, v148))).f32[0]);
                uint64_t v150 = v151.i64[1];
                uint64_t v149 = v151.i64[0];
              }
              v37->i64[0] = v149;
              v37->i64[1] = v150;
              ++v37;
              --v133;
              v12 += 16;
              --v132;
              if (!--v131) {
                goto LABEL_198;
              }
            }
            goto LABEL_221;
          }
        }
LABEL_198:
        uint64_t v115 = *(void *)v185;
        if (!*(void *)v185) {
          return 1;
        }
        uint64_t v116 = *(void *)&v185[32];
        if (!*(void *)&v185[32]) {
          return 1;
        }
        goto LABEL_200;
      }
      if (v163)
      {
        int v92 = (*(uint64_t (**)(uint64_t))(*(void *)v163 + 16))(v163);
        if (v92)
        {
          unsigned int v93 = (int32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v163, 0);
          int v92 = (*(uint64_t (**)(uint64_t))(*(void *)v163 + 16))(v163);
        }
        else
        {
          unsigned int v93 = 0;
        }
LABEL_167:
        if (v13 == v92)
        {
          if (v13)
          {
            unint64_t v13 = v13;
            unint64_t v19 = a5;
            a5 = a5;
            while (a5)
            {
              v12 += 16;
              ++v93;
              --a5;
              if (!--v13) {
                goto LABEL_198;
              }
            }
            goto LABEL_219;
          }
        }
        else if (v13)
        {
          uint64_t v117 = v13;
          unint64_t v19 = a5;
          unint64_t v13 = a5;
          while (v13)
          {
            a5 = v12 + 16;
            uint64_t v26 = (uint64_t)&v37[1];
            float32x4_t v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v37, *(int32x4_t *)v37), *(int8x16_t *)v37, 0xCuLL), vnegq_f32(*(float32x4_t *)v12)), *v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v12, *(int32x4_t *)v12), *(int8x16_t *)v12, 0xCuLL));
            float32x4_t v119 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL);
            int32x4_t v120 = (int32x4_t)vmulq_f32(v118, v118);
            v120.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v120, 2), *(float32x2_t *)v120.i8)).u32[0];
            float32x2_t v121 = vrsqrte_f32((float32x2_t)v120.u32[0]);
            float32x2_t v122 = vmul_f32(v121, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v121, v121)));
            float32x4_t v194 = vmulq_n_f32(v119, vmul_f32(v122, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v122, v122))).f32[0]);
            --v13;
            v12 += 16;
            ++v37;
            if (!--v117) {
              goto LABEL_198;
            }
          }
          goto LABEL_220;
        }
        goto LABEL_198;
      }
LABEL_116:
      unsigned int v93 = 0;
      int v92 = -1;
      goto LABEL_167;
    }
    unsigned int v47 = v44;
    unint64_t v48 = v7;
    unint64_t v49 = 0;
LABEL_75:
    if (a6 <= v49) {
      goto LABEL_207;
    }
    long long v178 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * v49);
    uint64_t v50 = v178;
    if (v178 >= v47) {
      goto LABEL_208;
    }
    a6 = DWORD1(v178);
    if (DWORD1(v178) >= v47) {
      goto LABEL_209;
    }
    unint64_t v6 = DWORD2(v178);
    if (DWORD2(v178) >= v47) {
      goto LABEL_210;
    }
    unsigned int v51 = v165;
    if (v165 <= v178) {
      goto LABEL_211;
    }
    if (v165 <= DWORD1(v178)) {
      goto LABEL_212;
    }
    if (v165 <= DWORD2(v178)) {
      goto LABEL_213;
    }
    unint64_t v7 = HIDWORD(v178);
    if (HIDWORD(v178) == -1)
    {
      float32x4_t v73 = *(float32x4_t *)(v48 + 16 * v178);
      float32x4_t v74 = vsubq_f32(*(float32x4_t *)(v48 + 16 * DWORD1(v178)), v73);
      float32x4_t v75 = vsubq_f32(*(float32x4_t *)(v48 + 16 * DWORD2(v178)), v73);
      float32x4_t v76 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), vnegq_f32(v74)), v75, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL));
      float32x4_t v77 = vmulq_f32(v76, v76);
      float32x2_t v81 = *(float32x2_t *)(v26 + 8 * DWORD1(v178));
      float32x2_t v78 = *(float32x2_t *)(v26 + 8 * v178);
      float v61 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), v77)).f32[0]);
      float32x2_t v79 = vsub_f32(v81, v78);
      float32x2_t v80 = vsub_f32(*(float32x2_t *)(v26 + 8 * DWORD2(v178)), v78);
      v81.f32[0] = vmlas_n_f32((float)-v79.f32[1] * v80.f32[0], v80.f32[1], v79.f32[0]);
      if ((float)(v81.f32[0] * v81.f32[0]) > 0.0)
      {
        float32x4_t v82 = (float32x4_t)vdupq_lane_s32((int32x2_t)v81, 0);
        float32x4_t v70 = vdivq_f32(vsubq_f32(vmulq_lane_f32(v74, v80, 1), vmulq_lane_f32(v75, v79, 1)), v82);
        float32x4_t v71 = vdivq_f32(vsubq_f32(vmulq_n_f32(v75, v79.f32[0]), vmulq_n_f32(v74, v80.f32[0])), v82);
        uint64_t v72 = 3;
        goto LABEL_92;
      }
      float32x4_t v71 = 0uLL;
      uint64_t v72 = 3;
    }
    else
    {
      if (HIDWORD(v178) >= v47) {
        goto LABEL_216;
      }
      if (v165 <= HIDWORD(v178)) {
        goto LABEL_217;
      }
      float32x4_t v52 = *(float32x4_t *)(v48 + 16 * HIDWORD(v178));
      float32x4_t v53 = *(float32x4_t *)(v48 + 16 * DWORD1(v178));
      float32x4_t v54 = vsubq_f32(v52, v53);
      float32x4_t v55 = *(float32x4_t *)(v48 + 16 * DWORD2(v178));
      float32x4_t v56 = *(float32x4_t *)(v48 + 16 * v178);
      float32x4_t v57 = vsubq_f32(v55, v56);
      float32x4_t v58 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), vnegq_f32(v54)), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
      float32x4_t v59 = vmulq_f32(v58, v58);
      float32x2_t v60 = *(float32x2_t *)(v26 + 8 * v178);
      float32x2_t v66 = *(float32x2_t *)(v26 + 8 * DWORD1(v178));
      float v61 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), v59)).f32[0]);
      float32x2_t v62 = *(float32x2_t *)(v26 + 8 * DWORD2(v178));
      float32x2_t v63 = *(float32x2_t *)(v26 + 8 * HIDWORD(v178));
      float32x2_t v64 = vsub_f32(vadd_f32(vsub_f32(v66, v60), v62), v63);
      float32x2_t v65 = vsub_f32(vadd_f32(v62, vsub_f32(v63, v60)), v66);
      v66.f32[0] = vmlas_n_f32((float)-v64.f32[1] * v65.f32[0], v65.f32[1], v64.f32[0]);
      if ((float)(v66.f32[0] * v66.f32[0]) > 0.0)
      {
        float32x4_t v67 = vsubq_f32(vaddq_f32(v55, vsubq_f32(v52, v56)), v53);
        float32x4_t v68 = vsubq_f32(vaddq_f32(v55, vsubq_f32(v53, v56)), v52);
        float32x4_t v69 = (float32x4_t)vdupq_lane_s32((int32x2_t)v66, 0);
        float32x4_t v70 = vdivq_f32(vsubq_f32(vmulq_lane_f32(v68, v65, 1), vmulq_lane_f32(v67, v64, 1)), v69);
        float32x4_t v71 = vdivq_f32(vsubq_f32(vmulq_n_f32(v67, v64.f32[0]), vmulq_n_f32(v68, v65.f32[0])), v69);
        uint64_t v72 = 4;
        goto LABEL_92;
      }
      float32x4_t v71 = 0uLL;
      uint64_t v72 = 4;
    }
    float32x4_t v70 = 0uLL;
LABEL_92:
    uint64_t v83 = 0;
    float v84 = v61 * 0.5;
    float32x4_t v85 = vmulq_n_f32(v70, v84);
    float32x4_t v86 = vmulq_n_f32(v71, v84);
    uint64_t v87 = 4 * v72;
    while (1)
    {
      a6 = *(unsigned int *)((char *)&v178 + v83);
      unint64_t v6 = *(void *)&v185[16];
      if (*(void *)&v185[16] <= a6) {
        break;
      }
      *(float *)(*(void *)&v185[32] + 4 * a6) = v84 + *(float *)(*(void *)&v185[32] + 4 * a6);
      if (v13 <= a6) {
        goto LABEL_114;
      }
      *(float32x4_t *)(v12 + 16 * a6) = vaddq_f32(v85, *(float32x4_t *)(v12 + 16 * a6));
      if (a5 <= a6) {
        goto LABEL_115;
      }
      v37[a6] = vaddq_f32(v86, v37[a6]);
      v83 += 4;
      if (v87 == v83)
      {
        ++v49;
        a6 = *(void *)(a1 + 40);
        if (v49 >= a6) {
          goto LABEL_98;
        }
        goto LABEL_75;
      }
    }
    v170[0] = 0;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    float32x4_t v194 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(void *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 789;
    *(_WORD *)&v182[18] = 2048;
    *(void *)&v182[20] = a6;
    __int16 v183 = 2048;
    *(void *)v184 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v170[0] = 0;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    float32x4_t v194 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(void *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 609;
    *(_WORD *)&v182[18] = 2048;
    *(void *)&v182[20] = a6;
    __int16 v183 = 2048;
    *(void *)v184 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v170[0] = 0;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    float32x4_t v194 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(void *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 609;
    *(_WORD *)&v182[18] = 2048;
    *(void *)&v182[20] = a6;
    __int16 v183 = 2048;
    *(void *)v184 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  if (!a3 || a3[16] != 1) {
    return 0;
  }
  *(void *)v185 = 0;
  *(void *)&v185[8] = 0;
  *(_DWORD *)&v185[16] = 1;
  *(void *)&v185[24] = 0;
  *(void *)&v185[32] = 0;
  unint64_t v14 = *(unsigned int *)(a1 + 16);
  if ((v14 & 0x3F) != 0) {
    unint64_t v15 = (v14 >> 6) + 1;
  }
  else {
    unint64_t v15 = v14 >> 6;
  }
  uint64_t v186 = *(unsigned int *)(a1 + 16);
  v194.i64[0] = 0;
  re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v185, v15, &v194);
  unint64_t v16 = a1;
  if (*(_DWORD *)(a1 + 16))
  {
    unint64_t v17 = 0;
    unint64_t v16 = a1;
    do
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v185, v17++);
    while (v17 < *(unsigned int *)(a1 + 16));
  }
  *(void *)&v184[2] = 0;
  memset(v182, 0, sizeof(v182));
  uint64_t v181 = 0;
  unint64_t v179 = 0;
  long long v178 = 0uLL;
  int v180 = 0;
  re::computeVertexFaceConnectivity(v16, (uint64_t)v182, (unint64_t)&v178);
  uint64_t v173 = 0;
  v170[1] = 0;
  unint64_t v171 = 0;
  v170[0] = 0;
  int v172 = 0;
  re::DynamicArray<float>::resize((uint64_t)v170, *(unsigned int *)(v16 + 16));
  uint64_t v169 = 0;
  v166[1] = 0;
  unint64_t v167 = 0;
  v166[0] = 0;
  int v168 = 0;
  uint64_t v18 = *(void *)&v185[8];
  if ((*(void *)&v185[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    unint64_t v19 = (unint64_t)&v185[24];
    long long v20 = *(unsigned char **)&v185[32];
    if (v185[16]) {
      long long v20 = &v185[24];
    }
    a6 = 2139095040;
    do
    {
      uint64_t v21 = 0;
      while (1)
      {
        unint64_t v23 = *(void *)v20;
        v20 += 8;
        unint64_t v22 = v23;
        if (v23) {
          break;
        }
        v21 -= 64;
        if (!--v18) {
          goto LABEL_55;
        }
      }
      unint64_t v24 = __clz(__rbit64(v22));
      if (v24 + 1 == v21) {
        break;
      }
      unint64_t v13 = v24 - v21;
      unint64_t v12 = 0xFFFFFFFFLL;
      unsigned int v25 = -1;
      do
      {
        uint64_t v26 = v13;
        unint64_t v6 = v179;
        if (v179 <= v13) {
          goto LABEL_218;
        }
        if (v13)
        {
          unint64_t v7 = (v13 - 1);
          if (v179 <= v7) {
            goto LABEL_230;
          }
          int v27 = *(_DWORD *)(v181 + 4 * v7);
        }
        else
        {
          int v27 = 0;
        }
        unsigned int v28 = *(_DWORD *)(v181 + 4 * v13) - v27;
        if (v28)
        {
          if (v12 == -1 || v28 < v25)
          {
            unsigned int v25 = v28;
            unint64_t v12 = v13;
          }
          else
          {
            unint64_t v12 = v12;
          }
        }
        else
        {
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v13);
        }
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v185, v13 + 1);
        unint64_t v13 = FirstBitSet;
      }
      while (v25 >= 2 && FirstBitSet != -1);
      if (v12 == -1) {
        break;
      }
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v12);
      v194.i64[0] = *(void *)&v184[2];
      v194.i64[1] = *(void *)&v182[16];
      *(void *)v175 = v181;
      *(void *)&v175[8] = v179;
      re::computeManhattanDistanceToVertex(a1, v12, &v194, v175, (uint64_t)v166);
      unint64_t v13 = v167;
      if (v167)
      {
        unint64_t v12 = 0;
        unsigned int v33 = 1;
        uint64_t v34 = v169;
        do
        {
          if (*(float *)(v34 + 4 * v12) != INFINITY)
          {
            re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v12);
            unint64_t v13 = v167;
            if (v167 <= v12) {
              goto LABEL_232;
            }
            uint64_t v26 = v171;
            if (v171 <= v12)
            {
LABEL_233:
              *(void *)v187 = 0;
              long long v197 = 0u;
              long long v198 = 0u;
              long long v195 = 0u;
              long long v196 = 0u;
              float32x4_t v194 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v175 = 136315906;
              *(void *)&v175[4] = "operator[]";
              *(_WORD *)&v175[12] = 1024;
              *(_DWORD *)&v175[14] = 789;
              *(_WORD *)&v175[18] = 2048;
              *(void *)&v175[20] = v12;
              __int16 v176 = 2048;
              *(void *)v177 = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            uint64_t v34 = v169;
            *(_DWORD *)(v173 + 4 * v12) = *(_DWORD *)(v169 + 4 * v12);
          }
          unint64_t v12 = v33;
        }
        while (v13 > v33++);
      }
      long long v20 = (v185[16] & 1) != 0 ? &v185[24] : *(unsigned char **)&v185[32];
      uint64_t v18 = *(void *)&v185[8];
    }
    while ((*(void *)&v185[8] & 0x3FFFFFFFFFFFFFFLL) != 0);
  }
LABEL_55:
  *(void *)&v177[2] = 0;
  memset(v175, 0, sizeof(v175));
  v194.i64[0] = v173;
  v194.i64[1] = v171;
  re::computeGradientField((unint64_t *)a1, &v194, (uint64_t)v175);
  if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)a3 + 16))(a3))
  {
    unint64_t v12 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a3, 0);
    LODWORD(v13) = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a3 + 16))(a3);
  }
  else
  {
    LODWORD(v13) = 0;
    unint64_t v12 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 16))(a4))
  {
    uint64_t v95 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
    LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  }
  else
  {
    LODWORD(v26) = 0;
    uint64_t v95 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a5 + 16))(a5))
  {
    uint64_t v96 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
    a5 = (*(unsigned int (**)(uint64_t))(*(void *)a5 + 16))(a5);
  }
  else
  {
    a5 = 0;
    uint64_t v96 = 0;
  }
  if (*(_DWORD *)(a1 + 16))
  {
    a6 = 0;
    unint64_t v13 = v13;
    uint64_t v26 = v26;
    while (1)
    {
      if (a6 == v13) {
        goto LABEL_226;
      }
      if (a6 == v26) {
        goto LABEL_227;
      }
      if (a6 == a5) {
        goto LABEL_228;
      }
      int v97 = (void *)(v95 + 16 * a6);
      *int v97 = 0;
      v97[1] = 0;
      unint64_t v6 = v179;
      if (a6)
      {
        unint64_t v7 = a6 - 1;
        if (v179 <= a6 - 1) {
          goto LABEL_231;
        }
        unint64_t v7 = *(unsigned int *)(v181 + 4 * v7);
      }
      else
      {
        unint64_t v7 = 0;
      }
      if (v179 <= a6) {
        goto LABEL_229;
      }
      unint64_t v98 = *(unsigned int *)(v181 + 4 * a6);
      float32x4_t v99 = 0uLL;
      if (v7 < v98)
      {
        while (1)
        {
          unint64_t v6 = *(void *)&v182[16];
          if (*(void *)&v182[16] <= v7) {
            break;
          }
          unint64_t v6 = *(unsigned int *)(*(void *)&v184[2] + 4 * v7);
          unint64_t v100 = *(void *)&v175[16];
          if (*(void *)&v175[16] <= v6) {
            goto LABEL_203;
          }
          float32x4_t v99 = vaddq_f32(v99, *(float32x4_t *)(*(void *)&v177[2] + 16 * v6));
          *(float32x4_t *)(v95 + 16 * a6) = v99;
          if (v98 == ++v7) {
            goto LABEL_138;
          }
        }
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unint64_t v100 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 789;
        __int16 v190 = 2048;
        unint64_t v191 = v7;
        __int16 v192 = 2048;
        unint64_t v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_203:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        uint64_t v39 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 789;
        __int16 v190 = 2048;
        unint64_t v191 = v6;
        __int16 v192 = 2048;
        unint64_t v193 = v100;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_204:
        *(void *)v182 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v185 = 136315906;
        *(void *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 609;
        *(_WORD *)&v185[18] = 2048;
        *(void *)&v185[20] = v39;
        *(_WORD *)&v185[28] = 2048;
        *(void *)&v185[30] = v39;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_205:
        *(void *)v182 = 0;
        unint64_t v49 = (unint64_t)&v178;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v185 = 136315906;
        *(void *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 609;
        *(_WORD *)&v185[18] = 2048;
        *(void *)&v185[20] = v26;
        *(_WORD *)&v185[28] = 2048;
        *(void *)&v185[30] = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_206:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 789;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v49;
        __int16 v183 = 2048;
        *(void *)v184 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_207:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        uint64_t v50 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 797;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v49;
        __int16 v183 = 2048;
        *(void *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_208:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v152 = v47;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v50;
        __int16 v183 = 2048;
        *(void *)v184 = v152;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_209:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v153 = v47;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = a6;
        __int16 v183 = 2048;
        *(void *)v184 = v153;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_210:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        uint64_t v50 = &_os_log_internal;
        unsigned int v154 = v47;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v6;
        __int16 v183 = 2048;
        *(void *)v184 = v154;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_211:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v155 = v51;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v50;
        __int16 v183 = 2048;
        *(void *)v184 = v155;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_212:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v156 = v51;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = a6;
        __int16 v183 = 2048;
        *(void *)v184 = v156;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_213:
        v170[0] = 0;
        unint64_t v49 = (unint64_t)&v178;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v157 = v51;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v6;
        __int16 v183 = 2048;
        *(void *)v184 = v157;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_214:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v49;
        __int16 v183 = 2048;
        *(void *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_215:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v49;
        __int16 v183 = 2048;
        *(void *)v184 = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_216:
        v170[0] = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v158 = v47;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v7;
        __int16 v183 = 2048;
        *(void *)v184 = v158;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_217:
        v170[0] = 0;
        unint64_t v19 = (unint64_t)&v178;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        unsigned int v159 = v51;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v7;
        __int16 v183 = 2048;
        *(void *)v184 = v159;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_218:
        *(void *)v187 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)&v175[20] = v26;
        __int16 v176 = 2048;
        *(void *)v177 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_219:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v19;
        __int16 v183 = 2048;
        *(void *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_220:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v19;
        __int16 v183 = 2048;
        *(void *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_221:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v19;
        __int16 v183 = 2048;
        *(void *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_222:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = a6;
        __int16 v183 = 2048;
        *(void *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_223:
        *(void *)&long long v178 = 0;
        float32x4_t v94 = &v178;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v13;
        __int16 v183 = 2048;
        *(void *)v184 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_224:
        *(void *)&long long v178 = 0;
        unint64_t v12 = (unint64_t)&v178;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v94;
        __int16 v183 = 2048;
        *(void *)v184 = v94;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_225:
        *(void *)&long long v178 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(void *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(void *)&v182[20] = v6;
        __int16 v183 = 2048;
        *(void *)v184 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_226:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 601;
        __int16 v190 = 2048;
        unint64_t v191 = v13;
        __int16 v192 = 2048;
        unint64_t v193 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_227:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 609;
        __int16 v190 = 2048;
        unint64_t v191 = v26;
        __int16 v192 = 2048;
        unint64_t v193 = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_228:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 609;
        __int16 v190 = 2048;
        unint64_t v191 = a5;
        __int16 v192 = 2048;
        unint64_t v193 = a5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_229:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 789;
        __int16 v190 = 2048;
        unint64_t v191 = a6;
        __int16 v192 = 2048;
        unint64_t v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_230:
        *(void *)v187 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)&v175[20] = v7;
        __int16 v176 = 2048;
        *(void *)v177 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_231:
        uint64_t v174 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(void *)&v187[4] = "operator[]";
        __int16 v188 = 1024;
        int v189 = 789;
        __int16 v190 = 2048;
        unint64_t v191 = v7;
        __int16 v192 = 2048;
        unint64_t v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_232:
        *(void *)v187 = 0;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        float32x4_t v194 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(void *)&v175[20] = v12;
        __int16 v176 = 2048;
        *(void *)v177 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_233;
      }
LABEL_138:
      float32x4_t v101 = *(float32x4_t *)(v12 + 16 * a6);
      float32x4_t v102 = vmulq_f32(v99, v101);
      float32x4_t v103 = vsubq_f32(v99, vmulq_n_f32(v101, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1))).f32[0]));
      *(float32x4_t *)(v95 + 16 * a6) = v103;
      float32x4_t v104 = vmulq_f32(v103, v103);
      float v105 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]);
      if (v105 > 0.00001) {
        break;
      }
      float32x4_t v107 = *(float32x4_t *)(v12 + 16 * a6);
      float32x4_t v108 = vmulq_f32(v107, v107);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0] > 0.0)
      {
        if (fabsf(v107.f32[2]) >= 0.00001)
        {
          v103.i32[0] = 0;
          v103.f32[1] = -v107.f32[2];
          v103.i64[1] = v107.u32[1];
        }
        else
        {
          float32x4_t v103 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v107.f32[1]), (int32x4_t)v107);
        }
        int32x4_t v111 = (int32x4_t)vmulq_f32(v103, v103);
        v111.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1))).u32[0];
        float32x2_t v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
        float32x2_t v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
        LODWORD(v106) = vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).u32[0];
        goto LABEL_146;
      }
      uint64_t v109 = (void *)(v95 + 16 * a6);
      *uint64_t v109 = 0;
      v109[1] = 0;
      float32x4_t v110 = 0uLL;
LABEL_147:
      int8x16_t v114 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL), vnegq_f32(*(float32x4_t *)(v12 + 16 * a6))), v110, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v12 + 16 * a6), *(int32x4_t *)(v12 + 16 * a6)), *(int8x16_t *)(v12 + 16 * a6), 0xCuLL));
      *(int8x16_t *)(v96 + 16 * a6++) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), v114, 0xCuLL);
      if (a6 >= *(unsigned int *)(a1 + 16)) {
        goto LABEL_148;
      }
    }
    float v106 = 1.0 / v105;
LABEL_146:
    float32x4_t v110 = vmulq_n_f32(v103, v106);
    *(float32x4_t *)(v95 + 16 * a6) = v110;
    goto LABEL_147;
  }
LABEL_148:
  if (*(void *)v175 && *(void *)&v177[2]) {
    (*(void (**)(void))(**(void **)v175 + 40))();
  }
  if (v166[0] && v169) {
    (*(void (**)(void))(*(void *)v166[0] + 40))();
  }
  if (v170[0] && v173) {
    (*(void (**)(void))(*(void *)v170[0] + 40))();
  }
  if ((void)v178 && v181) {
    (*(void (**)(void))(*(void *)v178 + 40))();
  }
  if (*(void *)v182 && *(void *)&v184[2]) {
    (*(void (**)(void))(**(void **)v182 + 40))();
  }
  uint64_t v115 = *(void *)v185;
  if (!*(void *)v185 || (v185[16] & 1) != 0) {
    return 1;
  }
  uint64_t v116 = *(void *)&v185[32];
LABEL_200:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v115 + 40))(v115, v116);
  return 1;
}

uint64_t re::computeTangentsAndBitangents(unsigned int *a1, const char *a2, char *a3, char *a4, char *a5, unint64_t a6)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  float32x2_t v66 = a2;
  float32x2_t v65 = a5;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64, 4522, a1[4]);
  if (a2 && a3 && !strcmp(a2, a3)
    || a2 && a4 && !strcmp(a2, a4)
    || a2 && a5 && !strcmp(a2, a5)
    || a3 && a4 && !strcmp(a3, a4)
    || a3 && a5 && !strcmp(a3, a5)
    || a4 && a5 && !strcmp(a4, a5)
    || re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), a3)
    || re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), a4))
  {
    uint64_t v12 = 0;
    goto LABEL_22;
  }
  if (v66) {
    unint64_t v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), v66);
  }
  else {
    unint64_t v14 = 0;
  }
  if (v65) {
    unint64_t v15 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), v65);
  }
  else {
    unint64_t v15 = 0;
  }
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  v60[0] = 0;
  v60[1] = 0;
  int v62 = 0;
  if (v14 && *(unsigned char *)(v14 + 16) == 3) {
    re::DynamicArray<re::TransitionCondition *>::add(v60, &v66);
  }
  if (v15)
  {
    if (v15[16] == 3) {
      re::DynamicArray<re::TransitionCondition *>::add(v60, &v65);
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (!v14 || *(unsigned char *)(a6 + 4)) {
      goto LABEL_62;
    }
  }
  if (v61)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)v55, 0);
    re::internal::buildMeshByConvertingFaceVaryingToVertexHelper((unint64_t)a1, (uint64_t)v60, 0, (unint64_t)v55);
    if (v15) {
      unint64_t v16 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v59, v65);
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v19 = (uint64_t)re::GeomMesh::addAttribute((uint64_t)v55, a3, 1, 7);
    uint64_t v20 = (uint64_t)re::GeomMesh::addAttribute((uint64_t)v55, a4, 1, 7);
    unint64_t v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v59, v66);
    re::computeVertexTangentsAndBitangentsInternal((uint64_t)v55, v21, v16, v19, v20, a6);
    unint64_t v22 = a1[10];
    uint64_t v54 = 0;
    v51[1] = 0;
    uint64_t v52 = 0;
    uint64_t v50 = 0;
    v51[0] = 0;
    int v53 = 0;
    v47[1] = 0;
    uint64_t v48 = 0;
    v47[0] = 0;
    int v49 = 0;
    re::DynamicArray<re::GeomCell4>::resize(v51, v22);
    re::DynamicArray<float>::resize((uint64_t)v47, v22);
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v48;
      uint64_t v25 = v50;
      uint64_t v26 = v57;
      uint64_t v27 = v58;
      uint64_t v28 = v52;
      uint64_t v29 = v54;
      while (v24 != v23)
      {
        *(_DWORD *)(v25 + 4 * v23) = v23;
        if (v26 == v23) {
          goto LABEL_66;
        }
        if (v28 == v23) {
          goto LABEL_67;
        }
        *(_OWORD *)(v29 + 16 * v23) = *(_OWORD *)(v27 + 16 * v23);
        if (v22 == ++v23) {
          goto LABEL_48;
        }
      }
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 789;
      __int16 v72 = 2048;
      uint64_t v73 = v24;
      __int16 v74 = 2048;
      uint64_t v75 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 797;
      __int16 v72 = 2048;
      uint64_t v73 = v26;
      __int16 v74 = 2048;
      uint64_t v75 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 789;
      __int16 v72 = 2048;
      uint64_t v73 = v28;
      __int16 v74 = 2048;
      uint64_t v75 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 601;
      __int16 v72 = 2048;
      uint64_t v73 = v19;
      __int16 v74 = 2048;
      uint64_t v75 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 609;
      __int16 v72 = 2048;
      uint64_t v73 = v20;
      __int16 v74 = 2048;
      uint64_t v75 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 601;
      __int16 v72 = 2048;
      uint64_t v73 = v24;
      __int16 v74 = 2048;
      uint64_t v75 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      uint64_t v67 = 0;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v68 = 136315906;
      float32x4_t v69 = "operator[]";
      __int16 v70 = 1024;
      int v71 = 609;
      __int16 v72 = 2048;
      uint64_t v73 = v26;
      __int16 v74 = 2048;
      uint64_t v75 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_48:
    uint64_t v30 = v56;
    uint64_t v31 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)a1, a3, 7, v56, v51, v47);
    uint64_t v32 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)a1, a4, 7, v30, v51, v47);
    unsigned int v33 = (_OWORD *)re::GeomAttribute::modifyValues<re::Vector3<float>>(v31);
    unsigned int v35 = v34;
    float v36 = (_OWORD *)re::GeomAttribute::modifyValues<re::Vector3<float>>(v32);
    LODWORD(v26) = v37;
    uint64_t v38 = (_OWORD *)re::GeomAttribute::accessValues<re::Vector3<float>>(v19);
    LODWORD(v19) = v39;
    uint64_t v40 = (long long *)re::GeomAttribute::accessValues<re::Vector3<float>>(v20);
    if (v30)
    {
      uint64_t v19 = v19;
      uint64_t v20 = v35;
      uint64_t v24 = v41;
      uint64_t v26 = v26;
      uint64_t v42 = v19;
      uint64_t v43 = v20;
      uint64_t v44 = v41;
      uint64_t v45 = v26;
      while (v42)
      {
        if (!v43) {
          goto LABEL_69;
        }
        *unsigned int v33 = *v38;
        if (!v44) {
          goto LABEL_70;
        }
        if (!v45) {
          goto LABEL_71;
        }
        long long v46 = *v40++;
        *v36++ = v46;
        --v45;
        ++v38;
        ++v33;
        --v44;
        --v43;
        --v42;
        if (!--v30) {
          goto LABEL_55;
        }
      }
      goto LABEL_68;
    }
LABEL_55:
    if (v47[0] && v50) {
      (*(void (**)(void))(*(void *)v47[0] + 40))();
    }
    if (v51[0] && v54) {
      (*(void (**)(void))(*(void *)v51[0] + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v55);
    uint64_t v12 = 1;
  }
  else
  {
    unint64_t v17 = re::GeomMesh::addAttribute((uint64_t)a1, a3, 1, 7);
    uint64_t v18 = re::GeomMesh::addAttribute((uint64_t)a1, a4, 1, 7);
    uint64_t v12 = re::computeVertexTangentsAndBitangentsInternal((uint64_t)a1, v14, v15, (uint64_t)v17, (uint64_t)v18, a6);
  }
LABEL_62:
  if (v60[0] && v63) {
    (*(void (**)(void))(*(void *)v60[0] + 40))();
  }
LABEL_22:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64);
  return v12;
}

unint64_t re::anonymous namespace'::evalAreaWeightedTriangleNormal(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if (v3 >= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = a3[1];
  if (v4 >= a2)
  {
LABEL_6:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = a3[2];
  if (v5 >= a2) {
    goto LABEL_7;
  }
  float32x4_t v6 = *(float32x4_t *)(a1 + 16 * v3);
  float32x4_t v7 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v4), v6);
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v5), v6);
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v7)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v8);
  return vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL).u64[0];
}

unint64_t re::anonymous namespace'::evalAreaWeightedQuadrilateralNormal(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if (v3 >= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = a3[1];
  if (v4 >= a2)
  {
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = a3[2];
  if (v5 >= a2)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = a3[3];
  if (v6 >= a2) {
    goto LABEL_9;
  }
  float32x4_t v7 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v5), *(float32x4_t *)(a1 + 16 * v3));
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v6), *(float32x4_t *)(a1 + 16 * v4));
  float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v7)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v8);
  return vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL).u64[0];
}

int32x4_t *re::anonymous namespace'::makeOrthonormalFrame(int32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = *(float32x4_t *)result;
  float32x4_t v4 = vmulq_f32(v3, v3);
  float32x4_t v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)));
  float32x4_t v6 = *a2;
  float32x4_t v7 = *a2;
  if (v5.f32[0] > 0.0)
  {
    float32x4_t v8 = vmulq_f32(v3, v6);
    float32x4_t v7 = vmulq_n_f32(v3, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))), v5).f32[0]);
  }
  float32x4_t v9 = vsubq_f32(v6, v7);
  float32x4_t v10 = vmulq_f32(v9, v9);
  *a2 = v9;
  float v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  if (v11 <= 0.0)
  {
    float32x4_t v17 = *(float32x4_t *)result;
    float32x4_t v18 = vmulq_f32(v17, v17);
    float32x4_t v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
    float32x4_t v20 = *a3;
    float32x4_t v21 = *a3;
    if (v19.f32[0] > 0.0)
    {
      float32x4_t v22 = vmulq_f32(v17, v20);
      float32x4_t v21 = vmulq_n_f32(v17, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))), v19).f32[0]);
    }
    float32x4_t v23 = vsubq_f32(v20, v21);
    float32x4_t v24 = vmulq_f32(v23, v23);
    float v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    if (v25 <= 0.0)
    {
      a3->i64[0] = 0;
      a3->i64[1] = 0;
      int8x16_t v31 = *(int8x16_t *)a3;
    }
    else
    {
      float v26 = v25;
      float32x2_t v27 = vrsqrte_f32((float32x2_t)LODWORD(v25));
      float32x2_t v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v27, v27)));
      float32x4_t v29 = vmulq_n_f32(v23, vmul_f32(v28, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v28, v28))).f32[0]);
      *a3 = v29;
      int32x4_t v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*result, *result), *(int8x16_t *)result, 0xCuLL), vnegq_f32(v29)), *(float32x4_t *)result, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
      int8x16_t v31 = vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
    }
    *a2 = (float32x4_t)v31;
  }
  else
  {
    float v12 = v11;
    float32x2_t v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
    float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    float32x4_t v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
    *a2 = v15;
    int32x4_t v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(*(float32x4_t *)result)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*result, *result), *(int8x16_t *)result, 0xCuLL));
    *(int8x16_t *)a3 = vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  }
  return result;
}

void re::anonymous namespace'::triangulateHelper(uint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  float32x4_t v7 = (_anonymous_namespace_ *)(a1 + 16);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v87, 4524, *(unsigned int *)(a1 + 16));
  uint64_t v8 = *((void *)v7 + 3);
  if (*((_DWORD *)v7 - 2) != v8)
  {
    unint64_t v12 = (unint64_t)v104;
    uint64_t v86 = 0;
    uint64_t v13 = v8;
    uint64_t v83 = 0;
    memset(v84, 0, sizeof(v84));
    int v85 = 0;
    v80[1] = 0;
    unint64_t v81 = 0;
    v80[0] = 0;
    int v82 = 0;
    LODWORD(v93) = 0;
    re::DynamicArray<unsigned int>::resize(v80, v8, &v93);
    LOBYTE(v93) = 0;
    float32x2_t v14 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::resize(v84, v8, &v93);
    int v66 = v8;
    if (v8)
    {
      uint64_t v15 = 0;
      int v16 = 0;
      unint64_t v17 = v81;
      uint64_t v18 = v83;
      unint64_t v19 = *(void *)(a1 + 40);
      float32x4_t v20 = (int *)(*(void *)(a1 + 56) + 12);
      while (1)
      {
        if (v17 == v15) {
          goto LABEL_120;
        }
        *(_DWORD *)(v18 + 4 * v15) = v16;
        if (v19 == v15) {
          break;
        }
        int v21 = *v20;
        v20 += 4;
        if (v21 == -1) {
          int v22 = 1;
        }
        else {
          int v22 = 2;
        }
        v16 += v22;
        if (v13 == ++v15) {
          goto LABEL_19;
        }
      }
LABEL_121:
      *(void *)float32x4_t v104 = 0;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v93 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v119) = 136315906;
      *(void *)(v12 + 196) = "operator[]";
      WORD6(v119) = 1024;
      *(_DWORD *)(v12 + 206) = 797;
      WORD1(v120) = 2048;
      *(void *)(v12 + 212) = v19;
      WORD6(v120) = 2048;
      *(void *)(v12 + 222) = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_122:
      v88[0] = 0;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v119 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v106 = 136315906;
      *(void *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 789;
      *(_WORD *)&v106[18] = 2048;
      *(void *)&v106[20] = a3;
      __int16 v107 = 2048;
      *(void *)float32x4_t v108 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      v88[0] = 0;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v119 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v106 = 136315906;
      *(void *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 797;
      *(_WORD *)&v106[18] = 2048;
      *(void *)&v106[20] = v12;
      __int16 v107 = 2048;
      *(void *)float32x4_t v108 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_124:
      v88[0] = 0;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v119 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v106 = 136315906;
      *(void *)&v106[4] = "operator[]";
      *(_WORD *)&v106[12] = 1024;
      *(_DWORD *)&v106[14] = 789;
      *(_WORD *)&v106[18] = 2048;
      *(void *)&v106[20] = v19;
      __int16 v107 = 2048;
      *(void *)float32x4_t v108 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_125:
      re::internal::assertLog((re::internal *)4, v45, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
      _os_crash();
      __break(1u);
    }
LABEL_19:
    float32x2_t v65 = a2;
    int v76 = 0;
    uint64_t v79 = 0;
    v77[1] = 0;
    v77[2] = 0;
    int v78 = 0;
    re::DynamicArray<re::BlendNode>::setCapacity(v77, 1uLL);
    ++v78;
    int v70 = v76;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v71, v77);
    uint64_t v23 = v72;
    if (!v72)
    {
      re::DynamicArray<re::BlendNode>::setCapacity(&v71, 1uLL);
      uint64_t v23 = v72;
    }
    uint64_t v24 = *(unsigned int *)(a1 + 40);
    LODWORD(v93) = v70;
    *((void *)&v93 + 1) = v71;
    *(void *)&long long v94 = v23;
    *((void *)&v94 + 1) = v73;
    *((void *)&v95 + 1) = v75;
    uint64_t v75 = 0;
    LODWORD(v95) = 1;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    v74 += 2;
    re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomAttributeManager *)&v96);
    unsigned int v98 = v93;
    if (v99)
    {
      float v25 = v100;
      uint64_t v26 = 8 * v99;
      do
      {
        uint64_t v27 = *v25++;
        (*(void (**)(uint64_t, void))(*(void *)v27 + 72))(v27, v98);
        v26 -= 8;
      }
      while (v26);
    }
    uint64_t v63 = (unsigned char *)v13;
    uint64_t v64 = a3;
    unsigned int v101 = DWORD2(v94);
    if (v102)
    {
      float32x2_t v28 = v103;
      uint64_t v29 = 8 * v102;
      do
      {
        uint64_t v30 = *v28++;
        (*(void (**)(uint64_t, void))(*(void *)v30 + 72))(v30, v101);
        v29 -= 8;
      }
      while (v29);
    }
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v93, 0);
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v93, 1);
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v93, 4);
    int v31 = *(_DWORD *)(a1 + 312);
    if (v31)
    {
      unsigned int v32 = 0;
      while (1)
      {
        uint64_t v33 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 288), v32);
        unsigned int v34 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v96, *(char **)(v33 + 8), 2, *(unsigned __int8 *)(v33 + 17));
        if (v24) {
          break;
        }
LABEL_36:
        if (++v32 == v31) {
          goto LABEL_37;
        }
      }
      unsigned int v35 = v34;
      unint64_t v36 = 0;
      int v37 = 0;
      unint64_t v3 = 12;
      while (1)
      {
        unint64_t v38 = *(void *)(a1 + 40);
        if (v38 <= v36) {
          break;
        }
        if (*(_DWORD *)(*(void *)(a1 + 56) + v3) == -1)
        {
          int v39 = v37 + 1;
          uint64_t v40 = 1;
        }
        else
        {
          v110[1] = v36;
          int v39 = v37 + 2;
          v109[1] = v37 + 1;
          uint64_t v40 = 2;
        }
        v110[0] = v36;
        v109[0] = v37;
        (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _DWORD *, _DWORD *))(*(void *)v33 + 40))(v33, v35, v40, v110, v109);
        ++v36;
        v3 += 16;
        int v37 = v39;
        if (v24 == v36) {
          goto LABEL_36;
        }
      }
      *(void *)float v106 = 0;
      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v119 = 0u;
      uint64_t v55 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 797;
      *(_WORD *)&v104[18] = 2048;
      *(void *)&v104[20] = v36;
      *(_WORD *)&v104[28] = 2048;
      *(void *)&v104[30] = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_95;
    }
LABEL_37:
    int v67 = *(_DWORD *)(a1 + 424);
    if (!v67)
    {
LABEL_70:
      uint64_t v55 = (uint64_t)v65;
      if (v71)
      {
        if (v75) {
          (*(void (**)(void))(*(void *)v71 + 40))();
        }
        uint64_t v75 = 0;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v71 = 0;
        ++v74;
      }
      if (!v64)
      {
LABEL_103:
        int v62 = (re *)re::GeomMesh::operator=(v55, &v93);
        re::GeomMesh::setName(v62, *(const char **)a1);
        re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v96);
        if (*((void *)&v93 + 1) && *((void *)&v95 + 1)) {
          (*(void (**)(void, void))(**((void **)&v93 + 1) + 40))(*((void *)&v93 + 1), *((void *)&v95 + 1));
        }
        if (v77[0] && v79) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v77[0] + 40))(v77[0], v79);
        }
        if (v80[0] && v83) {
          (*(void (**)(void, uint64_t))(*(void *)v80[0] + 40))(v80[0], v83);
        }
        uint64_t v11 = v84[0];
        if (!v84[0] || !v86) {
          goto LABEL_115;
        }
LABEL_114:
        (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
LABEL_115:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v87);
        return;
      }
      unint64_t v56 = (*(_DWORD *)(a1 + 8) + 2 * (*(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8)));
      *(void *)&v104[32] = 0;
      memset(v104, 0, 28);
      re::DynamicArray<unsigned int>::resize(v104, v56, &re::kInvalidMeshIndex);
      if (v66)
      {
        uint64_t v57 = 0;
        unint64_t v19 = 0;
        unint64_t v17 = *(void *)&v104[16];
        uint64_t v58 = *(void *)&v104[32];
        unint64_t v12 = *(void *)(a1 + 40);
        float32x4_t v59 = (_DWORD *)(*(void *)(a1 + 56) + 12);
        do
        {
          a3 = v19;
          if (v17 <= v19) {
            goto LABEL_122;
          }
          *(_DWORD *)(v58 + 4 * v19) = v57;
          if ((unsigned char *)v12 == v57) {
            goto LABEL_123;
          }
          if (*v59 != -1)
          {
            unint64_t v19 = (v19 + 1);
            if (v17 <= v19) {
              goto LABEL_124;
            }
            *(_DWORD *)(v58 + 4 * v19) = v57;
          }
          ++v57;
          unint64_t v19 = (v19 + 1);
          v59 += 4;
        }
        while (v63 != v57);
      }
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v119, (uint64_t)v104);
      re::GeomIndexMap::operator=(v64, (uint64_t)&v119);
      if (!BYTE12(v119))
      {
LABEL_100:
        if (*(void *)v104 && *(void *)&v104[32]) {
          (*(void (**)(void, void))(**(void **)v104 + 40))(*(void *)v104, *(void *)&v104[32]);
        }
        goto LABEL_103;
      }
      if (BYTE12(v119) != 2)
      {
        if (BYTE12(v119) != 1) {
          goto LABEL_127;
        }
        uint64_t v61 = v120;
        if (!(void)v120 || !(void)v122) {
          goto LABEL_100;
        }
LABEL_99:
        (*(void (**)(uint64_t))(*(void *)v61 + 40))(v61);
        goto LABEL_100;
      }
LABEL_95:
      uint64_t v61 = *((void *)&v123 + 1);
      if (!*((void *)&v123 + 1)) {
        goto LABEL_100;
      }
      if (*((void *)&v120 + 1)) {
        *((void *)&v120 + 1) = 0;
      }
      if (!(void)v120) {
        goto LABEL_100;
      }
      goto LABEL_99;
    }
    unsigned int v41 = 0;
    while (1)
    {
      unsigned int v69 = v41;
      uint64_t v68 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 400), v41);
      uint64_t v43 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v68, v42);
      unint64_t v17 = *(unsigned int *)(v43 + 24);
      *(void *)&v108[2] = 0;
      memset(v106, 0, sizeof(v106));
      uint64_t v91 = 0;
      v88[1] = 0;
      unint64_t v89 = 0;
      v88[0] = 0;
      int v90 = 0;
      LOBYTE(v119) = 0;
      uint64_t v44 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::resize(v106, v17, &v119);
      *(_DWORD *)float32x4_t v104 = 0;
      uint64_t v105 = 0;
      memset(&v104[8], 0, 28);
      re::DynamicArray<re::BlendNode>::setCapacity(&v104[8], 1uLL);
      ++*(_DWORD *)&v104[32];
      re::DynamicArray<float>::resize((uint64_t)v88, *(unsigned int *)&v104[24]);
      if (v17) {
        break;
      }
LABEL_60:
      uint64_t v54 = (re::GeomAttribute *)re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v93, *(const char **)(v68 + 8), *(unsigned __int8 *)(v68 + 17), (uint64_t)v104, (uint64_t)v88);
      re::GeomAttribute::copyValues((re::GeomAttribute *)v68, v54);
      if (*(void *)&v104[8] && v105) {
        (*(void (**)(void))(**(void **)&v104[8] + 40))();
      }
      if (v88[0] && v91) {
        (*(void (**)(void))(*(void *)v88[0] + 40))();
      }
      if (*(void *)v106 && *(void *)&v108[2]) {
        (*(void (**)(void))(**(void **)v106 + 40))();
      }
      unsigned int v41 = v69 + 1;
      if (v69 + 1 == v67) {
        goto LABEL_70;
      }
    }
    unint64_t v46 = 0;
    unint64_t v12 = 0;
    a3 = v43 + 64;
    unint64_t v19 = 12;
    while (1)
    {
      LODWORD(v119) = v46;
      int v47 = *(unsigned __int8 *)(v43 + 60);
      if (v47 == 2) {
        break;
      }
      if (v47 == 1)
      {
        if (*(void *)(v43 + 80) > v46)
        {
          unsigned int v48 = *(_DWORD *)(*(void *)(v43 + 96) + 4 * v46);
          goto LABEL_52;
        }
LABEL_51:
        unsigned int v48 = -1;
        goto LABEL_52;
      }
      if (*(unsigned char *)(v43 + 60)) {
        goto LABEL_125;
      }
      if (v46 >= *(unsigned int *)a3) {
        unsigned int v48 = -1;
      }
      else {
        unsigned int v48 = v46;
      }
LABEL_52:
      unint64_t v50 = v48;
      unint64_t v51 = v81;
      if (v81 <= v48)
      {
        uint64_t v92 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v119 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v111 = 136315906;
        float32x2_t v112 = "operator[]";
        __int16 v113 = 1024;
        int v114 = 797;
        __int16 v115 = 2048;
        unint64_t v116 = v50;
        __int16 v117 = 2048;
        unint64_t v118 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        uint64_t v92 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v119 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v111 = 136315906;
        float32x2_t v112 = "operator[]";
        __int16 v113 = 1024;
        int v114 = 789;
        __int16 v115 = 2048;
        unint64_t v116 = v51;
        __int16 v117 = 2048;
        unint64_t v118 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        uint64_t v92 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v119 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v111 = 136315906;
        float32x2_t v112 = "operator[]";
        __int16 v113 = 1024;
        int v114 = 797;
        __int16 v115 = 2048;
        unint64_t v116 = v46;
        __int16 v117 = 2048;
        unint64_t v118 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        uint64_t v92 = 0;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v119 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v111 = 136315906;
        float32x2_t v112 = "operator[]";
        __int16 v113 = 1024;
        int v114 = 789;
        __int16 v115 = 2048;
        unint64_t v116 = v51;
        __int16 v117 = 2048;
        unint64_t v118 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        *(void *)float32x4_t v104 = 0;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v93 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v119) = 136315906;
        *(void *)(v12 + 196) = "operator[]";
        WORD6(v119) = 1024;
        *(_DWORD *)(v12 + 206) = 789;
        WORD1(v120) = 2048;
        *(void *)(v12 + 212) = v17;
        WORD6(v120) = 2048;
        *(void *)(v12 + 222) = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_121;
      }
      unint64_t v51 = v12;
      unint64_t v3 = v89;
      if (v89 <= v12) {
        goto LABEL_117;
      }
      uint64_t v52 = v83;
      uint64_t v53 = v91;
      *(_DWORD *)(v91 + 4 * v12) = *(_DWORD *)(v83 + 4 * v50);
      unint64_t v51 = *(void *)(v43 + 24);
      if (v51 <= v46) {
        goto LABEL_118;
      }
      unint64_t v51 = (v12 + 1);
      if (*(_DWORD *)(*(void *)(v43 + 40) + v19) == -1)
      {
        unint64_t v12 = (v12 + 1);
      }
      else
      {
        if (v3 <= v51) {
          goto LABEL_119;
        }
        *(_DWORD *)(v53 + 4 * v51) = *(_DWORD *)(v52 + 4 * v50) + 1;
        unint64_t v12 = (v12 + 2);
      }
      ++v46;
      v19 += 16;
      if (v17 == v46) {
        goto LABEL_60;
      }
    }
    uint64_t v49 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v43 + 64), (unsigned int *)&v119);
    if (v49 != -1)
    {
      unsigned int v48 = *(_DWORD *)(*(void *)(v43 + 72) + 8 * v49 + 4);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  re::GeomMesh::copy((re::GeomMesh *)a1, a2);
  if (!a3) {
    goto LABEL_115;
  }
  int v9 = 0;
  *(void *)&long long v93 = 0xFFFFFFFF00000000;
  DWORD2(v93) = -1;
  BYTE12(v93) = 0;
  if ((v8 - 1) <= 0xFFFFFFFD)
  {
    DWORD2(v93) = v8 - 1;
    int v9 = v8;
    *(void *)&long long v93 = v8;
  }
  LODWORD(v94) = v9;
  re::GeomIndexMap::operator=(a3, (uint64_t)&v93);
  if (!BYTE12(v93)) {
    goto LABEL_115;
  }
  if (BYTE12(v93) == 2)
  {
    uint64_t v11 = *((void *)&v97 + 1);
    if (!*((void *)&v97 + 1)) {
      goto LABEL_115;
    }
    if (*((void *)&v94 + 1)) {
      *((void *)&v94 + 1) = 0;
    }
    if (!(void)v94) {
      goto LABEL_115;
    }
    goto LABEL_114;
  }
  if (BYTE12(v93) == 1)
  {
    uint64_t v11 = v94;
    if (!(void)v94 || !(void)v96) {
      goto LABEL_115;
    }
    goto LABEL_114;
  }
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_127:
  re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
}

uint64_t re::anonymous namespace'::triangluateTopologyHelper(_anonymous_namespace_ *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  v31[1] = 0;
  unint64_t v32 = 0;
  int v33 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(v31, 1uLL);
  ++v33;
  uint64_t v7 = *((void *)a1 + 3);
  int v8 = 0;
  uint64_t v9 = v7;
  if (v7)
  {
    uint64_t v10 = (_DWORD *)(*((void *)a1 + 5) + 8);
    uint64_t v11 = *((void *)a1 + 3);
    do
    {
      if (*(v10 - 2) != -1 && *(v10 - 1) != -1 && *v10 != -1 && v10[1] == -1) {
        ++v8;
      }
      v10 += 4;
      --v11;
    }
    while (v11);
  }
  int v30 = *(_DWORD *)a1;
  re::DynamicArray<re::GeomCell4>::resize(v31, (v8 + 2 * (v7 - v8)));
  if (v7)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    float32x2_t v14 = &v44;
    unint64_t v15 = *((void *)a1 + 3);
    uint64_t v16 = *((void *)a1 + 5);
    unint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 32);
    unint64_t v19 = v32;
    uint64_t v20 = v34;
    int v21 = (int *)(v16 + 8);
    while (v15 != v12)
    {
      int v23 = *(v21 - 2);
      int v22 = *(v21 - 1);
      int v24 = *v21;
      int v25 = v21[1];
      if (v25 == -1)
      {
        unint64_t v3 = v13;
        if (v19 <= v13) {
          goto LABEL_33;
        }
        ++v13;
        uint64_t v27 = (_DWORD *)(v20 + 16 * v3);
        *uint64_t v27 = v23;
      }
      else
      {
        if (v17 <= v12) {
          goto LABEL_30;
        }
        unint64_t v3 = v13;
        if (*(unsigned char *)(v18 + v12))
        {
          if (v19 <= v13) {
            goto LABEL_31;
          }
          uint64_t v26 = (_DWORD *)(v20 + 16 * v13);
          *uint64_t v26 = v23;
          v26[1] = v22;
          unint64_t v3 = v13 + 1;
          v26[2] = v25;
          v26[3] = -1;
          if (v19 <= v3) {
            goto LABEL_32;
          }
          v13 += 2;
          uint64_t v27 = (_DWORD *)(v20 + 16 * v3);
          *uint64_t v27 = v22;
        }
        else
        {
          if (v19 <= v13) {
            goto LABEL_34;
          }
          float32x2_t v28 = (_DWORD *)(v20 + 16 * v13);
          *float32x2_t v28 = v23;
          v28[1] = v22;
          unint64_t v3 = v13 + 1;
          v28[2] = v24;
          v28[3] = -1;
          if (v19 <= v3) {
            goto LABEL_35;
          }
          v13 += 2;
          uint64_t v27 = (_DWORD *)(v20 + 16 * v3);
          *uint64_t v27 = v23;
        }
        int v22 = v24;
        int v24 = v25;
      }
      v27[1] = v22;
      v27[2] = v24;
      v27[3] = -1;
      ++v12;
      v21 += 4;
      if (v9 == v12) {
        goto LABEL_25;
      }
    }
    uint64_t v35 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 797;
    __int16 v40 = 2048;
    unint64_t v41 = v15;
    __int16 v42 = 2048;
    unint64_t v43 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 797;
    __int16 v40 = 2048;
    unint64_t v41 = v12;
    __int16 v42 = 2048;
    unint64_t v43 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v3;
    __int16 v42 = 2048;
    unint64_t v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v3;
    __int16 v42 = 2048;
    unint64_t v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v3;
    __int16 v42 = 2048;
    unint64_t v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v3;
    __int16 v42 = 2048;
    unint64_t v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_35:
    uint64_t v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    int v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v3;
    __int16 v42 = 2048;
    unint64_t v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_25:
  *a3 = v30;
  re::DynamicArray<re::GeomCell4>::operator=((uint64_t)(a3 + 2), (uint64_t)v31);
  uint64_t result = v31[0];
  if (v31[0])
  {
    if (v34) {
      return (*(uint64_t (**)(void))(*(void *)v31[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::addGrid(int **a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, unsigned int a6, unsigned int a7)
{
  uint64_t v7 = *a1;
  if (!*a1) {
    goto LABEL_70;
  }
  int v10 = a6 + 1 + (a6 + 1) * a7;
  int v11 = v7[6];
  unsigned int v12 = *v7;
  unsigned int v13 = v11 + a7 * a6;
  re::DynamicArray<re::GeomCell4>::resize((void *)v7 + 1, v13);
  v7[68] = v13;
  uint64_t v14 = *((void *)v7 + 37);
  if (v14)
  {
    unint64_t v15 = (uint64_t *)*((void *)v7 + 39);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v7[68]);
      v16 -= 8;
    }
    while (v16);
  }
  *uint64_t v7 = v12 + v10;
  v7[40] = v12 + v10;
  uint64_t v18 = *((void *)v7 + 23);
  if (v18)
  {
    unint64_t v19 = (uint64_t *)*((void *)v7 + 25);
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v19++;
      (*(void (**)(uint64_t, void))(*(void *)v21 + 72))(v21, v7[40]);
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v22 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v7 + 12), "vertexPosition");
  unsigned int v101 = v12;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22))
  {
    uint64_t v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0);
    unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    uint64_t v25 = v23;
    unsigned int v26 = v24;
  }
  else
  {
    unsigned int v26 = 0;
    uint64_t v25 = 0;
  }
  float32x2_t v28 = a5;
  uint64_t v27 = a4;
  int v30 = a2;
  uint64_t v29 = a3;
  uint64_t v31 = (uint64_t)a1[2];
  unsigned int v32 = v26;
  uint64_t v102 = v25;
  if (v31)
  {
    if ((*(unsigned int (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v31 + 16))(v31, a4, a3, a2))
    {
      uint64_t v33 = re::internal::GeomTypedAttribute<double>::operator[](v31, 0);
      unsigned int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
      uint64_t v35 = v33;
      unint64_t v36 = v34;
    }
    else
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0;
    }
    float32x2_t v28 = a5;
    uint64_t v27 = a4;
    int v30 = a2;
    uint64_t v29 = a3;
    unsigned int v26 = v32;
    uint64_t v25 = v102;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0xFFFFFFFFLL;
  }
  uint64_t v37 = (uint64_t)a1[1];
  float32x4_t v38 = 0uLL;
  if (v37)
  {
    uint64_t v39 = v35;
    unsigned int v40 = (*(uint64_t (**)(int *, float32x4_t *, float32x4_t *, float32x4_t *))(*(void *)v37 + 16))(a1[1], v27, v29, v30);
    if (v40)
    {
      uint64_t v41 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v37, 0);
      unsigned int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
      uint64_t v42 = v41;
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v25 = v102;
    float32x2_t v28 = a5;
    int v30 = a2;
    uint64_t v29 = a3;
    float32x4_t v44 = vsubq_f32(*a3, *a5);
    uint64_t v27 = a4;
    float32x4_t v45 = vsubq_f32(*a4, *a2);
    float32x4_t v46 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), vnegq_f32(v44)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
    float32x4_t v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL);
    int32x4_t v48 = (int32x4_t)vmulq_f32(v46, v46);
    v48.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), *(float32x2_t *)v48.i8)).u32[0];
    float32x2_t v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
    float32x2_t v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
    float32x4_t v43 = vmulq_n_f32(v47, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
    unsigned int v26 = v32;
    uint64_t v35 = v39;
    float32x4_t v38 = 0uLL;
  }
  else
  {
    uint64_t v42 = 0;
    unsigned int v40 = -1;
    float32x4_t v43 = 0uLL;
  }
  uint64_t v51 = (uint64_t)a1[3];
  if (v51) {
    BOOL v52 = a1[4] == 0;
  }
  else {
    BOOL v52 = 1;
  }
  int v53 = !v52;
  int v99 = v11;
  if (v52)
  {
    uint64_t v58 = 0;
    uint64_t v108 = 0;
    unsigned int v59 = -1;
    float32x4_t v60 = 0uLL;
    unint64_t v61 = 0xFFFFFFFFLL;
    unsigned int v62 = a7;
  }
  else
  {
    unsigned int v94 = v40;
    float32x4_t v95 = v43;
    uint64_t v98 = v42;
    uint64_t v93 = v35;
    float32x4_t v107 = vsubq_f32(*v29, *v30);
    int32x4_t v54 = (int32x4_t)vmulq_f32(v107, v107);
    v54.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v54, 2), vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1))).u32[0];
    float32x2_t v55 = vrsqrte_f32((float32x2_t)v54.u32[0]);
    float32x2_t v56 = vmul_f32(v55, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v55, v55)));
    float32x4_t v91 = vsubq_f32(*v28, *v30);
    int32x4_t v57 = (int32x4_t)vmulq_f32(v91, v91);
    v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
    LODWORD(v96) = vmul_f32(v56, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v56, v56))).u32[0];
    *(float32x2_t *)v54.i8 = vrsqrte_f32((float32x2_t)v57.u32[0]);
    *(float32x2_t *)v54.i8 = vmul_f32(*(float32x2_t *)v54.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8)));
    LODWORD(v90) = vmul_f32(*(float32x2_t *)v54.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v54.i8))).u32[0];
    if ((*(unsigned int (**)(uint64_t, float32x4_t *))(*(void *)v51 + 16))(v51, v27))
    {
      uint64_t v58 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v51, 0);
      unsigned int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
    }
    else
    {
      unsigned int v59 = 0;
      uint64_t v58 = 0;
    }
    float32x4_t v97 = vmulq_n_f32(v107, v96);
    float32x4_t v92 = vmulq_n_f32(v91, v90);
    uint64_t v63 = (uint64_t)a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63))
    {
      uint64_t v108 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v63, 0);
      unint64_t v61 = (*(unsigned int (**)(uint64_t))(*(void *)v63 + 16))(v63);
    }
    else
    {
      unint64_t v61 = 0;
      uint64_t v108 = 0;
    }
    unsigned int v62 = a7;
    float32x2_t v28 = a5;
    uint64_t v27 = a4;
    int v30 = a2;
    uint64_t v29 = a3;
    unsigned int v26 = v32;
    uint64_t v25 = v102;
    uint64_t v35 = v93;
    uint64_t v42 = v98;
    float32x4_t v43 = v95;
    float32x4_t v38 = v97;
    unsigned int v40 = v94;
    float32x4_t v60 = v92;
  }
  unsigned int v64 = 0;
  unint64_t v66 = v40;
  unsigned int v67 = v101;
  float v68 = 1.0 / (float)v62;
  uint64_t result = v58;
  do
  {
    uint64_t v70 = 0;
    float v71 = v68 * (float)v64;
    float32x4_t v72 = vaddq_f32(vmulq_n_f32(*v28, v71), vmulq_n_f32(*v30, 1.0 - v71));
    uint64_t v73 = v67;
    uint64_t v74 = v108 + 16 * v67;
    uint64_t v75 = result + 16 * v67;
    float32x4_t v76 = vaddq_f32(vmulq_n_f32(*v29, 1.0 - v71), vmulq_n_f32(*v27, v71));
    unsigned int v77 = v26 - v67;
    if (v26 < v67) {
      unsigned int v77 = 0;
    }
    uint64_t v78 = v42 + 16 * v67;
    uint64_t v79 = v35 + 8 * v67;
    uint64_t v80 = v25 + 16 * v67;
    do
    {
      unint64_t v81 = v73 + v70;
      float v65 = 1.0 / (float)a6;
      if (a1[2])
      {
        if (v36 <= v81) {
          goto LABEL_65;
        }
        *(float *)&uint64_t v82 = v65 * (float)v70;
        *((float *)&v82 + 1) = v68 * (float)v64;
        *(void *)(v79 + 8 * v70) = v82;
      }
      if (a1[1])
      {
        if (v81 >= v66) {
          goto LABEL_66;
        }
        *(float32x4_t *)(v78 + 16 * v70) = v43;
      }
      if (v53)
      {
        if (v81 >= v59) {
          goto LABEL_67;
        }
        *(float32x4_t *)(v75 + 16 * v70) = v38;
        if (v61 <= v81) {
          goto LABEL_68;
        }
        *(float32x4_t *)(v74 + 16 * v70) = v60;
      }
      if (v77 == v70)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_67:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_68:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "addGrid", 79);
        _os_crash();
        __break(1u);
      }
      *(float32x4_t *)(v80 + 16 * v70) = vaddq_f32(vmulq_n_f32(v76, v65 * (float)v70), vmulq_n_f32(v72, 1.0 - (float)(v65 * (float)v70)));
      ++v70;
    }
    while (v70 <= a6);
    unsigned int v67 = v73 + v70;
    ++v64;
  }
  while (v64 <= v62);
  int v83 = v99;
  unsigned int v84 = v101;
  if (v62)
  {
    for (int i = 0; i != v62; ++i)
    {
      if (a6)
      {
        int v86 = 0;
        unint64_t v87 = *((void *)v7 + 3);
        do
        {
          unint64_t v88 = (v83 + v86);
          if (v87 <= v88) {
            goto LABEL_69;
          }
          unint64_t v89 = (int32x2_t *)(*((void *)v7 + 5) + 16 * v88);
          v89->i32[0] = v84 + v86;
          v89->i32[1] = v84 + v86 + 1;
          v89[1] = vadd_s32(vdup_n_s32(a6 + v84 + v86++), (int32x2_t)0x100000002);
        }
        while (a6 != v86);
        v83 += v86;
        v84 += v86;
      }
      ++v84;
    }
  }
  return result;
}

uint64_t re::internal::setCornerVertexValues(void *a1, uint64_t a2)
{
  if (!*a1) {
    goto LABEL_42;
  }
  uint64_t v4 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(*a1 + 48), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 16))(v4))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v4, 0);
    unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v7 + 16))(a1[1]);
    if (result)
    {
      uint64_t v9 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0xFFFFFFFFLL;
  }
  uint64_t v10 = a1[3];
  if (v10) {
    BOOL v11 = a1[4] == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
    unsigned int v16 = -1;
    unsigned int v17 = -1;
  }
  else
  {
    unsigned int v41 = result;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10))
    {
      uint64_t v13 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v10, 0);
      unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v18 = a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18))
    {
      uint64_t v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v18, 0);
      unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else
    {
      unsigned int v17 = 0;
      uint64_t v15 = 0;
    }
    uint64_t result = v41;
    unsigned int v16 = v14;
  }
  unsigned int v19 = 0;
  unsigned int v20 = *(_DWORD *)(a2 + 88);
  float v21 = 1.0 / (float)*(unsigned int *)(a2 + 84);
  do
  {
    unsigned int v22 = 0;
    unsigned int v23 = v20;
    do
    {
      if (v6 <= v23)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "setCornerVertexValues", 160);
        _os_crash();
        __break(1u);
      }
      float32x4_t v24 = vaddq_f32(vmulq_n_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a2, 1.0 - (float)(v21 * (float)v19)), vmulq_n_f32(*(float32x4_t *)(a2 + 48), v21 * (float)v19)), 1.0 - (float)(v21 * (float)v22)), vmulq_n_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + 16), 1.0 - (float)(v21 * (float)v19)), vmulq_n_f32(*(float32x4_t *)(a2 + 32), v21 * (float)v19)), v21 * (float)v22));
      int32x4_t v25 = (int32x4_t)vmulq_f32(v24, v24);
      v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
      float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
      float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
      float32x4_t v28 = vmulq_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
      *(float32x4_t *)(v5 + 16 * v23) = vaddq_f32(*(float32x4_t *)(a2 + 64), vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)(a2 + 80))));
      if (a1[1])
      {
        if (result <= v23) {
          goto LABEL_39;
        }
        *(float32x4_t *)(v9 + 16 * v23) = v28;
      }
      if (v12)
      {
        if (v16 <= v23) {
          goto LABEL_40;
        }
        float32x4_t v29 = vmulq_f32(v28, (float32x4_t)xmmword_23435FD50);
        float32x4_t v30 = vsubq_f32((float32x4_t)xmmword_23435FD50, vmulq_n_f32(v28, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]));
        int32x4_t v31 = (int32x4_t)vmulq_f32(v30, v30);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        float32x2_t v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        float32x4_t v34 = vmulq_n_f32(v30, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
        *(float32x4_t *)(v13 + 16 * v23) = v34;
        if (v17 <= v23) {
          goto LABEL_41;
        }
        float32x4_t v35 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v28)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
        float32x4_t v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
        int32x4_t v37 = (int32x4_t)vmulq_f32(v35, v35);
        v37.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), *(float32x2_t *)v37.i8)).u32[0];
        float32x2_t v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
        float32x2_t v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
        *(float32x4_t *)(v15 + 16 * v23) = vmulq_n_f32(v36, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]);
      }
      v23 += *(_DWORD *)(a2 + 92);
      ++v22;
      unsigned int v40 = *(_DWORD *)(a2 + 84);
    }
    while (v22 <= v40);
    v20 += *(_DWORD *)(a2 + 96);
    ++v19;
  }
  while (v19 <= v40);
  return result;
}

uint64_t re::internal::addFace(unint64_t *a1, float32x4_t *a2)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  unint64_t v6 = *a1;
  if (!*a1)
  {
LABEL_164:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "addFace", 222);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }
  uint64_t v7 = *(unsigned int *)(v6 + 24);
  uint64_t v9 = a2->u32[3];
  unsigned int v8 = a2[1].u32[0];
  int v106 = 2 * a2[1].i32[1];
  unsigned int v113 = v9 - 1;
  unsigned int v122 = v8 - 1;
  unint64_t v116 = *(unsigned int *)v6;
  unint64_t v117 = (v106 + 2 + v9 - 1);
  unint64_t v118 = v106 + 2 + v8 - 1;
  unsigned int v10 = v116 + v117 * v118;
  *(_DWORD *)unint64_t v6 = v10;
  *(_DWORD *)(v6 + 160) = v10;
  uint64_t v11 = *(void *)(v6 + 184);
  if (v11)
  {
    int v12 = *(uint64_t **)(v6 + 200);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12++;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 72))(v14, *(unsigned int *)(v6 + 160));
      v13 -= 8;
    }
    while (v13);
  }
  unint64_t v15 = (v117 - 1);
  uint64_t v105 = (v118 - 1);
  re::DynamicArray<re::GeomCell4>::resize((void *)(v6 + 8), (v7 + v15 * v105));
  *(_DWORD *)(v6 + 272) = v7 + v15 * v105;
  uint64_t v16 = *(void *)(v6 + 296);
  if (v16)
  {
    unsigned int v17 = *(uint64_t **)(v6 + 312);
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v17++;
      (*(void (**)(uint64_t, void))(*(void *)v19 + 72))(v19, *(unsigned int *)(v6 + 272));
      v18 -= 8;
    }
    while (v18);
  }
  float v20 = a2->f32[1];
  float v136 = a2->f32[0];
  __int32 v21 = a2[1].i32[1];
  int v139 = 1;
  int v140 = v106 + 2 + v9 - 1;
  *(float *)&unsigned int v110 = (float)(v20 + (float)(v136 * -2.0)) * 0.5;
  float v114 = (float)(a2->f32[2] + (float)(v136 * -2.0)) * 0.5;
  long long v131 = xmmword_2343AC020;
  long long v132 = xmmword_2343AC030;
  int32x4_t v133 = (int32x4_t)xmmword_23435FD80;
  long long v134 = xmmword_2343AC040;
  __int32 v137 = v21;
  int v138 = v116;
  *(float *)&unint64_t v22 = -*(float *)&v110;
  *((float *)&v22 + 1) = -v114;
  long long v135 = v22;
  uint64_t v3 = (uint64_t)a1;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v131);
  long long v131 = xmmword_2343AC030;
  long long v132 = xmmword_2343AC050;
  int32x4_t v133 = (int32x4_t)xmmword_2343AC060;
  long long v134 = xmmword_23435FD80;
  int v104 = v9 + v116;
  int v138 = a2[1].i32[1] + v9 + v116;
  LODWORD(v23) = v110;
  *((float *)&v23 + 1) = -v114;
  long long v135 = v23;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v131);
  long long v131 = xmmword_2343AC040;
  long long v132 = xmmword_23435FD80;
  int32x4_t v133 = (int32x4_t)xmmword_2343AC070;
  long long v134 = xmmword_2343AC080;
  unsigned int v107 = v8;
  int v138 = v116 + (a2[1].i32[1] + v8) * v117;
  int v24 = v138;
  long long v25 = COERCE_UNSIGNED_INT(-*(float *)&v110);
  *((float *)&v25 + 1) = v114;
  long long v135 = v25;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v131);
  long long v131 = xmmword_23435FD80;
  long long v132 = xmmword_2343AC060;
  int32x4_t v133 = vdupq_n_s32(0x3F13CD3Au);
  long long v134 = xmmword_2343AC070;
  int v138 = v24 + v9 + a2[1].i32[1];
  long long v26 = v110;
  *((float *)&v26 + 1) = v114;
  long long v135 = v26;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v131);
  uint64_t v27 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v6 + 48), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 16))(v27))
  {
    unint64_t v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
    unint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v28 = 0;
  }
  int v29 = v118;
  float32x4_t v30 = a1;
  uint64_t v31 = a1[1];
  if (v31)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)v31 + 16))(a1[1]);
    if (result)
    {
      uint64_t v33 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v31, 0);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
      uint64_t v34 = v33;
    }
    else
    {
      uint64_t v34 = 0;
    }
    int v29 = v118;
    float32x4_t v30 = a1;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t result = 0xFFFFFFFFLL;
  }
  uint64_t v35 = v30[3];
  if (v35) {
    BOOL v36 = v30[4] == 0;
  }
  else {
    BOOL v36 = 1;
  }
  int v37 = !v36;
  uint64_t v120 = v34;
  unsigned int v103 = v7;
  unsigned int v115 = result;
  if (v36)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0xFFFFFFFFLL;
    unsigned int v42 = -1;
    unint64_t v44 = v116;
    unint64_t v43 = (v106 + 2 + v9 - 1);
    unsigned int v45 = v9 - 1;
    float32x4_t v46 = a2;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 16))(v35))
    {
      uint64_t v7 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v35, 0);
      unsigned int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
    }
    else
    {
      unsigned int v38 = 0;
      uint64_t v7 = 0;
    }
    uint64_t v3 = a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 16))(v3))
    {
      uint64_t v47 = v9;
      uint64_t v48 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v3, 0);
      uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
      uint64_t v39 = v48;
      uint64_t v9 = v47;
      unint64_t v15 = (v117 - 1);
      uint64_t v41 = v49;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    unint64_t v44 = v116;
    unint64_t v43 = v117;
    int v29 = v118;
    float32x4_t v30 = a1;
    unsigned int v45 = v113;
    uint64_t result = v115;
    float32x4_t v46 = a2;
    uint64_t v34 = v120;
    uint64_t v40 = v7;
    unsigned int v42 = v38;
  }
  unint64_t v112 = v15;
  float v50 = v46->f32[0];
  if (v45)
  {
    unint64_t v5 = 0;
    float v51 = (float)(v46->f32[1] + (float)(v50 * -2.0)) / (float)((float)v45 + 1.0);
    while (1)
    {
      unsigned int v52 = v5 + 1;
      if (v29) {
        break;
      }
LABEL_49:
      unint64_t v5 = (v5 + 1);
      if (v52 == v45)
      {
        unsigned int v111 = v41;
        unsigned int v109 = v9;
        uint64_t v108 = (unsigned int *)v6;
        float v50 = v46->f32[0];
        goto LABEL_52;
      }
    }
    v53.i32[1] = 0;
    v53.i64[1] = 0;
    unsigned int v54 = v46[1].i32[1] + v44;
    int v55 = v29;
    while (1)
    {
      unint64_t v56 = v54;
      if (v4 <= v54) {
        break;
      }
      uint64_t v3 = v5 + v54 + 1;
      if (v4 <= v3) {
        goto LABEL_135;
      }
      v53.f32[0] = v51 * (float)v52;
      *(float32x4_t *)(v28 + 16 * v3) = vaddq_f32(v53, *(float32x4_t *)(v28 + 16 * v54));
      if (v30[1])
      {
        if (result <= v54) {
          goto LABEL_136;
        }
        if (result <= v3) {
          goto LABEL_137;
        }
        *(_OWORD *)(v34 + 16 * v3) = *(_OWORD *)(v34 + 16 * v54);
      }
      if (v37)
      {
        if (v42 <= v54) {
          goto LABEL_141;
        }
        if (v42 <= v3) {
          goto LABEL_142;
        }
        *(_OWORD *)(v40 + 16 * v3) = *(_OWORD *)(v40 + 16 * v54);
        if (v41 <= v54) {
          goto LABEL_143;
        }
        if (v41 <= v3) {
          goto LABEL_144;
        }
        *(_OWORD *)(v39 + 16 * v3) = *(_OWORD *)(v39 + 16 * v54);
      }
      v54 += v43;
      if (!--v55) {
        goto LABEL_49;
      }
    }
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v54;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v5 + v54 + 1;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v4;
    _os_log_send_and_compose_impl();
    LODWORD(result) = _os_crash_msg();
    __break(1u);
LABEL_136:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unsigned int v98 = result;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v98;
    _os_log_send_and_compose_impl();
    uint64_t result = _os_crash_msg();
    __break(1u);
LABEL_137:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unint64_t v2 = result;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v3;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_138;
  }
  unsigned int v111 = v41;
  unsigned int v109 = v9;
  uint64_t v108 = (unsigned int *)v6;
LABEL_52:
  if (v122)
  {
    unsigned int v57 = 0;
    uint64_t v9 = v111;
    uint64_t v7 = v42;
    float v58 = (float)(a2->f32[2] + (float)(v50 * -2.0)) / (float)((float)v122 + 1.0);
    int v59 = v104 + v106 + 1;
    unint64_t v6 = v115;
    uint64_t v3 = v4;
    while (1)
    {
      ++v57;
      if (v43) {
        break;
      }
LABEL_72:
      v59 += v43;
      if (v57 == v122) {
        goto LABEL_73;
      }
    }
    uint64_t v60 = 0;
    int v61 = a2[1].i32[1] * v43;
    unint64_t v5 = (v61 + v44);
    uint64_t v62 = v39 + 16 * v5;
    v63.i32[0] = 0;
    v63.i64[1] = 0;
    uint64_t v64 = v40 + 16 * v5;
    unint64_t v56 = (v61 + v59);
    uint64_t v65 = v120 + 16 * v5;
    if (v4 <= v5) {
      unint64_t v2 = v5;
    }
    else {
      unint64_t v2 = v4;
    }
    unint64_t v66 = v28 + 16 * v5;
    uint64_t v67 = v39 + 16 * v56;
    uint64_t v68 = v40 + 16 * v56;
    uint64_t v69 = v120 + 16 * v56;
    uint64_t result = v28 + 16 * v56;
    int v70 = v43;
    while (v2 != v5)
    {
      if (v56 >= v4) {
        goto LABEL_139;
      }
      v63.f32[1] = v58 * (float)v57;
      *(float32x4_t *)(result + v60) = vaddq_f32(v63, *(float32x4_t *)(v66 + v60));
      if (v30[1])
      {
        if (v5 >= v115) {
          goto LABEL_145;
        }
        if (v56 >= v115) {
          goto LABEL_146;
        }
        *(_OWORD *)(v69 + v60) = *(_OWORD *)(v65 + v60);
      }
      if (v37)
      {
        if (v5 >= v42) {
          goto LABEL_147;
        }
        if (v56 >= v42) {
          goto LABEL_148;
        }
        *(_OWORD *)(v68 + v60) = *(_OWORD *)(v64 + v60);
        if (v5 >= v111) {
          goto LABEL_149;
        }
        if (v56 >= v111) {
          goto LABEL_150;
        }
        *(_OWORD *)(v67 + v60) = *(_OWORD *)(v62 + v60);
      }
      ++v5;
      ++v56;
      v60 += 16;
      if (!--v70) {
        goto LABEL_72;
      }
    }
LABEL_138:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v2;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_139:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_140:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 789;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_141:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unsigned int v99 = v42;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v99;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_142:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unsigned int v100 = v42;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v3;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v100;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_143:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unsigned int v101 = v41;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v101;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    unint64_t v2 = v41;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v3;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_145:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v5;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_146:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_147:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v5;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_148:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_149:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v5;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_150:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v56;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_151:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v4;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_152:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v28;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_153:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 609;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = (v5 + v4);
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v56;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_155:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v28;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v56;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v28;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_158;
  }
LABEL_73:
  uint64_t v7 = (uint64_t)v108;
  int v71 = *v108 - v44;
  uint64_t v9 = v103;
  if (*v108 > v44)
  {
    float32x4_t v73 = a2[3];
    float32x4_t v72 = a2[4];
    uint64_t v3 = v111;
    float32x4_t v74 = a2[2];
    unint64_t v2 = v42;
    if (v4 <= v44) {
      unint64_t v5 = v44;
    }
    else {
      unint64_t v5 = v4;
    }
    unint64_t v56 = v44;
    unint64_t v6 = v115;
    while (v5 != v56)
    {
      float32x4_t v75 = vaddq_f32(a2[5], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)(v28 + 16 * v56))), a2[3], *(float32x2_t *)(v28 + 16 * v56), 1), a2[4], *(float32x4_t *)(v28 + 16 * v56), 2));
      *(float32x4_t *)(v28 + 16 * v56) = vdivq_f32(v75, (float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 3));
      if (v30[1])
      {
        if (v56 >= v115) {
          goto LABEL_161;
        }
        *(float32x4_t *)(v120 + 16 * v56) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)(v120 + 16 * v56))), v73, *(float32x2_t *)(v120 + 16 * v56), 1), v72, *(float32x4_t *)(v120 + 16 * v56), 2);
      }
      if (v37)
      {
        if (v56 >= v42) {
          goto LABEL_162;
        }
        *(float32x4_t *)(v40 + 16 * v56) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)(v40 + 16 * v56))), v73, *(float32x2_t *)(v40 + 16 * v56), 1), v72, *(float32x4_t *)(v40 + 16 * v56), 2);
        if (v56 >= v111) {
          goto LABEL_163;
        }
        *(float32x4_t *)(v39 + 16 * v56) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)(v39 + 16 * v56))), v73, *(float32x2_t *)(v39 + 16 * v56), 1), v72, *(float32x4_t *)(v39 + 16 * v56), 2);
      }
      ++v56;
      if (!--v71) {
        goto LABEL_87;
      }
    }
LABEL_158:
    v123[0] = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v128 = 136315906;
    *(void *)&v128[4] = "operator[]";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 609;
    *(_WORD *)&v128[18] = 2048;
    *(void *)&v128[20] = v5;
    __int16 v129 = 2048;
    *(void *)float32x4_t v130 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    uint64_t v127 = 0;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v145 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v141 = 136315906;
    *(void *)(v3 + 4) = "operator[]";
    __int16 v142 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    __int16 v143 = 2048;
    *(void *)(v3 + 20) = v56;
    __int16 v144 = 2048;
    *(void *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_160;
  }
LABEL_87:
  unint64_t v5 = v112;
  if (v30[2])
  {
    uint64_t v3 = (uint64_t)&v141;
    *(void *)&v130[2] = 0;
    memset(v128, 0, sizeof(v128));
    uint64_t v126 = 0;
    v123[1] = 0;
    uint64_t v124 = 0;
    v123[0] = 0;
    int v125 = 0;
    unsigned int v76 = a2[1].u32[1];
    float v77 = a2->f32[0] / a2->f32[1];
    float v78 = (float)(v77 * -2.0) + 1.0;
    float v79 = a2->f32[0] / a2->f32[2];
    float v80 = (float)(v79 * -2.0) + 1.0;
    re::DynamicArray<float>::resize((uint64_t)v128, v43);
    re::DynamicArray<float>::resize((uint64_t)v123, v118);
    unsigned int v81 = 0;
    unint64_t v4 = *(void *)&v128[16];
    uint64_t v82 = *(void *)&v130[2];
    unint64_t v2 = (unint64_t)v124;
    uint64_t v83 = v126;
    do
    {
      unint64_t v56 = v81;
      if (v4 <= v81) {
        goto LABEL_154;
      }
      float v84 = (float)(v77 / (float)v76) * (float)v81;
      *(float *)(v82 + 4 * v81) = v84;
      unint64_t v28 = v76 + v109 + v81;
      if (v4 <= v28) {
        goto LABEL_155;
      }
      *(float *)(v82 + 4 * v28) = v77 + (float)(v78 + v84);
      if (v2 <= v81) {
        goto LABEL_156;
      }
      float v85 = (float)(v79 / (float)v76) * (float)v81;
      *(float *)(v83 + 4 * v81) = v85;
      unint64_t v28 = v76 + v107 + v81;
      if (v2 <= v28) {
        goto LABEL_157;
      }
      *(float *)(v83 + 4 * v28) = v79 + (float)(v80 + v85);
      ++v81;
    }
    while ((int)v56 + 1 <= v76);
    if (v113)
    {
      unsigned int v86 = 1;
      uint64_t v87 = *(void *)&v130[2];
      do
      {
        unint64_t v56 = v76 + v86;
        if (v4 <= v56) {
          goto LABEL_159;
        }
        *(float *)(v87 + 4 * v56) = v77 + (float)((float)(v78 / (float)v109) * (float)v86++);
      }
      while (v86 <= v113);
    }
    if (v4 <= v112)
    {
LABEL_165:
      uint64_t v127 = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v141 = 136315906;
      *(void *)(v3 + 4) = "operator[]";
      __int16 v142 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      __int16 v143 = 2048;
      *(void *)(v3 + 20) = v5;
      __int16 v144 = 2048;
      *(void *)(v3 + 30) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_166:
      uint64_t v127 = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      uint64_t v102 = v90;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v141 = 136315906;
      *(void *)(v3 + 4) = "operator[]";
      __int16 v142 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      __int16 v143 = 2048;
      *(void *)(v3 + 20) = v102;
      __int16 v144 = 2048;
      *(void *)(v3 + 30) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(v82 + 4 * v112) = 1065353216;
    if (v122)
    {
      unsigned int v88 = 1;
      uint64_t v89 = v126;
      while (1)
      {
        unint64_t v56 = v76 + v88;
        if (v2 <= v56) {
          break;
        }
        *(float *)(v89 + 4 * v56) = v79 + (float)((float)(v80 / (float)v107) * (float)v88++);
        if (v88 > v122) {
          goto LABEL_103;
        }
      }
LABEL_160:
      uint64_t v127 = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v141 = 136315906;
      *(void *)(v3 + 4) = "operator[]";
      __int16 v142 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      __int16 v143 = 2048;
      *(void *)(v3 + 20) = v56;
      __int16 v144 = 2048;
      *(void *)(v3 + 30) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      v123[0] = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v128 = 136315906;
      *(void *)&v128[4] = "operator[]";
      *(_WORD *)&v128[12] = 1024;
      *(_DWORD *)&v128[14] = 609;
      *(_WORD *)&v128[18] = 2048;
      *(void *)&v128[20] = v56;
      __int16 v129 = 2048;
      *(void *)float32x4_t v130 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      v123[0] = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v128 = 136315906;
      *(void *)&v128[4] = "operator[]";
      *(_WORD *)&v128[12] = 1024;
      *(_DWORD *)&v128[14] = 609;
      *(_WORD *)&v128[18] = 2048;
      *(void *)&v128[20] = v56;
      __int16 v129 = 2048;
      *(void *)float32x4_t v130 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_163:
      v123[0] = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v145 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v128 = 136315906;
      *(void *)&v128[4] = "operator[]";
      *(_WORD *)&v128[12] = 1024;
      *(_DWORD *)&v128[14] = 609;
      *(_WORD *)&v128[18] = 2048;
      *(void *)&v128[20] = v56;
      __int16 v129 = 2048;
      *(void *)float32x4_t v130 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_164;
    }
LABEL_103:
    uint64_t v90 = (v118 - 1);
    if (v2 <= v105) {
      goto LABEL_166;
    }
    *(_DWORD *)(v83 + 4 * v105) = 1065353216;
    uint64_t v91 = a1[2];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v91 + 16))(v91))
    {
      unint64_t v56 = re::internal::GeomTypedAttribute<double>::operator[](v91, 0);
      unint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 16))(v91);
    }
    else
    {
      unint64_t v2 = 0;
      unint64_t v56 = 0;
    }
    LODWORD(v44) = v116;
    if (v118)
    {
      unint64_t v28 = 0;
      unint64_t v5 = v116;
      do
      {
        if (v117)
        {
          unint64_t v4 = 0;
          LODWORD(v92) = v2 - v5;
          if (v2 >= v5) {
            uint64_t v92 = v92;
          }
          else {
            uint64_t v92 = 0;
          }
          do
          {
            unint64_t v6 = *(void *)&v128[16];
            if (*(void *)&v128[16] <= v4) {
              goto LABEL_151;
            }
            unint64_t v6 = (unint64_t)v124;
            if ((unint64_t)v124 <= v28) {
              goto LABEL_152;
            }
            if (v92 == v4) {
              goto LABEL_153;
            }
            LODWORD(v93) = *(_DWORD *)(*(void *)&v130[2] + 4 * v4);
            HIDWORD(v93) = *(_DWORD *)(v126 + 4 * v28);
            *(void *)(v56 + 8 * v5 + 8 * v4++) = v93;
          }
          while (v117 != v4);
          unint64_t v5 = (v5 + v4);
        }
        ++v28;
      }
      while (v28 != v118);
    }
    if (v123[0] && v126)
    {
      (*(void (**)(void))(*(void *)v123[0] + 40))();
      LODWORD(v44) = v116;
    }
    uint64_t result = *(void *)v128;
    unint64_t v5 = v112;
    if (*(void *)v128)
    {
      if (*(void *)&v130[2])
      {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)v128 + 40))();
        LODWORD(v44) = v116;
      }
    }
  }
  if (v118 != 1)
  {
    int v94 = 0;
    do
    {
      if (v5)
      {
        int v95 = 0;
        unint64_t v2 = *((void *)v108 + 3);
        int v96 = v109 + v106 + v44;
        do
        {
          unint64_t v56 = (v9 + v95);
          if (v2 <= v56) {
            goto LABEL_140;
          }
          float32x4_t v97 = (_DWORD *)(*((void *)v108 + 5) + 16 * v56);
          *float32x4_t v97 = v44 + v95;
          v97[1] = v44 + v95 + 1;
          v97[2] = v96 + v95 + 2;
          v97[3] = v96 + v95++ + 1;
        }
        while (v5 != v95);
        uint64_t v9 = (v9 + v95);
        LODWORD(v44) = v44 + v95;
      }
      LODWORD(v44) = v44 + 1;
      ++v94;
    }
    while (v94 != v105);
  }
  return result;
}

uint64_t re::internal::buildBoxHelper(re::internal *a1, _DWORD *a2, unsigned __int16 *a3)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v70);
  if (a3[2]) {
    BOOL v6 = *a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || !a3[1])
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexPosition", 1, 7);
    if (*((unsigned char *)a3 + 24)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a3 + 25))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexNormal", 1, 7);
      if (*((unsigned char *)a3 + 24))
      {
        if (*((unsigned char *)a3 + 25))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)a1, &v70);
  }
  else
  {
    long long v69 = 0u;
    long long v68 = 0u;
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexPosition", 1, 7);
    uint64_t v67 = &v70;
    if (*((unsigned char *)a3 + 25)) {
      *(void *)&long long v68 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexNormal", 1, 7);
    }
    if (*((unsigned char *)a3 + 24))
    {
      *((void *)&v68 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexUV", 1, 6);
      if (*((unsigned char *)a3 + 25))
      {
        if (*((unsigned char *)a3 + 24))
        {
          *(void *)&long long v69 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexTangent", 1, 7);
          *((void *)&v69 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexBitangent", 1, 7);
        }
      }
    }
    if (*((float *)a3 + 2) > 0.0 && a3[3])
    {
      int v7 = ((2 * a3[3] + 2) | 2) - 1;
      int v8 = v7 + *a3;
      int v9 = v7 + a3[1];
      int v10 = v7 + a3[2];
      unint64_t v11 = (2 * ((v10 - 1) * (v9 - 1) + (v10 - 1 + v9 - 1) * (v8 - 1)));
      if (v76)
      {
        uint64_t v12 = (2 * (v10 * v9 + (v10 + v9) * v8));
        uint64_t v13 = v77;
        uint64_t v14 = 8 * v76;
        do
        {
          uint64_t v15 = *v13++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 80))(v15, v12);
          v14 -= 8;
        }
        while (v14);
      }
      if (v72 < v11) {
        re::DynamicArray<re::BlendNode>::setCapacity(&v71, v11);
      }
      if (v78)
      {
        uint64_t v16 = v79;
        uint64_t v17 = 8 * v78;
        do
        {
          uint64_t v18 = *v16++;
          (*(void (**)(uint64_t, unint64_t))(*(void *)v18 + 80))(v18, v11);
          v17 -= 8;
        }
        while (v17);
      }
      float v19 = *((float *)a3 + 2);
      float v20 = *((float *)a3 + 3);
      float v64 = (float)(v20 - (float)(v19 + v19)) * 0.5;
      float v21 = *((float *)a3 + 4);
      float v22 = v21 - (float)(v19 + v19);
      float v23 = *((float *)a3 + 5) - (float)(v19 + v19);
      v81.i32[1] = (a3[3] + 1) & 0x1FFFE;
      v80.i64[0] = __PAIR64__(LODWORD(v20), LODWORD(v19));
      v80.f32[2] = v21;
      __int32 v24 = a3[1];
      v80.i32[3] = *a3;
      v81.i32[0] = v24;
      long long v25 = xmmword_23435FBB0;
      *((float *)&v25 + 2) = v23 * 0.5;
      long long v82 = xmmword_23435FD50;
      long long v83 = xmmword_23435FD60;
      long long v84 = xmmword_23435FD80;
      long long v85 = v25;
      re::internal::addFace((unint64_t *)&v67, &v80);
      int v26 = v73;
      *a2 = v73;
      __int32 v27 = *((_DWORD *)a3 + 5);
      v80.i32[1] = *((_DWORD *)a3 + 3);
      v80.i32[2] = v27;
      __int32 v28 = a3[2];
      v80.i32[3] = *a3;
      v81.i32[0] = v28;
      long long v29 = xmmword_23435FBB0;
      *((float *)&v29 + 1) = v22 * 0.5;
      long long v82 = xmmword_23435FD50;
      long long v83 = xmmword_234382760;
      long long v84 = xmmword_23435FD60;
      long long v85 = v29;
      re::internal::addFace((unint64_t *)&v67, &v80);
      int v30 = v73;
      a2[1] = v73 - v26;
      *(uint64_t *)((char *)v80.i64 + 4) = *(void *)(a3 + 6);
      __int32 v31 = a3[1];
      v80.i32[3] = *a3;
      v81.i32[0] = v31;
      long long v32 = xmmword_23435FBB0;
      *((float *)&v32 + 2) = -(float)(v23 * 0.5);
      long long v82 = xmmword_23435FD70;
      long long v83 = xmmword_23435FD60;
      long long v84 = xmmword_234382760;
      long long v85 = v32;
      re::internal::addFace((unint64_t *)&v67, &v80);
      int v33 = v73;
      a2[2] = v73 - v30;
      __int32 v34 = *((_DWORD *)a3 + 5);
      v80.i32[1] = *((_DWORD *)a3 + 3);
      v80.i32[2] = v34;
      __int32 v35 = a3[2];
      v80.i32[3] = *a3;
      v81.i32[0] = v35;
      long long v36 = xmmword_23435FBB0;
      *((float *)&v36 + 1) = -(float)(v22 * 0.5);
      long long v82 = xmmword_23435FD50;
      long long v83 = xmmword_23435FD80;
      long long v84 = xmmword_23435FD90;
      long long v85 = v36;
      re::internal::addFace((unint64_t *)&v67, &v80);
      int v37 = v73;
      a2[3] = v73 - v33;
      *(int32x2_t *)&v80.i32[1] = vrev64_s32(*(int32x2_t *)(a3 + 8));
      __int32 v38 = a3[1];
      v80.i32[3] = a3[2];
      v81.i32[0] = v38;
      long long v39 = xmmword_23435FBB0;
      *(float *)&long long v39 = v64;
      long long v82 = xmmword_234382760;
      long long v83 = xmmword_23435FD60;
      long long v84 = xmmword_23435FD50;
      long long v85 = v39;
      re::internal::addFace((unint64_t *)&v67, &v80);
      int v40 = v73;
      a2[4] = v73 - v37;
      *(int32x2_t *)&v80.i32[1] = vrev64_s32(*(int32x2_t *)(a3 + 8));
      __int32 v41 = a3[1];
      v80.i32[3] = a3[2];
      v81.i32[0] = v41;
      long long v42 = xmmword_23435FBB0;
      *(float *)&long long v42 = -v64;
      long long v82 = xmmword_23435FD80;
      long long v83 = xmmword_23435FD60;
      long long v84 = xmmword_23435FD70;
      long long v85 = v42;
      re::internal::addFace((unint64_t *)&v67, &v80);
      a2[5] = v73 - v40;
    }
    else
    {
      int v43 = *a3;
      int v44 = a3[1];
      int v45 = a3[2];
      unint64_t v46 = (2 * (v45 * v44 + (v45 + v44) * v43));
      if (v76)
      {
        uint64_t v47 = (2 * (v45 + 1 + v44 + 1 + (v45 + 1 + v44 + 1) * v43 + (v45 + 1) * (v44 + 1)));
        uint64_t v48 = v77;
        uint64_t v49 = 8 * v76;
        do
        {
          uint64_t v50 = *v48++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 80))(v50, v47);
          v49 -= 8;
        }
        while (v49);
      }
      if (v72 < v46) {
        re::DynamicArray<re::BlendNode>::setCapacity(&v71, v46);
      }
      unint64_t v66 = a1;
      if (v78)
      {
        float v51 = v79;
        uint64_t v52 = 8 * v78;
        do
        {
          uint64_t v53 = *v51++;
          (*(void (**)(uint64_t, unint64_t))(*(void *)v53 + 80))(v53, v46);
          v52 -= 8;
        }
        while (v52);
      }
      uint64_t v54 = 0;
      unsigned int v55 = *a3;
      unsigned int v56 = a3[1];
      unsigned int v65 = a3[2];
      float32x4_t v86 = 0u;
      float32x4_t v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      float32x2_t v57 = vmul_f32(*(float32x2_t *)(a3 + 6), (float32x2_t)0x3F0000003F000000);
      float v58 = *((float *)a3 + 5) * 0.5;
      float32x4_t v80 = 0u;
      float32x4_t v81 = 0u;
      int8x8_t v59 = (int8x8_t)vneg_f32(v57);
      uint64_t v60 = &v80.f32[2];
      do
      {
        *((int8x8_t *)v60 - 1) = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v54), (int8x8_t)0x200000001)), v59, (int8x8_t)v57);
        if ((v54 & 4) != 0) {
          float v61 = v58;
        }
        else {
          float v61 = -v58;
        }
        *uint64_t v60 = v61;
        v60 += 4;
        ++v54;
      }
      while (v54 != 8);
      re::internal::addGrid(&v67, (float32x4_t *)&v84, (float32x4_t *)&v85, &v87, &v86, v55, v56);
      *a2 = v56 * v55;
      re::internal::addGrid(&v67, &v86, &v87, (float32x4_t *)&v83, (float32x4_t *)&v82, v55, v65);
      a2[1] = v65 * v55;
      re::internal::addGrid(&v67, &v81, &v80, (float32x4_t *)&v82, (float32x4_t *)&v83, v55, v56);
      a2[2] = v56 * v55;
      re::internal::addGrid(&v67, &v80, &v81, (float32x4_t *)&v85, (float32x4_t *)&v84, v55, v65);
      a2[3] = v65 * v55;
      re::internal::addGrid(&v67, (float32x4_t *)&v85, &v81, (float32x4_t *)&v83, &v87, v65, v56);
      a2[4] = v65 * v56;
      re::internal::addGrid(&v67, &v80, (float32x4_t *)&v84, &v86, (float32x4_t *)&v82, v65, v56);
      a2[5] = v65 * v56;
      a1 = v66;
    }
    re::GeomMesh::operator=((uint64_t)a1, &v70);
    if (*((unsigned char *)a3 + 26)) {
      re::internal::mergeVertexPositions(a1, v62);
    }
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v75);
  uint64_t result = v71;
  if (v71)
  {
    if (v74) {
      return (*(uint64_t (**)(void))(*(void *)v71 + 40))();
    }
  }
  return result;
}

void re::buildBox(re::GeomMesh *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 26))
  {
    *(_OWORD *)&v22[12] = *(_OWORD *)(a2 + 12);
    *(_OWORD *)float v22 = *(_OWORD *)a2;
    v22[26] = 0;
    re::buildBox(a1, v22);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)v22, 0);
  re::internal::buildBoxHelper((re::internal *)v22, v25, (unsigned __int16 *)a2);
  re::DynamicArray<re::GeomMesh>::clear(a1);
  if (!*(_WORD *)a2 || !*(_WORD *)(a2 + 2) || !*(_WORD *)(a2 + 4))
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 6uLL, (re::GeomMesh *)v22);
    goto LABEL_24;
  }
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 6uLL);
  unint64_t v4 = 0;
  int v5 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = 0;
  memset(v19, 0, sizeof(v19));
  int v20 = 0;
  uint64_t v15 = 0;
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = 0;
  int v14 = 0;
  do
  {
    unint64_t v6 = v25[v4];
    re::DynamicArray<float>::resize((uint64_t)v12, v6);
    uint64_t v7 = v13;
    if (!v6) {
      goto LABEL_12;
    }
    uint64_t v8 = 0;
    uint64_t v9 = v15;
    do
    {
      if (v7 == v8)
      {
        *(void *)int v26 = 0;
        memset(v24, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v33[0] = 136315906;
        *(void *)&v33[1] = "operator[]";
        LOWORD(v33[3]) = 1024;
        *(_DWORD *)((char *)&v33[3] + 2) = 789;
        HIWORD(v33[4]) = 2048;
        *(void *)&v33[5] = v7;
        LOWORD(v33[7]) = 2048;
        *(void *)((char *)&v33[7] + 2) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        uint64_t v23 = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        memset(v33, 0, sizeof(v33));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v26 = 136315906;
        *(void *)&v26[4] = "operator[]";
        __int16 v27 = 1024;
        int v28 = 789;
        __int16 v29 = 2048;
        unint64_t v30 = v4;
        __int16 v31 = 2048;
        unint64_t v32 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v8) = v5 + v8;
      ++v8;
    }
    while (v6 != v8);
    v5 += v8;
LABEL_12:
    v11[0] = v15;
    v11[1] = v7;
    v10[0] = 0;
    v10[1] = 0;
    re::makeMeshFromFaces((unint64_t)v22, v11, v10, (uint64_t)v19, (uint64_t)v16, (unint64_t)v24);
    unint64_t v6 = *((void *)a1 + 2);
    if (v6 <= v4) {
      goto LABEL_27;
    }
    re::GeomMesh::operator=((re::GeomMesh *)(*((void *)a1 + 4) + 736 * v4), (re::GeomMesh *)v24);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v24);
    ++v4;
  }
  while (v4 != 6);
  if (v12[0] && v15) {
    (*(void (**)(void))(*(void *)v12[0] + 40))();
  }
  if (v16[0] && v18) {
    (*(void (**)(void))(*(void *)v16[0] + 40))();
  }
  if (v19[0])
  {
    if (v21) {
      (*(void (**)(void))(*(void *)v19[0] + 40))();
    }
  }
LABEL_24:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v22);
}

float re::internal::Decimator::findCornerVertices(float *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  unint64_t v4 = *(unsigned int *)a1;
  LOBYTE(v15) = 0;
  re::DynamicArray<unsigned char>::resize((void *)a2, v4, &v15);
  if (!*(_DWORD *)a1)
  {
    unsigned int v6 = 0;
    float v13 = 0.0;
    goto LABEL_19;
  }
  unint64_t v5 = 0;
  unsigned int v6 = 0;
  do
  {
    *(void *)&long long v17 = 0;
    *(void *)&long long v16 = 0;
    long long v15 = 0uLL;
    DWORD2(v16) = 0;
    re::GeomConnectivityManifold::fetchVertexIncidentFaces((re::GeomConnectivityManifold *)a1, v5, (_anonymous_namespace_ *)&v15);
    uint64_t v7 = v16;
    if (!(void)v16)
    {
      uint64_t v10 = 0;
LABEL_9:
      LODWORD(v7) = v10 == v7;
      goto LABEL_10;
    }
    if ((void)v16 != 1)
    {
      uint64_t v8 = 0;
      LODWORD(v7) = 0;
      unsigned int v9 = 1;
      do
      {
        uint64_t v7 = (v7
                          + re::GeomConnectivityManifold::isBoundaryFace((re::GeomConnectivityManifold *)a1, *(_DWORD *)(v17 + 4 * v8)));
        uint64_t v8 = v9;
        uint64_t v10 = v16;
      }
      while ((unint64_t)v16 > v9++);
      goto LABEL_9;
    }
LABEL_10:
    if ((void)v15 && (void)v17) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    if (v7)
    {
      if (*(void *)(a2 + 16) <= v5)
      {
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v15 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(unsigned char *)(*(void *)(a2 + 32) + v5) = 1;
      ++v6;
    }
    ++v5;
    unint64_t v12 = *(unsigned int *)a1;
  }
  while (v5 < v12);
  float v13 = (float)v12;
LABEL_19:
  float result = (float)v6 / v13;
  a1[143] = result;
  return result;
}

void re::internal::Decimator::convertMeshToCombinatorialMap(re::internal::Decimator *this, const re::GeomMesh *a2, re::GeomConnectivityManifold *a3)
{
  uint64_t v10 = this;
  if (*((_DWORD *)a2 + 2) == *((_DWORD *)a2 + 10))
  {
    if (re::GeomConnectivityManifold::buildIfManifold((unint64_t)a2, (unint64_t)this, a3))
    {
      re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()((uint64_t *)&v10, (unsigned int *)a2);
    }
    else
    {
      uint64_t v8 = 0;
      memset(v6, 0, sizeof(v6));
      int v7 = 0;
      re::GeomMesh::GeomMesh((re::GeomMesh *)v9, 0);
      re::makeManifold((unint64_t)a2, (re::GeomMesh *)v9, (uint64_t)v6);
      re::GeomConnectivityManifold::buildIfManifold((unint64_t)v9, (unint64_t)this, v5);
      re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()((uint64_t *)&v10, v9);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)v9);
      if (v6[0])
      {
        if (v8) {
          (*(void (**)(void))(*(void *)v6[0] + 40))();
        }
      }
    }
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)v9, 0);
    re::internal::Decimator::convertMeshToCombinatorialMap(this, (const re::GeomMesh *)v9);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v9);
  }
}

__n128 re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a2[4];
  re::DynamicArray<re::Vector3<float>>::resize(*a1 + 304, v4);
  uint64_t v5 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a2);
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      if (i == v6)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(v3 + 320) <= i) {
        goto LABEL_8;
      }
      __n128 result = *(__n128 *)(v5 + 16 * i);
      *(__n128 *)(*(void *)(v3 + 336) + 16 * i) = result;
    }
  }
  return result;
}

uint64_t re::internal::Decimator::filterValidComponents(re::GeomConnectivityManifold *a1, uint64_t a2, _DWORD *a3, void *a4, int *a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v10 = *((unsigned int *)a1 + 6);
  unint64_t v11 = *(unsigned int *)a1;
  re::DynamicArray<BOOL>::resize(a2, v10);
  LOBYTE(v37) = 0;
  uint64_t result = (uint64_t)re::DynamicArray<BOOL>::resize(a4, v11, &v37);
  *a3 = 0;
  *a5 = 0;
  if (*((unsigned char *)a1 + 565))
  {
    long long v35 = a5;
    uint64_t v36 = a3;
    unint64_t v34 = v11;
    if (v10)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 4;
      do
      {
        uint64_t result = re::GeomConnectivityManifold::isValidFace(a1, v13);
        if (result)
        {
          if (*((void *)a1 + 3) <= v13) {
            goto LABEL_39;
          }
          uint64_t v15 = *((void *)a1 + 5);
          unint64_t v16 = *(unsigned int *)(v15 + v14 - 4);
          unint64_t v17 = *((void *)a1 + 40);
          if (v17 <= v16) {
            goto LABEL_40;
          }
          unint64_t v18 = *(unsigned int *)(v15 + v14);
          if (v17 <= v18) {
            goto LABEL_41;
          }
          unint64_t v19 = *(unsigned int *)(v15 + v14 + 4);
          if (v17 <= v19) {
            goto LABEL_42;
          }
          if (*(void *)(a2 + 16) <= v13) {
            goto LABEL_43;
          }
          uint64_t v20 = *((void *)a1 + 42);
          float32x4_t v21 = *(float32x4_t *)(v20 + 16 * v16);
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v20 + 16 * v18), v21);
          float32x4_t v23 = vsubq_f32(*(float32x4_t *)(v20 + 16 * v19), v21);
          float32x4_t v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v22)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
          float32x4_t v25 = vmulq_f32(v24, v24);
          v25.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), v25)).f32[0];
          *(unsigned char *)(*(void *)(a2 + 32) + v13) = v25.f32[0] > 0.0;
          if (v25.f32[0] > 0.0)
          {
            unint64_t v26 = a4[2];
            if (v26 <= v16) {
              goto LABEL_44;
            }
            uint64_t v27 = a4[4];
            *(unsigned char *)(v27 + v16) = 1;
            if (v26 <= v18) {
              goto LABEL_45;
            }
            *(unsigned char *)(v27 + v18) = 1;
            if (v26 <= v19) {
              goto LABEL_46;
            }
            *(unsigned char *)(v27 + v19) = 1;
            ++*v36;
          }
        }
        ++v13;
        v14 += 16;
      }
      while (v10 != v13);
    }
    if (v34)
    {
      uint64_t v28 = 0;
      int v29 = *v35;
      uint64_t v30 = a4[2];
      uint64_t v31 = a4[4];
      while (v30 != v28)
      {
        if (*(unsigned char *)(v31 + v28)) {
          *long long v35 = ++v29;
        }
        if (v34 == ++v28) {
          return result;
        }
      }
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    if (v10)
    {
      unint64_t v32 = 0;
      do
      {
        uint64_t result = re::GeomConnectivityManifold::isValidFace(a1, v32);
        if (*(void *)(a2 + 16) <= v32) {
          goto LABEL_37;
        }
        *(unsigned char *)(*(void *)(a2 + 32) + v32) = result;
        if (result) {
          ++*a3;
        }
      }
      while (v10 != ++v32);
    }
    if (v11)
    {
      unint64_t v33 = 0;
      while (1)
      {
        uint64_t result = re::GeomConnectivityManifold::isValidVertex(a1, v33);
        if (a4[2] <= v33) {
          break;
        }
        *(unsigned char *)(a4[4] + v33) = result;
        if (result) {
          ++*a5;
        }
        if (v11 == ++v33) {
          return result;
        }
      }
LABEL_38:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::isValidFace(re::GeomConnectivityManifold *this, int a2)
{
  unint64_t v2 = (4 * a2);
  if (*((void *)this + 13) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v3 = *(unsigned int *)(*((void *)this + 15) + 4 * v2);
  if (*((void *)this + 8) <= v3) {
    goto LABEL_5;
  }
  return *(_DWORD *)(*((void *)this + 10) + 4 * v3) >> 31;
}

uint64_t re::GeomConnectivityManifold::isValidVertex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 18) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v2 = *(unsigned int *)(*((void *)this + 20) + 4 * a2);
  if (*((void *)this + 8) <= v2) {
    goto LABEL_5;
  }
  return *(_DWORD *)(*((void *)this + 10) + 4 * v2) >> 31;
}

uint64_t re::internal::Decimator::convertCombinatorialMapToMesh(re::internal::Decimator *this, re::GeomMesh *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v8 = &v47;
  v41[1] = 0;
  unint64_t v42 = 0;
  uint64_t v40 = 0;
  v41[0] = 0;
  int v43 = 0;
  v37[1] = 0;
  long long v38 = 0;
  v37[0] = 0;
  int v39 = 0;
  re::internal::Decimator::filterValidComponents(this, (uint64_t)v41, (_DWORD *)&v45 + 1, v37, (int *)&v45);
  uint64_t v36 = 0;
  v33[1] = 0;
  unint64_t v34 = 0;
  v33[0] = 0;
  int v35 = 0;
  re::DynamicArray<unsigned int>::resize(v33, *(unsigned int *)this, &re::kInvalidMeshIndex);
  unsigned int v9 = v38;
  if (v38)
  {
    unint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = v40;
    unint64_t v13 = (unint64_t)v34;
    uint64_t v14 = v36;
    do
    {
      if (*((unsigned char *)v10 + v12))
      {
        if (v13 <= (unint64_t)v10) {
          goto LABEL_52;
        }
        *(_DWORD *)(v14 + 4 * (void)v10) = v11++;
      }
      unint64_t v10 = (unsigned int *)((char *)v10 + 1);
    }
    while (v9 != v10);
  }
  unint64_t v10 = &v48;
  bzero(&v47, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v48);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v52, "vertexPosition", 1, 7);
  if (v48 > v45 && v50 && (v50 - 1) > v50)
  {
    while (1)
      ;
  }
  unsigned int v48 = v45;
  unsigned int v53 = v45;
  if (v54)
  {
    uint64_t v15 = v55;
    uint64_t v16 = 8 * v54;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v53);
      v16 -= 8;
    }
    while (v16);
  }
  unint64_t v13 = HIDWORD(v45);
  if (HIDWORD(v45) < v50)
  {
    int v18 = v60;
    if (v60)
    {
      LODWORD(v2) = 0;
      unint64_t v3 = (char **)v59;
      do
      {
        unint64_t v19 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v59, v2);
        re::internal::accessFaceVaryingAttributeSubmesh(v19, v20);
        unint64_t v2 = (char **)(v2 + 1);
      }
      while (v18 != v2);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v49, v13);
  unsigned int v56 = v13;
  if (v57)
  {
    float32x4_t v21 = v58;
    unint64_t v13 = 8 * v57;
    do
    {
      uint64_t v22 = *v21++;
      (*(void (**)(uint64_t, void))(*(void *)v22 + 72))(v22, v56);
      v13 -= 8;
    }
    while (v13);
  }
  unint64_t v23 = v42;
  if (v42)
  {
    uint64_t v24 = 0;
    unint64_t v3 = 0;
    unint64_t v13 = 0;
    do
    {
      if (*((unsigned char *)v3 + v44))
      {
        uint64_t v8 = (char **)*((void *)this + 3);
        if (v8 <= v3) {
          goto LABEL_53;
        }
        float32x4_t v25 = (unsigned int *)(*((void *)this + 5) + v24);
        uint64_t v5 = (char **)*v25;
        unint64_t v2 = v34;
        if (v34 <= v5) {
          goto LABEL_54;
        }
        unint64_t v4 = (char **)v25[1];
        if (v34 <= v4) {
          goto LABEL_55;
        }
        uint64_t v8 = (char **)v25[2];
        if (v34 <= v8) {
          goto LABEL_56;
        }
        re::GeomMeshBuilder::setFaceVertices((uint64_t)&v47, v13, *(_DWORD *)(v36 + 4 * (void)v5), *(_DWORD *)(v36 + 4 * (void)v4), *(_DWORD *)(v36 + 4 * (void)v8));
        unint64_t v13 = (v13 + 1);
        unint64_t v23 = v42;
      }
      unint64_t v3 = (char **)((char *)v3 + 1);
      v24 += 16;
    }
    while (v23 > (unint64_t)v3);
  }
  unint64_t v26 = (re *)re::GeomMesh::operator=((uint64_t)a2, &v48);
  re::GeomMesh::setName(v26, v47);
  re::GeomMesh::freeName((re *)&v47);
  uint64_t v27 = re::GeomMesh::modifyVertexPositions(a2);
  unint64_t v29 = (unint64_t)v38;
  if (v38)
  {
    LODWORD(v30) = v28;
    uint64_t v31 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v8 = v34;
      if (v34 <= (char **)v10) {
        break;
      }
      unint64_t v13 = *(unsigned int *)(v36 + 4 * (void)v10);
      if (v13 != -1)
      {
        uint64_t v8 = (char **)*((void *)this + 40);
        if (v8 <= (char **)v10) {
          goto LABEL_57;
        }
        if (v13 >= v28) {
          goto LABEL_58;
        }
        *(_OWORD *)(v27 + 16 * v13) = *(_OWORD *)(*((void *)this + 42) + v31);
        unint64_t v29 = (unint64_t)v38;
      }
      unint64_t v10 = (unsigned int *)((char *)v10 + 1);
      v31 += 16;
      if (v29 <= (unint64_t)v10) {
        goto LABEL_38;
      }
    }
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 789;
    __int16 v64 = 2048;
    unsigned int v65 = (char **)v10;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    *(void *)float v61 = 0;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v68[0] = 136315906;
    *(void *)&v68[1] = "operator[]";
    LOWORD(v68[3]) = 1024;
    *(_DWORD *)((char *)&v68[3] + 2) = 789;
    HIWORD(v68[4]) = 2048;
    *(void *)&v68[5] = v10;
    LOWORD(v68[7]) = 2048;
    *(void *)((char *)&v68[7] + 2) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 797;
    __int16 v64 = 2048;
    unsigned int v65 = v3;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 789;
    __int16 v64 = 2048;
    unsigned int v65 = v5;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 789;
    __int16 v64 = 2048;
    unsigned int v65 = v4;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 789;
    __int16 v64 = 2048;
    unsigned int v65 = v8;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    uint64_t v46 = 0;
    uint64_t v30 = v61;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 797;
    __int16 v64 = 2048;
    unsigned int v65 = (char **)v10;
    __int16 v66 = 2048;
    unint64_t v67 = (unint64_t)v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_58:
    uint64_t v46 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v68, 0, sizeof(v68));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v61 = 136315906;
    *(void *)&v61[4] = "operator[]";
    __int16 v62 = 1024;
    int v63 = 609;
    __int16 v64 = 2048;
    unsigned int v65 = (char **)v13;
    __int16 v66 = 2048;
    unint64_t v67 = v30;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_38:
  re::GeomMesh::freeName((re *)&v47);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v52);
  if (v49 && v51) {
    (*(void (**)(void))(*(void *)v49 + 40))();
  }
  if (v33[0] && v36) {
    (*(void (**)(void))(*(void *)v33[0] + 40))();
  }
  if (v37[0] && v40) {
    (*(void (**)(void))(*(void *)v37[0] + 40))();
  }
  uint64_t result = v41[0];
  if (v41[0] && v44) {
    return (*(uint64_t (**)(void))(*(void *)v41[0] + 40))();
  }
  return result;
}

double re::internal::Decimator::computeCentroidOfVertexPairOneRing(re::internal::Decimator *this, unsigned int *a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  v19[1] = 0;
  uint64_t v20 = 0;
  v19[0] = 0;
  int v21 = 0;
  float32x4_t v6 = 0uLL;
  char v7 = 1;
  do
  {
    float32x4_t v17 = v6;
    char v8 = v7;
    unsigned int v9 = a2[v7 & 1];
    re::GeomConnectivityManifold::fetchVertexOneRing(this, a2[v4], (uint64_t)v19);
    uint64_t v11 = v20;
    if (v20)
    {
      uint64_t v12 = v22;
      float32x4_t v6 = v17;
      do
      {
        unsigned int v14 = *v12++;
        unint64_t v13 = v14;
        if (v14 != v9)
        {
          unint64_t v15 = *((void *)this + 40);
          if (v15 <= v13)
          {
            uint64_t v23 = 0;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v32 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v24 = 136315906;
            float32x4_t v25 = "operator[]";
            __int16 v26 = 1024;
            int v27 = 797;
            __int16 v28 = 2048;
            unint64_t v29 = v13;
            __int16 v30 = 2048;
            unint64_t v31 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          ++v5;
          float32x4_t v10 = *(float32x4_t *)(*((void *)this + 42) + 16 * v13);
          float32x4_t v6 = vaddq_f32(v6, v10);
        }
        --v11;
      }
      while (v11);
    }
    else
    {
      float32x4_t v6 = v17;
    }
    char v7 = 0;
    uint64_t v4 = 1;
  }
  while ((v8 & 1) != 0);
  if (v19[0] && v22)
  {
    float32x4_t v18 = v6;
    (*(void (**)(void))(*(void *)v19[0] + 40))();
    float32x4_t v6 = v18;
  }
  v10.f32[0] = (float)v5;
  v10.i64[0] = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0)).u64[0];
  return *(double *)v10.i64;
}

void re::internal::Decimator::updateEdgeData(re::internal::Decimator *this, unsigned int a2)
{
  char v7 = this;
  uint64_t v159 = *MEMORY[0x263EF8340];
  re::GeomConnectivityManifold::edgeVertices(this, a2, &v144);
  unint64_t isBoundaryVertex = v144;
  unint64_t v9 = *((void *)v7 + 45);
  if (v9 <= v144)
  {
    v142.i64[0] = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = isBoundaryVertex;
    __int16 v152 = 2048;
    unint64_t v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  unint64_t v2 = v145;
  if (v9 <= v145)
  {
LABEL_66:
    v142.i64[0] = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = v2;
    __int16 v152 = 2048;
    unint64_t v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  unint64_t v9 = *((void *)v7 + 40);
  if (v9 <= v144)
  {
LABEL_67:
    v142.i64[0] = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = isBoundaryVertex;
    __int16 v152 = 2048;
    unint64_t v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  if (v9 <= v145)
  {
LABEL_68:
    v142.i64[0] = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = v2;
    __int16 v152 = 2048;
    unint64_t v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v10 = *((void *)v7 + 47);
  uint64_t v11 = (float64x2_t *)(v10 + 80 * v144);
  uint64_t v12 = (float64x2_t *)(v10 + 80 * v145);
  double v13 = v11[1].f64[0];
  double v14 = v11[1].f64[1];
  double v15 = v11[2].f64[0];
  double v16 = v11[2].f64[1];
  double v17 = v11[3].f64[0];
  double v18 = v11[3].f64[1];
  double v19 = v11[4].f64[0];
  double v20 = v11[4].f64[1];
  float64x2_t v21 = *v11;
  float64x2_t v22 = *v12;
  double v24 = v12[1].f64[0];
  double v23 = v12[1].f64[1];
  double v26 = v12[2].f64[0];
  double v25 = v12[2].f64[1];
  double v27 = v12[3].f64[0];
  double v28 = v12[3].f64[1];
  double v29 = v12[4].f64[0];
  double v30 = v12[4].f64[1];
  uint64_t v31 = *((void *)v7 + 42);
  long long v32 = (float32x4_t *)(v31 + 16 * v144);
  long long v33 = (float32x4_t *)(v31 + 16 * v145);
  float32x4_t v34 = *v32;
  float32x4_t v35 = *v33;
  v36.i64[0] = 0x3F0000003F000000;
  v36.i64[1] = 0x3F0000003F000000;
  float32x4_t v37 = vmulq_f32(vaddq_f32(*v32, *v33), v36);
  float32x4_t v142 = v37;
  unint64_t v2 = a2;
  unint64_t v3 = *((void *)v7 + 55);
  if (v3 <= a2)
  {
LABEL_69:
    uint64_t v143 = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = v2;
    __int16 v152 = 2048;
    unint64_t v153 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v38 = *((void *)v7 + 57) + 32 * a2;
  float32x4_t v39 = vsubq_f32(v35, v34);
  float32x4_t v40 = vmulq_f32(v39, v39);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]) >= 1.0e-10)goto LABEL_9; {
  *(float32x4_t *)uint64_t v38 = *v32;
  }
  unint64_t isBoundaryVertex = *((void *)v7 + 55);
  double v41 = 0.0;
  if (isBoundaryVertex <= v2)
  {
    uint64_t v143 = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    char v7 = (re::internal::Decimator *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = v2;
    __int16 v152 = 2048;
    unint64_t v153 = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    double v131 = v30;
    double v132 = v29;
    double v133 = v28;
    double v134 = v27;
    float64x2_t v139 = v22;
    float64x2_t v140 = v21;
    double v138 = v20;
    double v137 = v19;
    double v136 = v18;
    double v135 = v17;
    float32x4_t v130 = v37;
    unint64_t isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex(v7, isBoundaryVertex);
    int v42 = re::GeomConnectivityManifold::isBoundaryVertex(v7, v145);
    unint64_t v4 = v144;
    unint64_t v3 = *((void *)v7 + 50);
    if (v3 > v144)
    {
      unint64_t v5 = v145;
      if (v3 > v145)
      {
        v51.f64[1] = v139.f64[1];
        v50.f64[1] = v140.f64[1];
        float64x2_t v52 = vaddq_f64(v140, v139);
        v48.f64[0] = v13 + v24;
        double v53 = v14 + v23;
        double v54 = v15 + v26;
        v49.f64[0] = v16 + v25;
        double v55 = v135 + v134;
        v46.f64[0] = v136 + v133;
        v47.f64[0] = v137 + v132;
        double v56 = v138 + v131;
        uint64_t v57 = *((void *)v7 + 52);
        int v58 = *(unsigned __int8 *)(v57 + v144);
        int v59 = *(unsigned __int8 *)(v57 + v145);
        if (!v58 || v59)
        {
          if (v59 && !v58) {
            goto LABEL_30;
          }
          if ((isBoundaryVertex ^ 1 | v42))
          {
            if ((v42 ^ 1 | isBoundaryVertex))
            {
              if (v58) {
                _ZF = v59 == 0;
              }
              else {
                _ZF = 1;
              }
              char v61 = _ZF;
              if (isBoundaryVertex ^ 1 | v42 ^ 1) == 1 && (v61)
              {
                unint64_t isBoundaryVertex = *((void *)v7 + 55);
                if (isBoundaryVertex <= v2) {
                  goto LABEL_73;
                }
                uint64_t v62 = v130.i64[1];
                uint64_t v63 = v130.i64[0];
                float v64 = *(double *)(*((void *)v7 + 57) + 32 * v2 + 16);
                if (fabsf(v64) < 0.00001)
                {
                  if (*((_DWORD *)v7 + 137) == 1)
                  {
                    float64x2_t v141 = v52;
                    re::internal::Decimator::computeCentroidOfVertexPairOneRing(v7, &v144);
                    v49.f64[0] = v16 + v25;
                    v48.f64[0] = v13 + v24;
                    v47.f64[0] = v137 + v132;
                    double v55 = v135 + v134;
                    v46.f64[0] = v136 + v133;
                    double v53 = v14 + v23;
                    double v54 = v15 + v26;
                    double v56 = v138 + v131;
                    float64x2_t v52 = v141;
                  }
                  goto LABEL_31;
                }
                int v77 = *((_DWORD *)v7 + 136);
                if (v77 != 1)
                {
                  if (v77)
                  {
                    double v113 = v32->f32[0];
                    *(double *)&float32x2_t v114 = v32->f32[1];
                    *(double *)&float32x2_t v115 = v32->f32[2];
                    double v116 = v56
                         + v54 * *(double *)&v114 * *(double *)&v114
                         + v113 * v52.f64[0] * v113
                         + v46.f64[0] * *(double *)&v115 * *(double *)&v115
                         + (v48.f64[0] * v113 * *(double *)&v115
                          + vmuld_lane_f64(v113, v52, 1) * *(double *)&v114
                          + v49.f64[0] * *(double *)&v114 * *(double *)&v115
                          + v53 * v113
                          + v55 * *(double *)&v114
                          + v47.f64[0] * *(double *)&v115)
                         * 2.0;
                    v114.i32[0] = v33->i32[0];
                    v117.i32[0] = v33->i32[2];
                    v114.i32[1] = v130.i32[0];
                    float64x2_t v118 = vcvtq_f64_f32(v114);
                    v115.i32[1] = v130.i32[1];
                    v115.i32[0] = v33->i32[1];
                    float64x2_t v119 = vcvtq_f64_f32(v115);
                    v117.i32[1] = v130.i32[2];
                    float64x2_t v120 = vcvtq_f64_f32(v117);
                    float64x2_t v121 = vmlaq_f64(vmlaq_f64(vmulq_f64(vmulq_n_f64(v119, v54), v119), v118, vmulq_n_f64(v118, v52.f64[0])), v120, vmulq_n_f64(v120, v46.f64[0]));
                    float64x2_t v122 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vmulq_n_f64(v118, v48.f64[0]), v120), v119, vmulq_laneq_f64(v118, v52, 1)), v120, vmulq_n_f64(v119, v49.f64[0])), v118, v53), v119, v55), v120, v47.f64[0]);
                    __asm { FMOV            V1.2D, #2.0 }
                    float64x2_t v127 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v56, 0), vmlaq_f64(v121, _Q1, v122));
                    float32x4_t v128 = (uint64_t *)&v142;
                    if (v116 >= v127.f64[1]) {
                      __int16 v129 = &v142;
                    }
                    else {
                      __int16 v129 = v32;
                    }
                    if (v127.f64[0] < v127.f64[1]) {
                      float32x4_t v128 = (uint64_t *)v33;
                    }
                    if (v116 < v127.f64[0]) {
                      float32x4_t v128 = (uint64_t *)v129;
                    }
                    uint64_t v63 = *v128;
                    uint64_t v62 = v128[1];
                  }
                  else
                  {
                    double v78 = vmuld_lane_f64(v49.f64[0], v52, 1);
                    double v79 = -v52.f64[1];
                    double v80 = v48.f64[0] * v78
                        + v54 * v52.f64[0] * v46.f64[0]
                        + vmuld_lane_f64(v48.f64[0], v52, 1) * v49.f64[0]
                        + -(v52.f64[0] * v49.f64[0]) * v49.f64[0]
                        + vmuld_lane_f64(-v52.f64[1], v52, 1) * v46.f64[0]
                        + -(v48.f64[0] * v54) * v48.f64[0];
                    if (v80 > 0.0)
                    {
                      double v81 = 1.0 / v80;
                      v82.f64[0] = (v54 * v46.f64[0] - v49.f64[0] * v49.f64[0]) * (1.0 / v80);
                      v83.f64[0] = (v46.f64[0] * v79 + v48.f64[0] * v49.f64[0]) * (1.0 / v80);
                      v50.f64[0] = (v78 + -v48.f64[0] * v54) * v81;
                      double v84 = (v52.f64[0] * v46.f64[0] + -v48.f64[0] * v48.f64[0]) * v81;
                      v45.f64[0] = (v52.f64[1] * v48.f64[0] - v52.f64[0] * v49.f64[0]) * v81;
                      v43.f64[0] = (v54 * v52.f64[0] + v79 * v52.f64[1]) * v81;
                      float64x2_t v85 = vabsq_f64(v52);
                      double v86 = fabs(v48.f64[0]);
                      double v87 = vaddvq_f64(v85) + v86;
                      double v88 = fabs(v49.f64[0]);
                      double v89 = v85.f64[1] + fabs(v54) + v88;
                      if (v87 < v89) {
                        double v87 = v89;
                      }
                      double v90 = v86 + v88 + fabs(v46.f64[0]);
                      if (v87 < v90) {
                        double v87 = v90;
                      }
                      double v91 = fabs(v83.f64[0]);
                      double v92 = fabs(v50.f64[0]);
                      double v93 = v92 + fabs(v82.f64[0]) + v91;
                      double v94 = fabs(v45.f64[0]);
                      double v95 = v94 + v91 + fabs(v84);
                      if (v93 < v95) {
                        double v93 = v95;
                      }
                      double v96 = fabs(v43.f64[0]) + v92 + v94;
                      if (v93 < v96) {
                        double v93 = v96;
                      }
                      double v97 = v87 * v93;
                      if (v97 > 0.0 && 1.0 / v97 >= 0.000001)
                      {
                        v82.f64[1] = v83.f64[0];
                        v83.f64[1] = v84;
                        v98.f64[0] = v14 + v23;
                        v98.f64[1] = v135 + v134;
                        double v99 = vmulq_f64(v47, v50).f64[0];
                        v50.f64[1] = v45.f64[0];
                        float64x2_t v100 = vmulq_f64(v98, v82);
                        *(float *)v100.f64 = v99 + vaddvq_f64(v100);
                        *(float *)v100.f64 = -*(float *)v100.f64;
                        float v101 = vmulq_f64(v47, v45).f64[0] + vaddvq_f64(vmulq_f64(v98, v83));
                        float v102 = vmulq_f64(v47, v43).f64[0] + vaddvq_f64(vmulq_f64(v98, v50));
                        *((float *)v100.f64 + 1) = -v101;
                        *(float *)&v100.f64[1] = -v102;
                        uint64_t v62 = *(void *)&v100.f64[1];
                        uint64_t v63 = *(void *)&v100.f64[0];
                      }
                    }
                  }
LABEL_31:
                  *(void *)uint64_t v38 = v63;
                  *(void *)(v38 + 8) = v62;
                  unint64_t isBoundaryVertex = *((void *)v7 + 55);
                  if (isBoundaryVertex > v2)
                  {
                    double v41 = v56
                        + v54 * *((float *)&v63 + 1) * *((float *)&v63 + 1)
                        + *(float *)&v63 * v52.f64[0] * *(float *)&v63
                        + v46.f64[0] * *(float *)&v62 * *(float *)&v62
                        + (v48.f64[0] * *(float *)&v63 * *(float *)&v62
                         + vmuld_lane_f64(*(float *)&v63, v52, 1) * *((float *)&v63 + 1)
                         + v49.f64[0] * *((float *)&v63 + 1) * *(float *)&v62
                         + v53 * *(float *)&v63
                         + v55 * *((float *)&v63 + 1)
                         + v47.f64[0] * *(float *)&v62)
                        * 2.0;
                    goto LABEL_33;
                  }
                  goto LABEL_72;
                }
                float64x2_t v103 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v33->f32, *(float32x2_t *)v32->f32));
                LODWORD(v51.f64[0]) = v32->i32[2];
                v45.f64[0] = (float)(v33->f32[2] - *(float *)v51.f64);
                *(void *)&v104.f64[0] = vdupq_laneq_s64((int64x2_t)v52, 1).u64[0];
                v104.f64[1] = v15 + v26;
                v105.f64[0] = v13 + v24;
                v105.f64[1] = v16 + v25;
                v108.f64[0] = vmulq_f64(v48, v45).f64[0] + vaddvq_f64(vmulq_f64(v52, v103));
                float64_t v106 = vmulq_f64(v49, v45).f64[0] + vaddvq_f64(vmulq_f64(v104, v103));
                float64x2_t v107 = vmulq_f64(v46, v45);
                v107.f64[0] = v107.f64[0] + vaddvq_f64(vmulq_f64(v105, v103));
                v108.f64[1] = v106;
                double v109 = -(vmulq_f64(v45, v107).f64[0] + vaddvq_f64(vmulq_f64(v103, v108)));
                *(float *)&float64_t v106 = v109;
                float v110 = fabsf(*(float *)&v106);
                float v111 = 0.5;
                if (v110 < 0.00001
                  || (v112.f64[0] = v14 + v23,
                      v112.f64[1] = v135 + v134,
                      v51.f64[0] = *(float *)v51.f64,
                      float v75 = (vmulq_f64(v47, v45).f64[0]
                           + vaddvq_f64(vmulq_f64(v112, v103))
                           + vmulq_f64(v51, v107).f64[0]
                           + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v32->f32), v108)))
                          / v109,
                      float v111 = 0.0,
                      v75 < 0.0)
                  || (float v111 = 1.0, v75 > 1.0))
                {
                  float v75 = v111;
                }
              }
              else
              {
                float64x2_t v65 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v33->f32, *(float32x2_t *)v32->f32));
                LODWORD(v51.f64[0]) = v32->i32[2];
                v44.f64[0] = (float)(v33->f32[2] - *(float *)v51.f64);
                *(void *)&v66.f64[0] = vdupq_laneq_s64((int64x2_t)v52, 1).u64[0];
                v66.f64[1] = v15 + v26;
                v67.f64[0] = v13 + v24;
                v67.f64[1] = v16 + v25;
                v68.f64[0] = vmulq_f64(v48, v44).f64[0] + vaddvq_f64(vmulq_f64(v52, v65));
                float64x2_t v69 = vmulq_f64(v66, v65);
                v68.f64[1] = vmulq_f64(v49, v44).f64[0] + vaddvq_f64(v69);
                v69.f64[0] = vmulq_f64(v46, v44).f64[0] + vaddvq_f64(vmulq_f64(v67, v65));
                double v70 = -(vmulq_f64(v44, v69).f64[0] + vaddvq_f64(vmulq_f64(v65, v68)));
                float v71 = v70;
                float v72 = fabsf(v71);
                float v73 = 0.5;
                if (v72 < 0.00001
                  || (v74.f64[0] = v14 + v23,
                      v74.f64[1] = v135 + v134,
                      v51.f64[0] = *(float *)v51.f64,
                      float v75 = (vmulq_f64(v47, v44).f64[0]
                           + vaddvq_f64(vmulq_f64(v74, v65))
                           + vmulq_f64(v51, v69).f64[0]
                           + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v32->f32), v68)))
                          / v70,
                      float v73 = 0.0,
                      v75 < 0.0)
                  || (float v73 = 1.0, v75 > 1.0))
                {
                  float v75 = v73;
                }
              }
              float32x4_t v76 = vaddq_f32(vmulq_n_f32(*v32, 1.0 - v75), vmulq_n_f32(*v33, v75));
              uint64_t v62 = v76.i64[1];
              uint64_t v63 = v76.i64[0];
              goto LABEL_31;
            }
LABEL_30:
            uint64_t v63 = v33->i64[0];
            uint64_t v62 = v33->i64[1];
            goto LABEL_31;
          }
        }
        uint64_t v63 = v32->i64[0];
        uint64_t v62 = v32->i64[1];
        goto LABEL_31;
      }
LABEL_71:
      uint64_t v143 = 0;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v154 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v146 = 136315906;
      long long v147 = "operator[]";
      __int16 v148 = 1024;
      int v149 = 789;
      __int16 v150 = 2048;
      unint64_t v151 = v5;
      __int16 v152 = 2048;
      unint64_t v153 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_72:
      uint64_t v143 = 0;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v154 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v146 = 136315906;
      long long v147 = "operator[]";
      __int16 v148 = 1024;
      int v149 = 789;
      __int16 v150 = 2048;
      unint64_t v151 = v2;
      __int16 v152 = 2048;
      unint64_t v153 = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_73:
      uint64_t v143 = 0;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v154 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v146 = 136315906;
      long long v147 = "operator[]";
      __int16 v148 = 1024;
      int v149 = 789;
      __int16 v150 = 2048;
      unint64_t v151 = v2;
      __int16 v152 = 2048;
      unint64_t v153 = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_70:
    uint64_t v143 = 0;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v154 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v146 = 136315906;
    long long v147 = "operator[]";
    __int16 v148 = 1024;
    int v149 = 789;
    __int16 v150 = 2048;
    unint64_t v151 = v4;
    __int16 v152 = 2048;
    unint64_t v153 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
LABEL_33:
  *(double *)(*((void *)v7 + 57) + 32 * v2 + 16) = v41;
}

uint64_t re::internal::Decimator::checkForFlip(re::GeomConnectivityManifold *a1, unsigned int a2, int a3, float32x4_t *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v33 = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  int v32 = 0;
  re::GeomConnectivityManifold::fetchVertexIncidentFaces(a1, a2, (_anonymous_namespace_ *)v30);
  unint64_t v8 = *((void *)a1 + 40);
  if (v8 <= a2) {
    goto LABEL_31;
  }
  if (v31)
  {
    uint64_t v9 = *((void *)a1 + 42);
    unint64_t v10 = *((void *)a1 + 3);
    unint64_t v11 = 0xFFFFFFFFLL;
    unint64_t v12 = 0xFFFFFFFFLL;
    float32x4_t v13 = *a4;
    double v14 = v33;
    while (1)
    {
      unint64_t v15 = *v14;
      if (v10 <= v15) {
        break;
      }
      uint64_t v16 = 0;
      long long v35 = *(_OWORD *)(*((void *)a1 + 5) + 16 * v15);
      while (*((_DWORD *)&v35 + v16) != a2)
      {
        if (++v16 == 3) {
          goto LABEL_16;
        }
      }
      if (v16 > 1) {
        int v17 = -2;
      }
      else {
        int v17 = 1;
      }
      unint64_t v11 = *((unsigned int *)&v35 + (v17 + v16));
      if (v16) {
        uint64_t v18 = (v16 - 1);
      }
      else {
        uint64_t v18 = 2;
      }
      unint64_t v12 = *((unsigned int *)&v35 + v18);
LABEL_16:
      if (v11 != a3 && v12 != a3)
      {
        if (v8 <= v11) {
          goto LABEL_29;
        }
        if (v8 <= v12) {
          goto LABEL_30;
        }
        float32x4_t v19 = *(float32x4_t *)(v9 + 16 * v11);
        float32x4_t v20 = *(float32x4_t *)(v9 + 16 * a2);
        float32x4_t v21 = vsubq_f32(v19, v20);
        float32x4_t v22 = *(float32x4_t *)(v9 + 16 * v12);
        float32x4_t v23 = vsubq_f32(v22, v20);
        float32x4_t v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v21)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
        float32x4_t v25 = vsubq_f32(v19, v13);
        float32x4_t v26 = vsubq_f32(v22, v13);
        float32x4_t v27 = vmulq_f32(v24, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL)));
        if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), v27)).f32[0] <= 0.0)
        {
          uint64_t v28 = 0;
          goto LABEL_24;
        }
      }
      if (++v14 == &v33[v31]) {
        goto LABEL_22;
      }
    }
    uint64_t v34 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    float32x4_t v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 797;
    __int16 v40 = 2048;
    unint64_t v41 = v15;
    __int16 v42 = 2048;
    unint64_t v43 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    uint64_t v34 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    float32x4_t v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v11;
    __int16 v42 = 2048;
    unint64_t v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    uint64_t v34 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    float32x4_t v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = v12;
    __int16 v42 = 2048;
    unint64_t v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    *(void *)&long long v35 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v36 = 136315906;
    float32x4_t v37 = "operator[]";
    __int16 v38 = 1024;
    int v39 = 789;
    __int16 v40 = 2048;
    unint64_t v41 = a2;
    __int16 v42 = 2048;
    unint64_t v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_22:
  uint64_t v28 = 1;
LABEL_24:
  if (v30[0] && v33) {
    (*(void (**)(void))(*(void *)v30[0] + 40))();
  }
  return v28;
}

uint64_t re::GeomConnectivityManifold::isBoundaryVertex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 18) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v2 = *(unsigned int *)(*((void *)this + 20) + 4 * a2);
  if (*((void *)this + 8) <= v2) {
    goto LABEL_5;
  }
  return (*(_DWORD *)(*((void *)this + 10) + 4 * v2) >> 30) & 1;
}

uint64_t re::internal::Decimator::decimateOneEdge(re::internal::Decimator *this)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  unint64_t v5 = *((void *)this + 60);
  if (!v5) {
    return 0;
  }
  float32x4_t v6 = this;
  char v7 = (void *)((char *)this + 464);
  uint64_t v8 = *((void *)this + 62);
  *(_OWORD *)int v36 = *(_OWORD *)v8;
  double v37 = *(double *)(v8 + 16);
  if (v5 == 1)
  {
    *((void *)this + 60) = 0;
    ++*((_DWORD *)this + 122);
    goto LABEL_13;
  }
  unint64_t isBoundaryEdge = v5 - 1;
  if (v5 <= isBoundaryEdge)
  {
LABEL_63:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = isBoundaryEdge;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
  unint64_t v10 = (long long *)(v8 + 24 * isBoundaryEdge);
  long long v11 = *v10;
  *(void *)(v8 + 16) = *((void *)v10 + 2);
  *(_OWORD *)uint64_t v8 = v11;
  unint64_t v12 = *((void *)this + 60);
  if (!v12)
  {
LABEL_64:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = 0;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  unint64_t v5 = **((unsigned int **)this + 62);
  v1 = (unsigned int *)*((void *)this + 65);
  if ((unint64_t)v1 <= v5)
  {
LABEL_65:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  *(_DWORD *)(*((void *)this + 67) + 4 * v5) = 0;
  if (v12 < isBoundaryEdge)
  {
    if (*((void *)this + 59) < isBoundaryEdge) {
      re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)this + 58, isBoundaryEdge);
    }
    goto LABEL_11;
  }
  if (v12 > isBoundaryEdge)
  {
LABEL_11:
    *((void *)v6 + 60) = isBoundaryEdge;
    ++*((_DWORD *)v6 + 122);
  }
  re::internal::IndexedPriorityQueue::rebalance(v7, 0);
LABEL_13:
  unint64_t v5 = v36[0];
  unint64_t isBoundaryEdge = *((void *)v6 + 65);
  if (isBoundaryEdge <= v36[0])
  {
LABEL_61:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = isBoundaryEdge;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    uint64_t v38 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    __int16 v45 = 1024;
    int v46 = 789;
    __int16 v47 = 2048;
    unint64_t v48 = v5;
    __int16 v49 = 2048;
    unint64_t v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_63;
  }
  *(_DWORD *)(*((void *)v6 + 67) + 4 * v36[0]) = -1;
  if (!re::GeomConnectivityManifold::isCollapseEdgeSafe(v6, v5)) {
    return 0;
  }
  if (*((_DWORD *)v6 + 138) == 1)
  {
    re::GeomConnectivityManifold::edgeVertices(v6, v5, v39);
    if ((re::GeomConnectivityManifold::isBoundaryVertex(v6, v39[0]) & 1) != 0
      || (re::GeomConnectivityManifold::isBoundaryVertex(v6, v39[1]) & 1) != 0)
    {
      return 0;
    }
    *(void *)&long long v53 = 0;
    *(void *)&long long v52 = 0;
    long long v51 = 0uLL;
    DWORD2(v52) = 0;
    unsigned int VertexIncidentEdges = re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v39[0], (_anonymous_namespace_ *)&v51);
    BOOL v14 = 0;
    if (VertexIncidentEdges <= 0x20) {
      BOOL v14 = re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v39[1], (_anonymous_namespace_ *)&v51)+ VertexIncidentEdges < 0x21;
    }
    if ((void)v51 && (void)v53) {
      (*(void (**)(void))(*(void *)v51 + 40))(v51);
    }
    if (!v14) {
      return 0;
    }
  }
  unint64_t isBoundaryEdge = re::GeomConnectivityManifold::isBoundaryEdge(v6, v5);
  re::GeomConnectivityManifold::edgeVertices(v6, v5, &v42);
  v1 = (unsigned int *)*((void *)v6 + 55);
  if ((unint64_t)v1 <= v5)
  {
LABEL_66:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  unint64_t v15 = (float32x4_t *)(*((void *)v6 + 57) + 32 * v5);
  if (!*((unsigned char *)v6 + 556)) {
    goto LABEL_33;
  }
  while (1)
  {
    unsigned int v35 = 0;
    re::GeomConnectivityManifold::collapseEdgeWithoutSafetyCheck(v6, v5, &v35);
    if (!re::GeomConnectivityManifold::isValidVertex(v6, v35)) {
      goto LABEL_55;
    }
    unint64_t v5 = v35;
    unint64_t v16 = v42;
    if (v35 != v42) {
      break;
    }
    unint64_t v16 = v43;
    unint64_t v2 = *((void *)v6 + 45);
    if (v2 <= v43) {
      goto LABEL_68;
    }
    if (v2 <= v35) {
      goto LABEL_69;
    }
    uint64_t v17 = *((void *)v6 + 47);
    uint64_t v18 = (float64x2_t *)(v17 + 80 * v43);
    float32x4_t v19 = (float64x2_t *)(v17 + 80 * v35);
    float64x2_t v20 = vaddq_f64(v18[1], v19[1]);
    *float32x4_t v19 = vaddq_f64(*v18, *v19);
    v19[1] = v20;
    float64x2_t v21 = vaddq_f64(v18[3], v19[3]);
    void v19[2] = vaddq_f64(v18[2], v19[2]);
    void v19[3] = v21;
    v19[4] = vaddq_f64(v18[4], v19[4]);
    unint64_t v2 = *((void *)v6 + 50);
    if (v2 <= v16) {
      goto LABEL_70;
    }
    if (v2 > v5) {
      goto LABEL_41;
    }
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    float32x4_t v6 = (re::internal::Decimator *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    if (!re::internal::Decimator::checkForFlip(v6, v42, v43, v15)
      || !re::internal::Decimator::checkForFlip(v6, v43, v42, v15))
    {
      return 0;
    }
  }
  unint64_t v2 = *((void *)v6 + 45);
  if (v2 <= v42) {
    goto LABEL_71;
  }
  unint64_t v5 = v43;
  if (v2 <= v43)
  {
LABEL_72:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v24 = *((void *)v6 + 47);
  float32x4_t v25 = (float64x2_t *)(v24 + 80 * v42);
  float32x4_t v26 = (float64x2_t *)(v24 + 80 * v43);
  float64x2_t v27 = vaddq_f64(v25[1], v26[1]);
  *float32x4_t v26 = vaddq_f64(*v25, *v26);
  v26[1] = v27;
  float64x2_t v28 = vaddq_f64(v25[3], v26[3]);
  v26[2] = vaddq_f64(v25[2], v26[2]);
  v26[3] = v28;
  v26[4] = vaddq_f64(v25[4], v26[4]);
  unint64_t v2 = *((void *)v6 + 50);
  if (v2 <= v16)
  {
LABEL_73:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    unint64_t v34 = v16;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v34;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 <= v5) {
    goto LABEL_74;
  }
LABEL_41:
  *(unsigned char *)(*((void *)v6 + 52) + v5) |= *(unsigned char *)(*((void *)v6 + 52) + v16);
  unint64_t v5 = v35;
  unint64_t v2 = *((void *)v6 + 40);
  if (v2 <= v35)
  {
LABEL_67:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    unint64_t v31 = v16;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v31;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v5;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    unint64_t v32 = v16;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v32;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    *(void *)long long v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    unint64_t v33 = v16;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(void *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(void *)&v39[5] = v33;
    __int16 v40 = 2048;
    *(void *)unint64_t v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  *(float32x4_t *)(*((void *)v6 + 42) + 16 * v35) = *v15;
  *(void *)&void v41[2] = 0;
  memset(v39, 0, sizeof(v39));
  re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v5, (_anonymous_namespace_ *)v39);
  if (*(void *)&v39[4])
  {
    v1 = *(unsigned int **)&v41[2];
    unint64_t v2 = 4 * *(void *)&v39[4];
    while (1)
    {
      unint64_t v5 = *v1;
      re::internal::Decimator::updateEdgeData(v6, *v1);
      unint64_t v3 = *((void *)v6 + 65);
      if (v3 <= v5) {
        break;
      }
      unint64_t v3 = *(unsigned int *)(*((void *)v6 + 67) + 4 * v5);
      if (v3 == -1)
      {
        unint64_t v3 = *((void *)v6 + 55);
        if (v3 <= v5) {
          goto LABEL_62;
        }
        *(void *)&v36[2] = *(void *)(*((void *)v6 + 57) + 32 * v5 + 16);
        LODWORD(v51) = v5;
        *((void *)&v51 + 1) = *(void *)&v36[2];
        *(void *)&long long v52 = 0;
        double v30 = (unsigned int *)&v51;
      }
      else
      {
        unint64_t v4 = *((void *)v6 + 60);
        if (v4 <= v3) {
          goto LABEL_59;
        }
        uint64_t v29 = *((void *)v6 + 62) + 24 * v3;
        *(_OWORD *)int v36 = *(_OWORD *)v29;
        double v37 = *(double *)(v29 + 16);
        unint64_t v3 = *((void *)v6 + 55);
        if (v3 <= v5) {
          goto LABEL_60;
        }
        *(void *)&v36[2] = *(void *)(*((void *)v6 + 57) + 32 * v5 + 16);
        double v37 = v37 + 1.0;
        double v30 = v36;
      }
      re::internal::IndexedPriorityQueue::pushOrChangeCost(v7, v30);
      ++v1;
      v2 -= 4;
      if (!v2) {
        goto LABEL_52;
      }
    }
    uint64_t v38 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    __int16 v45 = 1024;
    int v46 = 797;
    __int16 v47 = 2048;
    unint64_t v48 = v5;
    __int16 v49 = 2048;
    unint64_t v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    uint64_t v38 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    __int16 v45 = 1024;
    int v46 = 797;
    __int16 v47 = 2048;
    unint64_t v48 = v3;
    __int16 v49 = 2048;
    unint64_t v50 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    uint64_t v38 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    __int16 v45 = 1024;
    int v46 = 789;
    __int16 v47 = 2048;
    unint64_t v48 = v5;
    __int16 v49 = 2048;
    unint64_t v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_61;
  }
LABEL_52:
  if (*(void *)v39 && *(void *)&v41[2]) {
    (*(void (**)(void, void))(**(void **)v39 + 40))(*(void *)v39, *(void *)&v41[2]);
  }
LABEL_55:
  if (isBoundaryEdge) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t re::GeomConnectivityManifold::isBoundaryEdge(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 28) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v2 = *(unsigned int *)(*((void *)this + 30) + 4 * a2);
  if (*((void *)this + 8) <= v2) {
    goto LABEL_5;
  }
  return (*(_DWORD *)(*((void *)this + 10) + 4 * v2) >> 30) & 1;
}

void *re::internal::IndexedPriorityQueue::pushOrChangeCost(void *this, unsigned int *a2)
{
  unint64_t v2 = *a2;
  if (this[7] <= v2)
  {
LABEL_23:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = this;
  unint64_t v5 = *(unsigned int *)(this[9] + 4 * v2);
  if (v5 == -1)
  {
    return re::internal::IndexedPriorityQueue::push(this, a2);
  }
  else
  {
    if (this[2] <= v5) {
      goto LABEL_24;
    }
    uint64_t v6 = this[4];
    uint64_t v7 = v6 + 24 * v5;
    double v8 = *(double *)(v7 + 8);
    double v9 = *((double *)a2 + 1);
    if ((v8 - v9) * (v8 - v9) <= 1.0e-12)
    {
      double v8 = *(double *)(v6 + 24 * v5 + 16);
      double v9 = *((double *)a2 + 2);
    }
    if (v8 <= v9)
    {
      if (v8 < v9)
      {
        long long v16 = *(_OWORD *)a2;
        *(void *)(v7 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v7 = v16;
        return re::internal::IndexedPriorityQueue::rebalance(this, v5);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v10;
      if (v5)
      {
        while (1)
        {
          unsigned int v11 = v5 - 1;
          unint64_t v12 = (v5 - 1) >> 1;
          if (v4[2] <= v12) {
            break;
          }
          uint64_t v13 = v4[4];
          double v14 = *(double *)(v13 + 24 * v12 + 8);
          double v15 = *((double *)a2 + 1);
          if ((v14 - v15) * (v14 - v15) <= 1.0e-12)
          {
            double v14 = *(double *)(v13 + 24 * v12 + 16);
            double v15 = *((double *)a2 + 2);
          }
          if (v14 > v15)
          {
            this = re::internal::IndexedPriorityQueue::swap(v4, v5, v11 >> 1);
            LODWORD(v5) = v11 >> 1;
            if (v11 >= 2) {
              continue;
            }
          }
          return this;
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_23;
      }
    }
  }
  return this;
}

void *re::internal::Decimator::computeQuadrics(void *this)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v128 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(unsigned int *)this;
  unint64_t v6 = this[45];
  if (v6 >= v5)
  {
    if (v6 <= v5) {
      goto LABEL_10;
    }
  }
  else
  {
    if (this[44] < v5)
    {
      this = re::DynamicArray<re::internal::Quadric>::setCapacity(this + 43, v5);
      unint64_t v6 = *(void *)(v4 + 360);
    }
    unint64_t v7 = v5 - v6;
    if (v5 > v6)
    {
      uint64_t v8 = 80 * v6;
      do
      {
        double v9 = (_OWORD *)(*(void *)(v4 + 376) + v8);
        v9[3] = 0uLL;
        v9[4] = 0uLL;
        v9[1] = 0uLL;
        v9[2] = 0uLL;
        *double v9 = 0uLL;
        v8 += 80;
        --v7;
      }
      while (v7);
    }
  }
  *(void *)(v4 + 360) = v5;
  ++*(_DWORD *)(v4 + 368);
  unint64_t v6 = v5;
LABEL_10:
  uint64_t v112 = 0;
  v109[1] = 0;
  unint64_t v110 = 0;
  v109[0] = 0;
  int v111 = 0;
  if (v5)
  {
    unint64_t v10 = 0;
    unint64_t v103 = v5;
    do
    {
      if (v6 <= v10) {
        goto LABEL_79;
      }
      unsigned int v11 = (_OWORD *)(*(void *)(v4 + 376) + 80 * v10);
      v11[3] = 0u;
      v11[4] = 0u;
      v11[1] = 0u;
      void v11[2] = 0u;
      *unsigned int v11 = 0u;
      re::GeomConnectivityManifold::fetchVertexIncidentFaces((re::GeomConnectivityManifold *)v4, v10, (_anonymous_namespace_ *)v109);
      unint64_t v12 = v110;
      if (v110)
      {
        unint64_t v13 = 0;
        unsigned int v14 = 0;
        float64x2_t v107 = 0u;
        float64x2_t v108 = 0u;
        float64x2_t v104 = 0u;
        float64x2_t v105 = 0u;
        float64x2_t v106 = 0u;
        while (1)
        {
          unint64_t v6 = *(unsigned int *)(v112 + 4 * v13);
          unint64_t v15 = *(void *)(v4 + 24);
          if (v15 <= v6) {
            break;
          }
          long long v16 = (unsigned int *)(*(void *)(v4 + 40) + 16 * v6);
          unint64_t v15 = *v16;
          unint64_t v3 = *(void *)(v4 + 320);
          if (v3 <= v15) {
            goto LABEL_69;
          }
          unint64_t v1 = v16[1];
          if (v3 <= v1) {
            goto LABEL_70;
          }
          unint64_t v2 = v16[2];
          if (v3 <= v2) {
            goto LABEL_71;
          }
          uint64_t v17 = *(void *)(v4 + 336);
          float32x4_t v18 = *(float32x4_t *)(v17 + 16 * v15);
          float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v1), v18);
          float32x4_t v20 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v2), v18);
          float32x4_t v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v19)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL));
          float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL);
          if (!*(unsigned char *)(v4 + 564))
          {
            float32x4_t v23 = vmulq_f32(v21, v21);
            float v24 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), v23)).f32[0];
            if (v24 > 0.0)
            {
              float v25 = v24;
              float32x2_t v26 = vrsqrte_f32((float32x2_t)LODWORD(v24));
              float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v26, v26)));
              float32x4_t v22 = vmulq_n_f32(v22, vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v27, v27))).f32[0]);
            }
          }
          unint64_t v15 = *(void *)(v4 + 360);
          if (v15 <= v10) {
            goto LABEL_72;
          }
          float32x4_t v28 = vmulq_f32(v18, v22);
          v28.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
          uint64_t v29 = (float64x2_t *)(*(void *)(v4 + 376) + 80 * v10);
          float32x2_t v30 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2);
          v31.i32[0] = v30.i32[0];
          v31.f32[1] = -v28.f32[0];
          float64x2_t v32 = vaddq_f64(v29[1], vcvtq_f64_f32(vmul_n_f32(v31, v22.f32[0])));
          float64x2_t *v29 = vaddq_f64(*v29, vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v22.f32, v22.f32[0])));
          v29[1] = v32;
          float32x2_t v33 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
          float64x2_t v34 = vaddq_f64(v29[2], vcvtq_f64_f32(vmul_lane_f32(v33, *(float32x2_t *)v22.f32, 1)));
          HIDWORD(v32.f64[0]) = v30.i32[1];
          *(float *)v32.f64 = -v28.f32[0];
          float64x2_t v35 = vaddq_f64(v29[3], vcvtq_f64_f32(vmul_f32(v33, *(float32x2_t *)&v32.f64[0])));
          v29[2] = v34;
          v29[3] = v35;
          v30.i32[1] = v28.i32[0];
          HIDWORD(v34.f64[0]) = v28.i32[0];
          *(float *)v34.f64 = -v28.f32[0];
          v29[4] = vaddq_f64(v29[4], vcvtq_f64_f32(vmul_f32(v30, *(float32x2_t *)&v34.f64[0])));
          if (v12 <= v13) {
            goto LABEL_73;
          }
          if (re::GeomConnectivityManifold::isBoundaryFace((re::GeomConnectivityManifold *)v4, v6)
            && re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v10))
          {
            unint64_t v15 = v110;
            if (v110 <= v13) {
              goto LABEL_74;
            }
            unint64_t v15 = *(unsigned int *)(v112 + 4 * v13);
            unint64_t v6 = *(void *)(v4 + 24);
            if (v6 <= v15) {
              goto LABEL_75;
            }
            uint64_t v36 = 0;
            long long v114 = *(_OWORD *)(*(void *)(v4 + 40) + 16 * v15);
            LODWORD(v6) = -1;
            LODWORD(v13) = -1;
            do
            {
              uint64_t v37 = *(unsigned int *)((char *)&v114 + v36);
              if (v6 == -1) {
                unsigned int v38 = *(_DWORD *)((char *)&v114 + v36);
              }
              else {
                unsigned int v38 = v6;
              }
              if (v6 == -1 || v10 == v37) {
                unint64_t v13 = v13;
              }
              else {
                unint64_t v13 = v37;
              }
              if (v10 == v37) {
                unint64_t v6 = v6;
              }
              else {
                unint64_t v6 = v38;
              }
              v36 += 4;
            }
            while (v36 != 12);
            unint64_t v12 = *(void *)(v4 + 320);
            if (v12 <= v10) {
              goto LABEL_76;
            }
            if (v12 <= v6) {
              goto LABEL_77;
            }
            if (v12 <= v13) {
              goto LABEL_78;
            }
            uint64_t v40 = *(void *)(v4 + 336);
            int isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v6);
            int v42 = re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v13);
            if ((isBoundaryVertex & 1) != 0
              || (float64x2_t v43 = 0uLL, v44 = 0uLL, v45 = 0uLL, v46 = 0uLL, v47 = 0uLL, (v42 & 1) != 0))
            {
              float32x4_t v48 = *(float32x4_t *)(v40 + 16 * v10);
              float32x4_t v49 = vsubq_f32(*(float32x4_t *)(v40 + 16 * v6), v48);
              float32x4_t v50 = vsubq_f32(*(float32x4_t *)(v40 + 16 * v13), v48);
              float32x4_t v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
              float32x4_t v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL);
              float32x4_t v53 = vnegq_f32(v49);
              float32x4_t v54 = vmlaq_f32(vmulq_f32(v52, v53), v50, v51);
              float32x4_t v55 = vmulq_f32(v54, v54);
              float v56 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), v55)).f32[0];
              float64x2_t v57 = 0uLL;
              float32x4_t v58 = 0uLL;
              if (v56 > 0.0)
              {
                float v59 = v56;
                float32x2_t v60 = vrsqrte_f32((float32x2_t)LODWORD(v56));
                float32x2_t v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)LODWORD(v59), vmul_f32(v60, v60)));
                float32x4_t v58 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vmul_f32(v61, vrsqrts_f32((float32x2_t)LODWORD(v59), vmul_f32(v61, v61))).f32[0]);
              }
              float32x4_t v62 = vaddq_f32(v48, v58);
              float64x2_t v63 = 0uLL;
              float64x2_t v64 = 0uLL;
              float64x2_t v65 = 0uLL;
              float64x2_t v66 = 0uLL;
              if (isBoundaryVertex)
              {
                float32x4_t v67 = vsubq_f32(v62, v48);
                float32x4_t v68 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL), v53), v67, v51);
                float32x4_t v69 = vmulq_f32(v68, v68);
                float v70 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), v69)).f32[0];
                float32x4_t v71 = 0uLL;
                if (v70 > 0.0)
                {
                  float v72 = v70;
                  float32x2_t v73 = vrsqrte_f32((float32x2_t)LODWORD(v70));
                  float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)LODWORD(v72), vmul_f32(v73, v73)));
                  float32x4_t v71 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vmul_f32(v74, vrsqrts_f32((float32x2_t)LODWORD(v72), vmul_f32(v74, v74))).f32[0]);
                }
                float32x4_t v75 = vmulq_f32(v48, v71);
                float32x4_t v76 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)));
                v57.f64[0] = vmulq_f32(v71, v71).f32[0];
                v77.i32[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u32[0];
                v77.f32[1] = -v76.f32[0];
                v64.f64[0] = vmuls_lane_f32(v71.f32[1], *(float32x2_t *)v71.f32, 1);
                float v78 = vmuls_lane_f32(v71.f32[1], v71, 2);
                double v79 = vmuls_lane_f32(v76.f32[0], *(float32x2_t *)v71.f32, 1);
                float64_t v80 = vmuls_lane_f32(v71.f32[2], v71, 2);
                double v81 = vmuls_lane_f32(v76.f32[0], v71, 2);
                float64_t v82 = vmulq_f32(v76, v76).f32[0];
                double v83 = vmuls_lane_f32(v71.f32[0], *(float32x2_t *)v71.f32, 1) + 0.0;
                float64x2_t v63 = vaddq_f64(vcvtq_f64_f32(vmul_n_f32(v77, v71.f32[0])), (float64x2_t)0);
                double v84 = v78 + 0.0;
                v65.f64[0] = 0.0 - v79;
                v66.f64[0] = 0.0 - v81;
                v57.f64[1] = v83;
                v64.f64[1] = v84;
                v65.f64[1] = v80;
                v66.f64[1] = v82;
              }
              if (v42)
              {
                float32x4_t v85 = vsubq_f32(v62, v48);
                float32x4_t v86 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), vnegq_f32(v50)), v85, v52);
                float32x4_t v87 = vmulq_f32(v86, v86);
                float v88 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), v87)).f32[0];
                float32x4_t v89 = 0uLL;
                if (v88 > 0.0)
                {
                  float32x4_t v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL);
                  float v91 = v88;
                  float32x2_t v92 = vrsqrte_f32((float32x2_t)LODWORD(v88));
                  float32x2_t v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)LODWORD(v91), vmul_f32(v92, v92)));
                  float32x4_t v89 = vmulq_n_f32(v90, vmul_f32(v93, vrsqrts_f32((float32x2_t)LODWORD(v91), vmul_f32(v93, v93))).f32[0]);
                }
                float32x4_t v94 = vmulq_f32(v48, v89);
                float32x2_t v95 = (float32x2_t)vdup_laneq_s32((int32x4_t)v89, 2);
                v96.i32[0] = v95.i32[0];
                float32x2_t v97 = (float32x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL).u64[0];
                v98.i32[1] = v95.i32[1];
                v95.f32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).f32[0];
                v94.i32[1] = v95.i32[1];
                v94.f32[0] = -v95.f32[1];
                v96.f32[1] = -v95.f32[1];
                v98.f32[0] = -v95.f32[1];
                float64x2_t v57 = vaddq_f64(v57, vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v89.f32, v89.f32[0])));
                float64x2_t v63 = vaddq_f64(v63, vcvtq_f64_f32(vmul_n_f32(v96, v89.f32[0])));
                float64x2_t v64 = vaddq_f64(v64, vcvtq_f64_f32(vmul_lane_f32(v97, *(float32x2_t *)v89.f32, 1)));
                float64x2_t v65 = vaddq_f64(v65, vcvtq_f64_f32(vmul_f32(v97, v98)));
                float64x2_t v66 = vaddq_f64(v66, vcvtq_f64_f32(vmul_f32(v95, *(float32x2_t *)v94.f32)));
              }
              double v99 = *(float *)(v4 + 560);
              float64x2_t v43 = vmulq_n_f64(v57, v99);
              float64x2_t v44 = vmulq_n_f64(v63, v99);
              float64x2_t v45 = vmulq_n_f64(v64, v99);
              float64x2_t v46 = vmulq_n_f64(v65, v99);
              float64x2_t v47 = vmulq_n_f64(v66, v99);
            }
            float64x2_t v107 = vaddq_f64(v107, v45);
            float64x2_t v108 = vaddq_f64(v108, v43);
            float64x2_t v104 = vaddq_f64(v104, v44);
            float64x2_t v105 = vaddq_f64(v105, v46);
            float64x2_t v106 = vaddq_f64(v106, v47);
          }
          unint64_t v12 = v110;
          unint64_t v13 = ++v14;
          if (v110 <= v14) {
            goto LABEL_62;
          }
        }
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 797;
        __int16 v119 = 2048;
        unint64_t v120 = v6;
        __int16 v121 = 2048;
        unint64_t v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 797;
        __int16 v119 = 2048;
        unint64_t v120 = v15;
        __int16 v121 = 2048;
        unint64_t v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 797;
        __int16 v119 = 2048;
        unint64_t v120 = v1;
        __int16 v121 = 2048;
        unint64_t v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        unint64_t v10 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 797;
        __int16 v119 = 2048;
        unint64_t v120 = v2;
        __int16 v121 = 2048;
        unint64_t v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_72:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v10;
        __int16 v121 = 2048;
        unint64_t v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_73:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v13;
        __int16 v121 = 2048;
        unint64_t v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_74:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v13;
        __int16 v121 = 2048;
        unint64_t v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_75:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        unint64_t v10 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 797;
        __int16 v119 = 2048;
        unint64_t v120 = v15;
        __int16 v121 = 2048;
        unint64_t v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_76:
        uint64_t v113 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v10;
        __int16 v121 = 2048;
        unint64_t v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_77:
        uint64_t v113 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v6;
        __int16 v121 = 2048;
        unint64_t v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_78:
        uint64_t v113 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        unint64_t v10 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v13;
        __int16 v121 = 2048;
        unint64_t v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_79:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v10;
        __int16 v121 = 2048;
        unint64_t v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_80:
        *(void *)&long long v114 = 0;
        long long v126 = 0u;
        long long v127 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v123 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v115 = 136315906;
        double v116 = "operator[]";
        __int16 v117 = 1024;
        int v118 = 789;
        __int16 v119 = 2048;
        unint64_t v120 = v10;
        __int16 v121 = 2048;
        unint64_t v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float64x2_t v107 = 0u;
      float64x2_t v108 = 0u;
      float64x2_t v104 = 0u;
      float64x2_t v105 = 0u;
      float64x2_t v106 = 0u;
LABEL_62:
      unint64_t v6 = *(void *)(v4 + 360);
      if (v6 <= v10) {
        goto LABEL_80;
      }
      float64x2_t v100 = (float64x2_t *)(*(void *)(v4 + 376) + 80 * v10);
      float64x2_t v101 = vaddq_f64(v104, v100[1]);
      *float64x2_t v100 = vaddq_f64(v108, *v100);
      v100[1] = v101;
      float64x2_t v102 = vaddq_f64(v105, v100[3]);
      v100[2] = vaddq_f64(v107, v100[2]);
      v100[3] = v102;
      v100[4] = vaddq_f64(v106, v100[4]);
      ++v10;
    }
    while (v10 != v103);
    this = (void *)v109[0];
    if (v109[0])
    {
      if (v112) {
        return (void *)(*(uint64_t (**)(void))(*(void *)v109[0] + 40))();
      }
    }
  }
  return this;
}

void *re::internal::Decimator::initializeQueue(re::internal::Decimator *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 28);
  uint64_t v3 = v2;
  v18.__x_[0] = v2;
  uint64_t v4 = 1;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v5 = v2;
  do
  {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v5 = v4 + 1812433253 * (v5 ^ (v5 >> 30));
    v18.__x_[v4++] = v5;
  }
  while (v4 != 624);
  v18.__i_ = 0;
  *((void *)this + 60) = 0;
  ++*((_DWORD *)this + 122);
  if (*((void *)this + 59) < (unint64_t)v2) {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)this + 58, v2);
  }
  *((void *)this + 65) = 0;
  ++*((_DWORD *)this + 132);
  uint64_t result = re::DynamicArray<unsigned int>::resize((void *)this + 63, v2, &re::kInvalidMeshIndex);
  unint64_t v7 = *((void *)this + 55);
  if (v7 >= v2)
  {
    if (v7 <= v2) {
      goto LABEL_15;
    }
  }
  else
  {
    if (*((void *)this + 54) < (unint64_t)v2)
    {
      uint64_t result = re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity((void *)this + 53, v2);
      unint64_t v7 = *((void *)this + 55);
    }
    if (v7 < v2)
    {
      uint64_t v8 = *((void *)this + 57);
      double v9 = (void *)(v8 + 32 * v7);
      uint64_t v10 = v8 + 32 * v2 - (void)v9;
      if (v10 >= 1)
      {
        unint64_t v11 = ((unint64_t)v10 >> 5) + 1;
        do
        {
          *double v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
          v9 += 4;
          --v11;
        }
        while (v11 > 1);
      }
    }
  }
  *((void *)this + 55) = v2;
  ++*((_DWORD *)this + 112);
LABEL_15:
  if (v2)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 16;
    do
    {
      re::internal::Decimator::updateEdgeData(this, v12);
      unint64_t v14 = *((void *)this + 55);
      if (v14 <= v12)
      {
        uint64_t v19 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v28 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v20 = 136315906;
        float32x4_t v21 = "operator[]";
        __int16 v22 = 1024;
        int v23 = 789;
        __int16 v24 = 2048;
        unint64_t v25 = v12;
        __int16 v26 = 2048;
        unint64_t v27 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v15 = *(void *)(*((void *)this + 57) + v13);
      double v16 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v18);
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v18);
      LODWORD(v28) = v12;
      *((void *)&v28 + 1) = v15;
      *(double *)&long long v29 = (v16 + (double)v17 * 4294967300.0) * 5.42101086e-20 + 0.0;
      uint64_t result = re::internal::IndexedPriorityQueue::push((void *)this + 58, (unsigned int *)&v28);
      ++v12;
      v13 += 32;
    }
    while (v3 != v12);
  }
  return result;
}

void *re::internal::IndexedPriorityQueue::push(void *this, unsigned int *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[1];
  unint64_t v5 = this[2];
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*this)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(this, v10);
      }
      else
      {
        this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = v3[2];
  }
  uint64_t v11 = v3[4] + 24 * v5;
  long long v12 = *(_OWORD *)a2;
  *(void *)(v11 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  uint64_t v13 = v3[2] + 1;
  v3[2] = v13;
  ++*((_DWORD *)v3 + 6);
  unint64_t v14 = *a2;
  if (v3[7] <= v14) {
    goto LABEL_23;
  }
  unsigned int v15 = v13 - 1;
  *(_DWORD *)(v3[9] + 4 * v14) = v13 - 1;
  if (v13 != 1)
  {
    while (1)
    {
      unsigned int v16 = v15 - 1;
      unint64_t v17 = (v15 - 1) >> 1;
      unint64_t v18 = v3[2];
      if (v18 <= v17) {
        break;
      }
      if (v18 <= v15) {
        goto LABEL_22;
      }
      uint64_t v19 = v3[4];
      double v20 = *(double *)(v19 + 24 * v17 + 8);
      double v21 = *(double *)(v19 + 24 * v15 + 8);
      if ((v20 - v21) * (v20 - v21) <= 1.0e-12)
      {
        double v20 = *(double *)(v19 + 24 * v17 + 16);
        double v21 = *(double *)(v19 + 24 * v15 + 16);
      }
      if (v20 > v21)
      {
        this = re::internal::IndexedPriorityQueue::swap(v3, v15, v16 >> 1);
        unsigned int v15 = v16 >> 1;
        if (v16 > 1) {
          continue;
        }
      }
      return this;
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return this;
}

uint64_t re::internal::Decimator::clear(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 24) = 0;
  ++*(_DWORD *)(this + 32);
  *(void *)(this + 64) = 0;
  ++*(_DWORD *)(this + 72);
  *(void *)(this + 104) = 0;
  ++*(_DWORD *)(this + 112);
  *(void *)(this + 144) = 0;
  ++*(_DWORD *)(this + 152);
  *(void *)(this + 184) = 0;
  ++*(_DWORD *)(this + 192);
  *(void *)(this + 224) = 0;
  ++*(_DWORD *)(this + 232);
  *(void *)(this + 320) = 0;
  ++*(_DWORD *)(this + 328);
  *(void *)(this + 360) = 0;
  ++*(_DWORD *)(this + 368);
  *(void *)(this + 400) = 0;
  ++*(_DWORD *)(this + 408);
  *(void *)(this + 440) = 0;
  ++*(_DWORD *)(this + 448);
  *(void *)(this + 480) = 0;
  ++*(_DWORD *)(this + 488);
  *(void *)(this + 520) = 0;
  ++*(_DWORD *)(this + 528);
  int v1 = *(_DWORD *)(this + 640);
  *(void *)(this + 632) = 0;
  *(_DWORD *)(this + 640) = v1 + 2;
  *(void *)(this + 568) = 0;
  return this;
}

void *re::internal::Decimator::setMesh(re::internal::Decimator *this, const re::GeomMesh *a2)
{
  re::internal::Decimator::clear((uint64_t)this);
  re::internal::Decimator::convertMeshToCombinatorialMap(this, a2, v4);
  re::internal::Decimator::findCornerVertices((float *)this, (uint64_t)this + 384);
  re::internal::Decimator::computeQuadrics(this);
  uint64_t result = re::internal::Decimator::initializeQueue(this);
  *((_DWORD *)this + 142) = *((void *)this + 3);
  return result;
}

uint64_t re::internal::Decimator::decimateTo(re::internal::Decimator *this, unsigned int a2)
{
  if (*((_DWORD *)this + 138) == 2 && *((float *)this + 143) > 0.95) {
    return *((unsigned int *)this + 142);
  }
  for (uint64_t result = *((unsigned int *)this + 142);
        result > a2 && *((_DWORD *)this + 120);
        *((_DWORD *)this + 142) = result)
  {
    uint64_t result = *((_DWORD *)this + 142) - re::internal::Decimator::decimateOneEdge(this);
  }
  return result;
}

void *re::internal::IndexedPriorityQueue::rebalance(void *this, unsigned int a2)
{
  uint64_t v2 = this;
  for (unsigned int i = a2; ; a2 = i)
  {
    unsigned int v4 = (2 * a2) | 1;
    unint64_t v5 = v2[2];
    if (v4 < v5)
    {
      if (v5 <= v4)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v5 <= a2) {
        goto LABEL_21;
      }
      uint64_t v6 = v2[4];
      double v7 = *(double *)(v6 + 24 * v4 + 8);
      double v8 = *(double *)(v6 + 24 * a2 + 8);
      if ((v7 - v8) * (v7 - v8) <= 1.0e-12)
      {
        double v7 = *(double *)(v6 + 24 * v4 + 16);
        double v8 = *(double *)(v6 + 24 * a2 + 16);
      }
      if (v7 >= v8) {
        unsigned int i = a2;
      }
      else {
        unsigned int i = (2 * a2) | 1;
      }
    }
    unsigned int v9 = 2 * a2 + 2;
    if (v9 < v5)
    {
      if (v5 <= v9) {
        goto LABEL_22;
      }
      if (v5 <= i) {
        goto LABEL_23;
      }
      uint64_t v10 = v2[4];
      double v11 = *(double *)(v10 + 24 * v9 + 8);
      double v12 = *(double *)(v10 + 24 * i + 8);
      if ((v11 - v12) * (v11 - v12) <= 1.0e-12)
      {
        double v11 = *(double *)(v10 + 24 * v9 + 16);
        double v12 = *(double *)(v10 + 24 * i + 16);
      }
      if (v11 < v12) {
        unsigned int i = 2 * a2 + 2;
      }
    }
    if (i == a2) {
      break;
    }
    this = re::internal::IndexedPriorityQueue::swap(v2, a2, i);
  }
  return this;
}

void *re::internal::IndexedPriorityQueue::swap(void *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = this[2];
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= a3)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = this[4];
  unint64_t v5 = (long long *)(v4 + 24 * a2);
  uint64_t v6 = (long long *)(v4 + 24 * a3);
  uint64_t v7 = *((void *)v5 + 2);
  long long v8 = *v5;
  uint64_t v9 = *((void *)v6 + 2);
  *unint64_t v5 = *v6;
  *((void *)v5 + 2) = v9;
  *uint64_t v6 = v8;
  *((void *)v6 + 2) = v7;
  unint64_t v10 = this[2];
  if (v10 <= a2)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v11 = this[4];
  unint64_t v12 = *(unsigned int *)(v11 + 24 * a2);
  unint64_t v13 = this[7];
  if (v13 <= v12)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v14 = this[9];
  *(_DWORD *)(v14 + 4 * v12) = a2;
  if (v10 <= a3)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v15 = *(unsigned int *)(v11 + 24 * a3);
  if (v13 <= v15) {
    goto LABEL_13;
  }
  *(_DWORD *)(v14 + 4 * v15) = a3;
  return this;
}

void *re::DynamicArray<re::internal::Quadric>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v4)
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::Quadric>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
        return result;
      }
      if (a2)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
        if (!result)
        {
          re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 80 * a2, *(void *)(*v4 + 8));
          uint64_t result = (void *)_os_crash();
          __break(1u);
          return result;
        }
        uint64_t v6 = result;
        if (!v4[1]) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v6 = 0;
        if (!v2)
        {
LABEL_14:
          v4[4] = v6;
          v4[1] = a2;
          return result;
        }
      }
      uint64_t v7 = v4[4];
      uint64_t v8 = v4[2];
      if (v8)
      {
        uint64_t v9 = (_OWORD *)(v7 + 80 * v8);
        unint64_t v10 = v6;
        uint64_t v11 = (_OWORD *)v4[4];
        do
        {
          *unint64_t v10 = *v11;
          v10[1] = v11[1];
          uint64_t v10[2] = v11[2];
          v10[3] = v11[3];
          v10[4] = v11[4];
          v11 += 5;
          v10 += 5;
        }
        while (v11 != v9);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 40))(*v4, v7);
      goto LABEL_14;
    }
  }
  return result;
}

void *re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v4)
      {
        if (!a2)
        {
          uint64_t v6 = 0;
          if (!v2) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
        if (result)
        {
          uint64_t v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 32 * v4[2]);
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 32 * a2, *(void *)(*v4 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

void re::internal::simplifyMeshHelper(unsigned int *a1, re::GeomMesh *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) <= (float)(*(float *)a3 * (float)a1[10])) {
    unsigned int v5 = (float)(*(float *)a3 * (float)a1[10]);
  }
  else {
    unsigned int v5 = *(_DWORD *)(a3 + 4);
  }
  int v6 = *(_DWORD *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 8);
  re::internal::Decimator::Decimator((re::internal::Decimator *)v8);
  re::internal::Decimator::setMesh((re::internal::Decimator *)v8, (const re::GeomMesh *)a1);
  v8[68] = v7;
  int v9 = v6;
  char v10 = 0;
  int v11 = 1065353216;
  __int16 v12 = 256;
  re::internal::Decimator::decimateTo((re::internal::Decimator *)v8, v5);
  re::internal::Decimator::convertCombinatorialMapToMesh((re::internal::Decimator *)v8, a2);
  re::internal::Decimator::~Decimator((re::internal::Decimator *)v8);
}

re::internal::Decimator *re::internal::Decimator::Decimator(re::internal::Decimator *this)
{
  size_t v2 = re::GeomConnectivityManifold::GeomConnectivityManifold(this);
  *((void *)v2 + 38) = 0;
  *((void *)v2 + 39) = 0;
  *((_DWORD *)v2 + 82) = 0;
  *((void *)v2 + 40) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 62) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *(_OWORD *)((char *)v2 + 376) = 0u;
  *(_OWORD *)((char *)v2 + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)v2 + 456) = 0u;
  *(_OWORD *)((char *)v2 + 472) = 0u;
  *((_DWORD *)this + 122) = 1;
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 132) = 1;
  re::DynamicArray<unsigned int>::resize((void *)v2 + 63, 0, &re::kInvalidMeshIndex);
  *(void *)((char *)this + 549) = 0;
  *((void *)this + 68) = 0;
  *((_DWORD *)this + 140) = 1065353216;
  *((_WORD *)this + 282) = 256;
  *((void *)this + 81) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 0;
  return this;
}

void re::internal::Decimator::~Decimator(re::internal::Decimator *this)
{
}

float32x4_t *re::AABB::transform@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v3 = *result;
  float32x4_t v4 = result[1];
  uint32x4_t v5 = (uint32x4_t)vcgtq_f32(*result, v4);
  v5.i32[3] = v5.i32[2];
  if ((vmaxvq_u32(v5) & 0x80000000) != 0)
  {
    *(void *)&long long v10 = 0x7F0000007FLL;
    *((void *)&v10 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a3 = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    BOOL v8 = (v3.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v3.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v3.i32[2] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v4.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
    if (v8 && (v4.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v4.i32[2] & 0x7FFFFFFFu) < 0x7F800000)
    {
      int v11 = 0;
      float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v13.i64[0] = 0x7F0000007FLL;
      v13.i32[2] = 127;
      do
      {
        if (v11) {
          LODWORD(v14) = result[1];
        }
        else {
          LODWORD(v14) = *(float32x4_t *)result->f32;
        }
        if ((v11 & 2) != 0) {
          LODWORD(v15) = HIDWORD(result[1].i64[0]);
        }
        else {
          LODWORD(v15) = HIDWORD(result->i64[0]);
        }
        if ((v11 & 4) != 0) {
          LODWORD(v16) = result[1].i64[1];
        }
        else {
          LODWORD(v16) = result->i64[1];
        }
        float32x4_t v17 = vaddq_f32(a2[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, v14), a2[1], v15), a2[2], v16));
        float32x4_t v18 = vdivq_f32(v17, (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3));
        v12.i32[3] = 0;
        v18.i32[3] = 0;
        float32x4_t v12 = vminnmq_f32(v12, v18);
        v13.i32[3] = 0;
        float32x4_t v13 = vmaxnmq_f32(v13, v18);
        ++v11;
      }
      while (v11 != 8);
      *(float32x4_t *)a3 = v12;
      *(float32x4_t *)(a3 + 16) = v13;
    }
    else
    {
      *(void *)&long long v9 = 0x7F0000007FLL;
      *((void *)&v9 + 1) = 0x7F0000007FLL;
      *(_OWORD *)a3 = v9;
      *(int32x4_t *)(a3 + 16) = vdupq_n_s32(0x7F800000u);
    }
  }
  return result;
}

uint64_t re::AABB::intersects(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result = 0;
  float32x4_t v4 = *a1;
  float32x4_t v5 = a1[1];
  float32x4_t v6 = *a1;
  v6.i32[3] = v5.i32[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgezq_f32(v6))))) & 1) == 0)
  {
    uint32x4_t v7 = (uint32x4_t)vcgtq_f32(v4, v5);
    v7.i32[3] = v7.i32[2];
    if ((vmaxvq_u32(v7) & 0x80000000) == 0)
    {
      if ((v4.i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v4.i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v4.i32[2] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v5.i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        return 3;
      }
      else
      {
        uint64_t result = 3;
        if ((v5.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v5.i32[2] & 0x7FFFFFFFu) < 0x7F800000)
        {
          v8.i64[0] = 0x3F0000003F000000;
          v8.i64[1] = 0x3F0000003F000000;
          float32x4_t v9 = vmulq_f32(vaddq_f32(v4, v5), v8);
          float32x4_t v10 = vsubq_f32(v5, v4);
          v10.i32[3] = 0;
          float32x4_t v11 = vmulq_f32(vmaxnmq_f32(v10, (float32x4_t)0), v8);
          float32x4_t v12 = vmulq_f32(*a2, *a2);
          v12.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u32[0];
          float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
          float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
          float32x4_t v15 = vmulq_f32(v11, vabsq_f32(vmulq_n_f32(*a2, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0])));
          float32x4_t v16 = vmulq_f32(v9, *a2);
          float v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)))).f32[0]/ sqrtf(v12.f32[0]);
          float v18 = fabsf(v17);
          float v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]+ 0.0001;
          if (v17 > 0.0) {
            unsigned int v20 = 1;
          }
          else {
            unsigned int v20 = 2;
          }
          if (v18 >= v19) {
            return v20;
          }
          else {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::projectPointOntoBilinearPatch3F(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  v146[3] = *(double *)MEMORY[0x263EF8340];
  float32x4_t v5 = *a3;
  float32x4_t v6 = *a5;
  float32x4_t v7 = vsubq_f32(*a3, *a5);
  float32x4_t v8 = *a4;
  float32x4_t v9 = *a2;
  float32x4_t v10 = vsubq_f32(*a4, *a2);
  float32x4_t v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v7)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  float32x4_t v12 = vmulq_f32(v11, v11);
  LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v12)).u32[0];
  if (fabsf(v13) >= 1.0e-10)
  {
    float v23 = v13;
    float32x2_t v24 = vrsqrte_f32((float32x2_t)LODWORD(v13));
    float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v24, v24)));
    float32x4_t v26 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vmul_f32(v25, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v25, v25))).f32[0]);
    float32x4_t v27 = vsubq_f32(v5, v9);
    float32x4_t v28 = vsubq_f32(v6, v9);
    float32x4_t v29 = vsubq_f32(*a1, v9);
    float32x4_t v30 = vmulq_f32(v27, v26);
    float32x4_t v31 = vsubq_f32(v27, vmulq_n_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]));
    float32x4_t v32 = vmulq_f32(v31, v31);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]) < 1.0e-10)
    {
      float32x4_t v33 = vmulq_f32(v10, v26);
      float32x4_t v31 = vsubq_f32(v10, vmulq_n_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]));
    }
    int32x4_t v34 = (int32x4_t)vmulq_f32(v31, v31);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v37 = vmulq_n_f32(v31, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    int8x16_t v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(v26)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
    float32x4_t v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
    int32x4_t v40 = (int32x4_t)vmulq_f32(v29, v37);
    int32x4_t v41 = (int32x4_t)vmulq_f32(v29, v39);
    float32x4_t v42 = vmulq_f32(v27, v37);
    float32x2_t v43 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))));
    v41.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).u64[0];
    _Q4 = vmulq_f32(v27, v39);
    _Q4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q4, 2), vaddq_f32(_Q4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q4.f32, 1))).u64[0];
    int32x4_t v45 = (int32x4_t)vmulq_f32(v10, v37);
    _Q3 = (int32x4_t)vmulq_f32(v10, v39);
    float32x2_t v47 = (float32x2_t)vzip1_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)_Q4.f32);
    _Q6 = vmulq_f32(v28, v37);
    float32x2_t v49 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(_Q3, 2), vadd_f32(*(float32x2_t *)_Q3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.i8, 1))));
    _Q3.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q6, 2), vaddq_f32(_Q6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q6.f32, 1))).u64[0];
    float32x4_t v50 = vmulq_f32(v28, v39);
    v50.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).u64[0];
    float32x2_t v51 = (float32x2_t)vzip1_s32(*(int32x2_t *)_Q3.i8, *(int32x2_t *)v50.f32);
    float32x2_t v142 = v47;
    float32x2_t v143 = vsub_f32(0, v43);
    float32x2_t v52 = vsub_f32(v49, v47);
    float32x2_t v140 = vadd_f32(vsub_f32(v52, v51), 0);
    float32x2_t v141 = v51;
    __asm { FMLS            S6, S3, V4.S[0] }
    float32x2_t v139 = v143;
    __asm { FMLS            S6, S1, V7.S[1] }
    v146[0] = vmlas_n_f32((float)-v143.f32[1] * *(float *)_Q3.i32, v50.f32[0], v143.f32[0]);
    v146[1] = _Q6.f32[0];
    v146[2] = vmlas_n_f32((float)-_Q4.f32[0] * v140.f32[0], v140.f32[1], *(float *)v41.i32);
    memset(v145, 0, sizeof(v145));
    unsigned int v57 = re::solveQuadraticRootsD((re *)v146, v144, (double *)a3->i64);
    __asm { FMOV            V0.2S, #1.0 }
    if (!v57) {
      goto LABEL_20;
    }
    uint64_t v59 = 0;
    unsigned __int8 v60 = 0;
    uint64_t v61 = v57;
    do
    {
      uint64_t v62 = 0;
      float v63 = v144[v59];
      char v64 = 1;
      do
      {
        char v65 = v64;
        float v66 = v141.f32[v62] + (float)(v63 * v140.f32[v62]);
        if (v66 != 0.0)
        {
          v67.f32[0] = v63;
          v67.f32[1] = (float)-(float)(v143.f32[v62] + (float)(v63 * v142.f32[v62])) / v66;
          *((float32x2_t *)v145 + v60++) = vminnm_f32(vmaxnm_f32(v67, 0), _D0);
        }
        char v64 = 0;
        uint64_t v62 = 1;
      }
      while ((v65 & 1) != 0);
      ++v59;
    }
    while (v59 != v61);
    if (v60)
    {
      if (v60 != 1)
      {
        uint64_t v68 = 0;
        uint64_t v69 = 8 * v60;
        float v70 = INFINITY;
        do
        {
          float32x2_t v71 = vsub_f32(vadd_f32(vadd_f32(vmul_n_f32(v51, (float)(1.0 - *(float *)((char *)v145 + v68)) * *(float *)((char *)v145 + v68 + 4)), vmul_n_f32(v49, *(float *)((char *)v145 + v68) * *(float *)((char *)v145 + v68 + 4))), vmul_n_f32(v47, *(float *)((char *)v145 + v68) * (float)(1.0 - *(float *)((char *)v145 + v68 + 4)))), v43);
          float v72 = vaddv_f32(vmul_f32(v71, v71));
          if (v72 < v70)
          {
            *(void *)&v145[0] = *(void *)((char *)v145 + v68);
            float v70 = v72;
          }
          v68 += 8;
        }
        while (v69 != v68);
      }
    }
    else
    {
LABEL_20:
      float32x2_t v73 = vmul_f32(v47, v47);
      if (vaddv_f32(v73) <= 0.0)
      {
        int32x2_t v77 = (int32x2_t)vmul_f32(v139, v139);
        float v75 = 0.0;
      }
      else
      {
        float32x2_t v74 = vmul_f32(v43, v47);
        LODWORD(v75) = vdiv_f32(vadd_f32(v74, (float32x2_t)vdup_lane_s32((int32x2_t)v74, 1)), vadd_f32(v73, (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1))).u32[0];
        float32x2_t v76 = vsub_f32(vadd_f32(vmul_n_f32(v47, v75), 0), v43);
        int32x2_t v77 = (int32x2_t)vmul_f32(v76, v76);
      }
      float32x2_t v114 = vmul_f32(v52, v52);
      if (vaddv_f32(v114) <= 0.0)
      {
        float32x2_t v119 = vsub_f32(v47, v43);
        int32x2_t v118 = (int32x2_t)vmul_f32(v119, v119);
        float v116 = 0.0;
      }
      else
      {
        float32x2_t v115 = vmul_f32(vsub_f32(v43, v47), v52);
        LODWORD(v116) = vdiv_f32(vadd_f32(v115, (float32x2_t)vdup_lane_s32((int32x2_t)v115, 1)), vadd_f32(v114, (float32x2_t)vdup_lane_s32((int32x2_t)v114, 1))).u32[0];
        float32x2_t v117 = vsub_f32(vadd_f32(v47, vmul_n_f32(v52, v116)), v43);
        int32x2_t v118 = (int32x2_t)vmul_f32(v117, v117);
      }
      float32x2_t v120 = vsub_f32(v49, v51);
      float32x2_t v121 = vmul_f32(v120, v120);
      if (vaddv_f32(v121) <= 0.0)
      {
        float32x2_t v126 = vsub_f32(v51, v43);
        float32x2_t v125 = vmul_f32(v126, v126);
        float v123 = 0.0;
      }
      else
      {
        float32x2_t v122 = vmul_f32(v120, vsub_f32(v43, v51));
        LODWORD(v123) = vdiv_f32(vadd_f32(v122, (float32x2_t)vdup_lane_s32((int32x2_t)v122, 1)), vadd_f32(v121, (float32x2_t)vdup_lane_s32((int32x2_t)v121, 1))).u32[0];
        float32x2_t v124 = vsub_f32(vadd_f32(v51, vmul_n_f32(v120, v123)), v43);
        float32x2_t v125 = vmul_f32(v124, v124);
      }
      float32x2_t v127 = vmul_f32(v51, v51);
      if (vaddv_f32(v127) <= 0.0)
      {
        float32x2_t v131 = vmul_f32(v139, v139);
        float v129 = 0.0;
      }
      else
      {
        float32x2_t v128 = vmul_f32(v43, v51);
        LODWORD(v129) = vdiv_f32(vadd_f32(v128, (float32x2_t)vdup_lane_s32((int32x2_t)v128, 1)), vadd_f32(v127, (float32x2_t)vdup_lane_s32((int32x2_t)v127, 1))).u32[0];
        float32x2_t v130 = vsub_f32(vadd_f32(vmul_n_f32(v51, v129), 0), v43);
        float32x2_t v131 = vmul_f32(v130, v130);
      }
      float v132 = vaddv_f32(v125);
      float32x2_t v133 = vadd_f32(v125, (float32x2_t)vdup_lane_s32((int32x2_t)v125, 1));
      float32x2_t v134 = vadd_f32((float32x2_t)vzip1_s32(v118, v77), (float32x2_t)vzip2_s32(v118, v77));
      int8x8_t v135 = (int8x8_t)__PAIR64__(LODWORD(v116), _D0.u32[0]);
      v136.i32[0] = 0;
      float32x2_t v137 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v134, 1), v134), 0), v135, (int8x8_t)LODWORD(v75));
      if (v134.f32[0] >= v134.f32[1]) {
        v134.f32[0] = v134.f32[1];
      }
      _D0.f32[0] = v123;
      int8x8_t v138 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v134, v133), 0), (int8x8_t)_D0, (int8x8_t)v137);
      if (v132 >= v134.f32[0]) {
        v137.f32[0] = v134.f32[0];
      }
      else {
        v137.f32[0] = v132;
      }
      *(float *)&v136.i32[1] = v129;
      *(int8x8_t *)&v145[0] = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v137, vadd_f32(v131, (float32x2_t)vdup_lane_s32((int32x2_t)v131, 1))), 0), v136, v138);
    }
    return *(void *)&v145[0];
  }
  else
  {
    float32x4_t v14 = vsubq_f32(v5, v9);
    float32x4_t v15 = vmulq_f32(v14, v14);
    float32x4_t v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
    float32x4_t v17 = *a1;
    float32x4_t v18 = vsubq_f32(*a1, v9);
    if (v16.f32[0] <= 0.0)
    {
      float32x4_t v78 = vsubq_f32(v9, v17);
      float32x4_t v22 = vmulq_f32(v78, v78);
      float v20 = 0.0;
    }
    else
    {
      float32x4_t v19 = vmulq_f32(v14, v18);
      LODWORD(v20) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))), v16).u32[0];
      float32x4_t v21 = vsubq_f32(vaddq_f32(v9, vmulq_n_f32(v14, v20)), v17);
      float32x4_t v22 = vmulq_f32(v21, v21);
    }
    float32x4_t v79 = vsubq_f32(v8, v5);
    float32x4_t v80 = vmulq_f32(v79, v79);
    float32x4_t v81 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1)));
    if (v81.f32[0] <= 0.0)
    {
      float32x4_t v86 = vsubq_f32(v5, v17);
      float32x4_t v85 = vmulq_f32(v86, v86);
      float v83 = 0.0;
    }
    else
    {
      float32x4_t v82 = vmulq_f32(v79, vsubq_f32(v17, v5));
      LODWORD(v83) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), vaddq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1))), v81).u32[0];
      float32x4_t v84 = vsubq_f32(vaddq_f32(v5, vmulq_n_f32(v79, v83)), v17);
      float32x4_t v85 = vmulq_f32(v84, v84);
    }
    float32x4_t v87 = vsubq_f32(v8, v6);
    float32x4_t v88 = vmulq_f32(v87, v87);
    float32x4_t v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1)));
    if (v89.f32[0] <= 0.0)
    {
      float32x4_t v94 = vsubq_f32(v6, v17);
      float32x4_t v93 = vmulq_f32(v94, v94);
      float v91 = 0.0;
    }
    else
    {
      float32x4_t v90 = vmulq_f32(v87, vsubq_f32(v17, v6));
      LODWORD(v91) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1))), v89).u32[0];
      float32x4_t v92 = vsubq_f32(vaddq_f32(v6, vmulq_n_f32(v87, v91)), v17);
      float32x4_t v93 = vmulq_f32(v92, v92);
    }
    float32x4_t v95 = vsubq_f32(v6, v9);
    float32x4_t v96 = vmulq_f32(v95, v95);
    float32x4_t v97 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1)));
    if (v97.f32[0] <= 0.0)
    {
      float32x4_t v102 = vsubq_f32(v9, v17);
      int32x4_t v101 = (int32x4_t)vmulq_f32(v102, v102);
      float v99 = 0.0;
    }
    else
    {
      float32x4_t v98 = vmulq_f32(v95, v18);
      LODWORD(v99) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))), v97).u32[0];
      float32x4_t v100 = vsubq_f32(vaddq_f32(v9, vmulq_n_f32(v95, v99)), v17);
      int32x4_t v101 = (int32x4_t)vmulq_f32(v100, v100);
    }
    float32x4_t v103 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1)));
    float32x4_t v104 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
    float32x2_t v105 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).u64[0];
    if (vmovn_s32(vcgtq_f32(v104, v103)).u8[0]) {
      v104.f32[0] = v103.f32[0];
    }
    int8x8_t v106 = (int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v104.f32, v105), 0);
    __asm { FMOV            V7.2S, #1.0 }
    int8x8_t v107 = (int8x8_t)__PAIR64__(_D7.u32[1], LODWORD(v91));
    *(float *)&_D7.i32[1] = v83;
    if (_ZF) {
      unsigned int v109 = 0;
    }
    else {
      unsigned int v109 = -1;
    }
    v110.i32[0] = 0;
    int8x8_t v111 = vbsl_s8(v106, v107, vbsl_s8((int8x8_t)vdup_n_s32(v109), _D7, (int8x8_t)LODWORD(v20)));
    float32x2_t v112 = (float32x2_t)vdupq_laneq_s32(v101, 2).u64[0];
    if (v105.f32[0] < v104.f32[0]) {
      v104.f32[0] = v105.f32[0];
    }
    *(float *)&v110.i32[1] = v99;
    return (uint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v104.f32, vadd_f32(v112, vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)))), 0), v110, v111);
  }
}

float re::computeDistanceSquaredFromPointToQuad(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, uint64_t *a7)
{
  geom_closest_point_to_triangle_3f();
  int8x16_t v27 = (int8x16_t)v14;
  float32x4_t v15 = vsubq_f32(v14, *a1);
  float32x4_t v16 = vmulq_f32(v15, v15);
  float32x4_t v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  geom_closest_point_to_triangle_3f();
  float32x4_t v18 = vsubq_f32(v17, *a1);
  float32x4_t v19 = vmulq_f32(v18, v18);
  float32x4_t v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
  unsigned __int8 v21 = vmovn_s32(vcgtq_f32(v20, v26)).u8[0];
  if (v21) {
    unsigned int v22 = -1;
  }
  else {
    unsigned int v22 = 0;
  }
  int8x16_t v23 = vbslq_s8((int8x16_t)vdupq_n_s32(v22), v27, (int8x16_t)v17);
  if (v21) {
    float v24 = v26.f32[0];
  }
  else {
    float v24 = v20.f32[0];
  }
  *a6 = (float32x4_t)v23;
  *a7 = re::projectPointOntoBilinearPatch3F(a6, a2, a3, a4, a5);
  return v24;
}

uint64_t (***re::buildParametricPlane(re *this, re::GeomMesh *a2, float a3, float a4, int a5))(void)
{
  int v6 = (int)a2;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v10 = re::globalAllocators(this)[2];
  float32x4_t v16 = &unk_26E70DAF0;
  float v17 = a3;
  float v18 = a4;
  uint64_t v19 = v10;
  float32x4_t v20 = &v16;
  int v12 = 16843008;
  __int16 v13 = 0;
  int v14 = v6;
  int v15 = a5;
  re::buildParametricSurface(this, (uint64_t)&v16, (unsigned __int8 *)&v12);
  return re::FunctionBase<24ul,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::destroyCallable((uint64_t)&v16);
}

uint64_t re::buildParametricSurface(re::GeomMesh *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  re::GeomMesh::clear(a1);
  int v5 = *((_DWORD *)a3 + 2);
  int v6 = *((_DWORD *)a3 + 3);
  if (a3[4]) {
    int v7 = *((_DWORD *)a3 + 2);
  }
  else {
    int v7 = v5 + 1;
  }
  if (a3[5]) {
    int v8 = *((_DWORD *)a3 + 3);
  }
  else {
    int v8 = v6 + 1;
  }
  unint64_t v9 = (v8 * v7);
  char v10 = *a3;
  re::GeomMeshBuilder::GeomMeshBuilder((re *)v128, (uint64_t)a1);
  if (LODWORD(v128[1]) > v9 && v130 && (v130 - 1) > (unint64_t)v130)
  {
    while (1)
      ;
  }
  unint64_t v11 = ((v6 * v5) << v10);
  LODWORD(v128[1]) = v9;
  unsigned int v133 = v9;
  if (v134)
  {
    int v12 = v135;
    unint64_t v9 = 8 * v134;
    do
    {
      uint64_t v13 = *v12++;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 72))(v13, v133);
      v9 -= 8;
    }
    while (v9);
  }
  float32x2_t v112 = (unsigned int *)a1;
  if (v11 < v130)
  {
    int v14 = v140;
    if (v140)
    {
      LODWORD(v9) = 0;
      do
      {
        int v15 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v139, v9);
        re::internal::accessFaceVaryingAttributeSubmesh(v15, v16);
        unint64_t v9 = (v9 + 1);
      }
      while (v14 != v9);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v129, v11);
  unsigned int v136 = v11;
  if (v137)
  {
    float v17 = v138;
    uint64_t v18 = 8 * v137;
    do
    {
      uint64_t v19 = *v17++;
      (*(void (**)(uint64_t, void))(*(void *)v19 + 72))(v19, v136);
      v18 -= 8;
    }
    while (v18);
  }
  unsigned int v20 = *((_DWORD *)a3 + 3);
  if (v20)
  {
    int v21 = 0;
    unsigned int v22 = 0;
    unsigned int v23 = 0;
    unsigned int v24 = *((_DWORD *)a3 + 2);
    int v121 = v7;
    do
    {
      unint64_t v9 = v22 * v7;
      if (a3[5]) {
        BOOL v25 = v22 == v20 - 1;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25) {
        int v26 = 0;
      }
      else {
        int v26 = v9 + v7;
      }
      if (v24)
      {
        for (unsigned int i = 0; i < v24; ++i)
        {
          unsigned int v28 = v24 - 1;
          if (a3[4]) {
            BOOL v29 = i == v28;
          }
          else {
            BOOL v29 = 0;
          }
          if (v29) {
            unsigned int v30 = 0;
          }
          else {
            unsigned int v30 = i + 1;
          }
          int v31 = v21 + i;
          int v32 = v30 + v9;
          int v33 = v30 + v26;
          if (*a3)
          {
            re::GeomMeshBuilder::setFaceVertices((uint64_t)v128, v23++, v31, v32, v26 + i);
            re::GeomMeshBuilder::setFaceVertices((uint64_t)v128, v23, v32, v33, v26 + i);
          }
          else
          {
            re::GeomMeshBuilder::setFaceVertices((uint64_t)v128, v23, v31, v32, v33, v26 + i);
          }
          ++v23;
          unsigned int v24 = *((_DWORD *)a3 + 2);
        }
        unsigned int v20 = *((_DWORD *)a3 + 3);
        int v7 = v121;
      }
      ++v22;
      v21 += v7;
    }
    while (v22 < v20);
  }
  int32x4_t v34 = (re *)re::GeomMesh::operator=((uint64_t)v112, &v128[1]);
  re::GeomMesh::setName(v34, v128[0]);
  re::GeomMesh::freeName((re *)v128);
  re::GeomMesh::freeName((re *)v128);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)((char *)&v131 + 8));
  if ((void)v129)
  {
    float32x2_t v35 = (re::GeomMesh *)v131;
    if ((void)v131) {
      (*(void (**)(void))(*(void *)v129 + 40))();
    }
  }
  int v117 = a3[2];
  if (a3[2])
  {
    unint64_t v9 = (unint64_t)"vertexNormal";
    unint64_t v114 = v35;
  }
  else
  {
    unint64_t v114 = 0;
  }
  int v118 = a3[3];
  if (a3[3])
  {
    unsigned int v37 = v36;
    unint64_t v115 = v35;
    unint64_t v116 = v37;
  }
  else
  {
    unint64_t v115 = 0;
    unint64_t v116 = 0;
  }
  int8x16_t v38 = v141;
  if (!a3[1] || a3[4])
  {
    if (!a3[1])
    {
      BOOL v119 = 0;
      goto LABEL_100;
    }
    BOOL v119 = 0;
    int v39 = a3[5];
    if (a3[4]) {
      goto LABEL_59;
    }
  }
  else
  {
    int v39 = a3[5];
    BOOL v119 = a3[5] == 0;
  }
  if (!v39)
  {
    re::addVertexUVs((re *)v112, v35);
    uint64_t v107 = re::modifyVertexUVs((re *)v112, v40);
    uint64_t v42 = v41;
    goto LABEL_101;
  }
LABEL_59:
  unint64_t v43 = v112[10];
  *(void *)&v143[2] = 0;
  memset(v141, 0, sizeof(v141));
  uint64_t v126 = 0;
  unint64_t v124 = 0;
  float32x4_t v123 = 0uLL;
  int v125 = 0;
  re::DynamicArray<float>::resize((uint64_t)v141, v43);
  re::DynamicArray<re::GeomCell4>::resize(&v123, v43);
  if (v43)
  {
    uint64_t v44 = 0;
    uint64_t v45 = *(void *)&v141[16];
    uint64_t v46 = *(void *)&v143[2];
    while (v45 != v44)
    {
      *(_DWORD *)(v46 + 4 * v44) = v44;
      if (v43 == ++v44) {
        goto LABEL_63;
      }
    }
LABEL_144:
    uint64_t v127 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    *(_OWORD *)float32x2_t v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v144 = 136315906;
    *(void *)(v38 + 52) = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)(v38 + 62) = 789;
    __int16 v145 = 2048;
    *(void *)(v38 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;
    __int16 v147 = 2048;
    *(void *)(v38 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_63:
  unsigned int v47 = *((_DWORD *)a3 + 3);
  if (v47)
  {
    unint64_t v48 = 0;
    unsigned int v49 = 0;
    int v50 = *a3;
    unsigned int v51 = *((_DWORD *)a3 + 2);
    int v52 = 1;
    unsigned int v53 = v51;
    do
    {
      unsigned int v54 = v49 + 1;
      if (v53)
      {
        unsigned int v55 = 0;
        unsigned int v56 = v53 + 1;
        int v57 = v49 * (v53 + 1);
        int v58 = v54 * v56;
        unint64_t v9 = v124;
        uint64_t v59 = v126;
        int v60 = v52 * v56;
        do
        {
          unsigned int v61 = v57 + v55;
          int v62 = v60 + v55;
          uint64_t v45 = v48;
          if (v50)
          {
            if (v9 <= v48) {
              goto LABEL_141;
            }
            unint64_t v48 = (v48 + 1);
            float v63 = (unsigned int *)(v59 + 16 * v45);
            *float v63 = v61;
            v63[1] = v61 + 1;
            v63[2] = v62;
            v63[3] = -1;
            if (v9 <= v48) {
              goto LABEL_142;
            }
            int v64 = v62 + 1;
            char v65 = (unsigned int *)(v59 + 16 * v48);
            *char v65 = v61 + 1;
            int v66 = v60 + v55;
            int v62 = -1;
          }
          else
          {
            if (v9 <= v48) {
              goto LABEL_143;
            }
            int v64 = v55 + v57 + 1;
            int v66 = v55 + v58 + 1;
            char v65 = (unsigned int *)(v59 + 16 * v48);
            *char v65 = v61;
          }
          v65[1] = v64;
          v65[2] = v66;
          v65[3] = v62;
          unint64_t v48 = (v48 + 1);
          ++v55;
          unsigned int v51 = *((_DWORD *)a3 + 2);
        }
        while (v55 < v51);
        unsigned int v47 = *((_DWORD *)a3 + 3);
        unsigned int v53 = *((_DWORD *)a3 + 2);
      }
      ++v52;
      unsigned int v49 = v54;
    }
    while (v54 < v47);
  }
  else
  {
    unsigned int v51 = *((_DWORD *)a3 + 2);
  }
  uint64_t v67 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v112, "vertexUV", 6, v51 + 1 + (v51 + 1) * v47, (uint64_t *)&v123, (uint64_t *)v141);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v67 + 16))(v67))
  {
    uint64_t v68 = re::internal::GeomTypedAttribute<double>::operator[](v67, 0);
    unint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v67 + 16))(v67);
  }
  else
  {
    unint64_t v48 = 0;
    uint64_t v68 = 0;
  }
  int v69 = 0;
  unsigned int v70 = 0;
  unsigned int v71 = *((_DWORD *)a3 + 2);
  unsigned int v72 = *((_DWORD *)a3 + 3);
  float v73 = 1.0 / (float)v71;
  float v74 = 1.0 / (float)v72;
  while (2)
  {
    uint64_t v45 = 0;
    float v75 = v74 * (float)v69;
    if (v69 == v72) {
      float v75 = 1.0;
    }
    unsigned int v76 = v70;
    int v77 = v48 - v70;
    if (v48 < v70) {
      int v77 = 0;
    }
    uint64_t v78 = v68 + 8 * v70;
    do
    {
      if (v77 == v45)
      {
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v144 = 136315906;
        *(void *)&double v144[4] = "operator[]";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)&v144[14] = 609;
        __int16 v145 = 2048;
        uint64_t v146 = v76 + v45;
        __int16 v147 = 2048;
        uint64_t v148 = v48;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_136:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 609;
        *(_DWORD *)float32x2_t v141 = 136315906;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v102 + v68;
        __int16 v142 = 2048;
        *(void *)float32x2_t v143 = v108;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x2_t v141 = 136315906;
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 609;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v68 + v102;
        __int16 v142 = 2048;
        *(void *)float32x2_t v143 = v116;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x2_t v141 = 136315906;
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 609;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v68 + v102;
        __int16 v142 = 2048;
        *(void *)float32x2_t v143 = v115;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x2_t v141 = 136315906;
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 609;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v68 + v102;
        __int16 v142 = 2048;
        *(void *)float32x2_t v143 = v114;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        v123.i64[0] = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 609;
        *(_DWORD *)float32x2_t v141 = 136315906;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v102 + v68;
        __int16 v142 = 2048;
        *(void *)float32x2_t v143 = v111;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v144 = 136315906;
        *(void *)(v38 + 52) = "operator[]";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)(v38 + 62) = 789;
        __int16 v145 = 2048;
        *(void *)(v38 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;
        __int16 v147 = 2048;
        *(void *)(v38 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_142:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v144 = 136315906;
        *(void *)(v38 + 52) = "operator[]";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)(v38 + 62) = 789;
        __int16 v145 = 2048;
        *(void *)(v38 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v48;
        __int16 v147 = 2048;
        *(void *)(v38 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_143:
        uint64_t v127 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        *(_OWORD *)float32x2_t v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v144 = 136315906;
        *(void *)(v38 + 52) = "operator[]";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)(v38 + 62) = 789;
        __int16 v145 = 2048;
        *(void *)(v38 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;
        __int16 v147 = 2048;
        *(void *)(v38 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_144;
      }
      *(float *)&uint64_t v79 = v73 * (float)(int)v45;
      if (v45 == v71) {
        *(float *)&uint64_t v79 = 1.0;
      }
      *((float *)&v79 + 1) = v75;
      *(void *)(v78 + 8 * v45) = v79;
      unsigned int v71 = *((_DWORD *)a3 + 2);
      ++v45;
    }
    while ((int)v45 - 1 < v71);
    unsigned int v70 = v76 + v45;
    unsigned int v72 = *((_DWORD *)a3 + 3);
    if (v69++ < v72) {
      continue;
    }
    break;
  }
  if (v123.i64[0] && v126) {
    (*(void (**)(void))(*(void *)v123.i64[0] + 40))();
  }
  if (*(void *)v141 && *(void *)&v143[2]) {
    (*(void (**)(void))(**(void **)v141 + 40))(*(void *)v141);
  }
LABEL_100:
  uint64_t v107 = 0;
  uint64_t v42 = 0xFFFFFFFFLL;
LABEL_101:
  unint64_t v111 = v42;
  uint64_t result = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v112);
  uint64_t v106 = result;
  unsigned int v108 = v82;
  unsigned int v84 = *((_DWORD *)a3 + 2);
  unsigned int v83 = *((_DWORD *)a3 + 3);
  if (a3[4]) {
    unsigned int v85 = *((_DWORD *)a3 + 2);
  }
  else {
    unsigned int v85 = v84 + 1;
  }
  if (a3[5]) {
    unsigned int v86 = *((_DWORD *)a3 + 3);
  }
  else {
    unsigned int v86 = v83 + 1;
  }
  unsigned int v109 = v86;
  if (v86)
  {
    int v87 = 0;
    unsigned int v88 = 0;
    float v89 = 1.0 / (float)v84;
    float v90 = 1.0 / (float)v83;
    do
    {
      float v91 = v90 * (float)v87;
      if (v87 == *((_DWORD *)a3 + 3)) {
        float v91 = 1.0;
      }
      float v122 = v91;
      if (v85)
      {
        int v110 = v87;
        uint64_t v68 = 0;
        uint64_t v92 = v88;
        if (v108 >= v88) {
          uint64_t v45 = v108 - v88;
        }
        else {
          uint64_t v45 = 0;
        }
        uint64_t v93 = v105 + 16 * v88;
        float32x4_t v94 = (_OWORD *)(v103 + 16 * v88);
        int8x16_t v38 = (unsigned char *)(v104 + 16 * v88);
        uint64_t v113 = v107 + 8 * v88;
        unsigned int v102 = v88;
        unint64_t v9 = v106 + 16 * v88;
        do
        {
          unint64_t v48 = v92 + v68;
          float v95 = v89 * (float)(int)v68;
          if (v68 == *((_DWORD *)a3 + 2)) {
            float v95 = 1.0;
          }
          if (v119)
          {
            if (v111 <= v48) {
              goto LABEL_140;
            }
            *(void *)(v113 + 8 * v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = __PAIR64__(LODWORD(v122), LODWORD(v95));
          }
          float32x4_t v123 = 0u;
          *(_OWORD *)unsigned int v144 = 0u;
          *(float *)float32x2_t v128 = v95;
          *(float *)float32x2_t v141 = v122;
          uint64_t result = (*(uint64_t (**)(void, char **, unsigned char *, float32x4_t *, unsigned char *))(**(void **)(a2 + 32)
                                                                                               + 16))(*(void *)(a2 + 32), v128, v141, &v123, v144);
          if (v45 == v68) {
            goto LABEL_136;
          }
          float32x4_t v97 = (uint64_t *)(v9 + 16 * v68);
          *float32x4_t v97 = result;
          v97[1] = v96;
          if (v118)
          {
            if (v48 >= v116) {
              goto LABEL_137;
            }
            *(float32x4_t *)int8x16_t v38 = v123;
            if (v48 >= v115) {
              goto LABEL_138;
            }
            *float32x4_t v94 = *(_OWORD *)v144;
          }
          if (v117)
          {
            float32x4_t v98 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v144, *(int32x4_t *)v144), *(int8x16_t *)v144, 0xCuLL), vnegq_f32(v123)), *(float32x4_t *)v144, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123), (int8x16_t)v123, 0xCuLL));
            float32x4_t v99 = vmulq_f32(v98, v98);
            float32x4_t v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL);
            int32x2_t v101 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), v99)).u64[0];
            if (*(float *)v101.i32 > 1.0e-10)
            {
              *(float *)v101.i32 = sqrtf(*(float *)v101.i32);
              float32x4_t v100 = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(v101, 0));
            }
            if (v48 >= v114) {
              goto LABEL_139;
            }
            *(float32x4_t *)(v93 + 16 * v6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v100;
          }
          ++v68;
          ++v94;
          v38 += 16;
        }
        while (v85 != v68);
        unsigned int v88 = v92 + v68;
        int v87 = v110;
      }
      ++v87;
    }
    while (v87 != v109);
  }
  return result;
}

uint64_t re::buildCube(re *this, re::GeomMesh *a2, float a3, unsigned int a4)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (a2 <= 1) {
    int v5 = 1;
  }
  else {
    int v5 = (int)a2;
  }
  if (a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = v5;
  }
  unsigned int v72 = v5;
  int v7 = v5 + 1;
  unsigned int v8 = v6 + 1;
  int v9 = (v6 + 1) * (v5 + 1);
  re::GeomMeshBuilder::GeomMeshBuilder((re *)v73, (uint64_t)this);
  int v68 = v9;
  if (LODWORD(v73[1]) > 6 * v9 && v75 && (v75 - 1) > (unint64_t)v75)
  {
    while (1)
      ;
  }
  char v65 = this;
  LODWORD(v73[1]) = 6 * v9;
  unsigned int v78 = 6 * v9;
  if (v79)
  {
    char v10 = v80;
    uint64_t v11 = 8 * v79;
    do
    {
      uint64_t v12 = *v10++;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 72))(v12, v78);
      v11 -= 8;
    }
    while (v11);
  }
  unint64_t v13 = 12 * v72 * v6;
  if (v13 < v75)
  {
    int v14 = v85;
    if (v85)
    {
      unsigned int v15 = 0;
      do
      {
        float32x4_t v16 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v84, v15);
        re::internal::accessFaceVaryingAttributeSubmesh(v16, v17);
        ++v15;
      }
      while (v14 != v15);
    }
  }
  int v66 = v7;
  re::DynamicArray<re::GeomCell4>::resize(&v74, v13);
  unsigned int v81 = 12 * v72 * v6;
  if (v82)
  {
    uint64_t v18 = v83;
    uint64_t v19 = 8 * v82;
    do
    {
      uint64_t v20 = *v18++;
      (*(void (**)(uint64_t, void))(*(void *)v20 + 72))(v20, v81);
      v19 -= 8;
    }
    while (v19);
  }
  int v21 = 0;
  unsigned int v22 = 0;
  int v23 = 0;
  if (v6 <= 1) {
    int v24 = 1;
  }
  else {
    int v24 = v6;
  }
  do
  {
    int v69 = v23;
    int v70 = v21;
    int v25 = 0;
    do
    {
      ++v25;
      int v26 = v24;
      int v27 = v21;
      do
      {
        int v28 = v27 + 1;
        int v29 = v6 + v27 + 1;
        int v30 = v6 + v27 + 2;
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v73, v22, v27, v27 + 1, v29);
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v73, v22 + 1, v28, v30, v29);
        v22 += 2;
        int v27 = v28;
        --v26;
      }
      while (v26);
      v21 += v8;
    }
    while (v25 != v72);
    int v23 = v69 + 1;
    int v21 = v70 + v68;
  }
  while (v69 != 5);
  int v31 = (re *)re::GeomMesh::operator=((uint64_t)v65, &v73[1]);
  re::GeomMesh::setName(v31, v73[0]);
  re::GeomMesh::freeName((re *)v73);
  re::GeomMesh::freeName((re *)v73);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)((char *)&v76 + 8));
  if ((void)v74)
  {
    int v32 = (re::GeomMesh *)v76;
    if ((void)v76) {
      (*(void (**)(void))(*(void *)v74 + 40))();
    }
  }
  re::addVertexUVs(v65, v32);
  uint64_t v33 = re::GeomMesh::modifyVertexPositions(v65);
  unsigned int v35 = v34;
  uint64_t v36 = re::modifyVertexUVs(v65, v34);
  unsigned int v38 = v37;
  unsigned int v71 = v40;
  unsigned int v43 = v42;
  unsigned int v45 = v38;
  unsigned int v47 = v46;
  int v48 = 0;
  unsigned int v49 = 0;
  float v50 = 2.0 / (float)v6;
  float v51 = 1.0 / (float)v6;
  do
  {
    switch(v48)
    {
      case 0:
        float32x4_t v52 = (float32x4_t)xmmword_23437C080;
        float32x4_t v53 = (float32x4_t)xmmword_23437C090;
        float32x4_t v54 = (float32x4_t)xmmword_23435FD50;
        if (!v66) {
          goto LABEL_68;
        }
        goto LABEL_47;
      case 1:
        float32x4_t v52 = (float32x4_t)xmmword_23437C080;
        float32x4_t v53 = (float32x4_t)xmmword_23435FD80;
        float32x4_t v54 = (float32x4_t)xmmword_23437C0A0;
        if (!v66) {
          goto LABEL_68;
        }
        goto LABEL_47;
      case 2:
        float32x4_t v52 = (float32x4_t)xmmword_23435FD80;
        float32x4_t v53 = (float32x4_t)xmmword_23435FD50;
        float32x4_t v54 = (float32x4_t)xmmword_23435FD60;
        if (!v66) {
          goto LABEL_68;
        }
        goto LABEL_47;
      case 3:
        float32x4_t v52 = (float32x4_t)xmmword_23437C090;
        float32x4_t v53 = (float32x4_t)xmmword_23435FD50;
        float32x4_t v54 = (float32x4_t)xmmword_23437C080;
        if (!v66) {
          goto LABEL_68;
        }
        goto LABEL_47;
      case 4:
        float32x4_t v52 = (float32x4_t)xmmword_23437C080;
        float32x4_t v53 = (float32x4_t)xmmword_23435FD50;
        float32x4_t v54 = (float32x4_t)xmmword_23435FD80;
        if (!v66) {
          goto LABEL_68;
        }
        goto LABEL_47;
      case 5:
        float32x4_t v52 = (float32x4_t)xmmword_23437C080;
        float32x4_t v53 = (float32x4_t)xmmword_23437C0A0;
        float32x4_t v54 = (float32x4_t)xmmword_23437C090;
        if (v66) {
          goto LABEL_47;
        }
        goto LABEL_68;
      default:
        float32x4_t v52 = 0uLL;
        float32x4_t v53 = 0uLL;
        float32x4_t v54 = 0uLL;
        if (!v66) {
          goto LABEL_68;
        }
LABEL_47:
        int v55 = 0;
        break;
    }
    do
    {
      if (v8)
      {
        uint64_t v56 = 0;
        float32x4_t v57 = vaddq_f32(v54, vmulq_n_f32(v53, (float)((float)v55 * (float)(2.0 / (float)v72)) + -1.0));
        unsigned int v58 = v35 - v49;
        if (v35 < v49) {
          unsigned int v58 = 0;
        }
        unsigned int v59 = v45 - v49;
        if (v45 < v49) {
          unsigned int v59 = 0;
        }
        unsigned int v60 = v71 - v49;
        if (v71 < v49) {
          unsigned int v60 = 0;
        }
        unsigned int v61 = v43 - v49;
        if (v43 < v49) {
          unsigned int v61 = 0;
        }
        unsigned int v62 = v47 - v49;
        if (v47 < v49) {
          unsigned int v62 = 0;
        }
        do
        {
          if (v58 == v56)
          {
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)float v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v87 = "operator[]";
            __int16 v88 = 1024;
            int v89 = 609;
            int v86 = 136315906;
            __int16 v90 = 2048;
            uint64_t v91 = v49 + v56;
            __int16 v92 = 2048;
            uint64_t v93 = v35;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_71:
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)float v73 = 0u;
            unsigned int v47 = v45;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v86 = 136315906;
            int v87 = "operator[]";
            __int16 v88 = 1024;
            int v89 = 609;
            __int16 v90 = 2048;
            uint64_t v91 = v56 + v49;
            __int16 v92 = 2048;
            uint64_t v93 = v47;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)float v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v86 = 136315906;
            int v87 = "operator[]";
            __int16 v88 = 1024;
            int v89 = 609;
            __int16 v90 = 2048;
            uint64_t v91 = v56 + v49;
            __int16 v92 = 2048;
            uint64_t v93 = v71;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_73:
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)float v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v86 = 136315906;
            int v87 = "operator[]";
            __int16 v88 = 1024;
            int v89 = 609;
            __int16 v90 = 2048;
            uint64_t v91 = v56 + v49;
            __int16 v92 = 2048;
            uint64_t v93 = v43;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_74:
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            *(_OWORD *)float v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v86 = 136315906;
            int v87 = "operator[]";
            __int16 v88 = 1024;
            int v89 = 609;
            __int16 v90 = 2048;
            uint64_t v91 = v56 + v49;
            __int16 v92 = 2048;
            uint64_t v93 = v47;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float32x4_t *)(v33 + 16 * v49 + 16 * v56) = vmulq_n_f32(vaddq_f32(v57, vmulq_n_f32(v52, (float)((float)(int)v56 * v50) + -1.0)), a3);
          if (v59 == v56) {
            goto LABEL_71;
          }
          *(float *)&uint64_t v63 = (float)(1.0 / (float)v72) * (float)v55;
          *((float *)&v63 + 1) = v51 * (float)(int)v56;
          *(void *)(v36 + 8 * v49 + 8 * v56) = v63;
          if (v60 == v56) {
            goto LABEL_72;
          }
          *(float32x4_t *)(v39 + 16 * v49 + 16 * v56) = v54;
          if (v61 == v56) {
            goto LABEL_73;
          }
          *(float32x4_t *)(v41 + 16 * v49 + 16 * v56) = v53;
          if (v62 == v56) {
            goto LABEL_74;
          }
          *(float32x4_t *)(result + 16 * v49 + 16 * v56++) = v52;
        }
        while (v8 != v56);
        v49 += v56;
      }
    }
    while (v55++ != v72);
LABEL_68:
    ++v48;
  }
  while (v48 != 6);
  return result;
}

void re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::~Callable()
{
}

float re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::operator()(uint64_t a1, float *a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  float result = (float)(*a2 + -0.5) * *(float *)(a1 + 8);
  *a4 = xmmword_23435FD80;
  *a5 = xmmword_23435FD50;
  return result;
}

void *re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70DAF0;
  a2[1] = *(void *)(a1 + 8);
  return a2;
}

void *re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70DAF0;
  a2[1] = *(void *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::size()
{
  return 16;
}

void re::makeManifold(unint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  re::GeomMesh::GeomMesh((re::GeomMesh *)v33, 0);
  uint64_t v32 = 0;
  v29[1] = 0;
  int v30 = 0;
  v29[0] = 0;
  unint64_t v7 = *(unsigned int *)(a1 + 16);
  int v31 = 1;
  re::DynamicArray<unsigned int>::resize(v29, v7, re::kInvalidMeshIndex);
  unint64_t v8 = *(void *)(a1 + 40);
  if (!v8) {
    goto LABEL_11;
  }
  uint64_t v9 = 0;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = v30;
  do
  {
    if (v9 == v8) {
      goto LABEL_46;
    }
    uint64_t v12 = 0;
    long long v35 = *(_OWORD *)(v10 + 16 * v9);
    if (HIDWORD(v35) == -1) {
      uint64_t v13 = 3;
    }
    else {
      uint64_t v13 = 4;
    }
    uint64_t v14 = v32;
    do
    {
      unint64_t v3 = *((unsigned int *)&v35 + v12);
      if ((unint64_t)v11 <= v3)
      {
        *(void *)uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v51[0]) = 136315906;
        *(void *)((char *)v51 + 4) = "operator[]";
        WORD6(v51[0]) = 1024;
        *(_DWORD *)((char *)v51 + 14) = 789;
        WORD1(v51[1]) = 2048;
        *(void *)((char *)&v51[1] + 4) = v3;
        WORD6(v51[1]) = 2048;
        *(void *)((char *)&v51[1] + 14) = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        *(void *)&long long v35 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v51[0]) = 136315906;
        *(void *)((char *)v51 + 4) = "operator[]";
        WORD6(v51[0]) = 1024;
        *(_DWORD *)((char *)v51 + 14) = 797;
        WORD1(v51[1]) = 2048;
        *(void *)((char *)&v51[1] + 4) = v8;
        WORD6(v51[1]) = 2048;
        *(void *)((char *)&v51[1] + 14) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_47;
      }
      *(_DWORD *)(v14 + 4 * v3) = v3;
      ++v12;
    }
    while (v13 != v12);
    ++v9;
  }
  while (v9 != v8);
  if (!v7) {
    goto LABEL_34;
  }
LABEL_11:
  unsigned int v15 = 0;
  BOOL v16 = 1;
  unint64_t v8 = (unint64_t)v30;
  uint64_t v17 = v32;
  while (1)
  {
    if (v30 == v15) {
      goto LABEL_48;
    }
    if (*(_DWORD *)(v32 + 4 * (void)v15) == -1) {
      break;
    }
    unsigned int v15 = (re::GeomMesh *)((char *)v15 + 1);
    BOOL v16 = (unint64_t)v15 < v7;
    if ((re::GeomMesh *)v7 == v15) {
      goto LABEL_34;
    }
  }
  uint64_t v18 = 0;
  unsigned int v19 = 0;
  do
  {
    if (v8 == v18) {
      goto LABEL_49;
    }
    if (*(_DWORD *)(v17 + 4 * v18) != -1)
    {
      unint64_t v3 = v19;
      if (v8 <= v19) {
        goto LABEL_50;
      }
      *(_DWORD *)(v17 + 4 * v19++) = v18;
    }
    ++v18;
  }
  while (v7 != v18);
  re::DynamicArray<float>::resize((uint64_t)v29, v19);
  re::internal::buildMeshFromNewVertices(a1, v29, (uint64_t)v33);
  if (v16)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v39, 0);
    unsigned int v38 = 0;
    uint64_t v36 = 0;
    long long v35 = 0uLL;
    int v37 = 0;
    {
      re::GeomMesh::operator=((re::GeomMesh *)v33, (re::GeomMesh *)&v39);
      uint64_t v20 = v36;
      if (v36)
      {
        int v21 = v38;
        a1 = (unint64_t)v30;
        uint64_t v22 = v32;
        do
        {
          unint64_t v7 = *v21;
          if (a1 <= v7) {
            goto LABEL_51;
          }
          *v21++ = *(_DWORD *)(v22 + 4 * v7);
        }
        while (--v20);
      }
      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v29, (uint64_t)&v35);
    }
    if ((void)v35 && v38) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v39);
LABEL_35:
    unint64_t v23 = *(void *)(a3 + 16);
    if (v23)
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(a3 + 32);
      unsigned int v26 = 1;
      a2 = v30;
      uint64_t v27 = v32;
      while (1)
      {
        a1 = *(unsigned int *)(v25 + 4 * v24);
        if ((unint64_t)a2 <= a1) {
          break;
        }
        *(_DWORD *)(v25 + 4 * v24) = *(_DWORD *)(v27 + 4 * a1);
        uint64_t v24 = v26;
        if (v23 <= v26++) {
          goto LABEL_41;
        }
      }
LABEL_47:
      *(void *)&long long v35 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v51[0]) = 136315906;
      *(void *)((char *)v51 + 4) = "operator[]";
      WORD6(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 14) = 789;
      WORD1(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 4) = a1;
      WORD6(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 14) = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_48:
      *(void *)&long long v35 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v51[0]) = 136315906;
      *(void *)((char *)v51 + 4) = "operator[]";
      WORD6(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 14) = 789;
      WORD1(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 4) = v8;
      WORD6(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      *(void *)&long long v35 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v51[0]) = 136315906;
      *(void *)((char *)v51 + 4) = "operator[]";
      WORD6(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 14) = 789;
      WORD1(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 4) = v8;
      WORD6(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      *(void *)&long long v35 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v51[0]) = 136315906;
      *(void *)((char *)v51 + 4) = "operator[]";
      WORD6(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 14) = 789;
      WORD1(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 4) = v3;
      WORD6(v51[1]) = 2048;
      *(void *)((char *)&v51[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      uint64_t v34 = 0;
      memset(v51, 0, sizeof(v51));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v44 = 136315906;
      *(void *)&v44[4] = "operator[]";
      __int16 v45 = 1024;
      int v46 = 789;
      __int16 v47 = 2048;
      unint64_t v48 = v7;
      __int16 v49 = 2048;
      unint64_t v50 = a1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
LABEL_34:
      goto LABEL_35;
  }
LABEL_41:
  if (v29[0] && v32) {
    (*(void (**)(void))(*(void *)v29[0] + 40))();
  }
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v33);
}

uint64_t re::anonymous namespace'::makeManifoldByVertexSplitting(unint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  LODWORD(v33) = 0;
  uint64_t v36 = 0;
  v34[1] = 0;
  v34[2] = 0;
  int v35 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(v34, 1uLL);
  ++v35;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  uint64_t v37 = 0;
  int v40 = 0;
  uint64_t v68 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  int v43 = 0;
  int v46 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  int v49 = 0;
  int v52 = 0;
  int v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  int v58 = 0;
  int v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v64 = 0;
  int v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  re::internal::GeomConnectivityNonManifold::build(a1 + 16, (uint64_t)&v33);
  uint64_t v32 = 0;
  v29[1] = 0;
  unint64_t v30 = 0;
  v29[0] = 0;
  int v31 = 0;
  re::DynamicArray<unsigned int>::resize(v29, (4 * *(_DWORD *)(a1 + 40)), re::kInvalidMeshIndex);
  unint64_t v7 = *(long long **)(a1 + 40);
  if (v7)
  {
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 56);
    unint64_t v11 = v30;
    do
    {
      if (v9 == v7) {
        goto LABEL_95;
      }
      uint64_t v12 = 0;
      long long v71 = *(_OWORD *)(v10 + 16 * (void)v9);
      uint64_t v13 = v32;
      if (HIDWORD(v71) == -1) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = 4;
      }
      do
      {
        unint64_t v3 = (v8 + v12);
        if (v11 <= v3) {
          goto LABEL_45;
        }
        *(_DWORD *)(v13 + 4 * v3) = *((_DWORD *)&v71 + v12++);
      }
      while (v14 != v12);
      uint64_t v9 = (long long *)((char *)v9 + 1);
      v8 += 4;
    }
    while (v9 != (long long *)v7);
  }
  uint64_t v27 = a2;
  re::DynamicArray<re::RigComponentConstraint>::operator=(a3, (uint64_t)&v75);
  if ((void)v75 && (void)v77) {
    (*(void (**)(void))(*(void *)v75 + 40))();
  }
  unsigned int v28 = 0;
  unsigned int v15 = DWORD2(v42);
  if (DWORD2(v42))
  {
    unsigned int v16 = 0;
    unint64_t v7 = &v76;
    do
    {
      unint64_t v11 = v16;
      unint64_t v3 = v39;
      if (v39 <= v16) {
        goto LABEL_96;
      }
      if ((*(unsigned char *)(v41 + v16) & 2) != 0)
      {
        *(void *)&long long v75 = &v33;
        DWORD2(v75) = v16;
        *(void *)&long long v77 = 0;
        long long v76 = 0uLL;
        DWORD2(v77) = 0;
        uint64_t v81 = 0;
        long long v78 = 0u;
        long long v79 = 0u;
        int v80 = 0;
        re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(&v33, v16, (uint64_t)&v76);
        LOBYTE(v89[0]) = 0;
        re::DynamicArray<unsigned char>::resize((void *)&v78 + 1, v77, v89);
        long long v74 = 0;
        uint64_t v72 = 0;
        long long v71 = 0uLL;
        int v73 = 0;
        {
          do
          {
            if (!v72) {
              goto LABEL_29;
            }
            uint64_t v17 = v74;
            uint64_t v18 = &v74[v72];
            unint64_t v11 = *(void *)(a1 + 40);
            uint64_t v19 = *(void *)(a1 + 56);
            do
            {
              unint64_t v3 = *v17;
              if (v11 <= v3)
              {
                *(void *)&long long v70 = 0;
                long long v90 = 0u;
                long long v91 = 0u;
                memset(v89, 0, sizeof(v89));
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v82 = 136315906;
                *(void *)&v82[4] = "operator[]";
                __int16 v83 = 1024;
                int v84 = 797;
                __int16 v85 = 2048;
                unint64_t v86 = v3;
                __int16 v87 = 2048;
                unint64_t v88 = v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_95:
                *(void *)&long long v71 = 0;
                long long v78 = 0u;
                long long v79 = 0u;
                long long v76 = 0u;
                long long v77 = 0u;
                long long v75 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                v89[0] = 136315906;
                *(void *)&v89[1] = "operator[]";
                LOWORD(v89[3]) = 1024;
                *(_DWORD *)((char *)&v89[3] + 2) = 797;
                HIWORD(v89[4]) = 2048;
                *(void *)&v89[5] = v7;
                LOWORD(v89[7]) = 2048;
                *(void *)((char *)&v89[7] + 2) = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_96:
                *(void *)&long long v71 = 0;
                long long v78 = 0u;
                long long v79 = 0u;
                long long v76 = 0u;
                long long v77 = 0u;
                long long v75 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                v89[0] = 136315906;
                *(void *)&v89[1] = "operator[]";
                LOWORD(v89[3]) = 1024;
                *(_DWORD *)((char *)&v89[3] + 2) = 797;
                HIWORD(v89[4]) = 2048;
                *(void *)&v89[5] = v11;
                LOWORD(v89[7]) = 2048;
                *(void *)((char *)&v89[7] + 2) = v3;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              uint64_t v20 = 0;
              long long v70 = *(_OWORD *)(v19 + 16 * v3);
              int v21 = 4 * v3;
              int v22 = *(_DWORD *)(a3 + 16);
              unint64_t v3 = v30;
              uint64_t v23 = v32;
              if (HIDWORD(v70) == -1) {
                uint64_t v24 = 3;
              }
              else {
                uint64_t v24 = 4;
              }
              do
              {
                if (*((_DWORD *)&v70 + v20) == v28)
                {
                  unint64_t v25 = (v21 + v20);
                  if (v3 <= v25)
                  {
                    uint64_t v69 = 0;
                    long long v90 = 0u;
                    long long v91 = 0u;
                    memset(v89, 0, sizeof(v89));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)uint64_t v82 = 136315906;
                    *(void *)&v82[4] = "operator[]";
                    __int16 v83 = 1024;
                    int v84 = 789;
                    __int16 v85 = 2048;
                    unint64_t v86 = v25;
                    __int16 v87 = 2048;
                    unint64_t v88 = v3;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_45:
                    *(void *)uint64_t v82 = 0;
                    long long v78 = 0u;
                    long long v79 = 0u;
                    long long v76 = 0u;
                    long long v77 = 0u;
                    long long v75 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v89[0] = 136315906;
                    *(void *)&v89[1] = "operator[]";
                    LOWORD(v89[3]) = 1024;
                    *(_DWORD *)((char *)&v89[3] + 2) = 789;
                    HIWORD(v89[4]) = 2048;
                    *(void *)&v89[5] = v3;
                    LOWORD(v89[7]) = 2048;
                    *(void *)((char *)&v89[7] + 2) = v11;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_46:
                    re::internal::buildMeshFromNewFaceVertices(a1, (uint64_t)v29, (unint64_t)v27);
                    goto LABEL_47;
                  }
                  *(_DWORD *)(v23 + 4 * v25) = v22;
                }
                ++v20;
              }
              while (v24 != v20);
              ++v17;
            }
            while (v17 != v18);
LABEL_29:
            re::DynamicArray<int>::add((void *)a3, &v28);
          }
        }
        if ((void)v71 && v74) {
          (*(void (**)(void))(*(void *)v71 + 40))();
        }
        if (*((void *)&v78 + 1))
        {
          if (v81) {
            (*(void (**)(void))(**((void **)&v78 + 1) + 40))();
          }
          uint64_t v81 = 0;
          long long v79 = 0uLL;
          *((void *)&v78 + 1) = 0;
          ++v80;
        }
        if ((void)v76 && (void)v78) {
          (*(void (**)(void))(*(void *)v76 + 40))();
        }
        unsigned int v16 = v28;
        unsigned int v15 = DWORD2(v42);
      }
      unsigned int v28 = ++v16;
    }
    while (v16 < v15);
  }
  if (*(void *)(a3 + 16) != *(_DWORD *)(a1 + 16)) {
    goto LABEL_46;
  }
  re::GeomMesh::copy((re::GeomMesh *)a1, a2);
LABEL_47:
  if (v29[0] && v32) {
    (*(void (**)(void, uint64_t))(*(void *)v29[0] + 40))(v29[0], v32);
  }
  if (*((void *)&v65 + 1))
  {
    if (v68) {
      (*(void (**)(void, uint64_t))(**((void **)&v65 + 1) + 40))(*((void *)&v65 + 1), v68);
    }
    uint64_t v68 = 0;
    long long v66 = 0uLL;
    *((void *)&v65 + 1) = 0;
    ++v67;
  }
  if (*((void *)&v62 + 1))
  {
    if ((void)v65) {
      (*(void (**)(void, void))(**((void **)&v62 + 1) + 40))(*((void *)&v62 + 1), v65);
    }
    *(void *)&long long v65 = 0;
    long long v63 = 0uLL;
    *((void *)&v62 + 1) = 0;
    ++v64;
  }
  if (*((void *)&v59 + 1))
  {
    if ((void)v62) {
      (*(void (**)(void, void))(**((void **)&v59 + 1) + 40))(*((void *)&v59 + 1), v62);
    }
    *(void *)&long long v62 = 0;
    long long v60 = 0uLL;
    *((void *)&v59 + 1) = 0;
    ++v61;
  }
  if (*((void *)&v56 + 1))
  {
    if ((void)v59) {
      (*(void (**)(void, void))(**((void **)&v56 + 1) + 40))(*((void *)&v56 + 1), v59);
    }
    *(void *)&long long v59 = 0;
    long long v57 = 0uLL;
    *((void *)&v56 + 1) = 0;
    ++v58;
  }
  if (*((void *)&v53 + 1))
  {
    if ((void)v56) {
      (*(void (**)(void, void))(**((void **)&v53 + 1) + 40))(*((void *)&v53 + 1), v56);
    }
    *(void *)&long long v56 = 0;
    long long v54 = 0uLL;
    *((void *)&v53 + 1) = 0;
    ++v55;
  }
  if (*((void *)&v50 + 1))
  {
    if ((void)v53) {
      (*(void (**)(void, void))(**((void **)&v50 + 1) + 40))(*((void *)&v50 + 1), v53);
    }
    *(void *)&long long v53 = 0;
    long long v51 = 0uLL;
    *((void *)&v50 + 1) = 0;
    ++v52;
  }
  if (*((void *)&v47 + 1))
  {
    if ((void)v50) {
      (*(void (**)(void, void))(**((void **)&v47 + 1) + 40))(*((void *)&v47 + 1), v50);
    }
    *(void *)&long long v50 = 0;
    long long v48 = 0uLL;
    *((void *)&v47 + 1) = 0;
    ++v49;
  }
  if (*((void *)&v44 + 1))
  {
    if ((void)v47) {
      (*(void (**)(void, void))(**((void **)&v44 + 1) + 40))(*((void *)&v44 + 1), v47);
    }
    *(void *)&long long v47 = 0;
    long long v45 = 0uLL;
    *((void *)&v44 + 1) = 0;
    ++v46;
  }
  if (*((void *)&v41 + 1))
  {
    if ((void)v44) {
      (*(void (**)(void, void))(**((void **)&v41 + 1) + 40))(*((void *)&v41 + 1), v44);
    }
    *(void *)&long long v44 = 0;
    long long v42 = 0uLL;
    *((void *)&v41 + 1) = 0;
    ++v43;
  }
  if (v37)
  {
    if ((void)v41) {
      (*(void (**)(uint64_t, void))(*(void *)v37 + 40))(v37, v41);
    }
    *(void *)&long long v41 = 0;
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    uint64_t v37 = 0;
    ++v40;
  }
  uint64_t result = v34[0];
  if (v34[0])
  {
    if (v36) {
      return (*(uint64_t (**)(void, uint64_t))(*(void *)v34[0] + 40))(v34[0], v36);
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::makeMeshWithNoDuplicatedFaceVertices(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)&v34);
  if ((void)v34 && (void)v36) {
    (*(void (**)(void))(*(void *)v34 + 40))();
  }
  uint64_t v23 = 0;
  v20[1] = 0;
  unint64_t v21 = 0;
  v20[0] = 0;
  int v22 = 0;
  re::DynamicArray<unsigned int>::resize(v20, (4 * *(_DWORD *)(a1 + 40)), re::kInvalidMeshIndex);
  unint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_21;
  }
  unint64_t v18 = a2;
  unint64_t v7 = 0;
  char v8 = 0;
  do
  {
    if (v6 <= v7) {
      goto LABEL_27;
    }
    unint64_t v6 = 0;
    long long v25 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * v7);
    int v9 = 4 * v7;
    if (HIDWORD(v25) == -1) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 4;
    }
    do
    {
      int v11 = *((_DWORD *)&v25 + v6);
      int v19 = v11;
      unint64_t v12 = (v9 + v6);
      unint64_t v13 = v21;
      if (v21 <= v12)
      {
        uint64_t v24 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v26 = 136315906;
        uint64_t v27 = "operator[]";
        __int16 v28 = 1024;
        int v29 = 789;
        __int16 v30 = 2048;
        unint64_t v31 = (v9 + v6);
        __int16 v32 = 2048;
        unint64_t v33 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        *(void *)&long long v25 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v26 = 136315906;
        uint64_t v27 = "operator[]";
        __int16 v28 = 1024;
        int v29 = 797;
        __int16 v30 = 2048;
        unint64_t v31 = v7;
        __int16 v32 = 2048;
        unint64_t v33 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v14 = v23;
      *(_DWORD *)(v23 + 4 * v12) = v11;
      if (v6)
      {
        uint64_t v15 = 0;
        while (*((_DWORD *)&v25 + v15) != v19)
        {
          if (v6 == ++v15) {
            goto LABEL_17;
          }
        }
        *(_DWORD *)(v14 + 4 * v12) = a3[2];
        re::DynamicArray<int>::add(a3, &v19);
        char v8 = 1;
      }
LABEL_17:
      ++v6;
    }
    while (v6 != v10);
    ++v7;
    unint64_t v6 = *(void *)(a1 + 40);
  }
  while (v7 < v6);
  if ((v8 & 1) == 0)
  {
LABEL_21:
    uint64_t v16 = 0;
    goto LABEL_22;
  }
  re::internal::buildMeshFromNewFaceVertices(a1, (uint64_t)v20, v18);
  uint64_t v16 = 1;
LABEL_22:
  if (v20[0] && v23) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  return v16;
}

void re::anonymous namespace'::makeIdentityMap(re::_anonymous_namespace_ *this, unsigned int a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v4 = a2;
  re::DynamicArray<float>::resize((uint64_t)this, a2);
  if (a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 4);
    do
    {
      if (v6 == v5)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v7 + 4 * v5) = v5;
      ++v5;
    }
    while (v4 != v5);
  }
}

uint64_t re::anonymous namespace'::VertexFaceNeighborhood::findNextManifoldNeighborhood(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  unint64_t v2 = *(void *)(a1 + 72);
  if (!v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unsigned int v5 = 1;
  while (*(unsigned char *)(*(void *)(a1 + 88) + v4))
  {
    unint64_t v4 = v5;
    if (v2 <= v5++) {
      return 0;
    }
  }
  if (*(void *)(a1 + 32) <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  int v8 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v4);
}

uint64_t re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v5 = a2 - 1;
    unint64_t v6 = a1[18];
    if (v6 <= v5) {
      goto LABEL_17;
    }
    unsigned int v7 = *(_DWORD *)(a1[20] + 4 * v5);
  }
  else
  {
    unsigned int v7 = 0;
    unint64_t v6 = a1[18];
  }
  if (v6 <= a2)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v8 = *(_DWORD *)(a1[20] + 4 * a2);
  re::DynamicArray<float>::resize(a3, v8 - v7);
  uint64_t result = v8 - v7;
  if (v8 > v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = *(void *)(a3 + 32);
    if (a1[28] <= (unint64_t)v7) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = a1[28];
    }
    while (v13 - v7 != v10)
    {
      if (v11 <= v10) {
        goto LABEL_15;
      }
      *(_DWORD *)(v12 + 4 * v10) = *(_DWORD *)(a1[30] + 4 * v7 + 4 * v10);
      if (result == ++v10) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t re::anonymous namespace'::VertexFaceNeighborhood::findReachableFaces(re::internal::GeomConnectivityNonManifold **a1, int a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  int v23 = a2;
  unint64_t v3 = (unint64_t)a1[4];
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 1;
  while (*((_DWORD *)a1[6] + v6) != a2)
  {
    uint64_t v6 = v7;
    if (v3 <= v7++) {
      return 0;
    }
  }
  if (!v7) {
    return 0;
  }
  unint64_t v9 = v7 - 1;
  unint64_t v10 = (unsigned int *)a1[9];
  if ((unint64_t)v10 <= v9) {
    goto LABEL_29;
  }
  unint64_t v11 = a1[11];
  if (*((unsigned char *)v11 + v9)) {
    return 0;
  }
  *((unsigned char *)v11 + v9) = 1;
  re::DynamicArray<int>::add(a3, &v23);
  unint64_t v10 = (unsigned int *)a1[4];
  if ((unint64_t)v10 <= v9)
  {
LABEL_30:
    *(void *)long long v25 = 0;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)long long v34 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    uint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 789;
    __int16 v30 = 2048;
    unint64_t v31 = v9;
    __int16 v32 = 2048;
    unint64_t v33 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v10 = v25;
  unsigned __int8 v13 = re::internal::GeomConnectivityNonManifold::faceIncidentEdges(*a1, *((_DWORD *)a1[6] + v9), v25);
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v9 = v25[v15];
      uint64_t v16 = *a1;
      uint64_t v17 = (unsigned int *)*((void *)*a1 + 8);
      if ((unint64_t)v17 <= v9) {
        break;
      }
      if ((*(unsigned char *)(*((void *)v16 + 10) + v9) & 8) == 0)
      {
        re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v16, v25[v15], v34);
        int v18 = *((_DWORD *)a1 + 2);
        if (v34[0] == v18 || v34[1] == v18)
        {
          *(void *)&long long v36 = 0;
          *(void *)&long long v35 = 0;
          memset(v34, 0, sizeof(v34));
          DWORD2(v35) = 0;
          re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(*a1, v9, (uint64_t)v34);
          if ((void)v35)
          {
            uint64_t v20 = (unsigned int *)v36;
            uint64_t v21 = 4 * v35;
            do
            {
              unsigned int v22 = *v20++;
              v21 -= 4;
            }
            while (v21);
          }
          if (*(void *)v34)
          {
            if ((void)v36) {
              (*(void (**)(void))(**(void **)v34 + 40))();
            }
          }
        }
      }
      if (++v15 == v14) {
        return 1;
      }
    }
    uint64_t v24 = 0;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)long long v34 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    uint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 797;
    __int16 v30 = 2048;
    unint64_t v31 = v9;
    __int16 v32 = 2048;
    unint64_t v33 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    *(void *)long long v25 = 0;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)long long v34 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    uint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 789;
    __int16 v30 = 2048;
    unint64_t v31 = v9;
    __int16 v32 = 2048;
    unint64_t v33 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  return 1;
}

uint64_t re::internal::GeomConnectivityNonManifold::faceIncidentEdges(re::internal::GeomConnectivityNonManifold *this, int a2, unsigned int *a3)
{
  unint64_t v3 = (4 * a2);
  unint64_t v4 = *((void *)this + 53);
  if (v4 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *((void *)this + 55);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  unint64_t v6 = v3 | 1;
  if (v4 <= v6)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  unint64_t v7 = v3 | 2;
  if (v4 <= v7)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = *(_DWORD *)(v5 + 4 * v7);
  unint64_t v8 = v3 | 3;
  if (v4 <= v8) {
    goto LABEL_12;
  }
  unsigned int v9 = *(_DWORD *)(v5 + 4 * v8);
  a3[3] = v9;
  if (v9 == -1) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v5 = a2 - 1;
    unint64_t v6 = a1[38];
    if (v6 <= v5) {
      goto LABEL_17;
    }
    unsigned int v7 = *(_DWORD *)(a1[40] + 4 * v5);
  }
  else
  {
    unsigned int v7 = 0;
    unint64_t v6 = a1[38];
  }
  if (v6 <= a2)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v8 = *(_DWORD *)(a1[40] + 4 * a2);
  re::DynamicArray<float>::resize(a3, v8 - v7);
  uint64_t result = v8 - v7;
  if (v8 > v7)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = *(void *)(a3 + 32);
    if (a1[43] <= (unint64_t)v7) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = a1[43];
    }
    while (v13 - v7 != v10)
    {
      if (v11 <= v10) {
        goto LABEL_15;
      }
      *(_DWORD *)(v12 + 4 * v10) = *(_DWORD *)(a1[45] + 4 * v7 + 4 * v10);
      if (result == ++v10) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeVertices(uint64_t this, int a2, unsigned int *a3)
{
  unint64_t v3 = (2 * a2);
  unint64_t v4 = *(void *)(this + 264);
  if (v4 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v5 = *(void *)(this + 280);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  unint64_t v6 = v3 | 1;
  if (v4 <= v6) {
    goto LABEL_5;
  }
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  return this;
}

uint64_t re::internal::writeGeomMeshToStream(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  uint64_t v67 = *MEMORY[0x263EF8340];
  LODWORD(v62) = 538446081;
  while (v4 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v4, 4 - v4);
    v4 += result;
    if (!result) {
      return result;
    }
  }
  unint64_t v6 = 0;
  LODWORD(v62) = 1;
  while (v6 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v6, 4 - v6);
    v6 += result;
    if (!result) {
      return result;
    }
  }
  unint64_t v7 = 0;
  LODWORD(v62) = 1213416781;
  while (v7 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v7, 4 - v7);
    v7 += result;
    if (!result) {
      return result;
    }
  }
  unint64_t v8 = 0;
  LODWORD(v62) = *(_DWORD *)(a1 + 16);
  while (v8 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v8, 4 - v8);
    v8 += result;
    if (!result) {
      return result;
    }
  }
  unint64_t v9 = 0;
  LODWORD(v62) = 1280066883;
  while (v9 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v9, 4 - v9);
    v9 += result;
    if (!result) {
      return result;
    }
  }
  unint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = v11;
  LODWORD(v62) = v11;
  while (v10 <= 3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v10, 4 - v10);
    v10 += result;
    if (!result) {
      return result;
    }
  }
  if (v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = *(void *)(a1 + 40);
      if (v15 <= v14)
      {
        long long v66 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v54 = 136315906;
        int v55 = "operator[]";
        __int16 v56 = 1024;
        int v57 = 797;
        __int16 v58 = 2048;
        unint64_t v59 = v14;
        __int16 v60 = 2048;
        unint64_t v61 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(a1 + 56) + v13;
      do
      {
        *(_DWORD *)&v53[v16] = *(_DWORD *)(v17 + v16);
        v16 += 4;
      }
      while (v16 != 16);
      unint64_t v18 = 0;
      while (v18 <= 0xF)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, unint64_t))(*(void *)a2 + 16))(a2, &v53[v18], 16 - v18);
        v18 += result;
        if (!result) {
          return result;
        }
      }
      ++v14;
      v13 += 16;
    }
    while (v14 != v12);
  }
  if (result)
  {
    if (result)
    {
      int v19 = *(_DWORD *)(a1 + 640);
      if (result)
      {
        if (v19)
        {
          unsigned int v20 = 0;
          uint64_t v21 = (re::internal::GeomAttributeManager *)(a1 + 64);
          while (1)
          {
            uint64_t v23 = re::internal::GeomAttributeManager::attributeByIndex(v21, v20);
            unint64_t v24 = 0;
            LODWORD(v62) = 1381258305;
            while (v24 <= 3)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v24, 4 - v24);
              v24 += result;
              if (!result) {
                return result;
              }
            }
            uint64_t result = 0;
            unsigned int v25 = *(unsigned __int8 *)(v23 + 17);
            if (v25 < 0xB) {
              char v26 = v25 + 1;
            }
            else {
              char v26 = 0;
            }
            LOBYTE(v62) = v26;
            while (!result)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v62, 1);
              if (!result) {
                return result;
              }
            }
            uint64_t result = 0;
            unsigned int v27 = *(unsigned __int8 *)(v23 + 16);
            if (v27 < 5) {
              char v28 = v27 + 1;
            }
            else {
              char v28 = 0;
            }
            LOBYTE(v62) = v28;
            while (!result)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v62, 1);
              if (!result) {
                return result;
              }
            }
            unint64_t v29 = 0;
            LODWORD(v62) = 1280066883;
            while (v29 <= 3)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v29, 4 - v29);
              v29 += result;
              if (!result) {
                return result;
              }
            }
            if (*(unsigned char *)(v23 + 16) == 3)
            {
              uint64_t v30 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v23, v22);
              unint64_t v32 = 0;
              uint64_t v33 = *(void *)(v30 + 24);
              uint64_t v51 = v33;
              uint64_t v52 = v30;
              LODWORD(v62) = v33;
              while (v32 <= 3)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v32, 4 - v32);
                v32 += result;
                if (!result) {
                  return result;
                }
              }
              if (v33)
              {
                uint64_t v35 = 0;
                unint64_t v36 = 0;
                do
                {
                  unint64_t v37 = *(void *)(v52 + 24);
                  if (v37 <= v36)
                  {
                    long long v66 = 0u;
                    long long v64 = 0u;
                    long long v65 = 0u;
                    long long v62 = 0u;
                    long long v63 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v54 = 136315906;
                    int v55 = "operator[]";
                    __int16 v56 = 1024;
                    int v57 = 797;
                    __int16 v58 = 2048;
                    unint64_t v59 = v36;
                    __int16 v60 = 2048;
                    unint64_t v61 = v37;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_135:
                    re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Attempt to write out malformed GeomAttribute", "!\"Unreachable code\"", "writeGeomAttrbuteToStream", 372);
                    _os_crash();
                    __break(1u);
LABEL_136:
                    re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
                    _os_crash();
                    __break(1u);
                    JUMPOUT(0x233AB97CCLL);
                  }
                  uint64_t v38 = 0;
                  uint64_t v39 = *(void *)(v52 + 40) + v35;
                  do
                  {
                    *(_DWORD *)&v53[v38] = *(_DWORD *)(v39 + v38);
                    v38 += 4;
                  }
                  while (v38 != 16);
                  unint64_t v40 = 0;
                  while (v40 <= 0xF)
                  {
                    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, unint64_t))(*(void *)a2 + 16))(a2, &v53[v40], 16 - v40);
                    v40 += result;
                    if (!result) {
                      return result;
                    }
                  }
                  ++v36;
                  v35 += 16;
                }
                while (v36 != v51);
                unint64_t v41 = 0;
                long long v42 = (void *)(v52 + 64);
                while (2)
                {
                  LODWORD(v62) = v41;
                  int v43 = *(unsigned __int8 *)(v52 + 60);
                  if (v43 == 2)
                  {
                    uint64_t v45 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v42, (unsigned int *)&v62);
                    if (v45 != -1)
                    {
                      int v44 = *(_DWORD *)(*(void *)(v52 + 72) + 8 * v45 + 4);
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    if (v43 != 1)
                    {
                      if (*(unsigned char *)(v52 + 60)) {
                        goto LABEL_136;
                      }
                      if (v41 >= *(unsigned int *)v42) {
                        int v44 = -1;
                      }
                      else {
                        int v44 = v41;
                      }
LABEL_93:
                      unint64_t v46 = 0;
                      LODWORD(v62) = v44;
                      while (v46 <= 3)
                      {
                        uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v46, 4 - v46);
                        v46 += result;
                        if (!result) {
                          return result;
                        }
                      }
                      if (++v41 == v51) {
                        goto LABEL_98;
                      }
                      continue;
                    }
                    if (*(void *)(v52 + 80) > v41)
                    {
                      int v44 = *(_DWORD *)(*(void *)(v52 + 96) + 4 * v41);
                      goto LABEL_93;
                    }
                  }
                  break;
                }
                int v44 = -1;
                goto LABEL_93;
              }
            }
            else
            {
              unint64_t v34 = 0;
              LODWORD(v62) = 0;
              while (v34 < 4)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v34, 4 - v34);
                v34 += result;
                if (!result) {
                  return result;
                }
              }
            }
LABEL_98:
            unint64_t v47 = 0;
            LODWORD(v62) = 1279607621;
            while (v47 <= 3)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v62 + v47, 4 - v47);
              v47 += result;
              if (!result) {
                return result;
              }
            }
            if (!result) {
              return result;
            }
            if (!result) {
              return result;
            }
            int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
            if (!result) {
              return result;
            }
            switch(*(unsigned char *)(v23 + 17))
            {
              case 0:
                  return 0;
                goto LABEL_127;
              case 1:
                  return 0;
                goto LABEL_127;
              case 2:
                  return 0;
                goto LABEL_127;
              case 3:
                  return 0;
                goto LABEL_127;
              case 4:
                  return 0;
                goto LABEL_127;
              case 5:
                  return 0;
                goto LABEL_127;
              case 6:
                  return 0;
                goto LABEL_127;
              case 7:
                  return 0;
                goto LABEL_127;
              case 8:
                  return 0;
                goto LABEL_127;
              case 9:
                  return 0;
                goto LABEL_127;
              case 0xA:
                  return 0;
LABEL_127:
                if (!result) {
                  return result;
                }
                  return 0;
                if (++v20 == v19) {
                  goto LABEL_130;
                }
                break;
              default:
                goto LABEL_135;
            }
          }
        }
LABEL_130:
        uint64_t result = 0;
        if (v50) {
      }
        }
    }
  }
  return result;
}

BOOL re::internal::anonymous namespace'::writeToStreamHelper<unsigned int>(int a1, uint64_t a2)
{
  unint64_t v3 = 0;
  int v7 = a1;
  do
  {
    unint64_t v4 = v3;
    if (v3 > 3) {
      break;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v7 + v3, 4 - v3);
    unint64_t v3 = v5 + v4;
  }
  while (v5);
  return v4 > 3;
}

BOOL re::internal::anonymous namespace'::writeCStringHelper(char *__s, uint64_t a2)
{
  unint64_t v4 = 0;
  int v15 = 1162690894;
  while (v4 <= 3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v15 + v4, 4 - v4);
    v4 += v5;
    if (!v5) {
      return 0;
    }
  }
  if (__s) {
    unsigned int v6 = strlen(__s) + 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unint64_t v7 = 0;
  unsigned int v16 = v6;
  while (v7 <= 3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v16 + v7, 4 - v7);
    v7 += v8;
    if (!v8) {
      return 0;
    }
  }
  if (v6)
  {
    unint64_t v9 = 0;
    while (v6 > v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, &__s[v9], v6 - v9);
      v9 += v10;
      if (!v10) {
        return 0;
      }
    }
  }
  unint64_t v13 = 0;
  int v17 = 1296125509;
  do
  {
    BOOL v11 = v13 > 3;
    if (v13 > 3) {
      break;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v17 + v13, 4 - v13);
    v13 += v14;
  }
  while (v14);
  return v11;
}

uint64_t re::internal::readGeomMeshFromStream(re::internal *this, re::GeomMesh *a2, re::StreamReader *a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v56);
  int v55 = 0;
  uint64_t v5 = 0;
  if ((*(uint64_t (**)(re::GeomMesh *, int *, uint64_t))(*(void *)a2 + 16))(a2, &v55, 4) == 4
    && v55 == 538446081)
  {
    int v54 = 0;
    uint64_t v5 = 0;
    if ((*(uint64_t (**)(re::GeomMesh *, int *, uint64_t))(*(void *)a2 + 16))(a2, &v54, 4) == 4
      && v54 == 1)
    {
      LODWORD(v81) = 0;
      uint64_t v5 = 0;
      if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4
        && v81 == 1213416781)
      {
        unsigned int v53 = 0;
        uint64_t v5 = 0;
        if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(void *)a2 + 16))(a2, &v53, 4) == 4)
        {
          unsigned int v56 = v53;
          unsigned int v61 = v53;
          if (v62)
          {
            unint64_t v9 = v63;
            uint64_t v10 = 8 * v62;
            do
            {
              uint64_t v11 = *v9++;
              (*(void (**)(uint64_t, void))(*(void *)v11 + 72))(v11, v61);
              v10 -= 8;
            }
            while (v10);
          }
          LODWORD(v81) = 0;
          uint64_t v5 = 0;
          if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4
            && v81 == 1280066883)
          {
            unsigned int v52 = 0;
            uint64_t v5 = 0;
            if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(void *)a2 + 16))(a2, &v52, 4) == 4)
            {
              unsigned int v13 = v52;
              re::DynamicArray<re::GeomCell4>::resize(&v57, v52);
              unsigned int v64 = v13;
              if (v65)
              {
                uint64_t v14 = v66;
                uint64_t v15 = 8 * v65;
                do
                {
                  uint64_t v16 = *v14++;
                  (*(void (**)(uint64_t, void))(*(void *)v16 + 72))(v16, v64);
                  v15 -= 8;
                }
                while (v15);
              }
              if (v52)
              {
                for (unint64_t i = 0; i < v52; *(_OWORD *)(v59 + 16 * i++) = v74)
                {
                  unint64_t v18 = 0;
                  while (v18 <= 0xF)
                  {
                    uint64_t v19 = (*(uint64_t (**)(re::GeomMesh *, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)&v74 + v18, 16 - v18);
                    v18 += v19;
                    if (!v19)
                    {
                      uint64_t v5 = 0;
                      goto LABEL_144;
                    }
                  }
                  unint64_t v20 = v58;
                  if (v58 <= i)
                  {
                    *(void *)long long v71 = 0;
                    long long v84 = 0u;
                    long long v85 = 0u;
                    long long v82 = 0u;
                    long long v83 = 0u;
                    long long v81 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)long long v78 = 136315906;
                    *(void *)&v78[4] = "operator[]";
                    *(_WORD *)&v78[12] = 1024;
                    *(_DWORD *)&v78[14] = 789;
                    *(_WORD *)&v78[18] = 2048;
                    *(void *)&v78[20] = i;
                    __int16 v79 = 2048;
                    v80[0] = v20;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                }
              }
              LODWORD(v81) = 0;
              uint64_t v5 = 0;
              if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) != 4|| v81 != 1279607621)
              {
                goto LABEL_144;
              }
              uint64_t v51 = 0;
              memset(v49, 0, sizeof(v49));
              int v50 = 0;
              uint64_t v5 = 0;
              {
                unsigned int v48 = 0;
                uint64_t v5 = 0;
                if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(void *)a2 + 16))(a2, &v48, 4) == 4)
                {
                  if (v48)
                  {
                    int v22 = 0;
                    while (1)
                    {
                      LODWORD(v81) = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) != 4|| v81 != 1381258305)
                      {
                        goto LABEL_148;
                      }
                      unsigned __int8 v69 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned __int8 *, uint64_t))(*(void *)a2 + 16))(a2, &v69, 1) != 1)goto LABEL_148; {
                      unsigned int v24 = v69 - 1;
                      }
                      if (v24 > 0xA) {
                        goto LABEL_148;
                      }
                      unsigned __int8 v68 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned __int8 *, uint64_t))(*(void *)a2 + 16))(a2, &v68, 1) != 1)goto LABEL_148; {
                      unsigned int v25 = v68 - 1;
                      }
                      if (v25 > 4) {
                        goto LABEL_148;
                      }
                      LODWORD(v81) = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) != 4|| v81 != 1280066883)
                      {
                        goto LABEL_148;
                      }
                      unsigned __int8 v46 = v24;
                      int v47 = v22;
                      unsigned int v67 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(void *)a2 + 16))(a2, &v67, 4) != 4)goto LABEL_148; {
                      *(void *)((char *)v80 + 2) = 0;
                      }
                      memset(v78, 0, sizeof(v78));
                      uint64_t v77 = 0;
                      unint64_t v75 = 0;
                      long long v74 = 0uLL;
                      int v76 = 0;
                      if (v67)
                      {
                        re::DynamicArray<float>::resize((uint64_t)v78, v67);
                        re::DynamicArray<re::GeomCell4>::resize(&v74, v67);
                        if (v67)
                        {
                          unint64_t v27 = 0;
                          while (2)
                          {
                            unint64_t v28 = v75;
                            if (v75 <= v27)
                            {
                              uint64_t v70 = 0;
                              long long v84 = 0u;
                              long long v85 = 0u;
                              long long v82 = 0u;
                              long long v83 = 0u;
                              long long v81 = 0u;
                              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              *(_DWORD *)long long v71 = 136315906;
                              *(void *)&v71[4] = "operator[]";
                              *(_WORD *)&v71[12] = 1024;
                              *(_DWORD *)&v71[14] = 789;
                              *(_WORD *)&v71[18] = 2048;
                              *(void *)&v71[20] = v27;
                              __int16 v72 = 2048;
                              v73[0] = v28;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              JUMPOUT(0x233ABA7D0);
                            }
                            unint64_t v29 = 0;
                            uint64_t v30 = v77 + 16 * v27;
                            while (v29 <= 0xF)
                            {
                              uint64_t v31 = (*(uint64_t (**)(re::GeomMesh *, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v30 + v29, 16 - v29);
                              v29 += v31;
                              if (!v31)
                              {
LABEL_75:
                                BOOL v37 = 0;
                                goto LABEL_128;
                              }
                            }
                            ++v27;
                            uint64_t v32 = v67;
                            if (v27 < v67) {
                              continue;
                            }
                            break;
                          }
                        }
                        else
                        {
                          uint64_t v32 = 0;
                        }
                        unint64_t v33 = 0;
                        uint64_t v34 = *(void *)((char *)v80 + 2);
                        unint64_t v35 = 4 * v32;
                        while (v35 > v33)
                        {
                          uint64_t v36 = (*(uint64_t (**)(re::GeomMesh *, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v34 + v33, v35 - v33);
                          v33 += v36;
                          if (!v36) {
                            goto LABEL_75;
                          }
                        }
                      }
                      LODWORD(v81) = 0;
                      BOOL v37 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4&& v81 == 1279607621)
                      {
                        break;
                      }
LABEL_128:
                      if ((void)v74 && v77) {
                        (*(void (**)(void))(*(void *)v74 + 40))(v74);
                      }
                      if (*(void *)v78 && *(void *)((char *)v80 + 2)) {
                        (*(void (**)(void))(**(void **)v78 + 40))(*(void *)v78);
                      }
                      if (!v37) {
                        goto LABEL_148;
                      }
                      int v22 = v47 + 1;
                      if (v47 + 1 >= v48) {
                        goto LABEL_136;
                      }
                    }
                    *(void *)((char *)v73 + 2) = 0;
                    memset(v71, 0, sizeof(v71));
                    BOOL v37 = 0;
                    {
                      LODWORD(v81) = 0;
                      BOOL v37 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4&& v81 == 1279350337)
                      {
                        LODWORD(v70) = 0;
                        BOOL v37 = 0;
                        if ((*(uint64_t (**)(re::GeomMesh *, uint64_t *, uint64_t))(*(void *)a2 + 16))(a2, &v70, 4) == 4)
                        {
                          if ((v25 & 0x1F) == 3)
                          {
                            re::internal::GeomBaseTopology::GeomBaseTopology((uint64_t)&v81, v70, (uint64_t)&v74);
                            uint64_t v40 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v56, *(const char **)((char *)v73 + 2), v46, (uint64_t)&v81, (uint64_t)v78);
                            if (*((void *)&v81 + 1) && *((void *)&v83 + 1)) {
                              (*(void (**)(void))(**((void **)&v81 + 1) + 40))(*((void *)&v81 + 1));
                            }
                          }
                          else
                          {
                            unint64_t v41 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v60, *(char **)((char *)v73 + 2), v25, v46);
                            uint64_t v40 = (uint64_t)v41;
                            if (v25 == 4)
                            {
                              (*(void (**)(re::GeomAttribute *, void))(*(void *)v41 + 24))(v41, v70);
LABEL_95:
                              switch(*(unsigned char *)(v40 + 17))
                              {
                                case 0:
                                  break;
                                case 1:
                                  break;
                                case 2:
                                    goto LABEL_124;
                                  break;
                                case 3:
                                    goto LABEL_124;
                                  break;
                                case 4:
                                    goto LABEL_124;
                                  break;
                                case 5:
                                  break;
                                case 6:
                                  break;
                                case 7:
                                  break;
                                case 8:
                                  break;
                                case 9:
                                  break;
                                case 0xA:
                                  break;
                                default:
                                  goto LABEL_124;
                              }
                              LODWORD(v81) = 0;
                              BOOL v37 = 0;
                              if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4&& v81 == 1096171845)
                              {
                                LODWORD(v81) = 0;
                                BOOL v37 = (*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4&& v81 == 1414807877;
                              }
                              goto LABEL_125;
                            }
                          }
                          if (v40) {
                            goto LABEL_95;
                          }
LABEL_124:
                          BOOL v37 = 0;
                        }
                      }
                    }
LABEL_125:
                    if (*(void *)v71 && *(void *)((char *)v73 + 2)) {
                      (*(void (**)(void))(**(void **)v71 + 40))(*(void *)v71);
                    }
                    goto LABEL_128;
                  }
LABEL_136:
                  *(_DWORD *)long long v78 = 0;
                  uint64_t v5 = 0;
                  if ((*(uint64_t (**)(re::GeomMesh *, unsigned char *, uint64_t))(*(void *)a2 + 16))(a2, v78, 4) == 4)
                  {
                    LODWORD(v81) = 0;
                    uint64_t v5 = 0;
                    if ((*(uint64_t (**)(re::GeomMesh *, long long *, uint64_t))(*(void *)a2 + 16))(a2, &v81, 4) == 4&& v81 == 1397050693)
                    {
                      if (re::internal::GeomBaseMesh::areAllFacesValid((re::internal::GeomBaseMesh *)&v56))
                      {
                        int v44 = (re *)re::GeomMesh::operator=((uint64_t)this, &v56);
                        re::GeomMesh::setName(v44, v51);
                        uint64_t v5 = 1;
                      }
                      else
                      {
LABEL_148:
                        uint64_t v5 = 0;
                      }
                    }
                  }
                }
              }
              if (v49[0] && v51) {
                (*(void (**)(void))(*(void *)v49[0] + 40))();
              }
            }
          }
        }
      }
    }
  }
LABEL_144:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v60);
  if (v57 && v59) {
    (*(void (**)(void))(*(void *)v57 + 40))();
  }
  return v5;
}

uint64_t re::internal::anonymous namespace'::readCStringHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  LODWORD(v25[0]) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a2 + 16))(a2, v25, 4);
  uint64_t result = 0;
  if (v4 == 4 && LODWORD(v25[0]) == 1162690894)
  {
    unsigned int v15 = 0;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)a2 + 16))(a2, &v15, 4);
    uint64_t result = 0;
    if (v7 == 4)
    {
      unint64_t v8 = v15;
      if (!v15) {
        goto LABEL_15;
      }
      re::DynamicArray<BOOL>::resize(a1, v15);
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 32);
      while (v8 > v9)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v10 + v9, v8 - v9);
        v9 += result;
        if (!result) {
          return result;
        }
      }
      unint64_t v11 = v15 - 1;
      unint64_t v12 = *(void *)(a1 + 16);
      if (v12 <= v11)
      {
        uint64_t v16 = 0;
        memset(v25, 0, sizeof(v25));
        unint64_t v14 = v12;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        unint64_t v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 789;
        __int16 v21 = 2048;
        unint64_t v22 = v11;
        __int16 v23 = 2048;
        unint64_t v24 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(unsigned char *)(*(void *)(a1 + 32) + v11))
      {
        return 0;
      }
      else
      {
LABEL_15:
        LODWORD(v25[0]) = 0;
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a2 + 16))(a2, v25, 4) == 4
            && LODWORD(v25[0]) == 1296125509;
      }
    }
  }
  return result;
}

uint64_t re::internal::GeomBaseMesh::areAllFacesValid(re::internal::GeomBaseMesh *this)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = v3 + 16 * v2;
    unsigned int v5 = *(_DWORD *)this;
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        if (*(_DWORD *)(v3 + i) < v5)
        {
          unsigned int v7 = *(_DWORD *)(v3 + 12);
          if (v7 < v5 || v7 == -1) {
            continue;
          }
        }
        return 0;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  int v9 = *((_DWORD *)this + 102);
  if (!v9) {
    return 1;
  }
  unsigned int v10 = 0;
  unint64_t v11 = (re::internal::GeomBaseMesh *)((char *)this + 384);
  while (1)
  {
    unint64_t v12 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v11, v10);
    uint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh(v12, v13);
    uint64_t v16 = *(void *)(v14 + 24);
    BOOL v17 = v16 <= v2;
    if (v16 > v2) {
      return v17;
    }
    uint64_t v18 = v14;
    if (v16) {
      break;
    }
    if (v16)
    {
      uint64_t v28 = *(void *)(v14 + 40);
      uint64_t v29 = v28 + 16 * v16;
LABEL_36:
      unsigned int v30 = *(_DWORD *)v18;
      do
      {
        for (uint64_t j = 0; j != 12; j += 4)
        {
          if (*(_DWORD *)(v28 + j) >= v30) {
            return 0;
          }
          unsigned int v32 = *(_DWORD *)(v28 + 12);
          if (v32 >= v30 && v32 != -1) {
            return 0;
          }
        }
        v28 += 16;
      }
      while (v28 != v29);
    }
    if (++v10 == v9) {
      return v17;
    }
  }
  unint64_t v35 = v11;
  unsigned int v36 = v10;
  unint64_t v19 = 0;
  int v20 = (unsigned int *)(v14 + 64);
  uint64_t v21 = *(void *)(v14 + 24);
  uint64_t v22 = 12;
  while (1)
  {
    LODWORD(v37) = v19;
    int v23 = *(unsigned __int8 *)(v18 + 60);
    if (v23 == 2)
    {
      uint64_t v25 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v18 + 64), (unsigned int *)&v37);
      if (v25 == -1) {
        goto LABEL_27;
      }
      unsigned int v24 = *(_DWORD *)(*(void *)(v18 + 72) + 8 * v25 + 4);
      goto LABEL_28;
    }
    if (v23 != 1) {
      break;
    }
    if (*(void *)(v18 + 80) <= v19)
    {
LABEL_27:
      unsigned int v24 = -1;
      goto LABEL_28;
    }
    unsigned int v24 = *(_DWORD *)(*(void *)(v18 + 96) + 4 * v19);
LABEL_28:
    if (v24 > v2) {
      return 0;
    }
    if (*((void *)this + 3) <= (unint64_t)v24)
    {
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v26 = *(void *)(v18 + 24);
    if (v26 <= v19) {
      goto LABEL_52;
    }
    BOOL v27 = *(_DWORD *)(*((void *)this + 5) + 16 * v24 + 12) != -1;
    uint64_t v28 = *(void *)(v18 + 40);
    if (((v27 ^ (*(_DWORD *)(v28 + v22) == -1)) & 1) == 0) {
      return 0;
    }
    ++v19;
    v22 += 16;
    if (v21 == v19)
    {
      uint64_t v29 = v28 + 16 * v26;
      unsigned int v10 = v36;
      unint64_t v11 = v35;
      goto LABEL_36;
    }
  }
  if (!*(unsigned char *)(v18 + 60))
  {
    if (v19 >= *v20) {
      unsigned int v24 = -1;
    }
    else {
      unsigned int v24 = v19;
    }
    goto LABEL_28;
  }
  re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<signed char>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<signed char>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  do
  {
    BOOL v7 = v4 <= v6;
    if (v4 <= v6) {
      break;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v4 - v6);
    v6 += v8;
  }
  while (v8);
  return v7;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<short>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<short>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 2 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<int>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<int>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 4 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 8 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<re::Vector2<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    char v14 = 1;
    return v14 & 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    goto LABEL_17;
  }
LABEL_3:
  unint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v16, 0, sizeof(v16));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v9 = 0;
    unsigned int v10 = (_DWORD *)(v5 + 8 * v7);
    LODWORD(v16[0]) = *v10;
    while (v9 <= 3)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v16 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_15:
        char v14 = v8;
        return v14 & 1;
      }
    }
    unint64_t v12 = 0;
    LODWORD(v16[0]) = v10[1];
    while (v12 <= 3)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v16 + v12, 4 - v12);
      v12 += v13;
      if (!v13) {
        goto LABEL_15;
      }
    }
    ++v7;
    char v14 = 1;
    BOOL v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v14 & 1;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<re::Vector3<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_21:
    char v16 = 1;
    return v16 & 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    goto LABEL_21;
  }
LABEL_3:
  unint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v18, 0, sizeof(v18));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v9 = 0;
    unsigned int v10 = (_DWORD *)(v5 + 16 * v7);
    LODWORD(v18[0]) = *v10;
    while (v9 <= 3)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v18 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_19:
        char v16 = v8;
        return v16 & 1;
      }
    }
    unint64_t v12 = 0;
    LODWORD(v18[0]) = v10[1];
    while (v12 <= 3)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v18 + v12, 4 - v12);
      v12 += v13;
      if (!v13) {
        goto LABEL_19;
      }
    }
    unint64_t v14 = 0;
    LODWORD(v18[0]) = v10[2];
    while (v14 <= 3)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v18 + v14, 4 - v14);
      v14 += v15;
      if (!v15) {
        goto LABEL_19;
      }
    }
    ++v7;
    char v16 = 1;
    BOOL v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v16 & 1;
}

uint64_t re::internal::anonymous namespace'::writeAttributeValues<re::Vector4<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_25:
    char v18 = 1;
    return v18 & 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    goto LABEL_25;
  }
LABEL_3:
  unint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v20, 0, sizeof(v20));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v9 = 0;
    unsigned int v10 = (_DWORD *)(v5 + 16 * v7);
    LODWORD(v20[0]) = *v10;
    while (v9 <= 3)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v20 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_23:
        char v18 = v8;
        return v18 & 1;
      }
    }
    unint64_t v12 = 0;
    LODWORD(v20[0]) = v10[1];
    while (v12 <= 3)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v20 + v12, 4 - v12);
      v12 += v13;
      if (!v13) {
        goto LABEL_23;
      }
    }
    unint64_t v14 = 0;
    LODWORD(v20[0]) = v10[2];
    while (v14 <= 3)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v20 + v14, 4 - v14);
      v14 += v15;
      if (!v15) {
        goto LABEL_23;
      }
    }
    unint64_t v16 = 0;
    LODWORD(v20[0]) = v10[3];
    while (v16 <= 3)
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(void *)a2 + 16))(a2, (char *)v20 + v16, 4 - v16);
      v16 += v17;
      if (!v17) {
        goto LABEL_23;
      }
    }
    ++v7;
    char v18 = 1;
    BOOL v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v18 & 1;
}

uint64_t re::internal::GeomBaseTopology::GeomBaseTopology(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  unsigned int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v5 = *(void *)(a3 + 8);
  void *v4 = *(void *)a3;
  *(void *)(a1 + 16) = v5;
  *(void *)a3 = 0;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = v7;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a1 + 32);
  if (!*(void *)(a1 + 16)) {
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  }
  return a1;
}

uint64_t re::internal::anonymous namespace'::readAttributeValues<signed char>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<signed char>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  do
  {
    BOOL v7 = v4 <= v6;
    if (v4 <= v6) {
      break;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v4 - v6);
    v6 += v8;
  }
  while (v8);
  return v7;
}

uint64_t re::internal::anonymous namespace'::readAttributeValues<short>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<short>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 2 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::anonymous namespace'::readAttributeValues<int>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<float>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 4 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::anonymous namespace'::readAttributeValues<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  uint64_t v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 8 * v4;
  do
  {
    BOOL v8 = v7 <= v6;
    if (v7 <= v6) {
      break;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

BOOL re::internal::anonymous namespace'::readAttributeValues<re::Vector2<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    return 1;
  }
LABEL_3:
  uint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 4, 4) != 4) {
      break;
    }
    BOOL v8 = ++v7 >= (unint64_t)v4;
    v5 += 8;
  }
  while (v4 != v7);
  return v8;
}

BOOL re::internal::anonymous namespace'::readAttributeValues<re::Vector3<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    return 1;
  }
LABEL_3:
  uint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 4, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 8, 4) != 4) {
      break;
    }
    BOOL v8 = ++v7 >= (unint64_t)v4;
    v5 += 16;
  }
  while (v4 != v7);
  return v8;
}

BOOL re::internal::anonymous namespace'::readAttributeValues<re::Vector4<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    uint64_t v6 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (v4) {
      goto LABEL_3;
    }
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v5 = 0;
  if (!v4) {
    return 1;
  }
LABEL_3:
  uint64_t v7 = 0;
  BOOL v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 4, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 8, 4) != 4) {
      break;
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5 + 12, 4) != 4) {
      break;
    }
    BOOL v8 = ++v7 >= (unint64_t)v4;
    v5 += 16;
  }
  while (v4 != v7);
  return v8;
}

uint64_t *re::internal::build3dGlyph(uint64_t a1, CTFontRef font, CGGlyph glyph, uint64_t a4)
{
  uint64_t v391 = *MEMORY[0x263EF8340];
  unint64_t v325 = 0;
  unint64_t v323 = 0;
  info[0] = 0;
  info[1] = 0;
  int v324 = 0;
  if (font && (PathForGlyph = CTFontCreatePathForGlyph(font, glyph, 0)) != 0)
  {
    uint64_t v13 = PathForGlyph;
    CGPathRelease(v13);
    uint64_t v14 = v325;
    unint64_t v15 = v325 + 176 * v323;
    if (v323)
    {
      uint64_t v16 = 126 - 2 * __clz(v323);
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v16 = 0;
LABEL_7:
  if (!v323) {
    goto LABEL_45;
  }
  uint64_t v18 = *(void *)(v325 + 144);
  *(void *)v332 = *(void *)(v325 + 160);
  *(void *)&v332[8] = v18;
  re::computeSignedAreaOf2DPolygon(v332, v17);
  if (v19 < 0.0)
  {
    unint64_t v313 = v323;
    if (v323)
    {
      unint64_t v6 = 0;
      unint64_t v9 = (unint64_t)&v332[80];
      unint64_t v10 = (unint64_t)&v333;
      unint64_t v20 = (unint64_t)&v332[88];
      unint64_t v4 = (unint64_t)&v333 + 8;
      do
      {
        unint64_t v5 = v323;
        if (v323 <= v6) {
          goto LABEL_646;
        }
        unint64_t v5 = v325;
        unint64_t v21 = v325 + 176 * v6;
        memset(&v332[48], 0, 28);
        v336 = 0;
        memset(&v332[80], 0, 36);
        long long v333 = 0u;
        long long v334 = 0u;
        LODWORD(v335) = 0;
        v332[0] = *(unsigned char *)v21;
        long long v22 = *(_OWORD *)(v21 + 32);
        *(_OWORD *)&v332[16] = *(_OWORD *)(v21 + 16);
        *(_OWORD *)&v332[32] = v22;
        *(void *)&v362[2] = 0;
        memset(v360, 0, sizeof(v360));
        unint64_t v23 = *(void *)(v21 + 144);
        unint64_t v7 = v21 + 144;
        re::DynamicArray<unsigned long>::resize((uint64_t)v360, v23);
        if (*(void *)v7)
        {
          unint64_t v24 = 0;
          unint64_t v8 = *(void *)v7 - 1;
          do
          {
            unint64_t v11 = *(void *)&v360[16];
            if (*(void *)&v360[16] <= v8) {
              goto LABEL_598;
            }
            *(void *)(*(void *)&v362[2] + 8 * v8--) = *(void *)(*(void *)(v5 + 176 * v6 + 160) + 8 * v24++);
          }
          while (v24 < *(void *)v7);
        }
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v333 + 8, (uint64_t)v360);
        if (*(void *)v360 && *(void *)&v362[2]) {
          (*(void (**)(void))(**(void **)v360 + 40))();
        }
        *(void *)&v362[2] = 0;
        memset(v360, 0, sizeof(v360));
        unint64_t v25 = v5 + 176 * v6;
        unint64_t v26 = *(void *)(v25 + 64);
        unint64_t v8 = v25 + 64;
        re::DynamicArray<BOOL>::resize((uint64_t)v360, v26);
        if (*(void *)v8)
        {
          unint64_t v27 = 0;
          unint64_t v7 = *(void *)v8 - 1;
          do
          {
            unint64_t v11 = *(void *)&v360[16];
            if (*(void *)&v360[16] <= v7) {
              goto LABEL_599;
            }
            *(unsigned char *)(*(void *)&v362[2] + v7--) = *(unsigned char *)(*(void *)(v5 + 176 * v6 + 80) + v27++);
          }
          while (v27 < *(void *)v8);
        }
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v332[48], (uint64_t)v360);
        if (*(void *)v360 && *(void *)&v362[2]) {
          (*(void (**)(void))(**(void **)v360 + 40))();
        }
        unint64_t v28 = *(void *)(v5 + 176 * v6 + 104);
        unint64_t v7 = v28;
        if (v28)
        {
          re::DynamicArray<unsigned long>::resize((uint64_t)&v332[88], v28);
          unint64_t v5 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = v333;
          uint64_t v31 = *(void *)&v332[80];
          do
          {
            unint64_t v8 = *(void *)&v332[104];
            if (*(void *)&v332[104] <= v5) {
              goto LABEL_600;
            }
            *(void *)(v30 + 8 * v5) = v29;
            unint64_t v8 = *(void *)&v332[64];
            if (*(void *)&v332[64] <= v5)
            {
LABEL_601:
              *(void *)v346 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v360 = 136315906;
              *(void *)&v360[4] = "operator[]";
              *(_WORD *)&v360[12] = 1024;
              *(_DWORD *)&v360[14] = 789;
              *(_WORD *)&v360[18] = 2048;
              *(void *)&v360[20] = v5;
              __int16 v361 = 2048;
              *(void *)v362 = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_602:
              *(void *)v382 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v385 = 136315906;
              *(void *)&v385[4] = "operator[]";
              *(_WORD *)&v385[12] = 1024;
              *(_DWORD *)&v385[14] = 789;
              *(_WORD *)&v385[18] = 2048;
              *(void *)&v385[20] = 0;
              __int16 v386 = 2048;
              *(void *)v387 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_603:
              *(void *)v388 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v382 = 136315906;
              *(void *)&v382[4] = "operator[]";
              *(_WORD *)&v382[12] = 1024;
              *(_DWORD *)&v382[14] = 797;
              *(_WORD *)&v382[18] = 2048;
              *(void *)&v382[20] = v8;
              __int16 v383 = 2048;
              *(void *)v384 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_604:
              *(void *)v388 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v382 = 136315906;
              *(void *)&v382[4] = "operator[]";
              *(_WORD *)&v382[12] = 1024;
              *(_DWORD *)&v382[14] = 609;
              *(_WORD *)&v382[18] = 2048;
              *(void *)&v382[20] = v10;
              __int16 v383 = 2048;
              *(void *)v384 = v20;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_605;
            }
            v29 += *(unsigned __int8 *)(v31 + v5++);
          }
          while (v7 != v5);
        }
        unint64_t v5 = v323;
        if (v323 <= v6) {
          goto LABEL_648;
        }
        unint64_t v5 = v325 + 176 * v6;
        long long v32 = *(_OWORD *)v332;
        long long v33 = *(_OWORD *)&v332[32];
        *(_OWORD *)(v5 + 16) = *(_OWORD *)&v332[16];
        *(_OWORD *)(v5 + 32) = v33;
        *(_OWORD *)unint64_t v5 = v32;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v5 + 48, (uint64_t)&v332[48]);
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v5 + 88, (uint64_t)&v332[88]);
        re::DynamicArray<re::RigComponentConstraint>::operator=(v5 + 128, (uint64_t)&v333 + 8);
        if (*((void *)&v333 + 1))
        {
          uint64_t v17 = (uint64_t)v336;
          if (v336) {
            (*(void (**)(void))(**((void **)&v333 + 1) + 40))();
          }
          v336 = 0;
          long long v334 = 0uLL;
          *((void *)&v333 + 1) = 0;
          LODWORD(v335) = v335 + 1;
        }
        if (*(void *)&v332[88])
        {
          uint64_t v17 = v333;
          if ((void)v333) {
            (*(void (**)(void))(**(void **)&v332[88] + 40))();
          }
          *(void *)&long long v333 = 0;
          memset(&v332[88], 0, 24);
          ++*(_DWORD *)&v332[112];
        }
        if (*(void *)&v332[48])
        {
          uint64_t v17 = *(void *)&v332[80];
          if (*(void *)&v332[80]) {
            (*(void (**)(void))(**(void **)&v332[48] + 40))();
          }
        }
        ++v6;
      }
      while (v6 != v313);
      goto LABEL_44;
    }
LABEL_45:
    unint64_t v34 = 0;
    goto LABEL_46;
  }
LABEL_44:
  unint64_t v34 = v323;
LABEL_46:
  *(void *)&v362[2] = 0;
  memset(v360, 0, sizeof(v360));
  *(void *)&v346[32] = 0;
  memset(v346, 0, 28);
  if (v34)
  {
    unint64_t v20 = 0;
    unint64_t v5 = 1;
    unint64_t v6 = 176;
    do
    {
      unint64_t v4 = v323;
      if (v323 <= v20) {
        goto LABEL_609;
      }
      unint64_t v35 = v325 + 176 * v20;
      uint64_t v36 = *(void *)(v35 + 160);
      uint64_t v37 = *(void *)(v35 + 144);
      *(void *)v332 = v36;
      *(void *)&v332[8] = v37;
      re::computeSignedAreaOf2DPolygon(v332, v17);
      if (v38 != 0.0)
      {
        unint64_t v4 = v323;
        if (v38 <= 0.0)
        {
          if (v323 <= v20) {
            goto LABEL_635;
          }
          long long v39 = v346;
        }
        else
        {
          if (v323 <= v20) {
            goto LABEL_634;
          }
          long long v39 = v360;
        }
      }
      unint64_t v20 = v5;
      BOOL v40 = v34 > v5;
      unint64_t v5 = (v5 + 1);
    }
    while (v40);
    unint64_t v41 = *(void *)&v346[16];
    unint64_t v34 = *(void *)&v360[16];
  }
  else
  {
    unint64_t v41 = 0;
  }
  *(void *)&buf[32] = 0;
  memset(buf, 0, 28);
  uint64_t v321 = 0;
  unint64_t v319 = 0;
  v317 = 0;
  unint64_t v318 = 0;
  int v320 = 0;
  v332[0] = 0;
  re::DynamicArray<BOOL>::resize(buf, v41, v332);
  if (v34) {
  uint64_t v311 = *(void *)&v360[16];
  }
  if (*(void *)&v360[16])
  {
    unint64_t v5 = 0;
    unint64_t v7 = (unint64_t)&v337 + 8;
    int32x4_t v312 = vdupq_n_s32(0x7F800000u);
    unint64_t v8 = 176;
    do
    {
      v332[0] = 1;
      *(void *)&long long v42 = 0x7F0000007FLL;
      *((void *)&v42 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)&v332[16] = v312;
      *(_OWORD *)&v332[32] = v42;
      memset(&v332[48], 0, 28);
      long long v43 = 0uLL;
      memset(&v332[80], 0, 36);
      long long v333 = 0u;
      long long v334 = 0u;
      LODWORD(v335) = 0;
      v336 = 0;
      *((void *)&v339 + 1) = 0;
      long long v338 = 0uLL;
      *((void *)&v337 + 1) = 0;
      LODWORD(v339) = 0;
      unint64_t v20 = *(void *)&v360[16];
      if (*(void *)&v360[16] <= v5) {
        goto LABEL_624;
      }
      unint64_t v314 = v5;
      int v44 = (_OWORD *)(*(void *)&v362[2] + 176 * v5);
      long long v46 = v44[1];
      long long v45 = v44[2];
      *(_OWORD *)v332 = *v44;
      *(_OWORD *)&v332[16] = v46;
      *(_OWORD *)&v332[32] = v45;
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v332[48], (uint64_t)(v44 + 3));
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v332[88], (uint64_t)v44 + 88);
      uint64_t isPointInsidePolygon = re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v333 + 8, (uint64_t)(v44 + 8));
      unint64_t v20 = *(void *)&v346[16];
      if (!*(void *)&v346[16]) {
        goto LABEL_79;
      }
      unint64_t v11 = 0;
      do
      {
        unint64_t v5 = *(void *)&buf[16];
        if (*(void *)&buf[16] <= v11) {
          goto LABEL_596;
        }
        if (*(unsigned char *)(*(void *)&buf[32] + v11)) {
          goto LABEL_78;
        }
        unint64_t v5 = *(void *)&v346[32];
        if (!*(void *)(*(void *)&v346[32] + 176 * v11 + 144)) {
          goto LABEL_602;
        }
        unint64_t v6 = *(void *)(*(void *)&v346[32] + 176 * v11 + 160);
        v365[0] = v336;
        v365[1] = *((char **)&v334 + 1);
        if (!isPointInsidePolygon) {
          goto LABEL_78;
        }
        unint64_t v10 = *((void *)&v338 + 1);
        if (!*((void *)&v338 + 1)) {
          goto LABEL_76;
        }
        unint64_t v4 = 0;
        unint64_t v9 = 0;
        do
        {
          uint64_t v48 = *((void *)&v338 + 1);
          if (*((void *)&v338 + 1) <= v9)
          {
            *(void *)v382 = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            unint64_t v20 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v385 = 136315906;
            *(void *)&v385[4] = "operator[]";
            *(_WORD *)&v385[12] = 1024;
            *(_DWORD *)&v385[14] = 789;
            *(_WORD *)&v385[18] = 2048;
            *(void *)&v385[20] = v9;
            __int16 v386 = 2048;
            *(void *)v387 = v48;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_595:
            *(void *)v385 = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(void *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 797;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v8;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_596:
            *(void *)v382 = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v385 = 136315906;
            *(void *)&v385[4] = "operator[]";
            *(_WORD *)&v385[12] = 1024;
            *(_DWORD *)&v385[14] = 789;
            *(_WORD *)&v385[18] = 2048;
            *(void *)&v385[20] = v11;
            __int16 v386 = 2048;
            *(void *)v387 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_597:
            uint64_t v331 = 0;
            long long v381 = 0u;
            long long v380 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v385 = 136315906;
            *(void *)&v385[4] = "operator[]";
            *(_WORD *)&v385[12] = 1024;
            *(_DWORD *)&v385[14] = 797;
            *(_WORD *)&v385[18] = 2048;
            *(void *)&v385[20] = v5;
            __int16 v386 = 2048;
            *(void *)v387 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_598:
            *(void *)buf = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v346 = 136315906;
            *(void *)&v346[4] = "operator[]";
            *(_WORD *)&v346[12] = 1024;
            *(_DWORD *)&v346[14] = 789;
            *(_WORD *)&v346[18] = 2048;
            *(void *)&v346[20] = v8;
            *(_WORD *)&v346[28] = 2048;
            *(void *)&v346[30] = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_599:
            *(void *)buf = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v346 = 136315906;
            *(void *)&v346[4] = "operator[]";
            *(_WORD *)&v346[12] = 1024;
            *(_DWORD *)&v346[14] = 789;
            *(_WORD *)&v346[18] = 2048;
            *(void *)&v346[20] = v7;
            *(_WORD *)&v346[28] = 2048;
            *(void *)&v346[30] = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_600:
            *(void *)v346 = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v360 = 136315906;
            *(void *)&v360[4] = "operator[]";
            *(_WORD *)&v360[12] = 1024;
            *(_DWORD *)&v360[14] = 789;
            *(_WORD *)&v360[18] = 2048;
            *(void *)&v360[20] = v5;
            __int16 v361 = 2048;
            *(void *)v362 = v8;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_601;
          }
          uint64_t v49 = *(char **)(*((void *)&v339 + 1) + v4 + 144);
          v365[0] = *(char **)(*((void *)&v339 + 1) + v4 + 160);
          v365[1] = v49;
          if (++v9 >= v10) {
            break;
          }
          v4 += 176;
        }
        while ((isPointInsidePolygon & 1) == 0);
        if ((isPointInsidePolygon & 1) == 0)
        {
LABEL_76:
          unint64_t v5 = *(void *)&buf[16];
          if (*(void *)&buf[16] <= v11) {
            goto LABEL_613;
          }
          *(unsigned char *)(*(void *)&buf[32] + v11) = 1;
        }
LABEL_78:
        ++v11;
      }
      while (v11 != v20);
LABEL_79:
      unint64_t v6 = v319 + 1;
      _CF = v319 < v318 || v318 >= v6;
      if (!_CF)
      {
        if (v317)
        {
          unint64_t v63 = 8;
          if (v318) {
            unint64_t v63 = 2 * v318;
          }
          if (v63 <= v6) {
            unint64_t v64 = v319 + 1;
          }
          else {
            unint64_t v64 = v63;
          }
        }
        else
        {
          ++v320;
        }
      }
      unint64_t v51 = v319;
      uint64_t v52 = v321 + 224 * v319;
      long long v53 = *(_OWORD *)v332;
      long long v54 = *(_OWORD *)&v332[32];
      *(_OWORD *)(v52 + 16) = *(_OWORD *)&v332[16];
      *(_OWORD *)(v52 + 32) = v54;
      *(_OWORD *)uint64_t v52 = v53;
      *(void *)(v52 + 80) = 0;
      *(void *)(v52 + 56) = 0;
      *(void *)(v52 + 64) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(_DWORD *)(v52 + 72) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)&v332[48];
      *(void *)&v332[48] = 0;
      *(void *)(v52 + 56) = *(void *)&v332[56];
      *(void *)&v332[56] = 0;
      uint64_t v55 = *(void *)(v52 + 64);
      *(void *)(v52 + 64) = *(void *)&v332[64];
      *(void *)&v332[64] = v55;
      uint64_t v56 = *(void *)(v52 + 80);
      *(void *)(v52 + 80) = *(void *)&v332[80];
      *(void *)&v332[80] = v56;
      ++*(_DWORD *)&v332[72];
      ++*(_DWORD *)(v52 + 72);
      *(void *)(v52 + 120) = 0;
      *(void *)(v52 + 96) = 0;
      *(void *)(v52 + 104) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
      *(_DWORD *)(v52 + 112) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = *(void *)&v332[88];
      *(void *)&v332[88] = 0;
      *(void *)(v52 + 96) = *(void *)&v332[96];
      *(void *)&v332[96] = 0;
      uint64_t v57 = *(void *)(v52 + 104);
      *(void *)(v52 + 104) = *(void *)&v332[104];
      *(void *)&v332[104] = v57;
      uint64_t v58 = *(void *)(v52 + 120);
      *(void *)(v52 + 120) = v333;
      *(void *)&long long v333 = v58;
      ++*(_DWORD *)&v332[112];
      ++*(_DWORD *)(v52 + 112);
      *(void *)(v52 + 160) = 0;
      *(void *)(v52 + 136) = 0;
      *(void *)(v52 + 144) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
      *(_DWORD *)(v52 + 152) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = *((void *)&v333 + 1);
      *((void *)&v333 + 1) = 0;
      *(void *)(v52 + 136) = v334;
      *(void *)&long long v334 = 0;
      uint64_t v59 = *(void *)(v52 + 144);
      *(void *)(v52 + 144) = *((void *)&v334 + 1);
      *((void *)&v334 + 1) = v59;
      __int16 v60 = *(char **)(v52 + 160);
      *(void *)(v52 + 160) = v336;
      v336 = v60;
      LODWORD(v335) = v335 + 1;
      ++*(_DWORD *)(v52 + 152);
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = 0;
      *(void *)(v52 + 184) = 0;
      *(void *)(v52 + 192) = 0;
      *(void *)(v52 + 176) = 0;
      *(_DWORD *)(v52 + 200) = 0;
      *(void *)(v52 + 176) = *((void *)&v337 + 1);
      *((void *)&v337 + 1) = 0;
      *(void *)(v52 + 184) = v338;
      *(void *)&long long v338 = 0;
      uint64_t v61 = *(void *)(v52 + 192);
      *(void *)(v52 + 192) = *((void *)&v338 + 1);
      *((void *)&v338 + 1) = v61;
      uint64_t v62 = *(void *)(v52 + 208);
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = *((void *)&v339 + 1);
      *((void *)&v339 + 1) = v62;
      LODWORD(v339) = v339 + 1;
      ++*(_DWORD *)(v52 + 200);
      unint64_t v319 = v51 + 1;
      ++v320;
      if (*((void *)&v333 + 1))
      {
        if (v336) {
          (*(void (**)(void))(**((void **)&v333 + 1) + 40))();
        }
        v336 = 0;
        long long v334 = 0uLL;
        *((void *)&v333 + 1) = 0;
        LODWORD(v335) = v335 + 1;
      }
      if (*(void *)&v332[88])
      {
        if ((void)v333) {
          (*(void (**)(void))(**(void **)&v332[88] + 40))();
        }
        *(void *)&long long v333 = 0;
        memset(&v332[88], 0, 24);
        ++*(_DWORD *)&v332[112];
      }
      if (*(void *)&v332[48] && *(void *)&v332[80]) {
        (*(void (**)(void))(**(void **)&v332[48] + 40))();
      }
      unint64_t v5 = v314 + 1;
    }
    while (v314 + 1 != v311);
  }
  if (*(void *)buf && *(void *)&buf[32]) {
    (*(void (**)(void))(**(void **)buf + 40))();
  }
  if (*(unsigned char *)(a4 + 8)) {
    _ZF = *(unsigned char *)(a4 + 9) == 0;
  }
  else {
    _ZF = 1;
  }
  int v66 = !_ZF;
  int v297 = v66;
  bzero(v360, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v360[8]);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v364, "vertexPosition", 1, 7);
  if (!v319) {
    goto LABEL_582;
  }
  unint64_t v67 = 0;
  unint64_t v11 = (unint64_t)&v356 + 8;
  unint64_t v9 = (unint64_t)v327;
  int32x4_t v300 = vdupq_n_s32(0x7F800000u);
  int64x2_t v299 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v298 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  unint64_t v8 = 24;
  __asm { FMOV            V8.2S, #3.0 }
  unint64_t v294 = v319;
  do
  {
    unint64_t v20 = v319;
    if (v319 <= v67) {
      goto LABEL_670;
    }
    uint64_t v71 = v321;
    unsigned int v72 = *(_DWORD *)a4;
    unint64_t v301 = v67;
    uint64_t v73 = v321 + 224 * v67;
    *(int32x4_t *)v346 = v300;
    *(void *)&long long v74 = 0x7F0000007FLL;
    *((void *)&v74 + 1) = 0x7F0000007FLL;
    *(_OWORD *)&v346[16] = v74;
    uint64_t v347 = 0;
    unint64_t v348 = 0;
    *(void *)&v346[32] = 0;
    int v349 = 0;
    uint64_t v359 = 0;
    long long v350 = 0u;
    long long v351 = 0u;
    int v352 = 0;
    long long v353 = 0u;
    long long v354 = 0u;
    int v355 = 0;
    long long v356 = 0u;
    long long v357 = 0u;
    _CF = v72 >= 2;
    unsigned int v75 = v72 - 2;
    if (_CF) {
      unint64_t v5 = v75;
    }
    else {
      unint64_t v5 = 0;
    }
    int v358 = 0;
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v346[32], (uint64_t)&v332[32]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v350 + 8, (uint64_t)&v332[72]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v356 + 8, (uint64_t)&v332[112]);
    *(_OWORD *)&v346[16] = *(_OWORD *)&v332[16];
    *(_OWORD *)v346 = *(_OWORD *)v332;
    uint64_t v76 = *(void *)(v73 + 192);
    unint64_t v20 = v73 + 192;
    unint64_t v77 = v76 + 1;
    if ((unint64_t)v354 < v76 + 1) {
      re::DynamicArray<int>::setCapacity((void *)&v353 + 1, v77);
    }
    LODWORD(v365[0]) = v348;
    re::DynamicArray<int>::add((void *)&v353 + 1, v365);
    if (*(void *)&v332[112])
    {
      if (*((void *)&v334 + 1)) {
        (*(void (**)(void))(**(void **)&v332[112] + 40))();
      }
      *((void *)&v334 + 1) = 0;
      long long v333 = 0uLL;
      *(void *)&v332[112] = 0;
      LODWORD(v334) = v334 + 1;
    }
    if (*(void *)&v332[72])
    {
      if (*(void *)&v332[104]) {
        (*(void (**)(void))(**(void **)&v332[72] + 40))();
      }
      *(void *)&v332[104] = 0;
      memset(&v332[72], 0, 24);
      ++*(_DWORD *)&v332[96];
    }
    if (*(void *)&v332[32] && *(void *)&v332[64]) {
      (*(void (**)(void))(**(void **)&v332[32] + 40))();
    }
    unint64_t v7 = *(void *)v20;
    if (*(void *)v20)
    {
      unint64_t v4 = 0;
      unint64_t v6 = v71 + 224 * v301 + 208;
      while (1)
      {
        unint64_t v8 = *(void *)v20;
        if (*(void *)v20 <= v4) {
          goto LABEL_625;
        }
        LODWORD(v365[0]) = *(_DWORD *)(v356 + 4 * *((void *)&v354 + 1) - 4) + *(_DWORD *)&v332[48];
        re::DynamicArray<int>::add((void *)&v353 + 1, v365);
        int v78 = *(_DWORD *)(v359 + 4 * *((void *)&v357 + 1) - 4);
        unint64_t v9 = DWORD2(v333);
        if ((unint64_t)v357 < *((void *)&v357 + 1) + v9) {
          re::DynamicArray<int>::setCapacity((void *)&v356 + 1, *((void *)&v357 + 1) + v9);
        }
        if (v9) {
          break;
        }
LABEL_142:
        unint64_t v9 = (unint64_t)v327;
        unint64_t v8 = 24;
        if (*(void *)&v332[112])
        {
          if (*((void *)&v334 + 1)) {
            (*(void (**)(void))(**(void **)&v332[112] + 40))();
          }
          *((void *)&v334 + 1) = 0;
          long long v333 = 0uLL;
          *(void *)&v332[112] = 0;
          LODWORD(v334) = v334 + 1;
        }
        if (*(void *)&v332[72])
        {
          if (*(void *)&v332[104]) {
            (*(void (**)(void))(**(void **)&v332[72] + 40))();
          }
          *(void *)&v332[104] = 0;
          memset(&v332[72], 0, 24);
          ++*(_DWORD *)&v332[96];
        }
        if (*(void *)&v332[32] && *(void *)&v332[64]) {
          (*(void (**)(void))(**(void **)&v332[32] + 40))();
        }
        if (++v4 == v7) {
          goto LABEL_154;
        }
      }
      unint64_t v8 = 0;
      while (1)
      {
        unint64_t v10 = *((void *)&v333 + 1);
        if (*((void *)&v333 + 1) <= v8) {
          goto LABEL_595;
        }
        LODWORD(v365[0]) = *(_DWORD *)(*((void *)&v334 + 1) + 4 * v8) + v78;
        re::DynamicArray<int>::add((void *)&v356 + 1, v365);
        if (v9 == ++v8) {
          goto LABEL_142;
        }
      }
    }
LABEL_154:
    unint64_t v79 = v348;
    unint64_t v20 = *((void *)&v354 + 1);
    memset(v382, 0, 24);
    uint64_t v316 = 0;
    v315[0] = 0;
    v315[1] = 0;
    memset(v388, 0, 24);
    memset(v328, 0, sizeof(v328));
    v329[0] = 0;
    memset(v365, 0, 25);
    *(int64x2_t *)&v365[4] = v299;
    long long v366 = xmmword_2343AC110;
    int64x2_t v367 = v298;
    long long v368 = 0u;
    long long v369 = 0u;
    long long v370 = 0u;
    v332[0] = 0;
    memset(&v332[8], 0, 112);
    long long v333 = 0u;
    long long v334 = 0u;
    uint64_t v335 = 0;
    long long v337 = 0u;
    long long v338 = 0u;
    long long v339 = 0u;
    long long v340 = 0u;
    long long v341 = 0u;
    LODWORD(v336) = 1065353216;
    int v342 = 1065353216;
    long long v343 = 0u;
    memset(v344, 0, sizeof(v344));
    int v345 = 1065353216;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(v332, (uint64_t)&v369 + 8);
    std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)v388, v79);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v329[0] - *(void *)v328) >> 3) < v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_679;
      }
      uint64_t v80 = (*(void *)&v328[2] - *(void *)v328) / 24;
      *(void *)&buf[32] = v329;
      long long v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v329, v20);
      long long v82 = &v81[24 * v80];
      *(void *)buf = v81;
      *(void *)&buf[8] = v82;
      long long v84 = &v81[24 * v83];
      *(void *)&buf[16] = v82;
      *(void *)&buf[24] = v84;
      long long v85 = *(void **)&v328[2];
      uint64_t v86 = *(void **)v328;
      if (*(void *)&v328[2] == *(void *)v328)
      {
        int64x2_t v89 = vdupq_n_s64(*(unint64_t *)&v328[2]);
        __int16 v87 = &v81[24 * v80];
      }
      else
      {
        __int16 v87 = &v81[24 * v80];
        do
        {
          *((void *)v87 - 3) = 0;
          *((void *)v87 - 2) = 0;
          v87 -= 24;
          *((void *)v87 + 2) = 0;
          long long v88 = *(_OWORD *)(v85 - 3);
          v85 -= 3;
          *(_OWORD *)__int16 v87 = v88;
          *((void *)v87 + 2) = v85[2];
          *long long v85 = 0;
          v85[1] = 0;
          v85[2] = 0;
        }
        while (v85 != v86);
        int64x2_t v89 = *(int64x2_t *)v328;
        long long v84 = *(char **)&buf[24];
        long long v82 = *(char **)&buf[16];
      }
      *(void *)v328 = v87;
      *(void *)&v328[2] = v82;
      *(int64x2_t *)&buf[8] = v89;
      uint64_t v90 = v329[0];
      v329[0] = v84;
      *(void *)&buf[24] = v90;
      *(void *)buf = v89.i64[0];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
    }
    if (v20)
    {
      unint64_t v6 = 0;
      unint64_t v4 = 0;
      while (1)
      {
        unint64_t v5 = *((void *)&v354 + 1);
        if (v4)
        {
          unint64_t v7 = (v4 - 1);
          if (*((void *)&v354 + 1) <= v7) {
            goto LABEL_641;
          }
          unsigned int v91 = *(_DWORD *)(v356 + 4 * v7);
        }
        else
        {
          unsigned int v91 = 0;
        }
        if (*((void *)&v354 + 1) <= v6) {
          goto LABEL_631;
        }
        unint64_t v6 = *(unsigned int *)(v356 + 4 * v6);
        __p[1] = 0;
        __p[0] = 0;
        v327[0] = 0;
        std::vector<unsigned long>::reserve(__p, v6 - v91);
        if (v6 > v91) {
          break;
        }
LABEL_189:
        uint64_t v103 = *(void *)&v328[2];
        if (*(void *)&v328[2] >= v329[0])
        {
          unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v328[2] - *(void *)v328) >> 3);
          unint64_t v105 = v104 + 1;
          if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_679;
          }
          if (0x5555555555555556 * ((uint64_t)(v329[0] - *(void *)v328) >> 3) > v105) {
            unint64_t v105 = 0x5555555555555556 * ((uint64_t)(v329[0] - *(void *)v328) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v329[0] - *(void *)v328) >> 3) >= 0x555555555555555) {
            unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v106 = v105;
          }
          *(void *)&buf[32] = v329;
          uint64_t v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v329, v106);
          unsigned int v108 = &v107[24 * v104];
          *(void *)buf = v107;
          *(void *)&buf[8] = v108;
          *(void *)&buf[24] = &v107[24 * v109];
          *((void *)v108 + 1) = 0;
          *((void *)v108 + 2) = 0;
          *(void *)unsigned int v108 = 0;
          *(_OWORD *)unsigned int v108 = *(_OWORD *)__p;
          *((void *)v108 + 2) = v327[0];
          __p[1] = 0;
          __p[0] = 0;
          v327[0] = 0;
          int v110 = v108 + 24;
          *(void *)&buf[16] = v108 + 24;
          unint64_t v111 = *(void **)&v328[2];
          float32x2_t v112 = *(void **)v328;
          uint64_t v113 = *(void *)&buf[8];
          if (*(void *)&v328[2] == *(void *)v328)
          {
            int64x2_t v115 = vdupq_n_s64(*(unint64_t *)&v328[2]);
          }
          else
          {
            do
            {
              *(void *)(v113 - 24) = 0;
              *(void *)(v113 - 16) = 0;
              v113 -= 24;
              *(void *)(v113 + 16) = 0;
              long long v114 = *(_OWORD *)(v111 - 3);
              v111 -= 3;
              *(_OWORD *)uint64_t v113 = v114;
              *(void *)(v113 + 16) = v111[2];
              *unint64_t v111 = 0;
              v111[1] = 0;
              v111[2] = 0;
            }
            while (v111 != v112);
            int64x2_t v115 = *(int64x2_t *)v328;
            int v110 = *(void **)&buf[16];
          }
          *(void *)v328 = v113;
          *(void *)&v328[2] = v110;
          *(int64x2_t *)&buf[8] = v115;
          uint64_t v116 = v329[0];
          v329[0] = *(void *)&buf[24];
          *(void *)&buf[24] = v116;
          *(void *)buf = v115.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          *(void *)&v328[2] = v110;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          **(void **)&v328[2] = 0;
          *(void *)(v103 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          *(void *)(v103 + 16) = 0;
          *(_OWORD *)uint64_t v103 = *(_OWORD *)__p;
          *(void *)(v103 + 16) = v327[0];
          *(void *)&v328[2] = v103 + 24;
        }
        unint64_t v6 = (v4 + 1);
        unint64_t v4 = v6;
        if (v20 <= v6) {
          goto LABEL_204;
        }
      }
      unint64_t v5 = v91;
      while (1)
      {
        unint64_t v7 = v348;
        if (v348 <= v5) {
          goto LABEL_597;
        }
        uint64_t v92 = *(void *)v388 + 24 * v5;
        *(float64x2_t *)uint64_t v92 = vcvtq_f64_f32(*(float32x2_t *)(v350 + 8 * v5));
        *(void *)(v92 + 16) = 0;
        uint64_t v93 = (char *)__p[1];
        if (__p[1] >= (void *)v327[0])
        {
          float v95 = (char *)__p[0];
          int64_t v96 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61) {
            goto LABEL_679;
          }
          int64_t v98 = v327[0] - (unint64_t)__p[0];
          if ((uint64_t)(v327[0] - (unint64_t)__p[0]) >> 2 > v97) {
            unint64_t v97 = v98 >> 2;
          }
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v97;
          }
          if (v99)
          {
            float32x4_t v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v327, v99);
            uint64_t v93 = (char *)__p[1];
            float v95 = (char *)__p[0];
          }
          else
          {
            float32x4_t v100 = 0;
          }
          int32x2_t v101 = (unint64_t *)&v100[8 * v96];
          *int32x2_t v101 = v5;
          uint64_t v94 = v101 + 1;
          while (v93 != v95)
          {
            unint64_t v102 = *((void *)v93 - 1);
            v93 -= 8;
            *--int32x2_t v101 = v102;
          }
          __p[0] = v101;
          __p[1] = v94;
          v327[0] = &v100[8 * v99];
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          *(void *)__p[1] = v5;
          uint64_t v94 = v93 + 8;
        }
        __p[1] = v94;
        if (++v5 == v6) {
          goto LABEL_189;
        }
      }
    }
LABEL_204:
    v332[0] = 0;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(v332, (uint64_t)v388);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v344[1], *(uint64_t *)v328, *(uint64_t *)&v328[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v328[2] - *(void *)v328) >> 3));
    uint64_t Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332);
    if ((Constraints & 1) == 0
      || (uint64_t Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332),
          !Constraints)
      || (uint64_t Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332, 0), (Constraints & 1) == 0))
    {
      int v118 = *re::geometryLogObjects((re *)Constraints);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v118, OS_LOG_TYPE_DEFAULT, "Failed to perfectly triangulate glyph outline.", buf, 2u);
      }
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332, v382, (uint64_t)v315);
    BOOL v119 = v315[1];
    float32x2_t v120 = v315[0];
    v327[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v315[1] - (char *)v315[0]) >> 2);
    if (v315[1] != v315[0])
    {
      if (v20 > 0x1555555555555555) {
        goto LABEL_679;
      }
      float v122 = std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)v327, v20);
      float32x4_t v123 = __p[1];
      unint64_t v124 = __p[0];
      int v125 = v122;
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v126 = *(void *)(v123 - 3);
          v123 -= 3;
          int v127 = v123[2];
          *(void *)(v125 - 3) = v126;
          v125 -= 3;
          void v125[2] = v127;
        }
        while (v123 != v124);
        float32x4_t v123 = __p[0];
      }
      __p[0] = v125;
      __p[1] = v122;
      v327[0] = &v122[3 * v121];
      if (v123) {
        operator delete(v123);
      }
    }
    if (v119 != v120)
    {
      unint64_t v4 = *((void *)&v354 + 1);
      if (*((void *)&v354 + 1))
      {
        unint64_t v5 = 0;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        unint64_t v7 = *((void *)&v354 + 1) - 1;
        do
        {
          unint64_t v6 = (unint64_t)v315[0] + 12 * v5;
          unint64_t v9 = *(unsigned int *)v6;
          unint64_t v8 = v348;
          if (v348 <= v9) {
            goto LABEL_637;
          }
          unint64_t v10 = *(unsigned int *)(v6 + 4);
          if (v348 <= v10) {
            goto LABEL_638;
          }
          unint64_t v11 = *(unsigned int *)(v6 + 8);
          if (v348 <= v11) {
            goto LABEL_639;
          }
          float32x2_t v330 = vdiv_f32(vadd_f32(vadd_f32(*(float32x2_t *)(v350 + 8 * v9), *(float32x2_t *)(v350 + 8 * v10)), *(float32x2_t *)(v350 + 8 * v11)), _D8);
          if (!*((void *)&v354 + 1)) {
            goto LABEL_640;
          }
          uint64_t v128 = *(unsigned int *)v356;
          *(void *)buf = v350;
          *(void *)&buf[8] = v128;
          unint64_t v11 = (unint64_t)&v356 + 8;
          {
            if (v4 >= 2)
            {
              unint64_t v8 = 0;
              while (1)
              {
                unint64_t v9 = *((void *)&v354 + 1);
                if (*((void *)&v354 + 1) <= v8) {
                  goto LABEL_610;
                }
                if (*((void *)&v354 + 1) <= v8 + 1) {
                  break;
                }
                unint64_t v10 = v348;
                unint64_t v9 = *(unsigned int *)(v356 + 4 * v8);
                if (v348 <= v9) {
                  goto LABEL_612;
                }
                uint64_t v129 = (*(_DWORD *)(v356 + 4 * v8 + 4) - v9);
                *(void *)buf = v350 + 8 * v9;
                *(void *)&buf[8] = v129;
                  goto LABEL_250;
                if (v7 == ++v8) {
                  goto LABEL_233;
                }
              }
LABEL_611:
              uint64_t v331 = 0;
              long long v381 = 0u;
              long long v380 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v385 = 136315906;
              *(void *)&v385[4] = "operator[]";
              *(_WORD *)&v385[12] = 1024;
              *(_DWORD *)&v385[14] = 797;
              *(_WORD *)&v385[18] = 2048;
              *(void *)&v385[20] = v8 + 1;
              __int16 v386 = 2048;
              *(void *)v387 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_612:
              uint64_t v331 = 0;
              long long v381 = 0u;
              long long v380 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v385 = 136315906;
              *(void *)&v385[4] = "operator[]";
              *(_WORD *)&v385[12] = 1024;
              *(_DWORD *)&v385[14] = 797;
              *(_WORD *)&v385[18] = 2048;
              *(void *)&v385[20] = v9;
              __int16 v386 = 2048;
              *(void *)v387 = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_613:
              *(void *)v382 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v385 = 136315906;
              *(void *)&v385[4] = "operator[]";
              *(_WORD *)&v385[12] = 1024;
              *(_DWORD *)&v385[14] = 789;
              *(_WORD *)&v385[18] = 2048;
              *(void *)&v385[20] = v11;
              __int16 v386 = 2048;
              *(void *)v387 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_614:
              *(void *)v388 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v382 = 136315906;
              *(void *)&v382[4] = "operator[]";
              *(_WORD *)&v382[12] = 1024;
              *(_DWORD *)&v382[14] = 797;
              *(_WORD *)&v382[18] = 2048;
              *(void *)&v382[20] = v6;
              __int16 v383 = 2048;
              *(void *)v384 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_615:
              *(void *)v388 = 0;
              int64x2_t v367 = 0u;
              long long v366 = 0u;
              memset(v365, 0, sizeof(v365));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v382 = 136315906;
              *(void *)&v382[4] = "operator[]";
              *(_WORD *)&v382[12] = 1024;
              *(_DWORD *)&v382[14] = 609;
              *(_WORD *)&v382[18] = 2048;
              *(void *)&v382[20] = v8;
              __int16 v383 = 2048;
              *(void *)v384 = v20;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_616;
            }
LABEL_233:
            long long v130 = (simd_float2 *)__p[1];
            if (__p[1] >= (void *)v327[0])
            {
              unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 2);
              unint64_t v134 = v133 + 1;
              if (v133 + 1 > 0x1555555555555555) {
                goto LABEL_679;
              }
              if (0x5555555555555556 * ((uint64_t)(v327[0] - (unint64_t)__p[0]) >> 2) > v134) {
                unint64_t v134 = 0x5555555555555556 * ((uint64_t)(v327[0] - (unint64_t)__p[0]) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327[0] - (unint64_t)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v135 = 0x1555555555555555;
              }
              else {
                unint64_t v135 = v134;
              }
              if (v135) {
                unsigned int v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)v327, v135);
              }
              else {
                unsigned int v136 = 0;
              }
              uint64_t v137 = &v136[12 * v133];
              simd_float2 v138 = *(simd_float2 *)v6;
              *((_DWORD *)v137 + 2) = *(_DWORD *)(v6 + 8);
              *(simd_float2 *)uint64_t v137 = v138;
              uint64_t v139 = __p[1];
              int v140 = __p[0];
              float32x2_t v141 = v137;
              if (__p[1] != __p[0])
              {
                do
                {
                  uint64_t v142 = *(void *)(v139 - 3);
                  v139 -= 3;
                  int v143 = v139[2];
                  *(void *)(v141 - 12) = v142;
                  v141 -= 12;
                  *((_DWORD *)v141 + 2) = v143;
                }
                while (v139 != v140);
                uint64_t v139 = __p[0];
              }
              long long v132 = v137 + 12;
              __p[0] = v141;
              __p[1] = v137 + 12;
              v327[0] = &v136[12 * v135];
              if (v139) {
                operator delete(v139);
              }
            }
            else
            {
              simd_float2 v131 = *(simd_float2 *)v6;
              *((_DWORD *)__p[1] + 2) = *(_DWORD *)(v6 + 8);
              *long long v130 = v131;
              long long v132 = (char *)&v130[1] + 4;
            }
            __p[1] = v132;
          }
LABEL_250:
          ++v5;
        }
        while (v5 != v20);
      }
    }
    if (v315[0])
    {
      v315[1] = v315[0];
      operator delete(v315[0]);
    }
    *(_OWORD *)v315 = *(_OWORD *)__p;
    uint64_t v316 = v327[0];
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v332);
    unint64_t v4 = (unint64_t)v377;
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    if ((void)v368)
    {
      *((void *)&v368 + 1) = v368;
      operator delete((void *)v368);
    }
    if (v365[0])
    {
      v365[1] = v365[0];
      operator delete(v365[0]);
    }
    *(void *)v332 = v328;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v332);
    if (*(void *)v388)
    {
      *(void *)&v388[8] = *(void *)v388;
      operator delete(*(void **)v388);
    }
    if (*(void *)v382)
    {
      *(void *)&v382[8] = *(void *)v382;
      operator delete(*(void **)v382);
    }
    float v144 = *(float *)(a4 + 4);
    int v145 = *(unsigned __int8 *)(a4 + 10);
    int v146 = *(unsigned __int8 *)(a4 + 11);
    bzero(v365, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v365[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v366 + 8), "vertexPosition", 1, 7);
    unint64_t v10 = DWORD2(v354);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v315[1] - (char *)v315[0]) >> 2);
    if (v146) {
      int v147 = -1431655765 * (((char *)v315[1] - (char *)v315[0]) >> 2);
    }
    else {
      int v147 = 0;
    }
    unint64_t v20 = v147 - 1431655765 * (((char *)v315[1] - (char *)v315[0]) >> 2);
    int v148 = 2 * v348;
    if (!v145) {
      int v148 = 0;
    }
    unint64_t v7 = (v20 + v148);
    int v308 = v145;
    int v295 = v146 | v145;
    unint64_t v306 = v348;
    if (v146 | v145) {
      int v149 = v348;
    }
    else {
      int v149 = 0;
    }
    if (v7 < LODWORD(v365[4]))
    {
      int v150 = v378;
      if (v378)
      {
        unsigned int v151 = 0;
        do
        {
          __int16 v152 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v377, v151);
          re::internal::accessFaceVaryingAttributeSubmesh(v152, v153);
          ++v151;
        }
        while (v150 != v151);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v365[2], v7);
    unsigned int v374 = v7;
    if (v375)
    {
      long long v154 = v376;
      unint64_t v4 = 8 * v375;
      do
      {
        uint64_t v155 = *v154++;
        (*(void (**)(uint64_t, void))(*(void *)v155 + 72))(v155, v374);
        v4 -= 8;
      }
      while (v4);
    }
    unsigned int v156 = v149 + v306;
    unint64_t v6 = v306;
    unint64_t v9 = (unint64_t)v327;
    if (LODWORD(v365[1]) > v156 && LODWORD(v365[4]) && (char *)(LODWORD(v365[4]) - 1) > v365[4])
    {
      while (1)
        ;
    }
    LODWORD(v365[1]) = v156;
    unsigned int v371 = v156;
    if (v372)
    {
      long long v157 = v373;
      unint64_t v4 = 8 * v372;
      do
      {
        uint64_t v158 = *v157++;
        (*(void (**)(uint64_t, void))(*(void *)v158 + 72))(v158, v371);
        v4 -= 8;
      }
      while (v4);
    }
    if (v5)
    {
      unint64_t v4 = 0;
      unint64_t v7 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v365, v7++, *(_DWORD *)((char *)v315[0] + v4), *(_DWORD *)((char *)v315[0] + v4 + 4), *(_DWORD *)((char *)v315[0] + v4 + 8));
        v4 += 12;
      }
      while (v5 != v7);
      if (v146)
      {
        unint64_t v4 = 0;
        uint64_t v159 = 12 * v5;
        do
        {
          re::GeomMeshBuilder::setFaceVertices((uint64_t)v365, v5, *(_DWORD *)((char *)v315[0] + v4 + 8) + v306, *(_DWORD *)((char *)v315[0] + v4 + 4) + v306, *(_DWORD *)((char *)v315[0] + v4) + v306);
          unint64_t v5 = (v5 + 1);
          v4 += 12;
        }
        while (v159 != v4);
      }
    }
    unint64_t v8 = 24;
    if (v308 && v10)
    {
      unint64_t v7 = 0;
      unint64_t v303 = v10;
      do
      {
        unint64_t v5 = *((void *)&v354 + 1);
        if (v7)
        {
          unint64_t v4 = v7 - 1;
          if (*((void *)&v354 + 1) <= v7 - 1) {
            goto LABEL_645;
          }
          unint64_t v4 = *(unsigned int *)(v356 + 4 * v4);
        }
        else
        {
          unint64_t v4 = 0;
        }
        if (*((void *)&v354 + 1) <= v7) {
          goto LABEL_636;
        }
        unsigned int v160 = *(_DWORD *)(v356 + 4 * v7);
        if (v4 < v160)
        {
          unint64_t v309 = v7;
          int v161 = 0;
          int v162 = v4 + v6;
          int v163 = -v160;
          do
          {
            unint64_t v5 = (v4 + v161);
            int v164 = v4 + v6;
            if (v4 + v163 == -1) {
              int v165 = v162;
            }
            else {
              int v165 = v164 + 1;
            }
            if (v4 + v163 == -1) {
              int v166 = v4;
            }
            else {
              int v166 = v5 + 1;
            }
            re::GeomMeshBuilder::setFaceVertices((uint64_t)v365, v20, v4 + v161, v164, v165);
            re::GeomMeshBuilder::setFaceVertices((uint64_t)v365, v20 + 1, v4 + v161, v165, v166);
            unint64_t v20 = (v20 + 2);
            ++v161;
            ++v163;
            LODWORD(v6) = v6 + 1;
          }
          while (v4 + v163);
          unint64_t v11 = (unint64_t)&v356 + 8;
          unint64_t v9 = (unint64_t)v327;
          unint64_t v8 = 24;
          unint64_t v6 = v306;
          unint64_t v10 = v303;
          unint64_t v7 = v309;
        }
      }
      while (++v7 != v10);
    }
    re::GeomMesh::GeomMesh((re::GeomMesh *)v332, 0);
    re::GeomMesh::operator=((uint64_t)v332, &v365[1]);
    re::GeomMesh::setName((re *)v332, v365[0]);
    re::GeomMesh::freeName((re *)v365);
    uint64_t v167 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v332);
    if (!v6) {
      goto LABEL_321;
    }
    unint64_t v5 = 0;
    unint64_t v4 = v6;
    unint64_t v20 = v168;
    do
    {
      unint64_t v6 = v348;
      if (v348 <= v5) {
        goto LABEL_632;
      }
      if (v168 == v5)
      {
LABEL_633:
        *(void *)v382 = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 609;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = v20;
        __int16 v386 = 2048;
        *(void *)v387 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_634:
        *(void *)buf = 0;
        memset(v332, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v365[0]) = 136315906;
        *(char **)((char *)v365 + 4) = "operator[]";
        WORD2(v365[1]) = 1024;
        *(_DWORD *)((char *)&v365[1] + 6) = 789;
        WORD1(v365[2]) = 2048;
        *(char **)((char *)&v365[2] + 4) = (char *)v20;
        WORD2(v365[3]) = 2048;
        *(char **)((char *)&v365[3] + 6) = (char *)v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_635:
        *(void *)buf = 0;
        memset(v332, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v365[0]) = 136315906;
        *(char **)((char *)v365 + 4) = "operator[]";
        WORD2(v365[1]) = 1024;
        *(_DWORD *)((char *)&v365[1] + 6) = 789;
        WORD1(v365[2]) = 2048;
        *(char **)((char *)&v365[2] + 4) = (char *)v20;
        WORD2(v365[3]) = 2048;
        *(char **)((char *)&v365[3] + 6) = (char *)v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_636:
        *(void *)v385 = 0;
        memset(v332, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "operator[]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 797;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v7;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_637:
        uint64_t v331 = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 797;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = v9;
        __int16 v386 = 2048;
        *(void *)v387 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_638:
        uint64_t v331 = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 797;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = v10;
        __int16 v386 = 2048;
        *(void *)v387 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_639:
        uint64_t v331 = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 797;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = v11;
        __int16 v386 = 2048;
        *(void *)v387 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_640:
        uint64_t v331 = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 797;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = 0;
        __int16 v386 = 2048;
        *(void *)v387 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_641:
        __p[0] = 0;
        long long v381 = 0u;
        long long v380 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v385 = 136315906;
        *(void *)&v385[4] = "operator[]";
        *(_WORD *)&v385[12] = 1024;
        *(_DWORD *)&v385[14] = 797;
        *(_WORD *)&v385[18] = 2048;
        *(void *)&v385[20] = v7;
        __int16 v386 = 2048;
        *(void *)v387 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_642:
        *(void *)v388 = 0;
        int64x2_t v367 = 0u;
        long long v366 = 0u;
        memset(v365, 0, sizeof(v365));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v382 = 136315906;
        *(void *)&v382[4] = "operator[]";
        *(_WORD *)&v382[12] = 1024;
        *(_DWORD *)&v382[14] = 789;
        *(_WORD *)&v382[18] = 2048;
        *(void *)&v382[20] = v4;
        __int16 v383 = 2048;
        *(void *)v384 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_643;
      }
      *(void *)&long long v169 = *(void *)(v350 + 8 * v5);
      *((float *)&v169 + 2) = v144 * 0.5;
      *(_OWORD *)(v167 + 16 * v5++) = v169;
    }
    while (v4 != v5);
    if (v295)
    {
      unint64_t v5 = 0;
      LODWORD(v170) = v168 - v306;
      if (v168 >= v306) {
        uint64_t v170 = v170;
      }
      else {
        uint64_t v170 = 0;
      }
      while (1)
      {
        unint64_t v6 = v348;
        if (v348 <= v5) {
          break;
        }
        if (v170 == v5) {
          goto LABEL_644;
        }
        *(void *)&long long v169 = *(void *)(v350 + 8 * v5);
        *((float *)&v169 + 2) = -(float)(v144 * 0.5);
        *(_OWORD *)(v167 + 16 * v4 + 16 * v5++) = v169;
        if (v4 == v5) {
          goto LABEL_321;
        }
      }
LABEL_643:
      *(void *)v382 = 0;
      long long v381 = 0u;
      long long v380 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v385 = 136315906;
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 797;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = v5;
      __int16 v386 = 2048;
      *(void *)v387 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_644:
      *(void *)v382 = 0;
      long long v381 = 0u;
      long long v380 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 609;
      *(_DWORD *)v385 = 136315906;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = (v4 + v5);
      __int16 v386 = 2048;
      *(void *)v387 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_645:
      *(void *)v385 = 0;
      memset(v332, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v4;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_646:
      *(void *)v346 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v360 = 136315906;
      *(void *)&v360[4] = "operator[]";
      *(_WORD *)&v360[12] = 1024;
      *(_DWORD *)&v360[14] = 789;
      *(_WORD *)&v360[18] = 2048;
      *(void *)&v360[20] = v6;
      __int16 v361 = 2048;
      *(void *)v362 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_647:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v5;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_648:
      *(void *)v346 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v360 = 136315906;
      *(void *)&v360[4] = "operator[]";
      *(_WORD *)&v360[12] = 1024;
      *(_DWORD *)&v360[14] = 789;
      *(_WORD *)&v360[18] = 2048;
      *(void *)&v360[20] = v6;
      __int16 v361 = 2048;
      *(void *)v362 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_649:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v5;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_650:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v6;
      __int16 v383 = 2048;
      *(void *)v384 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_651:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v6;
      __int16 v383 = 2048;
      *(void *)v384 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_652:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v5;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_653:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v5;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_654:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v4;
      __int16 v389 = 2048;
      uint64_t v390 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_655:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v9;
      __int16 v389 = 2048;
      uint64_t v390 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_656:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v11;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_657:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v6;
      __int16 v383 = 2048;
      *(void *)v384 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_658:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v10;
      __int16 v383 = 2048;
      *(void *)v384 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_659:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v8;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_660;
    }
LABEL_321:
    re::GeomMesh::freeName((re *)v365);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)((char *)&v366 + 8));
    if (v365[2] && (void)v366) {
      (*(void (**)(void))(*(void *)v365[2] + 40))();
    }
    unint64_t v171 = (unsigned char *)a4;
    if (!*(unsigned char *)(a4 + 8)) {
      goto LABEL_422;
    }
    float v304 = *(float *)(a4 + 4);
    int v307 = *(unsigned __int8 *)(a4 + 10);
    int v310 = *(unsigned __int8 *)(a4 + 11);
    unint64_t v172 = v348;
    unint64_t v7 = *((void *)&v354 + 1);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v315[1] - (char *)v315[0]) >> 2);
    unint64_t v20 = *(unsigned int *)&v332[40];
    *(void *)&buf[32] = 0;
    memset(buf, 0, 28);
    *(void *)&v387[2] = 0;
    memset(v385, 0, sizeof(v385));
    re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v332[40]);
    re::DynamicArray<float>::resize((uint64_t)v385, v20);
    if (v5)
    {
      uint64_t v173 = 0;
      unint64_t v4 = *(void *)&buf[16];
      uint64_t v174 = v5;
      v175 = (char *)v315[0] + 8;
      __int16 v176 = (_DWORD *)(*(void *)&buf[32] + 12);
      do
      {
        if (v4 == v173) {
          goto LABEL_642;
        }
        int v177 = *v175;
        *(void *)(v176 - 3) = *((void *)v175 - 1);
        *(v176 - 1) = v177;
        *__int16 v176 = -1;
        ++v173;
        v175 += 3;
        v176 += 4;
      }
      while (v5 != v173);
      if (v310)
      {
        uint64_t v178 = *(void *)&buf[32];
        int32x2_t v179 = vdup_n_s32(v172);
        int v180 = (char *)v315[0] + 4;
        unsigned int v181 = v5;
        do
        {
          unint64_t v6 = v181;
          if (v4 <= v181) {
            goto LABEL_650;
          }
          v182 = (int32x2_t *)(v178 + 16 * v181);
          __int32 v183 = *((_DWORD *)v180 - 1) + v172;
          int32x2_t v184 = *(int32x2_t *)v180;
          int v180 = (void *)((char *)v180 + 12);
          int32x2_t *v182 = vrev64_s32(vadd_s32(v184, v179));
          v182[1].i32[0] = v183;
          v182[1].i32[1] = -1;
          unsigned int v181 = v6 + 1;
        }
        while (--v174);
      }
    }
    unint64_t v9 = (v7 + v172);
    if (v310) {
      int v185 = v172;
    }
    else {
      int v185 = 0;
    }
    unint64_t v4 = v172;
    int v296 = v185;
    unsigned int v186 = v185 + v172;
    if (v307 && v7)
    {
      uint64_t v187 = 0;
      if (v310) {
        int v188 = v5;
      }
      else {
        int v188 = 0;
      }
      unsigned int v189 = v188 + v5;
      unint64_t v5 = *((void *)&v354 + 1);
      uint64_t v190 = v356;
      unint64_t v6 = *(void *)&buf[16];
      unsigned int v191 = v186;
      while (1)
      {
        unsigned int v192 = v191;
        if (v187)
        {
          unint64_t v8 = v187 - 1;
          if (v5 <= v187 - 1) {
            goto LABEL_659;
          }
          unsigned int v192 = *(_DWORD *)(v190 + 4 * v8) + v191;
        }
        if (v187 == v5) {
          goto LABEL_653;
        }
        unsigned int v193 = *(_DWORD *)(v190 + 4 * v187) + v191;
        if (v192 < v193) {
          break;
        }
LABEL_351:
        ++v191;
        ++v187;
        unint64_t v8 = 24;
        if (v187 == v7) {
          goto LABEL_352;
        }
      }
      uint64_t v194 = *(void *)&buf[32];
      while (1)
      {
        unint64_t v8 = v189;
        if (v6 <= v189) {
          break;
        }
        long long v195 = (unsigned int *)(v194 + 16 * v189);
        int v196 = v9 + v192 + 1;
        *long long v195 = v192;
        v195[1] = v9 + v192;
        v195[2] = v196;
        v195[3] = -1;
        unint64_t v10 = (v8 + 1);
        if (v6 <= v10) {
          goto LABEL_606;
        }
        long long v197 = (unsigned int *)(v194 + 16 * v10);
        *long long v197 = v192;
        v197[1] = v196;
        v197[2] = v192 + 1;
        v197[3] = -1;
        unsigned int v189 = v8 + 2;
        if (++v192 >= v193) {
          goto LABEL_351;
        }
      }
LABEL_605:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v8;
      __int16 v383 = 2048;
      *(void *)v384 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_606:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v10;
      __int16 v383 = 2048;
      *(void *)v384 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_607;
    }
LABEL_352:
    int v198 = 2 * v9;
    if (!v307) {
      int v198 = 0;
    }
    if (v20)
    {
      uint64_t v199 = 0;
      unint64_t v5 = *(void *)&v385[16];
      uint64_t v200 = *(void *)&v387[2];
      while (v5 != v199)
      {
        *(_DWORD *)(v200 + 4 * v199) = v199;
        if (v20 == ++v199) {
          goto LABEL_358;
        }
      }
      goto LABEL_647;
    }
LABEL_358:
    unint64_t v6 = v7;
    uint64_t v201 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v332, "vertexUV", 6, v198 + v186, (uint64_t *)buf, (uint64_t *)v385);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v201 + 16))(v201))
    {
      unint64_t v5 = re::internal::GeomTypedAttribute<double>::operator[](v201, 0);
      unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v201 + 16))(v201);
    }
    else
    {
      unint64_t v20 = 0;
      unint64_t v5 = 0;
    }
    uint64_t v202 = v7;
    int v203 = v7;
    if (!v7) {
      goto LABEL_415;
    }
    unsigned int v204 = v186;
    unint64_t v6 = 0;
    float32x2_t v205 = *(float32x2_t *)v346;
    float32x4_t v206 = vsubq_f32(*(float32x4_t *)&v346[16], *(float32x4_t *)v346);
    v206.i32[3] = 0;
    float32x4_t v207 = vmaxnmq_f32(v206, (float32x4_t)0);
    float v208 = 1.0 / fmaxf(fmaxf(v207.f32[0], v207.f32[2]), v207.f32[1]);
    while (2)
    {
      unint64_t v8 = *((void *)&v354 + 1);
      if (v6)
      {
        unint64_t v10 = v6 - 1;
        if (*((void *)&v354 + 1) <= v6 - 1) {
          goto LABEL_658;
        }
        unsigned int v209 = *(_DWORD *)(v356 + 4 * v10);
      }
      else
      {
        unsigned int v209 = 0;
      }
      if (*((void *)&v354 + 1) <= v6) {
        goto LABEL_651;
      }
      uint64_t v210 = *(unsigned int *)(v356 + 4 * v6);
      if (v209 < v210)
      {
        unint64_t v8 = v209;
        if (v209 <= v20) {
          unint64_t v10 = v20;
        }
        else {
          unint64_t v10 = v209;
        }
        do
        {
          unint64_t v11 = v348;
          if (v348 <= v8) {
            goto LABEL_603;
          }
          if (v10 == v8) {
            goto LABEL_604;
          }
          *(float32x2_t *)(v5 + 8 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vmul_n_f32(vsub_f32(*(float32x2_t *)(v350 + 8 * v8), v205), v208);
        }
        while (v210 != ++v8);
      }
      ++v6;
      unint64_t v11 = (unint64_t)&v356 + 8;
      if (v6 != v7) {
        continue;
      }
      break;
    }
    if (v310)
    {
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *((void *)&v354 + 1);
        if (v6)
        {
          unint64_t v8 = v6 - 1;
          if (*((void *)&v354 + 1) <= v6 - 1) {
            goto LABEL_669;
          }
          unsigned int v211 = *(_DWORD *)(v356 + 4 * v8);
        }
        else
        {
          unsigned int v211 = 0;
        }
        if (*((void *)&v354 + 1) <= v6) {
          goto LABEL_664;
        }
        uint64_t v212 = *(unsigned int *)(v356 + 4 * v6);
        if (v211 < v212) {
          break;
        }
LABEL_388:
        if (++v6 == v202) {
          goto LABEL_389;
        }
      }
      unint64_t v7 = v211;
      unint64_t v8 = v4 + v211;
      while (1)
      {
        unint64_t v10 = v348;
        if (v348 <= v7) {
          break;
        }
        if (v20 <= v8) {
          goto LABEL_617;
        }
        float32x2_t v213 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v350 + 8 * v7), v205), v208);
        v213.f32[0] = 1.0 - v213.f32[0];
        *(float32x2_t *)(v5 + 8 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v213;
        ++v7;
        ++v8;
        if (v212 == v7) {
          goto LABEL_388;
        }
      }
LABEL_616:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v7;
      __int16 v383 = 2048;
      *(void *)v384 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_617:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v8;
      __int16 v383 = 2048;
      *(void *)v384 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_618:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v9;
      __int16 v389 = 2048;
      uint64_t v390 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_619:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v4;
      __int16 v389 = 2048;
      uint64_t v390 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_620:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v9;
      __int16 v389 = 2048;
      uint64_t v390 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_621:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 789;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v4;
      __int16 v389 = 2048;
      uint64_t v390 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_622:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 797;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v6;
      __int16 v389 = 2048;
      uint64_t v390 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_623:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 609;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = v7;
      __int16 v389 = 2048;
      uint64_t v390 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_624:
      *(void *)v382 = 0;
      int64x2_t v367 = (int64x2_t)v43;
      long long v366 = v43;
      *(_OWORD *)&v365[4] = v43;
      *(_OWORD *)&v365[2] = v43;
      *(_OWORD *)v365 = v43;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v385 = 136315906;
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 789;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = v5;
      __int16 v386 = 2048;
      *(void *)v387 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_625:
      *(void *)v385 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v4;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_626:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      unsigned int v218 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 797;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v6 + v4;
      __int16 v383 = 2048;
      *(void *)v384 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_627:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_DWORD *)v382 = 136315906;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v4 + v218 + v6;
      __int16 v383 = 2048;
      *(void *)v384 = v7;
      _os_log_send_and_compose_impl();
      uint64_t v214 = _os_crash_msg();
      __break(1u);
LABEL_628:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      unint64_t v20 = v214;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_DWORD *)v382 = 136315906;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = (v4 + v20) + v6;
      __int16 v383 = 2048;
      *(void *)v384 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_629:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v6;
      __int16 v383 = 2048;
      *(void *)v384 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_630:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v8;
      __int16 v383 = 2048;
      *(void *)v384 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_631:
      __p[0] = 0;
      long long v381 = 0u;
      long long v380 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v385 = 136315906;
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 797;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = v6;
      __int16 v386 = 2048;
      *(void *)v387 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_632:
      *(void *)v382 = 0;
      long long v381 = 0u;
      long long v380 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v385 = 136315906;
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 797;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = v5;
      __int16 v386 = 2048;
      *(void *)v387 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_633;
    }
LABEL_389:
    unint64_t v8 = 24;
    if (v307)
    {
      unint64_t v10 = 0;
      unint64_t v7 = v20;
      uint64_t v214 = (v296 + 2 * v4 + v203);
      while (1)
      {
        unint64_t v6 = *((void *)&v354 + 1);
        if (v10)
        {
          unint64_t v4 = v10 - 1;
          if (*((void *)&v354 + 1) <= v10 - 1) {
            goto LABEL_678;
          }
          unint64_t v4 = *(unsigned int *)(v356 + 4 * v4);
        }
        else
        {
          unint64_t v4 = 0;
        }
        if (*((void *)&v354 + 1) <= v10) {
          goto LABEL_671;
        }
        unint64_t v8 = v4;
        unint64_t v6 = v348;
        if (v348 <= v4) {
          goto LABEL_672;
        }
        uint64_t v215 = *(unsigned int *)(v356 + 4 * v10);
        float32x2_t v216 = *(float32x2_t *)(v350 + 8 * v4);
        float v217 = 0.0;
        if (v4 < v215)
        {
          unint64_t v6 = 0;
          unsigned int v218 = v204;
          uint64_t v219 = v4 + v204;
          uint64_t v220 = 8 * v4;
          unsigned int v221 = v4 + v214;
          float v217 = 0.0;
          do
          {
            unint64_t v11 = v348;
            if (v348 <= v4 + v6) {
              goto LABEL_626;
            }
            if (v219 + v6 >= v20) {
              goto LABEL_627;
            }
            uint64_t v222 = v350 + v220;
            float32x2_t v223 = vsub_f32(*(float32x2_t *)(v350 + v220 + 8 * v6), v216);
            float v217 = v217 + sqrtf(vaddv_f32(vmul_f32(v223, v223)));
            v223.i32[0] = 0;
            v223.f32[1] = v217;
            *(float32x2_t *)(v5 + 8 * v219 + 8 * v6) = v223;
            if (v20 <= v221 + v6) {
              goto LABEL_628;
            }
            *(void *)(v5 + 8 * v221 + 8 * v6) = __PAIR64__(LODWORD(v217), LODWORD(v304));
            float32x2_t v216 = *(float32x2_t *)(v222 + 8 * v6++);
          }
          while (v4 - v215 + v6);
          unint64_t v6 = v348;
          unint64_t v11 = (unint64_t)&v356 + 8;
          unsigned int v204 = v218;
        }
        if (v6 <= v4) {
          goto LABEL_673;
        }
        unint64_t v6 = v215 + v204;
        if (v20 <= v6) {
          goto LABEL_674;
        }
        float32x2_t v224 = vsub_f32(*(float32x2_t *)(v350 + 8 * v4), v216);
        float v225 = v217 + sqrtf(vaddv_f32(vmul_f32(v224, v224)));
        v224.i32[0] = 0;
        v224.f32[1] = v225;
        *(float32x2_t *)(v5 + 8 * v6) = v224;
        unint64_t v6 = (v6 + v9);
        if (v20 <= v6) {
          goto LABEL_675;
        }
        *(void *)(v5 + 8 * v6) = __PAIR64__(LODWORD(v225), LODWORD(v304));
        if (v4 <= v215) {
          break;
        }
LABEL_414:
        ++v10;
        ++v204;
        uint64_t v214 = (v214 + 1);
        unint64_t v8 = 24;
        if (v10 == v202) {
          goto LABEL_415;
        }
      }
      if (v225 <= v304) {
        float v225 = v304;
      }
      unint64_t v6 = v4 + v204;
      unint64_t v8 = (v4 + v214);
      float v226 = 1.0 / v225;
      while (v6 < v20)
      {
        *(float32x2_t *)(v5 + 8 * v6) = vmul_n_f32(*(float32x2_t *)(v5 + 8 * v6), v226);
        if (v20 <= v8) {
          goto LABEL_630;
        }
        *(float32x2_t *)(v5 + 8 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vmul_n_f32(*(float32x2_t *)(v5 + 8 * v8), v226);
        unint64_t v4 = (v4 + 1);
        ++v6;
        ++v8;
        if (v4 > v215) {
          goto LABEL_414;
        }
      }
      goto LABEL_629;
    }
LABEL_415:
    if (*(void *)v385 && *(void *)&v387[2]) {
      (*(void (**)(void))(**(void **)v385 + 40))();
    }
    unint64_t v9 = (unint64_t)v327;
    if (*(void *)buf && *(void *)&buf[32]) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    unint64_t v171 = (unsigned char *)a4;
LABEL_422:
    if (!v171[9]) {
      goto LABEL_491;
    }
    unint64_t v6 = v171[10];
    unint64_t v9 = v171[11];
    unint64_t v7 = DWORD2(v357);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v315[1] - (char *)v315[0]) >> 2);
    unint64_t v20 = *(unsigned int *)&v332[40];
    if (v171[11]) {
      int v227 = 2;
    }
    else {
      int v227 = 1;
    }
    if (v171[10]) {
      unint64_t v4 = DWORD2(v351);
    }
    else {
      unint64_t v4 = 0;
    }
    *(void *)&buf[32] = 0;
    memset(buf, 0, 28);
    *(void *)&v387[2] = 0;
    memset(v385, 0, sizeof(v385));
    re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v332[40]);
    re::DynamicArray<float>::resize((uint64_t)v385, v20);
    unint64_t v8 = (v4 + 1);
    if (v10)
    {
      uint64_t v228 = 0;
      unint64_t v5 = *(void *)&buf[16];
      uint64_t v229 = *(void *)&buf[32];
      v230.i64[1] = -1;
      v230.i64[0] = v4 | 0xFFFFFFFF00000000;
      int32x4_t v231 = vzip1q_s32(v230, v230);
      v231.i32[2] = v4;
      do
      {
        if (v5 == v228) {
          goto LABEL_649;
        }
        *(int32x4_t *)(v229 + 16 * v228++) = v231;
      }
      while (v10 != v228);
      if (v9)
      {
        int v232 = 0;
        uint64_t v233 = *(void *)&buf[32];
        v234.i64[1] = -1;
        v234.i64[0] = v8 | 0xFFFFFFFF00000000;
        int32x4_t v235 = vzip1q_s32(v234, v234);
        do
        {
          unint64_t v11 = (v10 + v232);
          if (v5 <= v11) {
            goto LABEL_656;
          }
          v235.i32[2] = v4 + 1;
          *(int32x4_t *)(v233 + 16 * v11) = v235;
        }
        while (v10 != ++v232);
      }
    }
    if (v6) {
      BOOL v236 = v7 == 0;
    }
    else {
      BOOL v236 = 1;
    }
    uint64_t v237 = !v236;
    if (!v236)
    {
      uint64_t v238 = 0;
      if (v9) {
        int v239 = v10;
      }
      else {
        int v239 = 0;
      }
      unsigned int v240 = v239 + v10;
      unint64_t v6 = *((void *)&v357 + 1);
      uint64_t v241 = v359;
      unint64_t v5 = *(void *)&buf[16];
      while (1)
      {
        if (v238)
        {
          unint64_t v10 = v238 - 1;
          if (v6 <= v238 - 1) {
            goto LABEL_665;
          }
          unsigned int v242 = *(_DWORD *)(v241 + 4 * v10);
        }
        else
        {
          unsigned int v242 = 0;
        }
        if (v238 == v6) {
          goto LABEL_657;
        }
        unsigned int v243 = *(_DWORD *)(v241 + 4 * v238) - 1;
        if (v242 < v243) {
          break;
        }
LABEL_458:
        if (++v238 == v7) {
          goto LABEL_459;
        }
      }
      uint64_t v244 = *(void *)&buf[32];
      while (1)
      {
        unint64_t v10 = v240;
        if (v5 <= v240) {
          break;
        }
        v245 = (unsigned int *)(v244 + 16 * v240);
        unsigned int *v245 = v242;
        v245[1] = v242++;
        v245[2] = v242;
        v245[3] = -1;
        unint64_t v11 = (v10 + 1);
        if (v5 <= v11) {
          goto LABEL_608;
        }
        v246 = (_DWORD *)(v244 + 16 * v11);
        _DWORD *v246 = v242 - 1;
        v246[1] = v242;
        v246[2] = v242;
        v246[3] = -1;
        unsigned int v240 = v10 + 2;
        if (v242 == v243) {
          goto LABEL_458;
        }
      }
LABEL_607:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v10;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_608:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 789;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v11;
      __int16 v383 = 2048;
      *(void *)v384 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_609:
      *(void *)buf = 0;
      memset(v332, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v365[0]) = 136315906;
      *(char **)((char *)v365 + 4) = "operator[]";
      WORD2(v365[1]) = 1024;
      *(_DWORD *)((char *)&v365[1] + 6) = 789;
      WORD1(v365[2]) = 2048;
      *(char **)((char *)&v365[2] + 4) = (char *)v20;
      WORD2(v365[3]) = 2048;
      *(char **)((char *)&v365[3] + 6) = (char *)v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_610:
      uint64_t v331 = 0;
      long long v381 = 0u;
      long long v380 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v385 = 136315906;
      *(void *)&v385[4] = "operator[]";
      *(_WORD *)&v385[12] = 1024;
      *(_DWORD *)&v385[14] = 797;
      *(_WORD *)&v385[18] = 2048;
      *(void *)&v385[20] = v8;
      __int16 v386 = 2048;
      *(void *)v387 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_611;
    }
LABEL_459:
    if (v20)
    {
      uint64_t v247 = 0;
      unint64_t v5 = *(void *)&v385[16];
      uint64_t v248 = *(void *)&v387[2];
      while (v5 != v247)
      {
        *(_DWORD *)(v248 + 4 * v247) = v247;
        if (v20 == ++v247) {
          goto LABEL_463;
        }
      }
      goto LABEL_652;
    }
LABEL_463:
    unint64_t v6 = v237;
    uint64_t v249 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v332, "vertexNormal", 7, (int)v4 + v227, (uint64_t *)buf, (uint64_t *)v385);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v249 + 16))(v249))
    {
      LODWORD(v20) = 0;
LABEL_686:
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = v4;
      __int16 v383 = 2048;
      *(void *)v384 = v20;
      _os_log_send_and_compose_impl();
      uint64_t result = (uint64_t *)_os_crash_msg();
      __break(1u);
      return result;
    }
    unint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v249, 0);
    uint64_t v250 = (*(uint64_t (**)(uint64_t))(*(void *)v249 + 16))(v249);
    unint64_t v20 = v250;
    unint64_t v11 = (unint64_t)&v356 + 8;
    if (v250 <= v4) {
      goto LABEL_686;
    }
    *(_OWORD *)(v5 + 16 * v4) = xmmword_23435FD80;
    if (!v9) {
      goto LABEL_468;
    }
    if (v250 <= v8)
    {
      *(void *)v388 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v382 = 136315906;
      *(void *)&v382[4] = "operator[]";
      *(_WORD *)&v382[12] = 1024;
      *(_DWORD *)&v382[14] = 609;
      *(_WORD *)&v382[18] = 2048;
      *(void *)&v382[20] = (v4 + 1);
      __int16 v383 = 2048;
      *(void *)v384 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_681;
    }
    *(_OWORD *)(v5 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_234382760;
LABEL_468:
    if (v6)
    {
      unint64_t v4 = 0;
      while (1)
      {
        unint64_t v6 = *((void *)&v357 + 1);
        if (v4)
        {
          unint64_t v8 = v4 - 1;
          if (*((void *)&v357 + 1) <= v4 - 1) {
            goto LABEL_666;
          }
          unsigned int v252 = *(_DWORD *)(v359 + 4 * v8);
        }
        else
        {
          unsigned int v252 = 0;
        }
        if (*((void *)&v357 + 1) <= v4) {
          goto LABEL_661;
        }
        uint64_t v253 = *(unsigned int *)(v359 + 4 * v4);
        if (v252 < v253) {
          break;
        }
LABEL_483:
        if (++v4 == v7) {
          goto LABEL_484;
        }
      }
      unint64_t v6 = v252;
      if (v252 <= v250) {
        unint64_t v8 = v250;
      }
      else {
        unint64_t v8 = v252;
      }
      uint64_t v254 = 8 * v252;
      while (1)
      {
        unint64_t v9 = *((void *)&v351 + 1);
        if (*((void *)&v351 + 1) <= v6) {
          goto LABEL_614;
        }
        if (v8 == v6) {
          goto LABEL_615;
        }
        v251.i32[0] = *(_DWORD *)(v353 + v254 + 4);
        v251.f32[1] = -*(float *)(v353 + v254);
        int32x4_t v255 = (int32x4_t)vmulq_f32(v251, v251);
        v255.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v255, 2), vadd_f32(*(float32x2_t *)v255.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v255.i8, 1))).u32[0];
        float32x2_t v256 = vrsqrte_f32((float32x2_t)v255.u32[0]);
        float32x2_t v257 = vmul_f32(v256, vrsqrts_f32((float32x2_t)v255.u32[0], vmul_f32(v256, v256)));
        *(float32x4_t *)(v5 + 16 * v6++) = vmulq_n_f32(v251, vmul_f32(v257, vrsqrts_f32((float32x2_t)v255.u32[0], vmul_f32(v257, v257))).f32[0]);
        v254 += 8;
        if (v253 == v6) {
          goto LABEL_483;
        }
      }
    }
LABEL_484:
    unint64_t v9 = (unint64_t)v327;
    if (*(void *)v385 && *(void *)&v387[2]) {
      (*(void (**)(void))(**(void **)v385 + 40))();
    }
    unint64_t v8 = 24;
    if (*(void *)buf && *(void *)&buf[32]) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    unint64_t v171 = (unsigned char *)a4;
LABEL_491:
    if (v297)
    {
      unint64_t v6 = v171[10];
      unint64_t v5 = v171[11];
      unsigned int v258 = DWORD2(v351);
      unint64_t v8 = DWORD2(v357);
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v315[1] - (char *)v315[0]) >> 2);
      unint64_t v20 = *(unsigned int *)&v332[40];
      *(void *)&buf[32] = 0;
      memset(buf, 0, 28);
      *(void *)&v387[2] = 0;
      memset(v385, 0, sizeof(v385));
      *(void *)&v384[2] = 0;
      memset(v382, 0, sizeof(v382));
      re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v332[40]);
      re::DynamicArray<re::GeomCell4>::resize(v385, v20);
      re::DynamicArray<float>::resize((uint64_t)v382, v20);
      if (v7)
      {
        v259 = 0;
        unint64_t v4 = *(void *)&buf[16];
        uint64_t v260 = *(void *)&buf[32];
        unint64_t v9 = *(void *)&v385[16];
        uint64_t v261 = *(void *)&v387[2];
        v262.i64[1] = -1;
        v262.i64[0] = v258 | 0xFFFFFFFF00000000;
        int32x4_t v263 = vzip1q_s32(v262, v262);
        v263.i32[2] = v258;
        do
        {
          if ((unsigned char *)v4 == v259) {
            goto LABEL_654;
          }
          *(_OWORD *)(v260 + 16 * (void)v259) = xmmword_2343AC120;
          if ((unsigned char *)v9 == v259) {
            goto LABEL_655;
          }
          *(int32x4_t *)(v261 + 16 * (void)v259++) = v263;
        }
        while ((unsigned char *)v7 != v259);
        if (v5)
        {
          int v264 = 0;
          uint64_t v265 = *(void *)&buf[32];
          unint64_t v10 = *(void *)&v385[16];
          uint64_t v266 = *(void *)&v387[2];
          while (1)
          {
            unint64_t v9 = (v7 + v264);
            if (v4 <= v9) {
              break;
            }
            *(_OWORD *)(v265 + 16 * v9) = xmmword_2343AC130;
            if (v10 <= v9) {
              goto LABEL_663;
            }
            *(int32x4_t *)(v266 + 16 * v9) = v263;
            if (v7 == ++v264) {
              goto LABEL_502;
            }
          }
LABEL_662:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 789;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v9;
          __int16 v389 = 2048;
          uint64_t v390 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_663:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 789;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v9;
          __int16 v389 = 2048;
          uint64_t v390 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_664:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v6;
          __int16 v383 = 2048;
          *(void *)v384 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_665:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v10;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_666:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v8;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_667:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 797;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v5;
          __int16 v389 = 2048;
          uint64_t v390 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_668:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 797;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v4;
          __int16 v389 = 2048;
          uint64_t v390 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_669:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v8;
          __int16 v383 = 2048;
          *(void *)v384 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_670:
          *(void *)buf = 0;
          memset(v332, 0, 80);
          unint64_t v4 = v67;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v365[0]) = 136315906;
          *(char **)((char *)v365 + 4) = "operator[]";
          WORD2(v365[1]) = 1024;
          *(_DWORD *)((char *)&v365[1] + 6) = 789;
          WORD1(v365[2]) = 2048;
          *(char **)((char *)&v365[2] + 4) = (char *)v4;
          WORD2(v365[3]) = 2048;
          *(char **)((char *)&v365[3] + 6) = (char *)v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_671:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v10;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_672:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v8;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_673:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v8;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_674:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 609;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v6;
          __int16 v383 = 2048;
          *(void *)v384 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_675:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 609;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v6;
          __int16 v383 = 2048;
          *(void *)v384 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_676:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 797;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v4;
          __int16 v389 = 2048;
          uint64_t v390 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_677:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 797;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = v7;
          __int16 v389 = 2048;
          uint64_t v390 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_678:
          *(void *)v388 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v382 = 136315906;
          *(void *)&v382[4] = "operator[]";
          *(_WORD *)&v382[12] = 1024;
          *(_DWORD *)&v382[14] = 797;
          *(_WORD *)&v382[18] = 2048;
          *(void *)&v382[20] = v4;
          __int16 v383 = 2048;
          *(void *)v384 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_679:
          abort();
        }
      }
LABEL_502:
      if (v6) {
        BOOL v267 = v8 == 0;
      }
      else {
        BOOL v267 = 1;
      }
      unint64_t v10 = !v267;
      if (!v267)
      {
        uint64_t v268 = 0;
        if (v5) {
          int v269 = v7;
        }
        else {
          int v269 = 0;
        }
        unsigned int v270 = v269 + v7;
        unint64_t v5 = *((void *)&v357 + 1);
        uint64_t v271 = v359;
        unint64_t v6 = *(void *)&buf[16];
        while (1)
        {
          if (v268)
          {
            unint64_t v4 = v268 - 1;
            if (v5 <= v268 - 1) {
              goto LABEL_676;
            }
            unsigned int v272 = *(_DWORD *)(v271 + 4 * v4);
          }
          else
          {
            unsigned int v272 = 0;
          }
          if (v268 == v5) {
            goto LABEL_667;
          }
          unsigned int v273 = *(_DWORD *)(v271 + 4 * v268) - 1;
          if (v272 < v273) {
            break;
          }
LABEL_525:
          if (++v268 == v8) {
            goto LABEL_526;
          }
        }
        uint64_t v274 = *(void *)&buf[32];
        unint64_t v7 = *(void *)&v385[16];
        uint64_t v275 = *(void *)&v387[2];
        while (1)
        {
          unint64_t v9 = v270;
          if (v6 <= v270) {
            goto LABEL_618;
          }
          *(_OWORD *)(v274 + 16 * v270) = xmmword_2343AC140;
          unint64_t v4 = v270 + 1;
          if (v6 <= v4) {
            goto LABEL_619;
          }
          *(_OWORD *)(v274 + 16 * v4) = xmmword_2343AC140;
          if (v7 <= v270) {
            goto LABEL_620;
          }
          v276 = (unsigned int *)(v275 + 16 * v270);
          unsigned int *v276 = v272;
          v276[1] = v272++;
          v276[2] = v272;
          v276[3] = -1;
          if (v7 <= v4) {
            goto LABEL_621;
          }
          v277 = (_DWORD *)(v275 + 16 * v4);
          _DWORD *v277 = v272 - 1;
          v277[1] = v272;
          v277[2] = v272;
          v277[3] = -1;
          unsigned int v270 = v9 + 2;
          if (v272 == v273) {
            goto LABEL_525;
          }
        }
      }
LABEL_526:
      if (v20)
      {
        uint64_t v278 = 0;
        unint64_t v4 = *(void *)&v382[16];
        uint64_t v279 = *(void *)&v384[2];
        while (v4 != v278)
        {
          *(_DWORD *)(v279 + 4 * v27re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v278;
          if (v20 == ++v278) {
            goto LABEL_530;
          }
        }
LABEL_660:
        *(void *)v328 = 0;
        int64x2_t v367 = 0u;
        long long v366 = 0u;
        memset(v365, 0, sizeof(v365));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v388 = 136315906;
        *(void *)&v388[4] = "operator[]";
        *(_WORD *)&v388[12] = 1024;
        *(_DWORD *)&v388[14] = 789;
        *(_WORD *)&v388[18] = 2048;
        *(void *)&v388[20] = v4;
        __int16 v389 = 2048;
        uint64_t v390 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_661:
        *(void *)v388 = 0;
        int64x2_t v367 = 0u;
        long long v366 = 0u;
        memset(v365, 0, sizeof(v365));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v382 = 136315906;
        *(void *)&v382[4] = "operator[]";
        *(_WORD *)&v382[12] = 1024;
        *(_DWORD *)&v382[14] = 797;
        *(_WORD *)&v382[18] = 2048;
        *(void *)&v382[20] = v4;
        __int16 v383 = 2048;
        *(void *)v384 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_662;
      }
LABEL_530:
      uint64_t v280 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v332, "vertexTangent", 7, 3, (uint64_t *)buf, (uint64_t *)v382);
      uint64_t v281 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v332, "vertexBitangent", 7, v258 + 3, (uint64_t *)v385, (uint64_t *)v382);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v280 + 16))(v280))
      {
        v282 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v280, 0);
        unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v280 + 16))(v280);
      }
      else
      {
        unint64_t v7 = 0;
        v282 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v281 + 16))(v281))
      {
        unint64_t v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v281, 0);
        unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v281 + 16))(v281);
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v5 = 0;
      }
      if (v7)
      {
        _OWORD *v282 = xmmword_23435FD50;
        if (v7 != 1)
        {
          v282[1] = xmmword_23435FD70;
          if (v7 > 2)
          {
            unint64_t v4 = v258;
            v282[2] = xmmword_234382760;
            if (v20 > v258)
            {
              v283.i32[3] = 0;
              *(_OWORD *)(v5 + 16 * v25re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23435FD60;
              unint64_t v9 = (unint64_t)v327;
              if (v10)
              {
                unint64_t v4 = 0;
                while (1)
                {
                  unint64_t v6 = *((void *)&v357 + 1);
                  if (v4)
                  {
                    unint64_t v7 = v4 - 1;
                    if (*((void *)&v357 + 1) <= v4 - 1) {
                      goto LABEL_677;
                    }
                    unsigned int v284 = *(_DWORD *)(v359 + 4 * v7);
                  }
                  else
                  {
                    unsigned int v284 = 0;
                  }
                  if (*((void *)&v357 + 1) <= v4) {
                    goto LABEL_668;
                  }
                  uint64_t v285 = *(unsigned int *)(v359 + 4 * v4);
                  if (v284 < v285) {
                    break;
                  }
LABEL_554:
                  ++v4;
                  unint64_t v9 = (unint64_t)v327;
                  if (v4 == v8) {
                    goto LABEL_555;
                  }
                }
                unint64_t v6 = v284;
                if (v284 <= v20) {
                  unint64_t v7 = v20;
                }
                else {
                  unint64_t v7 = v284;
                }
                while (1)
                {
                  unint64_t v9 = *((void *)&v351 + 1);
                  if (*((void *)&v351 + 1) <= v6) {
                    goto LABEL_622;
                  }
                  if (v7 == v6) {
                    goto LABEL_623;
                  }
                  v283.i64[0] = *(void *)(v353 + 8 * v6);
                  v283.i32[2] = 0;
                  int32x4_t v286 = (int32x4_t)vmulq_f32(v283, v283);
                  v286.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v286, 2), vadd_f32(*(float32x2_t *)v286.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v286.i8, 1))).u32[0];
                  float32x2_t v287 = vrsqrte_f32((float32x2_t)v286.u32[0]);
                  float32x2_t v288 = vmul_f32(v287, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v287, v287)));
                  float32x4_t v283 = vmulq_n_f32(v283, vmul_f32(v288, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v288, v288))).f32[0]);
                  *(float32x4_t *)(v5 + 16 * v6++) = v283;
                  if (v285 == v6) {
                    goto LABEL_554;
                  }
                }
              }
LABEL_555:
              if (*(void *)v382 && *(void *)&v384[2]) {
                (*(void (**)(void))(**(void **)v382 + 40))();
              }
              unint64_t v8 = 24;
              if (*(void *)v385 && *(void *)&v387[2]) {
                (*(void (**)(void))(**(void **)v385 + 40))();
              }
              if (*(void *)buf && *(void *)&buf[32]) {
                (*(void (**)(void))(**(void **)buf + 40))();
              }
              goto LABEL_564;
            }
LABEL_684:
            *(void *)v328 = 0;
            int64x2_t v367 = 0u;
            long long v366 = 0u;
            memset(v365, 0, sizeof(v365));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v388 = 136315906;
            *(void *)&v388[4] = "operator[]";
            *(_WORD *)&v388[12] = 1024;
            *(_DWORD *)&v388[14] = 609;
            *(_WORD *)&v388[18] = 2048;
            *(void *)&v388[20] = v4;
            __int16 v389 = 2048;
            uint64_t v390 = v20;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_683:
          *(void *)v328 = 0;
          int64x2_t v367 = 0u;
          long long v366 = 0u;
          memset(v365, 0, sizeof(v365));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v388 = 136315906;
          *(void *)&v388[4] = "operator[]";
          *(_WORD *)&v388[12] = 1024;
          *(_DWORD *)&v388[14] = 609;
          *(_WORD *)&v388[18] = 2048;
          *(void *)&v388[20] = 2;
          __int16 v389 = 2048;
          uint64_t v390 = 2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_684;
        }
LABEL_682:
        *(void *)v328 = 0;
        int64x2_t v367 = 0u;
        long long v366 = 0u;
        memset(v365, 0, sizeof(v365));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v388 = 136315906;
        *(void *)&v388[4] = "operator[]";
        *(_WORD *)&v388[12] = 1024;
        *(_DWORD *)&v388[14] = 609;
        *(_WORD *)&v388[18] = 2048;
        *(void *)&v388[20] = 1;
        __int16 v389 = 2048;
        uint64_t v390 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_683;
      }
LABEL_681:
      *(void *)v328 = 0;
      int64x2_t v367 = 0u;
      long long v366 = 0u;
      memset(v365, 0, sizeof(v365));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v388 = 136315906;
      *(void *)&v388[4] = "operator[]";
      *(_WORD *)&v388[12] = 1024;
      *(_DWORD *)&v388[14] = 609;
      *(_WORD *)&v388[18] = 2048;
      *(void *)&v388[20] = 0;
      __int16 v389 = 2048;
      uint64_t v390 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_682;
    }
LABEL_564:
    re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)v360, (const re::GeomMesh *)v332);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v332);
    if (v315[0])
    {
      v315[1] = v315[0];
      operator delete(v315[0]);
    }
    if (*((void *)&v356 + 1))
    {
      if (v359) {
        (*(void (**)(void))(**((void **)&v356 + 1) + 40))();
      }
      uint64_t v359 = 0;
      long long v357 = 0uLL;
      *((void *)&v356 + 1) = 0;
      ++v358;
    }
    if (*((void *)&v353 + 1))
    {
      if ((void)v356) {
        (*(void (**)(void))(**((void **)&v353 + 1) + 40))();
      }
      *(void *)&long long v356 = 0;
      long long v354 = 0uLL;
      *((void *)&v353 + 1) = 0;
      ++v355;
    }
    if (*((void *)&v350 + 1))
    {
      if ((void)v353) {
        (*(void (**)(void))(**((void **)&v350 + 1) + 40))();
      }
      *(void *)&long long v353 = 0;
      long long v351 = 0uLL;
      *((void *)&v350 + 1) = 0;
      ++v352;
    }
    if (*(void *)&v346[32] && (void)v350) {
      (*(void (**)(void))(**(void **)&v346[32] + 40))();
    }
    unint64_t v67 = v301 + 1;
  }
  while (v301 + 1 != v294);
LABEL_582:
  v289 = (re *)re::GeomMesh::operator=(a1, &v360[8]);
  re::GeomMesh::setName(v289, *(const char **)v360);
  re::GeomMesh::freeName((re *)v360);
  re::GeomMesh::freeName((re *)v360);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v364);
  if (*(void *)&v360[16] && v363) {
    (*(void (**)(void))(**(void **)&v360[16] + 40))();
  }
  v290 = v317;
  if (v317 && v321)
  {
    if (v319)
    {
      uint64_t v291 = 224 * v319;
      v292 = (uint64_t *)(v321 + 176);
      do
      {
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v292 - 6));
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v292 - 11));
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v292 - 16));
        v292 += 28;
        v291 -= 224;
      }
      while (v291);
      v290 = v317;
    }
    (*(void (**)(uint64_t *))(*v290 + 40))(v290);
  }
}

uint64_t *re::DynamicArray<re::anonymous namespace'::PiecewiseBezierCurve>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[4];
    if (v3)
    {
      uint64_t v4 = a1[2];
      if (v4)
      {
        uint64_t v5 = 176 * v4;
        uint64_t v6 = v3 + 128;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          re::DynamicArray<unsigned long>::deinit(v6 - 40);
          re::DynamicArray<unsigned long>::deinit(v6 - 80);
          v6 += 176;
          v5 -= 176;
        }
        while (v5);
        uint64_t v2 = *a1;
        uint64_t v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

void *re::anonymous namespace'::extractControlPointsCallback(void *this, uint64_t a2, const CGPathElement *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (this && a2)
  {
    uint64_t v4 = (uint64_t)this;
    switch(*(_DWORD *)a2)
    {
      case 0:
        v13[0] = 1;
        v5.i64[0] = 0x7F0000007FLL;
        v5.i64[1] = 0x7F0000007FLL;
        float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        float32x4_t v15 = v5;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v16 = 0;
        int v19 = 0;
        uint64_t v26 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        int v22 = 0;
        int v25 = 0;
        float32x2_t v12 = vcvt_f32_f64(*(float64x2_t *)*(void *)(a2 + 8));
        re::DynamicArray<unsigned long>::add((void *)&v23 + 1, &v12);
        float32x4_t v6 = *(float32x4_t *)*(void *)(a2 + 8);
        *(float32x2_t *)v6.f32 = vcvt_f32_f64((float64x2_t)v6);
        float32x4_t v7 = v14;
        float32x4_t v8 = v15;
        v7.i32[3] = 0;
        v8.i32[3] = 0;
        float32x4_t v14 = vminnmq_f32(v7, v6);
        float32x4_t v15 = vmaxnmq_f32(v8, v6);
        if (*((void *)&v23 + 1))
        {
          if (v26) {
            (*(void (**)(__n128))(**((void **)&v23 + 1) + 40))(v9);
          }
          uint64_t v26 = 0;
          long long v24 = 0uLL;
          *((void *)&v23 + 1) = 0;
          ++v25;
        }
        if (*((void *)&v20 + 1))
        {
          if ((void)v23) {
            (*(void (**)(__n128))(**((void **)&v20 + 1) + 40))(v9);
          }
          *(void *)&long long v23 = 0;
          long long v21 = 0uLL;
          *((void *)&v20 + 1) = 0;
          ++v22;
        }
        this = (void *)v16;
        if (v16)
        {
          if ((void)v20) {
            return (void *)(*(uint64_t (**)(__n128))(*(void *)v16 + 40))(v9);
          }
        }
        return this;
      case 1:
        unint64_t v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        unsigned int v11 = 1;
        goto LABEL_19;
      case 2:
        unint64_t v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        unsigned int v11 = 2;
        goto LABEL_19;
      case 3:
        unint64_t v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        unsigned int v11 = 3;
LABEL_19:
        break;
      case 4:
        return this;
      default:
        re::internal::assertLog((re::internal *)4, a2, a3, "assertion failure: '%s' (%s:line %i) Unknown element type!", "!\"Unreachable code\"", "extractControlPointsCallback", 155);
        _os_crash();
        __break(1u);
        JUMPOUT(0x233AC409CLL);
    }
  }
  return this;
}

__n128 re::DynamicArray<re::anonymous namespace'::PiecewiseBezierCurve>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v20 = 2 * v4;
      BOOL v21 = v4 == 0;
      unint64_t v22 = 8;
      if (!v21) {
        unint64_t v22 = v20;
      }
      if (v22 <= v6) {
        unint64_t v23 = v6;
      }
      else {
        unint64_t v23 = v22;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 176 * *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)uint64_t v8 = result;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_DWORD *)(v8 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a2 + 48);
  *(void *)(v8 + 56) = v11;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v12 = *(void *)(v8 + 64);
  *(void *)(v8 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v12;
  uint64_t v13 = *(void *)(v8 + 80);
  *(void *)(v8 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v13;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(v8 + 72);
  *(void *)(v8 + 120) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
  *(_DWORD *)(v8 + 112) = 0;
  uint64_t v14 = *(void *)(a2 + 96);
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = *(void *)(a2 + 88);
  *(void *)(v8 + 96) = v14;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v15 = *(void *)(v8 + 104);
  *(void *)(v8 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v15;
  uint64_t v16 = *(void *)(v8 + 120);
  *(void *)(v8 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = v16;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(v8 + 112);
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  *(_DWORD *)(v8 + 152) = 0;
  uint64_t v17 = *(void *)(a2 + 136);
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = *(void *)(a2 + 128);
  *(void *)(v8 + 136) = v17;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v18 = *(void *)(v8 + 144);
  *(void *)(v8 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v18;
  uint64_t v19 = *(void *)(v8 + 160);
  *(void *)(v8 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = v19;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(v8 + 152);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void *re::anonymous namespace'::addCGElementToBoundaryHelper(unsigned int a1, float32x4_t *a2, uint64_t a3)
{
  char v14 = a1;
  if (a2->u8[0] < a1) {
    a2->i8[0] = a1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a1;
  if (a1 <= 1uLL) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a1;
  }
  uint64_t v8 = 16 * v7;
  do
  {
    float32x2_t v13 = vcvt_f32_f64(*(float64x2_t *)(*(void *)(a3 + 8) + v5));
    re::DynamicArray<unsigned long>::add((float32x4_t *)a2[8].i64, &v13);
    float32x4_t v9 = *(float32x4_t *)(*(void *)(a3 + 8) + v5);
    *(float32x2_t *)v9.f32 = vcvt_f32_f64((float64x2_t)v9);
    float32x4_t v10 = a2[1];
    float32x4_t v11 = a2[2];
    v10.i32[3] = 0;
    v11.i32[3] = 0;
    a2[1] = vminnmq_f32(v10, v9);
    a2[2] = vmaxnmq_f32(v11, v9);
    v5 += 16;
  }
  while (v8 != v5);
  float32x2_t v13 = (float32x2_t)(a2[9].i64[0] + ~v6);
  re::DynamicArray<unsigned long>::add(&a2[5].i64[1], &v13);
  return re::DynamicArray<unsigned char>::add((float32x4_t *)a2[3].i64, &v14);
}

void *re::DynamicArray<re::anonymous namespace'::PiecewiseBezierCurve>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB0uLL))
        {
          uint64_t v2 = 176 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 176 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 176, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 176 * v9;
        float32x4_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)v8;
          long long v13 = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 16);
          *((_OWORD *)v11 + 2) = v13;
          *(_OWORD *)float32x4_t v11 = v12;
          v11[10] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          *((_DWORD *)v11 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v14 = v8 + 48;
          uint64_t v15 = *(void *)(v8 + 56);
          v11[6] = *(void *)(v8 + 48);
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          v11[7] = v15;
          *(void *)(v8 + 56) = 0;
          uint64_t v16 = v11[8];
          v11[8] = *(void *)(v8 + 64);
          *(void *)(v8 + 64) = v16;
          uint64_t v17 = v11[10];
          v11[10] = *(void *)(v8 + 80);
          *(void *)(v8 + 80) = v17;
          ++*(_DWORD *)(v8 + 72);
          ++*((_DWORD *)v11 + 18);
          v11[15] = 0;
          v11[12] = 0;
          v11[13] = 0;
          v11[11] = 0;
          *((_DWORD *)v11 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v18 = v8 + 88;
          uint64_t v19 = *(void *)(v8 + 96);
          v11[11] = *(void *)(v8 + 88);
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
          v11[12] = v19;
          *(void *)(v8 + 96) = 0;
          uint64_t v20 = v11[13];
          v11[13] = *(void *)(v8 + 104);
          *(void *)(v8 + 104) = v20;
          uint64_t v21 = v11[15];
          v11[15] = *(void *)(v8 + 120);
          *(void *)(v8 + 120) = v21;
          ++*(_DWORD *)(v8 + 112);
          ++*((_DWORD *)v11 + 28);
          v11[20] = 0;
          v11[17] = 0;
          v11[18] = 0;
          v11[16] = 0;
          *((_DWORD *)v11 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v22 = *(void *)(v8 + 128);
          uint64_t v23 = *(void *)(v8 + 136);
          uint64_t v24 = v8 + 128;
          v11[16] = v22;
          v11[17] = v23;
          *(void *)uint64_t v24 = 0;
          *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v25 = v11[18];
          v11[18] = *(void *)(v24 + 16);
          *(void *)(v24 + 16) = v25;
          uint64_t v26 = v11[20];
          v11[20] = *(void *)(v24 + 32);
          *(void *)(v24 + 32) = v26;
          ++*(_DWORD *)(v24 + 24);
          ++*((_DWORD *)v11 + 38);
          re::DynamicArray<unsigned long>::deinit(v24);
          re::DynamicArray<unsigned long>::deinit(v18);
          re::DynamicArray<unsigned long>::deinit(v14);
          uint64_t v8 = v24 + 48;
          v11 += 22;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::anonymous namespace'::PiecewiseBezierCurve *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = result;
  uint64_t v264 = *MEMORY[0x263EF8340];
  while (2)
  {
    int v227 = (long long *)(a2 - 176);
    uint64_t v9 = (long long *)v8;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t)v9;
        uint64_t v10 = a2 - (void)v9;
        unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - (void)v9) >> 4);
        if (!(!v5 & v4))
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              float32x4_t v89 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
              v89.i32[3] = 0;
              float32x4_t v90 = vmaxnmq_f32(v89, (float32x4_t)0);
              float32x4_t v91 = vsubq_f32(*(float32x4_t *)(v8 + 32), *(float32x4_t *)(v8 + 16));
              v91.i32[3] = 0;
              float32x4_t v92 = vmaxnmq_f32(v91, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v90, *(float32x2_t *)v90.f32, 1), vmulq_lane_f32(v92, *(float32x2_t *)v92.f32, 1))).u8[0] & 1) == 0)return result; {
              uint64_t v93 = (long long *)v8;
              }
              uint64_t v94 = (long long *)(a2 - 176);
              break;
            case 3uLL:
            case 4uLL:
            case 5uLL:
              float32x4_t v95 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
              v95.i32[3] = 0;
              float32x4_t v96 = vmaxnmq_f32(v95, (float32x4_t)0);
              float32x4_t v97 = vsubq_f32(*(float32x4_t *)(v8 + 560), *(float32x4_t *)(v8 + 544));
              v97.i32[3] = 0;
              float32x4_t v98 = vmaxnmq_f32(v97, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v96, *(float32x2_t *)v96.f32, 1), vmulq_lane_f32(v98, *(float32x2_t *)v98.f32, 1))).u8[0] & 1) == 0)return result; {
              float32x4_t v99 = vsubq_f32(*(float32x4_t *)(v8 + 560), *(float32x4_t *)(v8 + 544));
              }
              v99.i32[3] = 0;
              float32x4_t v100 = vmaxnmq_f32(v99, (float32x4_t)0);
              float32x4_t v101 = vsubq_f32(*(float32x4_t *)(v8 + 384), *(float32x4_t *)(v8 + 368));
              v101.i32[3] = 0;
              float32x4_t v102 = vmaxnmq_f32(v101, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v100, *(float32x2_t *)v100.f32, 1), vmulq_lane_f32(v102, *(float32x2_t *)v102.f32, 1))).u8[0] & 1) == 0)return result; {
              float32x4_t v103 = vsubq_f32(*(float32x4_t *)(v8 + 384), *(float32x4_t *)(v8 + 368));
              }
              v103.i32[3] = 0;
              float32x4_t v104 = vmaxnmq_f32(v103, (float32x4_t)0);
              float32x4_t v105 = vsubq_f32(*(float32x4_t *)(v8 + 208), *(float32x4_t *)(v8 + 192));
              v105.i32[3] = 0;
              float32x4_t v106 = vmaxnmq_f32(v105, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v104, *(float32x2_t *)v104.f32, 1), vmulq_lane_f32(v106, *(float32x2_t *)v106.f32, 1))).u8[0] & 1) == 0)return result; {
              float32x4_t v107 = vsubq_f32(*(float32x4_t *)(v8 + 208), *(float32x4_t *)(v8 + 192));
              }
              v107.i32[3] = 0;
              float32x4_t v108 = vmaxnmq_f32(v107, (float32x4_t)0);
              float32x4_t v109 = vsubq_f32(*(float32x4_t *)(v8 + 32), *(float32x4_t *)(v8 + 16));
              v109.i32[3] = 0;
              float32x4_t v110 = vmaxnmq_f32(v109, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v108, *(float32x2_t *)v108.f32, 1), vmulq_lane_f32(v110, *(float32x2_t *)v110.f32, 1))).u8[0] & 1) == 0)return result; {
              uint64_t v93 = (long long *)v8;
              }
              uint64_t v94 = (long long *)(v8 + 176);
              break;
            default:
              JUMPOUT(0);
          }
        }
        if (v10 <= 4223)
        {
          if (a4)
          {
            if (v8 != a2)
            {
              uint64_t v111 = v8 + 176;
              if (v8 + 176 != a2)
              {
                uint64_t v112 = 0;
                uint64_t v113 = v8;
                do
                {
                  uint64_t v114 = v111;
                  float32x4_t v115 = vsubq_f32(*(float32x4_t *)(v113 + 208), *(float32x4_t *)(v113 + 192));
                  v115.i32[3] = 0;
                  float32x4_t v116 = vmaxnmq_f32(v115, (float32x4_t)0);
                  float32x4_t v117 = vsubq_f32(*(float32x4_t *)(v113 + 32), *(float32x4_t *)(v113 + 16));
                  v117.i32[3] = 0;
                  float32x4_t v118 = vmaxnmq_f32(v117, (float32x4_t)0);
                  if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v116, *(float32x2_t *)v116.f32, 1), vmulq_lane_f32(v118, *(float32x2_t *)v118.f32, 1))).u8[0])
                  {
                    unint64_t v119 = a2;
                    long long v120 = *(_OWORD *)v111;
                    float32x4_t v121 = *(float32x4_t *)(v111 + 32);
                    long long v252 = *(_OWORD *)(v111 + 16);
                    float32x4_t v253 = v121;
                    long long v251 = v120;
                    uint64_t v254 = *(void *)(v113 + 224);
                    *(void *)(v113 + 224) = 0;
                    long long v255 = *(_OWORD *)(v113 + 232);
                    *(_OWORD *)(v113 + 232) = 0u;
                    ++*(_DWORD *)(v113 + 248);
                    int v256 = 1;
                    long long v122 = *(_OWORD *)(v113 + 272);
                    long long v257 = *(_OWORD *)(v113 + 256);
                    long long v258 = v122;
                    *(_OWORD *)(v113 + 256) = 0u;
                    *(_OWORD *)(v113 + 272) = 0u;
                    ++*(_DWORD *)(v113 + 288);
                    int v259 = 1;
                    long long v260 = *(_OWORD *)(v113 + 296);
                    *(_OWORD *)(v113 + 296) = 0u;
                    long long v261 = *(_OWORD *)(v113 + 312);
                    *(_OWORD *)(v113 + 312) = 0u;
                    uint64_t v263 = *(void *)(v113 + 336);
                    *(void *)(v113 + 336) = 0;
                    ++*(_DWORD *)(v113 + 328);
                    uint64_t v123 = v112;
                    int v262 = 1;
                    while (1)
                    {
                      unint64_t v124 = (float32x4_t *)(v8 + v123);
                      float32x4_t v125 = *(float32x4_t *)(v8 + v123 + 16);
                      v124[11] = *(float32x4_t *)(v8 + v123);
                      v124[12] = v125;
                      v124[13] = *(float32x4_t *)(v8 + v123 + 32);
                      uint64_t v126 = v8 + v123 + 48;
                      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v8 + v123 + 224, v126);
                      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v124[16].i64[1], (uint64_t)&v124[5].i64[1]);
                      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v124[19], (uint64_t)&v124[8]);
                      if (!v123) {
                        break;
                      }
                      float32x4_t v127 = vsubq_f32(v253, (float32x4_t)v252);
                      v127.i32[3] = 0;
                      float32x4_t v128 = vmaxnmq_f32(v127, (float32x4_t)0);
                      float32x4_t v129 = vsubq_f32(v124[-9], v124[-10]);
                      v129.i32[3] = 0;
                      float32x4_t v130 = vmaxnmq_f32(v129, (float32x4_t)0);
                      v123 -= 176;
                      if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v128, *(float32x2_t *)v128.f32, 1), vmulq_lane_f32(v130, *(float32x2_t *)v130.f32, 1))).u8[0] & 1) == 0)
                      {
                        uint64_t v131 = v8 + v123 + 176;
                        goto LABEL_97;
                      }
                    }
                    uint64_t v131 = v8;
LABEL_97:
                    long long v132 = v251;
                    float32x4_t v133 = v253;
                    *(_OWORD *)(v131 + 16) = v252;
                    *(float32x4_t *)(v131 + 32) = v133;
                    *(_OWORD *)uint64_t v131 = v132;
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v126, (uint64_t)&v254);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v124[5].i64[1], (uint64_t)&v257 + 8);
                    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v124[8], (uint64_t)&v260 + 8);
                    a2 = v119;
                    if (*((void *)&v260 + 1))
                    {
                      if (v263) {
                        (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
                      }
                      uint64_t v263 = 0;
                      long long v261 = 0uLL;
                      *((void *)&v260 + 1) = 0;
                      ++v262;
                    }
                    if (*((void *)&v257 + 1))
                    {
                      if ((void)v260) {
                        (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
                      }
                      *(void *)&long long v260 = 0;
                      long long v258 = 0uLL;
                      *((void *)&v257 + 1) = 0;
                      ++v259;
                    }
                    __n128 result = v254;
                    if (v254 && (void)v257) {
                      __n128 result = (*(uint64_t (**)(void))(*(void *)v254 + 40))();
                    }
                  }
                  uint64_t v111 = v114 + 176;
                  v112 += 176;
                  uint64_t v113 = v114;
                }
                while (v114 + 176 != a2);
              }
            }
          }
          else if (v8 != a2)
          {
            uint64_t v205 = v8 + 176;
            if (v8 + 176 != a2)
            {
              float32x4_t v206 = (float32x4_t *)(v8 - 160);
              float32x4_t v207 = 0uLL;
              do
              {
                uint64_t v208 = v205;
                float32x4_t v209 = vsubq_f32(*(float32x4_t *)(v8 + 208), *(float32x4_t *)(v8 + 192));
                v209.i32[3] = 0;
                float32x4_t v210 = vmaxnmq_f32(v209, v207);
                float32x4_t v211 = vsubq_f32(*(float32x4_t *)(v8 + 32), *(float32x4_t *)(v8 + 16));
                v211.i32[3] = 0;
                float32x4_t v212 = vmaxnmq_f32(v211, v207);
                if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v210, *(float32x2_t *)v210.f32, 1), vmulq_lane_f32(v212, *(float32x2_t *)v212.f32, 1))).u8[0])
                {
                  long long v213 = *(_OWORD *)v205;
                  float32x4_t v214 = *(float32x4_t *)(v205 + 32);
                  long long v252 = *(_OWORD *)(v205 + 16);
                  float32x4_t v253 = v214;
                  long long v251 = v213;
                  uint64_t v254 = *(void *)(v8 + 224);
                  *(void *)(v8 + 224) = 0;
                  long long v255 = *(_OWORD *)(v8 + 232);
                  *(float32x4_t *)(v8 + 232) = v207;
                  ++*(_DWORD *)(v8 + 248);
                  int v256 = 1;
                  long long v215 = *(_OWORD *)(v8 + 272);
                  long long v257 = *(_OWORD *)(v8 + 256);
                  long long v258 = v215;
                  *(float32x4_t *)(v8 + 256) = v207;
                  *(float32x4_t *)(v8 + 272) = v207;
                  ++*(_DWORD *)(v8 + 288);
                  int v259 = 1;
                  long long v260 = *(_OWORD *)(v8 + 296);
                  *(float32x4_t *)(v8 + 296) = v207;
                  long long v261 = *(_OWORD *)(v8 + 312);
                  *(float32x4_t *)(v8 + 312) = v207;
                  uint64_t v263 = *(void *)(v8 + 336);
                  *(void *)(v8 + 336) = 0;
                  ++*(_DWORD *)(v8 + 328);
                  float32x2_t v216 = v206;
                  int v262 = 1;
                  do
                  {
                    float32x4_t v217 = v216[11];
                    v216[21] = v216[10];
                    v216[22] = v217;
                    v216[23] = v216[12];
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v216[24], (uint64_t)&v216[13]);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v216[26].i64[1], (uint64_t)&v216[15].i64[1]);
                    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v216[29], (uint64_t)&v216[18]);
                    float32x4_t v218 = vsubq_f32(v253, (float32x4_t)v252);
                    v218.i32[3] = 0;
                    float32x4_t v219 = vmaxnmq_f32(v218, (float32x4_t)0);
                    float32x4_t v221 = *v216;
                    float32x4_t v220 = v216[1];
                    v216 -= 11;
                    float32x4_t v222 = vsubq_f32(v220, v221);
                    v222.i32[3] = 0;
                    float32x4_t v223 = vmaxnmq_f32(v222, (float32x4_t)0);
                  }
                  while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v219, *(float32x2_t *)v219.f32, 1), vmulq_lane_f32(v223, *(float32x2_t *)v223.f32, 1))).u8[0] & 1) != 0);
                  long long v224 = v251;
                  float32x4_t v225 = v253;
                  v216[22] = (float32x4_t)v252;
                  v216[23] = v225;
                  v216[21] = (float32x4_t)v224;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v216[24], (uint64_t)&v254);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v216[26].i64[1], (uint64_t)&v257 + 8);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v216[29], (uint64_t)&v260 + 8);
                  if (*((void *)&v260 + 1))
                  {
                    if (v263) {
                      (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
                    }
                    uint64_t v263 = 0;
                    long long v261 = 0uLL;
                    *((void *)&v260 + 1) = 0;
                    ++v262;
                  }
                  float32x4_t v207 = 0uLL;
                  if (*((void *)&v257 + 1))
                  {
                    if ((void)v260)
                    {
                      (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
                      float32x4_t v207 = 0uLL;
                    }
                    *(void *)&long long v260 = 0;
                    long long v258 = 0uLL;
                    *((void *)&v257 + 1) = 0;
                    ++v259;
                  }
                  __n128 result = v254;
                  if (v254 && (void)v257)
                  {
                    __n128 result = (*(uint64_t (**)(void))(*(void *)v254 + 40))();
                    float32x4_t v207 = 0uLL;
                  }
                }
                uint64_t v205 = v208 + 176;
                v206 += 11;
                uint64_t v8 = v208;
              }
              while (v208 + 176 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            float v226 = (long long *)a2;
            float32x4_t v134 = 0uLL;
            int64_t v232 = (v11 - 2) >> 1;
            int64_t v135 = v232;
            do
            {
              int64_t v136 = v135;
              if (v232 >= v135)
              {
                uint64_t v137 = (2 * v135) | 1;
                uint64_t v138 = v8 + 176 * v137;
                if (2 * v136 + 2 < (uint64_t)v11)
                {
                  float32x4_t v139 = vsubq_f32(*(float32x4_t *)(v8 + 176 * v137 + 32), *(float32x4_t *)(v8 + 176 * v137 + 16));
                  v139.i32[3] = 0;
                  float32x4_t v140 = vmaxnmq_f32(v139, v134);
                  float32x4_t v141 = vsubq_f32(*(float32x4_t *)(v138 + 208), *(float32x4_t *)(v138 + 192));
                  v141.i32[3] = 0;
                  float32x4_t v142 = vmaxnmq_f32(v141, v134);
                  if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v140, *(float32x2_t *)v140.f32, 1), vmulq_lane_f32(v142, *(float32x2_t *)v142.f32, 1))).u8[0])
                  {
                    v138 += 176;
                    uint64_t v137 = 2 * v136 + 2;
                  }
                }
                float32x4_t v143 = vsubq_f32(*(float32x4_t *)(v138 + 32), *(float32x4_t *)(v138 + 16));
                v143.i32[3] = 0;
                float32x4_t v144 = vmaxnmq_f32(v143, v134);
                float32x4_t v145 = vsubq_f32(*(float32x4_t *)(v8 + 176 * v136 + 32), *(float32x4_t *)(v8 + 176 * v136 + 16));
                v145.i32[3] = 0;
                float32x4_t v146 = vmaxnmq_f32(v145, v134);
                if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v144, *(float32x2_t *)v144.f32, 1), vmulq_lane_f32(v146, *(float32x2_t *)v146.f32, 1))).u8[0] & 1) == 0)
                {
                  uint64_t v147 = v8 + 176 * v136;
                  long long v148 = *(_OWORD *)v147;
                  float32x4_t v149 = *(float32x4_t *)(v147 + 32);
                  long long v252 = *(_OWORD *)(v147 + 16);
                  float32x4_t v253 = v149;
                  long long v251 = v148;
                  uint64_t v254 = *(void *)(v147 + 48);
                  *(void *)(v147 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
                  *(void *)&long long v255 = *(void *)(v147 + 56);
                  *(void *)(v147 + 56) = 0;
                  *((void *)&v255 + 1) = *(void *)(v147 + 64);
                  *(void *)(v147 + 64) = 0;
                  *(void *)&long long v257 = *(void *)(v147 + 80);
                  *(void *)(v147 + 80) = 0;
                  ++*(_DWORD *)(v147 + 72);
                  int v256 = 1;
                  *((void *)&v257 + 1) = *(void *)(v147 + 88);
                  *(void *)(v147 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
                  *(void *)&long long v258 = *(void *)(v147 + 96);
                  *(void *)(v147 + 96) = 0;
                  *((void *)&v258 + 1) = *(void *)(v147 + 104);
                  *(void *)(v147 + 104) = 0;
                  *(void *)&long long v260 = *(void *)(v147 + 120);
                  *(void *)(v147 + 120) = 0;
                  ++*(_DWORD *)(v147 + 112);
                  int v259 = 1;
                  *((void *)&v260 + 1) = *(void *)(v147 + 128);
                  *(void *)(v147 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
                  *(void *)&long long v261 = *(void *)(v147 + 136);
                  *(void *)(v147 + 136) = 0;
                  *((void *)&v261 + 1) = *(void *)(v147 + 144);
                  *(void *)(v147 + 144) = 0;
                  uint64_t v263 = *(void *)(v147 + 160);
                  *(void *)(v147 + 160) = 0;
                  ++*(_DWORD *)(v147 + 152);
                  int v262 = 1;
                  float32x4_t v150 = vsubq_f32(v253, (float32x4_t)v252);
                  v150.i32[3] = 0;
                  float32x4_t v229 = v150;
                  do
                  {
                    uint64_t v151 = v138;
                    long long v152 = *(_OWORD *)v138;
                    long long v153 = *(_OWORD *)(v138 + 32);
                    *(_OWORD *)(v147 + 16) = *(_OWORD *)(v138 + 16);
                    *(_OWORD *)(v147 + 32) = v153;
                    *(_OWORD *)uint64_t v147 = v152;
                    uint64_t v154 = v138 + 48;
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v147 + 48, v138 + 48);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v147 + 88, v151 + 88);
                    re::DynamicArray<re::RigComponentConstraint>::operator=(v147 + 128, v151 + 128);
                    if (v232 < v137) {
                      break;
                    }
                    uint64_t v155 = (2 * v137) | 1;
                    uint64_t v138 = v8 + 176 * v155;
                    if (2 * v137 + 2 < (uint64_t)v11)
                    {
                      float32x4_t v156 = vsubq_f32(*(float32x4_t *)(v8 + 176 * v155 + 32), *(float32x4_t *)(v8 + 176 * v155 + 16));
                      v156.i32[3] = 0;
                      float32x4_t v160 = 0uLL;
                      float32x4_t v157 = vmaxnmq_f32(v156, (float32x4_t)0);
                      float32x4_t v158 = vsubq_f32(*(float32x4_t *)(v138 + 208), *(float32x4_t *)(v138 + 192));
                      v158.i32[3] = 0;
                      float32x4_t v159 = vmaxnmq_f32(v158, (float32x4_t)0);
                      if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v157, *(float32x2_t *)v157.f32, 1), vmulq_lane_f32(v159, *(float32x2_t *)v159.f32, 1))).u8[0])
                      {
                        v138 += 176;
                        uint64_t v155 = 2 * v137 + 2;
                      }
                    }
                    else
                    {
                      float32x4_t v160 = 0uLL;
                    }
                    float32x4_t v161 = vsubq_f32(*(float32x4_t *)(v138 + 32), *(float32x4_t *)(v138 + 16));
                    v161.i32[3] = 0;
                    float32x4_t v162 = vmaxnmq_f32(v161, v160);
                    float32x4_t v163 = vmaxnmq_f32(v229, v160);
                    uint64_t v147 = v151;
                    uint64_t v137 = v155;
                  }
                  while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v162, *(float32x2_t *)v162.f32, 1), vmulq_lane_f32(v163, *(float32x2_t *)v163.f32, 1))).u8[0] & 1) == 0);
                  long long v164 = v251;
                  float32x4_t v165 = v253;
                  *(_OWORD *)(v151 + 16) = v252;
                  *(float32x4_t *)(v151 + 32) = v165;
                  *(_OWORD *)uint64_t v151 = v164;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v154, (uint64_t)&v254);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v151 + 88, (uint64_t)&v257 + 8);
                  re::DynamicArray<re::RigComponentConstraint>::operator=(v151 + 128, (uint64_t)&v260 + 8);
                  if (*((void *)&v260 + 1))
                  {
                    if (v263) {
                      (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
                    }
                    uint64_t v263 = 0;
                    long long v261 = 0uLL;
                    *((void *)&v260 + 1) = 0;
                    ++v262;
                  }
                  float32x4_t v134 = 0uLL;
                  if (*((void *)&v257 + 1))
                  {
                    if ((void)v260)
                    {
                      (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
                      float32x4_t v134 = 0uLL;
                    }
                    *(void *)&long long v260 = 0;
                    long long v258 = 0uLL;
                    *((void *)&v257 + 1) = 0;
                    ++v259;
                  }
                  if (v254 && (void)v257)
                  {
                    (*(void (**)(void))(*(void *)v254 + 40))();
                    float32x4_t v134 = 0uLL;
                  }
                }
              }
              int64_t v135 = v136 - 1;
            }
            while (v136);
            int64_t v166 = v10 / 0xB0uLL;
            uint64_t v167 = v226;
            do
            {
              uint64_t v168 = 0;
              uint64_t v233 = v167;
              long long v236 = *(_OWORD *)(v8 + 16);
              long long v237 = *(_OWORD *)(v8 + 32);
              long long v235 = *(_OWORD *)v8;
              uint64_t v169 = *(void *)(v8 + 56);
              v238[0] = *(void *)(v8 + 48);
              *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
              v238[1] = v169;
              *(void *)(v8 + 56) = 0;
              v238[2] = *(void *)(v8 + 64);
              *(void *)(v8 + 64) = 0;
              uint64_t v170 = *(void *)(v8 + 88);
              uint64_t v240 = *(void *)(v8 + 80);
              *(void *)(v8 + 80) = 0;
              ++*(_DWORD *)(v8 + 72);
              int v239 = 1;
              uint64_t v241 = v170;
              *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
              uint64_t v171 = *(void *)(v8 + 104);
              uint64_t v242 = *(void *)(v8 + 96);
              *(void *)(v8 + 96) = 0;
              uint64_t v243 = v171;
              *(void *)(v8 + 104) = 0;
              uint64_t v172 = *(void *)(v8 + 128);
              uint64_t v245 = *(void *)(v8 + 120);
              *(void *)(v8 + 120) = 0;
              ++*(_DWORD *)(v8 + 112);
              int v244 = 1;
              uint64_t v246 = v172;
              *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
              uint64_t v173 = *(void *)(v8 + 144);
              uint64_t v247 = *(void *)(v8 + 136);
              *(void *)(v8 + 136) = 0;
              uint64_t v248 = v173;
              *(void *)(v8 + 144) = 0;
              uint64_t v250 = *(void *)(v8 + 160);
              *(void *)(v8 + 160) = 0;
              ++*(_DWORD *)(v8 + 152);
              uint64_t v174 = (_OWORD *)v8;
              int v249 = 1;
              do
              {
                uint64_t v175 = v168 + 1;
                __int16 v176 = (float32x4_t *)&v174[11 * v168 + 11];
                uint64_t v177 = (2 * v168) | 1;
                uint64_t v178 = 2 * v168 + 2;
                if (v178 < v166)
                {
                  float32x4_t v179 = vsubq_f32((float32x4_t)v174[11 * v175 + 2], (float32x4_t)v174[11 * v175 + 1]);
                  v179.i32[3] = 0;
                  float32x4_t v180 = vmaxnmq_f32(v179, (float32x4_t)0);
                  float32x4_t v181 = vsubq_f32(v176[13], v176[12]);
                  v181.i32[3] = 0;
                  float32x4_t v182 = vmaxnmq_f32(v181, (float32x4_t)0);
                  if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v180, *(float32x2_t *)v180.f32, 1), vmulq_lane_f32(v182, *(float32x2_t *)v182.f32, 1))).u8[0])
                  {
                    v176 += 11;
                    uint64_t v177 = v178;
                  }
                }
                float32x4_t v183 = *v176;
                float32x4_t v184 = v176[2];
                v174[1] = v176[1];
                v174[2] = v184;
                *uint64_t v174 = v183;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v174 + 3), (uint64_t)&v176[3]);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v174 + 88, (uint64_t)&v176[5].i64[1]);
                re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v174 + 8), (uint64_t)&v176[8]);
                uint64_t v174 = v176;
                uint64_t v168 = v177;
              }
              while (v177 <= (uint64_t)((unint64_t)(v166 - 2) >> 1));
              uint64_t v167 = v233 - 11;
              if (v176 == (float32x4_t *)(v233 - 11))
              {
                v176[1] = (float32x4_t)v236;
                v176[2] = (float32x4_t)v237;
                *__int16 v176 = (float32x4_t)v235;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v176[3], (uint64_t)v238);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v176[5].i64[1], (uint64_t)&v241);
                re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v176[8], (uint64_t)&v246);
              }
              else
              {
                long long v185 = *v167;
                float32x4_t v186 = (float32x4_t)*(v233 - 9);
                v176[1] = (float32x4_t)*(v233 - 10);
                v176[2] = v186;
                *__int16 v176 = (float32x4_t)v185;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v176[3], (uint64_t)(v233 - 8));
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v176[5].i64[1], (uint64_t)v233 - 88);
                re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v176[8], (uint64_t)(v233 - 3));
                *uint64_t v167 = v235;
                *(v233 - 10) = v236;
                *(v233 - 9) = v237;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v233 - 8), (uint64_t)v238);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v233 - 88, (uint64_t)&v241);
                re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v233 - 3), (uint64_t)&v246);
                uint64_t v187 = (uint64_t)&v176[11] - v8;
                if (v187 >= 177)
                {
                  unint64_t v188 = (v187 / 0xB0uLL - 2) >> 1;
                  float32x4_t v189 = vsubq_f32(*(float32x4_t *)(v8 + 176 * v188 + 32), *(float32x4_t *)(v8 + 176 * v188 + 16));
                  v189.i32[3] = 0;
                  float32x4_t v190 = vmaxnmq_f32(v189, (float32x4_t)0);
                  float32x4_t v191 = vsubq_f32(v176[2], v176[1]);
                  v191.i32[3] = 0;
                  float32x4_t v192 = vmaxnmq_f32(v191, (float32x4_t)0);
                  if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v190, *(float32x2_t *)v190.f32, 1), vmulq_lane_f32(v192, *(float32x2_t *)v192.f32, 1))).u8[0])
                  {
                    long long v193 = (__int128)*v176;
                    float32x4_t v194 = v176[2];
                    long long v252 = (__int128)v176[1];
                    float32x4_t v253 = v194;
                    long long v251 = v193;
                    uint64_t v254 = v176[3].i64[0];
                    v176[3].i64[0] = 0;
                    *(void *)&long long v255 = v176[3].i64[1];
                    v176[3].i64[1] = 0;
                    *((void *)&v255 + 1) = v176[4].i64[0];
                    v176[4].i64[0] = 0;
                    *(void *)&long long v257 = v176[5].i64[0];
                    v176[5].i64[0] = 0;
                    ++v176[4].i32[2];
                    int v256 = 1;
                    *((void *)&v257 + 1) = v176[5].i64[1];
                    v176[5].i64[1] = 0;
                    *(void *)&long long v258 = v176[6].i64[0];
                    v176[6].i64[0] = 0;
                    *((void *)&v258 + 1) = v176[6].i64[1];
                    v176[6].i64[1] = 0;
                    *(void *)&long long v260 = v176[7].i64[1];
                    v176[7].i64[1] = 0;
                    ++v176[7].i32[0];
                    int v259 = 1;
                    *((void *)&v260 + 1) = v176[8].i64[0];
                    v176[8].i64[0] = 0;
                    *(void *)&long long v261 = v176[8].i64[1];
                    v176[8].i64[1] = 0;
                    *((void *)&v261 + 1) = v176[9].i64[0];
                    v176[9].i64[0] = 0;
                    uint64_t v263 = v176[10].i64[0];
                    v176[10].i64[0] = 0;
                    ++v176[9].i32[2];
                    int v262 = 1;
                    float32x4_t v195 = vsubq_f32(v253, (float32x4_t)v252);
                    v195.i32[3] = 0;
                    float32x4_t v234 = v195;
                    do
                    {
                      int v196 = v176;
                      __int16 v176 = (float32x4_t *)(v8 + 176 * v188);
                      float32x4_t v197 = *v176;
                      float32x4_t v198 = v176[2];
                      v196[1] = v176[1];
                      v196[2] = v198;
                      *int v196 = v197;
                      re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v196[3], (uint64_t)&v176[3]);
                      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v196[5].i64[1], (uint64_t)&v176[5].i64[1]);
                      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v196[8], (uint64_t)&v176[8]);
                      if (!v188) {
                        break;
                      }
                      unint64_t v188 = (v188 - 1) >> 1;
                      float32x4_t v199 = vsubq_f32(*(float32x4_t *)(v8 + 176 * v188 + 32), *(float32x4_t *)(v8 + 176 * v188 + 16));
                      v199.i32[3] = 0;
                      float32x4_t v200 = vmaxnmq_f32(v199, (float32x4_t)0);
                      float32x4_t v201 = vmaxnmq_f32(v234, (float32x4_t)0);
                    }
                    while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v200, *(float32x2_t *)v200.f32, 1), vmulq_lane_f32(v201, *(float32x2_t *)v201.f32, 1))).u8[0] & 1) != 0);
                    long long v202 = v251;
                    float32x4_t v203 = v253;
                    v176[1] = (float32x4_t)v252;
                    v176[2] = v203;
                    *__int16 v176 = (float32x4_t)v202;
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v176[3], (uint64_t)&v254);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v176[5].i64[1], (uint64_t)&v257 + 8);
                    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v176[8], (uint64_t)&v260 + 8);
                    if (*((void *)&v260 + 1))
                    {
                      if (v263) {
                        (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
                      }
                      uint64_t v263 = 0;
                      long long v261 = 0uLL;
                      *((void *)&v260 + 1) = 0;
                      ++v262;
                    }
                    if (*((void *)&v257 + 1))
                    {
                      if ((void)v260) {
                        (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
                      }
                      *(void *)&long long v260 = 0;
                      long long v258 = 0uLL;
                      *((void *)&v257 + 1) = 0;
                      ++v259;
                    }
                    if (v254 && (void)v257) {
                      (*(void (**)(void))(*(void *)v254 + 40))();
                    }
                  }
                }
              }
              if (v246)
              {
                if (v250) {
                  (*(void (**)(void))(*(void *)v246 + 40))();
                }
                uint64_t v250 = 0;
                uint64_t v247 = 0;
                uint64_t v248 = 0;
                uint64_t v246 = 0;
                ++v249;
              }
              if (v241)
              {
                if (v245) {
                  (*(void (**)(void))(*(void *)v241 + 40))();
                }
                uint64_t v245 = 0;
                uint64_t v242 = 0;
                uint64_t v243 = 0;
                uint64_t v241 = 0;
                ++v244;
              }
              __n128 result = v238[0];
              if (v238[0] && v240) {
                __n128 result = (*(uint64_t (**)(void))(*(void *)v238[0] + 40))();
              }
            }
            while (v166-- > 2);
          }
          return result;
        }
        unint64_t v12 = v11 >> 1;
        long long v13 = (long long *)(v8 + 176 * (v11 >> 1));
        if ((unint64_t)v10 >= 0x5801)
        {
          uint64_t v14 = 176 * v12;
          uint64_t v15 = 176 * v12 + v8 - 176;
        }
        else
        {
        }
        --a3;
        if (a4) {
          break;
        }
        float32x4_t v16 = vsubq_f32(*(float32x4_t *)(v8 - 144), *(float32x4_t *)(v8 - 160));
        v16.i32[3] = 0;
        float32x4_t v17 = vmaxnmq_f32(v16, (float32x4_t)0);
        float32x4_t v18 = vsubq_f32(*(float32x4_t *)(v8 + 32), *(float32x4_t *)(v8 + 16));
        v18.i32[3] = 0;
        float32x4_t v19 = vmaxnmq_f32(v18, (float32x4_t)0);
        if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v17, *(float32x2_t *)v17.f32, 1), vmulq_lane_f32(v19, *(float32x2_t *)v19.f32, 1))).u8[0])break; {
        long long v55 = *(_OWORD *)v8;
        }
        float32x4_t v56 = *(float32x4_t *)(v8 + 16);
        float32x4_t v57 = *(float32x4_t *)(v8 + 32);
        uint64_t v254 = *(void *)(v8 + 48);
        *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        uint64_t v58 = *(void *)(v8 + 64);
        *(void *)&long long v255 = *(void *)(v8 + 56);
        *(void *)(v8 + 56) = 0;
        *((void *)&v255 + 1) = v58;
        *(void *)(v8 + 64) = 0;
        *(void *)&long long v257 = *(void *)(v8 + 80);
        *(void *)(v8 + 80) = 0;
        ++*(_DWORD *)(v8 + 72);
        *((void *)&v257 + 1) = *(void *)(v8 + 88);
        *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
        uint64_t v59 = *(void *)(v8 + 104);
        *(void *)&long long v258 = *(void *)(v8 + 96);
        *(void *)(v8 + 96) = 0;
        *((void *)&v258 + 1) = v59;
        *(void *)(v8 + 104) = 0;
        *(void *)&long long v260 = *(void *)(v8 + 120);
        *(void *)(v8 + 120) = 0;
        ++*(_DWORD *)(v8 + 112);
        *((void *)&v260 + 1) = *(void *)(v8 + 128);
        *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
        uint64_t v60 = *(void *)(v8 + 144);
        *(void *)&long long v261 = *(void *)(v8 + 136);
        long long v252 = (__int128)v56;
        float32x4_t v253 = v57;
        long long v251 = v55;
        int v256 = 1;
        int v259 = 1;
        *(void *)(v8 + 136) = 0;
        *((void *)&v261 + 1) = v60;
        *(void *)(v8 + 144) = 0;
        uint64_t v263 = *(void *)(v8 + 160);
        *(void *)(v8 + 160) = 0;
        ++*(_DWORD *)(v8 + 152);
        int v262 = 1;
        float32x4_t v61 = vsubq_f32(v253, (float32x4_t)v252);
        v61.i32[3] = 0;
        float32x4_t v62 = vmaxnmq_f32(v61, (float32x4_t)0);
        float32x4_t v63 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
        v63.i32[3] = 0;
        float32x4_t v64 = vmaxnmq_f32(v63, (float32x4_t)0);
        float32x4_t v65 = vmulq_lane_f32(v62, *(float32x2_t *)v62.f32, 1);
        if (vmovn_s32(vcgtq_f32(v65, vmulq_lane_f32(v64, *(float32x2_t *)v64.f32, 1))).u8[0])
        {
          int v66 = (float32x4_t *)v8;
          do
          {
            uint64_t v9 = (long long *)&v66[11];
            float32x4_t v67 = vsubq_f32(v66[13], v66[12]);
            v67.i32[3] = 0;
            float32x4_t v68 = vmaxnmq_f32(v67, (float32x4_t)0);
            v66 += 11;
          }
          while ((vmovn_s32(vcgtq_f32(v65, vmulq_lane_f32(v68, *(float32x2_t *)v68.f32, 1))).u8[0] & 1) == 0);
        }
        else
        {
          unsigned __int8 v69 = (float32x4_t *)(v8 + 176);
          do
          {
            uint64_t v9 = (long long *)v69;
            if ((unint64_t)v69 >= a2) {
              break;
            }
            float32x4_t v70 = vsubq_f32(v69[2], v69[1]);
            v70.i32[3] = 0;
            float32x4_t v71 = vmaxnmq_f32(v70, (float32x4_t)0);
            v69 += 11;
          }
          while ((vmovn_s32(vcgtq_f32(v65, vmulq_lane_f32(v71, *(float32x2_t *)v71.f32, 1))).u8[0] & 1) == 0);
        }
        unsigned int v72 = (long long *)a2;
        if ((unint64_t)v9 < a2)
        {
          unint64_t v73 = a2;
          do
          {
            unsigned int v72 = (long long *)(v73 - 176);
            float32x4_t v74 = vsubq_f32(*(float32x4_t *)(v73 - 144), *(float32x4_t *)(v73 - 160));
            v74.i32[3] = 0;
            float32x4_t v75 = vmaxnmq_f32(v74, (float32x4_t)0);
            v73 -= 176;
          }
          while ((vmovn_s32(vcgtq_f32(v65, vmulq_lane_f32(v75, *(float32x2_t *)v75.f32, 1))).u8[0] & 1) != 0);
        }
        if (v9 < v72)
        {
          float32x4_t v231 = v65;
          do
          {
            do
            {
              float32x4_t v77 = (float32x4_t)v9[12];
              float32x4_t v76 = (float32x4_t)v9[13];
              v9 += 11;
              float32x4_t v78 = vsubq_f32(v76, v77);
              v78.i32[3] = 0;
              float32x4_t v79 = vmaxnmq_f32(v78, (float32x4_t)0);
            }
            while ((vmovn_s32(vcgtq_f32(v231, vmulq_lane_f32(v79, *(float32x2_t *)v79.f32, 1))).u8[0] & 1) == 0);
            do
            {
              float32x4_t v81 = (float32x4_t)*(v72 - 10);
              float32x4_t v80 = (float32x4_t)*(v72 - 9);
              v72 -= 11;
              float32x4_t v82 = vsubq_f32(v80, v81);
              v82.i32[3] = 0;
              float32x4_t v83 = vmaxnmq_f32(v82, (float32x4_t)0);
            }
            while ((vmovn_s32(vcgtq_f32(v231, vmulq_lane_f32(v83, *(float32x2_t *)v83.f32, 1))).u8[0] & 1) != 0);
          }
          while (v9 < v72);
        }
        long long v84 = v9 - 11;
        if (v9 - 11 != (long long *)v8)
        {
          long long v85 = *v84;
          long long v86 = *(v9 - 9);
          *(_OWORD *)(v8 + 16) = *(v9 - 10);
          *(_OWORD *)(v8 + 32) = v86;
          *(_OWORD *)uint64_t v8 = v85;
          re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v8 + 48, (uint64_t)(v9 - 8));
          re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v8 + 88, (uint64_t)v9 - 88);
          re::DynamicArray<re::RigComponentConstraint>::operator=(v8 + 128, (uint64_t)(v9 - 3));
        }
        long long v87 = v251;
        float32x4_t v88 = v253;
        *(v9 - 10) = v252;
        *(v9 - 9) = (__int128)v88;
        *long long v84 = v87;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v9 - 8), (uint64_t)&v254);
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v9 - 88, (uint64_t)&v257 + 8);
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v9 - 3), (uint64_t)&v260 + 8);
        if (*((void *)&v260 + 1))
        {
          if (v263) {
            (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
          }
          uint64_t v263 = 0;
          long long v261 = 0uLL;
          *((void *)&v260 + 1) = 0;
          ++v262;
        }
        if (*((void *)&v257 + 1))
        {
          if ((void)v260) {
            (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
          }
          *(void *)&long long v260 = 0;
          long long v258 = 0uLL;
          *((void *)&v257 + 1) = 0;
          ++v259;
        }
        __n128 result = v254;
        if (v254 && (void)v257) {
          __n128 result = (*(uint64_t (**)(void))(*(void *)v254 + 40))();
        }
LABEL_44:
        a4 = 0;
      }
      uint64_t v20 = 0;
      long long v21 = *(_OWORD *)v8;
      float32x4_t v22 = *(float32x4_t *)(v8 + 16);
      float32x4_t v23 = *(float32x4_t *)(v8 + 32);
      uint64_t v254 = *(void *)(v8 + 48);
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      uint64_t v24 = *(void *)(v8 + 64);
      *(void *)&long long v255 = *(void *)(v8 + 56);
      *(void *)(v8 + 56) = 0;
      *((void *)&v255 + 1) = v24;
      *(void *)(v8 + 64) = 0;
      *(void *)&long long v257 = *(void *)(v8 + 80);
      *(void *)(v8 + 80) = 0;
      ++*(_DWORD *)(v8 + 72);
      *((void *)&v257 + 1) = *(void *)(v8 + 88);
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
      uint64_t v25 = *(void *)(v8 + 104);
      *(void *)&long long v258 = *(void *)(v8 + 96);
      *(void *)(v8 + 96) = 0;
      *((void *)&v258 + 1) = v25;
      *(void *)(v8 + 104) = 0;
      *(void *)&long long v260 = *(void *)(v8 + 120);
      *(void *)(v8 + 120) = 0;
      ++*(_DWORD *)(v8 + 112);
      *((void *)&v260 + 1) = *(void *)(v8 + 128);
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
      uint64_t v26 = *(void *)(v8 + 144);
      *(void *)&long long v261 = *(void *)(v8 + 136);
      *(void *)(v8 + 136) = 0;
      *((void *)&v261 + 1) = v26;
      *(void *)(v8 + 144) = 0;
      uint64_t v263 = *(void *)(v8 + 160);
      ++*(_DWORD *)(v8 + 152);
      long long v252 = (__int128)v22;
      float32x4_t v253 = v23;
      long long v251 = v21;
      int v256 = 1;
      int v259 = 1;
      *(void *)(v8 + 160) = 0;
      float32x4_t v27 = vsubq_f32(v253, (float32x4_t)v252);
      v27.i32[3] = 0;
      float32x4_t v28 = vmaxnmq_f32(v27, (float32x4_t)0);
      float32x4_t v29 = vmulq_lane_f32(v28, *(float32x2_t *)v28.f32, 1);
      int v262 = 1;
      do
      {
        float32x4_t v30 = vsubq_f32(*(float32x4_t *)(v8 + v20 + 208), *(float32x4_t *)(v8 + v20 + 192));
        v30.i32[3] = 0;
        float32x4_t v31 = vmaxnmq_f32(v30, (float32x4_t)0);
        v20 += 176;
      }
      while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v31, *(float32x2_t *)v31.f32, 1), v29)).u8[0] & 1) != 0);
      long long v32 = (long long *)(v8 + v20);
      unint64_t v33 = a2;
      if (v20 == 176)
      {
        unint64_t v37 = a2;
        while ((unint64_t)v32 < v37)
        {
          unint64_t v34 = (long long *)(v37 - 176);
          float32x4_t v38 = vsubq_f32(*(float32x4_t *)(v37 - 144), *(float32x4_t *)(v37 - 160));
          v38.i32[3] = 0;
          float32x4_t v39 = vmaxnmq_f32(v38, (float32x4_t)0);
          v37 -= 176;
          if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v39, *(float32x2_t *)v39.f32, 1), v29)).u8[0]) {
            goto LABEL_21;
          }
        }
        unint64_t v34 = (long long *)v37;
      }
      else
      {
        do
        {
          unint64_t v34 = (long long *)(v33 - 176);
          float32x4_t v35 = vsubq_f32(*(float32x4_t *)(v33 - 144), *(float32x4_t *)(v33 - 160));
          v35.i32[3] = 0;
          float32x4_t v36 = vmaxnmq_f32(v35, (float32x4_t)0);
          v33 -= 176;
        }
        while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v36.f32, 1), v29)).u8[0] & 1) == 0);
      }
LABEL_21:
      uint64_t v9 = v32;
      if (v32 < v34)
      {
        BOOL v40 = v34;
        float32x4_t v230 = v29;
        do
        {
          do
          {
            float32x4_t v42 = (float32x4_t)v9[12];
            float32x4_t v41 = (float32x4_t)v9[13];
            v9 += 11;
            float32x4_t v43 = vsubq_f32(v41, v42);
            v43.i32[3] = 0;
            float32x4_t v44 = vmaxnmq_f32(v43, (float32x4_t)0);
          }
          while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v44, *(float32x2_t *)v44.f32, 1), v230)).u8[0] & 1) != 0);
          do
          {
            float32x4_t v46 = (float32x4_t)*(v40 - 10);
            float32x4_t v45 = (float32x4_t)*(v40 - 9);
            v40 -= 11;
            float32x4_t v47 = vsubq_f32(v45, v46);
            v47.i32[3] = 0;
            float32x4_t v48 = vmaxnmq_f32(v47, (float32x4_t)0);
          }
          while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v48, *(float32x2_t *)v48.f32, 1), v230)).u8[0] & 1) == 0);
        }
        while (v9 < v40);
      }
      uint64_t v49 = v9 - 11;
      if (v9 - 11 != (long long *)v8)
      {
        long long v50 = *v49;
        long long v51 = *(v9 - 9);
        *(_OWORD *)(v8 + 16) = *(v9 - 10);
        *(_OWORD *)(v8 + 32) = v51;
        *(_OWORD *)uint64_t v8 = v50;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v8 + 48, (uint64_t)(v9 - 8));
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v8 + 88, (uint64_t)v9 - 88);
        re::DynamicArray<re::RigComponentConstraint>::operator=(v8 + 128, (uint64_t)(v9 - 3));
      }
      long long v52 = v251;
      float32x4_t v53 = v253;
      *(v9 - 10) = v252;
      *(v9 - 9) = (__int128)v53;
      *uint64_t v49 = v52;
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v9 - 8), (uint64_t)&v254);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v9 - 88, (uint64_t)&v257 + 8);
      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v9 - 3), (uint64_t)&v260 + 8);
      if (*((void *)&v260 + 1))
      {
        if (v263) {
          (*(void (**)(void))(**((void **)&v260 + 1) + 40))();
        }
        uint64_t v263 = 0;
        long long v261 = 0uLL;
        *((void *)&v260 + 1) = 0;
        ++v262;
      }
      if (*((void *)&v257 + 1))
      {
        if ((void)v260) {
          (*(void (**)(void))(**((void **)&v257 + 1) + 40))();
        }
        *(void *)&long long v260 = 0;
        long long v258 = 0uLL;
        *((void *)&v257 + 1) = 0;
        ++v259;
      }
      if (v254 && (void)v257) {
        (*(void (**)(void))(*(void *)v254 + 40))();
      }
      if (v32 < v34)
      {
LABEL_43:
        goto LABEL_44;
      }
      if (result) {
        break;
      }
      if (!v54) {
        goto LABEL_43;
      }
    }
    a2 = (unint64_t)(v9 - 11);
    if (!v54) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::anonymous namespace'::PiecewiseBezierCurve *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (float32x4_t *)result;
  float32x4_t v6 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
  v6.i32[3] = 0;
  float32x4_t v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(result + 32), *(float32x4_t *)(result + 16));
  v8.i32[3] = 0;
  float32x4_t v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  float32x4_t v10 = vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1);
  unsigned __int8 v11 = vmovn_s32(vcgtq_f32(v10, vmulq_lane_f32(v9, *(float32x2_t *)v9.f32, 1))).u8[0];
  float32x4_t v12 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
  v12.i32[3] = 0;
  float32x4_t v13 = vmaxnmq_f32(v12, (float32x4_t)0);
  unsigned __int8 v14 = vmovn_s32(vcgtq_f32(vmulq_lane_f32(v13, *(float32x2_t *)v13.f32, 1), v10)).u8[0];
  if (v11)
  {
    if ((v14 & 1) == 0)
    {
      float32x4_t v15 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
      v15.i32[3] = 0;
      float32x4_t v16 = vmaxnmq_f32(v15, (float32x4_t)0);
      float32x4_t v17 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
      v17.i32[3] = 0;
      float32x4_t v18 = vmaxnmq_f32(v17, (float32x4_t)0);
      if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v16.f32, 1), vmulq_lane_f32(v18, *(float32x2_t *)v18.f32, 1))).u8[0] & 1) == 0)return result; {
      __n128 result = a2;
      }
    }
    float32x4_t v19 = (long long *)a3;
  }
  else
  {
    if ((v14 & 1) == 0) {
      return result;
    }
    float32x4_t v20 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
    v20.i32[3] = 0;
    float32x4_t v21 = vmaxnmq_f32(v20, (float32x4_t)0);
    float32x4_t v22 = vsubq_f32(v5[2], v5[1]);
    v22.i32[3] = 0;
    float32x4_t v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v21.f32, 1), vmulq_lane_f32(v23, *(float32x2_t *)v23.f32, 1))).u8[0] & 1) == 0) {
      return result;
    }
    __n128 result = (uint64_t)v5;
    float32x4_t v19 = (long long *)a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::anonymous namespace'::PiecewiseBezierCurve *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = 1;
  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 4))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      float32x4_t v5 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
      v5.i32[3] = 0;
      float32x4_t v6 = vmaxnmq_f32(v5, (float32x4_t)0);
      float32x4_t v7 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
      v7.i32[3] = 0;
      float32x4_t v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v6, *(float32x2_t *)v6.f32, 1), vmulq_lane_f32(v8, *(float32x2_t *)v8.f32, 1))).u8[0]) {
      return v4;
      }
    case 3:
      return v4;
    case 4:
      return v4;
    case 5:
      float32x4_t v28 = vsubq_f32(*(float32x4_t *)(v2 - 144), *(float32x4_t *)(v2 - 160));
      v28.i32[3] = 0;
      float32x4_t v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      float32x4_t v30 = vsubq_f32(*(float32x4_t *)(a1 + 560), *(float32x4_t *)(a1 + 544));
      v30.i32[3] = 0;
      float32x4_t v31 = vmaxnmq_f32(v30, (float32x4_t)0);
      if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v29, *(float32x2_t *)v29.f32, 1), vmulq_lane_f32(v31, *(float32x2_t *)v31.f32, 1))).u8[0])
      {
        float32x4_t v32 = vsubq_f32(*(float32x4_t *)(a1 + 560), *(float32x4_t *)(a1 + 544));
        v32.i32[3] = 0;
        float32x4_t v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        float32x4_t v34 = vsubq_f32(*(float32x4_t *)(a1 + 384), *(float32x4_t *)(a1 + 368));
        v34.i32[3] = 0;
        float32x4_t v35 = vmaxnmq_f32(v34, (float32x4_t)0);
        if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v33, *(float32x2_t *)v33.f32, 1), vmulq_lane_f32(v35, *(float32x2_t *)v35.f32, 1))).u8[0])
        {
          float32x4_t v36 = vsubq_f32(*(float32x4_t *)(a1 + 384), *(float32x4_t *)(a1 + 368));
          v36.i32[3] = 0;
          float32x4_t v37 = vmaxnmq_f32(v36, (float32x4_t)0);
          float32x4_t v38 = vsubq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a1 + 192));
          v38.i32[3] = 0;
          float32x4_t v39 = vmaxnmq_f32(v38, (float32x4_t)0);
          if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v37, *(float32x2_t *)v37.f32, 1), vmulq_lane_f32(v39, *(float32x2_t *)v39.f32, 1))).u8[0])
          {
            float32x4_t v40 = vsubq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a1 + 192));
            v40.i32[3] = 0;
            float32x4_t v41 = vmaxnmq_f32(v40, (float32x4_t)0);
            float32x4_t v42 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
            v42.i32[3] = 0;
            float32x4_t v43 = vmaxnmq_f32(v42, (float32x4_t)0);
          }
        }
      }
      return 1;
    default:
      float32x4_t v9 = (float32x4_t *)(a1 + 352);
      uint64_t v10 = a1 + 528;
      uint64_t v4 = 1;
      if (a1 + 528 == v2) {
        return v4;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v45 = v2;
      float32x4_t v13 = 0uLL;
      break;
  }
  while (1)
  {
    float32x4_t v14 = vsubq_f32(*(float32x4_t *)(v10 + 32), *(float32x4_t *)(v10 + 16));
    v14.i32[3] = 0;
    float32x4_t v15 = vmaxnmq_f32(v14, v13);
    float32x4_t v16 = vsubq_f32(v9[2], v9[1]);
    v16.i32[3] = 0;
    float32x4_t v17 = vmaxnmq_f32(v16, v13);
    if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v15.f32, 1), vmulq_lane_f32(v17, *(float32x2_t *)v17.f32, 1))).u8[0])
    {
      float32x4_t v46 = *(float32x4_t *)v10;
      float32x4_t v47 = *(float32x4_t *)(v10 + 16);
      float32x4_t v48 = *(float32x4_t *)(v10 + 32);
      uint64_t v49 = *(void *)(v10 + 48);
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      long long v50 = *(_OWORD *)(v10 + 56);
      *(float32x4_t *)(v10 + 56) = v13;
      ++*(_DWORD *)(v10 + 72);
      int v51 = 1;
      long long v18 = *(_OWORD *)(v10 + 96);
      long long v52 = *(_OWORD *)(v10 + 80);
      long long v53 = v18;
      *(float32x4_t *)(v10 + 80) = v13;
      *(float32x4_t *)(v10 + 96) = v13;
      ++*(_DWORD *)(v10 + 112);
      int v54 = 1;
      long long v55 = *(_OWORD *)(v10 + 120);
      *(float32x4_t *)(v10 + 120) = v13;
      long long v56 = *(_OWORD *)(v10 + 136);
      *(float32x4_t *)(v10 + 136) = v13;
      uint64_t v58 = *(void *)(v10 + 160);
      *(void *)(v10 + 160) = 0;
      ++*(_DWORD *)(v10 + 152);
      uint64_t v19 = v11;
      int v57 = 1;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 368);
        *(_OWORD *)(v20 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + v19 + 352);
        *(_OWORD *)(v20 + 544) = v21;
        *(_OWORD *)(v20 + 560) = *(_OWORD *)(a1 + v19 + 384);
        uint64_t v22 = a1 + v19 + 400;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + v19 + 576, v22);
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v20 + 616, v20 + 440);
        re::DynamicArray<re::RigComponentConstraint>::operator=(v20 + 656, v20 + 480);
        if (v19 == -352) {
          break;
        }
        float32x4_t v23 = vsubq_f32(v48, v47);
        v23.i32[3] = 0;
        float32x4_t v24 = vmaxnmq_f32(v23, (float32x4_t)0);
        float32x4_t v25 = vsubq_f32(*(float32x4_t *)(v20 + 208), *(float32x4_t *)(v20 + 192));
        v25.i32[3] = 0;
        float32x4_t v26 = vmaxnmq_f32(v25, (float32x4_t)0);
        v19 -= 176;
        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v24, *(float32x2_t *)v24.f32, 1), vmulq_lane_f32(v26, *(float32x2_t *)v26.f32, 1))).u8[0] & 1) == 0)
        {
          float32x4_t v27 = (_OWORD *)(a1 + v19 + 528);
          goto LABEL_12;
        }
      }
      float32x4_t v27 = (_OWORD *)a1;
LABEL_12:
      *float32x4_t v27 = v46;
      v27[1] = v47;
      v27[2] = v48;
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v22, (uint64_t)&v49);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v20 + 440, (uint64_t)&v52 + 8);
      re::DynamicArray<re::RigComponentConstraint>::operator=(v20 + 480, (uint64_t)&v55 + 8);
      uint64_t v2 = v45;
      if (*((void *)&v55 + 1))
      {
        if (v58) {
          (*(void (**)(void))(**((void **)&v55 + 1) + 40))();
        }
        uint64_t v58 = 0;
        long long v56 = 0uLL;
        *((void *)&v55 + 1) = 0;
        ++v57;
      }
      float32x4_t v13 = 0uLL;
      if (*((void *)&v52 + 1))
      {
        if ((void)v55)
        {
          (*(void (**)(void))(**((void **)&v52 + 1) + 40))();
          float32x4_t v13 = 0uLL;
        }
        *(void *)&long long v55 = 0;
        long long v53 = 0uLL;
        *((void *)&v52 + 1) = 0;
        ++v54;
      }
      if (v49 && (void)v52)
      {
        (*(void (**)(void))(*(void *)v49 + 40))();
        float32x4_t v13 = 0uLL;
      }
      if (++v12 == 8) {
        return v10 + 176 == v45;
      }
    }
    float32x4_t v9 = (float32x4_t *)v10;
    v11 += 176;
    v10 += 176;
    if (v10 == v2) {
      return 1;
    }
  }
}

uint64_t std::iter_swap[abi:nn180100]<re::anonymous namespace'::PiecewiseBezierCurve *,re::anonymous namespace'::PiecewiseBezierCurve *>(long long *a1, long long *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v10 = *a1;
  long long v11 = a1[1];
  long long v12 = a1[2];
  uint64_t v13 = *((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  long long v14 = *(long long *)((char *)a1 + 56);
  *(long long *)((char *)a1 + 56) = 0u;
  ++*((_DWORD *)a1 + 18);
  int v15 = 1;
  uint64_t v3 = (uint64_t)a1 + 88;
  long long v4 = a1[6];
  long long v16 = a1[5];
  long long v17 = v4;
  a1[5] = 0u;
  a1[6] = 0u;
  ++*((_DWORD *)a1 + 28);
  int v18 = 1;
  uint64_t v5 = (uint64_t)(a1 + 8);
  long long v19 = *(long long *)((char *)a1 + 120);
  *(long long *)((char *)a1 + 120) = 0u;
  long long v20 = *(long long *)((char *)a1 + 136);
  *(long long *)((char *)a1 + 136) = 0u;
  uint64_t v22 = *((void *)a1 + 20);
  *((void *)a1 + 20) = 0;
  ++*((_DWORD *)a1 + 38);
  int v21 = 1;
  long long v6 = *a2;
  long long v7 = a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  uint64_t v8 = (uint64_t)(a2 + 3);
  *a1 = v6;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v3, (uint64_t)a2 + 88);
  re::DynamicArray<re::RigComponentConstraint>::operator=(v5, (uint64_t)(a2 + 8));
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v8, (uint64_t)&v13);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)a2 + 88, (uint64_t)&v16 + 8);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 8), (uint64_t)&v19 + 8);
  if (*((void *)&v19 + 1))
  {
    if (v22) {
      (*(void (**)(void))(**((void **)&v19 + 1) + 40))();
    }
    uint64_t v22 = 0;
    long long v20 = 0uLL;
    *((void *)&v19 + 1) = 0;
    ++v21;
  }
  if (*((void *)&v16 + 1))
  {
    if ((void)v19) {
      (*(void (**)(void))(**((void **)&v16 + 1) + 40))();
    }
    *(void *)&long long v19 = 0;
    long long v17 = 0uLL;
    *((void *)&v16 + 1) = 0;
    ++v18;
  }
  uint64_t result = v13;
  if (v13)
  {
    if ((void)v16) {
      return (*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::anonymous namespace'::PiecewiseBezierCurve *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float32x4_t v9 = vsubq_f32(*(float32x4_t *)(a4 + 32), *(float32x4_t *)(a4 + 16));
  v9.i32[3] = 0;
  float32x4_t v10 = vmaxnmq_f32(v9, (float32x4_t)0);
  float32x4_t v11 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
  v11.i32[3] = 0;
  float32x4_t v12 = vmaxnmq_f32(v11, (float32x4_t)0);
  if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v10, *(float32x2_t *)v10.f32, 1), vmulq_lane_f32(v12, *(float32x2_t *)v12.f32, 1))).u8[0])
  {
    float32x4_t v13 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
    v13.i32[3] = 0;
    float32x4_t v14 = vmaxnmq_f32(v13, (float32x4_t)0);
    float32x4_t v15 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
    v15.i32[3] = 0;
    float32x4_t v16 = vmaxnmq_f32(v15, (float32x4_t)0);
    if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v14, *(float32x2_t *)v14.f32, 1), vmulq_lane_f32(v16, *(float32x2_t *)v16.f32, 1))).u8[0])
    {
      float32x4_t v17 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
      v17.i32[3] = 0;
      float32x4_t v18 = vmaxnmq_f32(v17, (float32x4_t)0);
      float32x4_t v19 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
      v19.i32[3] = 0;
      float32x4_t v20 = vmaxnmq_f32(v19, (float32x4_t)0);
      if (vmovn_s32(vcgtq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v18.f32, 1), vmulq_lane_f32(v20, *(float32x2_t *)v20.f32, 1))).u8[0])
      {
      }
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::isPointInsidePolygon(simd_float2 *a1, simd_float2 **a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = (v3 - 1);
  if (v3) {
    BOOL v5 = v3 == 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = 12;
    while (1)
    {
      unint64_t v11 = (unint64_t)a2[1];
      if (v11 <= v8) {
        break;
      }
      unint64_t v2 = v8 + 1;
      if (v11 <= v8 + 1) {
        goto LABEL_28;
      }
      float32x4_t v12 = (float32x2_t *)*a2;
      float32x4_t v13 = &(*a2)[v8];
      float32x4_t v14 = (float *)((char *)*a2 + v10);
      float v15 = a1->f32[1];
      float v16 = *v14;
      if (*(v14 - 2) <= v15)
      {
        if (v16 > v15 && _simd_orient_pf2((simd_float2)v12[v8], v13[1], *a1) > 0.0) {
          ++v9;
        }
      }
      else if (v16 <= v15)
      {
        unsigned int v9 = (__PAIR64__(v9, 0.0) - COERCE_UNSIGNED_INT(_simd_orient_pf2(v13[1], (simd_float2)v12[v8], *a1))) >> 32;
      }
      v10 += 8;
      unint64_t v8 = v2;
      if (v4 == v2)
      {
        float32x4_t v17 = a2[1];
        if (v17)
        {
          float32x2_t v18 = (float32x2_t)**a2;
          uint32x2_t v19 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32((float32x2_t)(*a2)[(void)v17 - 1], v18));
          if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) == 0) {
            return v9 != 0;
          }
          if ((unint64_t)v17 > v4)
          {
            int v21 = &(*a2)[v4];
            float v22 = a1->f32[1];
            if (v21->f32[1] <= v22)
            {
              if (v18.f32[1] > v22 && _simd_orient_pf2(*v21, **a2, *a1) > 0.0) {
                ++v9;
              }
            }
            else if (v18.f32[1] <= v22)
            {
              unsigned int v9 = (__PAIR64__(v9, 0.0) - COERCE_UNSIGNED_INT(_simd_orient_pf2(**a2, *v21, *a1))) >> 32;
            }
            return v9 != 0;
          }
LABEL_30:
          re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v17);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
LABEL_29:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
    }
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v11);
    _os_crash();
    __break(1u);
LABEL_28:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v2, v11);
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  unsigned int v9 = 0;
  return v9 != 0;
}

void *re::DynamicArray<re::anonymous namespace'::Boundary>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    BOOL v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          uint64_t v2 = 224 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 224 * v9;
        uint64_t v11 = v8 + 176;
        float32x4_t v12 = v7;
        do
        {
          long long v13 = *(_OWORD *)(v11 - 176);
          long long v14 = *(_OWORD *)(v11 - 144);
          *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 - 160);
          *((_OWORD *)v12 + 2) = v14;
          *(_OWORD *)float32x4_t v12 = v13;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v15 = *(void *)(v11 - 120);
          v12[6] = *(void *)(v11 - 128);
          *(void *)(v11 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
          v12[7] = v15;
          *(void *)(v11 - 120) = 0;
          uint64_t v16 = v12[8];
          v12[8] = *(void *)(v11 - 112);
          *(void *)(v11 - 112) = v16;
          uint64_t v17 = v12[10];
          v12[10] = *(void *)(v11 - 96);
          *(void *)(v11 - 96) = v17;
          ++*(_DWORD *)(v11 - 104);
          LODWORD(v17) = *((_DWORD *)v12 + 18) + 1;
          v12[15] = 0;
          v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          *((_DWORD *)v12 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v18 = *(void *)(v11 - 88);
          *((_DWORD *)v12 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
          uint64_t v19 = *(void *)(v11 - 80);
          v12[11] = v18;
          *(void *)(v11 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
          v12[12] = v19;
          *(void *)(v11 - 80) = 0;
          uint64_t v20 = v12[13];
          v12[13] = *(void *)(v11 - 72);
          *(void *)(v11 - 72) = v20;
          uint64_t v21 = v12[15];
          v12[15] = *(void *)(v11 - 56);
          *(void *)(v11 - 56) = v21;
          ++*(_DWORD *)(v11 - 64);
          ++*((_DWORD *)v12 + 28);
          v12[20] = 0;
          v12[17] = 0;
          v12[18] = 0;
          v12[16] = 0;
          *((_DWORD *)v12 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v22 = *(void *)(v11 - 40);
          v12[16] = *(void *)(v11 - 48);
          *(void *)(v11 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
          v12[17] = v22;
          *(void *)(v11 - 40) = 0;
          uint64_t v23 = v12[18];
          v12[18] = *(void *)(v11 - 32);
          *(void *)(v11 - 32) = v23;
          uint64_t v24 = v12[20];
          v12[20] = *(void *)(v11 - 16);
          *(void *)(v11 - 16) = v24;
          ++*(_DWORD *)(v11 - 24);
          ++*((_DWORD *)v12 + 38);
          v12[26] = 0;
          v12[23] = 0;
          v12[24] = 0;
          v12[22] = 0;
          *((_DWORD *)v12 + 50) = 0;
          uint64_t v25 = *(void *)(v11 + 8);
          v12[22] = *(void *)v11;
          v12[23] = v25;
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v26 = v12[24];
          v12[24] = *(void *)(v11 + 16);
          *(void *)(v11 + 16) = v26;
          uint64_t v27 = v12[26];
          v12[26] = *(void *)(v11 + 32);
          *(void *)(v11 + 32) = v27;
          ++*(_DWORD *)(v11 + 24);
          ++*((_DWORD *)v12 + 50);
          re::DynamicArray<unsigned long>::deinit(v11 - 48);
          re::DynamicArray<unsigned long>::deinit(v11 - 88);
          re::DynamicArray<unsigned long>::deinit(v11 - 128);
          uint64_t v28 = v11 + 48;
          v11 += 224;
          v12 += 28;
        }
        while (v28 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::anonymous namespace'::makeCurveTessellationWithUniformSampling(void *result, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)uint64_t result = vdupq_n_s32(0x7F800000u);
  *((_OWORD *)result + 1) = v4;
  result[4] = 0;
  BOOL v5 = result + 4;
  result[5] = 0;
  result[6] = 0;
  *((_DWORD *)result + 14) = 0;
  result[18] = 0;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_DWORD *)result + 24) = 0;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  *((_DWORD *)result + 34) = 0;
  int v6 = *a2;
  unsigned int v7 = v6 - 1;
  if (!*a2) {
    unsigned int v7 = 0;
  }
  if (v7 <= a3 || v6 == 0) {
    unsigned int v9 = a3;
  }
  else {
    unsigned int v9 = v7;
  }
  uint64_t v10 = *((void *)a2 + 13);
  if (v10)
  {
    float32x4_t v12 = (float32x4_t *)result;
    int v13 = (v9 + 1) * v10;
    unint64_t v14 = (v13 + 1);
    if (v13 == -1)
    {
      unint64_t v15 = 0;
    }
    else
    {
      re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 4, (v13 + 1));
      unint64_t v15 = v12[5].u64[0];
    }
    if (v15 < v14) {
      re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v12[4].i64[1], v14);
    }
    if (!*((void *)a2 + 8)) {
      goto LABEL_111;
    }
    if (!*((void *)a2 + 18))
    {
LABEL_112:
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v99 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v92 = 136315906;
      *(void *)&v92[4] = "operator[]";
      __int16 v93 = 1024;
      int v94 = 797;
      __int16 v95 = 2048;
      unint64_t v96 = 0;
      __int16 v97 = 2048;
      float32x4_t v98 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_113;
    }
    int v16 = **((unsigned __int8 **)a2 + 10);
    uint64_t v17 = (float32x2_t *)*((void *)a2 + 20);
    __asm { FMOV            V8.2S, #3.0 }
    if (v16 == 3)
    {
      float32x2_t v24 = vadd_f32(*v17, vmul_f32(vadd_f32(vmul_f32(v17[1], 0), vmul_f32(v17[2], 0)), _D8));
      float32x2_t v22 = vmul_f32(v17[3], 0);
    }
    else
    {
      if (v16 == 2)
      {
        float32x2_t v22 = vadd_f32(*v17, vmul_f32(v17[1], 0));
        float32x2_t v23 = v17[2];
      }
      else
      {
        if (v16 != 1)
        {
          float32x2_t v25 = 0;
LABEL_26:
          *(float32x2_t *)&long long v99 = v25;
          re::DynamicArray<unsigned long>::add(v5, &v99);
          if (*((void *)a2 + 8))
          {
            if (*((void *)a2 + 18))
            {
              int v26 = **((unsigned __int8 **)a2 + 10);
              uint64_t v27 = (float32x2_t *)*((void *)a2 + 20);
              switch(v26)
              {
                case 3:
                  float32x2_t v29 = v27[2];
                  float32x2_t v30 = vadd_f32(vmul_f32(vsub_f32(v27[1], *v27), _D8), vmul_f32(vsub_f32(v29, v27[1]), 0));
                  float32x2_t v31 = vmul_f32(vsub_f32(v27[3], v29), 0);
                  break;
                case 2:
                  float32x2_t v30 = vsub_f32(vadd_f32(v27[1], v27[1]), vadd_f32(*v27, *v27));
                  float32x2_t v31 = vmul_f32(v27[2], 0);
                  break;
                case 1:
                  float32x2_t v28 = vsub_f32(v27[1], *v27);
LABEL_35:
                  float32x2_t v32 = v28;
LABEL_37:
                  uint64_t v33 = v10;
                  *(float32x2_t *)&long long v99 = v32;
                  re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                  unint64_t v34 = 0;
                  float32x4_t v35 = *v12;
                  float32x4_t v36 = v12[1];
                  v35.i32[3] = 0;
                  v37.i64[0] = *(void *)(v12[4].i64[0] + 8 * v12[3].i64[0] - 8);
                  v36.i32[3] = 0;
                  *float32x4_t v12 = vminnmq_f32(v35, v37);
                  v12[1] = vmaxnmq_f32(v36, v37);
                  float32x4_t v89 = (_anonymous_namespace_ *)&v12[7];
                  while (1)
                  {
                    unint64_t v38 = *((void *)a2 + 8);
                    if (v38 <= v34)
                    {
                      long long v102 = 0u;
                      long long v103 = 0u;
                      long long v100 = 0u;
                      long long v101 = 0u;
                      long long v99 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)float32x4_t v92 = 136315906;
                      *(void *)&v92[4] = "operator[]";
                      __int16 v93 = 1024;
                      int v94 = 797;
                      __int16 v95 = 2048;
                      unint64_t v96 = v34;
                      __int16 v97 = 2048;
                      float32x4_t v98 = (float32x2_t *)v38;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_109:
                      long long v102 = 0u;
                      long long v103 = 0u;
                      long long v100 = 0u;
                      long long v101 = 0u;
                      long long v99 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)float32x4_t v92 = 136315906;
                      *(void *)&v92[4] = "operator[]";
                      __int16 v93 = 1024;
                      int v94 = 797;
                      __int16 v95 = 2048;
                      unint64_t v96 = v34;
                      __int16 v97 = 2048;
                      float32x4_t v98 = (float32x2_t *)v38;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_110:
                      long long v102 = 0u;
                      long long v103 = 0u;
                      long long v100 = 0u;
                      long long v101 = 0u;
                      long long v99 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)float32x4_t v92 = 136315906;
                      *(void *)&v92[4] = "operator[]";
                      __int16 v93 = 1024;
                      int v94 = 797;
                      __int16 v95 = 2048;
                      unint64_t v96 = v38;
                      __int16 v97 = 2048;
                      float32x4_t v98 = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_111:
                      long long v102 = 0u;
                      long long v103 = 0u;
                      long long v100 = 0u;
                      long long v101 = 0u;
                      long long v99 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)float32x4_t v92 = 136315906;
                      *(void *)&v92[4] = "operator[]";
                      __int16 v93 = 1024;
                      int v94 = 797;
                      __int16 v95 = 2048;
                      unint64_t v96 = 0;
                      __int16 v97 = 2048;
                      float32x4_t v98 = 0;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_112;
                    }
                    unint64_t v38 = *((void *)a2 + 13);
                    if (v38 <= v34) {
                      goto LABEL_109;
                    }
                    unint64_t v38 = *(void *)(*((void *)a2 + 15) + 8 * v34);
                    uint64_t v3 = (float32x2_t *)*((void *)a2 + 18);
                    if ((unint64_t)v3 <= v38) {
                      goto LABEL_110;
                    }
                    int v39 = *(unsigned __int8 *)(*((void *)a2 + 10) + v34);
                    uint64_t v3 = (float32x2_t *)(*((void *)a2 + 20) + 8 * v38);
                    if (v39 == 3) {
                      break;
                    }
                    if (v39 == 2)
                    {
                      float32x2_t v42 = vsub_f32(vadd_f32(v3[1], v3[1]), vadd_f32(*v3, *v3));
                      float32x2_t v43 = vmul_f32(v3[2], 0);
                      goto LABEL_47;
                    }
                    if (v39 == 1)
                    {
                      float32x2_t v40 = vsub_f32(v3[1], *v3);
LABEL_48:
                      float32x2_t v44 = v40;
                      goto LABEL_50;
                    }
                    float32x2_t v44 = 0;
LABEL_50:
                    *(float32x2_t *)&long long v99 = v44;
                    uint64_t v45 = v12[6].i64[1] + 8 * v12[5].i64[1];
                    float v47 = *(float *)(v45 - 8);
                    uint64_t v46 = v45 - 8;
                    float v48 = v47;
                    if (v47 != v44.f32[0]
                      && vabds_f32(v48, v44.f32[0]) >= (float)((float)((float)(fabsf(v44.f32[0]) + fabsf(v48)) + 1.0)
                                                             * 0.00001)
                      || (float v49 = *(float *)(v46 + 4), v49 != v44.f32[1])
                      && vabds_f32(v49, v44.f32[1]) >= (float)((float)((float)(fabsf(v44.f32[1]) + fabsf(v49)) + 1.0)
                                                             * 0.00001))
                    {
                      *(_DWORD *)float32x4_t v92 = v12[5].i64[1];
                      re::DynamicArray<int>::add(v89, v92);
                      re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                    }
                    if (v9)
                    {
                      int v50 = 0;
                      while (1)
                      {
                        float v51 = (float)(1.0 / (float)(v9 + 1)) * (float)++v50;
                        float v52 = 1.0 - v51;
                        float v90 = 1.0 - v51;
                        float v91 = v51;
                        if (v39 == 3)
                        {
                          float32x2_t v54 = vadd_f32(vmul_n_f32(*v3, v52 * (float)(v52 * v52)), vmul_f32(vadd_f32(vmul_n_f32(v3[1], v51 * (float)(v52 * v52)), vmul_n_f32(v3[2], v52 * (float)(v51 * v51))), _D8));
                          float32x2_t v53 = vmul_n_f32(v3[3], v51 * (float)(v51 * v51));
                          goto LABEL_63;
                        }
                        if (v39 == 2) {
                          break;
                        }
                        if (v39 == 1)
                        {
                          float32x2_t v53 = vmul_n_f32(*v3, v52);
                          float32x2_t v54 = vmul_n_f32(v3[1], v51);
LABEL_63:
                          float32x2_t v55 = vadd_f32(v54, v53);
                          goto LABEL_65;
                        }
                        float32x2_t v55 = 0;
LABEL_65:
                        *(float32x2_t *)float32x4_t v92 = v55;
                        re::DynamicArray<unsigned long>::add(v5, v92);
                        if (v39 == 3)
                        {
                          float32x2_t v60 = v3[2];
                          float32x2_t v57 = vadd_f32(vmul_n_f32(vsub_f32(v3[1], *v3), (float)(v90 * v90) * 3.0), vmul_n_f32(vsub_f32(v60, v3[1]), v91 * (float)(v90 * 6.0)));
                          float v58 = (float)(v91 * v91) * 3.0;
                          float32x2_t v59 = vsub_f32(v3[3], v60);
                          goto LABEL_71;
                        }
                        if (v39 == 2)
                        {
                          float32x2_t v57 = vadd_f32(vmul_n_f32(*v3, v90 * -2.0), vmul_n_f32(v3[1], (float)(v91 * -4.0) + 2.0));
                          float v58 = v91 + v91;
                          float32x2_t v59 = v3[2];
LABEL_71:
                          float32x2_t v56 = vadd_f32(v57, vmul_n_f32(v59, v58));
                          goto LABEL_72;
                        }
                        if (v39 != 1)
                        {
                          float32x2_t v61 = 0;
                          goto LABEL_74;
                        }
                        float32x2_t v56 = vsub_f32(v3[1], *v3);
LABEL_72:
                        float32x2_t v61 = v56;
LABEL_74:
                        *(float32x2_t *)float32x4_t v92 = v61;
                        re::DynamicArray<unsigned long>::add(&v12[4].i64[1], v92);
                        v62.i64[0] = *(void *)(v12[4].i64[0] + 8 * v12[3].i64[0] - 8);
                        float32x4_t v63 = *v12;
                        float32x4_t v64 = v12[1];
                        v63.i32[3] = 0;
                        v64.i32[3] = 0;
                        *float32x4_t v12 = vminnmq_f32(v63, v62);
                        v12[1] = vmaxnmq_f32(v64, v62);
                        if (v9 == v50) {
                          goto LABEL_75;
                        }
                      }
                      float32x2_t v53 = vadd_f32(vmul_n_f32(*v3, v52 * v52), vmul_n_f32(v3[1], v51 * (float)(v52 + v52)));
                      float32x2_t v54 = vmul_n_f32(v3[2], v51 * v51);
                      goto LABEL_63;
                    }
LABEL_75:
                    switch(v39)
                    {
                      case 3:
                        float32x2_t v66 = v3[3];
                        float32x2_t v65 = vadd_f32(vmul_f32(*v3, 0), vmul_f32(vadd_f32(vmul_f32(v3[1], 0), vmul_f32(v3[2], 0)), _D8));
                        goto LABEL_81;
                      case 2:
                        float32x2_t v66 = vadd_f32(vmul_f32(*v3, 0), vmul_f32(v3[1], 0));
                        float32x2_t v65 = v3[2];
                        goto LABEL_81;
                      case 1:
                        float32x2_t v65 = v3[1];
                        float32x2_t v66 = vmul_f32(*v3, 0);
LABEL_81:
                        float32x2_t v67 = vadd_f32(v65, v66);
                        goto LABEL_83;
                    }
                    float32x2_t v67 = 0;
LABEL_83:
                    *(float32x2_t *)float32x4_t v92 = v67;
                    re::DynamicArray<unsigned long>::add(v5, v92);
                    if (v39 == 3)
                    {
                      float32x2_t v69 = v3[2];
                      float32x2_t v70 = vadd_f32(vmul_f32(vsub_f32(v3[1], *v3), 0), vmul_f32(vsub_f32(v69, v3[1]), 0));
                      float32x2_t v71 = vmul_f32(vsub_f32(v3[3], v69), _D8);
LABEL_89:
                      float32x2_t v68 = vadd_f32(v70, v71);
                      goto LABEL_90;
                    }
                    if (v39 == 2)
                    {
                      float32x2_t v70 = vsub_f32(vmul_f32(*v3, (float32x2_t)0x8000000080000000), vadd_f32(v3[1], v3[1]));
                      float32x2_t v71 = vadd_f32(v3[2], v3[2]);
                      goto LABEL_89;
                    }
                    if (v39 != 1)
                    {
                      float32x2_t v72 = 0;
                      goto LABEL_92;
                    }
                    float32x2_t v68 = vsub_f32(v3[1], *v3);
LABEL_90:
                    float32x2_t v72 = v68;
LABEL_92:
                    *(float32x2_t *)float32x4_t v92 = v72;
                    re::DynamicArray<unsigned long>::add(&v12[4].i64[1], v92);
                    unint64_t v73 = (float *)v12[4].i64[0];
                    unint64_t v74 = v12[3].u64[0];
                    unint64_t v75 = v74 - 1;
                    v76.i64[0] = *(void *)&v73[2 * v74 - 2];
                    float32x4_t v77 = *v12;
                    float32x4_t v78 = v12[1];
                    v77.i32[3] = 0;
                    v78.i32[3] = 0;
                    *float32x4_t v12 = vminnmq_f32(v77, v76);
                    v12[1] = vmaxnmq_f32(v78, v76);
                    if (++v34 == v33)
                    {
                      if (v74 > 1
                        && ((float32x4_t v79 = &v73[2 * v75], *v79 == *v73)
                         || vabds_f32(*v79, *v73) < (float)((float)((float)(fabsf(*v79) + fabsf(*v73)) + 1.0) * 0.00001))
                        && ((float v80 = v79[1], v81 = v73[1], v80 == v81)
                         || vabds_f32(v80, v81) < (float)((float)((float)(fabsf(v80) + fabsf(v81)) + 1.0) * 0.00001)))
                      {
                        v12[3].i64[0] = v75;
                        ++v12[3].i32[2];
                      }
                      else
                      {
                        unint64_t v82 = *((void *)a2 + 18);
                        if (v82 >= 2)
                        {
                          float32x2_t v83 = vsub_f32(**((float32x2_t **)a2 + 20), *(float32x2_t *)(*((void *)a2 + 20) + 8 * v82 - 8));
                          *(float32x2_t *)&long long v99 = v83;
                          uint64_t v84 = v12[6].i64[1] + 8 * v12[5].i64[1];
                          float v86 = *(float *)(v84 - 8);
                          uint64_t v85 = v84 - 8;
                          float v87 = v86;
                          if (v86 != v83.f32[0]
                            && vabds_f32(v87, v83.f32[0]) >= (float)((float)((float)(fabsf(v83.f32[0]) + fabsf(v87))
                                                                           + 1.0)
                                                                   * 0.00001)
                            || (float v88 = *(float *)(v85 + 4), v88 != v83.f32[1])
                            && vabds_f32(v88, v83.f32[1]) >= (float)((float)((float)(fabsf(v83.f32[1]) + fabsf(v88))
                                                                           + 1.0)
                                                                   * 0.00001))
                          {
                            *(_DWORD *)float32x4_t v92 = v12[5].i64[1];
                            re::DynamicArray<int>::add(v89, v92);
                            re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                          }
                          re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                        }
                      }
                      LODWORD(v99) = v12[5].i64[1];
                      return re::DynamicArray<int>::add(v89, &v99);
                    }
                  }
                  float32x2_t v41 = v3[2];
                  float32x2_t v42 = vadd_f32(vmul_f32(vsub_f32(v3[1], *v3), _D8), vmul_f32(vsub_f32(v41, v3[1]), 0));
                  float32x2_t v43 = vmul_f32(vsub_f32(v3[3], v41), 0);
LABEL_47:
                  float32x2_t v40 = vadd_f32(v42, v43);
                  goto LABEL_48;
                default:
                  float32x2_t v32 = 0;
                  goto LABEL_37;
              }
              float32x2_t v28 = vadd_f32(v30, v31);
              goto LABEL_35;
            }
LABEL_114:
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v92 = 136315906;
            *(void *)&v92[4] = "operator[]";
            __int16 v93 = 1024;
            int v94 = 797;
            __int16 v95 = 2048;
            unint64_t v96 = 0;
            __int16 v97 = 2048;
            float32x4_t v98 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_113:
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v99 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v92 = 136315906;
          *(void *)&v92[4] = "operator[]";
          __int16 v93 = 1024;
          int v94 = 797;
          __int16 v95 = 2048;
          unint64_t v96 = 0;
          __int16 v97 = 2048;
          float32x4_t v98 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_114;
        }
        float32x2_t v22 = *v17;
        float32x2_t v23 = v17[1];
      }
      float32x2_t v24 = vmul_f32(v23, 0);
    }
    float32x2_t v25 = vadd_f32(v24, v22);
    goto LABEL_26;
  }
  return result;
}

void *re::anonymous namespace'::appendToArray<re::Vector2<float>>(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = v4 + this[2];
  if (this[1] < v5)
  {
    this = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, v5);
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v4)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i != v4; ++i)
    {
      if (*(void *)(a2 + 16) <= i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      this = re::DynamicArray<unsigned long>::add(v3, (void *)(*(void *)(a2 + 32) + v6));
      v6 += 8;
    }
  }
  return this;
}

void std::vector<geo::math::Matrix<double,3,1>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v3, a2);
    unsigned int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unsigned int v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    float32x4_t v12 = v7;
    if (v11 != *a1)
    {
      float32x4_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(void *a1, uint64_t a2)
{
  uint64_t v3 = (char *)(a1 + 1);
  if (v3 != (char *)a2) {
    std::vector<geo::math::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(v3, *(char **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  std::vector<std::vector<unsigned long>>::resize(a1 + 35, 1uLL);
  std::vector<unsigned long>::resize(a1[35], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 3));
  uint64_t v4 = a1[35];
  int64_t v5 = *(void **)v4;
  uint64_t v6 = *(void **)(v4 + 8);
  if (v5 != v6)
  {
    uint64_t v7 = 0;
    do
      *v5++ = v7++;
    while (v5 != v6);
  }
}

void *geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 32);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 35);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 38);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 41);
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear((void *)this + 44);
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  std::vector<int>::size_type v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
  if (v5 > 1)
  {
    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    if (*(unsigned char *)this)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Start computing Delaunay triangulation ... \n", 44);
      uint64_t v2 = *((void *)this + 1);
      uint64_t v4 = *((void *)this + 2);
      std::vector<int>::size_type v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    }
    uint64_t v66 = v2;
    uint64_t v67 = v4;
    uint64_t v6 = (uint64_t *)((char *)this + 32);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 32), v5);
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = (unsigned int *)*((void *)this + 5);
    if ((unsigned int *)v7 != v8)
    {
      unsigned int v9 = 0;
      uint64_t v10 = (unsigned int *)*((void *)this + 4);
      do
        *v10++ = v9++;
      while (v10 != v8);
    }
    unint64_t v11 = 126 - 2 * __clz(((uint64_t)v8 - v7) >> 2);
    *(void *)__x = this;
    if (v8 == (unsigned int *)v7) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11;
    }
    std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(v7, v8, (uint64_t *)__x, v12, 1);
    uint64_t v14 = *((void *)this + 1);
    unint64_t v15 = (__n128 *)*((void *)this + 2);
    unint64_t v16 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v14) >> 3));
    *(void *)__x = geo::math::less<double,3,1>;
    if (v15 == (__n128 *)v14) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v16;
    }
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,false>(v14, v15, (uint64_t (**)(long long *, long long *))__x, v17, 1, v13);
    if (v5 >= 2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 1;
      do
      {
        uint64_t v20 = *v3 + 24 * v19;
        uint64_t v21 = (double *)(*v3 + 24 * v18);
        if (*(double *)v20 == *v21 && *(double *)(v20 + 8) == v21[1])
        {
          uint64_t v22 = *(unsigned int *)(*((void *)this + 4) + 4 * v19);
          *(_OWORD *)__x = *(_OWORD *)v20;
          uint64_t v71 = *(void *)(v20 + 16);
          unint64_t v23 = *((void *)this + 14);
          unint64_t v24 = *((void *)this + 15);
          if (v23 >= v24)
          {
            uint64_t v26 = *((void *)this + 13);
            uint64_t v27 = (uint64_t)(v23 - v26) >> 5;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 59) {
              abort();
            }
            uint64_t v29 = v24 - v26;
            if (v29 >> 4 > v28) {
              unint64_t v28 = v29 >> 4;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30) {
              float32x2_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)this + 120, v30);
            }
            else {
              float32x2_t v31 = 0;
            }
            float32x2_t v32 = &v31[32 * v27];
            *(void *)float32x2_t v32 = v22;
            *(_OWORD *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)__x;
            *((void *)v32 + 3) = v71;
            unint64_t v34 = (char *)*((void *)this + 13);
            uint64_t v33 = (char *)*((void *)this + 14);
            float32x4_t v35 = v32;
            if (v33 != v34)
            {
              do
              {
                long long v36 = *((_OWORD *)v33 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
                *((_OWORD *)v35 - 1) = v36;
                v35 -= 32;
                v33 -= 32;
              }
              while (v33 != v34);
              uint64_t v33 = (char *)*((void *)this + 13);
            }
            float32x2_t v25 = v32 + 32;
            *((void *)this + 13) = v35;
            *((void *)this + 14) = v32 + 32;
            *((void *)this + 15) = &v31[32 * v30];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(void *)unint64_t v23 = v22;
            *(_OWORD *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)__x;
            *(void *)(v23 + 24) = v71;
            float32x2_t v25 = (char *)(v23 + 32);
          }
          *((void *)this + 14) = v25;
        }
        ++v19;
      }
      while (v18++ != v5 - 2);
    }
    unint64_t v38 = (uint64_t *)((char *)this + 56);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 56), v5, geo::math::kInvalidIndex);
    if (v67 != v66)
    {
      uint64_t v39 = 0;
      uint64_t v40 = *v6;
      uint64_t v41 = *v38;
      do
      {
        *(_DWORD *)(v41 + 4 * *(unsigned int *)(v40 + 4 * v39)) = v39;
        ++v39;
      }
      while (v5 > v39);
    }
    memset(&v69, 0, sizeof(v69));
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v69, v5, __x);
    unsigned int v42 = 0;
    if (v5 >= 2)
    {
      unsigned int v42 = 0;
      for (unint64_t i = 1; i < v5; unint64_t i = (i + 1))
      {
        uint64_t v44 = *v3 + 24 * i;
        uint64_t v45 = (double *)(*v3 + 24 * v42);
        if (*(double *)v44 != *v45 || *(double *)(v44 + 8) != v45[1])
        {
          unsigned int v46 = v42 + 1;
          unsigned int v42 = i;
          if (i != v46)
          {
            uint64_t v47 = *v3 + 24 * v46;
            long long v48 = *(_OWORD *)v44;
            *(void *)(v47 + 16) = *(void *)(v44 + 16);
            *(_OWORD *)uint64_t v47 = v48;
            *(_DWORD *)(*v6 + 4 * v46) = *(_DWORD *)(*v6 + 4 * i);
            unsigned int v42 = v46;
          }
        }
        v69.__begin_[i] = v42;
      }
    }
    unint64_t v49 = v42 + 1;
    if (v5 != v49)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 80), v5);
      uint64_t v50 = *((void *)this + 7);
      if (v67 != v66)
      {
        std::vector<int>::pointer begin = v69.__begin_;
        float v52 = (_DWORD *)*((void *)this + 10);
        if (v5 <= 1) {
          uint64_t v53 = 1;
        }
        else {
          uint64_t v53 = v5;
        }
        float32x2_t v54 = (int *)*((void *)this + 7);
        do
        {
          int v55 = *v54++;
          *v52++ = begin[v55];
          --v53;
        }
        while (v53);
      }
      *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v50;
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 56), v5, geo::math::kInvalidIndex);
      std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)v3, v49);
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 32), v49);
      if (!v49)
      {
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(this);
        std::vector<int>::size_type v5 = 0;
LABEL_64:
        std::vector<std::vector<unsigned long>>::resize((void *)this + 21, v5);
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(this, 0, v5 - 1, (uint64_t)__x);
        if (*(unsigned char *)this) {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Finish computing Delaunay triangulation ... \n", 45);
        }
        std::vector<int>::size_type v5 = v68;
        if (v69.__begin_)
        {
          v69.__end_ = v69.__begin_;
          operator delete(v69.__begin_);
        }
        return v5 > 1;
      }
      uint64_t v56 = 0;
      uint64_t v57 = *v6;
      uint64_t v58 = *v38;
      do
      {
        *(_DWORD *)(v58 + 4 * *(unsigned int *)(v57 + 4 * v56)) = v56;
        ++v56;
      }
      while (v49 != v56);
      std::vector<int>::size_type v5 = v49;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(this);
    if (v5)
    {
      uint64_t v59 = 0;
      for (uint64_t j = 0; j != v5; ++j)
      {
        uint64_t v61 = *v3 + v59;
        uint64_t v62 = *(void *)(v61 + 16);
        *(_OWORD *)__x = *(_OWORD *)v61;
        uint64_t v71 = v62;
        uint64_t v72 = j;
        std::__hash_table<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::__unordered_map_hasher<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,std::equal_to<geo::math::Matrix<double,3,1>>,true>,std::__unordered_map_equal<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::equal_to<geo::math::Matrix<double,3,1>>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,true>,std::allocator<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>>>::__emplace_unique_key_args<geo::math::Matrix<double,3,1>,std::pair<geo::math::Matrix<double,3,1>,unsigned long>>((uint64_t)this + 128, __x, (uint64_t)__x);
        v59 += 24;
      }
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)this)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Only has ", 9);
    float32x4_t v63 = (void *)std::ostream::operator<<();
    float32x4_t v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" input points, not enough to be triangulated!", 45);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" Quitting!\n", 11);
  }
  return v5 > 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  BOOL result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints((uint64_t)this, (uint64_t *)this + 32, (void *)this + 38);
  if (result)
  {
    return geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints((uint64_t)this, (uint64_t *)this + 35, (void *)this + 41);
  }
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, char a2)
{
  if (*(unsigned char *)this) {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Start computing constrained Delaunay triangulation ... \n", 56);
  }
  uint64_t v4 = *((void *)this + 39) - *((void *)this + 38);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 / 24;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    int v8 = 1;
    do
    {
      uint64_t v9 = *(void *)(*((void *)this + 38) + 24 * v5 + 8) - *(void *)(*((void *)this + 38) + 24 * v5);
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = v9 >> 3;
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v11;
        }
        do
        {
          __n128 v13 = (unsigned int *)(*(void *)(*((void *)this + 38) + 24 * v5) + 8 * v10);
          v8 &= geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(this, *v13, v13[1]);
          ++v10;
        }
        while (v12 != v10);
      }
      ++v5;
    }
    while (v5 != v7);
  }
  else
  {
    int v8 = 1;
  }
  uint64_t v14 = *((void *)this + 42) - *((void *)this + 41);
  if (v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v14 / 24;
    if (v16 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v16;
    }
    do
    {
      uint64_t v18 = *(void *)(*((void *)this + 41) + 24 * v15 + 8) - *(void *)(*((void *)this + 41) + 24 * v15);
      if (v18)
      {
        uint64_t v19 = 0;
        unint64_t v20 = v18 >> 3;
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        do
        {
          uint64_t v22 = (unsigned int *)(*(void *)(*((void *)this + 41) + 24 * v15) + 8 * v19);
          v8 &= geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(this, *v22, v22[1]);
          ++v19;
        }
        while (v21 != v19);
      }
      ++v15;
    }
    while (v15 != v17);
  }
  if (a2)
  {
    BOOL v23 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(this, (void *)this + 38);
    LOBYTE(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v23 & geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(this, (void *)this + 41) & v8;
  }
  if (*(unsigned char *)this)
  {
    if (v8) {
      unint64_t v24 = "Finish computing constrained Delaunay triangulation ... \n";
    }
    else {
      unint64_t v24 = "Failed computing constrained Delaunay triangulation ... \n";
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v24, 57);
  }
  return v8 & 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *((void *)a1 + 21);
  uint64_t v5 = *((void *)a1 + 22) - v4;
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    uint64_t v76 = (uint64_t)a1 + 208;
    unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    do
    {
      if (*(void *)(v4 + 24 * v6 + 8) - *(void *)(v4 + 24 * v6) >= 8uLL)
      {
        uint64_t v8 = *(void *)(v4 + 24 * v6);
        uint64_t v9 = *(void *)(v4 + 24 * v6 + 8);
        if (v9 != v8)
        {
          unint64_t v10 = 0;
          uint64_t v11 = v6 << 32;
          do
          {
            uint64_t v12 = *(unsigned int *)(v8 + 4 * v10);
            unint64_t v13 = (v9 - v8) >> 2;
            if (v9 == v8)
            {
LABEL_10:
              unsigned int v15 = -1;
            }
            else
            {
              uint64_t v14 = 0;
              unsigned int v15 = 0;
              while (*(_DWORD *)(v8 + 4 * v14) != v12)
              {
                uint64_t v14 = ++v15;
                if (v13 <= v15) {
                  goto LABEL_10;
                }
              }
            }
            uint64_t v16 = *(unsigned int *)(v8 + 4 * ((v15 + 1) % v13));
            uint64_t v17 = *((void *)a1 + 1);
            uint64_t v18 = (double *)(v17 + 24 * v6);
            if ((*(double *)(v17 + 24 * v12) - *v18)
               * (*(double *)(v17 + 24 * v16 + 8) - v18[1])
               - (*(double *)(v17 + 24 * v12 + 8) - v18[1])
               * (*(double *)(v17 + 24 * v16) - *v18) > 0.0)
            {
              uint64_t v19 = (uint64_t *)(v4 + 24 * v16);
              uint64_t v20 = *v19;
              uint64_t v21 = v19[1] - *v19;
              if (v21)
              {
                uint64_t v22 = 0;
                unsigned int v23 = v12;
                unint64_t v24 = v21 >> 2;
                unsigned int v25 = 1;
                while (*(_DWORD *)(v20 + 4 * v22) != v12)
                {
                  uint64_t v22 = v25;
                  if (v24 <= v25++) {
                    goto LABEL_100;
                  }
                }
                if (v25)
                {
                  if (v7 >= v12 || v7 >= v16)
                  {
                    if (v12 >= v7 || v12 >= v16)
                    {
                      LODWORD(v79) = v16;
                      unsigned int v27 = v7;
                    }
                    else
                    {
                      LODWORD(v79) = v12;
                      unsigned int v27 = v16;
                      unsigned int v23 = v7;
                    }
                  }
                  else
                  {
                    LODWORD(v79) = v7;
                    unsigned int v27 = v12;
                    unsigned int v23 = v16;
                  }
                  HIDWORD(v79) = v27;
                  unsigned int v80 = v23;
                  unint64_t v28 = v11 | v12;
                  if (v7 < v12) {
                    unint64_t v28 = v6 | (v12 << 32);
                  }
                  unint64_t v78 = v28;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)a1 + 44, &v78))goto LABEL_81; {
                  unint64_t v29 = (v12 << 32) | v16;
                  }
                  if (v12 < v16) {
                    unint64_t v29 = v12 | ((unint64_t)v16 << 32);
                  }
                  unint64_t v78 = v29;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)a1 + 44, &v78))goto LABEL_81; {
                  unint64_t v30 = (v16 << 32) | v6;
                  }
                  if (v7 >= v16) {
                    unint64_t v30 = v11 | v16;
                  }
                  unint64_t v78 = v30;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)a1 + 44, &v78))goto LABEL_81; {
                  uint64_t v32 = *((void *)a1 + 41);
                  }
                  uint64_t v31 = *((void *)a1 + 42);
                  uint64_t v33 = v31 - v32;
                  if (v31 == v32) {
                    goto LABEL_81;
                  }
                  uint64_t v34 = 0;
                  unint64_t v35 = v33 / 24;
                  uint64_t v36 = v35 <= 1 ? 1 : v35;
                  float32x4_t v37 = (void *)(v32 + 8);
                  BOOL v38 = 1;
                  while (1)
                  {
                    uint64_t v39 = (unsigned int *)*(v37 - 1);
                    if (*v37 - (void)v39 == 24)
                    {
                      unsigned int v40 = *v39;
                      BOOL v41 = *v39 == v16 || v40 == v7;
                      if (v41 || v40 == v12)
                      {
                        unsigned int v43 = v39[2];
                        BOOL v44 = v43 == v16 || v43 == v7;
                        if (v44 || v43 == v12)
                        {
                          unsigned int v46 = v39[4];
                          BOOL v47 = v46 == v16 || v46 == v7;
                          if (v47 || v46 == v12)
                          {
                            if (v40 >= v43 || v40 >= v46)
                            {
                              if (v43 >= v40 || v43 >= v46)
                              {
                                LODWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v46;
                                unsigned int v51 = v40;
                                unsigned int v46 = v43;
                              }
                              else
                              {
                                LODWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v43;
                                unsigned int v51 = v46;
                                unsigned int v46 = v40;
                              }
                            }
                            else
                            {
                              LODWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v40;
                              unsigned int v51 = v43;
                            }
                            HIDWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v51;
                            if (v79 != v78 || v80 != (unint64_t)v46) {
                              break;
                            }
                          }
                        }
                      }
                    }
                    BOOL v38 = ++v34 < v35;
                    v37 += 3;
                    if (v36 == v34) {
                      goto LABEL_81;
                    }
                  }
                  if (!v38)
                  {
LABEL_81:
                    if (!std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::find<geo::math::Matrix<unsigned int,3,1>>((void *)a1 + 27, &v79))
                    {
                      std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,3,1>,geo::math::Matrix<unsigned int,3,1> const&>((uint64_t)a1 + 216, &v79, (uint64_t)&v79);
                      unint64_t v54 = *((void *)a1 + 25);
                      unint64_t v53 = *((void *)a1 + 26);
                      if (v54 >= v53)
                      {
                        uint64_t v57 = *((void *)a1 + 24);
                        unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v57) >> 2);
                        unint64_t v59 = v58 + 1;
                        if (v58 + 1 > 0x1555555555555555) {
                          abort();
                        }
                        unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v57) >> 2);
                        if (2 * v60 > v59) {
                          unint64_t v59 = 2 * v60;
                        }
                        if (v60 >= 0xAAAAAAAAAAAAAAALL) {
                          unint64_t v61 = 0x1555555555555555;
                        }
                        else {
                          unint64_t v61 = v59;
                        }
                        if (v61) {
                          uint64_t v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(v76, v61);
                        }
                        else {
                          uint64_t v62 = 0;
                        }
                        float32x4_t v63 = &v62[12 * v58];
                        uint64_t v64 = v79;
                        *((_DWORD *)v63 + 2) = v80;
                        *(void *)float32x4_t v63 = v64;
                        uint64_t v66 = (_DWORD *)*((void *)a1 + 24);
                        float32x2_t v65 = (_DWORD *)*((void *)a1 + 25);
                        uint64_t v67 = v63;
                        if (v65 != v66)
                        {
                          do
                          {
                            uint64_t v68 = *(void *)(v65 - 3);
                            v65 -= 3;
                            int v69 = v65[2];
                            *(void *)(v67 - 12) = v68;
                            v67 -= 12;
                            *((_DWORD *)v67 + 2) = v69;
                          }
                          while (v65 != v66);
                          float32x2_t v65 = (_DWORD *)*((void *)a1 + 24);
                        }
                        uint64_t v56 = v63 + 12;
                        *((void *)a1 + 24) = v67;
                        *((void *)a1 + 25) = v63 + 12;
                        *((void *)a1 + 26) = &v62[12 * v61];
                        if (v65) {
                          operator delete(v65);
                        }
                      }
                      else
                      {
                        uint64_t v55 = v79;
                        *(_DWORD *)(v54 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v80;
                        *(void *)unint64_t v54 = v55;
                        uint64_t v56 = (char *)(v54 + 12);
                      }
                      *((void *)a1 + 25) = v56;
                    }
                  }
                  uint64_t v4 = *((void *)a1 + 21);
                }
              }
            }
LABEL_100:
            ++v10;
            uint64_t v8 = *(void *)(v4 + 24 * v6);
            uint64_t v9 = *(void *)(v4 + 24 * v6 + 8);
          }
          while (v10 < (v9 - v8) >> 2);
        }
      }
      uint64_t v6 = ++v7;
    }
    while (v77 > v7);
  }
  if (*(unsigned char *)a1)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"The generated mesh contains ", 28);
    float32x2_t v70 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)" vertices, ", 11);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetEdgeCount(a1);
    uint64_t v71 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)" edges, and ", 12);
    uint64_t v72 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)" triangles.\n", 12);
  }
  return geo::math::ConstrainedDelaunayTriangulationMesherDetails::RebaseMesh(a1, a2, a3);
}

void std::vector<geo::math::Matrix<double,3,1>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    unsigned int v7 = *a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
      unsigned int v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[24 * v8];
    uint64_t v14 = &v12[24 * v11];
    unsigned int v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        long long v16 = *(_OWORD *)(v6 - 24);
        *((void *)v13 - 1) = *((void *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      unsigned int v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  uint64_t *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    long long v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned long>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

char *std::vector<geo::math::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    BOOL result = std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  unsigned int v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    abort();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<unsigned long>>::__append(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unsigned int v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    size_t v17 = &v16[v14];
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v15);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      size_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      size_t v14 = 0;
    }
    unsigned int v15 = &v14[8 * v11];
    long long v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    size_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((int)&v24, a2, a3, v8);
      uint64_t v18 = v17;
      uint64_t v19 = a1[1];
      if (v19 != v17)
      {
        uint64_t v20 = a1[1];
        do
        {
          uint64_t v22 = *(void **)(v20 - 24);
          v20 -= 24;
          uint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v19 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v19 = v20;
        }
        while (v20 != v18);
      }
      a1[1] = v18;
    }
    else
    {
      uint64_t v13 = a2 + 8 * ((a1[1] - (uint64_t)v8) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((int)&v23, a2, v13, v8);
      uint64_t v14 = a1[1];
      if (v13 != a3)
      {
        unsigned int v15 = (void *)a1[1];
        do
        {
          long long v16 = std::vector<unsigned long>::vector(v15, v13);
          v13 += 24;
          unsigned int v15 = v16 + 3;
          v14 += 24;
        }
        while (v13 != a3);
      }
      a1[1] = v14;
    }
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](a1, v10);
    uint64_t v11 = (void *)a1[1];
    while (v6 != a3)
    {
      uint64_t v12 = std::vector<unsigned long>::vector(v11, v6);
      v6 += 24;
      uint64_t v11 = v12 + 3;
    }
    a1[1] = (uint64_t)v11;
  }
}

void std::vector<std::vector<unsigned long>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<unsigned long>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v5 >> 3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<unsigned long>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<unsigned long>::__assign_with_size[abi:nn180100]<unsigned long *,unsigned long *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<unsigned long>::__assign_with_size[abi:nn180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<unsigned long>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t geo::math::less<double,3,1>(double *a1, double *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 > *a2) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    unint64_t v4 = v3;
    if (v3 == 2) {
      break;
    }
    double v5 = a1[v3 + 1];
    double v6 = a2[v3 + 1];
    if (v5 < v6)
    {
      LOBYTE(v3) = 1;
      return (v4 < 2) & v3;
    }
    ++v3;
    if (v5 > v6)
    {
      LOBYTE(v3) = 0;
      return (v4 < 2) & v3;
    }
  }
  return (v4 < 2) & v3;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  std::vector<int>::size_type v2 = (uint64_t *)((char *)this + 280);
  std::vector<std::vector<unsigned long>>::vector(v58, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 36) - *((void *)this + 35)) >> 3));
  uint64_t v3 = *((void *)this + 35);
  uint64_t v4 = *((void *)this + 36);
  uint64_t v57 = v2;
  if (v4 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      double v6 = (uint64_t *)(v3 + 24 * v5);
      uint64_t v7 = *v6;
      if (v6[1] != *v6)
      {
        unint64_t v8 = 0;
        do
        {
          unint64_t v9 = *(void *)(v7 + 8 * v8);
          uint64_t v10 = *((void *)this + 7);
          if (v9 >= (*((void *)this + 8) - v10) >> 2) {
            unint64_t v11 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v11 = *(unsigned int *)(v10 + 4 * v9);
          }
          if (v11 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2)
          {
            uint64_t v12 = *(void *)v58 + 24 * v5;
            uint64_t v14 = (unint64_t **)(v12 + 8);
            uint64_t v13 = *(unint64_t **)(v12 + 8);
            long long v16 = (void *)(v12 + 16);
            unint64_t v15 = *(void *)(v12 + 16);
            if ((unint64_t)v13 >= v15)
            {
              uint64_t v18 = *(unint64_t **)v12;
              uint64_t v19 = ((uint64_t)v13 - *(void *)v12) >> 3;
              unint64_t v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 61) {
LABEL_69:
              }
                abort();
              uint64_t v21 = v15 - (void)v18;
              if (v21 >> 2 > v20) {
                unint64_t v20 = v21 >> 2;
              }
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v20;
              }
              if (v22)
              {
                char v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v16, v22);
                uint64_t v13 = *v14;
                uint64_t v18 = *(unint64_t **)v12;
                unint64_t v9 = *(void *)(v7 + 8 * v8);
              }
              else
              {
                char v23 = 0;
              }
              char v24 = (unint64_t *)&v23[8 * v19];
              *char v24 = v9;
              size_t v17 = v24 + 1;
              if (v13 == v18)
              {
                std::vector<int>::size_type v2 = v57;
              }
              else
              {
                std::vector<int>::size_type v2 = v57;
                do
                {
                  unint64_t v25 = *--v13;
                  *--char v24 = v25;
                }
                while (v13 != v18);
              }
              *(void *)uint64_t v12 = v24;
              *uint64_t v14 = v17;
              *long long v16 = &v23[8 * v22];
              if (v18) {
                operator delete(v18);
              }
            }
            else
            {
              *uint64_t v13 = v9;
              size_t v17 = v13 + 1;
            }
            *uint64_t v14 = v17;
            uint64_t v3 = *v2;
          }
          ++v8;
          uint64_t v26 = (uint64_t *)(v3 + 24 * v5);
          uint64_t v7 = *v26;
        }
        while (v8 < (v26[1] - *v26) >> 3);
        uint64_t v4 = *((void *)this + 36);
      }
      ++v5;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
  }
  uint64_t v27 = *(void *)v58;
  if (v2 != (uint64_t *)v58)
  {
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v2, *(uint64_t *)v58, *(uint64_t *)v59, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v59 - *(void *)v58) >> 3));
    uint64_t v27 = *(void *)v58;
  }
  uint64_t v28 = *(void *)v59;
  if (*(void *)v59 != v27)
  {
    uint64_t v29 = *(void *)v59;
    do
    {
      uint64_t v31 = *(void **)(v29 - 24);
      v29 -= 24;
      unint64_t v30 = v31;
      if (v31)
      {
        *(void *)(v28 - 16) = v30;
        operator delete(v30);
      }
      uint64_t v28 = v29;
    }
    while (v29 != v27);
  }
  *(void *)unint64_t v59 = v27;
  uint64_t v32 = (int *)((char *)this + 256);
  std::vector<std::vector<unsigned long>>::resize(v58, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 33) - *((void *)this + 32)) >> 3));
  uint64_t v33 = *((void *)this + 32);
  uint64_t v34 = *((void *)this + 33);
  if (v34 != v33)
  {
    unint64_t v35 = 0;
    do
    {
      uint64_t v36 = (uint64_t *)(v33 + 24 * v35);
      uint64_t v37 = *v36;
      if (v36[1] != *v36)
      {
        unint64_t v38 = 0;
        do
        {
          unint64_t v39 = *(void *)(v37 + 8 * v38);
          uint64_t v40 = *((void *)this + 7);
          if (v39 >= (*((void *)this + 8) - v40) >> 2) {
            unint64_t v41 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v41 = *(unsigned int *)(v40 + 4 * v39);
          }
          if (v41 < (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 2)
          {
            uint64_t v42 = *(void *)v58 + 24 * v35;
            BOOL v44 = (unint64_t **)(v42 + 8);
            unsigned int v43 = *(unint64_t **)(v42 + 8);
            unsigned int v46 = (void *)(v42 + 16);
            unint64_t v45 = *(void *)(v42 + 16);
            if ((unint64_t)v43 >= v45)
            {
              long long v48 = *(unint64_t **)v42;
              uint64_t v49 = ((uint64_t)v43 - *(void *)v42) >> 3;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61) {
                goto LABEL_69;
              }
              uint64_t v51 = v45 - (void)v48;
              if (v51 >> 2 > v50) {
                unint64_t v50 = v51 >> 2;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                unint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v46, v52);
                unsigned int v43 = *v44;
                long long v48 = *(unint64_t **)v42;
                unint64_t v39 = *(void *)(v37 + 8 * v38);
              }
              else
              {
                unint64_t v53 = 0;
              }
              unint64_t v54 = (unint64_t *)&v53[8 * v49];
              unint64_t *v54 = v39;
              BOOL v47 = v54 + 1;
              while (v43 != v48)
              {
                unint64_t v55 = *--v43;
                *--unint64_t v54 = v55;
              }
              *(void *)uint64_t v42 = v54;
              *BOOL v44 = v47;
              *unsigned int v46 = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *unsigned int v43 = v39;
              BOOL v47 = v43 + 1;
            }
            *BOOL v44 = v47;
            uint64_t v33 = *(void *)v32;
          }
          ++v38;
          uint64_t v56 = (uint64_t *)(v33 + 24 * v35);
          uint64_t v37 = *v56;
        }
        while (v38 < (v56[1] - *v56) >> 3);
        uint64_t v34 = *((void *)this + 33);
      }
      ++v35;
    }
    while (v35 < 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  }
  if (v32 != v58) {
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t *)this + 32, *(uint64_t *)v58, *(uint64_t *)v59, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v59 - *(void *)v58) >> 3));
  }
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates((uint64_t)this, (uint64_t *)this + 32);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates((uint64_t)this, v57);
  unint64_t v60 = (void **)v58;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v60);
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, int a3, uint64_t a4)
{
  int v6 = a3 - a2;
  unsigned int v7 = a3 - a2 + 1;
  if (v7 < 4)
  {
    if (v6 == 1)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitSegment(a1, a2, a4);
    }
    else if (v6 == 2)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitTriangle(a1, a2, a4);
    }
  }
  else
  {
    std::vector<unsigned int>::value_type v8 = (v7 & 1) + a2 + (v7 >> 1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(a1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(a1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::Merge(a1, (uint64_t)v10, v8 - 1, (uint64_t)&v9, v8, a4);
  }
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x237DBC710](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x237DBC720](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    long long v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    size_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v10 = (unsigned int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v25 = *(a2 - 1);
          unsigned int v26 = *v11;
          uint64_t v27 = *(void *)(*a3 + 8);
          uint64_t v28 = (double *)(v27 + 24 * v25);
          uint64_t v29 = (double *)(v27 + 24 * *v11);
          if (*v28 < *v29 || *v28 == *v29 && v28[1] < v29[1])
          {
            *uint64_t v11 = v25;
            *(a2 - 1) = v26;
          }
          break;
        case 3uLL:
          BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, a2 - 1, (uint64_t)a3);
          break;
        case 4uLL:
          BOOL result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, (uint64_t)a3);
          break;
        case 5uLL:
          BOOL result = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, (uint64_t)a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    size_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, (uint64_t)a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, (uint64_t)a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, (uint64_t)a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], (uint64_t)a3);
      unsigned int v18 = *v11;
      *uint64_t v11 = *v17;
      *size_t v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, (uint64_t)a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = *(void *)(*a3 + 8);
    unint64_t v20 = (double *)(v19 + 24 * *(v11 - 1));
    uint64_t v21 = (double *)(v19 + 24 * *v11);
    if (*v20 >= *v21 && (*v20 != *v21 || v20[1] >= v21[1]))
    {
      BOOL result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, (uint64_t)a3);
      uint64_t v11 = (unsigned int *)result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, (uint64_t)a3);
    if ((v23 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v22, (uint64_t)a3);
    uint64_t v11 = v22 + 1;
    BOOL result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v22 + 1, a2, (uint64_t)a3);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_19:
      BOOL result = std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(v10, v22, a3, -v13, a5 & 1);
      uint64_t v11 = v22 + 1;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, (uint64_t)a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, (uint64_t)a3);
  }
}

unsigned int *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(*(void *)a3 + 8);
      char v6 = result;
      do
      {
        uint64_t v7 = v6;
        char v6 = v3;
        unsigned int v8 = v7[1];
        uint64_t v9 = (double *)(v5 + 24 * v8);
        double v10 = *v9;
        uint64_t v11 = (double *)(v5 + 24 * *v7);
        if (*v9 < *v11 || *v9 == *v11 && v9[1] < v11[1])
        {
          v7[1] = *v7;
          uint64_t v12 = result;
          if (v7 != result)
          {
            uint64_t v13 = v4;
            while (1)
            {
              unsigned int v14 = *(unsigned int *)((char *)result + v13 - 4);
              unint64_t v15 = (double *)(v5 + 24 * v14);
              if (v10 >= *v15)
              {
                if (v10 != *v15)
                {
                  uint64_t v12 = (unsigned int *)((char *)result + v13);
                  goto LABEL_16;
                }
                if (v9[1] >= v15[1]) {
                  break;
                }
              }
              --v7;
              *(unsigned int *)((char *)result + v13) = v14;
              v13 -= 4;
              if (!v13)
              {
                uint64_t v12 = result;
                goto LABEL_16;
              }
            }
            uint64_t v12 = v7;
          }
LABEL_16:
          *uint64_t v12 = v8;
        }
        uint64_t v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *(void *)(*(void *)a3 + 8);
      do
      {
        uint64_t v5 = result;
        BOOL result = v3;
        unsigned int v7 = *v5;
        unsigned int v6 = v5[1];
        unsigned int v8 = (double *)(v4 + 24 * v6);
        double v9 = *v8;
        double v10 = (double *)(v4 + 24 * *v5);
        if (*v8 < *v10 || *v8 == *v10 && v8[1] < v10[1])
        {
          do
          {
            do
            {
              uint64_t v11 = v5;
              unsigned int v12 = *--v5;
              v5[2] = v7;
              unsigned int v7 = v12;
              uint64_t v13 = (double *)(v4 + 24 * v12);
            }
            while (v9 < *v13);
          }
          while (v9 == *v13 && v8[1] < v13[1]);
          *uint64_t v11 = v6;
        }
        uint64_t v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)a4 + 8);
  unsigned int v7 = (double *)(v6 + 24 * *a2);
  double v8 = *v7;
  double v9 = (double *)(v6 + 24 * *a1);
  double v10 = *v9;
  if (*v7 < *v9 || *v7 == *v9 && v7[1] < v9[1])
  {
    uint64_t v11 = (double *)(v6 + 24 * *a3);
    if (*v11 < v8 || *v11 == v8 && v11[1] < v7[1])
    {
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    size_t v17 = (double *)(v6 + 24 * *a3);
    if (*v17 >= v10 && (*v17 != v10 || v17[1] >= v9[1])) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  uint64_t v13 = (double *)(v6 + 24 * *a3);
  if (*v13 < v8 || *v13 == v8 && v13[1] < v7[1])
  {
    *a2 = *a3;
    *a3 = v4;
    unsigned int v14 = *a1;
    unint64_t v15 = (double *)(v6 + 24 * *a2);
    unint64_t v16 = (double *)(v6 + 24 * *a1);
    if (*v15 >= *v16 && (*v15 != *v16 || v15[1] >= v16[1])) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v14;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3 = *a1;
  uint64_t v4 = *(a2 - 1);
  uint64_t v5 = *(void *)(*(void *)a3 + 8);
  uint64_t v6 = (double *)(v5 + 24 * *a1);
  double v7 = *v6;
  double v8 = (double *)(v5 + 24 * v4);
  double v9 = *v8;
  if (*v6 < *v8 || *v6 == *v8 && v6[1] < v8[1])
  {
    uint64_t j = a1 + 1;
    uint64_t v11 = a1[1];
    for (double i = *(double *)(v5 + 24 * v11); v7 >= i; double i = *(double *)(v5 + 24 * v13))
    {
      if (v7 == i && v6[1] < *(double *)(v5 + 24 * v11 + 8)) {
        break;
      }
      unsigned int v13 = j[1];
      ++j;
      uint64_t v11 = v13;
    }
  }
  else
  {
    for (uint64_t j = a1 + 1; j < a2; ++j)
    {
      unsigned int v14 = (double *)(v5 + 24 * *j);
      if (v7 < *v14 || v7 == *v14 && v6[1] < v14[1]) {
        break;
      }
    }
  }
  if (j < a2)
  {
    --a2;
    while (v7 < v9 || v7 == v9 && v6[1] < *(double *)(v5 + 24 * v4 + 8))
    {
      unsigned int v15 = *--a2;
      uint64_t v4 = v15;
      double v9 = *(double *)(v5 + 24 * v15);
    }
  }
  if (j < a2)
  {
    LODWORD(v16) = *j;
    unsigned int v17 = *a2;
    do
    {
      *uint64_t j = v17;
      *a2 = v16;
      do
      {
        unsigned int v18 = j[1];
        ++j;
        uint64_t v16 = v18;
        double v19 = *(double *)(v5 + 24 * v18);
      }
      while (v7 >= v19 && (v7 != v19 || v6[1] >= *(double *)(v5 + 24 * v16 + 8)));
      do
      {
        do
        {
          unsigned int v20 = *--a2;
          unsigned int v17 = v20;
          uint64_t v21 = (double *)(v5 + 24 * v20);
        }
        while (v7 < *v21);
      }
      while (v7 == *v21 && v6[1] < v21[1]);
    }
    while (j < a2);
  }
  if (j - 1 != a1) {
    *a1 = *(j - 1);
  }
  *(j - 1) = v3;
  return j;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = *a1;
  uint64_t v5 = *(void *)(*(void *)a3 + 8);
  uint64_t v6 = (double *)(v5 + 24 * *a1);
  double v7 = *v6;
  while (1)
  {
    unsigned int v8 = a1[v3 + 1];
    double v9 = (double *)(v5 + 24 * v8);
    if (*v9 >= v7 && (*v9 != v7 || v9[1] >= v6[1])) {
      break;
    }
    ++v3;
  }
  double v10 = &a1[v3];
  unint64_t v11 = (unint64_t)&a1[v3 + 1];
  if (v3 * 4)
  {
    unsigned int v13 = *--a2;
    uint64_t v12 = v13;
    for (double i = *(double *)(v5 + 24 * v13); i >= v7; double i = *(double *)(v5 + 24 * v15))
    {
      if (i == v7 && *(double *)(v5 + 24 * v12 + 8) < v6[1]) {
        break;
      }
      unsigned int v15 = *--a2;
      uint64_t v12 = v15;
    }
  }
  else if (v11 < (unint64_t)a2)
  {
    unsigned int v17 = *--a2;
    uint64_t v16 = v17;
    for (double j = *(double *)(v5 + 24 * v17); j >= v7; double j = *(double *)(v5 + 24 * v19))
    {
      if (j == v7)
      {
        if (v11 >= (unint64_t)a2 || *(double *)(v5 + 24 * v16 + 8) < v6[1]) {
          break;
        }
      }
      else if (v11 >= (unint64_t)a2)
      {
        break;
      }
      unsigned int v19 = *--a2;
      uint64_t v16 = v19;
    }
  }
  if (v11 < (unint64_t)a2)
  {
    LODWORD(v20) = *a2;
    unsigned int v21 = v8;
    unint64_t v22 = (unsigned int *)v11;
    char v23 = a2;
    do
    {
      *v22++ = v20;
      *char v23 = v21;
      while (1)
      {
        unsigned int v21 = *v22;
        BOOL v24 = (double *)(v5 + 24 * *v22);
        if (*v24 >= v7 && (*v24 != v7 || v24[1] >= v6[1])) {
          break;
        }
        ++v22;
      }
      do
      {
        unsigned int v25 = *--v23;
        uint64_t v20 = v25;
        double v26 = *(double *)(v5 + 24 * v25);
      }
      while (v26 >= v7 && (v26 != v7 || *(double *)(v5 + 24 * v20 + 8) >= v6[1]));
    }
    while (v22 < v23);
    double v10 = v22 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *double v10 = v4;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = *(a2 - 1);
      unsigned int v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 8);
      unint64_t v11 = (double *)(v10 + 24 * v8);
      uint64_t v12 = (double *)(v10 + 24 * *a1);
      if (*v11 < *v12 || *v11 == *v12 && v11[1] < v12[1])
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v13 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unsigned int v14 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v17 = *(void *)(*(void *)a3 + 8);
      break;
  }
  while (1)
  {
    unsigned int v18 = *v14;
    unsigned int v19 = (double *)(v17 + 24 * *v14);
    double v20 = *v19;
    unsigned int v21 = (double *)(v17 + 24 * *v13);
    if (*v19 < *v21 || *v19 == *v21 && v19[1] < v21[1])
    {
      *unsigned int v14 = *v13;
      unint64_t v22 = a1;
      if (v13 != a1)
      {
        uint64_t v23 = v15;
        while (1)
        {
          unsigned int v24 = *(unsigned int *)((char *)a1 + v23 + 4);
          unsigned int v25 = (double *)(v17 + 24 * v24);
          if (v20 >= *v25)
          {
            if (v20 != *v25)
            {
              unint64_t v22 = (unsigned int *)((char *)a1 + v23 + 8);
              goto LABEL_20;
            }
            if (v19[1] >= v25[1]) {
              break;
            }
          }
          --v13;
          *(unsigned int *)((char *)a1 + v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v24;
          v23 -= 4;
          if (v23 == -8)
          {
            unint64_t v22 = a1;
            goto LABEL_20;
          }
        }
        unint64_t v22 = v13;
      }
LABEL_20:
      *unint64_t v22 = v18;
      if (++v16 == 8) {
        return v14 + 1 == a2;
      }
    }
    unsigned int v13 = v14;
    v15 += 4;
    if (++v14 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a5);
  unsigned int v11 = *a3;
  uint64_t v12 = *(void *)(*(void *)a5 + 8);
  unsigned int v13 = (double *)(v12 + 24 * *a4);
  unsigned int v14 = (double *)(v12 + 24 * *a3);
  if (*v13 < *v14 || *v13 == *v14 && v13[1] < v14[1])
  {
    *a3 = *a4;
    *a4 = v11;
    unsigned int v15 = *a2;
    int v16 = (double *)(v12 + 24 * *a3);
    uint64_t v17 = (double *)(v12 + 24 * *a2);
    if (*v16 < *v17 || *v16 == *v17 && v16[1] < v17[1])
    {
      *a2 = *a3;
      *a3 = v15;
      unsigned int v18 = *a1;
      unsigned int v19 = (double *)(v12 + 24 * *a2);
      double v20 = (double *)(v12 + 24 * *a1);
      if (*v19 < *v20 || *v19 == *v20 && v19[1] < v20[1])
      {
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  unsigned int v13 = *a4;
  uint64_t v14 = *(void *)(*(void *)a6 + 8);
  unsigned int v15 = (double *)(v14 + 24 * *a5);
  int v16 = (double *)(v14 + 24 * *a4);
  if (*v15 < *v16 || *v15 == *v16 && v15[1] < v16[1])
  {
    *a4 = *a5;
    *a5 = v13;
    unsigned int v17 = *a3;
    unsigned int v18 = (double *)(v14 + 24 * *a4);
    unsigned int v19 = (double *)(v14 + 24 * *a3);
    if (*v18 < *v19 || *v18 == *v19 && v18[1] < v19[1])
    {
      *a3 = *a4;
      *a4 = v17;
      unsigned int v20 = *a2;
      unsigned int v21 = (double *)(v14 + 24 * *a3);
      unint64_t v22 = (double *)(v14 + 24 * *a2);
      if (*v21 < *v22 || *v21 == *v22 && v21[1] < v22[1])
      {
        *a2 = *a3;
        *a3 = v20;
        unsigned int v23 = *a1;
        unsigned int v24 = (double *)(v14 + 24 * *a2);
        unsigned int v25 = (double *)(v14 + 24 * *a1);
        if (*v24 < *v25 || *v24 == *v25 && v24[1] < v25[1])
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    unsigned int v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        unsigned int v15 = *v14;
        uint64_t v16 = *(void *)(*a4 + 8);
        unsigned int v17 = (double *)(v16 + 24 * *v14);
        unsigned int v18 = (double *)(v16 + 24 * *a1);
        if (*v17 < *v18 || *v17 == *v18 && v17[1] < v18[1])
        {
          *uint64_t v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      unsigned int v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v19 = (unint64_t)v8 >> 2;
      unsigned int v20 = a2 - 1;
      do
      {
        unsigned int v21 = *a1;
        unint64_t v22 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a4, v19);
        if (v20 == v22)
        {
          *unint64_t v22 = v21;
        }
        else
        {
          *unint64_t v22 = *v20;
          *unsigned int v20 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v22 + 1), (uint64_t)a4, v22 + 1 - a1);
        }
        --v20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) + 1;
      uint64_t v8 = (unsigned int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *a2;
      if (v9 >= a3)
      {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        uint64_t v11 = *(void *)(v10 + 8);
        uint64_t v12 = (double *)(v11 + 24 * *v8);
        unsigned int v13 = (double *)(v11 + 24 * v8[1]);
        if (*v12 < *v13 || *v12 == *v13 && v12[1] < v13[1])
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unsigned int v14 = *a4;
      unsigned int v15 = (double *)(v11 + 24 * *v8);
      uint64_t v16 = (double *)(v11 + 24 * *a4);
      double v17 = *v16;
      if (*v15 >= *v16 && (*v15 != *v16 || v15[1] >= v16[1]))
      {
        *a4 = *v8;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v19 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unsigned int v18 = (unsigned int *)(result + 4 * v7);
            uint64_t v20 = v19 + 2;
            if (v20 < a3)
            {
              unsigned int v21 = (double *)(v11 + 24 * *v18);
              unint64_t v22 = (double *)(v11 + 24 * v18[1]);
              if (*v21 < *v22 || *v21 == *v22 && v21[1] < v22[1])
              {
                ++v18;
                uint64_t v7 = v20;
              }
            }
            unsigned int v23 = (double *)(v11 + 24 * *v18);
            if (*v23 < v17 || *v23 == v17 && v23[1] < v16[1]) {
              break;
            }
            unsigned int *v8 = *v18;
            uint64_t v8 = v18;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        unsigned int v18 = v8;
LABEL_23:
        *unsigned int v18 = v14;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      uint64_t v10 = *(void *)(v6 + 8);
      uint64_t v11 = (double *)(v10 + 24 * *result);
      uint64_t v12 = (double *)(v10 + 24 * result[1]);
      if (*v11 < *v12 || *v11 == *v12 && v11[1] < v12[1])
      {
        ++result;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 4 * (v4 >> 1));
    unsigned int v7 = *(_DWORD *)(a2 - 4);
    uint64_t v8 = *(void *)(*(void *)a3 + 8);
    uint64_t v9 = (double *)(v8 + 24 * *v6);
    uint64_t v10 = (double *)(v8 + 24 * v7);
    double v11 = *v10;
    if (*v9 < *v10 || *v9 == *v10 && v9[1] < v10[1])
    {
      *(_DWORD *)(a2 - 4) = *v6;
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v13 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          uint64_t v12 = (unsigned int *)(result + 4 * v5);
          unsigned int v14 = (double *)(v8 + 24 * *v12);
          if (*v14 >= v11 && (*v14 != v11 || v14[1] >= v10[1])) {
            break;
          }
          *uint64_t v6 = *v12;
          uint64_t v6 = (unsigned int *)(result + 4 * v5);
          if (v13 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v12 = v6;
LABEL_11:
      *uint64_t v12 = v7;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        uint64_t result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = *(void *)(v10 + 16);
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(void *)(v13 + 40) = *(void *)(v6 + v12 + 16);
            if (!v12) {
              break;
            }
            v12 -= 24;
            uint64_t result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = result - 24;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        uint64_t result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *(_OWORD *)v6;
          uint64_t v13 = *(void *)(v6 + 16);
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_OWORD *)(v11 + 24);
            *(void *)(v11 + 64) = *(void *)(v11 + 40);
            uint64_t result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v12;
          *(void *)(v11 + 64) = v13;
        }
        uint64_t v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v16 = *((void *)a1 + 2);
    long long v17 = *a1;
    uint64_t v18 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v18;
    *a2 = v17;
    *((void *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = *((void *)a1 + 2);
    long long v20 = *a1;
    uint64_t v21 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v21;
    *a2 = v20;
    *((void *)a2 + 2) = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v22 = *((void *)a2 + 2);
    long long v23 = *a2;
    uint64_t v24 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v24;
    *a3 = v23;
    *((void *)a3 + 2) = v22;
    return 2;
  }
  uint64_t v10 = *((void *)a1 + 2);
  long long v11 = *a1;
  uint64_t v12 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v12;
  *a3 = v11;
  *((void *)a3 + 2) = v10;
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v16 = *a1;
  uint64_t v17 = *((void *)a1 + 2);
  if ((*a3)(&v16, (long long *)((char *)a2 - 24)))
  {
    uint64_t v6 = a1;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (long long *)((char *)a1 + 24);
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v16, v7);
      uint64_t v7 = (long long *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v9 = *v6;
    uint64_t v19 = *((void *)v6 + 2);
    long long v18 = v9;
    long long v10 = *v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *uint64_t v6 = v10;
    long long v11 = v18;
    *((void *)v4 + 2) = v19;
    long long *v4 = v11;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  uint64_t v12 = (long long *)((char *)v6 - 24);
  if ((long long *)((char *)v6 - 24) != a1)
  {
    long long v13 = *v12;
    *((void *)a1 + 2) = *((void *)v6 - 1);
    *a1 = v13;
  }
  long long v14 = v16;
  *((void *)v6 - 1) = v17;
  *uint64_t v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>(long long *a1, unint64_t a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  unint64_t v7 = (unint64_t)a1 + v6;
  uint64_t v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    long long v9 = (long long *)((char *)a1 + v6);
    unint64_t v10 = a2;
    do
    {
      long long v19 = *v9;
      long long v11 = v19;
      uint64_t v20 = *((void *)v9 + 2);
      uint64_t v12 = v20;
      uint64_t v13 = *(void *)(v10 + 16);
      *long long v9 = *(_OWORD *)v10;
      *((void *)v9 + 2) = v13;
      *(void *)(v10 + 16) = v12;
      *(_OWORD *)unint64_t v10 = v11;
      do
        long long v9 = (long long *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    uint64_t v8 = (uint64_t)v9 - 24;
  }
  if ((long long *)v8 != a1)
  {
    long long v14 = *(_OWORD *)v8;
    *((void *)a1 + 2) = *(void *)(v8 + 16);
    *a1 = v14;
  }
  long long v15 = v17;
  *(void *)(v8 + 16) = v18;
  *(_OWORD *)uint64_t v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        long long *v8 = v10;
        *(void *)(a2 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  if (a1 != a2)
  {
    unint64_t v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = a1[1].n128_u64[0];
          *long long v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a4, v10, a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      long long v29 = v14;
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        long long v30 = v7;
        uint64_t v20 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        uint64_t v21 = (uint64_t)a1;
        do
        {
          uint64_t v22 = v21 + 24 * v20 + 24;
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            uint64_t v23 = v24;
          }
          long long v25 = *(_OWORD *)v22;
          *(void *)(v21 + 16) = *(void *)(v22 + 16);
          *(_OWORD *)uint64_t v21 = v25;
          uint64_t v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        unint64_t v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(void *)(v22 + 16) = v32;
          *(__n128 *)uint64_t v22 = v31;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)uint64_t v22 = v26;
          *unint64_t v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, v22 + 24, (uint64_t (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = (__n128 *)(a1 + 24 * v12);
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        uint64_t v13 = (__n128 *)((char *)v13 + 24);
        uint64_t v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        do
        {
          unint64_t v16 = v13;
          __n128 v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *unint64_t v7 = v17;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = (__n128 *)(a1 + 24 * v18);
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              uint64_t v13 = (__n128 *)((char *)v13 + 24);
              uint64_t v18 = v19;
            }
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *unint64_t v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 24 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 24);
    if ((*a3)(v10, (long long *)(a2 - 24)))
    {
      long long v15 = *v11;
      uint64_t v16 = *((void *)v11 + 2);
      do
      {
        uint64_t v13 = v10;
        long long v14 = *v10;
        *((void *)v11 + 2) = *((void *)v10 + 2);
        *unint64_t v11 = v14;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 24 * v9);
        unint64_t v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      double result = *(double *)&v15;
      *uint64_t v13 = v15;
      *((void *)v13 + 2) = v16;
    }
  }
  return result;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v7 = value;
  unint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    uint64_t v18 = (int *)&v15[4 * v12];
    uint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    unint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = (int *)&v15[4 * v14];
    std::vector<int>::pointer begin = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--uint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates(uint64_t a1, uint64_t *a2)
{
  std::vector<std::vector<unsigned long>>::vector(&v14, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      geo::math::polygon_detail::GetNonRedundantIndices((void *)(v3 + v4), (char **)&v12);
      unint64_t v6 = (void *)(v14 + v4);
      unint64_t v7 = *(void **)(v14 + v4);
      if (v7)
      {
        v6[1] = v7;
        operator delete(v7);
        *unint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
      }
      *(_OWORD *)unint64_t v6 = v12;
      v6[2] = v13;
      ++v5;
      uint64_t v3 = *a2;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a2);
  uint64_t v9 = v14;
  uint64_t v8 = v15;
  if (v15 != v14)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (*(void *)(v9 + v10 + 8) - *(void *)(v9 + v10) >= 0x11uLL)
      {
        std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](a2, v9 + v10);
        uint64_t v9 = v14;
        uint64_t v8 = v15;
      }
      ++v11;
      v10 += 24;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3));
  }
  *(void *)&long long v12 = &v14;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void geo::math::polygon_detail::GetNonRedundantIndices(void *a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v3 = a1[1] - *a1;
  if ((unint64_t)v3 >= 9)
  {
    uint64_t v5 = v3 >> 3;
    uint64_t v42 = 0;
    std::vector<unsigned long>::resize((uint64_t)&__p, v3 >> 3, &v42);
    unint64_t v6 = __p;
    *(void *)__p = 0;
    unint64_t v7 = (void *)*a1;
    unint64_t v8 = v5 - 1;
    if (v5 != 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        if (v7[v9] != v7[v9 + 1]) {
          ++v10;
        }
        v6[++v9] = v10;
      }
      while (v8 != v9);
      if (v8 >= 2 && v7[v8] == *v7)
      {
        unint64_t v11 = (char *)(v6 - 1);
        do
        {
          *(void *)&v11[8 * v5] = 0;
          if ((unint64_t)(v5 - 2) < 2) {
            break;
          }
          uint64_t v12 = v7[v5-- - 2];
        }
        while (v12 == *v7);
      }
    }
    uint64_t v14 = a2 + 2;
    unint64_t v13 = (unint64_t)a2[2];
    uint64_t v15 = a2[1];
    if ((unint64_t)v15 >= v13)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = (v15 - *a2) >> 3;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61) {
LABEL_53:
      }
        abort();
      uint64_t v20 = v13 - (void)v17;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v21);
        uint64_t v17 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = &v22[8 * v18];
      uint64_t v24 = &v22[8 * v21];
      *(void *)uint64_t v23 = *v7;
      std::vector<int>::size_type v16 = v23 + 8;
      while (v15 != v17)
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v23 - 1) = v25;
        v23 -= 8;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(void *)uint64_t v15 = *v7;
      std::vector<int>::size_type v16 = v15 + 8;
    }
    a2[1] = v16;
    BOOL v27 = (void *)*a1;
    uint64_t v26 = a1[1];
    if ((unint64_t)(v26 - *a1) >= 9)
    {
      unint64_t v28 = 1;
      do
      {
        uint64_t v29 = *((void *)__p + v28);
        if (v29 != *((void *)__p + v28 - 1) && v29 != *(void *)__p)
        {
          if ((unint64_t)v16 >= *v14)
          {
            __n128 v31 = *a2;
            uint64_t v32 = (v16 - *a2) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_53;
            }
            uint64_t v34 = *v14 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v35);
              __n128 v31 = *a2;
              std::vector<int>::size_type v16 = a2[1];
            }
            else
            {
              uint64_t v36 = 0;
            }
            uint64_t v37 = &v36[8 * v32];
            *(void *)uint64_t v37 = v27[v28];
            long long v30 = v37 + 8;
            while (v16 != v31)
            {
              uint64_t v38 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *a2 = v37;
            a2[1] = v30;
            a2[2] = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)std::vector<int>::size_type v16 = v27[v28];
            long long v30 = v16 + 8;
          }
          a2[1] = v30;
          std::vector<int>::size_type v16 = v30;
          BOOL v27 = (void *)*a1;
          uint64_t v26 = a1[1];
        }
        ++v28;
      }
      while (v28 < (v26 - (uint64_t)v27) >> 3);
    }
  }
  if (__p)
  {
    uint64_t v40 = __p;
    operator delete(__p);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](void *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    std::vector<int>::size_type v16 = &v14[24 * v10];
    uint64_t v18 = &v14[24 * v13];
    std::vector<unsigned long>::vector(v16, a2);
    uint64_t v17 = v16 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    unint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)std::vector<unsigned long>::vector(*(void **)(v4 - 8), a2);
    unint64_t v9 = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, void *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[8 * v12];
    uint64_t v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    unint64_t v21 = v18;
    do
    {
      *(void *)unint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (std::vector<int>::pointer i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::__unordered_map_hasher<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,std::equal_to<geo::math::Matrix<double,3,1>>,true>,std::__unordered_map_equal<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::equal_to<geo::math::Matrix<double,3,1>>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,true>,std::allocator<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>>>::__emplace_unique_key_args<geo::math::Matrix<double,3,1>,std::pair<geo::math::Matrix<double,3,1>,unsigned long>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    double v8 = *(double *)&a2[v6];
    if (v8 == 0.0) {
      double v8 = 0.0;
    }
    v7 ^= *(void *)&v8;
    ++v6;
  }
  while (v6 != 3);
  unint64_t v9 = v7 + 2654435769;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 + 2654435769;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x30uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  uint64_t v17 = *(void *)(a3 + 24);
  v13[4] = *(void *)(a3 + 16);
  *((_DWORD *)v13 + 10) = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *uint64_t v13 = *v25;
LABEL_49:
    *uint64_t v25 = v13;
    goto LABEL_50;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_49;
  }
LABEL_50:
  ++*(void *)(a1 + 24);
  return v13;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::Merge(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, uint64_t a2, unsigned int a3, uint64_t a4, std::vector<unsigned int>::value_type a5, uint64_t a6)
{
  int v10 = *(_DWORD *)(a4 + 20);
  *(_DWORD *)(a6 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a6 + 20) = v10;
  uint64_t v27 = 0;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetLowestCommonTangent(a1, a2, a3, (unsigned int *)a4, a5, (unsigned int *)&v27 + 1, (std::vector<unsigned int>::value_type *)&v27);
  *(void *)a6 = *(void *)a2;
  *(void *)(a6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a4 + 8);
  uint64_t v12 = v27;
  uint64_t v11 = HIDWORD(v27);
  if (HIDWORD(v27) == *(_DWORD *)(a2 + 16)) {
    *(void *)a6 = HIDWORD(v27) | ((unint64_t)v27 << 32);
  }
  if (v12 == *(_DWORD *)(a4 + 20)) {
    *(void *)(a6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11 | (v12 << 32);
  }
  unsigned int LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(a1, a2, a4, v11, v12);
  uint64_t result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(a1, a2, a4, HIDWORD(v27), v27);
  unsigned int v15 = result;
  unsigned int v17 = v27;
  unsigned int v16 = HIDWORD(v27);
  BOOL v18 = result != v27;
  BOOL v19 = LeftCandidate != HIDWORD(v27);
  if (__PAIR64__(LeftCandidate, result) != v27)
  {
    do
    {
      BOOL v20 = a1;
      if (v19)
      {
        if (!v18)
        {
          std::vector<unsigned int>::value_type v24 = LeftCandidate;
          std::vector<unsigned int>::value_type v25 = v17;
LABEL_14:
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(v20, v24, v25, v16, v16);
          HIDWORD(v27) = LeftCandidate;
          goto LABEL_15;
        }
        if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(a1, v16, v17, LeftCandidate, v15) != 2)
        {
          std::vector<unsigned int>::value_type v25 = v27;
          unsigned int v16 = HIDWORD(v27);
          BOOL v20 = a1;
          std::vector<unsigned int>::value_type v24 = LeftCandidate;
          goto LABEL_14;
        }
        int v22 = v27;
        std::vector<unsigned int>::value_type v21 = HIDWORD(v27);
        BOOL v20 = a1;
        std::vector<unsigned int>::value_type v23 = v15;
        unsigned int v17 = v27;
      }
      else
      {
        std::vector<unsigned int>::value_type v21 = v16;
        std::vector<unsigned int>::value_type v23 = v15;
        int v22 = v17;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(v20, v21, v23, v22, v17);
      LODWORD(v27) = v15;
LABEL_15:
      unsigned int LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(a1, a2, a4, HIDWORD(v27), v27);
      uint64_t result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(a1, a2, a4, HIDWORD(v27), v27);
      unsigned int v15 = result;
      unsigned int v17 = v27;
      unsigned int v16 = HIDWORD(v27);
      BOOL v18 = result != v27;
      BOOL v19 = LeftCandidate != HIDWORD(v27);
    }
    while (LeftCandidate != HIDWORD(v27) || result != v27);
  }
  return result;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitTriangle(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a2 + 1;
  uint64_t v7 = a2 + 2;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, a2 + 1);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, a2);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, v7);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, v6);
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = v7;
  uint64_t v8 = *((void *)a1 + 1);
  unint64_t v9 = (double *)(v8 + 24 * a2);
  double v10 = (*(double *)(v8 + 24 * v6) - *v9) * (*(double *)(v8 + 24 * v7 + 8) - v9[1])
      - (*(double *)(v8 + 24 * v6 + 8) - v9[1]) * (*(double *)(v8 + 24 * v7) - *v9);
  int v11 = v10 <= 0.0;
  if (v10 < 0.0) {
    int v11 = 2;
  }
  if (v11 == 2)
  {
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, v7);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, a2);
    unint64_t v12 = a2 | (unint64_t)(v7 << 32);
    *(void *)a3 = v12;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
  }
  else
  {
    if (!v11)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, v7);
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, a2);
    }
    *(void *)a3 = a2 | (unint64_t)(v6 << 32);
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6 | (v7 << 32);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitSegment(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a2 + 1;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, a2 + 1);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, a2);
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = v6;
  unint64_t v7 = a2 | (unint64_t)(v6 << 32);
  *(void *)a3 = v7;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetLowestCommonTangent(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, unsigned int a3, unsigned int *a4, std::vector<unsigned int>::value_type a5, unsigned int *a6, std::vector<unsigned int>::value_type *a7)
{
  std::vector<unsigned int>::value_type v9 = a5;
  if (*(_DWORD *)(a2 + 8) == a3) {
    unsigned int v11 = *(_DWORD *)(a2 + 12);
  }
  else {
    unsigned int v11 = *(_DWORD *)(a2 + 8);
  }
  if (*a4 == a5) {
    unsigned int v12 = a4[1];
  }
  else {
    unsigned int v12 = *a4;
  }
LABEL_7:
  uint64_t v13 = *((void *)this + 1);
  unint64_t v14 = (double *)(v13 + 24 * a3);
  double v15 = *v14;
  double v16 = v14[1];
  unsigned int v17 = (double *)(v13 + 24 * v11);
  double v18 = *v17 - v15;
  double v19 = -(v17[1] - v16);
  while (1)
  {
    BOOL v20 = (double *)(v13 + 24 * v9);
    double v21 = v20[1];
    if ((*v20 - v15) * v19 + v18 * (v21 - v16) > 0.0)
    {
      unsigned int PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v11, a3);
      a3 = v11;
      unsigned int v11 = PreviousEdge;
      goto LABEL_7;
    }
    if ((*(double *)(v13 + 24 * v12) - *v20) * (v16 - v21) - (*(double *)(v13 + 24 * v12 + 8) - v21) * (v15 - *v20) >= 0.0) {
      break;
    }
    uint64_t v22 = *(void *)(*((void *)this + 21) + 24 * v12);
    unint64_t v23 = (*(void *)(*((void *)this + 21) + 24 * v12 + 8) - v22) >> 2;
    if (*(void *)(*((void *)this + 21) + 24 * v12 + 8) == v22)
    {
LABEL_14:
      unsigned int v25 = -1;
    }
    else
    {
      uint64_t v24 = 0;
      unsigned int v25 = 0;
      while (*(_DWORD *)(v22 + 4 * v24) != v9)
      {
        uint64_t v24 = ++v25;
        if (v23 <= v25) {
          goto LABEL_14;
        }
      }
    }
    std::vector<unsigned int>::value_type v9 = v12;
    unsigned int v12 = *(_DWORD *)(v22 + 4 * ((v25 + 1) % v23));
  }
  *a6 = a3;
  *a7 = v9;
  std::vector<unsigned int>::value_type v27 = *a6;
  return geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, v27, v9, v11, v12);
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6 = a4;
  std::vector<unsigned int>::value_type v9 = *(unsigned int **)(*((void *)this + 21) + 24 * a4);
  double v10 = *(unsigned int **)(*((void *)this + 21) + 24 * a4 + 8);
  unint64_t v11 = v10 - v9;
  if (v10 == v9)
  {
    uint64_t v16 = *v10;
LABEL_11:
    unsigned int v15 = -1;
  }
  else
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    while (v9[v12] != a5)
    {
      uint64_t v12 = ++v13;
      if (v11 <= v13)
      {
        unsigned int v13 = -1;
        break;
      }
    }
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = v9[(v13 + 1) % v11];
    while (v9[v14] != v16)
    {
      uint64_t v14 = ++v15;
      if (v11 <= v15) {
        goto LABEL_11;
      }
    }
  }
  unsigned int v17 = *(_DWORD *)(a2 + 16);
  if (v16 >= v17)
  {
    unsigned int v18 = a4;
    double v19 = &v9[(v15 + 1) % v11];
    do
    {
      unsigned int v21 = *(_DWORD *)(a2 + 20);
      if (v16 > v21) {
        break;
      }
      uint64_t v22 = v16;
      uint64_t v16 = *v19;
      uint64_t v23 = *((void *)this + 1);
      uint64_t v24 = (double *)(v23 + 24 * v18);
      double v25 = *v24;
      double v26 = v24[1];
      std::vector<unsigned int>::value_type v27 = (double *)(v23 + 24 * a5);
      unint64_t v28 = (double *)(v23 + 24 * v22);
      double v29 = *v27 - v25;
      double v30 = v27[1] - v26;
      double v31 = *v28 - v25;
      double v32 = v28[1] - v26;
      double v33 = v29 * v32 - v30 * v31;
      int v34 = v33 <= 0.0;
      if (v33 < 0.0) {
        int v34 = 2;
      }
      if (v34 == 1)
      {
        if (v30 * v32 + v29 * v31 <= 0.0) {
          return v6;
        }
      }
      else if (v34 == 2)
      {
        return v6;
      }
      if (v16 < v17
        || v16 > v21
        || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v6, a5, v22, v16) != 2)
      {
        return v22;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v6, v22);
      uint64_t v35 = *(void *)(*((void *)this + 21) + 24 * v18);
      unint64_t v36 = (*(void *)(*((void *)this + 21) + 24 * v18 + 8) - v35) >> 2;
      if (*(void *)(*((void *)this + 21) + 24 * v18 + 8) == v35)
      {
LABEL_28:
        unsigned int v38 = -1;
      }
      else
      {
        uint64_t v37 = 0;
        unsigned int v38 = 0;
        while (*(_DWORD *)(v35 + 4 * v37) != v16)
        {
          uint64_t v37 = ++v38;
          if (v36 <= v38) {
            goto LABEL_28;
          }
        }
      }
      double v19 = (unsigned int *)(v35 + 4 * ((v38 + 1) % v36));
      unsigned int v17 = *(_DWORD *)(a2 + 16);
    }
    while (v16 >= v17);
  }
  return v6;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, a5, a4);
  uint64_t v10 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, v5, PreviousEdge);
  unsigned int v11 = *(_DWORD *)(a3 + 16);
  if (PreviousEdge >= v11)
  {
    do
    {
      unsigned int v12 = *(_DWORD *)(a3 + 20);
      if (PreviousEdge > v12) {
        break;
      }
      uint64_t v13 = v10;
      uint64_t v14 = *((void *)a1 + 1);
      unsigned int v15 = (double *)(v14 + 24 * v5);
      double v16 = *v15;
      double v17 = v15[1];
      unsigned int v18 = (double *)(v14 + 24 * a4);
      double v19 = (double *)(v14 + 24 * PreviousEdge);
      double v20 = *v18 - v16;
      double v21 = v18[1] - v17;
      double v22 = *v19 - v16;
      double v23 = v19[1] - v17;
      double v24 = v20 * v23 - v21 * v22;
      int v25 = v24 <= 0.0;
      if (v24 < 0.0) {
        int v25 = 2;
      }
      if (v25 == 1)
      {
        if (v21 * v23 + v20 * v22 <= 0.0) {
          return v5;
        }
      }
      else if (!v25)
      {
        return v5;
      }
      if (v10 < v11
        || v10 > v12
        || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(a1, a4, v5, PreviousEdge, v10) != 2)
      {
        return PreviousEdge;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(a1, v5, PreviousEdge);
      uint64_t v10 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, v5, v13);
      unsigned int v11 = *(_DWORD *)(a3 + 16);
      uint64_t PreviousEdge = v13;
    }
    while (v13 >= v11);
  }
  return v5;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::value_type a3, int a4, int a5)
{
  std::vector<unsigned int>::value_type __x = a3;
  std::vector<unsigned int>::value_type v25 = a2;
  unint64_t v7 = (std::vector<unsigned int> *)(*((void *)this + 21) + 24 * a2);
  std::vector<unsigned int>::pointer begin = v7->__begin_;
  end = v7->__end_;
  uint64_t v10 = (char *)end - (char *)v7->__begin_;
  if (end == v7->__begin_)
  {
LABEL_5:
    unsigned int v12 = -1;
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = v10 >> 2;
    while (begin[v11] != a4)
    {
      uint64_t v11 = ++v12;
      if (v13 <= v12) {
        goto LABEL_5;
      }
    }
  }
  v14.__i_ = &begin[v12 + 1];
  std::vector<unsigned int>::insert(v7, v14, &__x);
  unsigned int v15 = (std::vector<unsigned int> *)(*((void *)this + 21) + 24 * __x);
  std::vector<unsigned int>::pointer v16 = v15->__begin_;
  double v17 = v15->__end_;
  uint64_t v18 = (char *)v17 - (char *)v15->__begin_;
  if (v17 == v15->__begin_)
  {
LABEL_10:
    unsigned int v20 = -1;
  }
  else
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    unint64_t v21 = v18 >> 2;
    while (v16[v19] != a5)
    {
      uint64_t v19 = ++v20;
      if (v21 <= v20) {
        goto LABEL_10;
      }
    }
  }
  v22.__i_ = &v16[v20];
  return std::vector<unsigned int>::insert(v15, v22, &v25).__i_;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (double *)(v5 + 24 * a2);
  double v7 = *v6;
  double v8 = v6[1];
  std::vector<unsigned int>::value_type v9 = (double *)(v5 + 24 * a3);
  double v10 = *v9;
  double v11 = v9[1];
  unsigned int v12 = (double *)(v5 + 24 * a4);
  unint64_t v13 = (double *)(v5 + 24 * a5);
  double v14 = v13[1];
  double v15 = v7 - *v13;
  double v16 = v10 - *v13;
  double v17 = v11 - v14;
  double v18 = *v12 - *v13;
  double v19 = v12[1] - v14;
  double v20 = v15 * (v17 * (v18 * v18 + 0.0 + v19 * v19) - v19 * (v16 * v16 + 0.0 + v17 * v17))
      - (v8 - v14) * (v16 * (v18 * v18 + 0.0 + v19 * v19) - (v16 * v16 + 0.0 + v17 * v17) * v18)
      + (v15 * v15 + 0.0 + (v8 - v14) * (v8 - v14)) * (v16 * v19 - v17 * v18);
  if (v20 <= 0.0) {
    return v20 >= 0.0;
  }
  else {
    return 2;
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(*((void *)this + 21) + 24 * a2);
  unint64_t v4 = (*(void *)(*((void *)this + 21) + 24 * a2 + 8) - v3) >> 2;
  if (*(void *)(*((void *)this + 21) + 24 * a2 + 8) == v3)
  {
LABEL_5:
    unsigned int v6 = -1;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    while (*(_DWORD *)(v3 + 4 * v5) != a3)
    {
      uint64_t v5 = ++v6;
      if (v4 <= v6) {
        goto LABEL_5;
      }
    }
  }
  return *(unsigned int *)(v3 + 4 * ((v4 + v6 - 1) % v4));
}

void *geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(void *this, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = this;
  uint64_t v6 = this[21];
  uint64_t v7 = v6 + 24 * a2;
  uint64_t v10 = *(void *)(v7 + 8);
  std::vector<unsigned int>::value_type v9 = (void *)(v7 + 8);
  uint64_t v8 = v10;
  uint64_t v11 = *(void *)(v6 + 24 * a2);
  uint64_t v12 = v10 - v11;
  if (v10 == v11)
  {
LABEL_5:
    unsigned int v14 = -1;
  }
  else
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    unint64_t v15 = v12 >> 2;
    while (*(_DWORD *)(v11 + 4 * v13) != a3)
    {
      uint64_t v13 = ++v14;
      if (v15 <= v14) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v16 = v11 + 4 * v14;
  uint64_t v17 = v8 - (v16 + 4);
  if (v8 != v16 + 4)
  {
    this = memmove((void *)(v11 + 4 * v14), (const void *)(v16 + 4), v8 - (v16 + 4));
    uint64_t v6 = v5[21];
  }
  *std::vector<unsigned int>::value_type v9 = v16 + v17;
  uint64_t v18 = v6 + 24 * a3;
  uint64_t v21 = *(void *)(v18 + 8);
  double v20 = (void *)(v18 + 8);
  uint64_t v19 = v21;
  uint64_t v22 = *(void *)(v6 + 24 * a3);
  uint64_t v23 = v21 - v22;
  if (v21 == v22)
  {
LABEL_12:
    unsigned int v25 = -1;
  }
  else
  {
    uint64_t v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = v23 >> 2;
    while (*(_DWORD *)(v22 + 4 * v24) != a2)
    {
      uint64_t v24 = ++v25;
      if (v26 <= v25) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v27 = v22 + 4 * v25;
  uint64_t v28 = v19 - (v27 + 4);
  if (v19 != v27 + 4) {
    this = memmove((void *)(v22 + 4 * v25), (const void *)(v27 + 4), v19 - (v27 + 4));
  }
  *double v20 = v27 + v28;
  return this;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3 = __x;
  std::vector<int>::pointer i = (unsigned int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      abort();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)&this->__end_cap_;
    if (v18) {
      uint64_t v19 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    double v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 1;
        }
        uint64_t v23 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v22);
        double v20 = (unsigned int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *double v20 = *v3;
    __v.__end_ = v20 + 1;
    std::vector<int>::pointer i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const unsigned int *>::iterator_type v9 = __position.__i_ + 1;
    uint64_t v10 = end - 1;
    std::vector<unsigned int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      unsigned int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    if (i <= v3) {
      v3 += this->__end_ > v3;
    }
    *std::vector<int>::pointer i = *v3;
  }
  return (std::vector<unsigned int>::iterator)i;
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  uint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, std::vector<unsigned int>::value_type a3)
{
  std::vector<unsigned int>::value_type __x = a3;
  uint64_t v5 = *((void *)this + 21);
  std::vector<unsigned int>::pointer v6 = (std::vector<unsigned int> *)(v5 + 24 * a2);
  p_end = &v6->__end_;
  end = v6->__end_;
  v9.__i_ = v6->__begin_;
  uint64_t v10 = (char *)end - (char *)v6->__begin_;
  unint64_t v11 = v10 >> 2;
  if (end == v6->__begin_)
  {
    uint64_t v22 = v5 + 24 * a2;
    unint64_t v25 = *(void *)(v22 + 16);
    uint64_t v24 = (char **)(v22 + 16);
    unint64_t v23 = v25;
    if ((unint64_t)end < v25)
    {
LABEL_30:
      unsigned int *end = a3;
      uint64_t v35 = end + 1;
LABEL_51:
      *p_end = v35;
      return;
    }
    uint64_t v26 = v23 - (unint64_t)v9.__i_;
    if (v26 >> 1 <= v11 + 1) {
      uint64_t v27 = v11 + 1;
    }
    else {
      uint64_t v27 = v26 >> 1;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    double v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v24, v28);
    double v30 = *p_end;
    std::vector<unsigned int>::pointer begin = v6->__begin_;
    double v32 = (std::vector<unsigned int>::value_type *)&v29[4 * v11];
    int v34 = &v29[4 * v33];
    *double v32 = a3;
    uint64_t v35 = v32 + 1;
    while (v30 != begin)
    {
      std::vector<unsigned int>::value_type v36 = *--v30;
      *--double v32 = v36;
    }
LABEL_49:
    v6->__begin_ = v32;
    *p_end = v35;
    *uint64_t v24 = v34;
    if (begin) {
      operator delete(begin);
    }
    goto LABEL_51;
  }
  uint64_t v12 = *((void *)this + 1);
  uint64_t v13 = (double *)(v12 + 24 * a2);
  double v14 = *v13;
  double v15 = v13[1];
  uint64_t v16 = (double *)(v12 + 24 * a3);
  double v17 = *v16 - *v13;
  double v18 = v16[1] - v15;
  double v19 = (*(double *)(v12 + 24 * *v9.__i_) - *v13) * v18 - (*(double *)(v12 + 24 * *v9.__i_ + 8) - v15) * v17;
  int v20 = v19 <= 0.0;
  if (v19 < 0.0) {
    int v20 = 2;
  }
  if (v10 == 4)
  {
    if (v20)
    {
      unint64_t v21 = v6;
LABEL_39:
      std::vector<unsigned int>::insert(v21, v9, &__x);
      return;
    }
    uint64_t v48 = v5 + 24 * a2;
    unint64_t v50 = *(void *)(v48 + 16);
    uint64_t v24 = (char **)(v48 + 16);
    unint64_t v49 = v50;
    if ((unint64_t)end < v50) {
      goto LABEL_30;
    }
    uint64_t v57 = v49 - (unint64_t)v9.__i_;
    if (v57 >> 1 <= v11 + 1) {
      uint64_t v58 = v11 + 1;
    }
    else {
      uint64_t v58 = v57 >> 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    unint64_t v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v24, v59);
    unint64_t v61 = *p_end;
    std::vector<unsigned int>::pointer begin = v6->__begin_;
    double v32 = (std::vector<unsigned int>::value_type *)&v60[4 * v11];
    int v34 = &v60[4 * v62];
    *double v32 = a3;
    uint64_t v35 = v32 + 1;
    while (v61 != begin)
    {
      std::vector<unsigned int>::value_type v63 = *--v61;
      *--double v32 = v63;
    }
    goto LABEL_49;
  }
  if ((unint64_t)v10 >= 5)
  {
    if (v11 <= 2) {
      uint64_t v37 = 2;
    }
    else {
      uint64_t v37 = v10 >> 2;
    }
    std::__wrap_iter<const unsigned int *>::iterator_type v38 = v9.__i_ + 1;
    uint64_t v39 = v37 - 1;
    uint64_t v40 = v9.__i_ + 1;
    while (1)
    {
      unsigned int v41 = *v38++;
      double v42 = (*(double *)(v12 + 24 * v41) - v14) * v18 - (*(double *)(v12 + 24 * v41 + 8) - v15) * v17;
      if (!v20 && v42 < 0.0) {
        break;
      }
      int v20 = v42 <= 0.0;
      if (v42 < 0.0) {
        int v20 = 2;
      }
      ++v40;
      if (!--v39) {
        goto LABEL_27;
      }
    }
    unint64_t v21 = v6;
    v9.__i_ = v40;
    goto LABEL_39;
  }
LABEL_27:
  uint64_t v43 = v5 + 24 * a2;
  unint64_t v46 = *(void *)(v43 + 16);
  unint64_t v45 = (char **)(v43 + 16);
  unint64_t v44 = v46;
  if ((unint64_t)end >= v46)
  {
    unint64_t v51 = v11 + 1;
    if ((v11 + 1) >> 62) {
      abort();
    }
    uint64_t v52 = v44 - (unint64_t)v9.__i_;
    if (v52 >> 1 > v51) {
      unint64_t v51 = v52 >> 1;
    }
    BOOL v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v53) {
      unint64_t v54 = v51;
    }
    if (v54)
    {
      unint64_t v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v45, v54);
      unint64_t v54 = v56;
      end = *p_end;
      v9.__i_ = v6->__begin_;
    }
    else
    {
      unint64_t v55 = 0;
    }
    uint64_t v64 = (std::vector<unsigned int>::value_type *)&v55[4 * v11];
    float32x2_t v65 = &v55[4 * v54];
    *uint64_t v64 = a3;
    BOOL v47 = v64 + 1;
    while (end != v9.__i_)
    {
      std::vector<unsigned int>::value_type v66 = *--end;
      *--uint64_t v64 = v66;
    }
    v6->__begin_ = v64;
    *p_end = v47;
    *unint64_t v45 = v65;
    if (v9.__i_) {
      operator delete((void *)v9.__i_);
    }
  }
  else
  {
    unsigned int *end = a3;
    BOOL v47 = end + 1;
  }
  *p_end = v47;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints(uint64_t a1, uint64_t *a2, void *a3)
{
  memset(v35, 0, sizeof(v35));
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  std::vector<std::vector<unsigned long>>::resize(v35, v8);
  if (v6 == v7)
  {
    std::vector<std::vector<unsigned long>>::resize(a3, v8);
    BOOL v9 = 1;
  }
  else
  {
    int v34 = a3;
    BOOL v9 = 0;
    uint64_t v10 = 0;
    if (v8 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v8;
    }
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*a2 + 24 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      std::vector<int>::size_type v15 = (v14 - *v12) >> 3;
      uint64_t v16 = (std::vector<int> *)(v35[0] + 24 * v10);
      std::vector<unsigned int>::resize(v16, v15);
      if (v14 != v13) {
        break;
      }
LABEL_12:
      BOOL v9 = ++v10 >= v8;
      if (v10 == v11)
      {
        std::vector<std::vector<unsigned long>>::resize(v34, v8);
        uint64_t v24 = 0;
        uint64_t v25 = a1 + 352;
        BOOL v9 = 1;
        do
        {
          unint64_t v26 = (uint64_t)(*(void *)(v35[0] + 24 * v24 + 8) - *(void *)(v35[0] + 24 * v24)) >> 2;
          uint64_t v27 = (void *)(*v34 + 24 * v24);
          std::vector<geo::math::Matrix<unsigned int,2,1>>::resize((uint64_t)v27, v26);
          unint64_t v28 = v26 - 1;
          if (v28)
          {
            uint64_t v29 = 0;
            do
            {
              uint64_t v30 = v29 + 1;
              uint64_t v31 = *(void *)(*(void *)(v35[0] + 24 * v24) + 4 * v29);
              *(void *)(*v27 + 8 * v29) = v31;
              geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(v31, v25);
              uint64_t v29 = v30;
            }
            while (v28 != v30);
          }
          unint64_t v32 = *(unsigned int *)(*(void *)(v35[0] + 24 * v24) + 4 * v28) | ((unint64_t)**(unsigned int **)(v35[0] + 24 * v24) << 32);
          *(void *)(*v27 + 8 * v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v32;
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(v32, v25);
          ++v24;
        }
        while (v24 != v11);
        goto LABEL_20;
      }
    }
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(*a2 + 24 * v10);
    uint64_t v19 = *(void *)(a1 + 56);
    unint64_t v20 = (*(void *)(a1 + 64) - v19) >> 2;
    if (v15 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v15;
    }
    while (1)
    {
      unint64_t v22 = *(void *)(v18 + 8 * v17);
      if (v20 <= v22) {
        break;
      }
      int v23 = *(_DWORD *)(v19 + 4 * v22);
      if (v23 == -1) {
        break;
      }
      v16->__begin_[v17++] = v23;
      if (v21 == v17) {
        goto LABEL_12;
      }
    }
  }
LABEL_20:
  std::vector<unsigned int>::value_type v36 = (void **)v35;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v36);
  return v9;
}

void std::vector<geo::math::Matrix<unsigned int,2,1>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<geo::math::Matrix<unsigned int,2,1>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<geo::math::Matrix<unsigned int,2,1>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 3)
  {
    a1[1] = &v6[8 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - v7;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    std::vector<int>::size_type v15 = &v13[8 * v12];
    uint64_t v16 = &v14[8 * a2];
    if (v6 != v7)
    {
      do
      {
        uint64_t v17 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v17;
        v14 -= 8;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void *geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  if (a1 < HIDWORD(a1)) {
    return std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(a2, &v4, &v4);
  }
  unint64_t v3 = __PAIR64__(a1, HIDWORD(a1));
  return std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(a2, &v3, &v3);
}

void *std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(uint64_t a1, _DWORD *a2, void *a3)
{
  unint64_t v6 = (a2[1] ^ *a2) + 2654435769;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v3 = (a2[1] ^ *a2) + 2654435769;
      if (v6 >= v7) {
        uint64_t v3 = v6 % v7;
      }
    }
    else
    {
      uint64_t v3 = v6 & (v7 + 0x1FFFFFFFFLL);
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (std::vector<int>::pointer i = *v9; i; std::vector<int>::pointer i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *(void *)a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  std::vector<int>::pointer i = operator new(0x18uLL);
  *std::vector<int>::pointer i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        uint64_t v3 = v6 % v7;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    else
    {
      uint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *std::vector<int>::pointer i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *std::vector<int>::pointer i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*((void *)this + 21) + 24 * a2);
  uint64_t v7 = *(void *)(*((void *)this + 21) + 24 * a2 + 8) - v6;
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  unint64_t v9 = v7 >> 2;
  unsigned int v10 = 1;
  while (*(_DWORD *)(v6 + 4 * v8) != a3)
  {
    uint64_t v8 = v10;
    if (v9 <= v10++) {
      goto LABEL_7;
    }
  }
  if (!v10)
  {
LABEL_7:
    uint64_t result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ApplyConstraint(this, a2, a3);
    if (!result) {
      return result;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AdjustByConstraint(this, a2, a3);
  }
  return 1;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::ApplyConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, std::vector<unsigned int>::value_type a3)
{
  uint64_t v6 = *((void *)this + 2) - *((void *)this + 1);
  if (!v6)
  {
LABEL_13:
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(this, a2, a3);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(this, a3, a2);
    return 1;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  uint64_t v9 = *((void *)this + 21);
  while (1)
  {
    uint64_t v10 = *(void *)(v9 + 24 * v7);
    if (*(void *)(v9 + 24 * v7 + 8) != v10) {
      break;
    }
LABEL_12:
    uint64_t v7 = ++v8;
    if (v15 <= v8) {
      goto LABEL_13;
    }
  }
  unint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)(v10 + 4 * v11);
    if (!geo::math::ConstrainedDelaunayTriangulationMesherDetails::IsIntersect(this, v8, *(_DWORD *)(v10 + 4 * v11), a2, a3))
    {
      ++v11;
      goto LABEL_11;
    }
    uint64_t v13 = (v7 << 32) | v12;
    if (v8 < v12) {
      uint64_t v13 = v7 | (v12 << 32);
    }
    uint64_t v16 = v13;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)this + 44, &v16))
    {
      return 0;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v8, v12);
LABEL_11:
    uint64_t v9 = *((void *)this + 21);
    uint64_t v10 = *(void *)(v9 + 24 * v7);
    if (v11 >= (*(void *)(v9 + 24 * v7 + 8) - v10) >> 2) {
      goto LABEL_12;
    }
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::AdjustByConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  Constrainedunsigned int LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, a2, a3);
  uint64_t ConstrainedRightCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v4, v3);
  BOOL v8 = ConstrainedLeftCandidate == v4;
  BOOL v9 = ConstrainedRightCandidate == v3;
  if (ConstrainedRightCandidate != v3 || ConstrainedLeftCandidate != v4)
  {
    uint64_t v11 = ConstrainedRightCandidate;
    if (ConstrainedLeftCandidate != ConstrainedRightCandidate)
    {
      uint64_t v12 = v4;
      uint64_t v13 = v3;
      do
      {
        if (v8
          || !v9
          && geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v12, v13, ConstrainedLeftCandidate, v11) == 2)
        {
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, v12, v11, v13, v13);
          uint64_t v13 = v11;
        }
        else
        {
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, ConstrainedLeftCandidate, v13, v12, v12);
          uint64_t v12 = ConstrainedLeftCandidate;
        }
        Constrainedunsigned int LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, v12, v13);
        uint64_t v14 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v12, v13);
        BOOL v8 = ConstrainedLeftCandidate == v12;
        BOOL v9 = v14 == v13;
        if (v14 == v13 && ConstrainedLeftCandidate == v12) {
          break;
        }
        uint64_t v11 = v14;
      }
      while (ConstrainedLeftCandidate != v14);
    }
  }
  while (1)
  {
    uint64_t v17 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, v3, v4);
    uint64_t result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v3, v4);
    if (v17 == v3 && result == v4) {
      break;
    }
    uint64_t v16 = result;
    if (result == v17) {
      break;
    }
    if (result == v4
      || v17 != v3
      && geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v4, result, v3, v17) == 2)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(this, v4, v17, v3, v3);
      uint64_t v3 = v17;
    }
    else
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(this, v16, v3, v4, v4);
      uint64_t v4 = v16;
    }
  }
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::IsIntersect(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t result = 0;
  if (a3 != a5 && a3 != a4 && a2 != a4 && a2 != a5)
  {
    uint64_t v7 = *((void *)this + 1);
    BOOL v8 = (double *)(v7 + 24 * a4);
    double v9 = *v8;
    double v10 = v8[1];
    uint64_t v11 = (double *)(v7 + 24 * a5);
    double v12 = *v11;
    double v13 = v11[1];
    uint64_t v14 = (double *)(v7 + 24 * a2);
    double v15 = v14[1];
    uint64_t v16 = (double *)(v7 + 24 * a3);
    double v17 = *v16;
    double v18 = v16[1];
    double v19 = *v16 - *v14;
    double v20 = v19 * (v10 - v15) - (v18 - v15) * (v9 - *v14);
    double v21 = v19 * (v13 - v15) - (v18 - v15) * (v12 - *v14);
    int v22 = (v21 > 0.0) ^ (v20 <= 0.0);
    if (v21 < 0.0) {
      int v22 = 0;
    }
    double v23 = v12 - v9;
    double v24 = v13 - v10;
    double v25 = v23 * (v15 - v10) - v24 * (*v14 - v9);
    double v26 = v23 * (v18 - v10) - v24 * (v17 - v9);
    if (v20 < 0.0) {
      int v22 = v21 < 0.0;
    }
    int v27 = (v25 <= 0.0) ^ (v26 > 0.0);
    if (v26 < 0.0) {
      int v27 = 0;
    }
    if (v25 < 0.0) {
      int v27 = v26 < 0.0;
    }
    return (v27 | v22) ^ 1u;
  }
  return result;
}

void *std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>(void *a1, _DWORD *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = (a2[1] ^ *a2) + 2654435769;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = (a2[1] ^ *a2) + 2654435769;
    if (v3 >= *(void *)&v2) {
      uint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v5 = v3 & (*(void *)&v2 + 0x1FFFFFFFFLL);
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *(void *)a2) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2;
  uint64_t v7 = *(unsigned int **)(*((void *)this + 21) + 24 * a2);
  unint64_t v8 = *(unsigned int **)(*((void *)this + 21) + 24 * a2 + 8);
  unint64_t v9 = v8 - v7;
  if (v8 == v7)
  {
    uint64_t v14 = *v8;
LABEL_11:
    unsigned int v13 = -1;
  }
  else
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    while (v7[v10] != a3)
    {
      uint64_t v10 = ++v11;
      if (v9 <= v11)
      {
        unsigned int v11 = -1;
        break;
      }
    }
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = v7[(v11 + 1) % v9];
    while (v7[v12] != v14)
    {
      uint64_t v12 = ++v13;
      if (v9 <= v13) {
        goto LABEL_11;
      }
    }
  }
  double v15 = &v7[(v13 + 1) % v9];
  while (1)
  {
    uint64_t v17 = *((void *)this + 1);
    double v18 = (double *)(v17 + 24 * v6);
    if ((*(double *)(v17 + 24 * a3) - *v18) * (*(double *)(v17 + 24 * v14 + 8) - v18[1])
       - (*(double *)(v17 + 24 * a3 + 8) - v18[1]) * (*(double *)(v17 + 24 * v14) - *v18) <= 0.0)
      return v4;
    uint64_t v19 = *v15;
    unint64_t v20 = v6 | ((unint64_t)v14 << 32);
    if (v14 <= v4) {
      unint64_t v20 = (v6 << 32) | v14;
    }
    unint64_t v28 = v20;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)this + 44, &v28))
    {
      return v14;
    }
    uint64_t v21 = *((void *)this + 1);
    int v22 = (double *)(v21 + 24 * v6);
    if ((*(double *)(v21 + 24 * a3) - *v22) * (*(double *)(v21 + 24 * v19 + 8) - v22[1])
       - (*(double *)(v21 + 24 * a3 + 8) - v22[1]) * (*(double *)(v21 + 24 * v19) - *v22) <= 0.0
      || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v4, a3, v14, v19) != 2)
    {
      return v14;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v4, v14);
    uint64_t v23 = *(void *)(*((void *)this + 21) + 24 * v6);
    unint64_t v24 = (*(void *)(*((void *)this + 21) + 24 * v6 + 8) - v23) >> 2;
    if (*(void *)(*((void *)this + 21) + 24 * v6 + 8) == v23)
    {
LABEL_23:
      unsigned int v26 = -1;
    }
    else
    {
      uint64_t v25 = 0;
      unsigned int v26 = 0;
      while (*(_DWORD *)(v23 + 4 * v25) != v19)
      {
        uint64_t v25 = ++v26;
        if (v24 <= v26) {
          goto LABEL_23;
        }
      }
    }
    double v15 = (unsigned int *)(v23 + 4 * ((v26 + 1) % v24));
    uint64_t v14 = v19;
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, a3, a2);
  for (uint64_t i = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v3, PreviousEdge);
        ;
        uint64_t i = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v3, i))
  {
    uint64_t v8 = *((void *)this + 1);
    unint64_t v9 = (double *)(v8 + 24 * v3);
    if ((*(double *)(v8 + 24 * a2) - *v9) * (*(double *)(v8 + 24 * PreviousEdge + 8) - v9[1])
       - (*(double *)(v8 + 24 * a2 + 8) - v9[1]) * (*(double *)(v8 + 24 * PreviousEdge) - *v9) >= 0.0)
      break;
    unint64_t v10 = v3 | ((unint64_t)PreviousEdge << 32);
    if (PreviousEdge <= v3) {
      unint64_t v10 = (v3 << 32) | PreviousEdge;
    }
    unint64_t v14 = v10;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((void *)this + 44, &v14))
    {
      return PreviousEdge;
    }
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = (double *)(v11 + 24 * v3);
    if ((*(double *)(v11 + 24 * a2) - *v12) * (*(double *)(v11 + 24 * i + 8) - v12[1])
       - (*(double *)(v11 + 24 * a2 + 8) - v12[1]) * (*(double *)(v11 + 24 * i) - *v12) >= 0.0
      || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, a2, v3, PreviousEdge, i) != 2)
    {
      return PreviousEdge;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v3, PreviousEdge);
    uint64_t PreviousEdge = i;
  }
  return v3;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::value_type a3, int a4, int a5)
{
  std::vector<unsigned int>::value_type __x = a3;
  std::vector<unsigned int>::value_type v25 = a2;
  uint64_t v7 = (std::vector<unsigned int> *)(*((void *)this + 21) + 24 * a2);
  std::vector<unsigned int>::pointer begin = v7->__begin_;
  end = v7->__end_;
  uint64_t v10 = (char *)end - (char *)v7->__begin_;
  if (end == v7->__begin_)
  {
LABEL_5:
    unsigned int v12 = -1;
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = v10 >> 2;
    while (begin[v11] != a4)
    {
      uint64_t v11 = ++v12;
      if (v13 <= v12) {
        goto LABEL_5;
      }
    }
  }
  v14.__i_ = &begin[v12];
  std::vector<unsigned int>::insert(v7, v14, &__x);
  double v15 = (std::vector<unsigned int> *)(*((void *)this + 21) + 24 * __x);
  std::vector<unsigned int>::pointer v16 = v15->__begin_;
  uint64_t v17 = v15->__end_;
  uint64_t v18 = (char *)v17 - (char *)v15->__begin_;
  if (v17 == v15->__begin_)
  {
LABEL_10:
    unsigned int v20 = -1;
  }
  else
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    unint64_t v21 = v18 >> 2;
    while (v16[v19] != a5)
    {
      uint64_t v19 = ++v20;
      if (v21 <= v20) {
        goto LABEL_10;
      }
    }
  }
  v22.__i_ = &v16[v20 + 1];
  return std::vector<unsigned int>::insert(v15, v22, &v25).__i_;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, void *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  __p = 0;
  uint64_t v64 = 0;
  uint64_t v4 = v2 - v3;
  if (!v4) {
    return 1;
  }
  uint64_t v5 = a2;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  BOOL v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = v4 / 24;
  if ((unint64_t)(v4 / 24) <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v4 / 24;
  }
  while (1)
  {
    uint64_t v13 = *(void *)(*v5 + 24 * v10 + 8) - *(void *)(*v5 + 24 * v10);
    if (v13) {
      break;
    }
LABEL_58:
    BOOL v9 = ++v10 >= v11;
    if (v10 == v12)
    {
      BOOL v9 = 1;
      goto LABEL_66;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = v13 >> 3;
  if ((unint64_t)(v13 >> 3) <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = v13 >> 3;
  }
  while (2)
  {
    uint64_t v17 = *(void *)(*v5 + 24 * v10);
    uint64_t v18 = *(void *)(v17 + 8 * v14);
    if (v14) {
      uint64_t v19 = v14;
    }
    else {
      uint64_t v19 = v15;
    }
    unsigned int v20 = (uint64_t *)(*((void *)this + 21) + 24 * v18);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1] - *v20;
    if (v22)
    {
      uint64_t v23 = 0;
      unsigned int v24 = 0;
      int v25 = *(_DWORD *)(v17 + 8 * v19 - 8);
      unint64_t v26 = v22 >> 2;
      while (*(_DWORD *)(v21 + 4 * v23) != HIDWORD(v18))
      {
        uint64_t v23 = ++v24;
        if (v26 <= v24) {
          goto LABEL_60;
        }
      }
      if (v24 != -1)
      {
        uint64_t v27 = 0;
        unsigned int v28 = 1;
        while (*(_DWORD *)(v21 + 4 * v27) != v25)
        {
          uint64_t v27 = v28;
          if (v26 <= v28++) {
            goto LABEL_63;
          }
        }
        if (!v28)
        {
LABEL_63:
          if (!*(unsigned char *)this) {
            goto LABEL_66;
          }
          unint64_t v49 = (void *)MEMORY[0x263F8C0F8];
          unint64_t v50 = "ClearSpaceByConstraints failed: cannot locate previous edge!";
          uint64_t v51 = 60;
          goto LABEL_65;
        }
        uint64_t v58 = v15;
        uint64_t v59 = v16;
        uint64_t v60 = v14;
        uint64_t v61 = v12;
        unint64_t v30 = (unint64_t)v22 >> 2;
        if (v24 >= v28 - 1) {
          LODWORD(v30) = 0;
        }
        uint64_t v31 = v30 + v24;
        std::vector<unsigned int>::value_type v63 = v8;
        if (v28 < v31)
        {
          unint64_t v55 = v11;
          uint64_t v56 = v10;
          uint64_t v57 = v5;
          unint64_t v32 = v28;
          uint64_t v33 = (void *)((char *)this + 352);
          do
          {
            unint64_t v34 = v32 % v26;
            uint64_t v35 = *(unsigned int *)(*(void *)(*((void *)this + 21) + 24 * v18) + 4 * (v32 % v26));
            if (v35 <= v18) {
              std::vector<unsigned int>::value_type v36 = (std::locale::__imp *)(((unint64_t)v18 << 32) | v35);
            }
            else {
              std::vector<unsigned int>::value_type v36 = (std::locale::__imp *)(v18 | (unint64_t)(v35 << 32));
            }
            v65.__locale_ = v36;
            if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>(v33, &v65))
            {
              uint64_t v37 = *(void *)(*((void *)this + 21) + 24 * v18);
              std::__wrap_iter<const unsigned int *>::iterator_type v38 = v63;
              if (v63 >= v64)
              {
                uint64_t v40 = __p;
                uint64_t v41 = (v63 - __p) >> 2;
                unint64_t v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62) {
                  abort();
                }
                uint64_t v43 = v64 - __p;
                if ((v64 - __p) >> 1 > v42) {
                  unint64_t v42 = v43 >> 1;
                }
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v44 = v42;
                }
                if (v44)
                {
                  unint64_t v45 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v64, v44);
                  uint64_t v40 = __p;
                  std::__wrap_iter<const unsigned int *>::iterator_type v38 = v63;
                }
                else
                {
                  unint64_t v45 = 0;
                }
                unint64_t v46 = &v45[4 * v41];
                *(_DWORD *)unint64_t v46 = *(_DWORD *)(v37 + 4 * v34);
                uint64_t v39 = v46 + 4;
                if (v38 == v40)
                {
                  uint64_t v33 = (void *)((char *)this + 352);
                }
                else
                {
                  uint64_t v33 = (void *)((char *)this + 352);
                  do
                  {
                    int v47 = *((_DWORD *)v38 - 1);
                    v38 -= 4;
                    *((_DWORD *)v46 - 1) = v47;
                    v46 -= 4;
                  }
                  while (v38 != v40);
                }
                __p = v46;
                uint64_t v64 = &v45[4 * v44];
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                *(_DWORD *)std::vector<unsigned int>::value_type v63 = *(_DWORD *)(v37 + 4 * v34);
                uint64_t v39 = v63 + 4;
              }
              std::vector<unsigned int>::value_type v63 = v39;
            }
            ++v32;
          }
          while (v32 != v31);
          uint64_t v7 = __p;
          uint64_t v8 = v63;
          uint64_t v10 = v56;
          uint64_t v5 = v57;
          unint64_t v11 = v55;
        }
        if (v8 == v7)
        {
          uint64_t v15 = v58;
        }
        else
        {
          unint64_t v48 = 0;
          uint64_t v15 = v58;
          do
          {
            geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v18, *(_DWORD *)&v7[4 * v48++]);
            uint64_t v7 = __p;
          }
          while (v48 < (v63 - __p) >> 2);
        }
        uint64_t v16 = v59;
        uint64_t v14 = v60 + 1;
        uint64_t v8 = v7;
        uint64_t v12 = v61;
        if (v60 + 1 != v59) {
          continue;
        }
        goto LABEL_58;
      }
    }
    break;
  }
LABEL_60:
  if (*(unsigned char *)this)
  {
    unint64_t v49 = (void *)MEMORY[0x263F8C0F8];
    unint64_t v50 = "ClearSpaceByConstraints failed: cannot locate current edge!";
    uint64_t v51 = 59;
LABEL_65:
    uint64_t v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
    BOOL v53 = std::locale::use_facet(&v65, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(&v65);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v7 = __p;
  }
LABEL_66:
  if (v7) {
    operator delete(v7);
  }
  return v9;
}

unint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetEdgeCount(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v1 = *((void *)this + 22);
  uint64_t v3 = v1 - v2;
  if (v1 == v2) {
    return 0;
  }
  unint64_t v4 = 0;
  unint64_t v5 = v3 / 24;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  uint64_t v6 = (void *)(v2 + 8);
  do
  {
    v4 += (uint64_t)(*v6 - *(v6 - 1)) >> 2;
    v6 += 3;
    --v5;
  }
  while (v5);
  return v4 >> 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::RebaseMesh(void *a1, void *a2, uint64_t a3)
{
  a2[1] = *a2;
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  uint64_t v6 = a1[5] - a1[4];
  if (v5 == v6 >> 2)
  {
    uint64_t v56 = a1[5] - a1[4];
    unint64_t v10 = v5 + ((uint64_t)(a1[14] - a1[13]) >> 5);
    int64x2_t v58 = vdupq_n_s64(0xC7EFFFFFE0000000);
    unint64_t v59 = 0xC7EFFFFFE0000000;
    std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)a2, v10, (long long *)v58.i8);
    if (v3 != v4)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      if (v5 <= 1) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
      }
      do
      {
        uint64_t v14 = (long long *)(a1[1] + v11);
        uint64_t v15 = *a2 + 24 * *(unsigned int *)(a1[4] + 4 * v12);
        long long v16 = *v14;
        *(void *)(v15 + 16) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v15 = v16;
        ++v12;
        v11 += 24;
      }
      while (v13 != v12);
    }
    uint64_t v17 = a1[13];
    if (a1[14] != v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = v17 + v18;
        uint64_t v21 = *a2 + 24 * *(void *)v20;
        long long v22 = *(_OWORD *)(v20 + 8);
        *(void *)(v21 + 16) = *(void *)(v20 + 24);
        *(_OWORD *)uint64_t v21 = v22;
        ++v19;
        uint64_t v17 = a1[13];
        v18 += 32;
      }
      while (v19 < (a1[14] - v17) >> 5);
    }
    int64x2_t v58 = 0uLL;
    unint64_t v59 = 0;
    uint64_t v24 = a1[32];
    uint64_t v23 = a1[33];
    if (v23 != v24)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        if (*(void *)(v24 + v25 + 8) - *(void *)(v24 + v25) == 24)
        {
          std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](&v58, v24 + v25);
          uint64_t v24 = a1[32];
          uint64_t v23 = a1[33];
        }
        ++v26;
        v25 += 24;
      }
      while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3));
    }
    unint64_t v57 = v5;
    uint64_t v27 = *(char **)a3;
    *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a3;
    uint64_t v28 = a1[24];
    unint64_t v55 = (char *)(a1 + 24);
    uint64_t v29 = a1[25];
    if (v29 != v28)
    {
      unint64_t v30 = 0;
      uint64_t v31 = (void *)(a3 + 16);
      do
      {
        unint64_t v32 = (unsigned int *)(v28 + 12 * v30);
        uint64_t v33 = a1[4];
        uint64_t v34 = *(unsigned int *)(v33 + 4 * *v32);
        uint64_t v35 = *(unsigned int *)(v33 + 4 * v32[1]);
        uint64_t v36 = *(unsigned int *)(v33 + 4 * v32[2]);
        if (v58.i64[1] == v58.i64[0])
        {
LABEL_36:
          if ((unint64_t)v27 >= *v31)
          {
            unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*(void *)a3] >> 2);
            unint64_t v45 = v44 + 1;
            if (v44 + 1 > 0x1555555555555555) {
              abort();
            }
            if (0x5555555555555556 * ((uint64_t)(*v31 - *(void *)a3) >> 2) > v45) {
              unint64_t v45 = 0x5555555555555556 * ((uint64_t)(*v31 - *(void *)a3) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v31 - *(void *)a3) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v46 = 0x1555555555555555;
            }
            else {
              unint64_t v46 = v45;
            }
            if (v46) {
              int v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(a3 + 16, v46);
            }
            else {
              int v47 = 0;
            }
            unint64_t v48 = &v47[12 * v44];
            *(_DWORD *)unint64_t v48 = v34;
            *((_DWORD *)v48 + 1) = v35;
            *((_DWORD *)v48 + 2) = v36;
            unint64_t v50 = *(char **)a3;
            unint64_t v49 = *(char **)(a3 + 8);
            uint64_t v51 = v48;
            if (v49 != *(char **)a3)
            {
              do
              {
                uint64_t v52 = *(void *)(v49 - 12);
                v49 -= 12;
                int v53 = *((_DWORD *)v49 + 2);
                *(void *)(v51 - 12) = v52;
                v51 -= 12;
                *((_DWORD *)v51 + 2) = v53;
              }
              while (v49 != v50);
              unint64_t v49 = *(char **)a3;
            }
            uint64_t v27 = v48 + 12;
            *(void *)a3 = v51;
            *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v48 + 12;
            *(void *)(a3 + 16) = &v47[12 * v46];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v27 = v34;
            *((_DWORD *)v27 + 1) = v35;
            *((_DWORD *)v27 + 2) = v36;
            v27 += 12;
          }
          *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v27;
          uint64_t v28 = a1[24];
          uint64_t v29 = a1[25];
        }
        else
        {
          uint64_t v37 = 0;
          unint64_t v38 = (v58.i64[1] - v58.i64[0]) / 24;
          if (v38 <= 1) {
            unint64_t v38 = 1;
          }
          while (1)
          {
            uint64_t v39 = v58.i64[0] + 24 * v37;
            uint64_t v41 = *(void **)v39;
            uint64_t v40 = *(void **)(v39 + 8);
            if (v41 != v40)
            {
              unint64_t v42 = v41;
              while (*v42 != v34)
              {
                if (++v42 == v40)
                {
                  unint64_t v42 = v40;
                  break;
                }
              }
              if (v42 != v40)
              {
                uint64_t v43 = v41;
                while (*v43 != v35)
                {
                  if (++v43 == v40)
                  {
                    uint64_t v43 = v40;
                    break;
                  }
                }
                if (v43 != v40)
                {
                  while (*v41 != v36)
                  {
                    if (++v41 == v40)
                    {
                      uint64_t v41 = v40;
                      break;
                    }
                  }
                  if (v41 != v40) {
                    break;
                  }
                }
              }
            }
            if (++v37 == v38) {
              goto LABEL_36;
            }
          }
        }
        ++v30;
      }
      while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 2));
    }
    if (v55 != (char *)a3) {
      std::vector<geo::math::Matrix<unsigned int,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<unsigned int,3,1>*,geo::math::Matrix<unsigned int,3,1>*>(v55, *(char **)a3, (uint64_t)v27, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*(void *)a3] >> 2));
    }
    uint64_t v60 = &v58;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v60);
    uint64_t v6 = v56;
    unint64_t v5 = v57;
  }
  return v5 == v6 >> 2;
}

uint64_t *std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::find<geo::math::Matrix<unsigned int,3,1>>(void *a1, _DWORD *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    uint64_t v5 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
    if (v3 >= *(void *)&v2) {
      uint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    uint64_t v5 = v3 & (*(void *)&v2 + 0x1FFFFFFFFLL);
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (result[2] == *(void *)a2 && *((_DWORD *)result + 6) == (unint64_t)a2[2]) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,3,1>,geo::math::Matrix<unsigned int,3,1> const&>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      uint64_t v3 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
      if (v6 >= v7) {
        uint64_t v3 = v6 % v7;
      }
    }
    else
    {
      uint64_t v3 = v6 & (v7 + 0x1FFFFFFFFLL);
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2 && *((_DWORD *)v10 + 6) == (unint64_t)a2[2]) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v10 = operator new(0x20uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  uint64_t v10[2] = *(void *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        uint64_t v3 = v6 % v7;
      }
      else {
        uint64_t v3 = v6;
      }
    }
    else
    {
      uint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *unint64_t v10 = *v20;
LABEL_42:
    *uint64_t v20 = v10;
    goto LABEL_43;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v10;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(12 * a2);
}

void std::vector<geo::math::Matrix<double,3,1>>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<geo::math::Matrix<double,3,1>>::__append(void **a1, unint64_t a2, long long *a3)
{
  uint8x8_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  BOOL v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      BOOL v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)BOOL v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      BOOL v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      float v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v6, v13);
    }
    else {
      float v14 = 0;
    }
    size_t v18 = &v14[24 * v10];
    uint64_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    unint64_t v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    uint64_t v23 = &v14[24 * v13];
    uint64_t v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

char *std::vector<geo::math::Matrix<unsigned int,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<unsigned int,3,1>*,geo::math::Matrix<unsigned int,3,1>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<geo::math::Matrix<unsigned int,3,1>>::__vallocate[abi:nn180100](v7, v12);
    float v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    BOOL v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  BOOL v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    BOOL v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<geo::math::Matrix<unsigned int,3,1>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 352);
  uint64_t v8 = (void **)((char *)this + 328);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v8 = (void **)((char *)this + 304);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v8 = (void **)((char *)this + 280);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v8 = (void **)((char *)this + 256);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 216);
  int8x8_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  uint64_t v8 = (void **)((char *)this + 168);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 128);
  unint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

uint64_t re::buildPyramid(uint64_t a1, int *a2)
{
  uint64_t v127 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v103);
  unsigned int v6 = *(unsigned __int16 *)a2;
  if (*(_WORD *)a2)
  {
    uint64_t v93 = a1;
    unsigned int v7 = (v6 + 1) * (v6 + 2);
    unsigned int v8 = v7 >> 1;
    int v9 = v6 * v6;
    int v10 = (v6 + 1) * (v6 + 1);
    uint64_t v11 = v106;
    LODWORD(v103) = v10 + 4 * (v7 >> 1);
    unsigned int v94 = v103;
    unsigned int v107 = v103;
    if (v108)
    {
      unint64_t v12 = v109;
      uint64_t v13 = 8 * v108;
      do
      {
        uint64_t v14 = *v12++;
        (*(void (**)(uint64_t, void))(*(void *)v14 + 72))(v14, v107);
        v13 -= 8;
      }
      while (v13);
    }
    re::DynamicArray<re::GeomCell4>::resize(v104, (5 * v9));
    unsigned int v110 = 5 * v9;
    if (v111)
    {
      BOOL v15 = v112;
      uint64_t v16 = 8 * v111;
      do
      {
        uint64_t v17 = *v15++;
        (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v110);
        v16 -= 8;
      }
      while (v16);
    }
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 16)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 16))
      {
        if (*((unsigned char *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
        }
      }
    }
    unsigned int v19 = 4 * v8;
    unsigned int v20 = 4 * v9;
    float32_t v21 = *((float *)a2 + 3) * 0.5;
    float32x2_t v22 = vmul_f32(*(float32x2_t *)(a2 + 1), (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v18.f32 = vneg_f32(v22);
    float32x4_t v23 = v18;
    v23.f32[2] = v21;
    float32x4_t v96 = v23;
    float32x4_t v102 = v23;
    float32x4_t v24 = v18;
    v24.i32[0] = v22.i32[0];
    float32x4_t v25 = v24;
    v25.f32[2] = v21;
    v24.f32[2] = -v21;
    v18.f32[2] = -v21;
    float32x4_t v95 = v24;
    float32x4_t v100 = v24;
    float32x4_t v101 = v25;
    float32x4_t v99 = v18;
    LODWORD(v26) = 0;
    HIDWORD(v26) = v22.i32[1];
    float32x4_t v97 = v18;
    float32x4_t v98 = (float32x4_t)v26;
    uint64_t v27 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexPosition");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 16))(v27))
    {
      uint64_t v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
      unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    }
    else
    {
      unsigned int v29 = 0;
      uint64_t v28 = 0;
    }
    unsigned int v30 = 0;
    float32x4_t v31 = vsubq_f32(v95, v97);
    float32x4_t v32 = vsubq_f32(v96, v97);
    float v33 = (float)v6;
    unsigned int v34 = v19;
LABEL_25:
    uint64_t v35 = 0;
    float32x4_t v36 = vaddq_f32(v97, vmulq_n_f32(v32, (float)v30 / v33));
    unsigned int v37 = v34;
    unsigned int v38 = v29 - v34;
    if (v29 < v34) {
      unsigned int v38 = 0;
    }
    uint64_t v39 = v28 + 16 * v34;
    while (v38 != v35)
    {
      *(float32x4_t *)(v39 + 16 * v35) = vaddq_f32(v36, vmulq_n_f32(v31, (float)v35 / v33));
      if (v6 + 1 == ++v35)
      {
        unsigned int v34 = v37 + v35;
        BOOL v40 = v30++ == v6;
        if (!v40) {
          goto LABEL_25;
        }
        float32x4_t v96 = v31;
        float32x4_t v97 = v32;
        uint64_t v41 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexUV");
        if (!v41)
        {
LABEL_51:
          uint64_t v56 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexNormal");
          uint64_t v52 = v94;
          if (v56)
          {
            uint64_t v57 = v56;
            if (!(*(unsigned int (**)(uint64_t))(*(void *)v56 + 16))(v56)) {
              goto LABEL_55;
            }
            uint64_t v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v57, 0);
            unsigned int v58 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 16))(v57);
LABEL_56:
            if (v52 > v19)
            {
              float32x4_t v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), (int8x16_t)v97, 0xCuLL), vnegq_f32(v96)), v97, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL));
              float32x4_t v60 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
              int32x4_t v61 = (int32x4_t)vmulq_f32(v59, v59);
              v61.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), *(float32x2_t *)v61.i8)).u32[0];
              float32x2_t v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
              float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
              float32x4_t v64 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
              if (v58 <= v19) {
                uint64_t v65 = v19;
              }
              else {
                uint64_t v65 = v58;
              }
              std::vector<unsigned int>::value_type v66 = (float32x4_t *)(v28 + 16 * v19);
              uint64_t v67 = v65 - v19;
              int v68 = (v6 + 1) * (v6 + 1);
              do
              {
                if (!v67) {
                  goto LABEL_94;
                }
                *v66++ = v64;
                --v67;
                --v68;
              }
              while (v68);
            }
          }
          uint64_t v65 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexTangent");
          uint64_t v69 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexBitangent");
          if (v65)
          {
            uint64_t v70 = v69;
            if (v69)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v65 + 16))(v65))
              {
                uint64_t v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v65, 0);
                LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 16))(v65);
              }
              else
              {
                LODWORD(v11) = 0;
                uint64_t v28 = 0;
              }
              if ((*(unsigned int (**)(uint64_t))(*(void *)v70 + 16))(v70))
              {
                uint64_t v65 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v70, 0);
                unsigned int v58 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 16))(v70);
              }
              else
              {
                unsigned int v58 = 0;
                uint64_t v65 = 0;
              }
              if (v52 > v19)
              {
                int32x4_t v71 = (int32x4_t)vmulq_f32(v96, v96);
                v71.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v71, 2), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
                float32x2_t v72 = vrsqrte_f32((float32x2_t)v71.u32[0]);
                float32x2_t v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v72, v72)));
                float32x4_t v74 = vmulq_n_f32(v96, vmul_f32(v73, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v73, v73))).f32[0]);
                int32x4_t v75 = (int32x4_t)vmulq_f32(v97, v97);
                v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
                float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
                float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
                float32x4_t v78 = vmulq_n_f32(v97, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
                if (v11 <= v19) {
                  uint64_t v52 = v19;
                }
                else {
                  uint64_t v52 = v11;
                }
                uint64_t v79 = (float32x4_t *)(v65 + 16 * v19);
                unsigned int v80 = (float32x4_t *)(v28 + 16 * v19);
                if (v58 <= v19) {
                  uint64_t v28 = v19;
                }
                else {
                  uint64_t v28 = v58;
                }
                uint64_t v81 = v28 - v19;
                uint64_t v82 = v52 - v19;
                do
                {
                  if (!v82) {
                    goto LABEL_95;
                  }
                  *unsigned int v80 = v74;
                  if (!v81)
                  {
LABEL_96:
                    uint64_t v113 = 0;
                    long long v125 = 0u;
                    long long v126 = 0u;
                    long long v123 = 0u;
                    long long v124 = 0u;
                    long long v122 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    int v114 = 136315906;
                    float32x4_t v115 = "operator[]";
                    __int16 v116 = 1024;
                    int v117 = 609;
                    __int16 v118 = 2048;
                    uint64_t v119 = v28;
                    __int16 v120 = 2048;
                    unint64_t v121 = v58;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  *v79++ = v78;
                  ++v80;
                  --v81;
                  --v82;
                  --v10;
                }
                while (v10);
              }
            }
          }
          int v83 = 0;
          unsigned int v84 = v19 + v6 + 1;
          uint64_t v11 = (unsigned char *)v104[2];
          while (1)
          {
            uint64_t v85 = v105;
            unsigned int v86 = v6;
            do
            {
              unsigned int v58 = v20;
              if ((unint64_t)v11 <= v20)
              {
                uint64_t v113 = 0;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v123 = 0u;
                long long v124 = 0u;
                long long v122 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v114 = 136315906;
                float32x4_t v115 = "operator[]";
                __int16 v116 = 1024;
                int v117 = 789;
                __int16 v118 = 2048;
                uint64_t v119 = v20;
                __int16 v120 = 2048;
                unint64_t v121 = (unint64_t)v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_94:
                uint64_t v113 = 0;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v123 = 0u;
                long long v124 = 0u;
                long long v122 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v114 = 136315906;
                float32x4_t v115 = "operator[]";
                __int16 v116 = 1024;
                int v117 = 609;
                __int16 v118 = 2048;
                uint64_t v119 = v65;
                __int16 v120 = 2048;
                unint64_t v121 = v58;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_95:
                uint64_t v113 = 0;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v123 = 0u;
                long long v124 = 0u;
                long long v122 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v114 = 136315906;
                float32x4_t v115 = "operator[]";
                __int16 v116 = 1024;
                int v117 = 609;
                __int16 v118 = 2048;
                uint64_t v119 = v52;
                __int16 v120 = 2048;
                unint64_t v121 = v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_96;
              }
              unsigned int v87 = v84 + 1;
              unsigned int v88 = v19 + 1;
              float32x4_t v89 = (unsigned int *)(v85 + 16 * v20);
              *float32x4_t v89 = v19;
              v89[1] = v19 + 1;
              v89[2] = v84 + 1;
              v89[3] = v84;
              ++v20;
              ++v84;
              ++v19;
              --v86;
            }
            while (v86);
            unsigned int v19 = v88 + 1;
            unsigned int v84 = v87 + 1;
            if (++v83 == v6)
            {
              float v90 = (re::internal *)re::GeomMesh::operator=(v93, &v103);
              if (*((unsigned char *)a2 + 18)) {
                re::internal::mergeVertexPositions(v90, v91);
              }
              goto LABEL_89;
            }
          }
        }
        uint64_t v42 = v41;
        float32x4_t v43 = vmulq_f32(v96, v96);
        __n128 v47 = (__n128)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)));
        v47.n128_f32[0] = sqrtf(v47.n128_f32[0]);
        float32x4_t v44 = vmulq_f32(v97, v97);
        v44.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
        BOOL v45 = v47.n128_f32[0] <= v44.f32[0];
        float v46 = v47.n128_f32[0] / v44.f32[0];
        v47.n128_f32[0] = v44.f32[0] / v47.n128_f32[0];
        if (v45) {
          float v2 = v46;
        }
        else {
          float v2 = 1.0;
        }
        if (v45) {
          float v3 = 1.0;
        }
        else {
          float v3 = v47.n128_f32[0];
        }
        if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)v41 + 16))(v41, v47))
        {
          uint64_t v28 = re::internal::GeomTypedAttribute<double>::operator[](v42, 0);
          unsigned int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 16))(v42);
LABEL_43:
          unsigned int v49 = 0;
          unsigned int v50 = v19;
          while (1)
          {
            uint64_t v51 = 0;
            uint64_t v52 = v50;
            unsigned int v53 = v48 - v50;
            if (v48 < v50) {
              unsigned int v53 = 0;
            }
            uint64_t v54 = v28 + 8 * v50;
            do
            {
              if (v53 == v51)
              {
                uint64_t v113 = 0;
                long long v125 = 0u;
                long long v126 = 0u;
                long long v123 = 0u;
                long long v124 = 0u;
                long long v122 = 0u;
                unsigned int v19 = &_os_log_internal;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v114 = 136315906;
                float32x4_t v115 = "operator[]";
                __int16 v116 = 1024;
                int v117 = 609;
                __int16 v118 = 2048;
                uint64_t v119 = (v52 + v51);
                __int16 v120 = 2048;
                unint64_t v121 = v48;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_55:
                unsigned int v58 = 0;
                uint64_t v28 = 0;
                goto LABEL_56;
              }
              *(float *)&uint64_t v55 = v2 * (float)((float)v51 / v33);
              *((float *)&v55 + 1) = v3 * (float)((float)v49 / v33);
              *(void *)(v54 + 8 * v51++) = v55;
            }
            while (v6 + 1 != v51);
            unsigned int v50 = v52 + v51;
            BOOL v40 = v49++ == v6;
            if (v40) {
              goto LABEL_51;
            }
          }
        }
LABEL_42:
        unsigned int v48 = 0;
        uint64_t v28 = 0;
        goto LABEL_43;
      }
    }
    uint64_t v113 = 0;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long v122 = 0u;
    unsigned int v19 = &_os_log_internal;
    a2 = &v114;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v114 = 136315906;
    float32x4_t v115 = "operator[]";
    __int16 v116 = 1024;
    int v117 = 609;
    __int16 v118 = 2048;
    uint64_t v119 = v37 + v35;
    __int16 v120 = 2048;
    unint64_t v121 = v29;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_42;
  }
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
  if (*((unsigned char *)a2 + 16)) {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
  }
  if (*((unsigned char *)a2 + 17))
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
    if (*((unsigned char *)a2 + 16))
    {
      if (*((unsigned char *)a2 + 17))
      {
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
      }
    }
  }
  re::GeomMesh::operator=(a1, &v103);
LABEL_89:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v106);
  uint64_t result = v104[0];
  if (v104[0])
  {
    if (v105) {
      return (*(uint64_t (**)(void, uint64_t))(*(void *)v104[0] + 40))(v104[0], v105);
    }
  }
  return result;
}

unsigned int *re::anonymous namespace'::populatePyramidSideHelper(unsigned int a1, unsigned int a2, unsigned int a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, int a7, void *a8)
{
  int v10 = a4;
  float32x4_t v117 = *a4;
  float32x4_t v120 = *a5;
  float32x4_t v115 = *a6;
  unint64_t v121 = (re::internal::GeomAttributeManager *)(a8 + 6);
  uint64_t v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a8 + 6), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14))
  {
    uint64_t v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v14, 0);
    uint64_t v16 = (*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  unsigned int v17 = a2;
  if (a1)
  {
    unsigned int v18 = 0;
    float32x4_t v19 = vsubq_f32(*a6, *a5);
    float32x4_t v20 = vsubq_f32(*a6, *v10);
    float32x4_t v21 = vsubq_f32(*a5, *v10);
    unsigned int v22 = a1 - 1;
    unsigned int v17 = a2;
LABEL_6:
    float v23 = (float)v18 / (float)a1;
    if (v17 >= v16) {
      goto LABEL_82;
    }
    float32x4_t v24 = vaddq_f32(*v10, vmulq_n_f32(v20, v23));
    *(float32x4_t *)(v15 + 16 * v17) = v24;
    if (a1 - v18 < 2) {
      goto LABEL_12;
    }
    uint64_t v25 = 0;
    while (1 - v16 + v17 + v25)
    {
      uint64_t v26 = v25 + 1;
      *(float32x4_t *)(v15 + 16 + 16 * v17 + 16 * v25) = vaddq_f32(v24, vmulq_n_f32(v21, (float)(1.0 - v23)* (float)((float)(v25 + 1) / (float)(a1 - v18))));
      uint64_t v25 = v26;
      if (v22 == v26)
      {
        v17 += v26;
LABEL_12:
        if (v17 + 1 >= v16) {
          goto LABEL_83;
        }
        *(float32x4_t *)(v15 + 16 * (v17 + 1)) = vaddq_f32(vmulq_n_f32(v19, v23), *a5);
        v17 += 2;
        ++v18;
        --v22;
        if (v18 == a1) {
          goto LABEL_14;
        }
        goto LABEL_6;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_53;
  }
LABEL_14:
  if (v17 >= v16)
  {
LABEL_90:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x4_t v27 = vsubq_f32(v120, v117);
  float32x4_t v118 = vsubq_f32(v115, v117);
  float32x4_t v120 = v27;
  *(float32x4_t *)(v15 + 16 * v17) = *a6;
  uint64_t v28 = re::internal::GeomAttributeManager::attributeByName(v121, "vertexUV");
  if (v28)
  {
    uint64_t v29 = v28;
    float32x4_t v30 = vmulq_f32(v120, v120);
    float32x2_t v31 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
    v31.f32[0] = sqrtf(v31.f32[0]);
    float32x4_t v32 = vmulq_f32(v118, vdivq_f32(v120, (float32x4_t)vdupq_lane_s32((int32x2_t)v31, 0)));
    float32x4_t v33 = vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1));
    LODWORD(_S2) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), v33).u32[0];
    __asm { FMLS            S1, S2, V2.S[0] }
    float v40 = sqrtf(_S1);
    if (v31.f32[0] <= v40) {
      v33.f32[0] = v40;
    }
    else {
      v33.f32[0] = v31.f32[0];
    }
    v31.f32[1] = v40;
    float32x2_t v41 = vdiv_f32(v31, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0));
    int8x8_t v111 = (int8x8_t)v41;
    v41.f32[0] = _S2 / v33.f32[0];
    int8x8_t v116 = (int8x8_t)v41;
    v41.i32[1] = 0;
    int8x8_t v112 = (int8x8_t)v41;
    if (a7) {
      unsigned int v42 = -1;
    }
    else {
      unsigned int v42 = 0;
    }
    int8x8_t v43 = (int8x8_t)vdup_n_s32(v42);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28))
    {
      uint64_t v44 = re::internal::GeomTypedAttribute<double>::operator[](v29, 0);
      uint64_t v45 = (*(unsigned int (**)(uint64_t))(*(void *)v29 + 16))(v29);
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v44 = 0;
    }
    float32x2_t v46 = (float32x2_t)vbsl_s8(v43, v112, v116);
    unsigned int v47 = a2;
    if (a1)
    {
      unsigned int v48 = 0;
      v49.i32[1] = v111.i32[1];
      v49.i32[0] = 0;
      float32x2_t v50 = (float32x2_t)vbsl_s8(v43, v49, (int8x8_t)v111.u32[0]);
      float32x2_t v51 = (float32x2_t)vand_s8(v111, v43);
      float32x2_t v52 = vsub_f32(v50, v51);
      float32x2_t v53 = vsub_f32(v46, v51);
      float32x2_t v54 = vsub_f32(v46, v50);
      unsigned int v55 = a1 - 1;
      unsigned int v47 = a2;
      while (1)
      {
        float v56 = (float)v48 / (float)a1;
        if (v47 >= v45) {
          break;
        }
        float32x2_t v57 = vadd_f32(v51, vmul_n_f32(v53, v56));
        *(float32x2_t *)(v44 + 8 * v47) = v57;
        if (a1 - v48 >= 2)
        {
          uint64_t v58 = 0;
          do
          {
            if (!(1 - v45 + v47 + v58)) {
              goto LABEL_81;
            }
            uint64_t v59 = v58 + 1;
            *(float32x2_t *)(v44 + 8 + 8 * v47 + 8 * v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vadd_f32(v57, vmul_n_f32(v52, (float)(1.0 - v56)* (float)((float)(v58 + 1)/ (float)(a1 - v48))));
            uint64_t v58 = v59;
          }
          while (v55 != v59);
          v47 += v59;
        }
        if (v47 + 1 >= v45) {
          goto LABEL_86;
        }
        *(float32x2_t *)(v44 + 8 * (v47 + 1)) = vadd_f32(v50, vmul_n_f32(v54, v56));
        v47 += 2;
        ++v48;
        --v55;
        if (v48 == a1) {
          goto LABEL_35;
        }
      }
LABEL_85:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_87;
    }
LABEL_35:
    if (v47 >= v45) {
      goto LABEL_91;
    }
    *(float32x2_t *)(v44 + 8 * v47) = v46;
  }
  v115.i32[0] = a1 + 1;
  uint64_t result = (unsigned int *)re::internal::GeomAttributeManager::attributeByName(v121, "vertexNormal");
  if (result)
  {
    uint64_t v61 = (uint64_t)result;
    LODWORD(v15) = (v115.i32[0] * (a1 + 2)) >> 1;
    float32x4_t v62 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL), vnegq_f32(v120)), v118, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL));
    float32x4_t v63 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL);
    int32x4_t v64 = (int32x4_t)vmulq_f32(v62, v62);
    v64.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v64, 2), *(float32x2_t *)v64.i8)).u32[0];
    float32x2_t v65 = vrsqrte_f32((float32x2_t)v64.u32[0]);
    float32x2_t v66 = vmul_f32(v65, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v65, v65)));
    float32x4_t v119 = vmulq_n_f32(v63, vmul_f32(v66, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v66, v66))).f32[0]);
    LODWORD(v10) = v15 + a2;
    if ((*(unsigned int (**)(unsigned int *))(*(void *)result + 16))(result))
    {
      uint64_t v67 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v61, 0);
      unsigned int v68 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
    }
    else
    {
      unsigned int v68 = 0;
      uint64_t v67 = 0;
    }
    int32x4_t v69 = (int32x4_t)vmulq_f32(v119, v119);
    v69.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1))).u32[0];
    float32x2_t v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
    float32x2_t v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
    float32x4_t v72 = vmulq_n_f32(v119, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
    if (v10 > a2)
    {
      if (v68 <= a2) {
        uint64_t v73 = a2;
      }
      else {
        uint64_t v73 = v68;
      }
      float32x4_t v74 = (float32x4_t *)(v67 + 16 * a2);
      uint64_t v75 = v73 - a2;
      unsigned int v76 = (v115.i32[0] * (a1 + 2)) >> 1;
      while (v75)
      {
        *v74++ = v72;
        --v75;
        if (!--v76) {
          goto LABEL_48;
        }
      }
LABEL_87:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_90;
    }
LABEL_48:
    float32x4_t v117 = v72;
    uint64_t v77 = re::internal::GeomAttributeManager::attributeByName(v121, "vertexTangent");
    uint64_t result = (unsigned int *)re::internal::GeomAttributeManager::attributeByName(v121, "vertexBitangent");
    if (v77)
    {
      uint64_t v16 = (uint64_t)result;
      if (result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v77 + 16))(v77))
        {
          uint64_t v78 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v77, 0);
          unsigned int v79 = (*(uint64_t (**)(uint64_t))(*(void *)v77 + 16))(v77);
          goto LABEL_54;
        }
LABEL_53:
        unsigned int v79 = 0;
        uint64_t v78 = 0;
LABEL_54:
        uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
        if (result)
        {
          uint64_t v80 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
          uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
          unsigned int v81 = result;
        }
        else
        {
          unsigned int v81 = 0;
          uint64_t v80 = 0;
        }
        if (v10 > a2)
        {
          int32x4_t v82 = (int32x4_t)vmulq_f32(v120, v120);
          v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
          float32x2_t v83 = vrsqrte_f32((float32x2_t)v82.u32[0]);
          float32x2_t v84 = vmul_f32(v83, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v83, v83)));
          float32x4_t v85 = vmulq_n_f32(v120, vmul_f32(v84, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(v84, v84))).f32[0]);
          float32x4_t v86 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), vnegq_f32(v117)), v85, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL));
          float32x4_t v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL);
          int32x4_t v88 = (int32x4_t)vmulq_f32(v86, v86);
          v88.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v88, 2), *(float32x2_t *)v88.i8)).u32[0];
          float32x2_t v89 = vrsqrte_f32((float32x2_t)v88.u32[0]);
          float32x2_t v90 = vmul_f32(v89, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v89, v89)));
          float32x4_t v91 = vmulq_n_f32(v87, vmul_f32(v90, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v90, v90))).f32[0]);
          if (v79 <= a2) {
            uint64_t v92 = a2;
          }
          else {
            uint64_t v92 = v79;
          }
          uint64_t v93 = (float32x4_t *)(v80 + 16 * a2);
          unsigned int v94 = (float32x4_t *)(v78 + 16 * a2);
          if (v81 <= a2) {
            uint64_t v95 = a2;
          }
          else {
            uint64_t v95 = v81;
          }
          uint64_t v96 = v95 - a2;
          uint64_t v97 = v92 - a2;
          while (v97)
          {
            *unsigned int v94 = v85;
            if (!v96) {
              goto LABEL_89;
            }
            *v93++ = v91;
            ++v94;
            --v96;
            --v97;
            LODWORD(v15) = v15 - 1;
            if (!v15) {
              goto LABEL_68;
            }
          }
          goto LABEL_88;
        }
      }
    }
  }
LABEL_68:
  if (a1)
  {
    int v98 = 0;
    unsigned __int32 v99 = v115.i32[0] + a2;
    unint64_t v100 = a8[3];
    uint64_t v101 = a8[5];
    unsigned int v102 = a1;
    while (~v98 == -a1)
    {
      unsigned int v103 = a2;
      unsigned __int32 v104 = v99;
LABEL_76:
      if (v100 <= a3) {
        goto LABEL_84;
      }
      --v102;
      unsigned int v110 = (unsigned int *)(v101 + 16 * a3);
      *unsigned int v110 = v103;
      v110[1] = v103 + 1;
      v110[2] = v104;
      v110[3] = -1;
      ++a3;
      unsigned __int32 v99 = v104 + 1;
      a2 = v103 + 2;
      if (++v98 == a1) {
        return result;
      }
    }
    uint64_t v105 = a8[5];
    int v106 = 1;
    while (1)
    {
      unsigned int v107 = a3;
      if (v100 <= a3) {
        break;
      }
      unsigned int v103 = a2 + 1;
      uint64_t v108 = (unsigned int *)(v105 + 16 * a3);
      *uint64_t v108 = a2;
      v108[1] = a2 + 1;
      v108[2] = v99;
      v108[3] = -1;
      unint64_t v109 = a3 + 1;
      if (v100 <= v109) {
        goto LABEL_80;
      }
      unsigned __int32 v104 = v99 + 1;
      uint64_t result = (unsigned int *)(v105 + 16 * v109);
      unsigned int *result = v103;
      result[1] = v99 + 1;
      result[2] = v99;
      result[3] = -1;
      a3 = v107 + 2;
      ++v106;
      ++v99;
      ++a2;
      if (v102 == v106) {
        goto LABEL_76;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
  return result;
}

void re::buildPyramid(re::GeomMesh *a1, long long *a2)
{
  if (*((unsigned char *)a2 + 18))
  {
    int v5 = *((_DWORD *)a2 + 4);
    long long v4 = *a2;
    BYTE2(v5) = 0;
    re::buildPyramid(a1, &v4);
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v4, 0);
    re::buildPyramid((uint64_t)&v4, (int *)a2);
    if (*(_WORD *)a2)
    {
    }
    else
    {
      re::DynamicArray<re::GeomMesh>::clear(a1);
      re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 5uLL, (re::GeomMesh *)&v4);
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v4);
  }
}

uint64_t re::anonymous namespace'::splitMeshIntoEqualSizedSubmeshes(unint64_t a1, unsigned int a2, re::GeomMesh *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  memset(v23, 0, sizeof(v23));
  int v24 = 0;
  uint64_t v19 = 0;
  memset(v20, 0, sizeof(v20));
  int v21 = 0;
  v16[1] = 0;
  unint64_t v17 = 0;
  v16[0] = 0;
  int v18 = 0;
  re::DynamicArray<re::GeomMesh>::clear(a3);
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a3, a2);
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  unsigned int v7 = v6 / a2;
  re::DynamicArray<float>::resize((uint64_t)v16, v6 / a2);
  unint64_t v8 = 0;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  do
  {
    unint64_t v10 = v17;
    if (a2 <= v6)
    {
      uint64_t v11 = 0;
      uint64_t v12 = v19;
      while (v10 != v11)
      {
        *(_DWORD *)(v12 + 4 * v11) = v7 * v8 + v11;
        if (v9 == ++v11) {
          goto LABEL_9;
        }
      }
      *(void *)uint64_t v28 = 0;
      memset(v27, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v35[0]) = 136315906;
      *(void *)((char *)v35 + 4) = "operator[]";
      WORD6(v35[0]) = 1024;
      *(_DWORD *)((char *)v35 + 14) = 789;
      WORD1(v35[1]) = 2048;
      *(void *)((char *)&v35[1] + 4) = v10;
      WORD6(v35[1]) = 2048;
      *(void *)((char *)&v35[1] + 14) = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      uint64_t v26 = 0;
      memset(v35, 0, sizeof(v35));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v28 = 136315906;
      *(void *)&v28[4] = "operator[]";
      __int16 v29 = 1024;
      int v30 = 789;
      __int16 v31 = 2048;
      unint64_t v32 = v8;
      __int16 v33 = 2048;
      unint64_t v34 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_9:
    v15[0] = v19;
    v15[1] = v10;
    v14[0] = 0;
    v14[1] = 0;
    re::makeMeshFromFaces(a1, v15, v14, (uint64_t)v23, (uint64_t)v20, (unint64_t)v27);
    unint64_t v10 = *((void *)a3 + 2);
    if (v10 <= v8) {
      goto LABEL_22;
    }
    re::GeomMesh::operator=((re::GeomMesh *)(*((void *)a3 + 4) + 736 * v8), (re::GeomMesh *)v27);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v27);
    ++v8;
  }
  while (v8 != a2);
  if (v16[0] && v19) {
    (*(void (**)(void))(*(void *)v16[0] + 40))();
  }
  if (v20[0] && v22) {
    (*(void (**)(void))(*(void *)v20[0] + 40))();
  }
  uint64_t result = v23[0];
  if (v23[0])
  {
    if (v25) {
      return (*(uint64_t (**)(void))(*(void *)v23[0] + 40))();
    }
  }
  return result;
}

uint64_t re::buildTetrahedron(re::internal *a1, unsigned __int16 *a2)
{
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v27);
  unsigned int v4 = *a2;
  if (*a2)
  {
    unsigned int v5 = v4 + 2 + (v4 + 2) * v4;
    int v6 = v4 * v4;
    LODWORD(v27) = 4 * (v5 >> 1);
    unsigned int v30 = v27;
    if (v31)
    {
      unsigned int v7 = v32;
      uint64_t v8 = 8 * v31;
      do
      {
        uint64_t v9 = *v7++;
        (*(void (**)(uint64_t, void))(*(void *)v9 + 72))(v9, v30);
        v8 -= 8;
      }
      while (v8);
    }
    re::DynamicArray<re::GeomCell4>::resize(v28, (4 * v6));
    unsigned int v33 = 4 * v6;
    if (v34)
    {
      unint64_t v10 = v35;
      uint64_t v11 = 8 * v34;
      do
      {
        uint64_t v12 = *v10++;
        (*(void (**)(uint64_t, void))(*(void *)v12 + 72))(v12, v33);
        v11 -= 8;
      }
      while (v11);
    }
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 8)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 9))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 8))
      {
        if (*((unsigned char *)a2 + 9))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexBitangent", 1, 7);
        }
      }
    }
    v13.i32[0] = *((_DWORD *)a2 + 1);
    *(float *)v14.i32 = *(float *)v13.i32 * -0.5;
    double v15 = *(float *)v13.i32;
    float64x2_t v16 = vmulq_n_f64((float64x2_t)xmmword_2343AC160, *(float *)v13.i32);
    *(float32x2_t *)&v16.f64[0] = vcvt_f32_f64(v16);
    *(float *)v13.i32 = *(float *)v13.i32 * 0.5;
    int8x16_t v25 = vextq_s8(vextq_s8(v13, v13, 4uLL), (int8x16_t)v16, 0xCuLL);
    int8x16_t v26 = vextq_s8(vextq_s8(v14, v14, 4uLL), (int8x16_t)v16, 0xCuLL);
    *(float *)&__int32 v17 = v15 * -0.433013;
    v18.i32[0] = 0;
    int32x4_t v19 = vzip1q_s32((int32x4_t)0, (int32x4_t)v16);
    v19.i32[2] = v17;
    float32x4_t v24 = (float32x4_t)v19;
    float32_t v20 = v15 * 0.408248;
    *(float *)&double v15 = v15 * 0.144338;
    v18.f32[1] = v20;
    v18.i64[1] = LODWORD(v15);
    float32x4_t v23 = v18;
    re::GeomMesh::operator=((uint64_t)a1, &v27);
    if (*((unsigned char *)a2 + 10)) {
      re::internal::mergeVertexPositions(a1, v21);
    }
  }
  else
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 8)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 9))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 8))
      {
        if (*((unsigned char *)a2 + 9))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)a1, &v27);
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v29);
  uint64_t result = v28[0];
  if (v28[0])
  {
    if (v28[4]) {
      return (*(uint64_t (**)(void))(*(void *)v28[0] + 40))();
    }
  }
  return result;
}

void re::buildTetrahedron(re::GeomMesh *a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 10))
  {
    int v5 = *((_DWORD *)a2 + 2);
    uint64_t v4 = *a2;
    BYTE2(v5) = 0;
    re::buildTetrahedron(a1, &v4);
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v4, 0);
    re::buildTetrahedron((re::internal *)&v4, (unsigned __int16 *)a2);
    if (*(_WORD *)a2) {
    else
    }
      re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 4uLL, (re::GeomMesh *)&v4);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v4);
  }
}

uint64_t *re::geometryLogObjects(re *this)
{
  {
    re::geometryLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Geometry");
  }
  return &re::geometryLogObjects(void)::logObjects;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::GeomAttributeContainer(re::internal::GeomAttributeContainer *this)
{
  *(_DWORD *)this = 0;
  *((unsigned char *)this + 4) = 4;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 1) = 0;
  float v2 = (void *)((char *)this + 8);
  float v3 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v2, 1uLL);
  ++*((_DWORD *)this + 8);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

uint64_t re::internal::GeomAttributeContainer::GeomAttributeContainer(uint64_t a1, char a2)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  float v3 = (void *)(a1 + 8);
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v3, 1uLL);
  ++*(_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  return a1;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::copy(re::internal::GeomAttributeContainer *this, re::internal::GeomAttributeContainer *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (this != a2)
  {
    float v3 = this;
    this = (re::internal::GeomAttributeContainer *)re::internal::GeomAttributeContainer::clearAttributes(a2, a2);
    *(_DWORD *)a2 = *(_DWORD *)v3;
    *((unsigned char *)a2 + 4) = *((unsigned char *)v3 + 4);
    unint64_t v5 = *((void *)v3 + 3);
    unsigned int v11 = 0;
    if (v5)
    {
      unint64_t v6 = 0;
      unsigned int v7 = (void *)((char *)a2 + 8);
      uint64_t v8 = (uint64_t *)((char *)a2 + 48);
      do
      {
        Attribute = 0;
        unint64_t v9 = *((void *)v3 + 3);
        if (v9 <= v6)
        {
          uint64_t v12 = 0;
          memset(v21, 0, sizeof(v21));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v13 = 136315906;
          int8x16_t v14 = "operator[]";
          __int16 v15 = 1024;
          int v16 = 797;
          __int16 v17 = 2048;
          unint64_t v18 = v6;
          __int16 v19 = 2048;
          unint64_t v20 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        Attribute = re::GeomAttribute::createAttribute(*(re::GeomAttribute **)(*((void *)v3 + 5) + 8 * v6), v4);
        re::DynamicArray<re::TransitionCondition *>::add(v7, &Attribute);
        *(void *)&v21[0] = *((void *)Attribute + 1);
        this = (re::internal::GeomAttributeContainer *)re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v8, (char **)v21, (int *)&v11);
        unint64_t v6 = ++v11;
      }
      while (v5 > v11);
    }
  }
  return this;
}

void *re::internal::GeomAttributeContainer::clearAttributes(void *this, re::GeomAttribute *a2)
{
  float v2 = this;
  unint64_t v3 = this[3];
  if (v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      this = *(void **)(v2[5] + 8 * v4);
      if (this)
      {
        this = (void *)re::GeomAttribute::freeAttribute((re::GeomAttribute *)this, a2);
        unint64_t v3 = v2[3];
      }
      uint64_t v4 = v5;
    }
    while (v3 > v5++);
  }
  v2[11] = 0;
  v2[12] = 0;
  unint64_t v7 = v2[8];
  v2[9] = 0;
  v2[10] = v7;
  if (v7 >= 0x10)
  {
    unint64_t v8 = 0;
    *(void *)&long long v9 = -1;
    *((void *)&v9 + 1) = -1;
    do
      *(_OWORD *)(v2[6] + 16 * v8++) = v9;
    while (v8 < v2[8] >> 4);
  }
  v2[3] = 0;
  ++*((_DWORD *)v2 + 8);
  return this;
}

uint64_t re::internal::GeomAttributeContainer::attributeByIndex(re::internal::GeomAttributeContainer *this, unsigned int a2)
{
  if (*((void *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 5) + 8 * a2);
}

{
  if (*((void *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 5) + 8 * a2);
}

uint64_t re::internal::GeomAttributeContainer::attributeByName(re::internal::GeomAttributeContainer *this, char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v7[0] = a2;
  uint64_t v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, v7);
  if (v3 == -1) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(*((void *)this + 7) + 16 * v3 + 8);
  unint64_t v5 = *((void *)this + 3);
  if (v5 <= v4)
  {
    v7[1] = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v8 = 136315906;
    long long v9 = "operator[]";
    __int16 v10 = 1024;
    int v11 = 789;
    __int16 v12 = 2048;
    unint64_t v13 = v4;
    __int16 v14 = 2048;
    unint64_t v15 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 5) + 8 * v4);
}

uint64_t re::internal::GeomAttributeContainer::reorder(uint64_t result, uint64_t *a2)
{
  uint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    unint64_t v4 = *(uint64_t **)(result + 40);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      re::DynamicArray<float>::operator=((uint64_t)v7, a2);
      (*(void (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v7);
      v5 -= 8;
    }
    while (v5);
    uint64_t result = v7[0];
    if (v7[0])
    {
      if (v9) {
        return (*(uint64_t (**)(void))(*(void *)v7[0] + 40))();
      }
    }
  }
  return result;
}

uint64_t re::internal::GeomAttributeContainer::addAttribute(uint64_t *a1, char *a2, int a3)
{
  uint64_t result = re::internal::GeomAttributeContainer::attributeByName((re::internal::GeomAttributeContainer *)a1, a2);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 17) != a3) {
      return 0;
    }
  }
  else
  {
    Attribute = re::GeomAttribute::createAttribute((re *)a2, *((unsigned __int8 *)a1 + 4), a3, *(unsigned int *)a1);
    int v8 = a1[3];
    re::DynamicArray<re::TransitionCondition *>::add(a1 + 1, &Attribute);
    unint64_t v7 = (char *)*((void *)Attribute + 1);
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(a1 + 6, &v7, &v8);
    return (uint64_t)Attribute;
  }
  return result;
}

re::GeomAttribute *re::internal::GeomAttributeContainer::addAttribute(re::internal::GeomAttributeContainer *this, re::GeomAttribute *a2)
{
  uint64_t v3 = (char *)*((void *)a2 + 1);
  unint64_t v7 = a2;
  int v8 = v3;
  unint64_t v4 = (uint64_t *)((char *)this + 48);
  if (re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, &v8) != -1)return 0; {
  int v6 = *((void *)this + 3);
  }
  re::DynamicArray<re::TransitionCondition *>::add((void *)this + 1, &v7);
  int v8 = (char *)*((void *)v7 + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v4, &v8, &v6);
  return v7;
}

BOOL re::internal::GeomAttributeContainer::deleteAttribute(re::internal::GeomAttributeContainer *this, char *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __int16 v14 = a2;
  unint64_t v4 = (uint64_t *)((char *)this + 48);
  uint64_t v5 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, &v14);
  uint64_t v6 = v5;
  if (v5 != -1)
  {
    uint64_t v7 = *((void *)this + 7) + 16 * v5;
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v4, &v14);
    unsigned int v11 = *(_DWORD *)(v7 + 8);
    __int16 v10 = (int *)(v7 + 8);
    unint64_t v9 = v11;
    unint64_t v12 = *((void *)this + 3);
    if (v12 <= v11)
    {
      uint64_t v15 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v16 = 136315906;
      long long v17 = "operator[]";
      __int16 v18 = 1024;
      int v19 = 789;
      __int16 v20 = 2048;
      unint64_t v21 = v9;
      __int16 v22 = 2048;
      unint64_t v23 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      re::GeomAttribute::freeAttribute(*(re::GeomAttribute **)(*((void *)this + 5) + 8 * v9), v8);
      unint64_t v2 = *((void *)this + 3);
      unint64_t v12 = *v10;
      unint64_t v9 = v2 - 1;
      if (v2 - 1 <= v12)
      {
LABEL_7:
        re::DynamicArray<double>::resize((uint64_t)this + 8, v2 - 1);
        return v6 != -1;
      }
      if (v2)
      {
        if (v2 > v12)
        {
          *(void *)(*((void *)this + 5) + 8 * v12) = *(void *)(*((void *)this + 5) + 8 * v9);
          *(void *)&long long v24 = *(void *)(*(void *)(*((void *)this + 5) + 8 * v12) + 8);
          re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(v4, (char **)&v24, v10);
          goto LABEL_7;
        }
LABEL_11:
        uint64_t v15 = 0;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v16 = 136315906;
        long long v17 = "operator[]";
        __int16 v18 = 1024;
        int v19 = 789;
        __int16 v20 = 2048;
        unint64_t v21 = v12;
        __int16 v22 = 2048;
        unint64_t v23 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    long long v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    __int16 v22 = 2048;
    unint64_t v23 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  return v6 != -1;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::operator=(re::internal::GeomAttributeContainer *this, uint64_t a2)
{
  if (this != (re::internal::GeomAttributeContainer *)a2)
  {
    re::internal::GeomAttributeContainer::clearAttributes(this, (re::GeomAttribute *)a2);
    *((unsigned char *)this + 4) = *(unsigned char *)(a2 + 4);
    *(_DWORD *)this = *(_DWORD *)a2;
    re::DynamicArray<re::GeomAttribute *>::operator=((uint64_t)this + 8, a2 + 8);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)this + 6, (uint64_t *)(a2 + 48));
    *(unsigned char *)(a2 + 4) = 4;
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 24) = 0;
    ++*(_DWORD *)(a2 + 32);
    *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
    *(void *)(a2 + 96) = 0;
    unint64_t v4 = *(void *)(a2 + 64);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = v4;
    if (v4 >= 0x10)
    {
      unint64_t v5 = 0;
      *(void *)&long long v6 = -1;
      *((void *)&v6 + 1) = -1;
      do
        *(_OWORD *)(*(void *)(a2 + 48) + 16 * v5++) = v6;
      while (v5 < *(void *)(a2 + 64) >> 4);
    }
  }
  return this;
}

uint64_t re::intersectAABBs(uint64_t a1)
{
  int32x2_t v69 = COERCE_INT32X2_T(MEMORY[0x270FA5388](a1));
  uint64_t v6 = v5;
  uint64_t v7 = -5120;
  do
  {
    int v8 = &v78[v7];
    *((_OWORD *)v8 + 321) = 0uLL;
    *((_OWORD *)v8 + 320) = 0uLL;
    v7 += 40;
  }
  while (v7);
  unint64_t v79 = 0;
  *(void *)&long long v75 = v1;
  *((void *)&v75 + 1) = v2;
  *(void *)&long long v76 = v3;
  *((void *)&v76 + 1) = v4;
  int v77 = 0;
  uint64_t result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
  unint64_t v11 = v79;
  if (v79)
  {
    float32x4_t v12 = (float32x4_t)vdupq_lane_s32(v69, 0);
    int32x4_t v68 = vdupq_n_s32(0x7F800000u);
    float32x4_t v70 = v12;
    while (v11 < 0x81)
    {
      --v11;
      unint64_t v13 = &v78[40 * v11];
      uint64_t v14 = *(void *)v13;
      unint64_t v15 = *((void *)v13 + 1);
      uint64_t v16 = *((void *)v13 + 2);
      unint64_t v17 = *((void *)v13 + 3);
      int v18 = *((_DWORD *)v13 + 8);
      unint64_t v79 = v11;
      if (v17 * v15 > 0x63)
      {
        v26.i64[0] = 0x7F0000007FLL;
        v26.i64[1] = 0x7F0000007FLL;
        v27.i64[0] = 0x7F0000007FLL;
        v27.i64[1] = 0x7F0000007FLL;
        float32x4_t v28 = (float32x4_t)v68;
        if (*((void *)&v73 + 1))
        {
          uint64_t v29 = (float32x4_t *)v73;
          float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          do
          {
            v28.i32[3] = 0;
            float32x4_t v30 = *v29;
            float32x4_t v31 = v29[1];
            v29 += 3;
            v30.i32[3] = 0;
            v27.i32[3] = 0;
            float32x4_t v28 = vminnmq_f32(v28, v30);
            v31.i32[3] = 0;
            float32x4_t v27 = vmaxnmq_f32(v27, v31);
          }
          while (v29 != (float32x4_t *)(v73 + 48 * *((void *)&v73 + 1)));
        }
        float32x4_t v32 = (float32x4_t)v68;
        if (*((void *)&v74 + 1))
        {
          unsigned int v33 = (float32x4_t *)v74;
          v26.i64[0] = 0x7F0000007FLL;
          v26.i32[2] = 127;
          float32x4_t v32 = (float32x4_t)v68;
          do
          {
            v32.i32[3] = 0;
            float32x4_t v34 = *v33;
            float32x4_t v35 = v33[1];
            v33 += 3;
            v34.i32[3] = 0;
            v26.i32[3] = 0;
            float32x4_t v32 = vminnmq_f32(v32, v34);
            v35.i32[3] = 0;
            float32x4_t v26 = vmaxnmq_f32(v26, v35);
          }
          while (v33 != (float32x4_t *)(v74 + 48 * *((void *)&v74 + 1)));
        }
        v36.i64[0] = 0x7F0000007FLL;
        v36.i64[1] = 0x7F0000007FLL;
        v37.i64[0] = 0x7F0000007FLL;
        v37.i64[1] = 0x7F0000007FLL;
        float32x4_t v38 = (float32x4_t)v68;
        float32x4_t v12 = v70;
        if (*((void *)&v71 + 1))
        {
          uint64_t v39 = (float32x4_t *)v71;
          float32x4_t v38 = (float32x4_t)v68;
          do
          {
            v38.i32[3] = 0;
            float32x4_t v40 = *v39;
            float32x4_t v41 = v39[1];
            v39 += 3;
            v40.i32[3] = 0;
            v37.i32[3] = 0;
            float32x4_t v38 = vminnmq_f32(v38, v40);
            v41.i32[3] = 0;
            float32x4_t v37 = vmaxnmq_f32(v37, v41);
          }
          while (v39 != (float32x4_t *)(v71 + 48 * *((void *)&v71 + 1)));
        }
        float32x4_t v42 = (float32x4_t)v68;
        if (*((void *)&v72 + 1))
        {
          int8x8_t v43 = (float32x4_t *)v72;
          v36.i64[0] = 0x7F0000007FLL;
          v36.i32[2] = 127;
          float32x4_t v42 = (float32x4_t)v68;
          do
          {
            v42.i32[3] = 0;
            float32x4_t v44 = *v43;
            float32x4_t v45 = v43[1];
            v43 += 3;
            v44.i32[3] = 0;
            v36.i32[3] = 0;
            float32x4_t v42 = vminnmq_f32(v42, v44);
            v45.i32[3] = 0;
            float32x4_t v36 = vmaxnmq_f32(v36, v45);
          }
          while (v43 != (float32x4_t *)(v72 + 48 * *((void *)&v72 + 1)));
        }
        int v46 = (v18 + 1) % 3;
        uint32x4_t v47 = (uint32x4_t)vcgtq_f32(v28, v37);
        v47.i32[3] = v47.i32[2];
        float32x4_t v65 = v32;
        float32x4_t v67 = v26;
        float32x4_t v63 = v42;
        float32x4_t v64 = v36;
        if ((vmaxvq_u32(v47) & 0x80000000) == 0)
        {
          uint32x4_t v48 = (uint32x4_t)vcgtq_f32(v38, v27);
          v48.i32[3] = v48.i32[2];
          if ((vmaxvq_u32(v48) & 0x80000000) == 0)
          {
            long long v75 = v73;
            long long v76 = v71;
            int v77 = v46;
            float32x4_t v57 = v28;
            float32x4_t v58 = v27;
            float32x4_t v59 = v37;
            float32x4_t v61 = v38;
            uint64_t result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            float32x4_t v38 = v61;
            float32x4_t v42 = v63;
            float32x4_t v37 = v59;
            float32x4_t v36 = v64;
            float32x4_t v32 = v65;
            float32x4_t v28 = v57;
            float32x4_t v27 = v58;
            float32x4_t v26 = v67;
            float32x4_t v12 = v70;
          }
        }
        uint32x4_t v49 = (uint32x4_t)vcgtq_f32(v28, v36);
        v49.i32[3] = v49.i32[2];
        if ((vmaxvq_u32(v49) & 0x80000000) == 0)
        {
          uint32x4_t v50 = (uint32x4_t)vcgtq_f32(v42, v27);
          v50.i32[3] = v50.i32[2];
          if ((vmaxvq_u32(v50) & 0x80000000) == 0)
          {
            long long v75 = v73;
            long long v76 = v72;
            int v77 = v46;
            float32x4_t v60 = v37;
            float32x4_t v62 = v38;
            uint64_t result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            float32x4_t v38 = v62;
            float32x4_t v42 = v63;
            float32x4_t v37 = v60;
            float32x4_t v36 = v64;
            float32x4_t v32 = v65;
            float32x4_t v26 = v67;
            float32x4_t v12 = v70;
          }
        }
        uint32x4_t v51 = (uint32x4_t)vcgtq_f32(v32, v37);
        v51.i32[3] = v51.i32[2];
        if ((vmaxvq_u32(v51) & 0x80000000) == 0)
        {
          uint32x4_t v52 = (uint32x4_t)vcgtq_f32(v38, v26);
          v52.i32[3] = v52.i32[2];
          if ((vmaxvq_u32(v52) & 0x80000000) == 0)
          {
            long long v75 = v74;
            long long v76 = v71;
            int v77 = v46;
            uint64_t result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            float32x4_t v42 = v63;
            float32x4_t v36 = v64;
            float32x4_t v32 = v65;
            float32x4_t v26 = v67;
            float32x4_t v12 = v70;
          }
        }
        uint32x4_t v53 = (uint32x4_t)vcgtq_f32(v32, v36);
        v53.i32[3] = v53.i32[2];
        if ((vmaxvq_u32(v53) & 0x80000000) == 0)
        {
          uint32x4_t v54 = (uint32x4_t)vcgtq_f32(v42, v26);
          v54.i32[3] = v54.i32[2];
          if ((vmaxvq_u32(v54) & 0x80000000) == 0)
          {
            long long v75 = v74;
            long long v76 = v72;
            int v77 = v46;
            uint64_t result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            float32x4_t v12 = v70;
          }
        }
        unint64_t v11 = v79;
        if (!v79) {
          return result;
        }
      }
      else
      {
        if (v15)
        {
          unint64_t v66 = v11;
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (v17)
            {
              __int16 v20 = (float32x4_t *)(v14 + 48 * i);
              unint64_t v21 = (float32x4_t *)v16;
              unint64_t v22 = v17;
              do
              {
                if (v20[2].i32[0] != v21[2].i32[0])
                {
                  uint32x4_t v23 = (uint32x4_t)vcgtq_f32(*v20, vaddq_f32(v12, v21[1]));
                  v23.i32[3] = v23.i32[2];
                  if ((vmaxvq_u32(v23) & 0x80000000) == 0)
                  {
                    uint32x4_t v24 = (uint32x4_t)vcgtq_f32(vsubq_f32(*v21, v12), v20[1]);
                    v24.i32[3] = v24.i32[2];
                    if ((vmaxvq_u32(v24) & 0x80000000) == 0)
                    {
                      uint64_t v25 = *(void *)(v6 + 24);
                      if (!v25) {
                        goto LABEL_48;
                      }
                      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float32x4_t *))(*(void *)v25 + 48))(v25, v14 + 48 * i, v21);
                      float32x4_t v12 = v70;
                    }
                  }
                }
                v21 += 3;
                --v22;
              }
              while (v22);
            }
          }
          unint64_t v11 = v66;
        }
        if (!v11) {
          return result;
        }
      }
    }
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "m_size <= N", "top", 78);
    _os_crash();
    __break(1u);
LABEL_48:
    unsigned int v55 = std::__throw_bad_function_call[abi:nn180100]();
    return re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v55, v56);
  }
  return result;
}

uint64_t re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 5120);
  if (v2 >= 0x80)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) InlineStack is full.", "m_size < N", "push", 60);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    unint64_t v3 = result + 40 * v2;
    long long v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v3 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)unint64_t v3 = v4;
    *(_OWORD *)(v3 + 16) = v5;
    ++*(void *)(result + 5120);
  }
  return result;
}

uint64_t anonymous namespace'::splitClusters(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v274 = *MEMORY[0x263EF8340];
  uint64_t v7 = (float32x4_t *)(a2 + 48 * (a3 >> 1));
  int v268 = a4;
  if (a3 >> 1 != a3)
  {
    unint64_t v13 = (float32x4_t *)(a2 + 48 * a3);
    uint64_t v14 = (float32x4_t *)a2;
    do
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - v14);
      if (v15 < 2) {
        break;
      }
      if (v15 == 3)
      {
        break;
      }
      if (v15 == 2)
      {
        float32x4_t v218 = v13[-3];
        float32x4_t v219 = v13[-2];
        float32x4_t v217 = v13 - 3;
        float32x4_t v220 = *v14;
        float32x4_t v221 = v14[1];
        uint32x4_t v222 = (uint32x4_t)vcgtq_f32(v218, v219);
        v222.i32[3] = v222.i32[2];
        int v223 = vmaxvq_u32(v222);
        float32x4_t v224 = vaddq_f32(v218, v219);
        v225.i64[0] = 0x3F0000003F000000;
        v225.i64[1] = 0x3F0000003F000000;
        float32x4_t v226 = vmulq_f32(v224, v225);
        uint64_t v227 = v226.i64[1];
        if (v223 >= 0) {
          uint64_t v228 = v226.i64[0];
        }
        else {
          uint64_t v228 = 0;
        }
        if (v223 < 0) {
          uint64_t v227 = 0;
        }
        v271.i64[0] = v228;
        v271.i64[1] = v227;
        float v229 = v271.f32[a4];
        uint32x4_t v230 = (uint32x4_t)vcgtq_f32(v220, v221);
        v230.i32[3] = v230.i32[2];
        int v231 = vmaxvq_u32(v230);
        float32x4_t v232 = vmulq_f32(vaddq_f32(v220, v221), v225);
        uint64_t v233 = v232.i64[1];
        if (v231 >= 0) {
          uint64_t v234 = v232.i64[0];
        }
        else {
          uint64_t v234 = 0;
        }
        if (v231 < 0) {
          uint64_t v233 = 0;
        }
        uint64_t v269 = v234;
        uint64_t v270 = v233;
        if (v229 < *((float *)&v269 + a4))
        {
          float32x4_t v235 = *v14;
          float32x4_t v236 = v14[2];
          float32x4_t v272 = v14[1];
          float32x4_t v273 = v236;
          float32x4_t v271 = v235;
          float32x4_t v237 = *v217;
          float32x4_t v238 = v217[1];
          v14[2].i32[0] = v217[2].i32[0];
          *uint64_t v14 = v237;
          v14[1] = v238;
          float32x4_t v239 = v271;
          float32x4_t v240 = v272;
          v217[2].i32[0] = v273.i32[0];
          *float32x4_t v217 = v239;
          v217[1] = v240;
        }
        break;
      }
      if ((char *)v13 - (char *)v14 <= 383)
      {
        if (&v13[-3] != v14)
        {
          v241.i64[0] = 0x3F0000003F000000;
          v241.i64[1] = 0x3F0000003F000000;
          do
          {
            uint64_t v242 = v14 + 3;
            if (v14 != v13 && v242 != v13)
            {
              uint64_t v243 = 3;
              int v244 = v14;
              do
              {
                uint64_t v245 = &v14[v243];
                float32x4_t v246 = v14[v243];
                float32x4_t v247 = v14[v243 + 1];
                float32x4_t v248 = *v244;
                float32x4_t v249 = v244[1];
                uint32x4_t v250 = (uint32x4_t)vcgtq_f32(v246, v247);
                v250.i32[3] = v250.i32[2];
                int v251 = vmaxvq_u32(v250);
                float32x4_t v252 = vmulq_f32(vaddq_f32(v246, v247), v241);
                uint64_t v253 = v252.i64[1];
                if (v251 >= 0) {
                  uint64_t v254 = v252.i64[0];
                }
                else {
                  uint64_t v254 = 0;
                }
                if (v251 < 0) {
                  uint64_t v253 = 0;
                }
                v271.i64[0] = v254;
                v271.i64[1] = v253;
                float v255 = v271.f32[a4];
                uint32x4_t v256 = (uint32x4_t)vcgtq_f32(v248, v249);
                v256.i32[3] = v256.i32[2];
                int v257 = vmaxvq_u32(v256);
                float32x4_t v258 = vmulq_f32(vaddq_f32(v248, v249), v241);
                uint64_t v259 = v258.i64[1];
                BOOL v260 = v257 >= 0;
                if (v257 >= 0) {
                  uint64_t v261 = v258.i64[0];
                }
                else {
                  uint64_t v261 = 0;
                }
                if (!v260) {
                  uint64_t v259 = 0;
                }
                uint64_t v269 = v261;
                uint64_t v270 = v259;
                if (v255 < *((float *)&v269 + a4)) {
                  int v244 = &v14[v243];
                }
                v243 += 3;
              }
              while (&v245[3] != v13);
              if (v244 != v14)
              {
                float32x4_t v262 = *v14;
                float32x4_t v263 = v14[2];
                float32x4_t v272 = v14[1];
                float32x4_t v273 = v263;
                float32x4_t v271 = v262;
                float32x4_t v264 = *v244;
                float32x4_t v265 = v244[1];
                v14[2].i32[0] = v244[2].i32[0];
                *uint64_t v14 = v264;
                v14[1] = v265;
                float32x4_t v266 = v271;
                float32x4_t v267 = v272;
                v244[2].i32[0] = v273.i32[0];
                *int v244 = v266;
                v244[1] = v267;
              }
            }
            v14 += 3;
          }
          while (v242 != &v13[-3]);
        }
        break;
      }
      uint64_t v16 = &v14[3 * (v15 >> 1)];
      unint64_t v17 = (unint64_t)&v13[-3];
      v19.i64[0] = 0x3F0000003F000000;
      v19.i64[1] = 0x3F0000003F000000;
      float32x4_t v20 = v14[1];
      uint32x4_t v21 = (uint32x4_t)vcgtq_f32(*v14, v20);
      v21.i32[3] = v21.i32[2];
      float32x4_t v22 = *v16;
      float32x4_t v23 = v16[1];
      int v24 = vmaxvq_u32(v21);
      float32x4_t v25 = vmulq_f32(vaddq_f32(*v14, v20), v19);
      uint64_t v26 = v25.i64[1];
      if (v24 >= 0) {
        uint64_t v27 = v25.i64[0];
      }
      else {
        uint64_t v27 = 0;
      }
      if (v24 < 0) {
        uint64_t v26 = 0;
      }
      v271.i64[0] = v27;
      v271.i64[1] = v26;
      uint32x4_t v28 = (uint32x4_t)vcgtq_f32(v22, v23);
      v28.i32[3] = v28.i32[2];
      if ((vmaxvq_u32(v28) & 0x80000000) != 0)
      {
        uint64_t v31 = 0;
        uint64_t v30 = 0;
      }
      else
      {
        float32x4_t v29 = vmulq_f32(vaddq_f32(v22, v23), v19);
        uint64_t v30 = v29.i64[1];
        uint64_t v31 = v29.i64[0];
      }
      a4 = v268;
      float v32 = v271.f32[v268];
      uint64_t v33 = v268;
      uint64_t v269 = v31;
      uint64_t v270 = v30;
      if (v32 >= *((float *)&v269 + v268))
      {
        unint64_t v35 = (unint64_t)&v13[-3];
        while (1)
        {
          unint64_t v34 = v35 - 48;
          if ((float32x4_t *)(v35 - 48) == v14) {
            break;
          }
          float32x4_t v36 = *(float32x4_t *)(v35 - 48);
          float32x4_t v37 = *(float32x4_t *)(v35 - 32);
          float32x4_t v38 = *v16;
          float32x4_t v39 = v16[1];
          uint32x4_t v40 = (uint32x4_t)vcgtq_f32(v36, v37);
          v40.i32[3] = v40.i32[2];
          int v41 = vmaxvq_u32(v40);
          float32x4_t v42 = vmulq_f32(vaddq_f32(v36, v37), v19);
          uint64_t v43 = v42.i64[1];
          if (v41 >= 0) {
            uint64_t v44 = v42.i64[0];
          }
          else {
            uint64_t v44 = 0;
          }
          if (v41 < 0) {
            uint64_t v43 = 0;
          }
          v271.i64[0] = v44;
          v271.i64[1] = v43;
          float v45 = v271.f32[v268];
          uint32x4_t v46 = (uint32x4_t)vcgtq_f32(v38, v39);
          v46.i32[3] = v46.i32[2];
          int v47 = vmaxvq_u32(v46);
          float32x4_t v48 = vmulq_f32(vaddq_f32(v38, v39), v19);
          uint64_t v49 = v48.i64[1];
          BOOL v50 = v47 >= 0;
          if (v47 >= 0) {
            uint64_t v51 = v48.i64[0];
          }
          else {
            uint64_t v51 = 0;
          }
          if (!v50) {
            uint64_t v49 = 0;
          }
          uint64_t v269 = v51;
          uint64_t v270 = v49;
          unint64_t v35 = v34;
          if (v45 < *((float *)&v269 + v268))
          {
            float32x4_t v52 = *v14;
            float32x4_t v53 = v14[2];
            float32x4_t v272 = v14[1];
            float32x4_t v273 = v53;
            float32x4_t v271 = v52;
            float32x4_t v54 = *(float32x4_t *)v34;
            float32x4_t v55 = *(float32x4_t *)(v34 + 16);
            v14[2].i32[0] = *(_DWORD *)(v34 + 32);
            *uint64_t v14 = v54;
            v14[1] = v55;
            float32x4_t v56 = v271;
            float32x4_t v57 = v272;
            *(_DWORD *)(v34 + 32) = v273.i32[0];
            *(float32x4_t *)unint64_t v34 = v56;
            *(float32x4_t *)(v34 + 16) = v57;
            ++v18;
            goto LABEL_32;
          }
        }
        int64_t v135 = v14 + 3;
        float32x4_t v136 = v13[-3];
        float32x4_t v137 = v13[-2];
        uint32x4_t v138 = (uint32x4_t)vcgtq_f32(*v14, v20);
        v138.i32[3] = v138.i32[2];
        int v139 = vmaxvq_u32(v138);
        float32x4_t v140 = vmulq_f32(vaddq_f32(v20, *v14), v19);
        uint64_t v141 = v140.i64[1];
        if (v139 >= 0) {
          uint64_t v142 = v140.i64[0];
        }
        else {
          uint64_t v142 = 0;
        }
        if (v139 < 0) {
          uint64_t v141 = 0;
        }
        v271.i64[0] = v142;
        v271.i64[1] = v141;
        float v143 = v271.f32[v268];
        uint32x4_t v144 = (uint32x4_t)vcgtq_f32(v136, v137);
        v144.i32[3] = v144.i32[2];
        int v145 = vmaxvq_u32(v144);
        float32x4_t v146 = vmulq_f32(vaddq_f32(v136, v137), v19);
        uint64_t v147 = v146.i64[1];
        if (v145 >= 0) {
          uint64_t v148 = v146.i64[0];
        }
        else {
          uint64_t v148 = 0;
        }
        if (v145 < 0) {
          uint64_t v147 = 0;
        }
        uint64_t v269 = v148;
        uint64_t v270 = v147;
        if (v143 >= *((float *)&v269 + v268))
        {
          while (v135 != (float32x4_t *)v17)
          {
            float32x4_t v149 = *v135;
            float32x4_t v150 = v135[1];
            uint32x4_t v151 = (uint32x4_t)vcgtq_f32(*v14, v20);
            v151.i32[3] = v151.i32[2];
            int v152 = vmaxvq_u32(v151);
            float32x4_t v153 = vmulq_f32(vaddq_f32(v20, *v14), v19);
            uint64_t v154 = v153.i64[1];
            if (v152 >= 0) {
              uint64_t v155 = v153.i64[0];
            }
            else {
              uint64_t v155 = 0;
            }
            if (v152 < 0) {
              uint64_t v154 = 0;
            }
            v271.i64[0] = v155;
            v271.i64[1] = v154;
            float v156 = v271.f32[v268];
            uint32x4_t v157 = (uint32x4_t)vcgtq_f32(v149, v150);
            v157.i32[3] = v157.i32[2];
            int v158 = vmaxvq_u32(v157);
            float32x4_t v159 = vmulq_f32(vaddq_f32(v149, v150), v19);
            uint64_t v160 = v159.i64[1];
            if (v158 >= 0) {
              uint64_t v161 = v159.i64[0];
            }
            else {
              uint64_t v161 = 0;
            }
            if (v158 < 0) {
              uint64_t v160 = 0;
            }
            uint64_t v269 = v161;
            uint64_t v270 = v160;
            if (v156 < *((float *)&v269 + v268))
            {
              float32x4_t v178 = *v135;
              float32x4_t v179 = v135[2];
              float32x4_t v272 = v135[1];
              float32x4_t v273 = v179;
              float32x4_t v271 = v178;
              float32x4_t v180 = *(float32x4_t *)v17;
              float32x4_t v181 = v13[-2];
              v135[2].i32[0] = v13[-1].i32[0];
              *int64_t v135 = v180;
              v135[1] = v181;
              v135 += 3;
              float32x4_t v182 = v271;
              float32x4_t v183 = v272;
              v13[-1].i32[0] = v273.i32[0];
              *(float32x4_t *)unint64_t v17 = v182;
              v13[-2] = v183;
              goto LABEL_134;
            }
            v135 += 3;
          }
          break;
        }
LABEL_134:
        if (v135 == (float32x4_t *)v17) {
          break;
        }
        while (1)
        {
          float32x4_t v184 = v14[1];
          float32x4_t v119 = v135 - 3;
          do
          {
            float32x4_t v185 = v119[3];
            float32x4_t v186 = v119[4];
            v119 += 3;
            uint32x4_t v187 = (uint32x4_t)vcgtq_f32(*v14, v184);
            v187.i32[3] = v187.i32[2];
            int v188 = vmaxvq_u32(v187);
            float32x4_t v189 = vmulq_f32(vaddq_f32(v184, *v14), v19);
            uint64_t v190 = v189.i64[1];
            if (v188 >= 0) {
              uint64_t v191 = v189.i64[0];
            }
            else {
              uint64_t v191 = 0;
            }
            if (v188 < 0) {
              uint64_t v190 = 0;
            }
            v271.i64[0] = v191;
            v271.i64[1] = v190;
            float v192 = v271.f32[v33];
            uint32x4_t v193 = (uint32x4_t)vcgtq_f32(v185, v186);
            v193.i32[3] = v193.i32[2];
            int v194 = vmaxvq_u32(v193);
            float32x4_t v195 = vmulq_f32(vaddq_f32(v185, v186), v19);
            uint64_t v196 = v195.i64[1];
            if (v194 >= 0) {
              uint64_t v197 = v195.i64[0];
            }
            else {
              uint64_t v197 = 0;
            }
            if (v194 < 0) {
              uint64_t v196 = 0;
            }
            uint64_t v269 = v197;
            uint64_t v270 = v196;
          }
          while (v192 >= *((float *)&v269 + v33));
          int64_t v135 = v119 + 3;
          do
          {
            float32x4_t v198 = *(float32x4_t *)(v17 - 48);
            float32x4_t v199 = *(float32x4_t *)(v17 - 32);
            v17 -= 48;
            uint32x4_t v200 = (uint32x4_t)vcgtq_f32(*v14, v184);
            v200.i32[3] = v200.i32[2];
            int v201 = vmaxvq_u32(v200);
            float32x4_t v202 = vmulq_f32(vaddq_f32(v184, *v14), v19);
            uint64_t v203 = v202.i64[1];
            if (v201 >= 0) {
              uint64_t v204 = v202.i64[0];
            }
            else {
              uint64_t v204 = 0;
            }
            if (v201 < 0) {
              uint64_t v203 = 0;
            }
            v271.i64[0] = v204;
            v271.i64[1] = v203;
            float v205 = v271.f32[v33];
            uint32x4_t v206 = (uint32x4_t)vcgtq_f32(v198, v199);
            v206.i32[3] = v206.i32[2];
            int v207 = vmaxvq_u32(v206);
            float32x4_t v208 = vmulq_f32(vaddq_f32(v198, v199), v19);
            uint64_t v209 = v208.i64[1];
            if (v207 >= 0) {
              uint64_t v210 = v208.i64[0];
            }
            else {
              uint64_t v210 = 0;
            }
            if (v207 < 0) {
              uint64_t v209 = 0;
            }
            uint64_t v269 = v210;
            uint64_t v270 = v209;
          }
          while (v205 < *((float *)&v269 + v33));
          if ((unint64_t)v119 >= v17) {
            break;
          }
          float32x4_t v211 = *v119;
          float32x4_t v212 = v119[2];
          float32x4_t v272 = v119[1];
          float32x4_t v273 = v212;
          float32x4_t v271 = v211;
          float32x4_t v213 = *(float32x4_t *)v17;
          float32x4_t v214 = *(float32x4_t *)(v17 + 16);
          v119[2].i32[0] = *(_DWORD *)(v17 + 32);
          *float32x4_t v119 = v213;
          v119[1] = v214;
          float32x4_t v215 = v271;
          float32x4_t v216 = v272;
          *(_DWORD *)(v17 + 32) = v273.i32[0];
          *(float32x4_t *)unint64_t v17 = v215;
          *(float32x4_t *)(v17 + 16) = v216;
        }
        if (v119 > v7) {
          break;
        }
      }
      else
      {
        unint64_t v34 = (unint64_t)&v13[-3];
LABEL_32:
        float32x4_t v58 = v14 + 3;
        if ((unint64_t)&v14[3] >= v34)
        {
          float32x4_t v61 = v14 + 3;
        }
        else
        {
          f32 = (_OWORD *)v14[3].f32;
          while (1)
          {
            float32x4_t v60 = v16[1];
            float32x4_t v61 = (float32x4_t *)(f32 - 3);
            do
            {
              float32x4_t v62 = v61[3];
              float32x4_t v63 = v61[4];
              v61 += 3;
              float32x4_t v64 = *v16;
              uint32x4_t v65 = (uint32x4_t)vcgtq_f32(v62, v63);
              v65.i32[3] = v65.i32[2];
              int v66 = vmaxvq_u32(v65);
              float32x4_t v67 = vmulq_f32(vaddq_f32(v62, v63), v19);
              uint64_t v68 = v67.i64[1];
              if (v66 >= 0) {
                uint64_t v69 = v67.i64[0];
              }
              else {
                uint64_t v69 = 0;
              }
              if (v66 < 0) {
                uint64_t v68 = 0;
              }
              v271.i64[0] = v69;
              v271.i64[1] = v68;
              float v70 = v271.f32[v33];
              uint32x4_t v71 = (uint32x4_t)vcgtq_f32(v64, v60);
              v71.i32[3] = v71.i32[2];
              int v72 = vmaxvq_u32(v71);
              float32x4_t v73 = vmulq_f32(vaddq_f32(v60, v64), v19);
              uint64_t v74 = v73.i64[1];
              BOOL v75 = v72 >= 0;
              if (v72 >= 0) {
                uint64_t v76 = v73.i64[0];
              }
              else {
                uint64_t v76 = 0;
              }
              if (!v75) {
                uint64_t v74 = 0;
              }
              uint64_t v269 = v76;
              uint64_t v270 = v74;
            }
            while (v70 < *((float *)&v269 + v33));
            f32 = (_OWORD *)v61[3].f32;
            do
            {
              float32x4_t v77 = *(float32x4_t *)(v34 - 48);
              float32x4_t v78 = *(float32x4_t *)(v34 - 32);
              v34 -= 48;
              float32x4_t v79 = *v16;
              uint32x4_t v80 = (uint32x4_t)vcgtq_f32(v77, v78);
              v80.i32[3] = v80.i32[2];
              int v81 = vmaxvq_u32(v80);
              float32x4_t v82 = vmulq_f32(vaddq_f32(v77, v78), v19);
              uint64_t v83 = v82.i64[1];
              if (v81 >= 0) {
                uint64_t v84 = v82.i64[0];
              }
              else {
                uint64_t v84 = 0;
              }
              if (v81 < 0) {
                uint64_t v83 = 0;
              }
              v271.i64[0] = v84;
              v271.i64[1] = v83;
              float v85 = v271.f32[v33];
              uint32x4_t v86 = (uint32x4_t)vcgtq_f32(v79, v60);
              v86.i32[3] = v86.i32[2];
              int v87 = vmaxvq_u32(v86);
              float32x4_t v88 = vmulq_f32(vaddq_f32(v60, v79), v19);
              uint64_t v89 = v88.i64[1];
              BOOL v90 = v87 >= 0;
              if (v87 >= 0) {
                uint64_t v91 = v88.i64[0];
              }
              else {
                uint64_t v91 = 0;
              }
              if (!v90) {
                uint64_t v89 = 0;
              }
              uint64_t v269 = v91;
              uint64_t v270 = v89;
            }
            while (v85 >= *((float *)&v269 + v33));
            if ((unint64_t)v61 >= v34) {
              break;
            }
            float32x4_t v92 = *v61;
            float32x4_t v93 = v61[2];
            float32x4_t v272 = v61[1];
            float32x4_t v273 = v93;
            float32x4_t v271 = v92;
            float32x4_t v94 = *(float32x4_t *)v34;
            float32x4_t v95 = *(float32x4_t *)(v34 + 16);
            v61[2].i32[0] = *(_DWORD *)(v34 + 32);
            *float32x4_t v61 = v94;
            v61[1] = v95;
            float32x4_t v96 = v271;
            float32x4_t v97 = v272;
            *(_DWORD *)(v34 + 32) = v273.i32[0];
            *(float32x4_t *)unint64_t v34 = v96;
            *(float32x4_t *)(v34 + 16) = v97;
            ++v18;
            if (v61 == v16) {
              uint64_t v16 = (float32x4_t *)v34;
            }
          }
        }
        if (v61 != v16)
        {
          float32x4_t v98 = v16[1];
          float32x4_t v99 = *v61;
          float32x4_t v100 = v61[1];
          uint32x4_t v101 = (uint32x4_t)vcgtq_f32(*v16, v98);
          v101.i32[3] = v101.i32[2];
          int v102 = vmaxvq_u32(v101);
          float32x4_t v103 = vmulq_f32(vaddq_f32(*v16, v98), v19);
          uint64_t v104 = v103.i64[1];
          if (v102 >= 0) {
            uint64_t v105 = v103.i64[0];
          }
          else {
            uint64_t v105 = 0;
          }
          if (v102 < 0) {
            uint64_t v104 = 0;
          }
          v271.i64[0] = v105;
          v271.i64[1] = v104;
          float v106 = v271.f32[v33];
          uint32x4_t v107 = (uint32x4_t)vcgtq_f32(v99, v100);
          v107.i32[3] = v107.i32[2];
          int v108 = vmaxvq_u32(v107);
          float32x4_t v109 = vmulq_f32(vaddq_f32(v99, v100), v19);
          uint64_t v110 = v109.i64[1];
          BOOL v111 = v108 >= 0;
          if (v108 >= 0) {
            uint64_t v112 = v109.i64[0];
          }
          else {
            uint64_t v112 = 0;
          }
          if (!v111) {
            uint64_t v110 = 0;
          }
          uint64_t v269 = v112;
          uint64_t v270 = v110;
          if (v106 < *((float *)&v269 + v33))
          {
            float32x4_t v113 = *v61;
            float32x4_t v114 = v61[2];
            float32x4_t v272 = v61[1];
            float32x4_t v273 = v114;
            float32x4_t v271 = v113;
            float32x4_t v115 = *v16;
            float32x4_t v116 = v16[1];
            v61[2].i32[0] = v16[2].i32[0];
            *float32x4_t v61 = v115;
            v61[1] = v116;
            float32x4_t v117 = v271;
            float32x4_t v118 = v272;
            v16[2].i32[0] = v273.i32[0];
            *uint64_t v16 = v117;
            v16[1] = v118;
            ++v18;
          }
        }
        if (v61 == v7) {
          break;
        }
        if (!v18)
        {
          if (v61 <= v7)
          {
            float32x4_t v162 = v61 + 3;
            while (v162 != v13)
            {
              float32x4_t v163 = v162[1];
              float32x4_t v164 = v162[-3];
              float32x4_t v165 = v162[-2];
              uint32x4_t v166 = (uint32x4_t)vcgtq_f32(*v162, v163);
              v166.i32[3] = v166.i32[2];
              int v167 = vmaxvq_u32(v166);
              float32x4_t v168 = vmulq_f32(vaddq_f32(*v162, v163), v19);
              uint64_t v169 = v168.i64[1];
              if (v167 >= 0) {
                uint64_t v170 = v168.i64[0];
              }
              else {
                uint64_t v170 = 0;
              }
              if (v167 < 0) {
                uint64_t v169 = 0;
              }
              v271.i64[0] = v170;
              v271.i64[1] = v169;
              float v171 = v271.f32[v33];
              uint32x4_t v172 = (uint32x4_t)vcgtq_f32(v164, v165);
              v172.i32[3] = v172.i32[2];
              int v173 = vmaxvq_u32(v172);
              float32x4_t v174 = vmulq_f32(vaddq_f32(v164, v165), v19);
              uint64_t v175 = v174.i64[1];
              BOOL v176 = v173 >= 0;
              if (v173 >= 0) {
                uint64_t v177 = v174.i64[0];
              }
              else {
                uint64_t v177 = 0;
              }
              if (!v176) {
                uint64_t v175 = 0;
              }
              uint64_t v269 = v177;
              uint64_t v270 = v175;
              v162 += 3;
              if (v171 < *((float *)&v269 + v33)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            while (v58 != v61)
            {
              float32x4_t v120 = v58[1];
              float32x4_t v121 = v58[-3];
              float32x4_t v122 = v58[-2];
              uint32x4_t v123 = (uint32x4_t)vcgtq_f32(*v58, v120);
              v123.i32[3] = v123.i32[2];
              int v124 = vmaxvq_u32(v123);
              float32x4_t v125 = vmulq_f32(vaddq_f32(*v58, v120), v19);
              uint64_t v126 = v125.i64[1];
              if (v124 >= 0) {
                uint64_t v127 = v125.i64[0];
              }
              else {
                uint64_t v127 = 0;
              }
              if (v124 < 0) {
                uint64_t v126 = 0;
              }
              v271.i64[0] = v127;
              v271.i64[1] = v126;
              float v128 = v271.f32[v33];
              uint32x4_t v129 = (uint32x4_t)vcgtq_f32(v121, v122);
              v129.i32[3] = v129.i32[2];
              int v130 = vmaxvq_u32(v129);
              float32x4_t v131 = vmulq_f32(vaddq_f32(v121, v122), v19);
              uint64_t v132 = v131.i64[1];
              BOOL v133 = v130 >= 0;
              if (v130 >= 0) {
                uint64_t v134 = v131.i64[0];
              }
              else {
                uint64_t v134 = 0;
              }
              if (!v133) {
                uint64_t v132 = 0;
              }
              uint64_t v269 = v134;
              uint64_t v270 = v132;
              v58 += 3;
              if (v128 < *((float *)&v269 + v33)) {
                goto LABEL_78;
              }
            }
          }
          break;
        }
LABEL_78:
        if (v61 <= v7)
        {
          float32x4_t v119 = v61 + 3;
        }
        else
        {
          unint64_t v13 = v61;
          float32x4_t v119 = v14;
        }
      }
      uint64_t v14 = v119;
    }
    while (v13 != v7);
  }
  uint64_t v8 = re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(a2, a3, 0, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a2) >> 4));
  uint64_t v10 = v9;
  uint64_t result = re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(a2, a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a2) >> 4), a3);
  *a1 = v8;
  a1[1] = v10;
  a1[2] = result;
  a1[3] = v12;
  return result;
}

uint64_t re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a2 <= a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive < size()", "range", 648, a3, a2);
    _os_crash();
    __break(1u);
  }
  else if (a2 >= a4)
  {
    return a1 + 48 * a3;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 649, a3, a2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,anonymous namespace'::splitClusters(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,int)::$_0 &,re::Pair<re::AABB,unsigned int,true>*>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int *a4)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  float32x4_t v4 = a2[1];
  float32x4_t v5 = *a1;
  float32x4_t v6 = a1[1];
  uint32x4_t v7 = (uint32x4_t)vcgtq_f32(*a2, v4);
  v7.i32[3] = v7.i32[2];
  int v8 = vmaxvq_u32(v7);
  float32x4_t v9 = vaddq_f32(*a2, v4);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v11 = vmulq_f32(v9, v10);
  uint64_t v12 = v11.i64[1];
  uint64_t v13 = v11.i64[0];
  if (v8 >= 0)
  {
    uint64_t v14 = v11.i64[1];
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v94 = v13;
  uint64_t v95 = v14;
  uint64_t v15 = *a4;
  float v16 = *((float *)&v94 + v15);
  uint32x4_t v17 = (uint32x4_t)vcgtq_f32(v5, v6);
  v17.i32[3] = v17.i32[2];
  int v18 = vmaxvq_u32(v17);
  float32x4_t v19 = vmulq_f32(vaddq_f32(v5, v6), v10);
  uint64_t v20 = v19.i64[1];
  if (v18 >= 0) {
    uint64_t v21 = v19.i64[0];
  }
  else {
    uint64_t v21 = 0;
  }
  if (v18 < 0) {
    uint64_t v20 = 0;
  }
  uint64_t v92 = v21;
  uint64_t v93 = v20;
  float32x4_t v22 = a3[1];
  uint32x4_t v23 = (uint32x4_t)vcgtq_f32(*a3, v22);
  v23.i32[3] = v23.i32[2];
  int v24 = vmaxvq_u32(v23);
  float32x4_t v25 = vmulq_f32(vaddq_f32(*a3, v22), v10);
  uint64_t v26 = v25.i64[1];
  if (v16 >= *((float *)&v92 + v15))
  {
    BOOL v36 = v24 >= 0;
    if (v24 >= 0) {
      uint64_t v37 = v25.i64[0];
    }
    else {
      uint64_t v37 = 0;
    }
    if (!v36) {
      uint64_t v26 = 0;
    }
    uint64_t v94 = v37;
    uint64_t v95 = v26;
    float v38 = *((float *)&v94 + v15);
    BOOL v39 = v8 >= 0;
    if (v8 >= 0) {
      uint64_t v40 = v11.i64[0];
    }
    else {
      uint64_t v40 = 0;
    }
    if (!v39) {
      uint64_t v12 = 0;
    }
    uint64_t v92 = v40;
    uint64_t v93 = v12;
    if (v38 >= *((float *)&v92 + v15)) {
      return 0;
    }
    float32x4_t v41 = a2[1];
    float32x4_t v96 = a2[2];
    float32x4_t v42 = *a2;
    __int32 v43 = a3[2].i32[0];
    float32x4_t v44 = a3[1];
    *a2 = *a3;
    a2[1] = v44;
    a2[2].i32[0] = v43;
    *a3 = v42;
    a3[1] = v41;
    a3[2].i32[0] = v96.i32[0];
    float32x4_t v45 = a2[1];
    float32x4_t v46 = *a1;
    float32x4_t v47 = a1[1];
    uint32x4_t v48 = (uint32x4_t)vcgtq_f32(*a2, v45);
    v48.i32[3] = v48.i32[2];
    if ((vmaxvq_u32(v48) & 0x80000000) != 0)
    {
      uint64_t v53 = 0;
      uint64_t v52 = 0;
    }
    else
    {
      float32x4_t v49 = vaddq_f32(*a2, v45);
      v50.i64[0] = 0x3F0000003F000000;
      v50.i64[1] = 0x3F0000003F000000;
      float32x4_t v51 = vmulq_f32(v49, v50);
      uint64_t v52 = v51.i64[1];
      uint64_t v53 = v51.i64[0];
    }
    uint64_t v94 = v53;
    uint64_t v95 = v52;
    uint64_t v68 = *a4;
    float v69 = *((float *)&v94 + v68);
    uint32x4_t v70 = (uint32x4_t)vcgtq_f32(v46, v47);
    v70.i32[3] = v70.i32[2];
    if ((vmaxvq_u32(v70) & 0x80000000) != 0)
    {
      uint64_t v75 = 0;
      uint64_t v74 = 0;
    }
    else
    {
      float32x4_t v71 = vaddq_f32(v46, v47);
      v72.i64[0] = 0x3F0000003F000000;
      v72.i64[1] = 0x3F0000003F000000;
      float32x4_t v73 = vmulq_f32(v71, v72);
      uint64_t v74 = v73.i64[1];
      uint64_t v75 = v73.i64[0];
    }
    uint64_t v92 = v75;
    uint64_t v93 = v74;
    if (v69 >= *((float *)&v92 + v68)) {
      return 1;
    }
    float32x4_t v84 = a1[1];
    float32x4_t v96 = a1[2];
    float32x4_t v85 = *a1;
    __int32 v86 = a2[2].i32[0];
    float32x4_t v87 = a2[1];
    *a1 = *a2;
    a1[1] = v87;
    a1[2].i32[0] = v86;
    *a2 = v85;
    a2[1] = v84;
    a2[2].i32[0] = v96.i32[0];
    return 2;
  }
  BOOL v27 = v24 >= 0;
  if (v24 >= 0) {
    uint64_t v28 = v25.i64[0];
  }
  else {
    uint64_t v28 = 0;
  }
  if (!v27) {
    uint64_t v26 = 0;
  }
  uint64_t v94 = v28;
  uint64_t v95 = v26;
  float v29 = *((float *)&v94 + v15);
  BOOL v30 = v8 >= 0;
  if (v8 >= 0) {
    uint64_t v31 = v11.i64[0];
  }
  else {
    uint64_t v31 = 0;
  }
  if (!v30) {
    uint64_t v12 = 0;
  }
  uint64_t v92 = v31;
  uint64_t v93 = v12;
  if (v29 >= *((float *)&v92 + v15))
  {
    float32x4_t v54 = a1[1];
    float32x4_t v96 = a1[2];
    float32x4_t v55 = *a1;
    __int32 v56 = a2[2].i32[0];
    float32x4_t v57 = a2[1];
    *a1 = *a2;
    a1[1] = v57;
    a1[2].i32[0] = v56;
    *a2 = v55;
    a2[1] = v54;
    a2[2].i32[0] = v96.i32[0];
    float32x4_t v58 = a3[1];
    float32x4_t v59 = *a2;
    float32x4_t v60 = a2[1];
    uint32x4_t v61 = (uint32x4_t)vcgtq_f32(*a3, v58);
    v61.i32[3] = v61.i32[2];
    if ((vmaxvq_u32(v61) & 0x80000000) != 0)
    {
      uint64_t v66 = 0;
      uint64_t v65 = 0;
    }
    else
    {
      float32x4_t v62 = vaddq_f32(*a3, v58);
      v63.i64[0] = 0x3F0000003F000000;
      v63.i64[1] = 0x3F0000003F000000;
      float32x4_t v64 = vmulq_f32(v62, v63);
      uint64_t v65 = v64.i64[1];
      uint64_t v66 = v64.i64[0];
    }
    uint64_t v94 = v66;
    uint64_t v95 = v65;
    uint64_t v76 = *a4;
    float v77 = *((float *)&v94 + v76);
    uint32x4_t v78 = (uint32x4_t)vcgtq_f32(v59, v60);
    v78.i32[3] = v78.i32[2];
    if ((vmaxvq_u32(v78) & 0x80000000) != 0)
    {
      uint64_t v83 = 0;
      uint64_t v82 = 0;
    }
    else
    {
      float32x4_t v79 = vaddq_f32(v59, v60);
      v80.i64[0] = 0x3F0000003F000000;
      v80.i64[1] = 0x3F0000003F000000;
      float32x4_t v81 = vmulq_f32(v79, v80);
      uint64_t v82 = v81.i64[1];
      uint64_t v83 = v81.i64[0];
    }
    uint64_t v92 = v83;
    uint64_t v93 = v82;
    if (v77 >= *((float *)&v92 + v76)) {
      return 1;
    }
    float32x4_t v88 = a2[1];
    float32x4_t v96 = a2[2];
    float32x4_t v89 = *a2;
    __int32 v90 = a3[2].i32[0];
    float32x4_t v91 = a3[1];
    *a2 = *a3;
    a2[1] = v91;
    a2[2].i32[0] = v90;
    *a3 = v89;
    a3[1] = v88;
    a3[2].i32[0] = v96.i32[0];
    return 2;
  }
  float32x4_t v32 = a1[1];
  float32x4_t v96 = a1[2];
  float32x4_t v33 = *a1;
  __int32 v34 = a3[2].i32[0];
  float32x4_t v35 = a3[1];
  *a1 = *a3;
  a1[1] = v35;
  a1[2].i32[0] = v34;
  *a3 = v33;
  a3[1] = v32;
  a3[2].i32[0] = v96.i32[0];
  return 1;
}

void *re::allocInfo_GeomBuildBoxOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93120))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93630, "GeomBuildBoxOptions");
    __cxa_guard_release(&qword_26AF93120);
  }
  return &unk_26AF93630;
}

void re::initInfo_GeomBuildBoxOptions(re *this, re::IntrospectionBase *a2)
{
  v46[0] = 0x8A7565098DA98CALL;
  v46[1] = "GeomBuildBoxOptions";
  re::StringID::destroyString((re::StringID *)v46);
  *((_OWORD *)this + 2) = v47;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93128, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93128);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "widthSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93578 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      float32x4_t v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93580 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint16_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depthSegmentCount";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93588 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      float32x4_t v19 = re::introspect_uint16_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cornerSegmentCount";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x600000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93590 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint32x4_t v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radius";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF93598 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_float((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "width";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0xC00000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF935A0 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_float((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF935A8 = v32;
      float32x4_t v33 = re::introspectionAllocator((re *)v32);
      float32x4_t v35 = re::introspect_float((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depth";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x1400000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF935B0 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      BOOL v39 = re::introspect_BOOL((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x1800000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF935B8 = v40;
      float32x4_t v41 = re::introspectionAllocator((re *)v40);
      __int32 v43 = re::introspect_BOOL((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x190000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF935C0 = v44;
      __cxa_guard_release(&qword_26AF93128);
    }
  }
  *((void *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93578;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildBoxOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildBoxOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildBoxOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildBoxOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v45 = v47;
}

double re::internal::defaultConstruct<re::GeomBuildBoxOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0x1000100010001;
  double result = 0.0078125;
  *(_OWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_234371EE0;
  *(_WORD *)(a3 + 24) = 257;
  *(unsigned char *)(a3 + 26) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildBoxOptions>(uint64_t a1)
{
  *(void *)a1 = 0x1000100010001;
  double result = 0.0078125;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_234371EE0;
  *(_WORD *)(a1 + 24) = 257;
  *(unsigned char *)(a1 + 26) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildBoxOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildBoxOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildBoxOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildBoxOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildBoxOptions>, this);
}

void *re::allocInfo_GeomBuildBoxWithRoundedCornersOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93130))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF936A8, "GeomBuildBoxWithRoundedCornersOptions");
    __cxa_guard_release(&qword_26AF93130);
  }
  return &unk_26AF936A8;
}

void re::initInfo_GeomBuildBoxWithRoundedCornersOptions(re *this, re::IntrospectionBase *a2)
{
  v70[0] = 0x38926F5D37C171DCLL;
  v70[1] = "GeomBuildBoxWithRoundedCornersOptions";
  re::StringID::destroyString((re::StringID *)v70);
  *((_OWORD *)this + 2) = v71;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93138, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93138);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "widthSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93B58 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      float32x4_t v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93B60 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint16_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depthSegmentCount";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93B68 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      float32x4_t v19 = re::introspect_uint16_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "majorSegmentCount";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x600000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93B70 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint32x4_t v23 = re::introspect_uint16_t((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "minorSegmentCount";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF93B78 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_float((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "majorRadius";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0xC00000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF93B80 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_float((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "minorRadius";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1000000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF93B88 = v32;
      float32x4_t v33 = re::introspectionAllocator((re *)v32);
      float32x4_t v35 = re::introspect_float((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "width";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x1400000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF93B90 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      BOOL v39 = re::introspect_float((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x1800000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF93B98 = v40;
      float32x4_t v41 = re::introspectionAllocator((re *)v40);
      __int32 v43 = re::introspect_float((re *)1, v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depth";
      *(void *)(v44 + 16) = v43;
      *(void *)(v44 + 24) = 0;
      *(void *)(v44 + 32) = 0x1C0000000ALL;
      *(_DWORD *)(v44 + 40) = 0;
      *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_26AF93BA0 = v44;
      long long v45 = re::introspectionAllocator((re *)v44);
      long long v47 = re::introspect_BOOL((re *)1, v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 72, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *(void *)(v48 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v48 + 16) = v47;
      *(void *)(v48 + 24) = 0;
      *(void *)(v48 + 32) = 0x200000000BLL;
      *(_DWORD *)(v48 + 40) = 0;
      *(void *)(v48 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_26AF93BA8 = v48;
      float32x4_t v49 = re::introspectionAllocator((re *)v48);
      float32x4_t v51 = re::introspect_BOOL((re *)1, v50);
      uint64_t v52 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v52 = 1;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v52 + 16) = v51;
      *(void *)(v52 + 24) = 0;
      *(void *)(v52 + 32) = 0x210000000CLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(void *)(v52 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_26AF93BB0 = v52;
      uint64_t v53 = re::introspectionAllocator((re *)v52);
      float32x4_t v55 = re::introspect_BOOL((re *)1, v54);
      uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 72, 8);
      *(_DWORD *)uint64_t v56 = 1;
      *(void *)(v56 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "continuousCorners";
      *(void *)(v56 + 16) = v55;
      *(void *)(v56 + 24) = 0;
      *(void *)(v56 + 32) = 0x230000000DLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(void *)(v56 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_26AF93BB8 = v56;
      float32x4_t v57 = re::introspectionAllocator((re *)v56);
      float32x4_t v59 = re::introspect_BOOL((re *)1, v58);
      uint64_t v60 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 72, 8);
      *(_DWORD *)uint64_t v60 = 1;
      *(void *)(v60 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "clampContinuousCorners";
      *(void *)(v60 + 16) = v59;
      *(void *)(v60 + 24) = 0;
      *(void *)(v60 + 32) = 0x240000000ELL;
      *(_DWORD *)(v60 + 40) = 0;
      *(void *)(v60 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_26AF93BC0 = v60;
      uint32x4_t v61 = re::introspectionAllocator((re *)v60);
      float32x4_t v63 = re::introspect_BOOL((re *)1, v62);
      uint64_t v64 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 72, 8);
      *(_DWORD *)uint64_t v64 = 1;
      *(void *)(v64 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "normalizeUVs";
      *(void *)(v64 + 16) = v63;
      *(void *)(v64 + 24) = 0;
      *(void *)(v64 + 32) = 0x250000000FLL;
      *(_DWORD *)(v64 + 40) = 0;
      *(void *)(v64 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v64 + 56) = 0;
      *(_DWORD *)(v64 + 64) = 0;
      qword_26AF93BC8 = v64;
      uint64_t v65 = re::introspectionAllocator((re *)v64);
      float32x4_t v67 = re::introspect_BOOL((re *)1, v66);
      uint64_t v68 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v65 + 32))(v65, 72, 8);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "reflectUVs";
      *(void *)(v68 + 16) = v67;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + 32) = 0x2600000010;
      *(_DWORD *)(v68 + 40) = 0;
      *(void *)(v68 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_26AF93BD0 = v68;
      __cxa_guard_release(&qword_26AF93138);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 16;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93B58;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildBoxWithRoundedCornersOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildBoxWithRoundedCornersOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v69 = v71;
}

double re::internal::defaultConstruct<re::GeomBuildBoxWithRoundedCornersOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0x3000100010001;
  *(_WORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 4;
  *(_OWORD *)(a3 + 12) = xmmword_234371EF0;
  *(_DWORD *)(a3 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1065353216;
  *(void *)&double result = 16777473;
  *(_DWORD *)(a3 + 32) = 16777473;
  *(_WORD *)(a3 + 36) = 1;
  *(unsigned char *)(a3 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildBoxWithRoundedCornersOptions>(uint64_t a1)
{
  *(void *)a1 = 0x3000100010001;
  *(_WORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_234371EF0;
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1065353216;
  *(void *)&double result = 16777473;
  *(_DWORD *)(a1 + 32) = 16777473;
  *(_WORD *)(a1 + 36) = 1;
  *(unsigned char *)(a1 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildBoxWithRoundedCornersOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildBoxWithRoundedCornersOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildBoxWithRoundedCornersOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildBoxWithRoundedCornersOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildBoxWithRoundedCornersOptions>, this);
}

void *re::allocInfo_GeomBuildCapsuleOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93140))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93720, "GeomBuildCapsuleOptions");
    __cxa_guard_release(&qword_26AF93140);
  }
  return &unk_26AF93720;
}

void re::initInfo_GeomBuildCapsuleOptions(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0x8C51E8B3ECDD9986;
  v34[1] = "GeomBuildCapsuleOptions";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93148, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93148);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radialSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93320 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      float32x4_t v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93328 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint16_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "capSegmentCount";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93330 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      float32x4_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "capRadius";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93338 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint32x4_t v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF93340 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF93348 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1100000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF93350 = v32;
      __cxa_guard_release(&qword_26AF93148);
    }
  }
  *((void *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93320;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildCapsuleOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildCapsuleOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildCapsuleOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildCapsuleOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::GeomBuildCapsuleOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 65544;
  *(_WORD *)(a3 + 4) = 4;
  double result = 2.00000047;
  *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x400000003F000000;
  *(_WORD *)(a3 + 16) = 257;
  *(unsigned char *)(a3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildCapsuleOptions>(uint64_t a1)
{
  *(_DWORD *)a1 = 65544;
  *(_WORD *)(a1 + 4) = 4;
  double result = 2.00000047;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0x400000003F000000;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildCapsuleOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildCapsuleOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildCapsuleOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildCapsuleOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildCapsuleOptions>, this);
}

void *re::allocInfo_GeomBuildConeOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93150))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93798, "GeomBuildConeOptions");
    __cxa_guard_release(&qword_26AF93150);
  }
  return &unk_26AF93798;
}

void re::initInfo_GeomBuildConeOptions(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0xC49383041CB7C52;
  v34[1] = "GeomBuildConeOptions";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93158, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93158);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radialSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93358 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      float32x4_t v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93360 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93368 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      float32x4_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radius";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93370 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint32x4_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cap";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF93378 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0xD00000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF93380 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0xE00000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF93388 = v32;
      __cxa_guard_release(&qword_26AF93158);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93358;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildConeOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildConeOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildConeOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildConeOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::GeomBuildConeOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 65544;
  *(void *)(a3 + 4) = 0x3F0000003F800000;
  *(void *)&double result = 65793;
  *(_DWORD *)(a3 + 12) = 65793;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildConeOptions>(uint64_t a1)
{
  *(_DWORD *)a1 = 65544;
  *(void *)(a1 + 4) = 0x3F0000003F800000;
  *(void *)&double result = 65793;
  *(_DWORD *)(a1 + 12) = 65793;
  return result;
}

uint64_t re::introspect_GeomBuildConeOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildConeOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildConeOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildConeOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildConeOptions>, this);
}

void *re::allocInfo_GeomBuildCylinderOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93160))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93810, "GeomBuildCylinderOptions");
    __cxa_guard_release(&qword_26AF93160);
  }
  return &unk_26AF93810;
}

void re::initInfo_GeomBuildCylinderOptions(re *this, re::IntrospectionBase *a2)
{
  v42[0] = 0x289B3F5B491A3E2CLL;
  v42[1] = "GeomBuildCylinderOptions";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93168, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93168);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radialSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF933C8 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      float32x4_t v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF933D0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF933D8 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      float32x4_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "topRadius";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF933E0 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint32x4_t v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "bottomRadius";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF933E8 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "capTop";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF933F0 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "capBottom";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1100000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF933F8 = v32;
      long long v33 = re::introspectionAllocator((re *)v32);
      long long v35 = re::introspect_BOOL((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x1200000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF93400 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      BOOL v39 = re::introspect_BOOL((re *)1, v38);
      uint64_t v40 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v40 + 16) = v39;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x1300000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF93408 = v40;
      __cxa_guard_release(&qword_26AF93168);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF933C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildCylinderOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildCylinderOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildCylinderOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildCylinderOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v41 = v43;
}

double re::internal::defaultConstruct<re::GeomBuildCylinderOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 65544;
  double result = 0.0000305175853;
  *(void *)(a3 + 4) = 0x3F0000003F800000;
  *(void *)(a3 + 12) = 0x10101013F000000;
  *(unsigned char *)(a3 + 20) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildCylinderOptions>(uint64_t a1)
{
  *(_DWORD *)a1 = 65544;
  double result = 0.0000305175853;
  *(void *)(a1 + 4) = 0x3F0000003F800000;
  *(void *)(a1 + 12) = 0x10101013F000000;
  *(unsigned char *)(a1 + 20) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildCylinderOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildCylinderOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildCylinderOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildCylinderOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildCylinderOptions>, this);
}

void re::introspect_GeomBuildPlaneOrientation(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93170, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF93170);
    if (v24)
    {
      float32x4_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 2;
      *((void *)v26 + 2) = "PositiveY";
      qword_26AF93290 = (uint64_t)v26;
      BOOL v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 3;
      *((void *)v28 + 2) = "NegativeY";
      qword_26AF93298 = (uint64_t)v28;
      float v29 = re::introspectionAllocator(v28);
      BOOL v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)BOOL v30 = 1;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = "PositiveX";
      qword_26AF932A0 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 1;
      *((void *)v32 + 2) = "NegativeX";
      qword_26AF932A8 = (uint64_t)v32;
      long long v33 = re::introspectionAllocator(v32);
      __int32 v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)__int32 v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "PositiveZ";
      qword_26AF932B0 = (uint64_t)v34;
      long long v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 5;
      *(void *)(v36 + 16) = "NegativeZ";
      qword_26AF932B8 = v36;
      __cxa_guard_release(&qword_26AF93170);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93178))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF93410, "GeomBuildPlaneOrientation", 4, 4, 1, 1);
    qword_26AF93410 = (uint64_t)&unk_26E715E00;
    qword_26AF93450 = (uint64_t)&re::introspect_GeomBuildPlaneOrientation(BOOL)::enumTable;
    dword_26AF93420 = 9;
    __cxa_guard_release(&qword_26AF93178);
  }
  if ((_MergedGlobals_367 & 1) == 0)
  {
    _MergedGlobals_367 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF93410, a2);
    uint64_t v38 = 0xBA0BF2EDFBA4A4CCLL;
    BOOL v39 = "GeomBuildPlaneOrientation";
    v42[0] = 208862;
    v42[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      float32x4_t v4 = (unsigned int *)qword_26AF93450;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF93430 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildPlaneOrientation", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_GeomBuildPlaneOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93180))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93888, "GeomBuildPlaneOptions");
    __cxa_guard_release(&qword_26AF93180);
  }
  return &unk_26AF93888;
}

void re::initInfo_GeomBuildPlaneOptions(re *this, re::IntrospectionBase *a2)
{
  v41[0] = 0x85F4F1B50A8F3C68;
  v41[1] = "GeomBuildPlaneOptions";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93188, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93188);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "widthSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93458 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depthSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93460 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_uint16_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cornerSegmentCount";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93468 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "width";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93470 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depth";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF93478 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_float((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "cornerRadius";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF93480 = v28;
      float v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1400000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF93488 = v32;
      long long v33 = re::introspectionAllocator((re *)v32);
      long long v35 = re::introspect_BOOL((re *)1, v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x1500000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF93490 = v36;
      uint64_t v37 = (re *)re::introspectionAllocator((re *)v36);
      re::introspect_GeomBuildPlaneOrientation(v37, v38);
      uint64_t v39 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "orientation";
      *(void *)(v39 + 16) = &qword_26AF93410;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x1800000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF93498 = v39;
      __cxa_guard_release(&qword_26AF93188);
    }
  }
  *((void *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93458;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildPlaneOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildPlaneOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildPlaneOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildPlaneOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v40 = v42;
}

double re::internal::defaultConstruct<re::GeomBuildPlaneOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 65537;
  *(_WORD *)(a3 + 4) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 20) = 257;
  *(_DWORD *)(a3 + 24) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildPlaneOptions>(uint64_t a1)
{
  *(_DWORD *)a1 = 65537;
  *(_WORD *)(a1 + 4) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 257;
  *(_DWORD *)(a1 + 24) = 2;
  return result;
}

uint64_t re::introspect_GeomBuildPlaneOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildPlaneOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildPlaneOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildPlaneOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildPlaneOptions>, this);
}

void *re::allocInfo_GeomBuildPyramidOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93190))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93900, "GeomBuildPyramidOptions");
    __cxa_guard_release(&qword_26AF93190);
  }
  return &unk_26AF93900;
}

void re::initInfo_GeomBuildPyramidOptions(re *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x4674A7F369EB880;
  v30[1] = "GeomBuildPyramidOptions";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93198, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93198);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "segmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF932C0 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "width";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF932C8 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF932D0 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "depth";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF932D8 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF932E0 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1100000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF932E8 = v28;
      __cxa_guard_release(&qword_26AF93198);
    }
  }
  *((void *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF932C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildPyramidOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildPyramidOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildPyramidOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildPyramidOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

double re::internal::defaultConstruct<re::GeomBuildPyramidOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a3 + 4) = result;
  *(_DWORD *)(a3 + 12) = 1065353216;
  *(_WORD *)(a3 + 16) = 257;
  *(unsigned char *)(a3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildPyramidOptions>(uint64_t a1)
{
  *(_WORD *)a1 = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 12) = 1065353216;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildPyramidOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildPyramidOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildPyramidOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildPyramidOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildPyramidOptions>, this);
}

void *re::allocInfo_GeomBuildSphereOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931A0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93978, "GeomBuildSphereOptions");
    __cxa_guard_release(&qword_26AF931A0);
  }
  return &unk_26AF93978;
}

void re::initInfo_GeomBuildSphereOptions(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x7D389F564D24FD7ELL;
  v22[1] = "GeomBuildSphereOptions";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931A8, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF931A8);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "segmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93228 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radius";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93230 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93238 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x900000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93240 = v20;
      __cxa_guard_release(&qword_26AF931A8);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93228;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildSphereOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildSphereOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildSphereOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildSphereOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void re::internal::defaultConstruct<re::GeomBuildSphereOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 8;
  *(_DWORD *)(a3 + 4) = 1056964608;
  *(_WORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 257;
  *(unsigned char *)(a3 + 10) = 0;
}

uint64_t re::internal::defaultConstructV2<re::GeomBuildSphereOptions>(uint64_t result)
{
  *(_WORD *)double result = 8;
  *(_DWORD *)(result + 4) = 1056964608;
  *(_WORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 257;
  *(unsigned char *)(result + 10) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildSphereOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildSphereOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildSphereOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildSphereOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildSphereOptions>, this);
}

void *re::allocInfo_GeomBuildTetrahedronOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF939F0, "GeomBuildTetrahedronOptions");
    __cxa_guard_release(&qword_26AF931B0);
  }
  return &unk_26AF939F0;
}

void re::initInfo_GeomBuildTetrahedronOptions(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xE0F66382351EDB28;
  v22[1] = "GeomBuildTetrahedronOptions";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931B8, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF931B8);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "segmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93248 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "length";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93250 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF93258 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x900000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF93260 = v20;
      __cxa_guard_release(&qword_26AF931B8);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93248;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildTetrahedronOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildTetrahedronOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildTetrahedronOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildTetrahedronOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

void re::internal::defaultConstruct<re::GeomBuildTetrahedronOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 1;
  *(_DWORD *)(a3 + 4) = 1065353216;
  *(_WORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 257;
  *(unsigned char *)(a3 + 10) = 0;
}

uint64_t re::internal::defaultConstructV2<re::GeomBuildTetrahedronOptions>(uint64_t result)
{
  *(_WORD *)double result = 1;
  *(_DWORD *)(result + 4) = 1065353216;
  *(_WORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 257;
  *(unsigned char *)(result + 10) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildTetrahedronOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildTetrahedronOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildTetrahedronOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildTetrahedronOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildTetrahedronOptions>, this);
}

void *re::allocInfo_GeomBuildTubeOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93A68, "GeomBuildTubeOptions");
    __cxa_guard_release(&qword_26AF931C0);
  }
  return &unk_26AF93A68;
}

void re::initInfo_GeomBuildTubeOptions(re *this, re::IntrospectionBase *a2)
{
  v34[0] = 0xCAD475995321F50;
  v34[1] = "GeomBuildTubeOptions";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931C8, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF931C8);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::introspect_uint16_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "radialSegmentCount";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF93390 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_uint16_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "heightSegmentCount";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF93398 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "height";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF933A0 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "innerRadius";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF933A8 = v20;
      long long v21 = re::introspectionAllocator((re *)v20);
      long long v23 = re::introspect_float((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "outerRadius";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0xC00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF933B0 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      BOOL v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addUVs";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x1000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF933B8 = v28;
      long long v29 = re::introspectionAllocator((re *)v28);
      long long v31 = re::introspect_BOOL((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "addNormals";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x1100000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF933C0 = v32;
      __cxa_guard_release(&qword_26AF931C8);
    }
  }
  *((void *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 7;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93390;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildTubeOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildTubeOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildTubeOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildTubeOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v35;
}

double re::internal::defaultConstruct<re::GeomBuildTubeOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 65544;
  double result = 0.00000190734908;
  *(void *)(a3 + 4) = 0x3EC000003F800000;
  *(_DWORD *)(a3 + 12) = 1056964608;
  *(_WORD *)(a3 + 16) = 257;
  *(unsigned char *)(a3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::GeomBuildTubeOptions>(uint64_t a1)
{
  *(_DWORD *)a1 = 65544;
  double result = 0.00000190734908;
  *(void *)(a1 + 4) = 0x3EC000003F800000;
  *(_DWORD *)(a1 + 12) = 1056964608;
  *(_WORD *)(a1 + 16) = 257;
  *(unsigned char *)(a1 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  return result;
}

uint64_t re::introspect_GeomBuildTubeOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildTubeOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildTubeOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildTubeOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildTubeOptions>, this);
}

void re::introspect_GeomBuildExtrudedTextHorizontalAlignment(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF931D0);
    if (v24)
    {
      float32x4_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Left";
      qword_26AF93268 = (uint64_t)v26;
      BOOL v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Right";
      qword_26AF93270 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      BOOL v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)BOOL v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Center";
      qword_26AF93278 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "Justified";
      qword_26AF93280 = (uint64_t)v32;
      long long v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 4;
      *(void *)(v34 + 16) = "Natural";
      qword_26AF93288 = v34;
      __cxa_guard_release(&qword_26AF931D0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931D8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF934A0, "GeomBuildExtrudedTextHorizontalAlignment", 1, 1, 1, 1);
    qword_26AF934A0 = (uint64_t)&unk_26E715E00;
    qword_26AF934E0 = (uint64_t)&re::introspect_GeomBuildExtrudedTextHorizontalAlignment(BOOL)::enumTable;
    dword_26AF934B0 = 9;
    __cxa_guard_release(&qword_26AF931D8);
  }
  if ((byte_26AF93119 & 1) == 0)
  {
    byte_26AF93119 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF934A0, a2);
    uint64_t v36 = 0xF15D7D52F69102;
    uint64_t v37 = "GeomBuildExtrudedTextHorizontalAlignment";
    v40[0] = 0x31CD534126;
    v40[1] = "uint8_t";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v40);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v40);
      float32x4_t v4 = (unsigned int *)qword_26AF934E0;
      v39[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v38.var0 = 2 * v10;
            v38.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v14, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v38.var0 = 2 * v18;
              v38.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v22, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v23);
      xmmword_26AF934C0 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextHorizontalAlignment", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_GeomBuildExtrudedTextVerticalAlignment(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF931E0);
    if (v24)
    {
      float32x4_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Top";
      qword_26AF93210 = (uint64_t)v26;
      BOOL v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Bottom";
      qword_26AF93218 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v30 + 16) = "Center";
      qword_26AF93220 = v30;
      __cxa_guard_release(&qword_26AF931E0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931E8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF934E8, "GeomBuildExtrudedTextVerticalAlignment", 1, 1, 1, 1);
    qword_26AF934E8 = (uint64_t)&unk_26E715E00;
    qword_26AF93528 = (uint64_t)&re::introspect_GeomBuildExtrudedTextVerticalAlignment(BOOL)::enumTable;
    dword_26AF934F8 = 9;
    __cxa_guard_release(&qword_26AF931E8);
  }
  if ((byte_26AF9311A & 1) == 0)
  {
    byte_26AF9311A = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF934E8, a2);
    uint64_t v32 = 0xC42D07F67E9873DELL;
    long long v33 = "GeomBuildExtrudedTextVerticalAlignment";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      float32x4_t v4 = (unsigned int *)qword_26AF93528;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF93508 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextVerticalAlignment", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_GeomBuildExtrudedTextLineBreakMode(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931F0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF931F0);
    if (v24)
    {
      float32x4_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "WordWrapping";
      qword_26AF932F0 = (uint64_t)v26;
      BOOL v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "CharWrapping";
      qword_26AF932F8 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Clipping";
      qword_26AF93300 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "TruncatingHead";
      qword_26AF93308 = (uint64_t)v32;
      long long v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "TruncatingTail";
      qword_26AF93310 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 5;
      *(void *)(v36 + 16) = "TruncatingMiddle";
      qword_26AF93318 = v36;
      __cxa_guard_release(&qword_26AF931F0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF931F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF931F8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF93530, "GeomBuildExtrudedTextLineBreakMode", 1, 1, 1, 1);
    qword_26AF93530 = (uint64_t)&unk_26E715E00;
    qword_26AF93570 = (uint64_t)&re::introspect_GeomBuildExtrudedTextLineBreakMode(BOOL)::enumTable;
    dword_26AF93540 = 9;
    __cxa_guard_release(&qword_26AF931F8);
  }
  if ((byte_26AF9311B & 1) == 0)
  {
    byte_26AF9311B = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF93530, a2);
    uint64_t v38 = 0x54FFABE001BC5B20;
    uint64_t v39 = "GeomBuildExtrudedTextLineBreakMode";
    v42[0] = 0x31CD534126;
    v42[1] = "uint8_t";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      float32x4_t v4 = (unsigned int *)qword_26AF93570;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float32x4_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint32x4_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF93550 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "GeomBuildExtrudedTextLineBreakMode", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_GeomBuildExtrudedTextOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93200))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93AE0, "GeomBuildExtrudedTextOptions");
    __cxa_guard_release(&qword_26AF93200);
  }
  return &unk_26AF93AE0;
}

void re::initInfo_GeomBuildExtrudedTextOptions(re *this, re::IntrospectionBase *a2)
{
  v53[0] = 0x69AC04806F0E6800;
  v53[1] = "GeomBuildExtrudedTextOptions";
  re::StringID::destroyString((re::StringID *)v53);
  *((_OWORD *)this + 2) = v54;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93208, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93208);
    if (v4)
    {
      float32x4_t v5 = re::introspectionAllocator(v4);
      uint32x4_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "textString";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF935C8 = v8;
      float32x4_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fontName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF935D0 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "fontSize";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF935D8 = v16;
      uint32x4_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "extrusionDepth";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4400000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF935E0 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_uint8_t((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "segmentCountPerCurve";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x4800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF935E8 = v24;
      float32x4_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v26 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "textFrameOrigin";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x5000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF935F0 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v29 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "textFrameSize";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x5800000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF935F8 = v30;
      uint64_t v31 = (re *)re::introspectionAllocator((re *)v30);
      re::introspect_GeomBuildExtrudedTextLineBreakMode(v31, v32);
      uint64_t v33 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "lineBreakMode";
      *(void *)(v33 + 16) = &qword_26AF93530;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x6000000008;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF93600 = v33;
      StringID v34 = (re *)re::introspectionAllocator((re *)v33);
      re::introspect_GeomBuildExtrudedTextHorizontalAlignment(v34, v35);
      uint64_t v36 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "horizontalAlignment";
      *(void *)(v36 + 16) = &qword_26AF934A0;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x6100000009;
      *(_DWORD *)(v36 + 40) = 0;
      *(void *)(v36 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF93608 = v36;
      uint64_t v37 = (re *)re::introspectionAllocator((re *)v36);
      re::introspect_GeomBuildExtrudedTextVerticalAlignment(v37, v38);
      uint64_t v39 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "verticalAlignment";
      *(void *)(v39 + 16) = &qword_26AF934E8;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x620000000ALL;
      *(_DWORD *)(v39 + 40) = 0;
      *(void *)(v39 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF93610 = v39;
      StringID v40 = re::introspectionAllocator((re *)v39);
      long long v42 = re::introspect_BOOL((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "generateSides";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x630000000BLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF93618 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      float32x4_t v46 = re::introspect_BOOL((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "generateBack";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x640000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF93620 = v47;
      uint64_t v48 = re::introspectionAllocator((re *)v47);
      float32x4_t v50 = re::introspect_BOOL((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "instanceGlyphs";
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x670000000DLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF93628 = v51;
      __cxa_guard_release(&qword_26AF93208);
    }
  }
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF935C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::GeomBuildExtrudedTextOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::GeomBuildExtrudedTextOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::GeomBuildExtrudedTextOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::GeomBuildExtrudedTextOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v52 = v54;
}

double re::internal::defaultConstruct<re::GeomBuildExtrudedTextOptions>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  float32x4_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  re::DynamicString::setCapacity(v3, 0);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v3 + 4) = result;
  *((unsigned char *)v3 + 40) = 5;
  *((void *)v3 + 6) = 0;
  *((void *)v3 + 7) = 0;
  *((unsigned char *)v3 + 64) = 0;
  *(_WORD *)((char *)v3 + 65) = 4;
  *(_DWORD *)((char *)v3 + 67) = 16843009;
  *((unsigned char *)v3 + 71) = 0;
  return result;
}

double re::internal::defaultDestruct<re::GeomBuildExtrudedTextOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

double re::internal::defaultConstructV2<re::GeomBuildExtrudedTextOptions>(_anonymous_namespace_ *a1)
{
  uint64_t v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  unint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  uint64_t v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  re::DynamicString::setCapacity(v1, 0);
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v1 + 4) = result;
  *((unsigned char *)v1 + 40) = 5;
  *((void *)v1 + 6) = 0;
  *((void *)v1 + 7) = 0;
  *((unsigned char *)v1 + 64) = 0;
  *(_WORD *)((char *)v1 + 65) = 4;
  *(_DWORD *)((char *)v1 + 67) = 16843009;
  *((unsigned char *)v1 + 71) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::GeomBuildExtrudedTextOptions>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::introspect_GeomBuildExtrudedTextOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GeomBuildExtrudedTextOptions", (uint64_t (*)(re::internal *))re::allocInfo_GeomBuildExtrudedTextOptions, (re::IntrospectionBase *(*)(void))re::initInfo_GeomBuildExtrudedTextOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GeomBuildExtrudedTextOptions>, this);
}

uint64_t re::computeManhattanDistanceToVertex(uint64_t a1, unsigned int a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v11 = (uint64_t)v57;
  uint64_t v75 = *MEMORY[0x263EF8340];
  int v52 = 2139095040;
  *(void *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  re::DynamicArray<float>::resize((void *)a5, *(unsigned int *)(a1 + 16), &v52);
  unint64_t v12 = a2;
  unint64_t v13 = *(void *)(a5 + 16);
  if (v13 <= a2) {
    goto LABEL_122;
  }
  uint64_t v50 = a5;
  *(_DWORD *)(*(void *)(a5 + 32) + 4 * a2) = 0;
  unint64_t v13 = *(unsigned int *)(a1 + 16);
  memset(v57, 0, sizeof(v57));
  uint64_t v62 = 0;
  *(_OWORD *)&int v59[2] = 0u;
  long long v60 = 0u;
  int v61 = 0;
  if (v13) {
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v13);
  }
  uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<unsigned int>::resize(&v59[10], v13, re::kInvalidMeshIndex);
  if (*(_DWORD *)(a1 + 16))
  {
    unint64_t v15 = 0;
    uint64_t v11 = 2139095040;
    unint64_t i = 8;
    while (1)
    {
      unint64_t v16 = *(void *)&v57[16] + 1;
      if (*(void *)&v57[16] >= *(void *)&v57[8] && *(void *)&v57[8] < v16)
      {
        if (*(void *)v57)
        {
          if (*(void *)&v57[8]) {
            unint64_t v24 = 2 * *(void *)&v57[8];
          }
          else {
            unint64_t v24 = 8;
          }
          if (v24 <= v16) {
            unint64_t v25 = *(void *)&v57[16] + 1;
          }
          else {
            unint64_t v25 = v24;
          }
          uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v25);
        }
        else
        {
          uint64_t v14 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, v16);
          ++*(_DWORD *)&v57[24];
        }
      }
      uint64_t v18 = *(void *)&v57[16];
      char v19 = (_DWORD *)(*(void *)&v59[2] + 8 * *(void *)&v57[16]);
      if (v15 == v12) {
        int v20 = 0;
      }
      else {
        int v20 = 2139095040;
      }
      *char v19 = v15;
      v19[1] = v20;
      *(void *)&v57[16] = v18 + 1;
      ++*(_DWORD *)&v57[24];
      unint64_t v13 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) <= v15) {
        goto LABEL_113;
      }
      unsigned int v21 = v18;
      *(_DWORD *)(v62 + 4 * v15) = v18;
      if (v18) {
        break;
      }
LABEL_20:
      if (++v15 >= *(unsigned int *)(a1 + 16)) {
        goto LABEL_31;
      }
    }
    while (1)
    {
      unsigned int v22 = v21 - 1;
      unint64_t v13 = (v21 - 1) >> 1;
      uint64_t v23 = *(long long **)&v57[16];
      if (*(void *)&v57[16] <= v13) {
        goto LABEL_101;
      }
      unint64_t v6 = v21;
      if (*(void *)&v57[16] <= (unint64_t)v21) {
        break;
      }
      if (*(float *)(*(void *)&v59[2] + 8 * v13 + 4) > *(float *)(*(void *)&v59[2] + 8 * v21 + 4))
      {
        unsigned int v21 = v22 >> 1;
        if (v22 > 1) {
          continue;
        }
      }
      goto LABEL_20;
    }
LABEL_102:
    unint64_t v27 = (unint64_t)v57;
    *(void *)float32x4_t v63 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v54 = 136315906;
    *(void *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 789;
    *(_WORD *)&v54[18] = 2048;
    *(void *)&v54[20] = v6;
    __int16 v55 = 2048;
    *(void *)uint64_t v56 = v23;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v36);
    _os_crash();
    __break(1u);
LABEL_104:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 797;
    __int16 v66 = 2048;
    unint64_t v67 = v27;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 601;
    __int16 v66 = 2048;
    unint64_t v67 = i;
    __int16 v68 = 2048;
    unint64_t v69 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    uint64_t v53 = 0;
    unint64_t v31 = (unint64_t)v57;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = i;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v31;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    uint64_t v53 = 0;
    unint64_t v32 = (unint64_t)v57;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v13;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v32;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v13;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = i;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = i;
    __int16 v68 = 2048;
    unint64_t v69 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    unint64_t v27 = (unint64_t)v57;
    *(void *)float32x4_t v63 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v54 = 136315906;
    *(void *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 789;
    *(_WORD *)&v54[18] = 2048;
    *(void *)&v54[20] = v15;
    __int16 v55 = 2048;
    *(void *)uint64_t v56 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v35);
    _os_crash();
    __break(1u);
LABEL_115:
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v33, v35);
    _os_crash();
    __break(1u);
LABEL_116:
    unint64_t v15 = v29;
    unint64_t v13 = (unint64_t)v57;
LABEL_117:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v15;
    __int16 v68 = 2048;
    unint64_t v69 = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_118:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = i;
    __int16 v68 = 2048;
    unint64_t v69 = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_119:
    uint64_t v53 = 0;
    unint64_t v30 = (unint64_t)v57;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = 0;
    __int16 v68 = 2048;
    unint64_t v69 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_120:
    uint64_t v53 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v63 = 136315906;
    *(void *)&v63[4] = "operator[]";
    __int16 v64 = 1024;
    int v65 = 789;
    __int16 v66 = 2048;
    unint64_t v67 = v30;
    __int16 v68 = 2048;
    unint64_t v69 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_121;
  }
LABEL_31:
  uint64_t v49 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
  unsigned int v51 = v26;
  *(void *)&v56[2] = 0;
  memset(v54, 0, sizeof(v54));
  unint64_t v27 = *(void *)&v57[16];
  if (!*(_DWORD *)&v57[16]) {
    goto LABEL_92;
  }
  uint64_t v23 = &v70;
  do
  {
    unint64_t v15 = **(_DWORD **)&v59[2];
    float v28 = *(float *)(*(void *)&v59[2] + 4);
    if (v27 == 1)
    {
      unint64_t v29 = **(_DWORD **)&v59[2];
      *(void *)&v57[16] = 0;
      ++*(_DWORD *)&v57[24];
      unint64_t v27 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) <= v29) {
        goto LABEL_116;
      }
      goto LABEL_58;
    }
    unint64_t i = v27 - 1;
    if (v27 <= i) {
      goto LABEL_118;
    }
    **(void **)&int v59[2] = *(void *)(*(void *)&v59[2] + 8 * i);
    unint64_t v6 = *(void *)&v57[16];
    if (!*(void *)&v57[16]) {
      goto LABEL_119;
    }
    unint64_t v13 = *((void *)&v60 + 1);
    unint64_t v30 = **(_DWORD **)&v59[2];
    if (*((void *)&v60 + 1) <= v30) {
      goto LABEL_120;
    }
    *(_DWORD *)(v62 + 4 * v30) = 0;
    if (v6 < i)
    {
      if (*(void *)&v57[8] < i) {
        re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v57, i);
      }
LABEL_43:
      *(void *)&v57[16] = i;
      ++*(_DWORD *)&v57[24];
      unint64_t v6 = i;
      goto LABEL_44;
    }
    if (v6 > i) {
      goto LABEL_43;
    }
LABEL_44:
    uint64_t v26 = 0;
    for (i = 0; ; uint64_t v26 = i)
    {
      unint64_t v31 = (2 * v26) | 1u;
      if (v31 < v6)
      {
        if (v6 <= v31) {
          goto LABEL_107;
        }
        unint64_t v13 = v26;
        if (v6 <= v26) {
          goto LABEL_108;
        }
        unint64_t i = v26;
        if (*(float *)(*(void *)&v59[2] + 8 * v31 + 4) < *(float *)(*(void *)&v59[2] + 8 * v26 + 4)) {
          unint64_t i = (2 * v26) | 1u;
        }
      }
      unint64_t v32 = (2 * v26 + 2);
      if (v32 < v6)
      {
        if (v6 <= v32) {
          goto LABEL_109;
        }
        unint64_t v13 = i;
        if (v6 <= i) {
          goto LABEL_110;
        }
        if (*(float *)(*(void *)&v59[2] + 8 * v32 + 4) < *(float *)(*(void *)&v59[2] + 8 * i + 4)) {
          unint64_t i = (2 * v26 + 2);
        }
      }
      if (i == v26) {
        break;
      }
      unint64_t v6 = *(void *)&v57[16];
    }
    unint64_t v27 = *((void *)&v60 + 1);
    unint64_t v29 = v15;
    unint64_t v13 = (unint64_t)v57;
    if (*((void *)&v60 + 1) <= v15) {
      goto LABEL_117;
    }
LABEL_58:
    *(_DWORD *)(v62 + 4 * v29) = -1;
    *(void *)&v54[16] = 0;
    ++*(_DWORD *)&v54[24];
    if (v15)
    {
      unint64_t v33 = (v15 - 1);
      StringID v34 = a4;
      unint64_t v35 = a4[1];
      if (v35 <= v33) {
        goto LABEL_115;
      }
      unint64_t i = *(unsigned int *)(*a4 + 4 * v33);
    }
    else
    {
      unint64_t i = 0;
      StringID v34 = a4;
      unint64_t v35 = a4[1];
    }
    if (v35 <= v15) {
      goto LABEL_114;
    }
    unint64_t v13 = *(unsigned int *)(*v34 + 4 * v15);
    if (i < v13)
    {
      do
      {
        unint64_t v36 = a3[1];
        if (v36 <= i) {
          goto LABEL_103;
        }
        unint64_t v27 = *(unsigned int *)(*a3 + 4 * i);
        unint64_t v6 = *(void *)(a1 + 40);
        if (v6 <= v27) {
          goto LABEL_104;
        }
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a1 + 56) + 16 * v27;
        do
        {
          *(_DWORD *)((char *)&v70 + v37) = *(_DWORD *)(v38 + v37);
          v37 += 4;
        }
        while (v37 != 16);
        uint64_t v39 = 0;
        uint64_t v40 = 3;
        if (HIDWORD(v70) != -1) {
          uint64_t v40 = 4;
        }
        while (*((_DWORD *)&v70 + v39) != v15)
        {
          if (v40 == ++v39) {
            goto LABEL_74;
          }
        }
        unint64_t v27 = v40;
        re::DynamicArray<int>::add(v54, (_DWORD *)&v70 + (v39 + 1) % v40);
        re::DynamicArray<int>::add(v54, (_DWORD *)&v70 + (unsigned __int16)(v27 + v39 - 1) % v27);
LABEL_74:
        ++i;
      }
      while (i != v13);
      if (*(void *)&v54[16])
      {
        if (v15 < v51)
        {
          unint64_t v13 = *(void *)&v56[2];
          uint64_t v41 = *(void *)&v56[2] + 4 * *(void *)&v54[16];
          while (1)
          {
            unint64_t i = *(unsigned int *)v13;
            if (i >= v51) {
              goto LABEL_105;
            }
            unint64_t v6 = *(void *)(v50 + 16);
            if (v6 <= i) {
              goto LABEL_106;
            }
            float32x4_t v42 = vsubq_f32(*(float32x4_t *)(v49 + 16 * v15), *(float32x4_t *)(v49 + 16 * i));
            float32x4_t v43 = vmulq_f32(v42, v42);
            float v44 = v28
                + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]);
            uint64_t v45 = *(void *)(v50 + 32);
            if (v44 < *(float *)(v45 + 4 * i))
            {
              *(float *)(v45 + 4 * i) = v44;
              unint64_t v6 = *((void *)&v60 + 1);
              if (*((void *)&v60 + 1) <= i) {
                goto LABEL_111;
              }
              unint64_t i = *(unsigned int *)(v62 + 4 * i);
              unint64_t v6 = *(void *)&v57[16];
              if (*(void *)&v57[16] <= i) {
                goto LABEL_112;
              }
              *(float *)(*(void *)&v59[2] + 8 * i + 4) = v44;
              if (i) {
                break;
              }
            }
LABEL_87:
            v13 += 4;
            if (v13 == v41) {
              goto LABEL_88;
            }
          }
          while (1)
          {
            uint64_t v11 = (i - 1);
            unint64_t v6 = v11 >> 1;
            unint64_t v46 = *(void *)&v57[16];
            if (*(void *)&v57[16] <= v6) {
              break;
            }
            if (*(float *)(*(void *)&v59[2] + 8 * v6 + 4) > v44)
            {
              unint64_t i = v11 >> 1;
              if (v11 > 1) {
                continue;
              }
            }
            goto LABEL_87;
          }
          uint64_t v53 = 0;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v63 = 136315906;
          *(void *)&v63[4] = "operator[]";
          __int16 v64 = 1024;
          int v65 = 789;
          __int16 v66 = 2048;
          unint64_t v67 = v11 >> 1;
          __int16 v68 = 2048;
          unint64_t v69 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          *(void *)float32x4_t v63 = 0;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v54 = 136315906;
          *(void *)&v54[4] = "operator[]";
          *(_WORD *)&v54[12] = 1024;
          *(_DWORD *)&v54[14] = 789;
          *(_WORD *)&v54[18] = 2048;
          *(void *)&v54[20] = v13;
          __int16 v55 = 2048;
          *(void *)uint64_t v56 = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_102;
        }
LABEL_121:
        uint64_t v53 = 0;
        unint64_t v12 = (unint64_t)v57;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v63 = 136315906;
        *(void *)&v63[4] = "operator[]";
        __int16 v64 = 1024;
        int v65 = 601;
        __int16 v66 = 2048;
        unint64_t v67 = v15;
        __int16 v68 = 2048;
        unint64_t v69 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        *(void *)long long v54 = 0;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v57 = 136315906;
        *(void *)&v57[4] = "operator[]";
        *(_WORD *)&v57[12] = 1024;
        *(_DWORD *)&v57[14] = 789;
        *(_WORD *)&v57[18] = 2048;
        *(void *)&v57[20] = v12;
        __int16 v58 = 2048;
        *(void *)float32x4_t v59 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_88:
    unint64_t v27 = *(void *)&v57[16];
  }
  while (*(_DWORD *)&v57[16]);
  if (*(void *)v54 && *(void *)&v56[2]) {
    (*(void (**)(void))(**(void **)v54 + 40))();
  }
LABEL_92:
  if (*(void *)&v59[10])
  {
    if (v62) {
      (*(void (**)(void))(**(void **)&v59[10] + 40))();
    }
    uint64_t v62 = 0;
    long long v60 = 0uLL;
    *(void *)&v59[10] = 0;
    ++v61;
  }
  uint64_t result = *(void *)v57;
  if (*(void *)v57)
  {
    if (*(void *)&v59[2]) {
      return (*(uint64_t (**)(void))(**(void **)v57 + 40))();
    }
  }
  return result;
}

void *re::anonymous namespace'::PriorityQueue::swap(void *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = this[2];
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= a3)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = this[4];
  uint64_t v5 = *(void *)(v4 + 8 * a2);
  *(void *)(v4 + 8 * a2) = *(void *)(v4 + 8 * a3);
  *(void *)(v4 + 8 * a3) = v5;
  unint64_t v6 = this[2];
  if (v6 <= a2)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v7 = this[4];
  unint64_t v8 = *(unsigned int *)(v7 + 8 * a2);
  unint64_t v9 = this[7];
  if (v9 <= v8)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v10 = this[9];
  *(_DWORD *)(v10 + 4 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
  if (v6 <= a3)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v11 = *(unsigned int *)(v7 + 8 * a3);
  if (v9 <= v11) {
    goto LABEL_13;
  }
  *(_DWORD *)(v10 + 4 * v11) = a3;
  return this;
}

unint64_t re::mergeVertices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v158 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 16)) {
    return 0;
  }
  uint64_t v9 = a1;
  unint64_t v10 = (unint64_t)v141;
  if (*(unsigned char *)a3)
  {
    float v11 = *(float *)(a3 + 8);
    uint64_t v142 = 0;
    memset(v141, 0, 44);
    uint64_t v12 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
    if (v13)
    {
      re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v141, *(unsigned int *)(v9 + 16), v12);
      unint64_t v3 = *(unsigned int *)(v9 + 16);
      re::DynamicArray<float>::resize(a2, v3);
      if (v3)
      {
        uint64_t v14 = 0;
        unint64_t v15 = *(unsigned int **)(a2 + 16);
        uint64_t v16 = *(void *)(a2 + 32);
        while (v15 != v14)
        {
          *(_DWORD *)(v16 + 4 * (void)v14) = v14;
          uint64_t v14 = (unsigned int *)((char *)v14 + 1);
          if ((unsigned int *)v3 == v14) {
            goto LABEL_8;
          }
        }
        goto LABEL_171;
      }
LABEL_8:
      uint64_t v17 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
      *(void *)&_OWORD v145[2] = 0;
      memset(v143, 0, sizeof(v143));
      if (v3)
      {
        unint64_t v4 = v17;
        unint64_t v15 = 0;
        unint64_t v10 = 0;
        double v19 = v11;
        uint64_t v9 = v18;
        do
        {
          unint64_t v5 = *(void *)(a2 + 16);
          if (v5 <= (unint64_t)v15) {
            goto LABEL_172;
          }
          if (v15 == (unsigned int *)*(unsigned int *)(*(void *)(a2 + 32) + 4 * (void)v15))
          {
            if ((unint64_t)v15 >= v9) {
              goto LABEL_173;
            }
            *(void *)&v143[16] = 0;
            ++*(_DWORD *)&v143[24];
            if (*(void *)&v141[32])
            {
              re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper((uint64_t)v141, v142, (float32x4_t *)(v4 + 16 * (void)v15), v143, v19);
              unint64_t v5 = *(void *)&v143[16];
              if (*(void *)&v143[16])
              {
                unint64_t v20 = 0;
                unsigned int v21 = 1;
                do
                {
                  unsigned int v22 = (unsigned int *)*(unsigned int *)(*(void *)&v145[2] + 4 * v20);
                  if (v15 != v22)
                  {
                    unint64_t v5 = *(void *)&v143[16];
                    if (v23)
                    {
                      if (*(void *)&v143[16] <= v20) {
                        goto LABEL_165;
                      }
                      unint64_t v20 = *(unsigned int *)(*(void *)&v145[2] + 4 * v20);
                      unint64_t v6 = *(void *)(a2 + 16);
                      if (v6 <= v20) {
                        goto LABEL_166;
                      }
                      *(_DWORD *)(*(void *)(a2 + 32) + 4 * v20) = v15;
                      unint64_t v10 = (v10 + 1);
                    }
                  }
                  unint64_t v20 = v21;
                  BOOL v24 = v5 > v21++;
                }
                while (v24);
              }
            }
          }
          unint64_t v15 = (unsigned int *)((char *)v15 + 1);
        }
        while (v15 != (unsigned int *)v3);
        if (*(void *)v143 && *(void *)&v145[2]) {
          (*(void (**)(void))(**(void **)v143 + 40))();
        }
      }
      else
      {
        unint64_t v10 = 0;
      }
      uint64_t v65 = *(void *)&v141[16];
      if (!*(void *)&v141[16] || !v142) {
        goto LABEL_127;
      }
      goto LABEL_71;
    }
LABEL_181:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v143 = 136315906;
    *(void *)(v10 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "operator[]";
    *(_WORD *)&v143[12] = 1024;
    *(_DWORD *)(v10 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 601;
    *(_WORD *)&v143[18] = 2048;
    *(void *)(v10 + 84) = 0;
    __int16 v144 = 2048;
    *(void *)(v10 + 94) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float v25 = *(float *)(a3 + 8);
  re::computeAABB((re *)v9, &v134);
  unint64_t v26 = *(unsigned int *)(v9 + 16);
  unint64_t v27 = (_anonymous_namespace_ *)re::DynamicArray<unsigned int>::resize((void *)a2, v26, &re::kInvalidMeshIndex);
  float32x4_t v28 = vsubq_f32(v135, v134);
  float32x4_t v29 = vmulq_f32(v28, v28);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0] <= 0.0)
  {
    if (!v98)
    {
      uint64_t v83 = *(void *)(a2 + 16);
      if (v83 >= 1) {
        bzero(*(void **)(a2 + 32), 4 * (v83 - ((v83 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
      }
      if (v26) {
        unint64_t v10 = (v26 - 1);
      }
      else {
        unint64_t v10 = 0;
      }
      goto LABEL_127;
    }
    if (!v26)
    {
      unint64_t v10 = 0;
      goto LABEL_127;
    }
    __int16 v66 = 0;
    unint64_t v15 = *(unsigned int **)(a2 + 16);
    uint64_t v67 = *(void *)(a2 + 32);
    do
    {
      if (v15 == v66) {
        goto LABEL_176;
      }
      *(_DWORD *)(v67 + 4 * (void)v66) = v66;
      __int16 v66 = (unsigned int *)((char *)v66 + 1);
    }
    while ((unsigned int *)v26 != v66);
    unint64_t v3 = 0;
    unint64_t v10 = 0;
    unint64_t v15 = (unsigned int *)1;
    while (1)
    {
      unint64_t v4 = *(void *)(a2 + 16);
      if (v4 <= v3) {
        goto LABEL_177;
      }
      uint64_t v9 = v3 + 1;
      if (v3 + 1 < v26 && v3 == *(_DWORD *)(*(void *)(a2 + 32) + 4 * v3))
      {
        unint64_t v4 = (unint64_t)v15;
        do
        {
          {
            unint64_t v5 = *(void *)(a2 + 16);
            if (v5 <= v4) {
              goto LABEL_167;
            }
            *(_DWORD *)(*(void *)(a2 + 32) + 4 * v4) = v3;
            unint64_t v10 = (v10 + 1);
          }
          ++v4;
        }
        while (v26 != v4);
      }
      unint64_t v15 = (unsigned int *)((char *)v15 + 1);
      ++v3;
      if (v9 == v26) {
        goto LABEL_127;
      }
    }
  }
  *(void *)&_OWORD v145[2] = 0;
  memset(&v143[8], 0, 20);
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v143, v26);
  ++*(_DWORD *)&v143[24];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v136, 4518, *(unsigned int *)(v9 + 16));
  uint64_t v30 = 0;
  *(_OWORD *)uint64_t v141 = xmmword_2343AC250;
  *(_OWORD *)&v141[16] = xmmword_23435FD60;
  *(_OWORD *)&v141[32] = xmmword_2343AC260;
  do
  {
    *(float32x4_t *)((char *)&v153 + v30) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(_OWORD *)&v141[v30])), (float32x4_t)xmmword_2343AC270, *(float32x2_t *)&v141[v30], 1), (float32x4_t)xmmword_2343AC280, *(float32x4_t *)&v141[v30], 2);
    v30 += 16;
  }
  while (v30 != 48);
  uint64_t v31 = 0;
  float32x4_t v32 = v153;
  float32x4_t v33 = v154;
  float32x4_t v34 = v155;
  *(_OWORD *)uint64_t v141 = xmmword_2343AC290;
  *(_OWORD *)&v141[16] = xmmword_2343AC2A0;
  *(_OWORD *)&v141[32] = xmmword_23435FD80;
  do
  {
    *(float32x4_t *)((char *)&v153 + v31) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)&v141[v31])), v33, *(float32x2_t *)&v141[v31], 1), v34, *(float32x4_t *)&v141[v31], 2);
    v31 += 16;
  }
  while (v31 != 48);
  float32x4_t v88 = v153;
  float32x4_t v90 = v154;
  float32x4_t v92 = v155;
  float32x4_t v95 = v134;
  float32x4_t v86 = v135;
  unint64_t v4 = *(unsigned int *)(v9 + 16);
  re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)v143, v4);
  unint64_t v35 = (_anonymous_namespace_ *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
  unint64_t v3 = *(void *)&v143[16];
  if (v4)
  {
    uint64_t v37 = 0;
    float32x4_t v38 = vsubq_f32(v86, v95);
    float32x4_t v39 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v38.f32[0]), v90, *(float32x2_t *)v38.f32, 1), v92, v38, 2);
    int32x4_t v40 = (int32x4_t)vmulq_f32(v39, v39);
    v40.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
    float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
    float32x4_t v43 = vmulq_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
    unint64_t v15 = (unsigned int *)v36;
    float v44 = (int32x2_t *)(*(void *)&v145[2] + 8);
    while (1)
    {
      if (v3 == v37) {
        goto LABEL_174;
      }
      v44[-1] = vdup_n_s32(v37);
      if (v36 == v37) {
        break;
      }
      float32x4_t v45 = vmulq_f32(v43, vsubq_f32(*((float32x4_t *)v35 + v37), v95));
      v44->i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u32[0];
      float v44 = (int32x2_t *)((char *)v44 + 12);
      if (v4 == ++v37) {
        goto LABEL_37;
      }
    }
LABEL_175:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v15;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    *(void *)float v143 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)(v10 + 4) = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)(v10 + 14) = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)(v10 + 20) = v15;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)(v10 + 30) = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_177:
    *(void *)float v143 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v3;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v15;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v4;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    uint64_t v137 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    float32x4_t v85 = v53;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v85;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v85;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_181;
  }
LABEL_37:
  unint64_t v87 = v26;
  if (v3 < 0x100)
  {
    unint64_t v46 = 126 - 2 * __clz(v3);
    if (v3) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    goto LABEL_42;
  }
  uint64_t v94 = (unsigned int *)v9;
  uint64_t v138 = 0;
  uint64_t v137 = 0;
  int v139 = 0;
  *(void *)&v141[32] = 0;
  memset(v141, 0, 28);
  re::DynamicArray<re::MeshLodLevelInfo>::resize((uint64_t)v141, v3);
  int v68 = 0;
  uint64_t v9 = *(void *)&v141[32];
  unint64_t v5 = 12;
  unint64_t v4 = *(void *)&v141[16];
  uint64_t v97 = *(void *)v141;
  do
  {
    unint64_t v20 = (unint64_t)v139;
    unint64_t v6 = v138;
    unint64_t v69 = v138 - 1;
    if (v138 >= 1)
    {
      int v70 = v68;
      bzero(v139, 4 * (v138 - ((v138 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
      int v68 = v70;
    }
    unint64_t v71 = 0;
    unint64_t v10 = *(void *)&v143[16];
    uint64_t v72 = *(void *)&v145[2];
    char v73 = 8 * v68;
    unsigned int v74 = 1;
    do
    {
      if (v10 <= v71)
      {
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 789;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v71;
        __int16 v151 = 2048;
        unint64_t v152 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_159:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 468;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v71;
        __int16 v151 = 2048;
        unint64_t v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_160:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 468;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v6;
        __int16 v151 = 2048;
        unint64_t v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_161:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 789;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v69;
        __int16 v151 = 2048;
        unint64_t v152 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_162:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 468;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v71;
        __int16 v151 = 2048;
        unint64_t v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_163:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 789;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v69;
        __int16 v151 = 2048;
        unint64_t v152 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_164:
        uint64_t v140 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 468;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v71;
        __int16 v151 = 2048;
        unint64_t v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_165:
        v134.i64[0] = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 789;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v20;
        __int16 v151 = 2048;
        unint64_t v152 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_166:
        v134.i64[0] = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v146 = 136315906;
        *(void *)&double v146[4] = "operator[]";
        __int16 v147 = 1024;
        int v148 = 789;
        __int16 v149 = 2048;
        float32x4_t v150 = (unsigned int *)v20;
        __int16 v151 = 2048;
        unint64_t v152 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_167:
        *(void *)float v143 = 0;
        long long v156 = 0u;
        long long v157 = 0u;
        float32x4_t v154 = 0u;
        float32x4_t v155 = 0u;
        float32x4_t v153 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v141 = 136315906;
        *(void *)&v141[4] = "operator[]";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 789;
        *(_WORD *)&v141[18] = 2048;
        *(void *)&v141[20] = v4;
        *(_WORD *)&unsigned char v141[28] = 2048;
        *(void *)&v141[30] = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_168;
      }
      unint64_t v71 = (*(_DWORD *)(v72 + 12 * v71 + 8) >> v73) + 1;
      if (v6 <= v71) {
        goto LABEL_159;
      }
      ++*(_DWORD *)(v20 + 4 * v71);
      unint64_t v71 = v74;
      BOOL v24 = v3 > v74++;
    }
    while (v24);
    for (uint64_t i = 0; i != 255; ++i)
    {
      if (v69 == i) {
        goto LABEL_160;
      }
      *(_DWORD *)(v20 + 4 * i + 4) += *(_DWORD *)(v20 + 4 * i);
    }
    unint64_t v69 = 0;
    unsigned int v76 = 1;
    do
    {
      if (v10 <= v69) {
        goto LABEL_161;
      }
      float v77 = (uint64_t *)(v72 + 12 * v69);
      unint64_t v71 = (*((_DWORD *)v77 + 2) >> v73);
      if (v6 <= v71) {
        goto LABEL_162;
      }
      unint64_t v69 = *(unsigned int *)(v20 + 4 * v71);
      if (v4 <= v69) {
        goto LABEL_163;
      }
      uint32x4_t v78 = (unsigned int *)(v9 + 12 * v69);
      uint64_t v79 = *v77;
      v78[2] = *((_DWORD *)v77 + 2);
      *(void *)uint32x4_t v78 = v79;
      unint64_t v6 = v138;
      if (v138 <= v71) {
        goto LABEL_164;
      }
      unint64_t v20 = (unint64_t)v139;
      ++*((_DWORD *)v139 + v71);
      unint64_t v69 = v76;
      BOOL v24 = v3 > v76++;
    }
    while (v24);
    if (*(void *)v143)
    {
      uint64_t v80 = v97;
      if (v97)
      {
        int v81 = v68;
        re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)v143, (uint64_t)v141);
        int v68 = v81;
      }
      else
      {
        *(void *)&v143[16] = 0;
      }
      ++*(_DWORD *)&v143[24];
    }
    else
    {
      uint64_t v80 = v97;
      if (v97)
      {
        *(void *)float v143 = v97;
        int v82 = v68;
        re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v143, v4);
        ++*(_DWORD *)&v143[24];
        re::DynamicArray<re::MeshLodLevelInfo>::copy((void **)v143, (uint64_t)v141);
        int v68 = v82;
      }
    }
    ++v68;
  }
  while (v68 != 4);
  if (v80) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 40))(v80, v9);
  }
  if (v137 && v138) {
    (*(void (**)(void))(*(void *)v137 + 40))();
  }
  uint64_t v9 = (uint64_t)v94;
LABEL_42:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v136);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v146, 4520, *(unsigned int *)(v9 + 16));
  unint64_t v48 = *(unsigned int *)(v9 + 16);
  uint64_t v49 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v9);
  if (v48)
  {
    unint64_t v3 = v49;
    unint64_t v10 = (unint64_t)v50;
    unsigned int v51 = 0;
    float v52 = v25 * v25;
    uint64_t v53 = *(unsigned int **)&v143[16];
    uint64_t v89 = *(void *)&v145[2];
    uint64_t v96 = *(void *)&v145[2] + 20;
    uint64_t v93 = 1;
    while (1)
    {
      if (v51 == v53) {
        goto LABEL_180;
      }
      unint64_t v15 = (unsigned int *)(v89 + 12 * (void)v51);
      float32x4_t v91 = (unsigned int *)((char *)v51 + 1);
      if (*v15 == v15[1] && (unint64_t)v51 + 1 < v48) {
        break;
      }
LABEL_58:
      ++v93;
      v96 += 12;
      unsigned int v51 = v91;
      if (v91 == (unsigned int *)v48) {
        goto LABEL_59;
      }
    }
    unint64_t v5 = v89 + 12 * (void)v51 + 8;
    __int16 v55 = (float *)v96;
    uint64_t v56 = v93;
    while (v53 != (unsigned int *)v56)
    {
      if ((float)((float)(*v55 - *(float *)v5) * (float)(*v55 - *(float *)v5)) > v52) {
        goto LABEL_58;
      }
      unint64_t v4 = *v15;
      if (v4 >= v10) {
        goto LABEL_169;
      }
      uint64_t v9 = *((unsigned int *)v55 - 2);
      if (v9 >= v10) {
        goto LABEL_170;
      }
      float32x4_t v57 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v4), *(float32x4_t *)(v3 + 16 * v9));
      float32x4_t v58 = vmulq_f32(v57, v57);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0] <= v52)
      {
        uint64_t v9 = (uint64_t)v53;
        uint64_t v53 = (unsigned int *)v9;
        if (v59) {
          *((_DWORD *)v55 - 1) = v4;
        }
      }
      ++v56;
      v55 += 3;
      if (v48 == v56) {
        goto LABEL_58;
      }
    }
LABEL_168:
    uint64_t v137 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    unint64_t v15 = v53;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v15;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    uint64_t v137 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v4;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_170:
    uint64_t v137 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 601;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v9;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_171:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v143 = 136315906;
    *(void *)&v143[4] = "operator[]";
    *(_WORD *)&v143[12] = 1024;
    *(_DWORD *)&v143[14] = 789;
    *(_WORD *)&v143[18] = 2048;
    *(void *)&v143[20] = v15;
    __int16 v144 = 2048;
    *(void *)int v145 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    v134.i64[0] = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v146 = 136315906;
    *(void *)&double v146[4] = "operator[]";
    __int16 v147 = 1024;
    int v148 = 789;
    __int16 v149 = 2048;
    float32x4_t v150 = v15;
    __int16 v151 = 2048;
    unint64_t v152 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_173:
    v134.i64[0] = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v146 = 136315906;
    *(void *)&double v146[4] = "operator[]";
    __int16 v147 = 1024;
    int v148 = 601;
    __int16 v149 = 2048;
    float32x4_t v150 = v15;
    __int16 v151 = 2048;
    unint64_t v152 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    *(void *)float32x4_t v146 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    float32x4_t v154 = 0u;
    float32x4_t v155 = 0u;
    float32x4_t v153 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v141 = 136315906;
    *(void *)&v141[4] = "operator[]";
    *(_WORD *)&v141[12] = 1024;
    *(_DWORD *)&v141[14] = 789;
    *(_WORD *)&v141[18] = 2048;
    *(void *)&v141[20] = v3;
    *(_WORD *)&unsigned char v141[28] = 2048;
    *(void *)&v141[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_175;
  }
LABEL_59:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v146);
  if (v87)
  {
    long long v60 = 0;
    unint64_t v10 = 0;
    unint64_t v15 = *(unsigned int **)&v143[16];
    unint64_t v3 = *(void *)(a2 + 16);
    uint64_t v61 = *(void *)(a2 + 32);
    uint64_t v62 = (int *)(*(void *)&v145[2] + 4);
    while (v15 != v60)
    {
      unint64_t v4 = *(v62 - 1);
      if (v3 <= v4) {
        goto LABEL_179;
      }
      int v64 = *v62;
      v62 += 3;
      int v63 = v64;
      if (v4 == v64) {
        unint64_t v10 = v10;
      }
      else {
        unint64_t v10 = (v10 + 1);
      }
      *(_DWORD *)(v61 + 4 * v4) = v63;
      long long v60 = (unsigned int *)((char *)v60 + 1);
      if ((unsigned int *)v87 == v60) {
        goto LABEL_125;
      }
    }
    goto LABEL_178;
  }
  unint64_t v10 = 0;
LABEL_125:
  uint64_t v65 = *(void *)v143;
  if (*(void *)v143 && *(void *)&v145[2]) {
LABEL_71:
  }
    (*(void (**)(uint64_t))(*(void *)v65 + 40))(v65);
LABEL_127:
  if (v111)
  {
    if (v115) {
      (*(void (**)(void))(*(void *)v111 + 40))();
    }
    uint64_t v115 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v111 = 0;
    ++v114;
  }
  if (v106)
  {
    if (v110) {
      (*(void (**)(void))(*(void *)v106 + 40))();
    }
    uint64_t v110 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v106 = 0;
    ++v109;
  }
  if (v101)
  {
    if (v105) {
      (*(void (**)(void))(*(void *)v101 + 40))();
    }
    uint64_t v105 = 0;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    ++v104;
  }
  if (v99 && v100) {
    (*(void (**)(void))(*(void *)v99 + 40))();
  }
  if (v129)
  {
    if (v133) {
      (*(void (**)(void))(*(void *)v129 + 40))();
    }
    uint64_t v133 = 0;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v129 = 0;
    ++v132;
  }
  if (v124)
  {
    if (v128) {
      (*(void (**)(void))(*(void *)v124 + 40))();
    }
    uint64_t v128 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v124 = 0;
    ++v127;
  }
  if (v119)
  {
    if (v123) {
      (*(void (**)(void))(*(void *)v119 + 40))();
    }
    uint64_t v123 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    uint64_t v119 = 0;
    ++v122;
  }
  if (v117 && v118) {
    (*(void (**)(void))(*(void *)v117 + 40))();
  }
  return v10;
}

uint64_t re::anonymous namespace'::CompareAttributes::CompareAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  unint64_t v6 = (void *)(a1 + 8);
  *(void *)a1 = 0x101010100000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v8 = a1 + 136;
  *(_DWORD *)(a1 + 120) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v9 = a1 + 200;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = -1;
  *(void *)(a1 + 264) = 0;
  if (!*(unsigned char *)(a3 + 1)) {
    goto LABEL_30;
  }
  uint64_t v10 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexUV");
  if (!v10) {
    goto LABEL_30;
  }
  uint64_t v12 = v10;
  int v13 = *(unsigned __int8 *)(v10 + 16);
  if ((v13 & 0xFFFFFFFD) != 1) {
    goto LABEL_30;
  }
  *(unsigned char *)(a1 + 4) = 0;
  ++*(_DWORD *)a1;
  if (v13 == 1)
  {
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = re::accessVertexUVs((re *)a2, v11);
    *(_DWORD *)(a1 + 56) = v14;
    *(float *)(a1 + 64) = *(float *)(a3 + 12) * *(float *)(a3 + 12);
    goto LABEL_30;
  }
  uint64_t v41 = v8;
  unsigned int v43 = *(_DWORD *)(a2 + 16);
  unint64_t v15 = v43;
  *(void *)(a1 + 24) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicArray<unsigned int>::resize(v6, v15, &v43);
  re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::GeomAttributeFaceVaryingLayout(v42, v12);
  unint64_t v17 = *(void *)(a2 + 40);
  if (v17)
  {
    unint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = v42[0];
      LODWORD(v55) = v18;
      int v20 = *(unsigned __int8 *)(v42[0] + 204);
      if (v20 == 2) {
        break;
      }
      if (v20 == 1)
      {
        if (*(void *)(v42[0] + 224) <= v18) {
          goto LABEL_28;
        }
        unsigned int v22 = (_DWORD *)(*(void *)(v42[0] + 240) + 4 * v18);
LABEL_17:
        if (*v22 != -1)
        {
          unint64_t v17 = *(void *)(a2 + 40);
LABEL_19:
          v45[0] = -1;
          v45[1] = -1;
          if (v17 <= v18) {
            goto LABEL_52;
          }
          long long v46 = *(_OWORD *)(*(void *)(a2 + 56) + 16 * v18);
          int v23 = HIDWORD(v46);
          re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(v42, v18, (uint64_t)v45);
          uint64_t v24 = 0;
          unint64_t v17 = *(void *)(a1 + 24);
          uint64_t v25 = *(void *)(a1 + 40);
          uint64_t v26 = 3;
          if (v23 != -1) {
            uint64_t v26 = 4;
          }
          while (2)
          {
            unint64_t v27 = *((unsigned int *)&v46 + v24);
            if (v17 <= v27)
            {
              uint64_t v44 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v55 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v47 = 136315906;
              unint64_t v48 = "operator[]";
              __int16 v49 = 1024;
              int v50 = 789;
              __int16 v51 = 2048;
              unint64_t v52 = v27;
              __int16 v53 = 2048;
              unint64_t v54 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_52:
              *(void *)&long long v46 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v55 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v47 = 136315906;
              unint64_t v48 = "operator[]";
              __int16 v49 = 1024;
              int v50 = 797;
              __int16 v51 = 2048;
              unint64_t v52 = v18;
              __int16 v53 = 2048;
              unint64_t v54 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            int v28 = *((_DWORD *)v45 + v24);
            int v29 = *(_DWORD *)(v25 + 4 * v27);
            if (v29 == v43)
            {
LABEL_26:
              *(_DWORD *)(v25 + 4 * v27) = v28;
            }
            else if (v29 != v28)
            {
              int v28 = -1;
              goto LABEL_26;
            }
            if (v26 == ++v24) {
              goto LABEL_28;
            }
            continue;
          }
        }
        goto LABEL_28;
      }
      if (*(unsigned char *)(v42[0] + 204))
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
      if (v18 < *(unsigned int *)(v42[0] + 208)) {
        goto LABEL_19;
      }
LABEL_28:
      ++v18;
      unint64_t v17 = *(void *)(a2 + 40);
      if (v18 >= v17) {
        goto LABEL_29;
      }
    }
    uint64_t v21 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v42[0] + 208), (unsigned int *)&v55);
    if (v21 == -1) {
      goto LABEL_28;
    }
    unsigned int v22 = (_DWORD *)(*(void *)(v19 + 216) + 8 * v21 + 4);
    goto LABEL_17;
  }
LABEL_29:
  uint64_t v8 = v41;
LABEL_30:
  if (*(unsigned char *)(a3 + 2))
  {
    uint64_t v30 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexNormal");
    if (v30)
    {
      int v31 = *(unsigned __int8 *)(v30 + 16);
      if ((v31 & 0xFFFFFFFD) == 1)
      {
        *(unsigned char *)(a1 + 5) = 0;
        ++*(_DWORD *)a1;
        if (v31 == 1)
        {
          *(_DWORD *)(a1 + 120) = v32;
          *(float *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = cosf(*(float *)(a3 + 16));
        }
        else
        {
        }
      }
    }
  }
  if (*(unsigned char *)(a3 + 3))
  {
    uint64_t v33 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexTangent");
    if (v33)
    {
      int v34 = *(unsigned __int8 *)(v33 + 16);
      if ((v34 & 0xFFFFFFFD) == 1)
      {
        *(unsigned char *)(a1 + 6) = 0;
        ++*(_DWORD *)a1;
        if (v34 == 1)
        {
          *(_DWORD *)(a1 + 184) = v35;
          *(float *)(a1 + 192) = *(float *)(a3 + 20) * *(float *)(a3 + 20);
        }
        else
        {
        }
      }
    }
  }
  if (*(unsigned char *)(a3 + 4))
  {
    uint64_t v36 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 64), "vertexBitangent");
    if (v36)
    {
      int v37 = *(unsigned __int8 *)(v36 + 16);
      if ((v37 & 0xFFFFFFFD) == 1)
      {
        *(unsigned char *)(a1 + 7) = 0;
        ++*(_DWORD *)a1;
        if (v37 == 1)
        {
          *(_DWORD *)(a1 + re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v38;
          *(float *)(a1 + 256) = *(float *)(a3 + 24) * *(float *)(a3 + 24);
        }
        else
        {
        }
      }
    }
  }
  uint64_t v39 = *(void *)(a3 + 32);
  if (v39) {
    *(void *)(a1 + 264) = v39;
  }
  return a1;
}

uint64_t re::mergeVertices(unint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = a1;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v66 = 0;
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v10 = (unsigned int *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74, 4516, v9);
  int v64 = 0;
  int v65 = 1;
  float v11 = (_anonymous_namespace_ *)re::mergeVertices(v8, (uint64_t)v63, a4);
  uint64_t v12 = v11;
  if (v11)
  {
    uint64_t v60 = (re *)a2;
    uint64_t v61 = a3;
    unsigned int v62 = v11;
    long long v59 = *(const char **)v8;
    if (*(void *)v8) {
      int v13 = *(const char **)v8;
    }
    else {
      int v13 = "";
    }
    unint64_t v14 = *(unsigned int *)(v8 + 16);
    *(void *)&v90[2] = 0;
    memset(v88, 0, sizeof(v88));
    uint64_t v70 = 0;
    v67[1] = 0;
    unint64_t v68 = 0;
    v67[0] = 0;
    int v69 = 0;
    re::DynamicArray<float>::resize((uint64_t)v88, v14);
    re::DynamicArray<unsigned int>::resize(v67, v14, &re::kInvalidMeshIndex);
    if (v14)
    {
      unint64_t v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = v64;
      uint64_t v18 = v66;
      unint64_t v19 = v68;
      uint64_t v20 = v70;
      uint64_t v4 = *(void *)&v88[16];
      uint64_t v21 = *(void *)&v90[2];
      while (v17 != v15)
      {
        unint64_t v22 = *(unsigned int *)(v18 + 4 * (void)v15);
        if (v19 <= v22) {
          goto LABEL_103;
        }
        int v23 = *(_DWORD *)(v20 + 4 * v22);
        if (v23 == -1)
        {
          *(_DWORD *)(v20 + 4 * v22) = v16;
          int v23 = v16++;
        }
        *(_DWORD *)(v18 + 4 * (void)v15) = v23;
        if ((unsigned int *)v4 == v15) {
          goto LABEL_104;
        }
        *(_DWORD *)(v21 + 4 * (void)v15) = v15;
        unint64_t v15 = (unsigned int *)((char *)v15 + 1);
        if ((unsigned int *)v14 == v15) {
          goto LABEL_20;
        }
      }
      *(void *)float32x4_t v91 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      unint64_t v22 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v98[0]) = 136315906;
      *(void *)((char *)v98 + 4) = "operator[]";
      WORD2(v98[1]) = 1024;
      *(_DWORD *)((char *)&v98[1] + 6) = 789;
      WORD1(v98[2]) = 2048;
      *(void *)((char *)&v98[2] + 4) = v17;
      WORD2(v98[3]) = 2048;
      *(void *)((char *)&v98[3] + 6) = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_103:
      *(void *)float32x4_t v91 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      unint64_t v17 = (unsigned int *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v98[0]) = 136315906;
      *(void *)((char *)v98 + 4) = "operator[]";
      WORD2(v98[1]) = 1024;
      *(_DWORD *)((char *)&v98[1] + 6) = 789;
      WORD1(v98[2]) = 2048;
      *(void *)((char *)&v98[2] + 4) = v22;
      WORD2(v98[3]) = 2048;
      *(void *)((char *)&v98[3] + 6) = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_104:
      *(void *)float32x4_t v91 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v98[0]) = 136315906;
      *(void *)((char *)v98 + 4) = "operator[]";
      WORD2(v98[1]) = 1024;
      *(_DWORD *)((char *)&v98[1] + 6) = 789;
      WORD1(v98[2]) = 2048;
      *(void *)((char *)&v98[2] + 4) = v4;
      WORD2(v98[3]) = 2048;
      *(void *)((char *)&v98[3] + 6) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_105;
    }
    unsigned int v16 = 0;
LABEL_20:
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v77);
    LODWORD(v77) = v16;
    unsigned int v82 = v16;
    if (v83)
    {
      unint64_t v27 = v84;
      uint64_t v28 = 8 * v83;
      do
      {
        uint64_t v29 = *v27++;
        (*(void (**)(uint64_t, void))(*(void *)v29 + 72))(v29, v82);
        v28 -= 8;
      }
      while (v28);
    }
    if (*(_DWORD *)(v8 + 640))
    {
      LODWORD(v4) = 0;
      do
      {
        uint64_t v30 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(v8 + 64), v4);
        if (*(unsigned char *)(v30 + 16) == 1)
        {
          uint64_t v31 = v30;
          int v32 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v80, *(char **)(v30 + 8), 1, *(unsigned __int8 *)(v30 + 17));
          if (!*(void *)&v88[16]) {
            goto LABEL_110;
          }
          if (!v64) {
            goto LABEL_111;
          }
          (*(void (**)(uint64_t, re::GeomAttribute *, unint64_t, void, uint64_t))(*(void *)v31 + 40))(v31, v32, v14, *(void *)&v90[2], v66);
        }
        uint64_t v4 = (v4 + 1);
      }
      while (v4 < *(_DWORD *)(v8 + 640));
    }
    uint64_t v33 = *(void *)(v8 + 40);
    re::DynamicArray<re::GeomCell4>::resize((void *)&v77 + 1, v33);
    unsigned int v85 = v33;
    if (v86)
    {
      int v34 = v87;
      uint64_t v4 = 8 * v86;
      do
      {
        uint64_t v35 = *v34++;
        (*(void (**)(uint64_t, void))(*(void *)v35 + 72))(v35, v85);
        v4 -= 8;
      }
      while (v4);
    }
    if (v33)
    {
      uint64_t v36 = 0;
      unint64_t v17 = *(unsigned int **)(v8 + 40);
      uint64_t v37 = *(void *)(v8 + 56);
      unint64_t v8 = (unint64_t)v64;
      uint64_t v4 = *((void *)&v78 + 1);
      uint64_t v38 = *((void *)&v79 + 1);
LABEL_35:
      if (v36 == v17) {
        goto LABEL_107;
      }
      uint64_t v39 = 0;
      long long v76 = *(_OWORD *)(v37 + 16 * (void)v36);
      int v40 = HIDWORD(v76);
      if (HIDWORD(v76) == -1) {
        uint64_t v41 = 3;
      }
      else {
        uint64_t v41 = 4;
      }
      uint64_t v42 = v66;
      while (1)
      {
        unint64_t v43 = *((unsigned int *)&v76 + v39);
        if (v8 <= v43) {
          break;
        }
        *((_DWORD *)&v76 + v39++) = *(_DWORD *)(v42 + 4 * v43);
        if (v41 == v39)
        {
          if (v36 == (unsigned int *)v4) {
            goto LABEL_108;
          }
          BOOL v44 = v40 == -1;
          int v46 = DWORD2(v76);
          int v45 = HIDWORD(v76);
          if (v44) {
            int v45 = -1;
          }
          uint64_t v47 = v38 + 16 * (void)v36;
          *(void *)uint64_t v47 = v76;
          *(_DWORD *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v46;
          *(_DWORD *)(v47 + 12) = v45;
          uint64_t v36 = (unsigned int *)((char *)v36 + 1);
          if (v36 == (unsigned int *)v33) {
            goto LABEL_47;
          }
          goto LABEL_35;
        }
      }
      uint64_t v75 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(v98, 0, sizeof(v98));
      uint64_t v12 = (_anonymous_namespace_ *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v91 = 136315906;
      *(void *)&v91[4] = "operator[]";
      __int16 v92 = 1024;
      int v93 = 789;
      __int16 v94 = 2048;
      uint64_t v95 = v43;
      __int16 v96 = 2048;
      unint64_t v97 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_97;
    }
LABEL_47:
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v77, 0);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v77, 2);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v77, 3);
    re::internal::addAndCopyAttributeValues((uint64_t)v10, (_anonymous_namespace_ *)&v77, 4);
    a2 = (unsigned int *)v60;
    re::GeomMesh::operator=((uint64_t)v60, &v77);
    if (v59)
    {
      if (v72) {
        unint64_t v48 = *(const char **)&v73[7];
      }
      else {
        unint64_t v48 = v73;
      }
      re::GeomMesh::setName(v60, v48);
    }
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v80);
    if (*((void *)&v77 + 1) && *((void *)&v79 + 1)) {
      (*(void (**)(void))(**((void **)&v77 + 1) + 40))();
    }
    uint64_t v12 = (_anonymous_namespace_ *)v62;
    a3 = v61;
    if (v67[0] && v70) {
      (*(void (**)(void))(*(void *)v67[0] + 40))();
    }
    if (*(void *)v88 && *(void *)&v90[2]) {
      (*(void (**)(void))(**(void **)v88 + 40))();
    }
    if (v71 && (v72 & 1) != 0) {
      (*(void (**)(void))(*(void *)v71 + 40))();
    }
  }
  else
  {
    unint64_t v24 = *v10;
    re::DynamicArray<float>::resize((uint64_t)v63, v24);
    if (v24)
    {
      uint64_t v25 = 0;
      uint64_t v10 = v64;
      uint64_t v26 = v66;
      while (v10 != v25)
      {
        *(_DWORD *)(v26 + 4 * (void)v25) = v25;
        uint64_t v25 = (unsigned int *)((char *)v25 + 1);
        if ((unsigned int *)v24 == v25) {
          goto LABEL_18;
        }
      }
LABEL_109:
      *(void *)float32x4_t v88 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v98[0]) = 136315906;
      *(void *)((char *)v98 + 4) = "operator[]";
      WORD2(v98[1]) = 1024;
      *(_DWORD *)((char *)&v98[1] + 6) = 789;
      WORD1(v98[2]) = 2048;
      *(void *)((char *)&v98[2] + 4) = v10;
      WORD2(v98[3]) = 2048;
      *(void *)((char *)&v98[3] + 6) = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_110:
      *(void *)&long long v76 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(v98, 0, sizeof(v98));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v91 = 136315906;
      *(void *)&v91[4] = "operator[]";
      __int16 v92 = 1024;
      int v93 = 789;
      __int16 v94 = 2048;
      uint64_t v95 = 0;
      __int16 v96 = 2048;
      unint64_t v97 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_111:
      *(void *)&long long v76 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(v98, 0, sizeof(v98));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v91 = 136315906;
      *(void *)&v91[4] = "operator[]";
      __int16 v92 = 1024;
      int v93 = 789;
      __int16 v94 = 2048;
      uint64_t v95 = 0;
      __int16 v96 = 2048;
      unint64_t v97 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_18:
    re::GeomMesh::copy((re::GeomMesh *)v8, (re::GeomMesh *)a2);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v74);
  if (v12)
  {
    v98[4] = 0;
    memset(v98, 0, 28);
    re::DynamicArray<unsigned int>::resize(v98, a2[4], &re::kInvalidMeshIndex);
    if (v9)
    {
      __int16 v49 = 0;
      unint64_t v17 = v64;
      uint64_t v50 = v66;
      uint64_t v10 = (unsigned int *)v98[2];
      uint64_t v51 = v98[4];
      while (v17 != v49)
      {
        unint64_t v8 = *(unsigned int *)(v50 + 4 * (void)v49);
        if ((unint64_t)v10 <= v8) {
          goto LABEL_106;
        }
        *(_DWORD *)(v51 + 4 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v49;
        __int16 v49 = (unsigned int *)((char *)v49 + 1);
        if ((unsigned int *)v9 == v49) {
          goto LABEL_70;
        }
      }
LABEL_105:
      v67[0] = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v88 = 136315906;
      *(void *)&v88[4] = "operator[]";
      *(_WORD *)&v88[12] = 1024;
      *(_DWORD *)&v88[14] = 789;
      *(_WORD *)&v88[18] = 2048;
      *(void *)&v88[20] = v17;
      __int16 v89 = 2048;
      *(void *)float32x4_t v90 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_106:
      v67[0] = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v88 = 136315906;
      *(void *)&v88[4] = "operator[]";
      *(_WORD *)&v88[12] = 1024;
      *(_DWORD *)&v88[14] = 789;
      *(_WORD *)&v88[18] = 2048;
      *(void *)&v88[20] = v8;
      __int16 v89 = 2048;
      *(void *)float32x4_t v90 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_107:
      *(void *)&long long v76 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(v98, 0, sizeof(v98));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v91 = 136315906;
      *(void *)&v91[4] = "operator[]";
      __int16 v92 = 1024;
      int v93 = 797;
      __int16 v94 = 2048;
      uint64_t v95 = (uint64_t)v17;
      __int16 v96 = 2048;
      unint64_t v97 = (unint64_t)v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_108:
      uint64_t v75 = 0;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(v98, 0, sizeof(v98));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float32x4_t v91 = 136315906;
      *(void *)&v91[4] = "operator[]";
      __int16 v92 = 1024;
      int v93 = 789;
      __int16 v94 = 2048;
      uint64_t v95 = v4;
      __int16 v96 = 2048;
      unint64_t v97 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_109;
    }
LABEL_70:
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v77, (uint64_t)v98);
    re::GeomIndexMap::operator=(a3, (uint64_t)&v77);
    if (BYTE12(v77))
    {
      if (BYTE12(v77) != 2)
      {
        if (BYTE12(v77) == 1)
        {
          uint64_t v53 = v78;
          if (!(void)v78 || !(void)v80) {
            goto LABEL_89;
          }
LABEL_88:
          (*(void (**)(uint64_t))(*(void *)v53 + 40))(v53);
          goto LABEL_89;
        }
        re::internal::assertLog((re::internal *)4, v52, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        _os_crash();
        __break(1u);
LABEL_113:
        re::internal::assertLog((re::internal *)4, v56, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
      uint64_t v53 = *((void *)&v81 + 1);
      if (*((void *)&v81 + 1))
      {
        if (*((void *)&v78 + 1)) {
          *((void *)&v78 + 1) = 0;
        }
        if ((void)v78) {
          goto LABEL_88;
        }
      }
    }
LABEL_89:
    uint64_t v57 = v98[0];
    if (!v98[0] || !v98[4]) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  unsigned int v54 = 0;
  unsigned int v55 = a2[4];
  *(void *)&long long v77 = 0xFFFFFFFF00000000;
  DWORD2(v77) = -1;
  BYTE12(v77) = 0;
  if (v55 - 1 <= 0xFFFFFFFD)
  {
    DWORD2(v77) = v55 - 1;
    unsigned int v54 = v55;
    *(void *)&long long v77 = v55;
  }
  LODWORD(v7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v54;
  re::GeomIndexMap::operator=(a3, (uint64_t)&v77);
  if (!BYTE12(v77)) {
    goto LABEL_92;
  }
  if (BYTE12(v77) != 2)
  {
    if (BYTE12(v77) == 1)
    {
      uint64_t v57 = v78;
      if (!(void)v78 || !(void)v80) {
        goto LABEL_92;
      }
      goto LABEL_91;
    }
    goto LABEL_113;
  }
LABEL_97:
  uint64_t v57 = *((void *)&v81 + 1);
  if (!*((void *)&v81 + 1)) {
    goto LABEL_92;
  }
  if (*((void *)&v78 + 1)) {
    *((void *)&v78 + 1) = 0;
  }
  if (!(void)v78) {
    goto LABEL_92;
  }
LABEL_91:
  (*(void (**)(uint64_t))(*(void *)v57 + 40))(v57);
LABEL_92:
  if (v63[0])
  {
    if (v66) {
      (*(void (**)(void, uint64_t))(*(void *)v63[0] + 40))(v63[0], v66);
    }
  }
  return (uint64_t)v12;
}

uint64_t re::anonymous namespace'::CompareAttributes::buildVertexToAttributeValueIndexMap<re::Vector3<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  unsigned int v22 = *(_DWORD *)(a1 + 16);
  unint64_t v6 = v22;
  *(void *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<unsigned int>::resize((void *)a3, v6, &v22);
  uint64_t result = (uint64_t)re::GeomAttributeFaceVaryingLayout<re::Vector3<float>>::GeomAttributeFaceVaryingLayout(v21, a2);
  unint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      uint64_t v11 = v21[0];
      LODWORD(v34) = i;
      int v12 = *(unsigned __int8 *)(v21[0] + 204);
      if (v12 == 2)
      {
        uint64_t result = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v21[0] + 208), (unsigned int *)&v34);
        if (result == -1) {
          goto LABEL_24;
        }
        int v13 = (_DWORD *)(*(void *)(v11 + 216) + 8 * result + 4);
      }
      else
      {
        if (v12 != 1)
        {
          if (*(unsigned char *)(v21[0] + 204)) {
            goto LABEL_28;
          }
          if (i < *(unsigned int *)(v21[0] + 208)) {
            goto LABEL_14;
          }
          goto LABEL_24;
        }
        if (*(void *)(v21[0] + 224) <= i) {
          goto LABEL_24;
        }
        int v13 = (_DWORD *)(*(void *)(v21[0] + 240) + 4 * i);
      }
      if (*v13 != -1)
      {
        unint64_t v9 = *(void *)(a1 + 40);
LABEL_14:
        v24[0] = -1;
        v24[1] = -1;
        if (v9 <= i) {
          goto LABEL_27;
        }
        long long v25 = *(_OWORD *)(*(void *)(a1 + 56) + 16 * i);
        int v14 = HIDWORD(v25);
        uint64_t result = re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(v21, i, (uint64_t)v24);
        uint64_t v15 = 0;
        unint64_t v9 = *(void *)(a3 + 16);
        uint64_t v16 = *(void *)(a3 + 32);
        if (v14 == -1) {
          uint64_t v17 = 3;
        }
        else {
          uint64_t v17 = 4;
        }
        while (2)
        {
          unint64_t v18 = *((unsigned int *)&v25 + v15);
          if (v9 <= v18)
          {
            uint64_t v23 = 0;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v34 = 0u;
            unint64_t i = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v26 = 136315906;
            unint64_t v27 = "operator[]";
            __int16 v28 = 1024;
            int v29 = 789;
            __int16 v30 = 2048;
            unint64_t v31 = v18;
            __int16 v32 = 2048;
            unint64_t v33 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_27:
            *(void *)&long long v25 = 0;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v34 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v26 = 136315906;
            unint64_t v27 = "operator[]";
            __int16 v28 = 1024;
            int v29 = 797;
            __int16 v30 = 2048;
            unint64_t v31 = i;
            __int16 v32 = 2048;
            unint64_t v33 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_28:
            re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
            _os_crash();
            __break(1u);
          }
          int v19 = *((_DWORD *)v24 + v15);
          int v20 = *(_DWORD *)(v16 + 4 * v18);
          if (v20 == v22)
          {
LABEL_22:
            *(_DWORD *)(v16 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
          }
          else if (v20 != v19)
          {
            int v19 = -1;
            goto LABEL_22;
          }
          if (v17 == ++v15) {
            break;
          }
          continue;
        }
      }
LABEL_24:
      unint64_t v9 = *(void *)(a1 + 40);
    }
  }
  return result;
}

uint64_t re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::faceVertexValueIndices(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  LODWORD(v13[0]) = a2;
  int v6 = *(unsigned __int8 *)(v5 + 204);
  if (v6 == 2)
  {
    uint64_t v7 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v5 + 208), (unsigned int *)v13);
    if (v7 == -1) {
      return 0;
    }
    uint64_t v8 = (_DWORD *)(*(void *)(v5 + 216) + 8 * v7 + 4);
LABEL_10:
    LODWORD(a2) = *v8;
    if (*v8 != -1)
    {
      uint64_t v5 = *a1;
      goto LABEL_12;
    }
    return 0;
  }
  if (v6 == 1)
  {
    if (*(void *)(v5 + 224) <= (unint64_t)a2) {
      return 0;
    }
    uint64_t v8 = (_DWORD *)(*(void *)(v5 + 240) + 4 * a2);
    goto LABEL_10;
  }
  if (!*(unsigned char *)(v5 + 204))
  {
    if (*(_DWORD *)(v5 + 208) <= a2) {
      return 0;
    }
LABEL_12:
    if (*(void *)(v5 + 88) <= (unint64_t)a2)
    {
      memset(v13, 0, sizeof(v13));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v5 + 104) + 16 * a2;
    do
    {
      *(_DWORD *)(a3 + v9) = *(_DWORD *)(v10 + v9);
      v9 += 4;
    }
    while (v9 != 16);
    if (*(_DWORD *)(a3 + 12) == -1) {
      return 3;
    }
    else {
      return 4;
    }
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::GeomAttributeFaceVaryingLayout<re::Vector2<float>>::GeomAttributeFaceVaryingLayout(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t v4 = re::internal::GeomTypedAttribute<double>::operator[](a2, 0);
    uint64_t v5 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *re::GeomAttributeFaceVaryingLayout<re::Vector3<float>>::GeomAttributeFaceVaryingLayout(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a2, 0);
    uint64_t v5 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t re::anonymous namespace'::CompareAttributes::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3;
  LODWORD(v4) = a2;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 4)) {
    goto LABEL_2;
  }
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    if (v9 <= a2)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      unint64_t v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 797;
      __int16 v30 = 2048;
      uint64_t v31 = v4;
      __int16 v32 = 2048;
      unint64_t v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v10 = a3;
      if (v9 > a3)
      {
        uint64_t v11 = *(void *)(a1 + 40);
        int v12 = *(_DWORD *)(v11 + 4 * a2);
        if (v12 == -1 || v12 != *(_DWORD *)(v11 + 4 * a3)) {
          return 0;
        }
        goto LABEL_2;
      }
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    uint64_t v21 = v10;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    unint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 797;
    __int16 v30 = 2048;
    uint64_t v31 = v21;
    __int16 v32 = 2048;
    unint64_t v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v9 = *(unsigned int *)(a1 + 56);
  if (v9 <= a2)
  {
LABEL_40:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    unsigned int v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    unint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 601;
    __int16 v30 = 2048;
    uint64_t v31 = v4;
    __int16 v32 = 2048;
    unint64_t v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  if (v9 <= a3)
  {
LABEL_41:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    LODWORD(v4) = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    unint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 601;
    __int16 v30 = 2048;
    uint64_t v31 = v3;
    __int16 v32 = 2048;
    unint64_t v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_42;
  }
  float32x2_t v19 = vsub_f32(*(float32x2_t *)(*(void *)(a1 + 48) + 8 * a2), *(float32x2_t *)(*(void *)(a1 + 48) + 8 * a3));
  if (vaddv_f32(vmul_f32(v19, v19)) > *(float *)(a1 + 64)) {
    return 0;
  }
LABEL_2:
  if (*(unsigned char *)(a1 + 5)) {
    goto LABEL_3;
  }
  unint64_t v9 = *(void *)(a1 + 88);
  if (!v9)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 120);
    if (v9 <= a2)
    {
LABEL_42:
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      unsigned int v3 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      unint64_t v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 601;
      __int16 v30 = 2048;
      uint64_t v31 = v4;
      __int16 v32 = 2048;
      unint64_t v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v34 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v26 = 136315906;
      unint64_t v27 = "operator[]";
      __int16 v28 = 1024;
      int v29 = 601;
      __int16 v30 = 2048;
      uint64_t v31 = v3;
      __int16 v32 = 2048;
      unint64_t v33 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v9 <= a3) {
      goto LABEL_43;
    }
    float32x4_t v20 = vmulq_f32(*(float32x4_t *)(*(void *)(a1 + 112) + 16 * a2), *(float32x4_t *)(*(void *)(a1 + 112) + 16 * a3));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0] >= *(float *)(a1 + 128))goto LABEL_3; {
    return 0;
    }
  }
  uint64_t v14 = a2;
  if (v9 <= a2)
  {
LABEL_38:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    uint64_t v22 = v14;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    unint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 797;
    __int16 v30 = 2048;
    uint64_t v31 = v22;
    __int16 v32 = 2048;
    unint64_t v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v15 = a3;
  if (v9 <= a3)
  {
LABEL_39:
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    uint64_t v4 = v15;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v26 = 136315906;
    unint64_t v27 = "operator[]";
    __int16 v28 = 1024;
    int v29 = 797;
    __int16 v30 = 2048;
    uint64_t v31 = v4;
    __int16 v32 = 2048;
    unint64_t v33 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v16 = *(void *)(a1 + 104);
  int v17 = *(_DWORD *)(v16 + 4 * a2);
  if (v17 == -1 || v17 != *(_DWORD *)(v16 + 4 * a3)) {
    return 0;
  }
LABEL_3:
  if (*(unsigned char *)(a1 + 6)
  {
    if (*(unsigned char *)(a1 + 7)
    {
      uint64_t v7 = *(void *)(a1 + 264);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        LODWORD(v34) = v4;
        int v26 = v3;
        if (v8)
        {
          return (*(uint64_t (**)(uint64_t, long long *, int *))(*(void *)v8 + 48))(v8, &v34, &v26);
        }
        else
        {
          uint64_t v23 = (re::_anonymous_namespace_::CompareAttributes::TangentData *)std::__throw_bad_function_call[abi:nn180100]();
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

BOOL re::anonymous namespace'::CompareAttributes::TangentData::compare(re::_anonymous_namespace_::CompareAttributes::TangentData *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = *((void *)this + 2);
  if (!v3)
  {
    unsigned int v9 = *((_DWORD *)this + 12);
    if (v9 > a2)
    {
      if (v9 > a3)
      {
        float32x4_t v10 = vsubq_f32(*(float32x4_t *)(*((void *)this + 5) + 16 * a2), *(float32x4_t *)(*((void *)this + 5) + 16 * a3));
        float32x4_t v11 = vmulq_f32(v10, v10);
        return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0] <= *((float *)this + 14);
      }
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  if (v3 <= a3)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = *((void *)this + 4);
  int v5 = *(_DWORD *)(v4 + 4 * a2);
  int v6 = *(_DWORD *)(v4 + 4 * a3);
  return v5 != -1 && v5 == v6;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::anonymous namespace'::PointProjection *,false>(uint64_t result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  float32x4_t v10 = a2 - 3;
  unint64_t i = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)i;
    uint64_t v12 = (char *)a2 - (char *)i;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - i);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v58 = *(a2 - 1);
          float v59 = i[2];
          if (v58 < v59 || v58 <= v59 && *(_DWORD *)v10 < *(_DWORD *)i)
          {
            int v152 = *((_DWORD *)i + 2);
            uint64_t v146 = *(void *)i;
            uint64_t v60 = *(void *)v10;
            i[2] = *(a2 - 1);
            *(void *)unint64_t i = v60;
            *((_DWORD *)a2 - 1) = v152;
            *(void *)float32x4_t v10 = v146;
          }
          break;
        case 3uLL:
          break;
        case 4uLL:
          break;
        case 5uLL:
          uint64_t v61 = (uint64_t *)(i + 3);
          unsigned int v62 = (uint64_t *)(i + 6);
          int v63 = (uint64_t *)(i + 9);
          float v64 = *(a2 - 1);
          float v65 = i[11];
          if (v64 < v65 || v64 <= v65 && *(_DWORD *)v10 < *(_DWORD *)v63)
          {
            uint64_t v66 = *v63;
            int v67 = *((_DWORD *)i + 11);
            int v68 = *((_DWORD *)a2 - 1);
            *int v63 = *(void *)v10;
            *((_DWORD *)i + 11) = v68;
            *((_DWORD *)a2 - 1) = v67;
            *(void *)float32x4_t v10 = v66;
            float v69 = i[11];
            float v70 = i[8];
            if (v69 < v70 || v69 <= v70 && *(_DWORD *)v63 < *(_DWORD *)v62)
            {
              int v71 = *((_DWORD *)i + 8);
              uint64_t v72 = *v62;
              *unsigned int v62 = *v63;
              i[8] = i[11];
              *int v63 = v72;
              *((_DWORD *)i + 11) = v71;
              float v73 = i[8];
              float v74 = i[5];
              if (v73 < v74 || v73 <= v74 && *(_DWORD *)v62 < *(_DWORD *)v61)
              {
                int v75 = *((_DWORD *)i + 5);
                uint64_t v76 = *v61;
                *uint64_t v61 = *v62;
                i[5] = i[8];
                *unsigned int v62 = v76;
                *((_DWORD *)i + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v75;
                float v77 = i[5];
                float v78 = i[2];
                if (v77 < v78 || v77 <= v78 && *((_DWORD *)i + 3) < *(_DWORD *)i)
                {
                  int v153 = *((_DWORD *)i + 2);
                  uint64_t v147 = *(void *)i;
                  *(void *)unint64_t i = *v61;
                  i[2] = i[5];
                  *uint64_t v61 = v147;
                  *((_DWORD *)i + 5) = v153;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 287)
    {
      long long v79 = i + 3;
      BOOL v81 = i == a2 || v79 == a2;
      if (a4)
      {
        if (v81) {
          return result;
        }
        uint64_t v82 = 0;
        uint64_t v83 = i;
        while (2)
        {
          float32x4_t v84 = v83;
          uint64_t v83 = v79;
          float v85 = v84[5];
          float v86 = v84[2];
          if (v85 < v86)
          {
            float v87 = *v79;
            goto LABEL_124;
          }
          if (v85 <= v86)
          {
            float v87 = *v79;
            if (LODWORD(v87) < *(_DWORD *)v84)
            {
LABEL_124:
              int v88 = *((_DWORD *)v84 + 4);
              *(void *)uint64_t v83 = *(void *)v84;
              v83[2] = v84[2];
              __int16 v89 = i;
              if (v84 != i)
              {
                uint64_t v90 = v82;
                while (1)
                {
                  float32x4_t v91 = (float *)((char *)i + v90);
                  __int16 v92 = (_DWORD *)((char *)i + v90 - 12);
                  float v93 = *(float *)((char *)i + v90 - 4);
                  if (v85 >= v93)
                  {
                    if (v85 > v93)
                    {
                      __int16 v89 = v84;
                      goto LABEL_136;
                    }
                    if (LODWORD(v87) >= *v92) {
                      break;
                    }
                  }
                  v84 -= 3;
                  *(void *)float32x4_t v91 = *(void *)v92;
                  v91[2] = *(float *)((char *)i + v90 - 4);
                  v90 -= 12;
                  if (!v90)
                  {
                    __int16 v89 = i;
                    goto LABEL_136;
                  }
                }
                __int16 v89 = (float *)((char *)i + v90);
              }
LABEL_136:
              *__int16 v89 = v87;
              *((_DWORD *)v89 + 1) = v88;
              v89[2] = v85;
            }
          }
          long long v79 = v83 + 3;
          v82 += 12;
          if (v83 + 3 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v81) {
        return result;
      }
      while (2)
      {
        unint64_t v136 = v9;
        unint64_t v9 = (unint64_t)v79;
        float v137 = *(float *)(v136 + 20);
        float v138 = *(float *)(v136 + 8);
        if (v137 >= v138)
        {
          if (v137 <= v138)
          {
            float v139 = *v79;
            if (*(_DWORD *)v79 < *(_DWORD *)v136) {
              goto LABEL_198;
            }
          }
        }
        else
        {
          float v139 = *v79;
LABEL_198:
          int v140 = *(_DWORD *)(v136 + 16);
          do
          {
            do
            {
              unint64_t v141 = v136;
              *(void *)(v136 + 12) = *(void *)v136;
              *(_DWORD *)(v136 + 20) = *(_DWORD *)(v136 + 8);
              v136 -= 12;
              float v142 = *(float *)(v141 - 4);
            }
            while (v137 < v142);
          }
          while (v137 <= v142 && LODWORD(v139) < *(_DWORD *)(v141 - 12));
          *(float *)unint64_t v141 = v139;
          *(_DWORD *)(v141 + 4) = v140;
          *(float *)(v141 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v137;
        }
        long long v79 = (float *)(v9 + 12);
        if ((float *)(v9 + 12) == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &i[3 * (v13 >> 1)];
    if ((unint64_t)v12 >= 0x601)
    {
      uint64_t v16 = 3 * v14;
      int v17 = (float *)(v9 + 12 * v14 - 12);
      unint64_t v18 = (float *)(v9 + 12 + 4 * v16);
      int v149 = *(_DWORD *)(v9 + 8);
      uint64_t v143 = *(void *)v9;
      int v19 = *((_DWORD *)v15 + 2);
      *(void *)unint64_t v9 = *(void *)v15;
      *(_DWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
      *((_DWORD *)v15 + 2) = v149;
      *(void *)uint64_t v15 = v143;
    }
    else
    {
    }
    --a3;
    if (a4)
    {
      float v20 = *(float *)v9;
      float v21 = *(float *)(v9 + 8);
LABEL_15:
      uint64_t v23 = 0;
      int v24 = *(_DWORD *)(v9 + 4);
      while (1)
      {
        float v25 = *(float *)(v9 + v23 + 20);
        if (v25 >= v21 && (v25 > v21 || *(_DWORD *)(v9 + v23 + 12) >= LODWORD(v20))) {
          break;
        }
        v23 += 12;
      }
      unint64_t v26 = v9 + v23 + 12;
      if (v23)
      {
        float v27 = *(a2 - 1);
        __int16 v28 = a2 - 4;
        unint64_t v29 = (unint64_t)(a2 - 3);
        if (v27 >= v21)
        {
          do
          {
            if (v27 <= v21 && *((_DWORD *)v28 + 1) < LODWORD(v20)) {
              break;
            }
            float v30 = *v28;
            v28 -= 3;
            float v27 = v30;
          }
          while (v30 >= v21);
LABEL_25:
          unint64_t v29 = (unint64_t)(v28 + 1);
        }
      }
      else
      {
        unint64_t v29 = (unint64_t)a2;
        if (v26 < (unint64_t)a2)
        {
          float v31 = *(a2 - 1);
          unint64_t v29 = (unint64_t)(a2 - 3);
          if (v31 >= v21)
          {
            __int16 v28 = a2 - 4;
            unint64_t v29 = (unint64_t)(a2 - 3);
            while (1)
            {
              int v40 = v28 + 1;
              if (v31 <= v21)
              {
                if (*v40 < LODWORD(v20) || v26 >= (unint64_t)v40) {
                  goto LABEL_25;
                }
              }
              else if (v26 >= (unint64_t)v40)
              {
                break;
              }
              v29 -= 12;
              float v42 = *v28;
              v28 -= 3;
              float v31 = v42;
              if (v42 < v21) {
                goto LABEL_25;
              }
            }
          }
        }
      }
      unint64_t i = (float *)v26;
      if (v26 < v29)
      {
        unint64_t v32 = v29;
        do
        {
          int v150 = *((_DWORD *)i + 2);
          uint64_t v144 = *(void *)i;
          uint64_t v33 = *(void *)v32;
          i[2] = *(float *)(v32 + 8);
          *(void *)unint64_t i = v33;
          *(_DWORD *)(v32 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v150;
          *(void *)unint64_t v32 = v144;
          do
          {
            do
            {
              i += 3;
              float v34 = i[2];
            }
            while (v34 < v21);
          }
          while (v34 <= v21 && *(_DWORD *)i < LODWORD(v20));
          float v35 = *(float *)(v32 - 4);
          if (v35 >= v21)
          {
            unint64_t v36 = v32 - 16;
            do
            {
              if (v35 <= v21 && *(_DWORD *)(v36 + 4) < LODWORD(v20)) {
                break;
              }
              float v37 = *(float *)v36;
              v36 -= 12;
              float v35 = v37;
            }
            while (v37 >= v21);
            unint64_t v32 = v36 + 4;
          }
          else
          {
            v32 -= 12;
          }
        }
        while ((unint64_t)i < v32);
      }
      if (i - 3 != (float *)v9)
      {
        uint64_t v38 = *(void *)(i - 3);
        *(float *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(i - 1);
        *(void *)unint64_t v9 = v38;
      }
      *(i - 3) = v20;
      *((_DWORD *)i - 2) = v24;
      *(i - 1) = v21;
      if (v26 < v29) {
        goto LABEL_47;
      }
      if (result)
      {
        a2 = i - 3;
        if (v39) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v39)
      {
LABEL_47:
        a4 = 0;
      }
    }
    else
    {
      float v22 = *(float *)(v9 - 4);
      float v21 = *(float *)(v9 + 8);
      float v20 = *(float *)v9;
      if (v22 < v21 || v22 <= v21 && *(_DWORD *)(v9 - 12) < LODWORD(v20)) {
        goto LABEL_15;
      }
      float v43 = *(a2 - 1);
      if (v21 >= v43 && (v21 > v43 || LODWORD(v20) >= *(_DWORD *)v10))
      {
        for (unint64_t i = (float *)(v9 + 12); i < a2; i += 3)
        {
          float v45 = i[2];
          if (v21 < v45 || v21 <= v45 && LODWORD(v20) < *(_DWORD *)i) {
            break;
          }
        }
      }
      else
      {
        float v44 = *(float *)(v9 + 20);
        if (v21 >= v44)
        {
          int v46 = (float *)(v9 + 32);
          do
          {
            if (v21 <= v44 && LODWORD(v20) < *((_DWORD *)v46 - 5)) {
              break;
            }
            float v47 = *v46;
            v46 += 3;
            float v44 = v47;
          }
          while (v21 >= v47);
          unint64_t i = v46 - 5;
        }
        else
        {
          unint64_t i = (float *)(v9 + 12);
        }
      }
      int v48 = *(_DWORD *)(v9 + 4);
      __int16 v49 = a2;
      if (i < a2)
      {
        for (unint64_t j = a2 - 4; v21 < v43 || v21 <= v43 && LODWORD(v20) < *((_DWORD *)j + 1); j -= 3)
        {
          float v51 = *j;
          float v43 = v51;
        }
        __int16 v49 = j + 1;
      }
      while (i < v49)
      {
        int v151 = *((_DWORD *)i + 2);
        uint64_t v145 = *(void *)i;
        uint64_t v52 = *(void *)v49;
        i[2] = v49[2];
        *(void *)unint64_t i = v52;
        *((_DWORD *)v49 + 2) = v151;
        *(void *)__int16 v49 = v145;
        float v53 = i[5];
        if (v21 >= v53)
        {
          unsigned int v54 = i + 8;
          do
          {
            if (v21 <= v53 && LODWORD(v20) < *((_DWORD *)v54 - 5)) {
              break;
            }
            float v55 = *v54;
            v54 += 3;
            float v53 = v55;
          }
          while (v21 >= v55);
          unint64_t i = v54 - 5;
        }
        else
        {
          i += 3;
        }
        do
        {
          do
          {
            v49 -= 3;
            float v56 = v49[2];
          }
          while (v21 < v56);
        }
        while (v21 <= v56 && LODWORD(v20) < *(_DWORD *)v49);
      }
      BOOL v4 = (unint64_t)(i - 3) >= v9;
      BOOL v5 = i - 3 == (float *)v9;
      if (i - 3 != (float *)v9)
      {
        uint64_t v57 = *(void *)(i - 3);
        *(float *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(i - 1);
        *(void *)unint64_t v9 = v57;
      }
      a4 = 0;
      *(i - 3) = v20;
      *((_DWORD *)i - 2) = v48;
      *(i - 1) = v21;
    }
  }
  if (i != a2)
  {
    int64_t v94 = (v13 - 2) >> 1;
    int64_t v95 = v94;
    do
    {
      int64_t v96 = v95;
      if (v94 >= v95)
      {
        uint64_t v97 = (2 * v95) | 1;
        int v98 = &i[3 * v97];
        if (2 * v96 + 2 < (uint64_t)v13)
        {
          float v99 = i[3 * v97 + 2];
          float v100 = v98[5];
          if (v99 < v100 || v99 <= v100 && *(_DWORD *)v98 < *((_DWORD *)v98 + 3))
          {
            v98 += 3;
            uint64_t v97 = 2 * v96 + 2;
          }
        }
        float v101 = v98[2];
        float v102 = i[3 * v96 + 2];
        if (v101 >= v102)
        {
          uint64_t v103 = (unsigned int *)&i[3 * v96];
          unsigned int v104 = *v103;
          if (v101 > v102 || *(_DWORD *)v98 >= v104)
          {
            unsigned int v105 = v103[1];
            uint64_t result = *(void *)v98;
            v103[2] = *((_DWORD *)v98 + 2);
            *(void *)uint64_t v103 = result;
            if (v94 >= v97)
            {
              while (1)
              {
                uint64_t v107 = 2 * v97;
                uint64_t v97 = (2 * v97) | 1;
                uint64_t v106 = &i[3 * v97];
                uint64_t result = v107 + 2;
                if (result < (uint64_t)v13)
                {
                  float v108 = i[3 * v97 + 2];
                  float v109 = v106[5];
                  if (v108 < v109 || v108 <= v109 && *(_DWORD *)v106 < *((_DWORD *)v106 + 3))
                  {
                    v106 += 3;
                    uint64_t v97 = result;
                  }
                }
                float v110 = v106[2];
                if (v110 < v102) {
                  break;
                }
                if (v110 <= v102)
                {
                  uint64_t result = *(unsigned int *)v106;
                  if (result < v104) {
                    break;
                  }
                }
                uint64_t result = *(void *)v106;
                v98[2] = v106[2];
                *(void *)int v98 = result;
                int v98 = v106;
                if (v94 < v97) {
                  goto LABEL_152;
                }
              }
            }
            uint64_t v106 = v98;
LABEL_152:
            *(_DWORD *)uint64_t v106 = v104;
            *((_DWORD *)v106 + 1) = v105;
            v106[2] = v102;
          }
        }
      }
      int64_t v95 = v96 - 1;
    }
    while (v96);
    int64_t v111 = v12 / 0xCuLL;
    while (2)
    {
      uint64_t v112 = 0;
      int v154 = *((_DWORD *)i + 2);
      uint64_t v148 = *(void *)i;
      uint64_t v113 = i;
      do
      {
        int v114 = v113;
        uint64_t v115 = v112 + 1;
        v113 += 3 * v112 + 3;
        uint64_t v116 = 2 * v112;
        uint64_t v112 = (2 * v112) | 1;
        int64_t v117 = v116 + 2;
        if (v117 < v111)
        {
          float v118 = v114[3 * v115 + 2];
          float v119 = v113[5];
          if (v118 < v119 || v118 <= v119 && *(_DWORD *)v113 < *((_DWORD *)v113 + 3))
          {
            v113 += 3;
            uint64_t v112 = v117;
          }
        }
        uint64_t v120 = *(void *)v113;
        v114[2] = v113[2];
        *(void *)int v114 = v120;
      }
      while (v112 <= (uint64_t)((unint64_t)(v111 - 2) >> 1));
      a2 -= 3;
      if (v113 == a2)
      {
        *((_DWORD *)v113 + 2) = v154;
        *(void *)uint64_t v113 = v148;
      }
      else
      {
        uint64_t v121 = *(void *)a2;
        v113[2] = a2[2];
        *(void *)uint64_t v113 = v121;
        *((_DWORD *)a2 + 2) = v154;
        *(void *)a2 = v148;
        uint64_t v122 = (char *)v113 - (char *)i + 12;
        if (v122 >= 13)
        {
          unint64_t v123 = v122 / 0xCuLL - 2;
          unint64_t v124 = v123 >> 1;
          uint64_t v125 = &i[3 * (v123 >> 1)];
          float v126 = v125[2];
          float v127 = v113[2];
          if (v126 < v127)
          {
            unsigned int v128 = *(_DWORD *)v113;
            goto LABEL_179;
          }
          if (v126 <= v127)
          {
            unsigned int v128 = *(_DWORD *)v113;
            if (*(_DWORD *)v125 < *(_DWORD *)v113)
            {
LABEL_179:
              int v129 = *((_DWORD *)v113 + 1);
              uint64_t v130 = *(void *)v125;
              uint64_t result = *((unsigned int *)v125 + 2);
              *((_DWORD *)v113 + 2) = result;
              *(void *)uint64_t v113 = v130;
              if (v123 >= 2)
              {
                while (1)
                {
                  unint64_t v132 = v124 - 1;
                  unint64_t v124 = (v124 - 1) >> 1;
                  uint64_t v131 = &i[3 * v124];
                  float v133 = v131[2];
                  if (v133 >= v127 && (v133 > v127 || *(_DWORD *)v131 >= v128)) {
                    break;
                  }
                  uint64_t v134 = *(void *)v131;
                  uint64_t result = *((unsigned int *)v131 + 2);
                  *((_DWORD *)v125 + 2) = result;
                  *(void *)uint64_t v125 = v134;
                  uint64_t v125 = &i[3 * v124];
                  if (v132 <= 1) {
                    goto LABEL_185;
                  }
                }
              }
              uint64_t v131 = v125;
LABEL_185:
              *(_DWORD *)uint64_t v131 = v128;
              *((_DWORD *)v131 + 1) = v129;
              v131[2] = v127;
            }
          }
        }
      }
      if (v111-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::anonymous namespace'::PointProjection *>(float *result, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = result[2];
  if (v3 >= v4 && (v3 > v4 || *(_DWORD *)a2 >= *(_DWORD *)result))
  {
    float v9 = a3[2];
    if (v9 < v3 || v9 <= v3 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v10 = *((_DWORD *)a2 + 2);
      uint64_t v11 = *(void *)a2;
      int v12 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v12;
      *(void *)a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      float v13 = a2[2];
      float v14 = result[2];
      if (v13 < v14 || v13 <= v14 && *(_DWORD *)a2 < *(_DWORD *)result)
      {
        int v15 = *((_DWORD *)result + 2);
        uint64_t v16 = *(void *)result;
        int v17 = *((_DWORD *)a2 + 2);
        *(void *)uint64_t result = *(void *)a2;
        *((_DWORD *)result + 2) = v17;
        *(void *)a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  else
  {
    float v5 = a3[2];
    if (v5 < v3 || v5 <= v3 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v6 = *((_DWORD *)result + 2);
      uint64_t v7 = *(void *)result;
      int v8 = *((_DWORD *)a3 + 2);
      *(void *)uint64_t result = *(void *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_17:
      *(void *)a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      return result;
    }
    int v18 = *((_DWORD *)result + 2);
    uint64_t v19 = *(void *)result;
    int v20 = *((_DWORD *)a2 + 2);
    *(void *)uint64_t result = *(void *)a2;
    *((_DWORD *)result + 2) = v20;
    *(void *)a2 = v19;
    *((_DWORD *)a2 + 2) = v18;
    float v21 = a3[2];
    float v22 = a2[2];
    if (v21 < v22 || v21 <= v22 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v6 = *((_DWORD *)a2 + 2);
      uint64_t v7 = *(void *)a2;
      int v23 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::anonymous namespace'::PointProjection *>(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      float v7 = *(a2 - 1);
      float v8 = a1[2];
      if (v7 < v8 || v7 <= v8 && *(_DWORD *)v6 < *(_DWORD *)a1)
      {
        int v9 = *((_DWORD *)a1 + 2);
        uint64_t v10 = *(void *)a1;
        int v11 = *((_DWORD *)a2 - 1);
        *(void *)a1 = *(void *)v6;
        *((_DWORD *)a1 + 2) = v11;
        *(void *)int v6 = v10;
        *((_DWORD *)a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      float v25 = (uint64_t *)(a1 + 3);
      unint64_t v26 = (uint64_t *)(a1 + 6);
      float v27 = (uint64_t *)(a1 + 9);
      __int16 v28 = a2 - 3;
      float v29 = *(a2 - 1);
      float v30 = a1[11];
      if (v29 < v30 || v29 <= v30 && *(_DWORD *)v28 < *(_DWORD *)v27)
      {
        int v31 = *((_DWORD *)a1 + 11);
        uint64_t v32 = *v27;
        int v33 = *((_DWORD *)a2 - 1);
        *float v27 = *(void *)v28;
        *((_DWORD *)a1 + 11) = v33;
        *(void *)__int16 v28 = v32;
        *((_DWORD *)a2 - 1) = v31;
        float v34 = a1[11];
        float v35 = a1[8];
        if (v34 < v35 || v34 <= v35 && *(_DWORD *)v27 < *(_DWORD *)v26)
        {
          int v36 = *((_DWORD *)a1 + 8);
          uint64_t v37 = *v26;
          *unint64_t v26 = *v27;
          a1[8] = a1[11];
          *float v27 = v37;
          *((_DWORD *)a1 + 11) = v36;
          float v38 = a1[8];
          float v39 = a1[5];
          if (v38 < v39 || v38 <= v39 && *(_DWORD *)v26 < *(_DWORD *)v25)
          {
            int v40 = *((_DWORD *)a1 + 5);
            uint64_t v41 = *v25;
            *float v25 = *v26;
            a1[5] = a1[8];
            *unint64_t v26 = v41;
            *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v40;
            float v42 = a1[5];
            float v43 = a1[2];
            if (v42 < v43 || v42 <= v43 && *((_DWORD *)a1 + 3) < *(_DWORD *)a1)
            {
              int v44 = *((_DWORD *)a1 + 2);
              uint64_t v45 = *(void *)a1;
              *(void *)a1 = *v25;
              a1[2] = a1[5];
              *float v25 = v45;
              *((_DWORD *)a1 + 5) = v44;
            }
          }
        }
      }
      return 1;
    default:
      int v12 = a1 + 6;
      float v13 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    float v16 = v13[2];
    float v17 = v12[2];
    if (v16 < v17) {
      break;
    }
    if (v16 <= v17)
    {
      unsigned int v18 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12) {
        goto LABEL_10;
      }
    }
LABEL_20:
    int v12 = v13;
    v14 += 12;
    v13 += 3;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v18 = *(_DWORD *)v13;
LABEL_10:
  int v19 = *((_DWORD *)v13 + 1);
  *(void *)float v13 = *(void *)v12;
  v13[2] = v12[2];
  uint64_t v20 = (uint64_t)a1;
  if (v12 != a1)
  {
    uint64_t v21 = v14;
    while (1)
    {
      float v22 = (char *)a1 + v21;
      int v23 = (unsigned int *)((char *)a1 + v21 + 12);
      float v24 = *(float *)((char *)a1 + v21 + 20);
      if (v16 >= v24)
      {
        if (v16 > v24)
        {
          uint64_t v20 = (uint64_t)a1 + v21 + 24;
          goto LABEL_19;
        }
        if (v18 >= *v23) {
          break;
        }
      }
      v12 -= 3;
      *((void *)v22 + 3) = *(void *)v23;
      *((float *)v22 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(float *)((char *)a1 + v21 + 20);
      v21 -= 12;
      if (v21 == -24)
      {
        uint64_t v20 = (uint64_t)a1;
        goto LABEL_19;
      }
    }
    uint64_t v20 = (uint64_t)v12;
  }
LABEL_19:
  *(_DWORD *)uint64_t v20 = v18;
  *(_DWORD *)(v20 + 4) = v19;
  *(float *)(v20 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
  if (++v15 != 8) {
    goto LABEL_20;
  }
  return v13 + 3 == a2;
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::anonymous namespace'::PointProjection *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float v9 = *(float *)(a4 + 8);
  float v10 = a3[2];
  if (v9 < v10 || v9 <= v10 && *(_DWORD *)a4 < *(_DWORD *)a3)
  {
    int v11 = *((_DWORD *)a3 + 2);
    uint64_t v12 = *(void *)a3;
    int v13 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *((_DWORD *)a3 + 2) = v13;
    *(void *)a4 = v12;
    *(_DWORD *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
    float v14 = a3[2];
    float v15 = a2[2];
    if (v14 < v15 || v14 <= v15 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      int v16 = *((_DWORD *)a2 + 2);
      uint64_t v17 = *(void *)a2;
      int v18 = *((_DWORD *)a3 + 2);
      *(void *)a2 = *(void *)a3;
      *((_DWORD *)a2 + 2) = v18;
      *(void *)a3 = v17;
      *((_DWORD *)a3 + 2) = v16;
      float v19 = a2[2];
      float v20 = a1[2];
      if (v19 < v20 || v19 <= v20 && *(_DWORD *)a2 < *(_DWORD *)a1)
      {
        int v21 = *((_DWORD *)a1 + 2);
        uint64_t v22 = *(void *)a1;
        int v23 = *((_DWORD *)a2 + 2);
        *(void *)a1 = *(void *)a2;
        *((_DWORD *)a1 + 2) = v23;
        *(void *)a2 = v22;
        *((_DWORD *)a2 + 2) = v21;
      }
    }
  }
  return result;
}

uint64_t re::internal::addAndCopyVertexAttributes(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  unint64_t v6 = *a3;
  re::DynamicArray<float>::resize((uint64_t)v17, v6);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v18;
    uint64_t v9 = v20;
    do
    {
      if (v8 == v7)
      {
        uint64_t v21 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        int v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 789;
        __int16 v26 = 2048;
        uint64_t v27 = v8;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      ++v7;
    }
    while (v6 != v7);
  }
  int v10 = *(_DWORD *)(a1 + 184);
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = (re::internal::GeomAttributeContainer *)(a1 + 160);
    int v13 = (re::internal::GeomAttributeManager *)(a3 + 12);
    do
    {
      uint64_t v14 = re::internal::GeomAttributeContainer::attributeByIndex(v12, v11);
      float v15 = re::internal::GeomAttributeManager::addAttribute(v13, *(char **)(v14 + 8), 1, *(unsigned __int8 *)(v14 + 17));
      if (v6 && v15) {
        (*(void (**)(uint64_t, re::GeomAttribute *, unint64_t, void, uint64_t))(*(void *)v14 + 40))(v14, v15, v6, *a2, v20);
      }
      ++v11;
    }
    while (v10 != v11);
  }
  uint64_t result = v17[0];
  if (v17[0])
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::addAndCopyFaceAttributes(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  v17[0] = 0;
  int v19 = 0;
  uint64_t v6 = *(void *)(a3 + 24);
  re::DynamicArray<float>::resize((uint64_t)v17, v6);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v18;
    uint64_t v9 = v20;
    do
    {
      if (v8 == v7)
      {
        uint64_t v21 = 0;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v22 = 136315906;
        int v23 = "operator[]";
        __int16 v24 = 1024;
        int v25 = 789;
        __int16 v26 = 2048;
        uint64_t v27 = v8;
        __int16 v28 = 2048;
        uint64_t v29 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      ++v7;
    }
    while (v6 != v7);
  }
  int v10 = *(_DWORD *)(a1 + 296);
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = (re::internal::GeomAttributeContainer *)(a1 + 272);
    int v13 = (re::internal::GeomAttributeManager *)(a3 + 48);
    do
    {
      uint64_t v14 = re::internal::GeomAttributeContainer::attributeByIndex(v12, v11);
      float v15 = re::internal::GeomAttributeManager::addAttribute(v13, *(char **)(v14 + 8), 2, *(unsigned __int8 *)(v14 + 17));
      if (v6 && v15) {
        (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, void, uint64_t))(*(void *)v14 + 40))(v14, v15, v6, *a2, v20);
      }
      ++v11;
    }
    while (v10 != v11);
  }
  uint64_t result = v17[0];
  if (v17[0])
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v17[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::addAndCopyFaceVaryingAttributes(uint64_t result, void *a2, _anonymous_namespace_ *a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  int v39 = *(_DWORD *)(result + 408);
  if (!v39) {
    return result;
  }
  unsigned int v5 = 0;
  int v40 = (re::internal::GeomAttributeContainer *)(result + 384);
  unsigned int v6 = *((_DWORD *)a3 + 6);
  do
  {
    unsigned int v42 = v5;
    uint64_t v7 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v40, v5);
    unint64_t v8 = (*(uint64_t (**)(re::internal *))(*(void *)v7 + 16))(v7);
    float v43 = v7;
    unint64_t v10 = re::internal::accessFaceVaryingAttributeSubmesh(v7, v9);
    uint64_t v59 = 0;
    v56[1] = 0;
    unint64_t v57 = 0;
    v56[0] = 0;
    uint64_t v11 = v8;
    int v58 = 0;
    re::DynamicArray<unsigned int>::resize(v56, v8, &re::kInvalidMeshIndex);
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    memset(v53, 0, sizeof(v53));
    int v54 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    int v48 = 0;
    int v51 = 0;
    LODWORD(v60) = 0;
    uint64_t v13 = 0;
    if (!v6) {
      goto LABEL_50;
    }
    unsigned int v14 = 0;
    uint64_t v7 = (re::internal *)(v10 + 144);
    do
    {
      unint64_t v15 = v14;
      unint64_t v16 = a2[1];
      if (v16 <= v14) {
        goto LABEL_83;
      }
      unint64_t v17 = *(unsigned int *)(*a2 + 4 * v14);
      LODWORD(v77) = v17;
      int v18 = *(unsigned __int8 *)(v10 + 140);
      if (v18 == 2)
      {
        uint64_t v19 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v10 + 144), (unsigned int *)&v77);
        if (v19 == -1) {
          goto LABEL_49;
        }
        uint64_t v20 = (_DWORD *)(*(void *)(v10 + 152) + 8 * v19 + 4);
LABEL_15:
        if (*v20 == -1) {
          goto LABEL_49;
        }
        unint64_t v15 = v60;
        unint64_t v16 = a2[1];
        goto LABEL_17;
      }
      if (v18 == 1)
      {
        if (*(void *)(v10 + 160) <= v17) {
          goto LABEL_49;
        }
        uint64_t v20 = (_DWORD *)(*(void *)(v10 + 176) + 4 * v17);
        goto LABEL_15;
      }
      if (*(unsigned char *)(v10 + 140)) {
        goto LABEL_89;
      }
      if (*(_DWORD *)v7 <= v17) {
        goto LABEL_49;
      }
LABEL_17:
      if (v16 <= v15) {
        goto LABEL_85;
      }
      unint64_t v21 = *(unsigned int *)(*a2 + 4 * v15);
      LODWORD(v77) = v21;
      int v22 = *(unsigned __int8 *)(v10 + 140);
      if (v22 == 2)
      {
        uint64_t v23 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v10 + 144), (unsigned int *)&v77);
        if (v23 == -1) {
          goto LABEL_28;
        }
        unint64_t v8 = *(unsigned int *)(*(void *)(v10 + 152) + 8 * v23 + 4);
      }
      else
      {
        if (v22 != 1)
        {
          if (*(unsigned char *)(v10 + 140)) {
            goto LABEL_90;
          }
          if (*(unsigned int *)v7 <= v21) {
            unint64_t v8 = 0xFFFFFFFFLL;
          }
          else {
            unint64_t v8 = v21;
          }
          goto LABEL_29;
        }
        if (*(void *)(v10 + 160) <= v21)
        {
LABEL_28:
          unint64_t v8 = 0xFFFFFFFFLL;
          goto LABEL_29;
        }
        unint64_t v8 = *(unsigned int *)(*(void *)(v10 + 176) + 4 * v21);
      }
LABEL_29:
      *(void *)&long long v44 = -1;
      *((void *)&v44 + 1) = -1;
      unint64_t v3 = *(void *)(v10 + 24);
      if (v3 <= v8) {
        goto LABEL_86;
      }
      uint64_t v24 = 0;
      long long v61 = *(_OWORD *)(*(void *)(v10 + 40) + 16 * v8);
      uint64_t v25 = 3;
      if (HIDWORD(v61) != -1) {
        uint64_t v25 = 4;
      }
      unint64_t v8 = v57;
      uint64_t v26 = v59;
      do
      {
        unint64_t v3 = *((unsigned int *)&v61 + v24);
        if (v8 <= v3)
        {
          *(void *)float v70 = 0;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v77 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v65 = 136315906;
          *(void *)uint64_t v66 = "operator[]";
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = 789;
          *(_WORD *)&v66[14] = 2048;
          *(void *)&v66[16] = v3;
          __int16 v67 = 2048;
          unint64_t v68 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_83:
          re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v16);
          _os_crash();
          __break(1u);
          goto LABEL_84;
        }
        int v27 = *(_DWORD *)(v26 + 4 * v3);
        if (v27 == -1)
        {
          *(_DWORD *)(v26 + 4 * v3) = v13;
          int v27 = v13;
          uint64_t v13 = (v13 + 1);
        }
        *((_DWORD *)&v44 + v24++) = v27;
      }
      while (v25 != v24);
      __int16 v28 = (_anonymous_namespace_ *)re::DynamicArray<int>::add(v53, &v60);
      unint64_t v29 = v50;
      if (v50 >= v49)
      {
        unint64_t v8 = v50 + 1;
        if (v49 < v50 + 1)
        {
          if (v48)
          {
            unint64_t v30 = 8;
            if (v49) {
              unint64_t v30 = 2 * v49;
            }
            if (v30 <= v8) {
              unint64_t v31 = v50 + 1;
            }
            else {
              unint64_t v31 = v30;
            }
            re::DynamicArray<re::BlendNode>::setCapacity(&v48, v31);
          }
          else
          {
            re::DynamicArray<re::BlendNode>::setCapacity(&v48, v8);
            ++v51;
          }
        }
        unint64_t v29 = v50;
      }
      *(_OWORD *)(v52 + 16 * v29) = v44;
      ++v50;
      ++v51;
LABEL_49:
      unsigned int v14 = v60 + 1;
      LODWORD(v60) = v14;
    }
    while (v14 < v6);
LABEL_50:
    int v65 = v13;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v66[4], (uint64_t *)&v48);
    if (!*(void *)&v66[12]) {
      re::DynamicArray<re::BlendNode>::setCapacity(&v66[4], 1uLL);
    }
    uint64_t v32 = re::internal::GeomBaseMesh::addFaceVaryingAttribute(a3, *((const char **)v43 + 1), *((unsigned __int8 *)v43 + 17), (uint64_t)&v65, (uint64_t)v53);
    if (v32 && v13)
    {
      uint64_t v38 = v32;
      uint64_t v64 = 0;
      unint64_t v62 = 0;
      long long v61 = 0uLL;
      int v63 = 0;
      uint64_t v47 = 0;
      unint64_t v45 = 0;
      long long v44 = 0uLL;
      int v46 = 0;
      re::DynamicArray<float>::resize((uint64_t)&v61, v13);
      re::DynamicArray<float>::resize((uint64_t)&v44, v13);
      uint64_t v33 = v64;
      uint64_t v34 = v47;
      if (v11)
      {
        uint64_t v35 = 0;
        unsigned int v36 = 0;
        unint64_t v8 = v57;
        uint64_t v37 = v59;
        unint64_t v10 = v62;
        unint64_t v3 = v45;
        while (v8 != v35)
        {
          if (*(_DWORD *)(v37 + 4 * v35) != -1)
          {
            uint64_t v7 = (re::internal *)v36;
            if (v10 <= v36) {
              goto LABEL_87;
            }
            *(_DWORD *)(v33 + 4 * v36) = v35;
            if (v3 <= v36) {
              goto LABEL_88;
            }
            *(_DWORD *)(v34 + 4 * v36++) = *(_DWORD *)(v37 + 4 * v35);
          }
          if (v11 == ++v35) {
            goto LABEL_62;
          }
        }
LABEL_84:
        uint64_t v60 = 0;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v77 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        __int16 v71 = 1024;
        int v72 = 789;
        __int16 v73 = 2048;
        float v74 = (re::internal *)v8;
        __int16 v75 = 2048;
        unint64_t v76 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, v16);
        _os_crash();
        __break(1u);
LABEL_86:
        *(void *)&long long v61 = 0;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v77 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v65 = 136315906;
        *(void *)uint64_t v66 = "operator[]";
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = 797;
        *(_WORD *)&v66[14] = 2048;
        *(void *)&v66[16] = v8;
        __int16 v67 = 2048;
        unint64_t v68 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        uint64_t v60 = 0;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v77 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        __int16 v71 = 1024;
        int v72 = 789;
        __int16 v73 = 2048;
        float v74 = v7;
        __int16 v75 = 2048;
        unint64_t v76 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        uint64_t v60 = 0;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v77 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v70 = 136315906;
        *(void *)&v70[4] = "operator[]";
        __int16 v71 = 1024;
        int v72 = 789;
        __int16 v73 = 2048;
        float v74 = v7;
        __int16 v75 = 2048;
        unint64_t v76 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        _os_crash();
        __break(1u);
LABEL_90:
        re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
        _os_crash();
        __break(1u);
      }
LABEL_62:
      (*(void (**)(re::internal *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v43 + 40))(v43, v38, v13, v33, v34);
      if ((void)v44 && v47) {
        (*(void (**)(void))(*(void *)v44 + 40))();
      }
      if ((void)v61 && v64) {
        (*(void (**)(void))(*(void *)v61 + 40))();
      }
    }
    if (*(void *)&v66[4] && v69) {
      (*(void (**)(void))(**(void **)&v66[4] + 40))();
    }
    if (v48 && v52) {
      (*(void (**)(void))(*v48 + 40))();
    }
    if (v53[0] && v55) {
      (*(void (**)(void))(*(void *)v53[0] + 40))();
    }
    uint64_t result = v56[0];
    if (v56[0])
    {
      if (v59) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v56[0] + 40))();
      }
    }
    unsigned int v5 = v42 + 1;
  }
  while (v42 + 1 != v39);
  return result;
}

re::GeomAttribute *re::internal::addAndCopyAttributeValues(uint64_t a1, _anonymous_namespace_ *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a3 == 3)
  {
    uint64_t v19 = 0;
    v16[1] = 0;
    uint64_t v17 = 0;
    v16[0] = 0;
    int v18 = 0;
    re::DynamicArray<float>::resize((uint64_t)v16, *(unsigned int *)(a1 + 24));
    uint64_t v5 = *(unsigned int *)(a1 + 24);
    uint64_t v6 = v17;
    if (*(_DWORD *)(a1 + 24))
    {
      uint64_t v7 = 0;
      uint64_t v8 = v19;
      do
      {
        if (v6 == v7)
        {
          uint64_t v20 = 0;
          memset(v29, 0, sizeof(v29));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v21 = 136315906;
          int v22 = "operator[]";
          __int16 v23 = 1024;
          int v24 = 789;
          __int16 v25 = 2048;
          uint64_t v26 = v6;
          __int16 v27 = 2048;
          uint64_t v28 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v8 + 4 * v7) = v7;
        ++v7;
      }
      while (v5 != v7);
    }
    *(void *)&v29[0] = v19;
    *((void *)&v29[0] + 1) = v6;
    re::internal::addAndCopyFaceVaryingAttributes(a1, v29, a2);
    uint64_t result = (re::GeomAttribute *)v16[0];
    if (v16[0])
    {
      if (v19) {
        return (re::GeomAttribute *)(*(uint64_t (**)(void))(*(void *)v16[0] + 40))();
      }
    }
  }
  else
  {
    int v10 = a3;
    uint64_t v11 = (re::internal::GeomAttributeContainer *)(a1 + 48);
    uint64_t result = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeCount(a1 + 48, a3);
    if (result)
    {
      int v12 = (int)result;
      uint64_t v13 = 0;
      unsigned int v14 = (_anonymous_namespace_ *)((char *)a2 + 48);
      do
      {
        uint64_t v15 = re::internal::GeomAttributeManager::attributeByIndex(v11, v13, v10);
        uint64_t result = re::internal::GeomAttributeManager::addAttribute(v14, *(char **)(v15 + 8), v10, *(unsigned __int8 *)(v15 + 17));
        if (result) {
          uint64_t result = (re::GeomAttribute *)re::GeomAttribute::copyValues((re::GeomAttribute *)v15, result);
        }
        uint64_t v13 = (v13 + 1);
      }
      while (v12 != v13);
    }
  }
  return result;
}

void re::internal::computeVertexCacheCoherentFaceOrdering(re::internal *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v8 = (unint64_t)&v120;
  unint64_t v9 = (unint64_t)&v110;
  uint64_t v133 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v108, 4514, *((unsigned int *)this + 4));
  char v107 = -1;
  unint64_t v10 = *((unsigned int *)this + 10);
  unint64_t v11 = *((unsigned int *)this + 4);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v106 = 0;
  v103[1] = 0;
  unsigned int v104 = 0;
  uint64_t v102 = 0;
  v103[0] = 0;
  int v105 = 0;
  v99[1] = 0;
  float v100 = 0;
  uint64_t v98 = 0;
  v99[0] = 0;
  int v101 = 0;
  v95[1] = 0;
  int64_t v96 = 0;
  v95[0] = 0;
  int v97 = 0;
  re::computeVertexFaceConnectivity((unint64_t)this, (uint64_t)v103, (unint64_t)v99);
  re::DynamicArray<float>::resize((uint64_t)v95, v11);
  uint64_t v73 = a2;
  re::DynamicArray<unsigned int>::resize((void *)a2, v10, &re::kInvalidMeshIndex);
  if (v11)
  {
    int v12 = 0;
    int v13 = 0;
    unint64_t v14 = (unint64_t)v96;
    uint64_t v15 = v98;
    unint64_t v3 = (unint64_t)v100;
    uint64_t v16 = v102;
    while (1)
    {
      if ((_DWORD *)v14 == v12) {
        goto LABEL_150;
      }
      *(_DWORD *)(v15 + 4 * (void)v12) = v13;
      if ((_DWORD *)v3 == v12) {
        break;
      }
      int v13 = *(_DWORD *)(v16 + 4 * (void)v12);
      int v12 = (_DWORD *)((char *)v12 + 1);
      if ((_DWORD *)v11 == v12) {
        goto LABEL_6;
      }
    }
LABEL_151:
    v91[0] = 0;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 136315906;
    *(void *)(v8 + 52) = "operator[]";
    WORD6(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 1024;
    *(_DWORD *)(v8 + 62) = 789;
    WORD1(v129) = 2048;
    *(void *)(v8 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v3;
    WORD6(v129) = 2048;
    *(void *)(v8 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_152:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v14;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_153;
  }
LABEL_6:
  uint64_t v94 = 0;
  v91[1] = 0;
  __int16 v92 = 0;
  uint64_t v90 = 0;
  v91[0] = 0;
  int v93 = 0;
  v87[1] = 0;
  int v88 = 0;
  uint64_t v86 = 0;
  v87[0] = 0;
  int v89 = 0;
  v83[1] = 0;
  unint64_t v84 = 0;
  unint64_t v82 = 0;
  v83[0] = 0;
  int v85 = 0;
  v79[1] = 0;
  long long v80 = 0;
  uint64_t v78 = 0;
  v79[0] = 0;
  int v81 = 0;
  v75[1] = 0;
  unint64_t v76 = 0;
  v75[0] = 0;
  uint64_t v17 = 8;
  int v77 = 0;
  do
  {
    int v18 = &v111[v17];
    *int v18 = 0;
    v18[1] = 0;
    v17 += 24;
  }
  while (v17 != 896);
  int v114 = v111;
  uint64_t v115 = (unsigned int *)v113;
  uint64_t v112 = v113;
  v113[2] = v111;
  int64x2_t v19 = (int64x2_t)xmmword_234361D20;
  uint64_t v20 = v117;
  uint64_t v21 = 0x1FFFFFFFFFFFFF94;
  uint64x2_t v22 = (uint64x2_t)vdupq_n_s64(0x23uLL);
  int64x2_t v23 = vdupq_n_s64(2uLL);
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64(v22, (uint64x2_t)v19)).u8[0]) {
      *(v20 - 1) = &v116[v21 * 8 + 8];
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x23uLL), *(uint64x2_t *)&v19)).i32[1]) {
      *uint64_t v20 = &v117[v21 + 3];
    }
    int64x2_t v19 = vaddq_s64(v19, v23);
    v20 += 2;
    v21 += 6;
  }
  while (v21 * 8);
  unsigned __int8 v118 = 0;
  uint64_t v119 = 0;
  LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = -1082130432;
  re::DynamicArray<float>::resize(v91, v11, &v128);
  re::DynamicArray<unsigned char>::resize(v83, v11, &v107);
  LOBYTE(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  re::DynamicArray<unsigned char>::resize(v79, v11, &v128);
  LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  re::DynamicArray<float>::resize(v87, v10, &v128);
  LOBYTE(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  re::DynamicArray<unsigned char>::resize(v75, v10, &v128);
  if (v10)
  {
    unint64_t v14 = 0;
    do
    {
      unint64_t v3 = *((void *)this + 5);
      if (v3 <= v14) {
        goto LABEL_155;
      }
      uint64_t v25 = 0;
      long long v110 = *(_OWORD *)(*((void *)this + 7) + 16 * v14);
      if (HIDWORD(v110) == -1) {
        uint64_t v26 = 3;
      }
      else {
        uint64_t v26 = 4;
      }
      do
      {
        unint64_t v3 = *(unsigned int *)&v111[4 * v25 - 16];
        unint64_t v27 = (unint64_t)v80;
        if ((unint64_t)v80 <= v3)
        {
          uint64_t v109 = 0;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v129 = 0u;
          long long v130 = 0u;
          long long v128 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v120 = 136315906;
          uint64_t v121 = "operator[]";
          __int16 v122 = 1024;
          int v123 = 789;
          __int16 v124 = 2048;
          unint64_t v125 = v3;
          __int16 v126 = 2048;
          unint64_t v127 = v27;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_143:
          uint64_t v109 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v120 = 136315906;
          *(void *)(v5 + 1) = "operator[]";
          __int16 v122 = 1024;
          *(int *)((char *)v5 + 14) = 789;
          __int16 v124 = 2048;
          *(void *)(v5 + 5) = v27;
          __int16 v126 = 2048;
          *(void *)((char *)v5 + 30) = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_144:
          uint64_t v109 = 0;
          *((_OWORD *)v5 + 6) = 0u;
          *((_OWORD *)v5 + 7) = 0u;
          *((_OWORD *)v5 + 4) = 0u;
          *((_OWORD *)v5 + 5) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v120 = 136315906;
          *(void *)(v5 + 1) = "operator[]";
          __int16 v122 = 1024;
          *(int *)((char *)v5 + 14) = 789;
          __int16 v124 = 2048;
          *(void *)(v5 + 5) = v4;
          __int16 v126 = 2048;
          *(void *)((char *)v5 + 30) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_145;
        }
        ++*(unsigned char *)(v82 + v3);
        ++v25;
      }
      while (v26 != v25);
    }
    while (++v14 != v10);
  }
  if (v11)
  {
    uint64_t v28 = 0;
    unint64_t v14 = (unint64_t)v80;
    unint64_t v9 = v82;
    unint64_t v3 = (unint64_t)v92;
    uint64_t v29 = v94;
    while ((_DWORD *)v14 != v28)
    {
      if (*((unsigned char *)v28 + v9)) {
        float v30 = (float)(powf((float)*((unsigned __int8 *)v28 + v9), -0.5) * 2.0) + 0.0;
      }
      else {
        float v30 = -1.0;
      }
      if ((_DWORD *)v3 == v28) {
        goto LABEL_154;
      }
      *(float *)(v29 + 4 * (void)v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v30;
      uint64_t v28 = (_DWORD *)((char *)v28 + 1);
      if ((_DWORD *)v11 == v28) {
        goto LABEL_31;
      }
    }
LABEL_153:
    *(void *)&long long v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    *(void *)(v8 + 4) = "operator[]";
    __int16 v122 = 1024;
    *(_DWORD *)(v8 + 14) = 789;
    __int16 v124 = 2048;
    *(void *)(v8 + 20) = v14;
    __int16 v126 = 2048;
    *(void *)(v8 + 30) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    *(void *)&long long v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    *(void *)(v8 + 4) = "operator[]";
    __int16 v122 = 1024;
    *(_DWORD *)(v8 + 14) = 789;
    __int16 v124 = 2048;
    *(void *)(v8 + 20) = v3;
    __int16 v126 = 2048;
    *(void *)(v8 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_155:
    *(void *)&long long v110 = 0;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    *(void *)(v8 + 4) = "operator[]";
    __int16 v122 = 1024;
    *(_DWORD *)(v8 + 14) = 797;
    __int16 v124 = 2048;
    *(void *)(v8 + 20) = v14;
    __int16 v126 = 2048;
    *(void *)(v8 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v14;
    __int16 v126 = 2048;
    unint64_t v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    *(void *)&long long v110 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    *(void *)(v5 + 1) = "operator[]";
    __int16 v122 = 1024;
    *(int *)((char *)v5 + 14) = 797;
    __int16 v124 = 2048;
    *(void *)(v5 + 5) = v11;
    __int16 v126 = 2048;
    *(void *)((char *)v5 + 30) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v14;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v9;
    __int16 v126 = 2048;
    unint64_t v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v9;
    __int16 v126 = 2048;
    unint64_t v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v9;
    __int16 v126 = 2048;
    unint64_t v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v9;
    __int16 v126 = 2048;
    unint64_t v127 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_163:
    uint64_t v109 = 0;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    *(void *)(v5 + 1) = "operator[]";
    __int16 v122 = 1024;
    *(int *)((char *)v5 + 14) = 789;
    __int16 v124 = 2048;
    *(void *)(v5 + 5) = v14;
    __int16 v126 = 2048;
    *(void *)((char *)v5 + 30) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_164:
    uint64_t v109 = 0;
    unint64_t v39 = (unint64_t)&v120;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v11;
    __int16 v126 = 2048;
    unint64_t v127 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_165:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v39;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_166:
    uint64_t v109 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v39;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_167:
    *(void *)&long long v110 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v11;
    __int16 v126 = 2048;
    unint64_t v127 = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_168:
    *(void *)&long long v110 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 789;
    __int16 v124 = 2048;
    unint64_t v125 = v39;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    *(void *)&long long v110 = 0;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v120 = 136315906;
    uint64_t v121 = "operator[]";
    __int16 v122 = 1024;
    int v123 = 797;
    __int16 v124 = 2048;
    unint64_t v125 = v39;
    __int16 v126 = 2048;
    unint64_t v127 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_31:
  if (!v10) {
    goto LABEL_117;
  }
  unint64_t v4 = 0;
  unint64_t v11 = *((void *)this + 5);
  uint64_t v31 = *((void *)this + 7);
  unint64_t v8 = (unint64_t)v92;
  unint64_t v9 = 0xFFFFFFFFLL;
  float v32 = -INFINITY;
  unint64_t v14 = (unint64_t)v88;
  uint64_t v33 = v90;
  uint64_t v5 = &v120;
  do
  {
    if (v4 == v11) {
      goto LABEL_157;
    }
    uint64_t v34 = 0;
    long long v110 = *(_OWORD *)(v31 + 16 * v4);
    uint64_t v35 = v94;
    unint64_t v3 = (unint64_t)v88;
    uint64_t v36 = v90;
    if (HIDWORD(v110) == -1) {
      uint64_t v37 = 3;
    }
    else {
      uint64_t v37 = 4;
    }
    do
    {
      unint64_t v27 = *(unsigned int *)&v111[4 * v34 - 16];
      if (v8 <= v27) {
        goto LABEL_143;
      }
      if (v3 <= v4) {
        goto LABEL_144;
      }
      *(float *)(v36 + 4 * v4) = *(float *)(v35 + 4 * v27) + *(float *)(v36 + 4 * v4);
      ++v34;
    }
    while (v37 != v34);
    if (v4 == v14) {
      goto LABEL_163;
    }
    float v38 = *(float *)(v33 + 4 * v4);
    if (v38 <= v32) {
      unint64_t v9 = v9;
    }
    else {
      unint64_t v9 = v4;
    }
    if (v38 > v32) {
      float v32 = *(float *)(v33 + 4 * v4);
    }
    ++v4;
  }
  while (v4 != v10);
  unint64_t v11 = 0;
  uint64_t v5 = (int *)&v110;
  do
  {
    unint64_t v39 = *(void *)(v73 + 16);
    if (v39 <= v11) {
      goto LABEL_167;
    }
    unint64_t v72 = v11;
    *(_DWORD *)(*(void *)(v73 + 32) + 4 * v11) = v9;
    unint64_t v39 = v9;
    unint64_t v11 = v76;
    if (v76 <= v9) {
      goto LABEL_168;
    }
    *(unsigned char *)(v78 + v9) = 1;
    unint64_t v11 = *((void *)this + 5);
    if (v11 <= v9) {
      goto LABEL_169;
    }
    unint64_t v9 = 0;
    long long v110 = *(_OWORD *)(*((void *)this + 7) + 16 * v39);
    if (HIDWORD(v110) == -1) {
      uint64_t v40 = 3;
    }
    else {
      uint64_t v40 = 4;
    }
    do
    {
      ++HIDWORD(v119);
      uint64_t v41 = (unsigned int *)*((void *)v114 + 1);
      *(void *)&long long v128 = v41;
      unsigned int v42 = v115;
      if (v41 == v115) {
        goto LABEL_61;
      }
      int v43 = *(_DWORD *)&v111[4 * v9 - 16];
      while (*v41 != v43)
      {
        uint64_t v41 = (unsigned int *)v128;
        if ((unsigned int *)v128 == v42)
        {
          uint64_t v41 = v42;
          break;
        }
      }
      if (v41 == v115)
      {
LABEL_61:
        LODWORD(v119) = v119 + 1;
        if (v118 == 35)
        {
          uint64_t v41 = (unsigned int *)*((void *)v41 + 2);
          uint64_t v48 = *((void *)v41 + 1);
          uint64_t v47 = *((void *)v41 + 2);
          *(void *)(v47 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v48;
          *(void *)(v48 + 16) = v47;
          v117[33] = v41;
          char v46 = 35;
        }
        else
        {
          uint64_t v41 = *(unsigned int **)&v116[8 * v118];
          char v46 = v118 + 1;
        }
      }
      else
      {
        uint64_t v45 = *((void *)v41 + 1);
        uint64_t v44 = *((void *)v41 + 2);
        *(void *)(v44 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v45;
        *(void *)(v45 + 16) = v44;
        char v46 = v118;
        *(void *)&v116[8 * (v118 - 1)] = v41;
      }
      unint64_t v49 = v114;
      uint64_t v50 = *((void *)v114 + 1);
      unsigned __int8 v118 = v46;
      *uint64_t v41 = *(_DWORD *)&v111[4 * v9 - 16];
      *((void *)v41 + 1) = v50;
      *((void *)v41 + 2) = v49;
      *(void *)(v50 + 16) = v41;
      *((void *)v49 + 1) = v41;
      unint64_t v14 = *(unsigned int *)&v111[4 * v9 - 16];
      unint64_t v11 = (unint64_t)v80;
      if ((unint64_t)v80 <= v14) {
        goto LABEL_152;
      }
      --*(unsigned char *)(v82 + v14);
      ++v9;
    }
    while (v9 != v40);
    int v51 = (unsigned int *)*((void *)v114 + 1);
    float v74 = v51;
    uint64_t v52 = v115;
    while (v51 != v52)
    {
      unint64_t v14 = *v51;
      unint64_t v11 = v84;
      if (v84 <= v14) {
        goto LABEL_158;
      }
      *(unsigned char *)(v86 + v14) = 0;
      unint64_t v9 = *v51;
      unint64_t v14 = (unint64_t)v92;
      if ((unint64_t)v92 <= v9) {
        goto LABEL_159;
      }
      unint64_t v14 = (unint64_t)v80;
      if ((unint64_t)v80 <= v9) {
        goto LABEL_160;
      }
      uint64_t v53 = v94;
      float v54 = *(float *)(v94 + 4 * v9);
      if (*(unsigned char *)(v82 + v9)) {
        float v55 = (float)(powf((float)*(unsigned __int8 *)(v82 + v9), -0.5) * 2.0) + 0.75;
      }
      else {
        float v55 = -1.0;
      }
      *(float *)(v53 + 4 * v9) = v55;
      unint64_t v14 = (unint64_t)v96;
      if ((unint64_t)v96 <= v9) {
        goto LABEL_161;
      }
      unint64_t v14 = (unint64_t)v100;
      if ((unint64_t)v100 <= v9) {
        goto LABEL_162;
      }
      unint64_t v56 = *(unsigned int *)(v98 + 4 * v9);
      uint64_t v57 = *(unsigned int *)(v102 + 4 * v9);
      if (v56 < v57)
      {
        float v58 = v55 - v54;
        unint64_t v14 = (unint64_t)v104;
        unint64_t v11 = (unint64_t)v88;
        uint64_t v59 = v90;
        if ((unint64_t)v104 <= v56) {
          unint64_t v3 = *(unsigned int *)(v98 + 4 * v9);
        }
        else {
          unint64_t v3 = (unint64_t)v104;
        }
        uint64_t v60 = (unsigned int *)(v106 + 4 * v56);
        uint64_t v61 = v57 - v56;
        unint64_t v62 = v3 - v56;
        while (v62)
        {
          unint64_t v27 = *v60;
          if (v11 <= v27) {
            goto LABEL_146;
          }
          *(float *)(v59 + 4 * v27) = v58 + *(float *)(v59 + 4 * v27);
          ++v60;
          --v62;
          if (!--v61) {
            goto LABEL_84;
          }
        }
LABEL_145:
        uint64_t v109 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v120 = 136315906;
        uint64_t v121 = "operator[]";
        __int16 v122 = 1024;
        int v123 = 789;
        __int16 v124 = 2048;
        unint64_t v125 = v3;
        __int16 v126 = 2048;
        unint64_t v127 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        uint64_t v109 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v120 = 136315906;
        uint64_t v121 = "operator[]";
        __int16 v122 = 1024;
        int v123 = 789;
        __int16 v124 = 2048;
        unint64_t v125 = v27;
        __int16 v126 = 2048;
        unint64_t v127 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        uint64_t v109 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v120 = 136315906;
        uint64_t v121 = "operator[]";
        __int16 v122 = 1024;
        int v123 = 789;
        __int16 v124 = 2048;
        unint64_t v125 = v27;
        __int16 v126 = 2048;
        unint64_t v127 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        uint64_t v109 = 0;
        unint64_t v14 = (unint64_t)&v120;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v120 = 136315906;
        uint64_t v121 = "operator[]";
        __int16 v122 = 1024;
        int v123 = 789;
        __int16 v124 = 2048;
        unint64_t v125 = v8;
        __int16 v126 = 2048;
        unint64_t v127 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        uint64_t v109 = 0;
        long long v131 = 0u;
        long long v132 = 0u;
        long long v129 = 0u;
        long long v130 = 0u;
        long long v128 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v120 = 136315906;
        uint64_t v121 = "operator[]";
        __int16 v122 = 1024;
        int v123 = 789;
        __int16 v124 = 2048;
        unint64_t v125 = v8;
        __int16 v126 = 2048;
        unint64_t v127 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        v91[0] = 0;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 136315906;
        *(void *)(v8 + 52) = "operator[]";
        WORD6(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 1024;
        *(_DWORD *)(v8 + 62) = 789;
        WORD1(v129) = 2048;
        *(void *)(v8 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
        WORD6(v129) = 2048;
        *(void *)(v8 + 7re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_151;
      }
LABEL_84:
      int v51 = v74;
    }
    if (!v118 || (int v63 = (unsigned int *)*((void *)v114 + 1), v74 = v63, v64 = v115, v63 == v115))
    {
      float v65 = -INFINITY;
LABEL_109:
      unint64_t v11 = 0;
      unint64_t v14 = v76;
      unint64_t v9 = 0xFFFFFFFFLL;
      unint64_t v3 = (unint64_t)v88;
      while (v76 != v11)
      {
        if (!*(unsigned char *)(v78 + v11))
        {
          if ((unint64_t)v88 <= v11) {
            goto LABEL_164;
          }
          if (*(float *)(v90 + 4 * v11) > v65)
          {
            unint64_t v9 = v11;
            float v65 = *(float *)(v90 + 4 * v11);
          }
        }
        if (v10 == ++v11) {
          goto LABEL_116;
        }
      }
      goto LABEL_156;
    }
    unint64_t v9 = 0xFFFFFFFFLL;
    float v65 = -INFINITY;
    do
    {
      unint64_t v39 = *v63;
      unint64_t v11 = (unint64_t)v96;
      if ((unint64_t)v96 <= v39) {
        goto LABEL_165;
      }
      unint64_t v11 = (unint64_t)v100;
      if ((unint64_t)v100 <= v39) {
        goto LABEL_166;
      }
      unint64_t v66 = *(unsigned int *)(v98 + 4 * v39);
      uint64_t v67 = *(unsigned int *)(v102 + 4 * v39);
      if (v66 < v67)
      {
        unint64_t v3 = (unint64_t)v104;
        unint64_t v11 = v76;
        unint64_t v14 = (unint64_t)v88;
        if ((unint64_t)v104 <= v66) {
          unint64_t v27 = v66;
        }
        else {
          unint64_t v27 = (unint64_t)v104;
        }
        unint64_t v68 = (unsigned int *)(v106 + 4 * v66);
        uint64_t v69 = v67 - v66;
        unint64_t v70 = v27 - v66;
        while (v70)
        {
          unint64_t v8 = *v68;
          if (v76 <= v8) {
            goto LABEL_148;
          }
          if (!*(unsigned char *)(v78 + v8))
          {
            if ((unint64_t)v88 <= v8) {
              goto LABEL_149;
            }
            float v71 = *(float *)(v90 + 4 * v8);
            if (v71 <= v65) {
              unint64_t v9 = v9;
            }
            else {
              unint64_t v9 = v8;
            }
            if (v71 > v65) {
              float v65 = *(float *)(v90 + 4 * v8);
            }
          }
          ++v68;
          --v70;
          if (!--v69) {
            goto LABEL_105;
          }
        }
        goto LABEL_147;
      }
LABEL_105:
      int v63 = v74;
    }
    while (v74 != v64);
    if (v9 == -1) {
      goto LABEL_109;
    }
LABEL_116:
    unint64_t v11 = v72 + 1;
  }
  while (v72 + 1 != v10);
LABEL_117:
  if (v75[0] && v78) {
    (*(void (**)(void))(*(void *)v75[0] + 40))();
  }
  if (v79[0] && v82) {
    (*(void (**)(void))(*(void *)v79[0] + 40))();
  }
  if (v83[0] && v86) {
    (*(void (**)(void))(*(void *)v83[0] + 40))();
  }
  if (v87[0] && v90) {
    (*(void (**)(void))(*(void *)v87[0] + 40))();
  }
  if (v91[0] && v94) {
    (*(void (**)(void))(*(void *)v91[0] + 40))();
  }
  if (v95[0] && v98) {
    (*(void (**)(void))(*(void *)v95[0] + 40))();
  }
  if (v99[0] && v102) {
    (*(void (**)(void))(*(void *)v99[0] + 40))();
  }
  if (v103[0] && v106) {
    (*(void (**)(void))(*(void *)v103[0] + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v108);
}

uint64_t re::internal::anonymous namespace'::FixedPoolLinkedList<unsigned int,(unsigned char)35>::NodeIterator::operator++(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)result + 8);
  if (v2)
  {
    *(void *)uint64_t result = v2;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Incrementing past the end.", "!\"Unreachable code\"", "operator++", 45);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::internal::makeVertexCacheCoherentMesh(const char **a1@<X0>, uint64_t *a2@<X1>, re::GeomMesh *a3@<X8>)
{
  uint64_t v6 = (const re::internal::GeomBaseMesh *)(a1 + 2);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 4512, *((unsigned int *)a1 + 4));
  unint64_t v10 = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v11, v6);
  re::GeomMesh::setName((re *)&v10, *a1);
  re::internal::computeVertexCacheCoherentFaceOrdering((re::internal *)a1, (uint64_t)v9);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2, (uint64_t)v9);
  if (v9[0] && v9[4]) {
    (*(void (**)(void))(*(void *)v9[0] + 40))();
  }
  re::internal::GeomBaseTopology::reorderFaces((uint64_t)&v11, a2);
  re::internal::GeomAttributeManager::reorderFaces((uint64_t)v14, a2);
  uint64_t v7 = re::GeomMesh::GeomMesh(a3, 0);
  unint64_t v8 = (re *)re::GeomMesh::operator=((uint64_t)v7, &v11);
  re::GeomMesh::setName(v8, v10);
  re::GeomMesh::freeName((re *)&v10);
  re::GeomMesh::freeName((re *)&v10);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v14);
  if (v12 && v13) {
    (*(void (**)(void))(*(void *)v12 + 40))();
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
}

uint64_t re::internal::makeVertexCacheCoherentMesh@<X0>(const char **this@<X0>, const re::GeomMesh *a2@<X1>, re::GeomMesh *a3@<X8>)
{
  uint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  re::internal::makeVertexCacheCoherentMesh(this, v14, a3);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v8, (uint64_t)v14);
  re::GeomIndexMap::operator=((uint64_t)a2, (uint64_t)v8);
  if (!v9) {
    goto LABEL_12;
  }
  if (v9 == 2)
  {
    uint64_t v6 = v13;
    if (!v13) {
      goto LABEL_12;
    }
    if (v11) {
      uint64_t v11 = 0;
    }
    if (!v10) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v9 != 1)
  {
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  uint64_t v6 = v10;
  if (v10 && v12) {
LABEL_11:
  }
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
LABEL_12:
  uint64_t result = v14[0];
  if (v14[0])
  {
    if (v16) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v14[0] + 40))(v14[0]);
    }
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::computeIncidenceRelations(_anonymous_namespace_ *a1, unsigned int *a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a1;
  uint64_t v114 = *MEMORY[0x263EF8340];
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v4 = *((void *)a2 + 3);
  unint64_t v5 = *a2;
  int v6 = 0;
  size_t v7 = v4;
  if (v4)
  {
    uint64_t v8 = *((void *)a2 + 5);
    char v9 = (_DWORD *)(v8 + 8);
    uint64_t v10 = *((void *)a2 + 3);
    do
    {
      if (*(v9 - 2) != -1 && *(v9 - 1) != -1 && *v9 != -1 && v9[1] != -1) {
        ++v6;
      }
      v9 += 4;
      --v10;
    }
    while (v10);
    int v11 = 0;
    uint64_t v12 = (_DWORD *)(v8 + 8);
    uint64_t v13 = *((void *)a2 + 3);
    do
    {
      if (*(v12 - 2) != -1 && *(v12 - 1) != -1 && *v12 != -1 && v12[1] == -1) {
        ++v11;
      }
      v12 += 4;
      --v13;
    }
    while (v13);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v14 = (6 * v11 + 8 * v6);
  *((void *)v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)v3 + 18);
  size_t v15 = (size_t)v3 + 88;
  *((void *)v3 + 13) = 0;
  ++*((_DWORD *)v3 + 28);
  *((void *)v3 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)v3 + 38);
  *((void *)v3 + 23) = 0;
  ++*((_DWORD *)v3 + 48);
  *((void *)v3 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)v3 + 58);
  *((void *)v3 + 33) = 0;
  ++*((_DWORD *)v3 + 68);
  *((void *)v3 + 3re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  ++*((_DWORD *)v3 + 78);
  *((void *)v3 + 43) = 0;
  ++*((_DWORD *)v3 + 88);
  *((void *)v3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  ++*((_DWORD *)v3 + 98);
  size_t v16 = (size_t)v3 + 408;
  *((void *)v3 + 53) = 0;
  unint64_t v17 = (4 * v4);
  ++*((_DWORD *)v3 + 108);
  re::DynamicArray<unsigned int>::resize((void *)v3 + 46, v17, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize((void *)v3 + 51, v17, &re::kInvalidMeshIndex);
  LODWORD(v109) = 0;
  uint64_t v74 = (uint64_t)v3 + 88;
  re::DynamicArray<unsigned int>::resize((void *)v3 + 11, v5, &v109);
  LODWORD(v109) = 0;
  uint64_t v73 = (uint64_t)v3 + 128;
  re::DynamicArray<unsigned int>::resize((void *)v3 + 16, v5, &v109);
  unint64_t v82 = v3;
  __int16 v75 = v2;
  uint64_t v76 = v4;
  if (!v4)
  {
    unsigned int v79 = 0;
    goto LABEL_56;
  }
  uint64_t v18 = 0;
  size_t v15 = 0;
  unsigned int v79 = 0;
  do
  {
    long long v19 = 0uLL;
    long long v96 = 0u;
    long long v97 = 0u;
    unint64_t v20 = *((void *)v2 + 3);
    if (v20 <= v15) {
      goto LABEL_143;
    }
    uint64_t v21 = 0;
    uint64_t v77 = v18;
    uint64_t v22 = *((void *)v2 + 5) + v18;
    do
    {
      __s[v21] = *(_DWORD *)(v22 + v21 * 4);
      ++v21;
    }
    while (v21 != 4);
    size_t v7 = 0;
    size_t v16 = 0;
    if (HIDWORD(v92) == -1) {
      uint64_t v23 = 3;
    }
    else {
      uint64_t v23 = 4;
    }
    size_t v78 = v15;
    int v24 = 4 * v15;
    uint64_t v80 = v23;
    do
    {
      size_t v15 = (size_t)&__s[v16];
      unint64_t v5 = *(unsigned int *)v15;
      unint64_t v20 = v16 + 1;
      uint64_t v25 = (v16 + 1);
      if (v16 + 1 == v23) {
        uint64_t v25 = 0;
      }
      unsigned int v26 = __s[v25];
      if (v5 >= v26) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = *(_DWORD *)v15;
      }
      if (v5 <= v26) {
        unsigned int v28 = v26;
      }
      else {
        unsigned int v28 = *(_DWORD *)v15;
      }
      if (v29 == -1)
      {
        *(void *)&long long v109 = __PAIR64__(v28, v27);
        *(_DWORD *)float v99 = v79;
        *(_DWORD *)&v99[4] = 1;
        int v34 = v79++;
        unint64_t v3 = v82;
      }
      else
      {
        uint64_t v30 = v29;
        uint64_t v31 = (char *)&v96;
        uint64_t v32 = *((void *)&v83 + 1) + 16 * v29;
        int v35 = *(_DWORD *)(v32 + 8);
        uint64_t v33 = (unsigned int *)(v32 + 8);
        int v34 = v35;
        if (v16)
        {
          uint64_t v31 = (char *)&v96;
          size_t v36 = v7;
          while (*(unsigned int **)v31 != v33)
          {
            v31 += 8;
            v36 -= 8;
            if (!v36)
            {
              uint64_t v31 = (char *)&v96 + 8 * v16;
              break;
            }
          }
        }
        if (v16 == (v31 - (char *)&v96) >> 3) {
          ++*(_DWORD *)(*((void *)&v83 + 1) + 16 * v30 + 12);
        }
      }
      *((void *)&v96 + v16) = v33;
      unint64_t v17 = (v24 + v16);
      unint64_t v37 = *((void *)v3 + 48);
      if (v37 <= v17)
      {
        *(void *)uint64_t v102 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(void *)&v99[20] = (v24 + v16);
        __int16 v100 = 2048;
        *(void *)int v101 = v37;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        *(void *)uint64_t v102 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(void *)&v99[20] = (v24 + v16);
        __int16 v100 = 2048;
        *(void *)int v101 = v37;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        *(void *)uint64_t v102 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 789;
        *(_WORD *)&v99[18] = 2048;
        *(void *)&v99[20] = v5;
        __int16 v100 = 2048;
        *(void *)int v101 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        uint64_t v87 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v7;
        __int16 v107 = 2048;
        size_t v108 = v16;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        uint64_t v87 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v16;
        __int16 v107 = 2048;
        size_t v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        uint64_t v87 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v20;
        __int16 v107 = 2048;
        size_t v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_142:
        uint64_t v87 = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v15;
        __int16 v107 = 2048;
        size_t v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_143:
        *(void *)__s = 0;
        long long v112 = v19;
        long long v113 = v19;
        long long v110 = v19;
        long long v111 = v19;
        long long v109 = v19;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v99 = 136315906;
        *(void *)&v99[4] = "operator[]";
        *(_WORD *)&v99[12] = 1024;
        *(_DWORD *)&v99[14] = 797;
        *(_WORD *)&v99[18] = 2048;
        *(void *)&v99[20] = v15;
        __int16 v100 = 2048;
        *(void *)int v101 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_144:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v5;
        __int16 v107 = 2048;
        size_t v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_145:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v7;
        __int16 v107 = 2048;
        size_t v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v16;
        __int16 v107 = 2048;
        size_t v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v17;
        __int16 v107 = 2048;
        size_t v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(void *)int v89 = 0;
        long long v112 = v48;
        long long v113 = v48;
        long long v110 = v48;
        long long v111 = v48;
        long long v109 = v48;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 797;
        __int16 v105 = 2048;
        size_t v106 = v16;
        __int16 v107 = 2048;
        size_t v108 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v5;
        __int16 v107 = 2048;
        size_t v108 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        *(void *)&v88[0] = 0;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v109 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v102 = 136315906;
        *(void *)&v102[4] = "operator[]";
        __int16 v103 = 1024;
        int v104 = 789;
        __int16 v105 = 2048;
        size_t v106 = v16;
        __int16 v107 = 2048;
        size_t v108 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_151;
      }
      *(_DWORD *)(*((void *)v3 + 50) + 4 * v17) = v5;
      unint64_t v37 = *((void *)v3 + 53);
      if (v37 <= v17) {
        goto LABEL_137;
      }
      *(_DWORD *)(*((void *)v3 + 55) + 4 * v17) = v34;
      float v38 = wmemchr(__s, v5, v16);
      if (v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = &__s[v16];
      }
      if (v16 == v39 - __s)
      {
        size_t v15 = *((void *)v3 + 18);
        if (v15 <= v5) {
          goto LABEL_138;
        }
        ++*(_DWORD *)(*((void *)v3 + 20) + 4 * v5);
      }
      v7 += 8;
      ++v16;
      uint64_t v23 = v80;
    }
    while (v20 != v80);
    size_t v15 = v78 + 1;
    uint64_t v18 = v77 + 16;
    uint64_t v2 = v75;
  }
  while (v78 + 1 != v76);
LABEL_56:
  size_t v16 = (size_t)v3 + 288;
  re::DynamicArray<float>::resize((uint64_t)v3 + 288, v79);
  re::DynamicArray<float>::resize((uint64_t)v3 + 248, 2 * v79);
  *(void *)&long long v96 = &v83;
  if ((unint64_t)v84 < 0x10)
  {
LABEL_60:
    unint64_t v17 = *((void *)v3 + 38);
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v41 = (unint64_t)v84 >> 4;
    while (1)
    {
      unsigned __int16 v42 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v83 + v40)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v42 != 0xFFFF) {
        break;
      }
      v40 += 16;
      if (!--v41) {
        goto LABEL_60;
      }
    }
    uint64_t v69 = __clz(__rbit64((unsigned __int16)~v42)) + v40;
    *((void *)&v96 + 1) = (unsigned __int16)~v42;
    *(void *)&long long v97 = v69;
    unint64_t v17 = *((void *)v3 + 38);
    if (v69 != -1)
    {
      uint64_t v43 = v76;
      while (1)
      {
        unint64_t v70 = (unsigned int *)(*(void *)(v96 + 8) + 16 * v69);
        unint64_t v20 = v70[2];
        if (v17 <= v20) {
          break;
        }
        size_t v7 = *v70;
        size_t v15 = v70[1];
        *(_DWORD *)(*((void *)v3 + 40) + 4 * v20) = v70[3];
        unint64_t v5 = (2 * v20);
        unint64_t v20 = *((void *)v3 + 33);
        if (v20 <= v5) {
          goto LABEL_152;
        }
        uint64_t v71 = *((void *)v3 + 35);
        *(_DWORD *)(v71 + 4 * v5) = v7;
        unint64_t v5 = v5 | 1;
        if (v20 <= v5) {
          goto LABEL_153;
        }
        *(_DWORD *)(v71 + 4 * v5) = v15;
        unint64_t v20 = *((void *)v3 + 13);
        if (v20 <= v7) {
          goto LABEL_154;
        }
        uint64_t v72 = *((void *)v3 + 15);
        ++*(_DWORD *)(v72 + 4 * v7);
        if (v7 != v15)
        {
          if (v20 <= v15) {
            goto LABEL_155;
          }
          ++*(_DWORD *)(v72 + 4 * v15);
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v96);
        uint64_t v69 = v97;
        if ((void)v97 == -1) {
          goto LABEL_62;
        }
      }
LABEL_151:
      *(void *)__s = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v109 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v20;
      __int16 v100 = 2048;
      *(void *)int v101 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_152:
      *(void *)__s = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v109 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v5;
      __int16 v100 = 2048;
      *(void *)int v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_153:
      *(void *)__s = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v109 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v5;
      __int16 v100 = 2048;
      *(void *)int v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_154:
      *(void *)__s = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v109 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v7;
      __int16 v100 = 2048;
      *(void *)int v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_155:
      *(void *)__s = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v109 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)float v99 = 136315906;
      *(void *)&v99[4] = "operator[]";
      *(_WORD *)&v99[12] = 1024;
      *(_DWORD *)&v99[14] = 789;
      *(_WORD *)&v99[18] = 2048;
      *(void *)&v99[20] = v15;
      __int16 v100 = 2048;
      *(void *)int v101 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  uint64_t v43 = v76;
LABEL_62:
  re::DynamicArray<float>::resize((uint64_t)v3 + 328, v44);
  re::DynamicArray<float>::resize((uint64_t)v3 + 168, v45);
  unint64_t v17 = (unint64_t)v3 + 208;
  re::DynamicArray<float>::resize((uint64_t)v3 + 208, v46);
  *(void *)&v101[2] = 0;
  memset(v99, 0, sizeof(v99));
  uint64_t v98 = 0;
  *(void *)&long long v97 = 0;
  uint64_t v95 = 0;
  long long v96 = 0uLL;
  DWORD2(v97) = 0;
  uint64_t v92 = 0;
  size_t v93 = 0;
  *(void *)__s = 0;
  int v94 = 0;
  if (v43)
  {
    uint64_t v47 = 0;
    size_t v16 = 0;
    unint64_t v17 = (unint64_t)v89;
    do
    {
      long long v48 = 0uLL;
      memset(v88, 0, sizeof(v88));
      unint64_t v20 = *((void *)v2 + 3);
      if (v20 <= v16) {
        goto LABEL_148;
      }
      uint64_t v49 = 0;
      uint64_t v81 = v47;
      uint64_t v50 = *((void *)v2 + 5) + v47;
      do
      {
        v89[v49] = *(_DWORD *)(v50 + v49 * 4);
        ++v49;
      }
      while (v49 != 4);
      uint64_t v51 = 0;
      size_t v15 = 0;
      if (v90 == -1) {
        uint64_t v52 = 3;
      }
      else {
        uint64_t v52 = 4;
      }
      do
      {
        size_t v7 = v89[v15];
        unint64_t v5 = v15 + 1;
        uint64_t v53 = (v15 + 1);
        if (v15 + 1 == v52) {
          uint64_t v53 = 0;
        }
        unsigned int v54 = v89[v53];
        if (v7 >= v54) {
          unsigned int v55 = v54;
        }
        else {
          unsigned int v55 = v89[v15];
        }
        if (v7 <= v54) {
          unsigned int v56 = v54;
        }
        else {
          unsigned int v56 = v89[v15];
        }
        if (v57 == -1) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = *((void *)&v83 + 1) + 16 * v57 + 8;
        }
        *((void *)v88 + v15) = v20;
        float v58 = wmemchr(v89, v7, v15);
        if (v58) {
          uint64_t v59 = v58;
        }
        else {
          uint64_t v59 = &v89[v15];
        }
        unint64_t v3 = v82;
        if (v15 == v59 - v89)
        {
          size_t v60 = v16;
          size_t v16 = *(void *)&v99[16];
          if (*(void *)&v99[16] <= v7) {
            goto LABEL_139;
          }
          size_t v16 = *(unsigned int *)(*(void *)&v101[2] + 4 * v7);
          *(_DWORD *)(*(void *)&v101[2] + 4 * v7) = v16 + 1;
          size_t v7 = *((void *)v82 + 28);
          if (v7 <= v16) {
            goto LABEL_140;
          }
          *(_DWORD *)(*((void *)v82 + 30) + 4 * v16) = v60;
          size_t v16 = v60;
        }
        uint64_t v61 = (char *)v88;
        if (v15)
        {
          uint64_t v62 = v51;
          while (*(void *)v61 != v20)
          {
            v61 += 8;
            v62 -= 8;
            if (!v62)
            {
              uint64_t v61 = (char *)v88 + 8 * v15;
              break;
            }
          }
        }
        if (v15 == (v61 - (char *)v88) >> 3)
        {
          unint64_t v20 = *(unsigned int *)v20;
          size_t v15 = v93;
          if (v93 <= v20) {
            goto LABEL_141;
          }
          size_t v15 = *(unsigned int *)(v95 + 4 * v20);
          *(_DWORD *)(v95 + 4 * v20) = v15 + 1;
          unint64_t v20 = *((void *)v82 + 43);
          if (v20 <= v15) {
            goto LABEL_142;
          }
          *(_DWORD *)(*((void *)v82 + 45) + 4 * v15) = v16;
        }
        v51 += 8;
        size_t v15 = v5;
      }
      while (v5 != v52);
      ++v16;
      uint64_t v47 = v81 + 16;
      uint64_t v2 = v75;
    }
    while (v16 != v76);
  }
  if (v79)
  {
    uint64_t v63 = 0;
    unint64_t v20 = *((void *)v3 + 33);
    unsigned int v64 = 1;
    size_t v15 = v97;
    uint64_t v65 = v98;
    do
    {
      unint64_t v5 = v64 - 1;
      if (v20 <= v5) {
        goto LABEL_144;
      }
      size_t v7 = v64;
      if (v20 <= v64) {
        goto LABEL_145;
      }
      uint64_t v66 = *((void *)v3 + 35);
      size_t v16 = *(unsigned int *)(v66 + 4 * v5);
      if (v15 <= v16) {
        goto LABEL_146;
      }
      unint64_t v5 = *(unsigned int *)(v66 + 4 * v64);
      unint64_t v17 = *(unsigned int *)(v65 + 4 * v16);
      *(_DWORD *)(v65 + 4 * v16) = v17 + 1;
      size_t v7 = *((void *)v3 + 23);
      if (v7 <= v17) {
        goto LABEL_147;
      }
      uint64_t v67 = *((void *)v3 + 25);
      *(_DWORD *)(v67 + 4 * v17) = v63;
      if (v16 != v5)
      {
        if (v15 <= v5) {
          goto LABEL_149;
        }
        size_t v16 = *(unsigned int *)(v65 + 4 * v5);
        *(_DWORD *)(v65 + 4 * v5) = v16 + 1;
        if (v7 <= v16) {
          goto LABEL_150;
        }
        *(_DWORD *)(v67 + 4 * v16) = v63;
      }
      ++v63;
      v64 += 2;
    }
    while (v79 != v63);
  }
  if (*(void *)__s && v95) {
    (*(void (**)(void))(**(void **)__s + 40))();
  }
  if ((void)v96 && v98) {
    (*(void (**)(void))(*(void *)v96 + 40))();
  }
  if (*(void *)v99 && *(void *)&v101[2]) {
    (*(void (**)(void))(**(void **)v99 + 40))();
  }
  uint64_t result = *((void *)&v86 + 1);
  if (*((void *)&v86 + 1))
  {
    if (*((void *)&v83 + 1)) {
      *((void *)&v83 + 1) = 0;
    }
    if ((void)v83) {
      return (*(uint64_t (**)(void))(**((void **)&v86 + 1) + 40))();
    }
  }
  return result;
}

uint64_t re::internal::anonymous namespace'::computeAccumulatedCounts(unint64_t a1, uint64_t a2)
{
  if (a1 < 2)
  {
    if (!a1) {
      return 0;
    }
  }
  else
  {
    unsigned int v2 = 2;
    for (unint64_t i = 1; i < a1; unint64_t i = v2++)
    {
      unint64_t v4 = v2 - 2;
      if (v4 >= a1)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(a2 + 4 * i) += *(_DWORD *)(a2 + 4 * v4);
    }
  }
  return *(unsigned int *)(a2 + 4 * a1 - 4);
}

void *re::internal::anonymous namespace'::createIndexOffsetsFromAccumulatedCounts(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  unint64_t v4 = *(void *)(a1 + 16);
  LODWORD(v14) = 0;
  uint64_t result = re::DynamicArray<unsigned int>::resize((void *)a2, v4, &v14);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >= 2)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = 2;
    unint64_t v10 = 1;
    uint64_t v11 = *(void *)(a2 + 32);
    do
    {
      unint64_t v12 = v9 - 2;
      if (v6 <= v12)
      {
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v7 <= v10) {
        goto LABEL_8;
      }
      *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v8 + 4 * v12);
      unint64_t v10 = v9;
    }
    while (v6 > v9++);
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeFaceCount(re::internal::GeomConnectivityNonManifold *this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = a2 - 1;
    unint64_t v3 = *((void *)this + 38);
    if (v3 <= v2) {
      goto LABEL_8;
    }
    int v4 = *(_DWORD *)(*((void *)this + 40) + 4 * v2);
  }
  else
  {
    int v4 = 0;
    unint64_t v3 = *((void *)this + 38);
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((void *)this + 40) + 4 * a2) - v4);
}

uint64_t re::internal::GeomConnectivityNonManifold::vertexFaceCount(re::internal::GeomConnectivityNonManifold *this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = a2 - 1;
    unint64_t v3 = *((void *)this + 18);
    if (v3 <= v2) {
      goto LABEL_8;
    }
    int v4 = *(_DWORD *)(*((void *)this + 20) + 4 * v2);
  }
  else
  {
    int v4 = 0;
    unint64_t v3 = *((void *)this + 18);
  }
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (*(_DWORD *)(*((void *)this + 20) + 4 * a2) - v4);
}

re::internal::GeomConnectivityNonManifold *re::internal::GeomConnectivityNonManifold::classifyEdges(re::internal::GeomConnectivityNonManifold *this)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)this + 33);
  if ((v1 & 0x1FFFFFFFELL) == 0) {
    return this;
  }
  unint64_t v2 = this;
  unint64_t v3 = 0;
  uint64_t v4 = (v1 >> 1);
  do
  {
    int v5 = re::internal::GeomConnectivityNonManifold::edgeFaceCount(v2, v3);
    this = (re::internal::GeomConnectivityNonManifold *)re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v2, v3, &v27);
    unint64_t v6 = v27;
    if (v27 == (unint64_t)v28) {
      goto LABEL_4;
    }
    if (v5 == 1)
    {
      unint64_t v7 = *((void *)v2 + 8);
      if (v7 <= v27) {
        goto LABEL_57;
      }
      *(unsigned char *)(*((void *)v2 + 10) + v27) |= 1u;
      unint64_t v7 = v28;
      unint64_t v6 = *((void *)v2 + 8);
      if (v6 <= v28) {
        goto LABEL_58;
      }
      *(unsigned char *)(*((void *)v2 + 10) + v28) |= 1u;
      unint64_t v7 = *((void *)v2 + 8);
      if (v7 <= v3) {
        goto LABEL_59;
      }
      char v8 = 4;
LABEL_13:
      *(unsigned char *)(*((void *)v2 + 10) + v3) |= v8;
      goto LABEL_14;
    }
    this = (re::internal::GeomConnectivityNonManifold *)re::internal::GeomConnectivityNonManifold::edgeFaceCount(v2, v3);
    if (this == 1) {
      goto LABEL_14;
    }
    if (this > 2) {
      goto LABEL_52;
    }
    re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v2, v3, &v32);
    *(void *)&void v31[2] = 0;
    memset(v29, 0, sizeof(v29));
    re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(v2, v3, (uint64_t)v29);
    if (!*(void *)&v29[16]) {
      goto LABEL_60;
    }
    unsigned int v9 = v32;
    int v10 = v33;
    unsigned int v11 = re::internal::GeomConnectivityNonManifold::faceVertices(v2, **(_DWORD **)&v31[2], v41);
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = v11 - 1;
    unsigned int v15 = v41[v14];
    while (1)
    {
      if (v14 == v12) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = v12 + 1;
      }
      unsigned int v17 = v41[v12];
      if (v17 != v9) {
        goto LABEL_30;
      }
      if (v15 != v10) {
        break;
      }
      if (v13) {
        goto LABEL_32;
      }
      int v13 = 1;
LABEL_30:
      ++v12;
      unsigned int v15 = v17;
      if (v11 == v12) {
        goto LABEL_33;
      }
    }
    if (v41[v16] != v10) {
      goto LABEL_30;
    }
    if (!v13)
    {
      int v13 = -1;
      goto LABEL_30;
    }
LABEL_32:
    int v13 = 0;
LABEL_33:
    unint64_t v6 = *(void *)&v29[16];
    if (*(void *)&v29[16] <= 1uLL) {
      goto LABEL_61;
    }
    unsigned int v18 = v32;
    int v19 = v33;
    unsigned int v20 = re::internal::GeomConnectivityNonManifold::faceVertices(v2, *(_DWORD *)(*(void *)&v31[2] + 4), v41);
    uint64_t v21 = 0;
    int v22 = 0;
    uint64_t v23 = v20 - 1;
    unsigned int v24 = v41[v23];
    while (2)
    {
      if (v23 == v21) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v21 + 1;
      }
      unsigned int v26 = v41[v21];
      if (v26 != v18) {
        goto LABEL_45;
      }
      if (v24 == v19)
      {
        if (v22) {
          goto LABEL_47;
        }
        int v22 = 1;
        goto LABEL_45;
      }
      if (v41[v25] != v19)
      {
LABEL_45:
        ++v21;
        unsigned int v24 = v26;
        if (v20 == v21) {
          goto LABEL_48;
        }
        continue;
      }
      break;
    }
    if (!v22)
    {
      int v22 = -1;
      goto LABEL_45;
    }
LABEL_47:
    int v22 = 0;
LABEL_48:
    this = *(re::internal::GeomConnectivityNonManifold **)v29;
    if (*(void *)v29)
    {
      if (*(void *)&v31[2]) {
        this = (re::internal::GeomConnectivityNonManifold *)(*(uint64_t (**)(void))(**(void **)v29 + 40))();
      }
    }
    if (((v22 * v13) & 0x80000000) == 0)
    {
LABEL_52:
      unint64_t v6 = v27;
LABEL_4:
      unint64_t v7 = *((void *)v2 + 8);
      if (v7 <= v6)
      {
        *(void *)int v34 = 0;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        *(_OWORD *)unint64_t v41 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v29 = 136315906;
        *(void *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(void *)&v29[20] = v6;
        __int16 v30 = 2048;
        *(void *)uint64_t v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        *(unsigned char *)(*((void *)v2 + 10) + v6) |= 2u;
        unint64_t v7 = v28;
        unint64_t v6 = *((void *)v2 + 8);
        if (v6 > v28)
        {
          *(unsigned char *)(*((void *)v2 + 10) + v28) |= 2u;
          unint64_t v7 = *((void *)v2 + 8);
          if (v7 > v3)
          {
            char v8 = 8;
            goto LABEL_13;
          }
LABEL_56:
          *(void *)int v34 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v29 = 136315906;
          *(void *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(void *)&v29[20] = v3;
          __int16 v30 = 2048;
          *(void *)uint64_t v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          *(void *)int v34 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v29 = 136315906;
          *(void *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(void *)&v29[20] = v6;
          __int16 v30 = 2048;
          *(void *)uint64_t v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_58:
          *(void *)int v34 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          unint64_t v3 = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v29 = 136315906;
          *(void *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(void *)&v29[20] = v7;
          __int16 v30 = 2048;
          *(void *)uint64_t v31 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_59:
          *(void *)int v34 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v29 = 136315906;
          *(void *)&v29[4] = "operator[]";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 789;
          *(_WORD *)&v29[18] = 2048;
          *(void *)&v29[20] = v3;
          __int16 v30 = 2048;
          *(void *)uint64_t v31 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v34 = 136315906;
          *(void *)&unsigned int v34[4] = "operator[]";
          __int16 v35 = 1024;
          int v36 = 789;
          __int16 v37 = 2048;
          uint64_t v38 = 0;
          __int16 v39 = 2048;
          unint64_t v40 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)unint64_t v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)int v34 = 136315906;
          *(void *)&unsigned int v34[4] = "operator[]";
          __int16 v35 = 1024;
          int v36 = 789;
          __int16 v37 = 2048;
          uint64_t v38 = 1;
          __int16 v39 = 2048;
          unint64_t v40 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      *(void *)int v34 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)unint64_t v41 = 0u;
      unint64_t v3 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v29 = 136315906;
      *(void *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 789;
      *(_WORD *)&v29[18] = 2048;
      *(void *)&v29[20] = v7;
      __int16 v30 = 2048;
      *(void *)uint64_t v31 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_56;
    }
LABEL_14:
    ++v3;
  }
  while (v3 != v4);
  return this;
}

uint64_t re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(re::internal::GeomConnectivityNonManifold *a1, unsigned __int32 a2, uint64_t a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v18 = a2;
  char v8 = (__int32 *)a4[4];
  size_t v9 = a4[2];
  uint64_t result = (uint64_t)wmemchr(v8, a2, v9);
  if (result) {
    unsigned int v11 = (__int32 *)result;
  }
  else {
    unsigned int v11 = &v8[v9];
  }
  if (v9 == v11 - v8)
  {
    re::DynamicArray<int>::add(a4, &v18);
    uint64_t result = re::internal::GeomConnectivityNonManifold::faceIncidentEdges(a1, v18, v21);
    uint64_t v12 = result;
    if ((_BYTE)result)
    {
      uint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v21[v13];
        unint64_t v15 = *((void *)a1 + 8);
        if (v15 <= v14) {
          goto LABEL_27;
        }
        if ((*(unsigned char *)(*((void *)a1 + 10) + v14) & 8) == 0)
        {
          uint64_t result = re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)a1, v21[v13], v20);
          if (v20[0] == a3 || v20[1] == a3)
          {
            unint64_t v15 = *((void *)a1 + 38);
            if (v14)
            {
              unint64_t v4 = (v14 - 1);
              if (v15 <= v4) {
                goto LABEL_29;
              }
              unint64_t v4 = *(unsigned int *)(*((void *)a1 + 40) + 4 * v4);
            }
            else
            {
              unint64_t v4 = 0;
            }
            if (v15 <= v14) {
              goto LABEL_28;
            }
            unint64_t v15 = *(unsigned int *)(*((void *)a1 + 40) + 4 * v14);
            if (v4 < v15) {
              break;
            }
          }
        }
LABEL_24:
        if (++v13 == v12) {
          return result;
        }
      }
      while (1)
      {
        unint64_t v14 = *((void *)a1 + 43);
        if (v14 <= v4) {
          break;
        }
        uint64_t v17 = *(unsigned int *)(*((void *)a1 + 45) + 4 * v4);
        if (v17 != v18) {
          uint64_t result = re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(a1, v17, a3, a4);
        }
        if (v15 == ++v4) {
          goto LABEL_24;
        }
      }
      uint64_t v19 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      uint64_t v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 797;
      __int16 v26 = 2048;
      unint64_t v27 = v4;
      __int16 v28 = 2048;
      unint64_t v29 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_27:
      uint64_t v19 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      uint64_t v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 797;
      __int16 v26 = 2048;
      unint64_t v27 = v14;
      __int16 v28 = 2048;
      unint64_t v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_28:
      uint64_t v19 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      uint64_t v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 797;
      __int16 v26 = 2048;
      unint64_t v27 = v14;
      __int16 v28 = 2048;
      unint64_t v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      uint64_t v19 = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      uint64_t v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 797;
      __int16 v26 = 2048;
      unint64_t v27 = v4;
      __int16 v28 = 2048;
      unint64_t v29 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

unsigned int *re::internal::GeomConnectivityNonManifold::classifyVertices(unsigned int *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v1 = this[26];
  if (this[26])
  {
    unint64_t v2 = (re::internal::GeomConnectivityNonManifold *)this;
    unint64_t v3 = 0;
    do
    {
      if (v3)
      {
        unint64_t v4 = (v3 - 1);
        unint64_t v5 = *((void *)v2 + 13);
        if (v5 <= v4) {
          goto LABEL_33;
        }
        int v6 = *(_DWORD *)(*((void *)v2 + 15) + 4 * v4);
      }
      else
      {
        int v6 = 0;
        unint64_t v5 = *((void *)v2 + 13);
      }
      unint64_t v4 = v3;
      if (v5 <= v3)
      {
        *(void *)unint64_t v14 = 0;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v11 = 136315906;
        *(void *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 797;
        *(_WORD *)&v11[18] = 2048;
        *(void *)&v11[20] = v3;
        __int16 v12 = 2048;
        *(void *)uint64_t v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_31:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v14 = 136315906;
        *(void *)&v14[4] = "operator[]";
        __int16 v15 = 1024;
        int v16 = 797;
        __int16 v17 = 2048;
        unint64_t v18 = v3;
        __int16 v19 = 2048;
        unint64_t v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        *(void *)unint64_t v14 = 0;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v11 = 136315906;
        *(void *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 789;
        *(_WORD *)&v11[18] = 2048;
        *(void *)&v11[20] = v3;
        __int16 v12 = 2048;
        *(void *)uint64_t v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        *(void *)unint64_t v14 = 0;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v11 = 136315906;
        *(void *)&v11[4] = "operator[]";
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = 797;
        *(_WORD *)&v11[18] = 2048;
        *(void *)&v11[20] = v4;
        __int16 v12 = 2048;
        *(void *)uint64_t v13 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v14 = 136315906;
        *(void *)&v14[4] = "operator[]";
        __int16 v15 = 1024;
        int v16 = 789;
        __int16 v17 = 2048;
        unint64_t v18 = v4;
        __int16 v19 = 2048;
        unint64_t v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v14 = 136315906;
        *(void *)&v14[4] = "operator[]";
        __int16 v15 = 1024;
        int v16 = 789;
        __int16 v17 = 2048;
        unint64_t v18 = v5;
        __int16 v19 = 2048;
        unint64_t v20 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v14 = 136315906;
        *(void *)&v14[4] = "operator[]";
        __int16 v15 = 1024;
        int v16 = 789;
        __int16 v17 = 2048;
        unint64_t v18 = v3;
        __int16 v19 = 2048;
        unint64_t v20 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v14 = 136315906;
        *(void *)&v14[4] = "operator[]";
        __int16 v15 = 1024;
        int v16 = 789;
        __int16 v17 = 2048;
        unint64_t v18 = 0;
        __int16 v19 = 2048;
        unint64_t v20 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      int v7 = *(_DWORD *)(*((void *)v2 + 15) + 4 * v3);
      if (v7 == v6 || v7 - v6 > re::internal::GeomConnectivityNonManifold::vertexFaceCount(v2, v3) + 1)
      {
        unint64_t v5 = *((void *)v2 + 8);
        if (v5 <= v3) {
          goto LABEL_32;
        }
        *(unsigned char *)(*((void *)v2 + 10) + v3) |= 2u;
      }
      ++v3;
    }
    while (v1 != v3);
    unint64_t v3 = 0;
    *(void *)&v13[2] = 0;
    memset(v11, 0, sizeof(v11));
    do
    {
      unint64_t v5 = *((void *)v2 + 8);
      if (v5 <= v3) {
        goto LABEL_31;
      }
      if ((*(unsigned char *)(*((void *)v2 + 10) + v3) & 2) == 0)
      {
        if (v3)
        {
          unint64_t v4 = v3 - 1;
          unint64_t v5 = *((void *)v2 + 18);
          if (v5 <= v3 - 1) {
            goto LABEL_34;
          }
          unint64_t v5 = *(unsigned int *)(*((void *)v2 + 20) + 4 * v3 - 4);
          unint64_t v4 = *((void *)v2 + 28);
          if (v4 <= v5) {
            goto LABEL_35;
          }
          char v8 = (unsigned __int32 *)(*((void *)v2 + 30) + 4 * v5);
        }
        else
        {
          if (!*((void *)v2 + 28)) {
            goto LABEL_37;
          }
          char v8 = (unsigned __int32 *)*((void *)v2 + 30);
        }
        unsigned __int32 v9 = *v8;
        *(void *)&v11[16] = 0;
        ++*(_DWORD *)&v11[24];
        re::internal::GeomConnectivityNonManifold::fetchReachableFacesFromFaceVertex(v2, v9, v3, v11);
        uint64_t v10 = *(void *)&v11[16];
        if (v10 != re::internal::GeomConnectivityNonManifold::vertexFaceCount(v2, v3))
        {
          unint64_t v5 = *((void *)v2 + 8);
          if (v5 <= v3) {
            goto LABEL_36;
          }
          *(unsigned char *)(*((void *)v2 + 10) + v3) |= 2u;
        }
      }
      ++v3;
    }
    while (v1 != v3);
    this = *(unsigned int **)v11;
    if (*(void *)v11)
    {
      if (*(void *)&v13[2]) {
        return (unsigned int *)(*(uint64_t (**)(void))(**(void **)v11 + 40))();
      }
    }
  }
  return this;
}

uint64_t re::internal::GeomConnectivityNonManifold::classifyFaces(re::internal::GeomConnectivityNonManifold *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((unsigned int *)this + 26);
  uint64_t v27 = 0;
  v24[1] = 0;
  unint64_t v25 = 0;
  v24[0] = 0;
  int v26 = 0;
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      unint64_t v4 = (unsigned int *)*((void *)this + 8);
      if ((unint64_t)v4 <= i) {
        goto LABEL_29;
      }
      char v5 = *(unsigned char *)(*((void *)this + 10) + i);
      if (v5)
      {
        re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(this, i, (uint64_t)v24);
        if (v25)
        {
          uint64_t v6 = 0;
          char v7 = 16 * (v5 & 1);
          unsigned int v8 = 1;
          do
          {
            unint64_t v4 = (unsigned int *)*(unsigned int *)(v27 + 4 * v6);
            unsigned __int32 v9 = (unsigned int *)*((void *)this + 8);
            if (v9 <= v4) {
              goto LABEL_28;
            }
            *((unsigned char *)v4 + *((void *)this + 10)) |= v7;
            uint64_t v6 = v8;
          }
          while (v25 > v8++);
        }
      }
    }
  }
  unint64_t v11 = *((void *)this + 48);
  if ((v11 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t i = 0;
    uint64_t v12 = (v11 >> 2);
    unint64_t v4 = v29;
    unsigned __int32 v9 = &v29[1];
    do
    {
      unsigned int v13 = re::internal::GeomConnectivityNonManifold::faceVertices(this, i, v29);
      uint64_t v14 = 0;
      __int16 v15 = &v29[1];
      unsigned int v16 = v13 - 1;
      do
      {
        uint64_t v17 = v14 + 1;
        if (v14 + 1 < (unint64_t)v13)
        {
          unint64_t v18 = (unsigned int *)v29[v14];
          __int16 v19 = v15;
          for (unsigned int j = v16; j; --j)
          {
            int v21 = *v19++;
            if (v18 == v21)
            {
              long long v22 = (unsigned int *)*((void *)this + 8);
              if (v22 <= v18)
              {
                uint64_t v28 = 0;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v38 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v30 = 136315906;
                long long v31 = "operator[]";
                __int16 v32 = 1024;
                int v33 = 789;
                __int16 v34 = 2048;
                uint64_t v35 = v18;
                __int16 v36 = 2048;
                __int16 v37 = v22;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_27:
                uint64_t v28 = 0;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v38 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v30 = 136315906;
                long long v31 = "operator[]";
                __int16 v32 = 1024;
                int v33 = 789;
                __int16 v34 = 2048;
                uint64_t v35 = (unsigned int *)i;
                __int16 v36 = 2048;
                __int16 v37 = v22;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_28:
                *(void *)unint64_t v29 = 0;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v38 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v30 = 136315906;
                long long v31 = "operator[]";
                __int16 v32 = 1024;
                int v33 = 789;
                __int16 v34 = 2048;
                uint64_t v35 = v4;
                __int16 v36 = 2048;
                __int16 v37 = v9;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_29:
                *(void *)unint64_t v29 = 0;
                long long v41 = 0u;
                long long v42 = 0u;
                long long v39 = 0u;
                long long v40 = 0u;
                long long v38 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                int v30 = 136315906;
                long long v31 = "operator[]";
                __int16 v32 = 1024;
                int v33 = 797;
                __int16 v34 = 2048;
                uint64_t v35 = (unsigned int *)i;
                __int16 v36 = 2048;
                __int16 v37 = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              *((unsigned char *)v18 + *((void *)this + 10)) |= 2u;
              long long v22 = (unsigned int *)*((void *)this + 8);
              if ((unint64_t)v22 <= i) {
                goto LABEL_27;
              }
              *(unsigned char *)(*((void *)this + 10) + i) |= 0x20u;
            }
          }
        }
        --v16;
        ++v15;
        uint64_t v14 = v17;
      }
      while (v17 != v13 - 1);
      ++i;
    }
    while (i != v12);
  }
  uint64_t result = v24[0];
  if (v24[0])
  {
    if (v27) {
      return (*(uint64_t (**)(void))(*(void *)v24[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::faceVertices(re::internal::GeomConnectivityNonManifold *this, int a2, unsigned int *a3)
{
  unint64_t v3 = (4 * a2);
  unint64_t v4 = *((void *)this + 48);
  if (v4 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *((void *)this + 50);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  unint64_t v6 = v3 | 1;
  if (v4 <= v6)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  unint64_t v7 = v3 | 2;
  if (v4 <= v7)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = *(_DWORD *)(v5 + 4 * v7);
  unint64_t v8 = v3 | 3;
  if (v4 <= v8) {
    goto LABEL_12;
  }
  unsigned int v9 = *(_DWORD *)(v5 + 4 * v8);
  a3[3] = v9;
  if (v9 == -1) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t re::internal::GeomConnectivityNonManifold::build(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  re::DynamicArray<re::GeomCell4>::operator=(a2 + 8, (uint64_t *)(a1 + 8));
  if (!*(void *)(a2 + 16)) {
    re::DynamicArray<re::BlendNode>::setCapacity((void *)(a2 + 8), 1uLL);
  }
  re::internal::GeomConnectivityNonManifold::computeIncidenceRelations((_anonymous_namespace_ *)a2, (unsigned int *)a1);
  *(void *)(a2 + 64) = 0;
  ++*(_DWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 264) >> 1;
  unsigned int v5 = *(_DWORD *)(a2 + 104);
  if (v5 <= (*(void *)(a2 + 384) >> 2)) {
    unsigned int v5 = *(void *)(a2 + 384) >> 2;
  }
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  char v8 = 0;
  re::DynamicArray<unsigned char>::resize((void *)(a2 + 48), v6, &v8);
  re::internal::GeomConnectivityNonManifold::classifyEdges((re::internal::GeomConnectivityNonManifold *)a2);
  re::internal::GeomConnectivityNonManifold::classifyVertices((unsigned int *)a2);
  re::internal::GeomConnectivityNonManifold::classifyFaces((re::internal::GeomConnectivityNonManifold *)a2);
  return 1;
}

void *re::HashBrown<re::internal::anonymous namespace'::VertexPair,re::internal::anonymous namespace'::EdgeData,re::internal::anonymous namespace'::HashEdge,re::internal::anonymous namespace'::HashEdge,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        *(void *)(v3[1] + v10) = 0;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    void *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<re::internal::anonymous namespace'::VertexPair,re::internal::anonymous namespace'::EdgeData,re::internal::anonymous namespace'::HashEdge,re::internal::anonymous namespace'::HashEdge,void,false>::find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v4 = a1[2];
  if (v4 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v7 = v4 >> 4;
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  if (v9 == v11) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v11 ^ v9;
  unint64_t v13 = v12 % v7;
  uint64_t v14 = *a1;
  int8x16_t v15 = vdupq_n_s8(v12 & 0x7F);
  int8x16_t v16 = (int8x16_t)xmmword_2343680E0;
  v17.i64[0] = -1;
  for (v17.i64[1] = -1; ; v17.i64[1] = -1)
  {
    int8x16_t v18 = *(int8x16_t *)(v14 + 16 * v13);
    unint64_t v19 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v18), v16)))), (int8x8_t)0x3830282018100800);
    unint64_t v20 = __clz(__rbit64(v19));
    if (v20 <= 0x3F) {
      break;
    }
LABEL_15:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v18, v17), v16)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    int8x16_t v28 = v16;
    int8x16_t v29 = v15;
    if (++v13 == v7) {
      unint64_t v13 = 0;
    }
    uint64_t result = -1;
    int8x16_t v16 = v28;
    int8x16_t v15 = v29;
    v17.i64[0] = -1;
    if (v13 == v27) {
      return result;
    }
  }
  uint64_t v21 = 16 * v13;
  while (1)
  {
    uint64_t result = v20 + v21;
    long long v23 = (int *)(a1[1] + 16 * (v20 + v21));
    int v25 = *v23;
    int v24 = v23[1];
    if (v25 == a2 && v24 == a3) {
      return result;
    }
    if (v20 <= 0x3E)
    {
      unint64_t v20 = __clz(__rbit64((-2 << v20) & v19));
      if (v20 < 0x40) {
        continue;
      }
    }
    goto LABEL_15;
  }
}

unsigned int *re::HashBrown<re::internal::anonymous namespace'::VertexPair,re::internal::anonymous namespace'::EdgeData,re::internal::anonymous namespace'::HashEdge,re::internal::anonymous namespace'::HashEdge,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned int *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (a2[1] ^ ((unint64_t)a2[1] >> 30));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (v9 == v11) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v11 ^ v9;
  unint64_t v13 = v7 >> 4;
  unint64_t v14 = v12 % (v7 >> 4);
  uint64_t v15 = *(void *)a1;
  unint64_t v16 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v16 >= 0x40)
  {
    do
    {
      if (v14 + 1 == v13) {
        unint64_t v14 = 0;
      }
      else {
        ++v14;
      }
      unint64_t v16 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v16 > 0x3F);
  }
  uint64_t v17 = v15 + 16 * v14;
  int v18 = *(unsigned __int8 *)(v17 + v16);
  *(unsigned char *)(v17 + v16) = v12 & 0x7F;
  BOOL v19 = v18 == 255;
  unint64_t v20 = v16 + 16 * v14;
  uint64_t v21 = *a3;
  long long v22 = (void *)(*((void *)a1 + 1) + 16 * v20);
  *long long v22 = *(void *)a2;
  v22[1] = v21;
  uint64_t v23 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v23 - v19;
  int v24 = (unsigned int *)(*((void *)a1 + 1) + 16 * v20);
  unint64_t v25 = 0xBF58476D1CE4E5B9 * (*v24 ^ ((unint64_t)*v24 >> 30));
  unint64_t v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
  unint64_t v27 = v24[1] ^ ((unint64_t)v24[1] >> 30);
  unint64_t v28 = (0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v27) ^ ((0xBF58476D1CE4E5B9 * v27) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v27) ^ ((0xBF58476D1CE4E5B9 * v27) >> 27))) >> 31);
  if (v26 == v28) {
    unint64_t v28 = 0;
  }
  *((void *)a1 + 5) ^= v26 ^ v28;
  return v24 + 2;
}

uint64_t re::HashBrown<re::internal::anonymous namespace'::VertexPair,re::internal::anonymous namespace'::EdgeData,re::internal::anonymous namespace'::HashEdge,re::internal::anonymous namespace'::HashEdge,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v27 = 0u;
  *(_OWORD *)unint64_t v28 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v28[16], 0, 32);
  v25[0] = a1;
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    __n128 v13 = (__n128)xmmword_2343680E0;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v14 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = __clz(__rbit64((unsigned __int16)~v14)) + v11;
    v25[1] = (unsigned __int16)~v14;
    uint64_t v26 = v15;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        uint64_t v15 = v26;
      }
      while (v26 != -1);
      unint64_t v10 = a1[2];
    }
  }
LABEL_14:
  uint64_t v17 = *(void *)&v28[40];
  *(void *)&v28[40] = a1[7];
  uint64_t result = *(void *)&v28[40];
  long long v18 = v27;
  long long v19 = *(_OWORD *)v28;
  *(void *)unint64_t v28 = v10;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  *(void *)&long long v27 = *a1;
  *((void *)&v27 + 1) = v21;
  long long v22 = *(_OWORD *)&v28[16];
  long long v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v28[32];
  a1[7] = v17;
  *(_OWORD *)&v28[24] = v23;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v28[8] = v24;
  if (result)
  {
    if (v21) {
      *((void *)&v27 + 1) = 0;
    }
    if (v20) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

re *re::GeomMesh::freeName(re *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v2 = this;
    unint64_t v3 = re::globalAllocators(this);
    this = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3[2] + 40))(v3[2], v1);
    *(void *)uint64_t v2 = 0;
  }
  return this;
}

re *re::GeomMesh::setName(re *this, const char *a2)
{
  if (*(const char **)this != a2)
  {
    unint64_t v3 = this;
    this = re::GeomMesh::freeName(this);
    if (a2)
    {
      unint64_t v4 = (re *)strlen(a2);
      unint64_t v5 = (char *)v4 + 1;
      unint64_t v6 = re::globalAllocators(v4);
      uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v6[2] + 32))(v6[2], v5, 0);
      *(void *)unint64_t v3 = v7;
      return (re *)strcpy(v7, a2);
    }
    else
    {
      *(void *)unint64_t v3 = 0;
    }
  }
  return this;
}

re::GeomMesh *re::GeomMesh::GeomMesh(re::GeomMesh *this, const char *a2)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  unint64_t v4 = (re::GeomMesh *)((char *)this + 16);
  bzero((char *)this + 16, 0x2C8uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh(v4);
  re::GeomMesh::setName(this, a2);
  *((void *)this + 91) = re::internal::GeomAttributeManager::addAttribute((re::GeomMesh *)((char *)this + 64), "vertexPosition", 1, 7);
  return this;
}

re::GeomMesh *re::GeomMesh::copy(re::GeomMesh *this, re::GeomMesh *a2)
{
  if (this != a2)
  {
    uint64_t v3 = (uint64_t)this;
    re::GeomMesh::clear(a2);
    re::GeomMesh::setName(a2, *(const char **)v3);
    this = (re::GeomMesh *)re::internal::GeomBaseMesh::operator=((uint64_t)a2 + 16, v3 + 16);
    *((_DWORD *)a2 + 2) = *(_DWORD *)(v3 + 8);
    uint64_t v4 = *(void *)(v3 + 728);
    if (v4)
    {
      this = (re::GeomMesh *)re::internal::GeomAttributeManager::attributeByName((re::GeomMesh *)((char *)a2 + 64), *(const char **)(v4 + 8));
      *((void *)a2 + 91) = this;
    }
  }
  return this;
}

re::GeomAttribute *re::GeomMesh::clear(re::GeomMesh *this)
{
  re::GeomMesh::freeName(this);
  *((void *)this + 91) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  re::internal::GeomAttributeManager::clear((re::GeomMesh *)((char *)this + 64), v2);
  uint64_t result = re::internal::GeomAttributeManager::addAttribute((re::GeomMesh *)((char *)this + 64), "vertexPosition", 1, 7);
  *((void *)this + 91) = result;
  return result;
}

void re::GeomMesh::~GeomMesh(re::GeomMesh *this)
{
  re::GeomMesh::freeName(this);
  *((void *)this + 91) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  re::internal::GeomAttributeManager::clear((re::GeomMesh *)((char *)this + 64), v2);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::GeomMesh *)((char *)this + 64));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
}

uint64_t re::internal::GeomBaseMesh::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (void *)(a1 + 8);
  re::DynamicArray<re::GeomCell4>::operator=(a1 + 8, (uint64_t *)(a2 + 8));
  if (!*(void *)(a1 + 16)) {
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  }
  re::internal::GeomAttributeManager::copy((re::internal::GeomAttributeContainer *)(a2 + 48), (re::internal::GeomAttributeManager *)(a1 + 48));
  return a1;
}

re::GeomAttribute *re::GeomMesh::addAttribute(uint64_t a1, char *a2, int a3, int a4)
{
  if (a3 == 3) {
    return 0;
  }
  uint64_t v4 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a1 + 64), a2, a3, a4);
  if (v4 && !strcmp(a2, "vertexPosition")) {
    *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4;
  }
  return v4;
}

uint64_t re::GeomMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v11 = a4;
  uint64_t v8 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)v12, a5);
  if (!v12[1]) {
    re::DynamicArray<re::BlendNode>::setCapacity(v8, 1uLL);
  }
  uint64_t v9 = re::internal::GeomBaseMesh::addFaceVaryingAttribute(a1 + 16, a2, a3, (uint64_t)&v11);
  if (v12[0] && v12[4]) {
    (*(void (**)(void))(*(void *)v12[0] + 40))(v12[0]);
  }
  return v9;
}

uint64_t re::GeomMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6)
{
  int v14 = a4;
  unint64_t v10 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)v15, a5);
  if (!v15[1]) {
    re::DynamicArray<re::BlendNode>::setCapacity(v10, 1uLL);
  }
  re::DynamicArray<float>::DynamicArray((uint64_t)v13, a6);
  uint64_t v11 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)(a1 + 16), a2, a3, (uint64_t)&v14, (uint64_t)v13);
  if (v13[0] && v13[4]) {
    (*(void (**)(void))(*(void *)v13[0] + 40))();
  }
  if (v15[0] && v15[4]) {
    (*(void (**)(void))(*(void *)v15[0] + 40))();
  }
  return v11;
}

re::GeomAttribute *re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute(re::internal::GeomBaseMesh *this, char *a2)
{
  v48[11] = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned int *)this + 6);
  int v32 = *(_DWORD *)this;
  unint64_t v5 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v33, (uint64_t *)this + 1);
  if (!(void)v34) {
    re::DynamicArray<re::BlendNode>::setCapacity(v5, 1uLL);
  }
  uint64_t v31 = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  v28[0] = 0;
  int v30 = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  v24[0] = 0;
  int v26 = 0;
  re::DynamicArray<unsigned int>::resize(v28, v4, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize(v24, v4, &re::kInvalidMeshIndex);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v25;
    uint64_t v8 = v27;
    uint64_t v9 = v29;
    uint64_t v10 = v31;
    do
    {
      if (v7 == v6)
      {
        uint64_t v18 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v37 = 136315906;
        long long v38 = "operator[]";
        __int16 v39 = 1024;
        *(_DWORD *)long long v40 = 789;
        *(_WORD *)&v40[4] = 2048;
        *(void *)&v40[6] = v7;
        *(_WORD *)&v40[14] = 2048;
        *(void *)&v40[16] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_43:
        uint64_t v18 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v37 = 136315906;
        long long v38 = "operator[]";
        __int16 v39 = 1024;
        *(_DWORD *)long long v40 = 789;
        *(_WORD *)&v40[4] = 2048;
        *(void *)&v40[6] = v9;
        *(_WORD *)&v40[14] = 2048;
        *(void *)&v40[16] = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v6) = v6;
      if (v9 == v6) {
        goto LABEL_43;
      }
      *(_DWORD *)(v10 + 4 * v6) = v6;
      ++v6;
    }
    while (v4 != v6);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v37, (uint64_t)v28);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v18, (uint64_t)v24);
  LODWORD(v43) = v32;
  *((void *)&v43 + 1) = v33;
  long long v44 = v34;
  *((void *)&v45 + 1) = v36;
  uint64_t v36 = 0;
  LODWORD(v45) = 1;
  int v32 = 0;
  uint64_t v33 = 0;
  long long v34 = 0uLL;
  v35 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v46, (uint64_t)&v37);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v48, (uint64_t)&v18);
  if (!v19) {
    goto LABEL_19;
  }
  if (v19 == 2)
  {
    uint64_t v12 = v23;
    if (!v23) {
      goto LABEL_19;
    }
    if (v21) {
      uint64_t v21 = 0;
    }
    uint64_t v11 = v20;
    if (!v20) {
      goto LABEL_19;
    }
LABEL_18:
    (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    goto LABEL_19;
  }
  if (v19 != 1)
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v12 = v20;
  if (v20)
  {
    uint64_t v11 = v22;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_19:
  if (!(_BYTE)v39) {
    goto LABEL_32;
  }
  if (v39 == 2)
  {
    uint64_t v13 = v42;
    if (!v42) {
      goto LABEL_32;
    }
    if (*(void *)&v40[10]) {
      *(void *)&v40[10] = 0;
    }
    if (!*(void *)&v40[2]) {
      goto LABEL_32;
    }
    int v14 = (uint64_t *)&v40[2];
LABEL_30:
    (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
    goto LABEL_31;
  }
  if (v39 != 1)
  {
LABEL_45:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = (re::GeomAttribute *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v13 = *(void *)&v40[2];
  if (!*(void *)&v40[2]) {
    goto LABEL_32;
  }
  int v14 = &v41;
  if (v41) {
    goto LABEL_30;
  }
LABEL_31:
  *int v14 = 0;
LABEL_32:
  uint64_t v15 = re::internal::GeomAttributeManager::replaceVertexWithFaceVaryingAttribute((uint64_t *)this + 6, a2, (re *)&v43);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v43, v16);
  if (v24[0] && v27) {
    (*(void (**)(void))(*(void *)v24[0] + 40))();
  }
  if (v28[0] && v31) {
    (*(void (**)(void))(*(void *)v28[0] + 40))();
  }
  if (v33)
  {
    if (v36) {
      (*(void (**)(void))(*(void *)v33 + 40))();
    }
  }
  return v15;
}

re::GeomAttribute *re::internal::GeomBaseMesh::replaceFaceAttributeWithFaceVaryingAttribute(re::internal::GeomBaseMesh *this, char *a2)
{
  v54[11] = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = v5;
  uint64_t v42 = 0;
  long long v40 = 0uLL;
  int v41 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(&v39, 1uLL);
  uint64_t v37 = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  v34[0] = 0;
  int v36 = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  v30[0] = 0;
  int v32 = 0;
  ++v41;
  int v38 = v5;
  re::DynamicArray<re::GeomCell4>::resize(&v39, v5);
  re::DynamicArray<unsigned int>::resize(v34, v5, &re::kInvalidMeshIndex);
  re::DynamicArray<unsigned int>::resize(v30, v5, &re::kInvalidMeshIndex);
  if (v5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = v31;
    uint64_t v9 = v33;
    uint64_t v10 = v35;
    uint64_t v11 = v37;
    uint64_t v12 = 12;
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = v42;
    do
    {
      if (v8 == v7)
      {
        uint64_t v24 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v43 = 136315906;
        long long v44 = "operator[]";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(void *)&v46[6] = v8;
        *(_WORD *)&v46[14] = 2048;
        *(void *)&v46[16] = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        uint64_t v24 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v43 = 136315906;
        long long v44 = "operator[]";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(void *)&v46[6] = v10;
        *(_WORD *)&v46[14] = 2048;
        *(void *)&v46[16] = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_47:
        uint64_t v24 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v43 = 136315906;
        long long v44 = "operator[]";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 797;
        *(_WORD *)&v46[4] = 2048;
        *(void *)&v46[6] = v7;
        *(_WORD *)&v46[14] = 2048;
        *(void *)&v46[16] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_48:
        uint64_t v24 = 0;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v43 = 136315906;
        long long v44 = "operator[]";
        __int16 v45 = 1024;
        *(_DWORD *)long long v46 = 789;
        *(_WORD *)&v46[4] = 2048;
        *(void *)&v46[6] = v13;
        *(_WORD *)&v46[14] = 2048;
        *(void *)&v46[16] = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v9 + 4 * v7) = v7;
      if (v10 == v7) {
        goto LABEL_46;
      }
      *(_DWORD *)(v11 + 4 * v7) = v7;
      unint64_t v2 = *((void *)this + 3);
      if (v2 <= v7) {
        goto LABEL_47;
      }
      if (v13 == v7) {
        goto LABEL_48;
      }
      if (*(_DWORD *)(*((void *)this + 5) + v12) == -1) {
        int v15 = -1;
      }
      else {
        int v15 = v7;
      }
      uint64_t v16 = (int *)(v14 + v12);
      *(v16 - 3) = v7;
      *(v16 - 2) = v7;
      *(v16 - 1) = v7;
      *uint64_t v16 = v15;
      ++v7;
      v12 += 16;
    }
    while (v6 != v7);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v43, (uint64_t)v34);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v24, (uint64_t)v30);
  LODWORD(v49) = v38;
  *((void *)&v49 + 1) = v39;
  long long v50 = v40;
  *((void *)&v51 + 1) = v42;
  uint64_t v42 = 0;
  LODWORD(v51) = 1;
  int v38 = 0;
  __int16 v39 = 0;
  long long v40 = 0uLL;
  v41 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v52, (uint64_t)&v43);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v54, (uint64_t)&v24);
  if (!v25) {
    goto LABEL_22;
  }
  if (v25 == 2)
  {
    uint64_t v18 = v29;
    if (!v29) {
      goto LABEL_22;
    }
    if (v27) {
      uint64_t v27 = 0;
    }
    uint64_t v17 = v26;
    if (!v26) {
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
    goto LABEL_22;
  }
  if (v25 != 1)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v18 = v26;
  if (v26)
  {
    uint64_t v17 = v28;
    if (v28) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (!(_BYTE)v45) {
    goto LABEL_35;
  }
  if (v45 == 2)
  {
    uint64_t v19 = v48;
    if (!v48) {
      goto LABEL_35;
    }
    if (*(void *)&v46[10]) {
      *(void *)&v46[10] = 0;
    }
    if (!*(void *)&v46[2]) {
      goto LABEL_35;
    }
    uint64_t v20 = (uint64_t *)&v46[2];
LABEL_33:
    (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
    goto LABEL_34;
  }
  if (v45 != 1)
  {
LABEL_50:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = (re::GeomAttribute *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v19 = *(void *)&v46[2];
  if (!*(void *)&v46[2]) {
    goto LABEL_35;
  }
  uint64_t v20 = &v47;
  if (v47) {
    goto LABEL_33;
  }
LABEL_34:
  *uint64_t v20 = 0;
LABEL_35:
  uint64_t v21 = re::internal::GeomAttributeManager::replaceFaceWithFaceVaryingAttribute((uint64_t *)this + 6, a2, (re *)&v49);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v49, v22);
  if (v30[0] && v33) {
    (*(void (**)(void))(*(void *)v30[0] + 40))();
  }
  if (v34[0] && v37) {
    (*(void (**)(void))(*(void *)v34[0] + 40))();
  }
  if (v39)
  {
    if (v42) {
      (*(void (**)(void))(*v39 + 40))();
    }
  }
  return v21;
}

uint64_t re::GeomMesh::accessVertexPositions(re::GeomMesh *this)
{
  uint64_t v1 = *((void *)this + 91);
  if (!v1) {
    return 0;
  }
  if (!(*(unsigned int (**)(void))(*(void *)v1 + 16))(*((void *)this + 91))) {
    return 0;
  }
  uint64_t v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v1, 0);
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  return v2;
}

uint64_t re::GeomMesh::modifyVertexPositions(re::GeomMesh *this)
{
  uint64_t v1 = *((void *)this + 91);
  if (!v1) {
    return 0;
  }
  if (!(*(unsigned int (**)(void))(*(void *)v1 + 16))(*((void *)this + 91))) {
    return 0;
  }
  uint64_t v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v1, 0);
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  return v2;
}

uint64_t re::GeomMesh::GeomMesh(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 8);
  re::internal::GeomBaseMesh::GeomBaseMesh(a1 + 16, a2 + 16);
  *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexPosition");
  *(void *)a2 = 0;
  *(void *)(a2 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a2 + 64), "vertexPosition", 1, 7);
  return a1;
}

{
  uint64_t v3;
  int v4;
  _DWORD *v5;

  *(void *)a1 = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh(a1 + 16, a2);
  *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexPosition");
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*(void *)(a1 + 56) + 8);
    do
    {
      if (*(v5 - 2) != -1 && *(v5 - 1) != -1 && *v5 != -1 && v5[1] == -1) {
        ++v4;
      }
      v5 += 4;
      --v3;
    }
    while (v3);
  }
  else
  {
    unint64_t v4 = 0;
  }
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4;
  return a1;
}

re::GeomMesh *re::GeomMesh::operator=(re::GeomMesh *this, re::GeomMesh *a2)
{
  if (this != a2)
  {
    re::GeomMesh::freeName(this);
    *(void *)this = *(void *)a2;
    *(void *)a2 = 0;
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    re::DynamicArray<re::GeomCell4>::operator=((uint64_t)this + 24, (uint64_t)a2 + 24);
    unint64_t v4 = re::internal::GeomAttributeManager::operator=((re::GeomMesh *)((char *)this + 64), (uint64_t)a2 + 64);
    *((void *)this + 91) = re::internal::GeomAttributeManager::attributeByName(v4, "vertexPosition");
    re::GeomMesh::clear(a2);
  }
  return this;
}

uint64_t re::GeomMesh::operator=(uint64_t a1, _DWORD *a2)
{
  if ((_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = *a2;
    re::DynamicArray<re::GeomCell4>::operator=(a1 + 24, (uint64_t)(a2 + 2));
    unint64_t v4 = re::internal::GeomAttributeManager::operator=((re::internal::GeomAttributeContainer *)(a1 + 64), (uint64_t)(a2 + 12));
    *(void *)(a1 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = re::internal::GeomAttributeManager::attributeByName(v4, "vertexPosition");
    uint64_t v5 = *(unsigned int *)(a1 + 40);
    if (*(_DWORD *)(a1 + 40))
    {
      int v6 = 0;
      unint64_t v7 = (_DWORD *)(*(void *)(a1 + 56) + 8);
      do
      {
        if (*(v7 - 2) != -1 && *(v7 - 1) != -1 && *v7 != -1 && v7[1] == -1) {
          ++v6;
        }
        v7 += 4;
        --v5;
      }
      while (v5);
    }
    else
    {
      int v6 = 0;
    }
    *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
  }
  return a1;
}

uint64_t re::GeomMesh::updateFaceVaryingAttribute(uint64_t a1, char *a2, int a3, uint64_t *a4, uint64_t *a5)
{
  v49[11] = *MEMORY[0x263EF8340];
  uint64_t v9 = a5[2];
  uint64_t v10 = (void *)(a1 + 64);
  re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  int v34 = a3;
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v35, a4);
  if (!(void)v36) {
    uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendNode>::setCapacity(v11, 1uLL);
  }
  long long v33 = 0u;
  memset(v32, 0, sizeof(v32));
  re::DynamicArray<float>::DynamicArray((uint64_t)v29, a5);
  unsigned int v28 = 0;
  if (v9)
  {
    unsigned int v12 = 0;
    do
    {
      unsigned int v27 = 0;
      uint64_t v13 = v12;
      unint64_t v14 = v30;
      if (v30 <= v12)
      {
        uint64_t v21 = 0;
        memset(v48, 0, 32);
        long long v46 = 0u;
        long long v47 = 0u;
        long long v45 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v39 = 136315906;
        long long v40 = "operator[]";
        __int16 v41 = 1024;
        *(_DWORD *)uint64_t v42 = 789;
        *(_WORD *)&v42[4] = 2048;
        *(void *)&v42[6] = v13;
        *(_WORD *)&v42[14] = 2048;
        *(void *)&v42[16] = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unsigned int v27 = *(_DWORD *)(v31 + 4 * v12);
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace((_anonymous_namespace_ *)v32, &v27, &v28);
      unsigned int v12 = v28 + 1;
      unsigned int v28 = v12;
    }
    while (v12 < v9);
  }
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v39, (uint64_t)v29);
  re::GeomIndexMap::GeomIndexMap((unsigned int *)&v21, (uint64_t *)v32);
  LODWORD(v45) = v34;
  *((void *)&v45 + 1) = v35;
  long long v46 = v36;
  *((void *)&v47 + 1) = v38;
  uint64_t v38 = 0;
  LODWORD(v47) = 1;
  int v34 = 0;
  uint64_t v35 = 0;
  long long v36 = 0uLL;
  v37 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)v48, (uint64_t)&v39);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v49, (uint64_t)&v21);
  if (!v22) {
    goto LABEL_18;
  }
  if (v22 == 2)
  {
    uint64_t v16 = v26;
    if (!v26) {
      goto LABEL_18;
    }
    if (v24) {
      uint64_t v24 = 0;
    }
    uint64_t v15 = v23;
    if (!v23) {
      goto LABEL_18;
    }
LABEL_17:
    (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
    goto LABEL_18;
  }
  if (v22 != 1)
  {
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v16 = v23;
  if (v23)
  {
    uint64_t v15 = v25;
    if (v25) {
      goto LABEL_17;
    }
  }
LABEL_18:
  if (!(_BYTE)v41) {
    goto LABEL_31;
  }
  if (v41 == 2)
  {
    uint64_t v17 = v44;
    if (!v44) {
      goto LABEL_31;
    }
    if (*(void *)&v42[10]) {
      *(void *)&v42[10] = 0;
    }
    if (!*(void *)&v42[2]) {
      goto LABEL_31;
    }
    uint64_t v18 = (uint64_t *)&v42[2];
LABEL_29:
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
    goto LABEL_30;
  }
  if (v41 != 1)
  {
LABEL_45:
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  uint64_t v17 = *(void *)&v42[2];
  if (!*(void *)&v42[2]) {
    goto LABEL_31;
  }
  uint64_t v18 = &v43;
  if (v43) {
    goto LABEL_29;
  }
LABEL_30:
  *uint64_t v18 = 0;
LABEL_31:
  re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(v10, a2, (uint64_t)&v45);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v45, v19);
  if (v29[0] && v31) {
    (*(void (**)(void))(*(void *)v29[0] + 40))();
  }
  if (*((void *)&v33 + 1))
  {
    if (*((void *)&v32[0] + 1)) {
      *((void *)&v32[0] + 1) = 0;
    }
    if (*(void *)&v32[0]) {
      (*(void (**)(void))(**((void **)&v33 + 1) + 40))();
    }
  }
  uint64_t result = v35;
  if (v35)
  {
    if (v38) {
      return (*(uint64_t (**)(void))(*(void *)v35 + 40))();
    }
  }
  return result;
}

uint64_t re::GeomMesh::updateFaceVaryingAttribute(uint64_t a1, char *a2, int a3, uint64_t a4)
{
  unsigned int v7 = *(_DWORD *)(a4 + 16);
  uint64_t v8 = (void *)(a1 + 64);
  re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  int v38 = a3;
  uint64_t v9 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v39, (uint64_t *)a4);
  if (!(void)v40) {
    re::DynamicArray<re::BlendNode>::setCapacity(v9, 1uLL);
  }
  unint64_t v10 = 0xFFFFFFFF00000000;
  unint64_t v30 = 0xFFFFFFFF00000000;
  int v31 = -1;
  char v32 = 0;
  int v11 = v7 - 1;
  if (v7 - 1 >= 0xFFFFFFFE)
  {
    LODWORD(v33) = 0;
    int v11 = -1;
  }
  else
  {
    unint64_t v30 = v7;
    int v31 = v7 - 1;
    LODWORD(v33) = v7;
    unint64_t v10 = v7;
  }
  char v25 = 0;
  int v24 = v11;
  unint64_t v23 = v10;
  LODWORD(v26) = v10;
  LODWORD(v16) = v38;
  uint64_t v17 = v39;
  long long v18 = v40;
  uint64_t v20 = v42;
  uint64_t v42 = 0;
  LODWORD(v19) = 1;
  int v38 = 0;
  uint64_t v39 = 0;
  long long v40 = 0uLL;
  v41 += 2;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v21, (uint64_t)&v30);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v22, (uint64_t)&v23);
  re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(v8, a2, (uint64_t)&v16);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v16, v12);
  if (!v25) {
    goto LABEL_17;
  }
  if (v25 == 2)
  {
    uint64_t v14 = v29;
    if (!v29) {
      goto LABEL_17;
    }
    if (v27) {
      uint64_t v27 = 0;
    }
    uint64_t v13 = v26;
    if (!v26) {
      goto LABEL_17;
    }
LABEL_16:
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
    goto LABEL_17;
  }
  if (v25 != 1)
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625, v16, v17, v18, v19, v20);
    _os_crash();
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v14 = v26;
  if (v26)
  {
    uint64_t v13 = v28;
    if (v28) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v32 == 2)
  {
    if (v37)
    {
      if (v34) {
        uint64_t v34 = 0;
      }
      if (v33)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 40))(v37);
        uint64_t v33 = 0;
      }
    }
    goto LABEL_30;
  }
  if (v32 == 1)
  {
    if (v33)
    {
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
      }
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    goto LABEL_30;
  }
  if (v32)
  {
LABEL_35:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  LODWORD(v33) = 0;
LABEL_30:
  uint64_t result = v39;
  if (v39)
  {
    if (v42) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v39 + 40))(v39);
    }
  }
  return result;
}

uint64_t re::internal::GeomBaseMesh::GeomBaseMesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v4;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 24) = 0;
  ++*(_DWORD *)(a2 + 32);
  re::internal::GeomAttributeManager::GeomAttributeManager(a1 + 48, a2 + 48);
  return a1;
}

uint64_t re::computeGradientField(unint64_t *a1, void *a2, uint64_t a3)
{
  re::DynamicArray<re::Vector3<float>>::resize(a3, *((unsigned int *)a1 + 10));
  uint64_t result = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
  unint64_t v11 = a1[5];
  if (v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (v11 <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_26:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v14);
        _os_crash();
        __break(1u);
LABEL_29:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v14);
        _os_crash();
        __break(1u);
LABEL_30:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v14);
        _os_crash();
        __break(1u);
LABEL_31:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v5, v14);
        _os_crash();
        __break(1u);
LABEL_33:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v13 = (unsigned int *)(a1[7] + 16 * v12);
      unint64_t v11 = *v13;
      if (v11 >= v10) {
        goto LABEL_25;
      }
      unint64_t v3 = v13[1];
      if (v3 >= v10) {
        goto LABEL_26;
      }
      unint64_t v4 = v13[2];
      if (v4 >= v10) {
        goto LABEL_27;
      }
      unint64_t v14 = a2[1];
      if (v14 <= v11) {
        goto LABEL_28;
      }
      if (v14 <= v3) {
        goto LABEL_29;
      }
      if (v14 <= v4) {
        goto LABEL_30;
      }
      float v15 = *(float *)(*a2 + 4 * v11);
      unint64_t v5 = v13[3];
      float v16 = *(float *)(*a2 + 4 * v3);
      float v17 = *(float *)(*a2 + 4 * v4);
      if (v5 == -1)
      {
        unint64_t v5 = *(void *)(a3 + 16);
        if (v5 <= v12) {
          goto LABEL_36;
        }
        float32x4_t v28 = *(float32x4_t *)(result + 16 * v3);
        float32x4_t v29 = *(float32x4_t *)(result + 16 * v11);
        float32x4_t v30 = vsubq_f32(v28, v29);
        float32x4_t v31 = *(float32x4_t *)(result + 16 * v4);
        float32x4_t v32 = vsubq_f32(v31, v29);
        int8x16_t v33 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), vnegq_f32(v30)), v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
        float32x4_t v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL);
        float32x4_t v34 = vaddq_f32(vmulq_n_f32(v30, v17), vaddq_f32(vmulq_n_f32(vsubq_f32(v31, v28), v15), vmulq_n_f32(vsubq_f32(v29, v31), v16)));
        int8x16_t v27 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v25)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL));
      }
      else
      {
        if (v5 >= v10) {
          goto LABEL_31;
        }
        if (v14 <= v5) {
          goto LABEL_32;
        }
        if (*(void *)(a3 + 16) <= v12) {
          goto LABEL_33;
        }
        float32x4_t v18 = *(float32x4_t *)(result + 16 * v4);
        float32x4_t v19 = *(float32x4_t *)(result + 16 * v11);
        float32x4_t v20 = vsubq_f32(v18, v19);
        float32x4_t v21 = *(float32x4_t *)(result + 16 * v5);
        float32x4_t v22 = *(float32x4_t *)(result + 16 * v3);
        float32x4_t v23 = vsubq_f32(v21, v22);
        int8x16_t v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v20)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL));
        float32x4_t v25 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL);
        float32x4_t v26 = vaddq_f32(vmulq_n_f32(v20, *(float *)(*a2 + 4 * v5)), vaddq_f32(vmulq_n_f32(vsubq_f32(v19, v18), v16), vaddq_f32(vmulq_n_f32(v23, v15), vmulq_n_f32(vsubq_f32(v22, v21), v17))));
        int8x16_t v27 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL));
      }
      *(int8x16_t *)(*(void *)(a3 + 32) + 16 * v12) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), v27, 0xCuLL);
      float32x4_t v35 = vmulq_f32(v25, v25);
      float v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
      unint64_t v37 = *(void *)(a3 + 16);
      if (v36 <= 0.0)
      {
        if (v37 <= v12) {
          goto LABEL_35;
        }
        int v38 = (void *)(*(void *)(a3 + 32) + 16 * v12);
        *int v38 = 0;
        v38[1] = 0;
      }
      else
      {
        if (v37 <= v12) {
          goto LABEL_34;
        }
        *(float32x4_t *)(*(void *)(a3 + 32) + 16 * v12) = vmulq_n_f32(*(float32x4_t *)(*(void *)(a3 + 32) + 16 * v12), 1.0 / v36);
      }
      ++v12;
      unint64_t v11 = a1[5];
    }
    while (v12 < v11);
  }
  return result;
}

re *re::GeomMeshBuilder::GeomMeshBuilder(re *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  re::internal::GeomBaseMesh::GeomBaseMesh((uint64_t)a1 + 8, a2 + 16);
  re::GeomMesh::setName(a1, *(const char **)a2);
  *(void *)(a2 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::GeomMesh::clear((re::GeomMesh *)a2);
  return a1;
}

uint64_t re::GeomMeshBuilder::appendMesh(re::GeomMeshBuilder *this, const re::GeomMesh *a2)
{
  unint64_t v4 = (unint64_t)this;
  uint64_t v156 = *MEMORY[0x263EF8340];
  unsigned int v5 = *((_DWORD *)this + 2);
  uint64_t v6 = *((void *)this + 4);
  unint64_t v7 = *((unsigned int *)a2 + 4);
  uint64_t v120 = *((void *)a2 + 5);
  unint64_t v8 = (v120 + v6);
  *((_DWORD *)this + 2) = v7 + v5;
  *((_DWORD *)this + 42) = v7 + v5;
  uint64_t v116 = (char *)this + 8;
  uint64_t v9 = *((void *)this + 24);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)*((void *)this + 26);
    unint64_t v2 = 8 * v9;
    do
    {
      uint64_t v11 = *v10++;
      (*(void (**)(uint64_t, void))(*(void *)v11 + 72))(v11, *(unsigned int *)(v4 + 168));
      v2 -= 8;
    }
    while (v2);
  }
  re::DynamicArray<re::GeomCell4>::resize((void *)(v4 + 16), v8);
  *(_DWORD *)(v4 + 280) = v8;
  uint64_t v12 = *(void *)(v4 + 304);
  if (v12)
  {
    uint64_t v13 = *(uint64_t **)(v4 + 320);
    unint64_t v8 = 8 * v12;
    do
    {
      uint64_t v14 = *v13++;
      (*(void (**)(uint64_t, void))(*(void *)v14 + 72))(v14, *(unsigned int *)(v4 + 280));
      v8 -= 8;
    }
    while (v8);
  }
  if (v120)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *((void *)a2 + 5);
    int32x2_t v17 = vdup_n_s32(v5);
    float32x4_t v18 = (_DWORD *)(*((void *)a2 + 7) + 12);
    while (v16 != v15)
    {
      unint64_t v8 = (v6 + v15);
      unint64_t v2 = *(void *)(v4 + 32);
      if (v2 <= v8) {
        goto LABEL_267;
      }
      int v19 = *(v18 - 1);
      if (*v18 == -1) {
        int v20 = -1;
      }
      else {
        int v20 = *v18 + v5;
      }
      float32x4_t v21 = (int32x2_t *)(*(void *)(v4 + 48) + 16 * v8);
      *float32x4_t v21 = vadd_s32(*(int32x2_t *)(v18 - 3), v17);
      v21[1].i32[0] = v19 + v5;
      v21[1].i32[1] = v20;
      ++v15;
      v18 += 4;
      if (v120 == v15) {
        goto LABEL_15;
      }
    }
    goto LABEL_266;
  }
LABEL_15:
  float32x4_t v22 = (re::internal::GeomAttributeManager *)(v116 + 48);
  __int16 v122 = a2;
  int v23 = *((_DWORD *)a2 + 22);
  if (v23)
  {
    unsigned int v24 = 0;
    unint64_t v2 = (unint64_t)a2 + 64;
    do
    {
      uint64_t v25 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v2, v24);
      if (!re::internal::GeomAttributeManager::attributeByName(v22, *(const char **)(v25 + 8)))
      {
        float32x4_t v26 = re::internal::GeomAttributeManager::addAttribute(v22, *(char **)(v25 + 8), *(unsigned __int8 *)(v25 + 16), *(unsigned __int8 *)(v25 + 17));
        re::GeomAttribute::copyValues((re::GeomAttribute *)v25, v26);
      }
      ++v24;
    }
    while (v23 != v24);
  }
  *(void *)&v141[2] = 0;
  memset(v141, 0, 28);
  *(void *)&v138[32] = 0;
  memset(v138, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v141, v7);
  re::DynamicArray<float>::resize((uint64_t)v138, v7);
  if (v7)
  {
    int8x16_t v27 = 0;
    float32x4_t v28 = *(re::GeomMeshBuilder **)&v141[1];
    uint64_t v29 = *(void *)&v141[2];
    unint64_t v4 = *(void *)&v138[16];
    uint64_t v30 = *(void *)&v138[32];
    while (v28 != v27)
    {
      *(_DWORD *)(v29 + 4 * (void)v27) = v27;
      if ((re::GeomMeshBuilder *)v4 == v27) {
        goto LABEL_269;
      }
      *(_DWORD *)(v30 + 4 * (void)v27) = v5 + v27;
      int8x16_t v27 = (re::GeomMeshBuilder *)((char *)v27 + 1);
      if ((re::GeomMeshBuilder *)v7 == v27) {
        goto LABEL_25;
      }
    }
LABEL_268:
    *(void *)&v145[0] = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v28;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v28;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_269:
    *(void *)&v145[0] = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v4;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_270:
    *(void *)&v145[0] = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v28;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v28;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_271:
    *(void *)&v145[0] = 0;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v147 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v135 = 136315906;
    *(void *)&v135[4] = "operator[]";
    *(_WORD *)&v135[12] = 1024;
    *(_DWORD *)&v135[14] = 789;
    *(_WORD *)&v135[18] = 2048;
    *(void *)&v135[20] = v4;
    *(_WORD *)&v135[28] = 2048;
    *(void *)&v135[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_272:
    re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "appendMesh", 175);
    _os_crash();
    __break(1u);
LABEL_273:
    re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "appendMesh", 176);
    _os_crash();
    __break(1u);
LABEL_274:
    re::internal::assertLog((re::internal *)4, v43, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->size() == newValueCount", "appendMesh", 195);
    _os_crash();
    __break(1u);
LABEL_275:
    re::internal::assertLog((re::internal *)4, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "appendMesh", 215);
    _os_crash();
    __break(1u);
LABEL_276:
    re::internal::assertLog((re::internal *)4, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "appendMesh", 216);
    _os_crash();
    __break(1u);
LABEL_277:
    re::internal::assertLog((re::internal *)4, v111, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->size() == mergedAttrVertexCount", "appendMesh", 328);
    _os_crash();
    __break(1u);
LABEL_278:
    re::internal::assertLog((re::internal *)4, (uint64_t)v52, "assertion failure: '%s' (%s:line %i) ", "dstAttribute != nullptr", "appendMesh", 223);
    _os_crash();
    __break(1u);
LABEL_279:
    re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_280:
    re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_281:
    re::internal::assertLog((re::internal *)4, v69, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_282:
    re::internal::assertLog((re::internal *)4, v69, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_283:
    re::internal::assertLog((re::internal *)4, v69, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_284:
    re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_285:
    re::internal::assertLog((re::internal *)4, v80, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_286:
    re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_287:
    re::internal::assertLog((re::internal *)4, v100, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
LABEL_288:
    re::internal::assertLog((re::internal *)4, v80, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
  }
LABEL_25:
  if (*(void *)v138 && *(void *)&v138[32]) {
    (*(void (**)(void))(**(void **)v138 + 40))();
  }
  if (*(void *)&v141[0] && *(void *)&v141[2]) {
    (*(void (**)(void))(**(void **)&v141[0] + 40))();
  }
  *(void *)&v141[2] = 0;
  memset(v141, 0, 28);
  *(void *)&v138[32] = 0;
  memset(v138, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v141, v120);
  re::DynamicArray<float>::resize((uint64_t)v138, v120);
  if (v120)
  {
    float32x4_t v31 = 0;
    float32x4_t v28 = *(re::GeomMeshBuilder **)&v141[1];
    uint64_t v32 = *(void *)&v141[2];
    unint64_t v4 = *(void *)&v138[16];
    uint64_t v33 = *(void *)&v138[32];
    while (v28 != v31)
    {
      *(_DWORD *)(v32 + 4 * (void)v31) = v31;
      if ((re::GeomMeshBuilder *)v4 == v31) {
        goto LABEL_271;
      }
      *(_DWORD *)(v33 + 4 * (void)v31) = v6 + v31;
      float32x4_t v31 = (re::GeomMeshBuilder *)((char *)v31 + 1);
      if ((re::GeomMeshBuilder *)v120 == v31) {
        goto LABEL_36;
      }
    }
    goto LABEL_270;
  }
LABEL_36:
  if (*(void *)v138 && *(void *)&v138[32]) {
    (*(void (**)(void))(**(void **)v138 + 40))();
  }
  uint64_t result = *(void *)&v141[0];
  if (*(void *)&v141[0] && *(void *)&v141[2]) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)&v141[0] + 40))();
  }
  uint64_t v16 = *((unsigned int *)v122 + 134);
  if (!v16) {
    goto LABEL_64;
  }
  unsigned int v35 = 0;
  unint64_t v8 = (unint64_t)v122 + 512;
  do
  {
    unint64_t v2 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v8, v35);
    uint64_t v36 = re::internal::GeomAttributeManager::attributeByName(v22, *(const char **)(v2 + 8));
    if (v36)
    {
      unint64_t v38 = v36;
      if (*(unsigned __int8 *)(v36 + 17) != *(unsigned __int8 *)(v2 + 17)) {
        goto LABEL_272;
      }
      if (*(unsigned __int8 *)(v36 + 16) != *(unsigned __int8 *)(v2 + 16)) {
        goto LABEL_273;
      }
    }
    else
    {
      int v39 = *(unsigned __int8 *)(v2 + 16);
      if (v39 == 3) {
        unint64_t v38 = 0;
      }
      else {
        unint64_t v38 = (unint64_t)re::internal::GeomAttributeManager::addAttribute(v22, *(char **)(v2 + 8), v39, *(unsigned __int8 *)(v2 + 17));
      }
    }
    uint64_t result = (*(uint64_t (**)(unint64_t))(*(void *)v2 + 16))(v2);
    if (!result) {
      goto LABEL_63;
    }
    unint64_t v40 = result;
    *(void *)&v141[2] = 0;
    memset(v141, 0, 28);
    *(void *)&v138[32] = 0;
    memset(v138, 0, 28);
    int v41 = (*(uint64_t (**)(unint64_t))(*(void *)v38 + 16))(v38);
    uint64_t v42 = (v41 + v40);
    (*(void (**)(unint64_t, uint64_t))(*(void *)v38 + 24))(v38, v42);
    re::DynamicArray<float>::resize((uint64_t)v141, v40);
    re::DynamicArray<float>::resize((uint64_t)v138, v40);
    if ((*(unsigned int (**)(unint64_t))(*(void *)v38 + 16))(v38) != v42) {
      goto LABEL_274;
    }
    uint64_t v44 = 0;
    unint64_t v4 = *(void *)&v141[1];
    uint64_t v45 = *(void *)&v141[2];
    int v46 = v41;
    long long v47 = *(re::GeomMeshBuilder **)&v138[16];
    uint64_t v48 = *(void *)&v138[32];
    do
    {
      if ((re::GeomMeshBuilder *)v4 == v44)
      {
        *(void *)&v145[0] = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v135 = 136315906;
        *(void *)&v135[4] = "operator[]";
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = 789;
        *(_WORD *)&v135[18] = 2048;
        *(void *)&v135[20] = v4;
        *(_WORD *)&v135[28] = 2048;
        *(void *)&v135[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_255:
        *(void *)&v145[0] = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v135 = 136315906;
        *(void *)&v135[4] = "operator[]";
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = 789;
        *(_WORD *)&v135[18] = 2048;
        *(void *)&v135[20] = v47;
        *(_WORD *)&v135[28] = 2048;
        *(void *)&v135[30] = v47;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_256;
      }
      *(_DWORD *)(v45 + 4 * (void)v44) = v44;
      if (v47 == v44) {
        goto LABEL_255;
      }
      *(_DWORD *)(v48 + 4 * (void)v44) = v46 + v44;
      uint64_t v44 = (re::GeomMeshBuilder *)((char *)v44 + 1);
    }
    while ((re::GeomMeshBuilder *)v40 != v44);
    (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v2 + 40))(v2, v38, v40);
    if (*(void *)v138 && *(void *)&v138[32]) {
      (*(void (**)(void))(**(void **)v138 + 40))();
    }
    uint64_t result = *(void *)&v141[0];
    float32x4_t v22 = (re::internal::GeomAttributeManager *)(v116 + 48);
    if (*(void *)&v141[0] && *(void *)&v141[2]) {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)&v141[0] + 40))();
    }
LABEL_63:
    ++v35;
  }
  while (v35 != v16);
LABEL_64:
  int v115 = *((_DWORD *)v122 + 106);
  if (v115)
  {
    unsigned int v49 = 0;
    do
    {
      uint64_t v50 = re::internal::GeomAttributeContainer::attributeByIndex((const re::GeomMesh *)((char *)v122 + 400), v49);
      uint64_t v51 = re::internal::GeomAttributeManager::attributeByName(v22, *(const char **)(v50 + 8));
      if (v51)
      {
        long long v53 = (re::internal *)v51;
        if (*(unsigned __int8 *)(v51 + 17) != *(unsigned __int8 *)(v50 + 17)) {
          goto LABEL_275;
        }
        if (*(unsigned __int8 *)(v51 + 16) != *(unsigned __int8 *)(v50 + 16)) {
          goto LABEL_276;
        }
      }
      else
      {
        LODWORD(v147) = 0;
        *((void *)&v149 + 1) = 0;
        long long v148 = 0uLL;
        *((void *)&v147 + 1) = 0;
        LODWORD(v149) = 0;
        re::DynamicArray<re::BlendNode>::setCapacity((void *)&v147 + 1, 1uLL);
        LODWORD(v149) = v149 + 1;
        uint64_t v102 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((uint64_t)v116, *(const char **)(v50 + 8), *(unsigned __int8 *)(v50 + 17), (uint64_t)&v147);
        if (!v102) {
          goto LABEL_278;
        }
        long long v53 = (re::internal *)v102;
        if (*((void *)&v147 + 1))
        {
          long long v52 = (const re::GeomAttribute *)*((void *)&v149 + 1);
          if (*((void *)&v149 + 1)) {
            (*(void (**)(void))(**((void **)&v147 + 1) + 40))();
          }
        }
      }
      unsigned int v118 = v49;
      uint64_t v117 = v50;
      uint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v50, v52);
      uint64_t v119 = v53;
      uint64_t v55 = re::internal::accessFaceVaryingAttributeSubmesh(v53, v54);
      unint64_t v56 = *(unsigned int *)v16;
      uint64_t v57 = *(void *)(v16 + 24);
      unsigned int v58 = *(_DWORD *)v55;
      unint64_t v8 = *(void *)(v55 + 24);
      unsigned int v130 = *(_DWORD *)v55;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v131, (uint64_t *)(v55 + 8));
      if (!(void)v132) {
        re::DynamicArray<re::BlendNode>::setCapacity(&v131, 1uLL);
      }
      unsigned int v130 = v58 + v56;
      unint64_t v59 = (v8 + v57);
      size_t v60 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::resize(&v131, v59);
      unsigned int v121 = v57;
      if (v57)
      {
        uint64_t v61 = 0;
        unint64_t v4 = *(void *)(v16 + 24);
        unint64_t v38 = *((void *)&v132 + 1);
        uint64_t v62 = v134;
        int32x2_t v63 = vdup_n_s32(v58);
        unsigned int v64 = (_DWORD *)(*(void *)(v16 + 40) + 12);
        while ((re::GeomMeshBuilder *)v4 != v61)
        {
          unint64_t v2 = (v8 + v61);
          if (v38 <= v2) {
            goto LABEL_257;
          }
          int v65 = *(v64 - 1);
          if (*v64 == -1) {
            int v66 = -1;
          }
          else {
            int v66 = *v64 + v58;
          }
          uint64_t v67 = (int32x2_t *)(v62 + 16 * v2);
          *uint64_t v67 = vadd_s32(*(int32x2_t *)(v64 - 3), v63);
          v67[1].i32[0] = v65 + v58;
          v67[1].i32[1] = v66;
          uint64_t v61 = (re::GeomMeshBuilder *)((char *)v61 + 1);
          v64 += 4;
          if ((re::GeomMeshBuilder *)v121 == v61) {
            goto LABEL_79;
          }
        }
LABEL_256:
        *(void *)float v138 = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v141[0]) = 136315906;
        *(void *)((char *)v141 + 4) = "operator[]";
        WORD6(v141[0]) = 1024;
        *(_DWORD *)((char *)v141 + 14) = 797;
        WORD1(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 4) = v4;
        WORD6(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 14) = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_257:
        *(void *)float v138 = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v141[0]) = 136315906;
        *(void *)((char *)v141 + 4) = "operator[]";
        WORD6(v141[0]) = 1024;
        *(_DWORD *)((char *)v141 + 14) = 789;
        WORD1(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 4) = v2;
        WORD6(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 14) = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_258:
        uint64_t v125 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v145[0]) = 136315906;
        *(void *)((char *)v145 + 4) = "operator[]";
        WORD6(v145[0]) = 1024;
        *(_DWORD *)((char *)v145 + 14) = 789;
        WORD1(v145[1]) = 2048;
        *(void *)((char *)&v145[1] + 4) = v16;
        WORD6(v145[1]) = 2048;
        *(void *)((char *)&v145[1] + 14) = v16;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_259:
        uint64_t v125 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v145[0]) = 136315906;
        *(void *)((char *)v145 + 4) = "operator[]";
        WORD6(v145[0]) = 1024;
        *(_DWORD *)((char *)v145 + 14) = 789;
        WORD1(v145[1]) = 2048;
        *(void *)((char *)&v145[1] + 4) = v4;
        WORD6(v145[1]) = 2048;
        *(void *)((char *)&v145[1] + 14) = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_260:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v4;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_261:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v4;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_262:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v8;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_263:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v4;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_264:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v2;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_265:
        *(void *)float32x4_t v135 = 0;
        long long v142 = 0u;
        long long v143 = 0u;
        memset(v141, 0, sizeof(v141));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float v138 = 136315906;
        *(void *)&v138[4] = "operator[]";
        *(_WORD *)&v138[12] = 1024;
        *(_DWORD *)&v138[14] = 789;
        *(_WORD *)&v138[18] = 2048;
        *(void *)&v138[20] = v4;
        *(_WORD *)&v138[28] = 2048;
        *(void *)&v138[30] = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_266:
        *(void *)float v138 = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v141[0]) = 136315906;
        *(void *)((char *)v141 + 4) = "operator[]";
        WORD6(v141[0]) = 1024;
        *(_DWORD *)((char *)v141 + 14) = 797;
        WORD1(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 4) = v16;
        WORD6(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 14) = v16;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_267:
        *(void *)float v138 = 0;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v147 = 0u;
        float32x4_t v28 = (re::GeomMeshBuilder *)v138;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v141[0]) = 136315906;
        *(void *)((char *)v141 + 4) = "operator[]";
        WORD6(v141[0]) = 1024;
        *(_DWORD *)((char *)v141 + 14) = 789;
        WORD1(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 4) = v8;
        WORD6(v141[1]) = 2048;
        *(void *)((char *)&v141[1] + 14) = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_268;
      }
LABEL_79:
      LODWORD(v147) = 0;
      *((void *)&v149 + 1) = 0;
      long long v148 = 0uLL;
      *((void *)&v147 + 1) = 0;
      LODWORD(v149) = 0;
      unint64_t v68 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendNode>::setCapacity((void *)&v147 + 1, 1uLL);
      LODWORD(v149) = v149 + 1;
      *(void *)&long long v150 = 0xFFFFFFFF00000000;
      DWORD2(v150) = -1;
      BYTE12(v150) = 0;
      LODWORD(v151) = 0;
      unint64_t v152 = 0xFFFFFFFF00000000;
      unint64_t v38 = 0xFFFFFFFFLL;
      int v153 = -1;
      char v154 = 0;
      int v155 = 0;
      if (v8 == v6 && v121 == v120)
      {
        *(void *)&_OWORD v145[2] = 0;
        memset(v145, 0, 28);
        uint64_t v129 = 0;
        uint64_t v126 = 0;
        unint64_t v127 = 0;
        uint64_t v125 = 0;
        int v128 = 0;
        re::DynamicArray<float>::resize((uint64_t)v145, v59);
        re::DynamicArray<float>::resize((uint64_t)&v125, v59);
        if (v6)
        {
          unint64_t v8 = 0;
          unint64_t v70 = (unsigned int *)(v55 + 64);
          do
          {
            LODWORD(v141[0]) = v8;
            int v71 = *(unsigned __int8 *)(v55 + 60);
            if (v71 == 2)
            {
              uint64_t v72 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v55 + 64), (unsigned int *)v141);
              if (v72 == -1) {
                unint64_t v2 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v2 = *(unsigned int *)(*(void *)(v55 + 72) + 8 * v72 + 4);
              }
            }
            else if (v71 == 1)
            {
              unint64_t v73 = *(void *)(v55 + 80);
              if (v73 <= v8)
              {
                LODWORD(v141[0]) = v8;
                unint64_t v2 = 0xFFFFFFFFLL;
LABEL_99:
                if (v73 > v8)
                {
                  int v75 = *(_DWORD *)(*(void *)(v55 + 96) + 4 * v8);
                  goto LABEL_107;
                }
                goto LABEL_106;
              }
              unint64_t v2 = *(unsigned int *)(*(void *)(v55 + 96) + 4 * v8);
            }
            else
            {
              if (*(unsigned char *)(v55 + 60)) {
                goto LABEL_281;
              }
              if (v8 >= *v70) {
                unint64_t v2 = 0xFFFFFFFFLL;
              }
              else {
                unint64_t v2 = v8;
              }
            }
            int v74 = *(unsigned __int8 *)(v55 + 60);
            LODWORD(v141[0]) = v8;
            if (v74)
            {
              if (v74 != 2)
              {
                if (v74 != 1) {
                  goto LABEL_283;
                }
                unint64_t v73 = *(void *)(v55 + 80);
                goto LABEL_99;
              }
              uint64_t v76 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v55 + 64), (unsigned int *)v141);
              if (v76 != -1)
              {
                int v75 = *(_DWORD *)(*(void *)(v55 + 72) + 8 * v76 + 4);
                goto LABEL_107;
              }
LABEL_106:
              int v75 = -1;
              goto LABEL_107;
            }
            if (v8 >= *v70) {
              int v75 = -1;
            }
            else {
              int v75 = v8;
            }
LABEL_107:
            unint64_t v4 = *(void *)&v145[1];
            if (*(void *)&v145[1] <= v8) {
              goto LABEL_262;
            }
            *(_DWORD *)(*(void *)&v145[2] + 4 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v75;
            unint64_t v4 = v2;
            unint64_t v38 = v127;
            if (v127 <= v2) {
              goto LABEL_263;
            }
            *(_DWORD *)(v129 + 4 * v2) = v8++;
          }
          while (v6 != v8);
        }
        unint64_t v38 = v120;
        if (v120)
        {
          unint64_t v8 = 0;
          while (1)
          {
            LODWORD(v141[0]) = v8;
            int v77 = *(unsigned __int8 *)(v16 + 60);
            if (v77 == 2) {
              break;
            }
            if (v77 == 1)
            {
              if (*(void *)(v16 + 80) > v8)
              {
                int v78 = *(_DWORD *)(*(void *)(v16 + 96) + 4 * v8);
                goto LABEL_123;
              }
              goto LABEL_122;
            }
            if (*(unsigned char *)(v16 + 60)) {
              goto LABEL_282;
            }
            if (v8 >= *(unsigned int *)(v16 + 64)) {
              int v78 = -1;
            }
            else {
              int v78 = v8;
            }
LABEL_123:
            unint64_t v2 = (v6 + v8);
            unint64_t v4 = *(void *)&v145[1];
            if (*(void *)&v145[1] <= v2) {
              goto LABEL_264;
            }
            unint64_t v4 = (v78 + v6);
            *(_DWORD *)(*(void *)&v145[2] + 4 * v2) = v4;
            unint64_t v2 = v127;
            if (v127 <= v4) {
              goto LABEL_265;
            }
            *(_DWORD *)(v129 + 4 * v4) = v6 + v8++;
            if (v120 == v8) {
              goto LABEL_126;
            }
          }
          uint64_t v79 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v16 + 64), (unsigned int *)v141);
          if (v79 != -1)
          {
            int v78 = *(_DWORD *)(*(void *)(v16 + 72) + 8 * v79 + 4);
            goto LABEL_123;
          }
LABEL_122:
          int v78 = -1;
          goto LABEL_123;
        }
LABEL_126:
        re::GeomIndexMap::GeomIndexMap((uint64_t)v138, (uint64_t)v145);
        re::GeomIndexMap::GeomIndexMap((uint64_t)v135, (uint64_t)&v125);
        LODWORD(v141[0]) = v130;
        *((void *)&v141[0] + 1) = v131;
        v141[1] = v132;
        *((void *)&v141[2] + 1) = v134;
        uint64_t v134 = 0;
        LODWORD(v141[2]) = 1;
        unsigned int v130 = 0;
        uint64_t v131 = 0;
        long long v132 = 0uLL;
        v133 += 2;
        re::GeomIndexMap::GeomIndexMap((uint64_t)&v142, (uint64_t)v138);
        re::GeomIndexMap::GeomIndexMap((uint64_t)v144, (uint64_t)v135);
        if (v135[12])
        {
          if (v135[12] == 2)
          {
            uint64_t v81 = v137;
            if (!v137) {
              goto LABEL_219;
            }
            if (*(void *)&v135[24]) {
              *(void *)&v135[24] = 0;
            }
            uint64_t v80 = *(void *)&v135[16];
            if (!*(void *)&v135[16]) {
              goto LABEL_219;
            }
          }
          else
          {
            if (v135[12] != 1) {
              goto LABEL_285;
            }
            uint64_t v81 = *(void *)&v135[16];
            if (!*(void *)&v135[16]) {
              goto LABEL_219;
            }
            uint64_t v80 = v136;
            if (!v136) {
              goto LABEL_219;
            }
          }
          (*(void (**)(uint64_t))(*(void *)v81 + 40))(v81);
        }
LABEL_219:
        if (v138[12])
        {
          if (v138[12] == 2)
          {
            if (v140)
            {
              if (*(void *)&v138[24]) {
                *(void *)&v138[24] = 0;
              }
              if (*(void *)&v138[16])
              {
                (*(void (**)(void))(*(void *)v140 + 40))();
                size_t v106 = &v138[16];
LABEL_230:
                *size_t v106 = 0;
              }
            }
          }
          else
          {
            if (v138[12] != 1) {
              goto LABEL_288;
            }
            if (*(void *)&v138[16])
            {
              size_t v106 = v139;
              if (v139[0])
              {
                (*(void (**)(void))(**(void **)&v138[16] + 40))();
                size_t v106 = v139;
              }
              goto LABEL_230;
            }
          }
        }
        re::internal::GeomAttributeFaceVaryingSubmesh::operator=(&v147, v141);
        re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v141, v107);
        if (v125 && v129) {
          (*(void (**)(void))(*(void *)v125 + 40))();
        }
        uint64_t v105 = *(void *)&v145[0];
        if (!*(void *)&v145[0] || !*(void *)&v145[2]) {
          goto LABEL_237;
        }
        goto LABEL_236;
      }
      uint64_t v129 = 0;
      uint64_t v126 = 0;
      unint64_t v127 = 0;
      uint64_t v125 = 0;
      int v128 = 0;
      long long v146 = 0u;
      memset(v145, 0, sizeof(v145));
      re::DynamicArray<float>::resize((uint64_t)&v125, v59);
      unsigned int v124 = 0;
      if (v8)
      {
        unsigned int v83 = 0;
        long long v84 = (unsigned int *)(v55 + 64);
        do
        {
          unsigned int v123 = 0;
          LODWORD(v141[0]) = v83;
          int v85 = *(unsigned __int8 *)(v55 + 60);
          if (v85 == 2)
          {
            uint64_t v91 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v55 + 64), (unsigned int *)v141);
            if (v91 == -1)
            {
              unsigned int v92 = -1;
              goto LABEL_148;
            }
            int v90 = (unsigned int *)(*(void *)(v55 + 72) + 8 * v91 + 4);
          }
          else
          {
            if (v85 != 1)
            {
              if (*(unsigned char *)(v55 + 60)) {
                goto LABEL_279;
              }
              unsigned int v86 = *v84;
              if (*v84 <= v83) {
                unsigned int v87 = -1;
              }
              else {
                unsigned int v87 = v83;
              }
              unsigned int v123 = v87;
LABEL_152:
              if (v86 <= v83) {
                unsigned int v83 = -1;
              }
              goto LABEL_160;
            }
            unint64_t v88 = v83;
            unint64_t v89 = *(void *)(v55 + 80);
            if (v89 <= v83)
            {
              unsigned int v123 = -1;
              LODWORD(v141[0]) = v83;
              goto LABEL_157;
            }
            int v90 = (unsigned int *)(*(void *)(v55 + 96) + 4 * v83);
          }
          unsigned int v92 = *v90;
LABEL_148:
          int v93 = *(unsigned __int8 *)(v55 + 60);
          unsigned int v123 = v92;
          unsigned int v83 = v124;
          LODWORD(v141[0]) = v124;
          if (v93 == 2)
          {
            uint64_t v94 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v55 + 64), (unsigned int *)v141);
            if (v94 == -1) {
              goto LABEL_159;
            }
            unsigned int v83 = *(_DWORD *)(*(void *)(v55 + 72) + 8 * v94 + 4);
            goto LABEL_160;
          }
          if (v93 != 1)
          {
            if (v93) {
              goto LABEL_284;
            }
            unsigned int v86 = *v84;
            goto LABEL_152;
          }
          unint64_t v89 = *(void *)(v55 + 80);
          unint64_t v88 = v124;
LABEL_157:
          if (v89 <= v88)
          {
LABEL_159:
            unsigned int v83 = -1;
            goto LABEL_160;
          }
          unsigned int v83 = *(_DWORD *)(*(void *)(v55 + 96) + 4 * v88);
LABEL_160:
          unint64_t v4 = v124;
          unint64_t v2 = v127;
          if (v127 <= v124) {
            goto LABEL_260;
          }
          *(_DWORD *)(v129 + 4 * v124) = v83;
          if (re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v145, &v123) == -1)re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd((_anonymous_namespace_ *)v145, &v123, &v124); {
          unsigned int v83 = v124 + 1;
          }
          unsigned int v124 = v83;
        }
        while (v83 < v8);
      }
      if (v121)
      {
        unint64_t v95 = 0;
        unint64_t v2 = v121;
        do
        {
          unsigned int v124 = 0;
          LODWORD(v141[0]) = v95;
          int v96 = *(unsigned __int8 *)(v16 + 60);
          if (v96 == 2)
          {
            uint64_t v98 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v16 + 64), (unsigned int *)v141);
            if (v98 == -1) {
              goto LABEL_176;
            }
            int v97 = *(_DWORD *)(*(void *)(v16 + 72) + 8 * v98 + 4);
          }
          else
          {
            if (v96 != 1)
            {
              if (*(unsigned char *)(v16 + 60)) {
                goto LABEL_280;
              }
              if (v95 >= *(unsigned int *)(v16 + 64)) {
                int v97 = -1;
              }
              else {
                int v97 = v95;
              }
              goto LABEL_177;
            }
            if (*(void *)(v16 + 80) <= v95)
            {
LABEL_176:
              int v97 = -1;
              goto LABEL_177;
            }
            int v97 = *(_DWORD *)(*(void *)(v16 + 96) + 4 * v95);
          }
LABEL_177:
          unsigned int v99 = v97 + v6;
          unsigned int v124 = v99;
          unint64_t v4 = (v8 + v95);
          unint64_t v38 = v127;
          if (v127 <= v4) {
            goto LABEL_261;
          }
          *(_DWORD *)(v129 + 4 * v4) = v99;
          LODWORD(v141[0]) = v8 + v95;
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)v145, &v124, (unsigned int *)v141);
          ++v95;
        }
        while (v121 != v95);
      }
      re::GeomIndexMap::GeomIndexMap((uint64_t)v138, (uint64_t)&v125);
      re::GeomIndexMap::GeomIndexMap((unsigned int *)v135, (uint64_t *)v145);
      LODWORD(v141[0]) = v130;
      *((void *)&v141[0] + 1) = v131;
      v141[1] = v132;
      *((void *)&v141[2] + 1) = v134;
      uint64_t v134 = 0;
      LODWORD(v141[2]) = 1;
      unsigned int v130 = 0;
      uint64_t v131 = 0;
      long long v132 = 0uLL;
      v133 += 2;
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v142, (uint64_t)v138);
      re::GeomIndexMap::GeomIndexMap((uint64_t)v144, (uint64_t)v135);
      if (v135[12])
      {
        if (v135[12] == 2)
        {
          uint64_t v101 = v137;
          if (v137)
          {
            if (*(void *)&v135[24]) {
              *(void *)&v135[24] = 0;
            }
            uint64_t v100 = *(void *)&v135[16];
            if (*(void *)&v135[16]) {
              goto LABEL_193;
            }
          }
        }
        else
        {
          if (v135[12] != 1) {
            goto LABEL_286;
          }
          uint64_t v101 = *(void *)&v135[16];
          if (*(void *)&v135[16])
          {
            uint64_t v100 = v136;
            if (v136) {
LABEL_193:
            }
              (*(void (**)(uint64_t))(*(void *)v101 + 40))(v101);
          }
        }
      }
      switch(v138[12])
      {
        case 0:
          break;
        case 2:
          if (v140)
          {
            if (*(void *)&v138[24]) {
              *(void *)&v138[24] = 0;
            }
            if (*(void *)&v138[16])
            {
              (*(void (**)(void))(*(void *)v140 + 40))();
              __int16 v103 = &v138[16];
LABEL_205:
              *__int16 v103 = 0;
            }
          }
          break;
        case 1:
          if (*(void *)&v138[16])
          {
            __int16 v103 = v139;
            if (v139[0])
            {
              (*(void (**)(void))(**(void **)&v138[16] + 40))();
              __int16 v103 = v139;
            }
            goto LABEL_205;
          }
          break;
        default:
          goto LABEL_287;
      }
      re::internal::GeomAttributeFaceVaryingSubmesh::operator=(&v147, v141);
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v141, v104);
      if (*((void *)&v146 + 1))
      {
        if (*((void *)&v145[0] + 1)) {
          *((void *)&v145[0] + 1) = 0;
        }
        if (*(void *)&v145[0]) {
          (*(void (**)(void))(**((void **)&v146 + 1) + 40))();
        }
      }
      uint64_t v105 = v125;
      if (!v125 || !v129) {
        goto LABEL_237;
      }
LABEL_236:
      (*(void (**)(uint64_t))(*(void *)v105 + 40))(v105);
LABEL_237:
      uint64_t updated = re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh((void *)v116 + 6, *((char **)v119 + 1), (uint64_t)&v147);
      if (v56)
      {
        uint64_t v110 = updated;
        *(void *)&v138[32] = 0;
        memset(v138, 0, 28);
        *(void *)&v135[32] = 0;
        memset(v135, 0, 28);
        re::DynamicArray<float>::resize((uint64_t)v138, v56);
        re::DynamicArray<float>::resize((uint64_t)v135, v56);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v110 + 16))(v110) != v58 + v56) {
          goto LABEL_277;
        }
        long long v112 = 0;
        uint64_t v16 = *(void *)&v138[16];
        uint64_t v113 = *(void *)&v138[32];
        unint64_t v4 = *(void *)&v135[16];
        uint64_t v114 = *(void *)&v135[32];
        do
        {
          if ((re::GeomMeshBuilder *)v16 == v112) {
            goto LABEL_258;
          }
          *(_DWORD *)(v113 + 4 * (void)v112) = v112;
          if ((re::GeomMeshBuilder *)v4 == v112) {
            goto LABEL_259;
          }
          *(_DWORD *)(v114 + 4 * (void)v112) = v58 + v112;
          long long v112 = (re::GeomMeshBuilder *)((char *)v112 + 1);
        }
        while ((re::GeomMeshBuilder *)v56 != v112);
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v117 + 40))(v117, v110, v56);
        if (*(void *)v135)
        {
          uint64_t v109 = *(void *)&v135[32];
          if (*(void *)&v135[32]) {
            (*(void (**)(void))(**(void **)v135 + 40))();
          }
        }
        if (*(void *)v138)
        {
          uint64_t v109 = *(void *)&v138[32];
          if (*(void *)&v138[32]) {
            (*(void (**)(void))(**(void **)v138 + 40))();
          }
        }
      }
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v147, v109);
      uint64_t result = v131;
      if (v131)
      {
        if (v134) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)v131 + 40))();
        }
      }
      unsigned int v49 = v118 + 1;
      float32x4_t v22 = (re::internal::GeomAttributeManager *)(v116 + 48);
    }
    while (v118 + 1 != v115);
  }
  return result;
}

uint64_t re::anonymous namespace'::addAttributeAndCopyValuesHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = a3;
  uint64_t v11 = (re::internal::GeomAttributeContainer *)(a1 + 64);
  uint64_t result = re::internal::GeomAttributeManager::attributeCount(a1 + 64, a3);
  if (!result) {
    return result;
  }
  int v13 = result;
  uint64_t v14 = 0;
  uint64_t v15 = (re::internal::GeomAttributeManager *)(a2 + 48);
  while (1)
  {
    uint64_t v16 = re::internal::GeomAttributeManager::attributeByIndex(v11, v14, v9);
    uint64_t result = re::internal::GeomAttributeManager::attributeByName(v15, *(const char **)(v16 + 8));
    if (!result)
    {
      int v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 3) {
        goto LABEL_15;
      }
      uint64_t result = (uint64_t)re::internal::GeomAttributeManager::addAttribute(v15, *(char **)(v16 + 8), v18, *(unsigned __int8 *)(v16 + 17));
      uint64_t v17 = result;
      if (!result) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
    uint64_t v17 = result;
    if (*(unsigned __int8 *)(result + 17) != *(unsigned __int8 *)(v16 + 17)) {
      break;
    }
    if (*(unsigned __int8 *)(result + 16) != *(unsigned __int8 *)(v16 + 16)) {
      goto LABEL_14;
    }
LABEL_9:
    if (a4) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v17, a4, a5, a6);
    }
    uint64_t v14 = (v14 + 1);
    if (v13 == v14) {
      return result;
    }
  }
  re::internal::assertLog((re::internal *)4, result, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->type() == srcAttribute->type()", "addAttributeAndCopyValuesHelper", 32);
  _os_crash();
  __break(1u);
LABEL_14:
  re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "dstAttribute->rate() == srcAttribute->rate()", "addAttributeAndCopyValuesHelper", 33);
  _os_crash();
  __break(1u);
LABEL_15:
  re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "dstAttribute != nullptr", "addAttributeAndCopyValuesHelper", 36);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::GeomMesh *re::internal::compareMeshes@<X0>(re::internal *this@<X0>, const re::GeomMesh *a2@<X1>, const re::GeomMesh *a3@<X2>, float a4@<S0>, uint64_t a5@<X8>)
{
  uint64_t v6 = (const char *)a3;
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v11 = re::internal::GeomAttributeManager::attributeByName((re::internal *)((char *)this + 64), (const char *)a3);
    uint64_t v12 = re::internal::GeomAttributeManager::attributeByName((const re::GeomMesh *)((char *)a2 + 64), v6);
    if ((v11 != 0) != (v12 != 0))
    {
      *(void *)a5 = 0;
      *(_DWORD *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      bzero((void *)(a5 + 16), 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(a5 + 16));
      *(void *)(a5 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      return re::GeomMesh::copy(a2, (re::GeomMesh *)a5);
    }
    unint64_t v14 = v12;
    if (v11) {
      BOOL v15 = v12 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    LODWORD(v6) = !v15;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v14 = 0;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)a5, 0);
  bzero(&v51, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v52);
  uint64_t v16 = v55;
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v55, "vertexPosition", 1, 7);
  if (v6)
  {
    uint64_t v50 = 0;
    unint64_t v48 = 0;
    v47[0] = 0;
    v47[1] = 0;
    int v49 = 0;
    uint64_t v46 = 0;
    unint64_t v44 = 0;
    v43[0] = 0;
    v43[1] = 0;
    int v45 = 0;
    uint64_t v42 = 0;
    unint64_t v40 = 0;
    v39[0] = 0;
    v39[1] = 0;
    int v41 = 0;
    uint64_t v38 = 0;
    unint64_t v36 = 0;
    v35[0] = 0;
    v35[1] = 0;
    int v37 = 0;
    uint64_t v34 = 0;
    unint64_t v32 = 0;
    v31[0] = 0;
    v31[1] = 0;
    int v33 = 0;
    uint64_t v30 = 0;
    unint64_t v28 = 0;
    v27[0] = 0;
    v27[1] = 0;
    int v29 = 0;
    unsigned int v17 = v48;
    unsigned int v18 = v36;
    if (v48 | v36)
    {
      unsigned int v19 = 0;
      unsigned int v20 = 0;
      while (1)
      {
        re::GeomMesh::GeomMesh((re::GeomMesh *)v26, 0);
        re::GeomMesh::GeomMesh((re::GeomMesh *)v25, 0);
        if (v20 == v17) {
          break;
        }
        unint64_t v21 = v32;
        if (v32 <= v19)
        {
          uint64_t v56 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v62 = 136315906;
          int32x2_t v63 = "operator[]";
          __int16 v64 = 1024;
          int v65 = 789;
          __int16 v66 = 2048;
          unint64_t v67 = v19;
          __int16 v68 = 2048;
          uint64_t v69 = (unsigned char *)v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_53:
          uint64_t v56 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v57 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v62 = 136315906;
          int32x2_t v63 = "operator[]";
          __int16 v64 = 1024;
          int v65 = 789;
          __int16 v66 = 2048;
          unint64_t v67 = v21;
          __int16 v68 = 2048;
          uint64_t v69 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unint64_t v21 = v20;
        uint64_t v16 = (unsigned char *)v44;
        if (v44 <= v20) {
          goto LABEL_53;
        }
        int v22 = *(_DWORD *)(v34 + 4 * v19);
        int v23 = *(_DWORD *)(v46 + 4 * v20);
        if (v22 < v23) {
          break;
        }
        if (v19 != v18 && v23 >= v22)
        {
          re::GeomMesh::operator=((re::GeomMesh *)v26, (re::GeomMesh *)&v57);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v57);
          re::GeomMesh::operator=((re::GeomMesh *)v25, (re::GeomMesh *)&v57);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v57);
          ++v20;
          goto LABEL_21;
        }
        re::GeomMesh::operator=((re::GeomMesh *)v26, (re::GeomMesh *)&v57);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v57);
        ++v20;
LABEL_22:
        re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)&v51, (const re::GeomMesh *)&v57);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v57);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)v25);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)v26);
        if (v20 >= v17 && v19 >= v18) {
          goto LABEL_30;
        }
      }
      re::GeomMesh::operator=((re::GeomMesh *)v25, (re::GeomMesh *)&v57);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v57);
LABEL_21:
      ++v19;
      goto LABEL_22;
    }
LABEL_30:
    if (v27[0] && v30) {
      (*(void (**)(void))(*(void *)v27[0] + 40))();
    }
    if (v31[0] && v34) {
      (*(void (**)(void))(*(void *)v31[0] + 40))();
    }
    if (v35[0] && v38) {
      (*(void (**)(void))(*(void *)v35[0] + 40))();
    }
    if (v39[0] && v42) {
      (*(void (**)(void))(*(void *)v39[0] + 40))();
    }
    if (v43[0] && v46) {
      (*(void (**)(void))(*(void *)v43[0] + 40))();
    }
    if (v47[0] && v50) {
      (*(void (**)(void))(*(void *)v47[0] + 40))();
    }
  }
  else
  {
    re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)&v51, (const re::GeomMesh *)v26);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v26);
  }
  unsigned int v24 = (re *)re::GeomMesh::operator=(a5, &v52);
  re::GeomMesh::setName(v24, v51);
  re::GeomMesh::freeName((re *)&v51);
  re::GeomMesh::freeName((re *)&v51);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v55);
  uint64_t result = (re::GeomMesh *)v53;
  if (v53 && v54) {
    return (re::GeomMesh *)(*(uint64_t (**)(void))(*(void *)v53 + 40))();
  }
  return result;
}

void re::anonymous namespace'::sortFacesByMaterial(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (a2 && (unint64_t v9 = a2, *(_DWORD *)(a1 + 40)))
  {
    re::DynamicArray<float>::resize(a5, *(unsigned int *)(a1 + 40));
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    if (*(_DWORD *)(a1 + 40))
    {
      uint64_t v13 = 0;
      unint64_t v14 = *(void *)(a5 + 16);
      uint64_t v15 = *(void *)(a5 + 32);
      while (v14 != v13)
      {
        *(_DWORD *)(v15 + 4 * v13) = v13;
        if (v12 == ++v13) {
          goto LABEL_7;
        }
      }
      uint64_t v24 = 0;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v27 = 136315906;
      unint64_t v28 = "operator[]";
      __int16 v29 = 1024;
      int v30 = 789;
      __int16 v31 = 2048;
      unint64_t v32 = v14;
      __int16 v33 = 2048;
      unint64_t v34 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_24:
      uint64_t v26 = 0;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v27 = 136315906;
      unint64_t v28 = "operator[]";
      __int16 v29 = 1024;
      int v30 = 601;
      __int16 v31 = 2048;
      unint64_t v32 = v5;
      __int16 v33 = 2048;
      unint64_t v34 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_25:
      uint64_t v26 = 0;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v27 = 136315906;
      unint64_t v28 = "operator[]";
      __int16 v29 = 1024;
      int v30 = 601;
      __int16 v31 = 2048;
      unint64_t v32 = v14;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_7:
    if ((*(unsigned int (**)(unint64_t))(*(void *)v9 + 16))(v9))
    {
      uint64_t v16 = re::internal::GeomTypedAttribute<int>::operator[](v9, 0);
      uint64_t v17 = (*(unsigned int (**)(unint64_t))(*(void *)v9 + 16))(v9);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v24 = v16;
    uint64_t v25 = v17;
    uint64_t v18 = *(void *)(a5 + 32);
    unint64_t v19 = *(void *)(a5 + 16);
    *(void *)&long long v35 = &v24;
    unint64_t v20 = 126 - 2 * __clz(v19);
    if (v19) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    *(void *)(a3 + 16) = 0;
    ++*(_DWORD *)(a3 + 24);
    *(void *)(a4 + 16) = 0;
    ++*(_DWORD *)(a4 + 24);
    unint64_t v22 = *(void *)(a5 + 16);
    if (v22)
    {
      unint64_t v14 = **(unsigned int **)(a5 + 32);
      unint64_t v9 = v25;
      if (v25 <= v14) {
        goto LABEL_25;
      }
      unint64_t v9 = 0;
      unint64_t v14 = *(unsigned int *)(v24 + 4 * v14);
      do
      {
        unint64_t v5 = *(unsigned int *)(*(void *)(a5 + 32) + 4 * v9);
        unint64_t v6 = v25;
        if (v25 <= v5) {
          goto LABEL_24;
        }
        unint64_t v23 = *(unsigned int *)(v24 + 4 * v5);
        if (v23 != v14)
        {
          LODWORD(v35) = v9;
          re::DynamicArray<int>::add((void *)a4, &v35);
          LODWORD(v35) = v14;
          re::DynamicArray<int>::add((void *)a3, &v35);
          unint64_t v22 = *(void *)(a5 + 16);
          unint64_t v14 = v23;
        }
        ++v9;
      }
      while (v9 < v22);
      LODWORD(v35) = v22;
      re::DynamicArray<int>::add((void *)a4, &v35);
      LODWORD(v35) = v14;
      re::DynamicArray<int>::add((void *)a3, &v35);
    }
  }
  else
  {
    re::DynamicArray<float>::resize(a4, 0);
    *(void *)(a5 + 16) = 0;
    ++*(_DWORD *)(a5 + 24);
  }
}

uint64_t re::anonymous namespace'::makeMeshFromMaterial(unint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v31 = 0;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  uint64_t v28 = 0;
  uint64_t v25 = 0;
  memset(v26, 0, sizeof(v26));
  int v27 = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  v22[0] = 0;
  int v24 = 0;
  if (a3)
  {
    unint64_t v11 = a3 - 1;
    if (a5 <= v11)
    {
LABEL_27:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a5);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    unsigned int v12 = *(_DWORD *)(a4 + 4 * v11);
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v13 = a3;
  if (a5 <= a3)
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, a5);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v14 = *(unsigned int *)(a4 + 4 * a3);
  if (v14 != v12) {
    re::DynamicArray<int>::setCapacity(v22, v14 - v12);
  }
  if (v14 > v12)
  {
    if (a7 <= v12) {
      unint64_t v15 = v12;
    }
    else {
      unint64_t v15 = a7;
    }
    uint64_t v16 = (_DWORD *)(a6 + 4 * v12);
    uint64_t v17 = v14 - v12;
    unint64_t v18 = v15 - v12;
    while (v18)
    {
      re::DynamicArray<int>::add(v22, v16++);
      --v18;
      if (!--v17) {
        goto LABEL_15;
      }
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, a7);
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
LABEL_15:
  v21[0] = v25;
  v21[1] = v23;
  v20[0] = 0;
  v20[1] = 0;
  re::makeMeshFromFaces(a2, v21, v20, (uint64_t)v29, (uint64_t)v26, a1);
  if (v22[0] && v25) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  if (v26[0] && v28) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  uint64_t result = v29[0];
  if (v29[0])
  {
    if (v31) {
      return (*(uint64_t (**)(void))(*(void *)v29[0] + 40))(v29[0]);
    }
  }
  return result;
}

re::GeomMesh *re::anonymous namespace'::computeErrorMesh(re::_anonymous_namespace_ *this, const re::GeomMesh *a2, const re::GeomMesh *a3, float a4)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)a2 + 10) || !*((_DWORD *)a3 + 10))
  {
    *(void *)this = 0;
    *((_DWORD *)this + 2) = 0;
    bzero((char *)this + 16, 0x2C8uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::_anonymous_namespace_ *)((char *)this + 16));
    *((void *)this + 91) = 0;
    return re::GeomMesh::copy(a3, this);
  }
  uint64_t v56 = 0;
  v51[0] = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  int v55 = 0;
  re::GeomMeshBVHTree::init((uint64_t)v51, a2);
  uint64_t v7 = re::GeomMesh::accessVertexPositions(a3);
  uint64_t v50 = 0;
  v47[1] = 0;
  unint64_t v48 = 0;
  uint64_t v46 = 0;
  v47[0] = 0;
  int v49 = 0;
  v43[1] = 0;
  unint64_t v44 = 0;
  v43[0] = 0;
  int v45 = 0;
  unint64_t v9 = *((void *)a3 + 5);
  if (!v9) {
    goto LABEL_16;
  }
  unint64_t v10 = v7;
  unint64_t v11 = v8;
  unint64_t v12 = 0;
  uint64_t v13 = &v81;
  do
  {
    long long v14 = 0uLL;
    float32x4_t v82 = 0u;
    float32x4_t v83 = 0u;
    float32x4_t v80 = 0u;
    float32x4_t v81 = 0u;
    if (v9 <= v12) {
      goto LABEL_66;
    }
    uint64_t v15 = 0;
    long long v71 = *(_OWORD *)(*((void *)a3 + 7) + 16 * v12);
    int v16 = HIDWORD(v71);
    if (HIDWORD(v71) == -1) {
      uint64_t v17 = 3;
    }
    else {
      uint64_t v17 = 4;
    }
    unint64_t v18 = &v80;
    do
    {
      unint64_t v9 = *((unsigned int *)&v71 + v15);
      if (v9 >= v11)
      {
        uint64_t v57 = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        *(_OWORD *)long long v58 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v72 = 136315906;
        unint64_t v73 = "operator[]";
        __int16 v74 = 1024;
        int v75 = 601;
        __int16 v76 = 2048;
        unint64_t v77 = v9;
        __int16 v78 = 2048;
        unint64_t v79 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        *(void *)&long long v71 = 0;
        long long v61 = v14;
        long long v62 = v14;
        long long v59 = v14;
        long long v60 = v14;
        *(_OWORD *)long long v58 = v14;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v72 = 136315906;
        unint64_t v73 = "operator[]";
        __int16 v74 = 1024;
        int v75 = 797;
        __int16 v76 = 2048;
        unint64_t v77 = v12;
        __int16 v78 = 2048;
        unint64_t v79 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_67;
      }
      *v18++ = *(float32x4_t *)(v10 + 16 * v9);
      ++v15;
    }
    while (v17 != v15);
    if (v16 == -1) {
    else
    }
    ++v12;
    unint64_t v9 = *((void *)a3 + 5);
  }
  while (v12 < v9);
LABEL_16:
  re::GeomMesh::GeomMesh(this, 0);
  unsigned int v19 = v48;
  int v20 = v44;
  if ((unint64_t)v48 | v44)
  {
    unint64_t v21 = (unint64_t)v48 / 3;
    unint64_t v22 = v44 >> 2;
    bzero(v58, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v58[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v61 + 8), "vertexPosition", 1, 7);
    if ((int)v22 + (int)v21 < v60)
    {
      int v23 = v70;
      if (v70)
      {
        unsigned int v24 = 0;
        do
        {
          uint64_t v25 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v69, v24);
          re::internal::accessFaceVaryingAttributeSubmesh(v25, v26);
          ++v24;
        }
        while (v23 != v24);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v59, (v22 + v21));
    unsigned int v66 = v22 + v21;
    if (v67)
    {
      int v27 = v68;
      uint64_t v28 = 8 * v67;
      do
      {
        uint64_t v29 = *v27++;
        (*(void (**)(uint64_t, void))(*(void *)v29 + 72))(v29, v66);
        v28 -= 8;
      }
      while (v28);
    }
    if (LODWORD(v58[1]) > (v44 + v48)
      && v60
      && (v60 - 1) > (unint64_t)v60)
    {
      while (1)
        ;
    }
    LODWORD(v58[1]) = v44 + v48;
    unsigned int v63 = v44 + v48;
    if (v64)
    {
      uint64_t v31 = v65;
      uint64_t v32 = 8 * v64;
      do
      {
        uint64_t v33 = *v31++;
        (*(void (**)(uint64_t, void))(*(void *)v33 + 72))(v33, v63);
        v32 -= 8;
      }
      while (v32);
    }
    if (v21)
    {
      int v34 = 0;
      unsigned int v35 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v58, v35++, v34, v34 + 1, v34 + 2);
        v34 += 3;
      }
      while (v21 != v35);
    }
    if (v22)
    {
      int v36 = v19;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)v58, v21, v36, v36 + 1, v36 + 2, v36 + 3);
        LODWORD(v21) = v21 + 1;
        v36 += 4;
        LODWORD(v22) = v22 - 1;
      }
      while (v22);
    }
    long long v37 = (re *)re::GeomMesh::operator=((uint64_t)this, &v58[1]);
    re::GeomMesh::setName(v37, v58[0]);
    re::GeomMesh::freeName((re *)v58);
    uint64_t v38 = re::GeomMesh::modifyVertexPositions(this);
    unsigned int v40 = v39;
    if (v19)
    {
      unint64_t v10 = 0;
      unint64_t v11 = v39;
      while (1)
      {
        uint64_t v13 = v48;
        if ((unint64_t)v48 <= v10) {
          break;
        }
        if (v10 == v39) {
          goto LABEL_68;
        }
        *(_OWORD *)(v38 + 16 * v10) = *(_OWORD *)(v50 + 16 * v10);
        if (++v10 == v19) {
          goto LABEL_45;
        }
      }
LABEL_67:
      *(void *)&long long v71 = 0;
      float32x4_t v83 = 0u;
      long long v84 = 0u;
      float32x4_t v81 = 0u;
      float32x4_t v82 = 0u;
      float32x4_t v80 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v72 = 136315906;
      unint64_t v73 = "operator[]";
      __int16 v74 = 1024;
      int v75 = 789;
      __int16 v76 = 2048;
      unint64_t v77 = v10;
      __int16 v78 = 2048;
      unint64_t v79 = (unint64_t)v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      *(void *)&long long v71 = 0;
      float32x4_t v83 = 0u;
      long long v84 = 0u;
      float32x4_t v81 = 0u;
      float32x4_t v82 = 0u;
      float32x4_t v80 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v72 = 136315906;
      unint64_t v73 = "operator[]";
      __int16 v74 = 1024;
      int v75 = 609;
      __int16 v76 = 2048;
      unint64_t v77 = v11;
      __int16 v78 = 2048;
      unint64_t v79 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      *(void *)&long long v71 = 0;
      float32x4_t v83 = 0u;
      long long v84 = 0u;
      float32x4_t v81 = 0u;
      float32x4_t v82 = 0u;
      float32x4_t v80 = 0u;
      unsigned int v40 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v72 = 136315906;
      unint64_t v73 = "operator[]";
      __int16 v74 = 1024;
      int v75 = 789;
      __int16 v76 = 2048;
      unint64_t v77 = v11;
      __int16 v78 = 2048;
      unint64_t v79 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      *(void *)&long long v71 = 0;
      float32x4_t v83 = 0u;
      long long v84 = 0u;
      float32x4_t v81 = 0u;
      float32x4_t v82 = 0u;
      float32x4_t v80 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v72 = 136315906;
      unint64_t v73 = "operator[]";
      __int16 v74 = 1024;
      int v75 = 609;
      __int16 v76 = 2048;
      unint64_t v77 = v10;
      __int16 v78 = 2048;
      unint64_t v79 = v40;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_45:
    if (v20)
    {
      unint64_t v11 = 0;
      LODWORD(v41) = v39 - v19;
      if (v39 >= v19) {
        uint64_t v41 = v41;
      }
      else {
        uint64_t v41 = 0;
      }
      do
      {
        unint64_t v10 = v44;
        if (v44 <= v11) {
          goto LABEL_69;
        }
        unint64_t v10 = v11 + v19;
        if (v11 == v41) {
          goto LABEL_70;
        }
        *(_OWORD *)(v38 + 16 * v10) = *(_OWORD *)(v46 + 16 * v11++);
      }
      while (v11 != v20);
    }
    re::GeomMesh::freeName((re *)v58);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)((char *)&v61 + 8));
    if ((void)v59 && (void)v61) {
      (*(void (**)(void))(*(void *)v59 + 40))();
    }
  }
  if (v43[0] && v46) {
    (*(void (**)(void))(*(void *)v43[0] + 40))();
  }
  if (v47[0] && v50) {
    (*(void (**)(void))(*(void *)v47[0] + 40))();
  }
  uint64_t result = (re::GeomMesh *)v52;
  if (v52 && v56) {
    return (re::GeomMesh *)(*(uint64_t (**)(void))(*(void *)v52 + 40))();
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *,false>(uint64_t result, int32x2_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v11 = (int32x2_t *)result;
  while (2)
  {
    unint64_t v12 = (unsigned int *)&a2[-1] + 1;
    uint64_t v91 = a2;
    unsigned int v92 = (unsigned int *)&a2[-1];
    unint64_t v89 = (unsigned int *)&a2[-2] + 1;
    uint64_t v13 = (unsigned int *)v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v11 = (int32x2_t *)v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = ((char *)a2 - (char *)v13) >> 2;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (result)
                {
                  unsigned int v42 = v11->i32[0];
                  v11->i32[0] = a2[-1].i32[1];
                  a2[-1].i32[1] = v42;
                }
                break;
              case 3:
                break;
              case 4:
                break;
              case 5:
                uint64_t v43 = (unsigned int *)&v11[1];
                unint64_t v44 = (unsigned int *)&v11[1] + 1;
                if (result)
                {
                  unsigned int v45 = *v44;
                  *unint64_t v44 = a2[-1].u32[1];
                  a2[-1].i32[1] = v45;
                  if (result)
                  {
                    unsigned int v46 = *v43;
                    unsigned int v47 = *v44;
                    *uint64_t v43 = *v44;
                    *unint64_t v44 = v46;
                    if (result)
                    {
                      __int32 v49 = v11->i32[1];
                      unsigned int v48 = v11[1].u32[0];
                      unsigned int v50 = v11->i32[0];
                      v11->i32[1] = v48;
                      v11[1].i32[0] = v49;
                      if (result) {
                        *unint64_t v11 = vrev64_s32(*v11);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 95)
          {
            uint64_t v51 = (int32x2_t *)((char *)v11 + 4);
            BOOL v53 = v11 == a2 || v51 == a2;
            if (a5)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                int v55 = (unsigned int *)v11;
                do
                {
                  unsigned int v57 = *v55;
                  unsigned int v56 = v55[1];
                  int v55 = (unsigned int *)v51;
                  if (result)
                  {
                    unsigned int v58 = *v55;
                    uint64_t v59 = v54;
                    while (1)
                    {
                      *(__int32 *)((char *)&v11->i32[1] + v59) = *(__int32 *)((char *)v11->i32 + v59);
                      if (!v59) {
                        break;
                      }
                      v59 -= 4;
                      if ((result & 1) == 0)
                      {
                        long long v60 = (int32x2_t *)((char *)v11 + v59 + 4);
                        goto LABEL_83;
                      }
                    }
                    long long v60 = v11;
LABEL_83:
                    v60->i32[0] = v58;
                  }
                  uint64_t v51 = (int32x2_t *)(v55 + 1);
                  v54 += 4;
                }
                while (v55 + 1 != (unsigned int *)a2);
              }
            }
            else if (!v53)
            {
              do
              {
                unsigned int v84 = v11->i32[0];
                unsigned int v83 = v11->u32[1];
                unint64_t v11 = v51;
                if (result)
                {
                  unsigned int v85 = v11->i32[0];
                  unsigned int v86 = v11;
                  do
                  {
                    unsigned int v87 = v86;
                    __int32 v88 = v86[-1].i32[1];
                    unsigned int v86 = (int32x2_t *)((char *)v86 - 4);
                    v87->i32[0] = v88;
                  }
                  while ((result & 1) != 0);
                  v86->i32[0] = v85;
                }
                uint64_t v51 = (int32x2_t *)((char *)v11 + 4);
              }
              while (&v11->u8[4] != (unsigned __int8 *)a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v11 != a2)
            {
              int64_t v61 = (unint64_t)(v15 - 2) >> 1;
              int64_t v93 = v61;
              do
              {
                int64_t v62 = v61;
                if (v93 >= v61)
                {
                  uint64_t v63 = (2 * v61) | 1;
                  uint64_t v64 = (unsigned int *)v11 + v63;
                  if (2 * v61 + 2 < v15
                  {
                    ++v64;
                    uint64_t v63 = 2 * v62 + 2;
                  }
                  int v65 = (unsigned int *)v11 + v62;
                  if ((result & 1) == 0)
                  {
                    int64_t v90 = v62;
                    unsigned int v66 = *v65;
                    do
                    {
                      uint64_t v67 = v64;
                      *int v65 = *v64;
                      if (v93 < v63) {
                        break;
                      }
                      uint64_t v68 = (2 * v63) | 1;
                      uint64_t v64 = (unsigned int *)v11 + v68;
                      if (2 * v63 + 2 < v15
                      {
                        ++v64;
                        uint64_t v68 = 2 * v63 + 2;
                      }
                      int v65 = v67;
                      uint64_t v63 = v68;
                    }
                    while (!result);
                    *uint64_t v67 = v66;
                    int64_t v62 = v90;
                    a2 = v91;
                  }
                }
                int64_t v61 = v62 - 1;
              }
              while (v62);
              uint64_t v69 = (unint64_t)v14 >> 2;
              do
              {
                int v70 = a2;
                uint64_t v71 = 0;
                unsigned int v94 = v11->i32[0];
                int v72 = v11;
                do
                {
                  unint64_t v73 = (unsigned int *)v72 + v71 + 1;
                  uint64_t v74 = (2 * v71) | 1;
                  uint64_t v75 = 2 * v71 + 2;
                  if (v75 < v69)
                  {
                    if (result)
                    {
                      ++v73;
                      uint64_t v74 = v75;
                    }
                  }
                  v72->i32[0] = *v73;
                  int v72 = (int32x2_t *)v73;
                  uint64_t v71 = v74;
                }
                while (v74 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
                a2 = (int32x2_t *)((char *)v70 - 4);
                if (v73 == (unsigned int *)&v70[-1].u8[4])
                {
                  *unint64_t v73 = v94;
                }
                else
                {
                  *unint64_t v73 = a2->i32[0];
                  a2->i32[0] = v94;
                  uint64_t v76 = (char *)v73 - (char *)v11 + 4;
                  if (v76 >= 5)
                  {
                    unint64_t v77 = (((unint64_t)v76 >> 2) - 2) >> 1;
                    __int16 v78 = (unsigned int *)v11 + v77;
                    if (result)
                    {
                      unint64_t v79 = (int32x2_t *)((char *)v70 - 4);
                      unsigned int v80 = *v73;
                      do
                      {
                        float32x4_t v81 = v78;
                        *unint64_t v73 = *v78;
                        if (!v77) {
                          break;
                        }
                        unint64_t v77 = (v77 - 1) >> 1;
                        __int16 v78 = (unsigned int *)v11 + v77;
                        unint64_t v73 = v81;
                      }
                      while ((result & 1) != 0);
                      *float32x4_t v81 = v80;
                      a2 = v79;
                    }
                  }
                }
              }
              while (v69-- > 2);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          uint64_t v17 = (unsigned int *)v11 + ((unint64_t)v15 >> 1);
          if ((unint64_t)v14 < 0x201)
          {
          }
          else
          {
            unsigned int v18 = v11->i32[0];
            v11->i32[0] = *v17;
            *uint64_t v17 = v18;
          }
          --a4;
          if ((a5 & 1) != 0
          {
            break;
          }
          unsigned int v33 = v11->i32[0];
          if (result)
          {
            uint64_t v13 = (unsigned int *)v11;
            do
            {
              unsigned int v34 = v13[1];
              ++v13;
            }
            while ((result & 1) == 0);
          }
          else
          {
            unsigned int v35 = (unsigned int *)v11 + 1;
            do
            {
              uint64_t v13 = v35;
              if (v35 >= (unsigned int *)a2) {
                break;
              }
              ++v35;
            }
            while (!result);
          }
          int v36 = a2;
          if (v13 < (unsigned int *)a2)
          {
            int v36 = a2;
            do
            {
              unsigned int v37 = v36[-1].u32[1];
              int v36 = (int32x2_t *)((char *)v36 - 4);
            }
            while ((result & 1) != 0);
          }
          while (v13 < (unsigned int *)v36)
          {
            unsigned int v38 = *v13;
            *uint64_t v13 = v36->i32[0];
            v36->i32[0] = v38;
            do
            {
              unsigned int v39 = v13[1];
              ++v13;
            }
            do
            {
              unsigned int v40 = v36[-1].u32[1];
              int v36 = (int32x2_t *)((char *)v36 - 4);
            }
            while ((result & 1) != 0);
          }
          uint64_t v41 = v13 - 1;
          BOOL v5 = v13 - 1 >= (unsigned int *)v11;
          BOOL v6 = v13 - 1 == (unsigned int *)v11;
          if (v13 - 1 != (unsigned int *)v11) {
            v11->i32[0] = *v41;
          }
          a5 = 0;
          *uint64_t v41 = v33;
        }
        uint64_t v19 = 0;
        unsigned int v20 = v11->i32[0];
        unint64_t v22 = (int32x2_t *)((char *)v11 + v19 * 4);
        int v23 = v91;
        BOOL v6 = v19 == 1;
        a2 = v91;
        if (v6)
        {
          int v23 = v91;
          do
          {
            if (v22 >= v23) {
              break;
            }
            unsigned int v25 = v23[-1].u32[1];
            int v23 = (int32x2_t *)((char *)v23 - 4);
          }
        }
        else
        {
          do
          {
            unsigned int v24 = v23[-1].u32[1];
            int v23 = (int32x2_t *)((char *)v23 - 4);
          }
        }
        if (v22 >= v23)
        {
          uint64_t v31 = (int32x2_t *)((char *)v22 - 4);
        }
        else
        {
          uint64_t v26 = v22;
          int v27 = v23;
          do
          {
            int v28 = v26->i32[0];
            v26->i32[0] = v27->i32[0];
            v27->i32[0] = v28;
            do
            {
              unsigned int v29 = v26->u32[1];
              uint64_t v26 = (int32x2_t *)((char *)v26 + 4);
            }
            do
            {
              unsigned int v30 = v27[-1].u32[1];
              int v27 = (int32x2_t *)((char *)v27 - 4);
            }
          }
          while (v26 < v27);
          uint64_t v31 = (int32x2_t *)((char *)v26 - 4);
          a2 = v91;
        }
        if (v31 != v11) {
          v11->i32[0] = v31->i32[0];
        }
        v31->i32[0] = v20;
        if (v22 >= v23) {
          break;
        }
LABEL_33:
        a5 = 0;
        uint64_t v13 = (unsigned int *)v31 + 1;
      }
      uint64_t v13 = (unsigned int *)v31 + 1;
      if (result) {
        break;
      }
      if (!v32) {
        goto LABEL_33;
      }
    }
    a2 = v31;
    if (!v32) {
      continue;
    }
    return result;
  }
}

BOOL re::anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 <= a3) {
    goto LABEL_5;
  }
  return *(_DWORD *)(*(void *)a1 + 4 * a2) < *(_DWORD *)(*(void *)a1 + 4 * a3);
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  if (v8)
  {
    unsigned int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      if (result)
      {
        unsigned int v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    unsigned int v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (result)
    {
      unsigned int v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(int32x2_t *a1, int32x2_t *a2, uint64_t *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      {
        unsigned int v8 = a1->i32[0];
        a1->i32[0] = a2[-1].i32[1];
        a2[-1].i32[1] = v8;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      uint64_t v17 = (unsigned int *)&a1[1];
      unsigned int v18 = (unsigned int *)&a1[1] + 1;
      {
        unsigned int v19 = *v18;
        *unsigned int v18 = a2[-1].u32[1];
        a2[-1].i32[1] = v19;
        {
          unsigned int v20 = *v17;
          unsigned int v21 = *v18;
          *uint64_t v17 = *v18;
          *unsigned int v18 = v20;
          {
            __int32 v23 = a1->i32[1];
            unsigned int v22 = a1[1].u32[0];
            unsigned int v24 = a1->i32[0];
            a1->i32[1] = v22;
            a1[1].i32[0] = v23;
            {
              *a1 = vrev64_s32(*a1);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = (unsigned int *)&a1[1];
      unsigned int v10 = (unsigned int *)&a1[1] + 1;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    {
      unsigned int v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(__int32 *)((char *)&a1[1].i32[1] + v14) = *(__int32 *)((char *)a1[1].i32 + v14);
        if (v14 == -8) {
          break;
        }
        v14 -= 4;
        {
          unint64_t v16 = (int32x2_t *)((char *)a1 + v14 + 12);
          goto LABEL_13;
        }
      }
      unint64_t v16 = a1;
LABEL_13:
      v16->i32[0] = v13;
      if (++v12 == 8) {
        return v10 + 1 == (unsigned int *)a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 4;
    if (++v10 == (unsigned int *)a2) {
      return 1;
    }
  }
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::anonymous namespace'::sortFacesByMaterial(re::GeomMesh const&,re::GeomAttribute const*,re::DynamicArray<int> &,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned int> &)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t *a5)
{
  if (result)
  {
    unsigned int v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if (result)
    {
      unsigned int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (result)
      {
        unsigned int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void re::anonymous namespace'::computeErrorTriangle(re::GeomMeshBVHTree *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int a5, _anonymous_namespace_ *a6, float a7)
{
  float v14 = a7 * a7;
  long long v39 = 0u;
  long long v40 = 0u;
  int v15 = re::GeomMeshBVHTree::computeClosestPoint(a1, a2, &v38) > (float)(a7 * a7);
  long long v39 = 0u;
  long long v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a3, &v38) > v14) {
    ++v15;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a4, &v38) > v14) {
    ++v15;
  }
  __asm { FMOV            V1.4S, #3.0 }
  float32x4_t v37 = vdivq_f32(vaddq_f32(vaddq_f32(*a2, *a3), *a4), _Q1);
  long long v39 = 0u;
  long long v40 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, &v37, &v38) <= v14) {
    int v21 = v15;
  }
  else {
    int v21 = v15 + 1;
  }
  if (v21)
  {
    if (!a5 || v21 == 4) {
      goto LABEL_17;
    }
    float32x4_t v22 = *a3;
    float32x4_t v23 = *a4;
    float32x4_t v24 = vsubq_f32(*a4, *a3);
    float32x4_t v25 = vmulq_f32(v24, v24);
    float32x4_t v26 = *a2;
    float32x4_t v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
    float32x4_t v28 = vsubq_f32(*a4, *a2);
    float32x4_t v29 = vmulq_f32(v28, v28);
    float32x4_t v30 = vsubq_f32(*a3, *a2);
    float32x4_t v31 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)));
    float32x4_t v32 = vmulq_f32(v30, v30);
    LODWORD(v33) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u32[0];
    if (vmovn_s32(vcgtq_f32(v31, v27)).u8[0]) {
      v27.f32[0] = v31.f32[0];
    }
    if (v33 >= v27.f32[0]) {
      v27.f32[0] = v33;
    }
    if (v27.f32[0] <= v14)
    {
LABEL_17:
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a2);
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a3);
      re::DynamicArray<re::Vector3<float>>::add(a6, (__n128 *)a4);
    }
    else
    {
      v34.i64[0] = 0x3F0000003F000000;
      v34.i64[1] = 0x3F0000003F000000;
      float32x4_t v37 = vmulq_f32(vaddq_f32(v22, v23), v34);
      float32x4_t v38 = vmulq_f32(vaddq_f32(v22, v26), v34);
      float32x4_t v36 = vmulq_f32(vaddq_f32(v26, v23), v34);
      uint64_t v35 = (a5 - 1);
    }
  }
}

void re::anonymous namespace'::computeErrorQuad(re::GeomMeshBVHTree *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int a6, _anonymous_namespace_ *a7, float a8)
{
  float v16 = a8 * a8;
  long long v43 = 0u;
  long long v44 = 0u;
  int v17 = re::GeomMeshBVHTree::computeClosestPoint(a1, a2, &v42) > (float)(a8 * a8);
  long long v43 = 0u;
  long long v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a3, &v42) > v16) {
    ++v17;
  }
  long long v43 = 0u;
  long long v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a4, &v42) > v16) {
    ++v17;
  }
  long long v43 = 0u;
  long long v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, a5, &v42) > v16) {
    ++v17;
  }
  __asm { FMOV            V1.4S, #0.25 }
  float32x4_t v41 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*a2, *a3), *a4), *a5), _Q1);
  long long v43 = 0u;
  long long v44 = 0u;
  if (re::GeomMeshBVHTree::computeClosestPoint(a1, &v41, &v42) <= v16) {
    int v23 = v17;
  }
  else {
    int v23 = v17 + 1;
  }
  if (v23)
  {
    if (!a6 || v23 == 5) {
      goto LABEL_17;
    }
    float32x4_t v24 = *a4;
    float32x4_t v25 = *a2;
    float32x4_t v26 = vsubq_f32(*a4, *a2);
    float32x4_t v27 = vmulq_f32(v26, v26);
    float32x4_t v28 = vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1));
    float32x4_t v29 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2);
    float32x4_t v30 = *a5;
    float32x4_t v31 = *a3;
    float32x4_t v32 = vsubq_f32(*a5, *a3);
    float32x4_t v33 = vmulq_f32(v32, v32);
    float32x4_t v34 = vaddq_f32(v29, v28);
    float32x4_t v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)));
    if (vmovn_s32(vcgtq_f32(v35, v34)).u8[0]) {
      v34.f32[0] = v35.f32[0];
    }
    if (v34.f32[0] <= v16)
    {
LABEL_17:
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a2);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a3);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a4);
      re::DynamicArray<re::Vector3<float>>::add(a7, (__n128 *)a5);
    }
    else
    {
      v36.i64[0] = 0x3F0000003F000000;
      v36.i64[1] = 0x3F0000003F000000;
      float32x4_t v42 = vmulq_f32(vaddq_f32(v25, v31), v36);
      float32x4_t v39 = vmulq_f32(vaddq_f32(v24, v30), v36);
      float32x4_t v40 = vmulq_f32(vaddq_f32(v24, v31), v36);
      float32x4_t v38 = vmulq_f32(vaddq_f32(v25, v30), v36);
      uint64_t v37 = (a6 - 1);
    }
  }
}

uint64_t re::buildPlatterWithRoundedCorners(unsigned int *a1, unsigned __int16 *a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  LODWORD(v73) = 0;
  WORD2(v73) = 0;
  LOWORD(v77) = 0;
  LOBYTE(v73) = *((unsigned char *)a2 + 36);
  BYTE3(v73) = *((unsigned char *)a2 + 37);
  *((void *)&v77 + 1) = *((void *)a2 + 7);
  BYTE4(v73) = *((unsigned char *)a2 + 38);
  BYTE5(v73) = 1;
  float v5 = *((float *)a2 + 10);
  float v4 = *((float *)a2 + 11);
  *((void *)&v73 + 1) = __PAIR64__(LODWORD(v4), LODWORD(v5));
  float v6 = *((float *)a2 + 12);
  *(float *)&long long v74 = v6;
  float v7 = 1.5287;
  float v8 = 1.5287;
  if (v5 < 1.0)
  {
    float v8 = 1.0;
    if (v5 > 0.0) {
      float v8 = (float)(v5 * 0.52866) + 1.0;
    }
  }
  float v9 = 1.5287;
  if (v4 < 1.0)
  {
    float v9 = 1.0;
    if (v4 > 0.0) {
      float v9 = (float)(v4 * 0.52866) + 1.0;
    }
  }
  if (v6 < 1.0)
  {
    float v7 = 1.0;
    if (v6 > 0.0) {
      float v7 = (float)(v6 * 0.52866) + 1.0;
    }
  }
  float v11 = *((float *)a2 + 7);
  float v10 = *((float *)a2 + 8);
  if (v11 >= v10) {
    float v12 = v9;
  }
  else {
    float v12 = v8;
  }
  if (v11 >= v10) {
    float v13 = *((float *)a2 + 8);
  }
  else {
    float v13 = *((float *)a2 + 7);
  }
  float v14 = v13 / (float)(v12 + v12);
  float v15 = *((float *)a2 + 4);
  if (v14 >= *((float *)a2 + 3)) {
    float v14 = *((float *)a2 + 3);
  }
  *((float *)&v74 + 1) = v14;
  float v16 = 0.0;
  float v17 = 0.0;
  if (v15 >= 0.0)
  {
    float v16 = (float)(v15 / v7) >= v14 ? v14 : v15 / v7;
    float v17 = *((float *)a2 + 5) / v7;
    if (v17 >= v14) {
      float v17 = v14;
    }
  }
  *((void *)&v74 + 1) = __PAIR64__(LODWORD(v17), LODWORD(v16));
  float v18 = v11 + (float)((float)(v8 * -2.0) * v14);
  if (v18 < 0.0) {
    float v18 = 0.0;
  }
  float v19 = v10 + (float)((float)(v9 * -2.0) * v14);
  if (v19 < 0.0) {
    float v19 = 0.0;
  }
  *(void *)&long long v75 = __PAIR64__(LODWORD(v19), LODWORD(v18));
  float v20 = *((float *)a2 + 6);
  *((float *)&v75 + 2) = v20;
  unsigned int v21 = a2[3];
  if (v21 <= 2) {
    int v22 = 2;
  }
  else {
    int v22 = a2[3];
  }
  int v23 = v22 + 1;
  unsigned int v24 = a2[4];
  if (v24 <= 1) {
    int v25 = 1;
  }
  else {
    int v25 = a2[4];
  }
  DWORD2(v76) = v23;
  HIDWORD(v76) = v25 + 1;
  unsigned int v26 = *a2;
  if (v26 <= 1) {
    int v27 = 1;
  }
  else {
    int v27 = *a2;
  }
  unsigned int v28 = a2[1];
  if (v28 <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = a2[1];
  }
  HIDWORD(v75) = v27;
  LODWORD(v76) = v29;
  unsigned int v30 = a2[2];
  if (v30 <= 1) {
    int v31 = 1;
  }
  else {
    int v31 = a2[2];
  }
  DWORD1(v76) = v31;
  int v32 = v24 * v21;
  BOOL v34 = v18 == 0.0 || v26 == 0;
  BOOL v36 = v19 == 0.0 || v28 == 0;
  BOOL v38 = v20 == 0.0 || v30 == 0;
  if (v14 == 0.0)
  {
    __int16 v39 = 316;
    goto LABEL_72;
  }
  if (v16 == 0.0)
  {
    __int16 v39 = 4;
LABEL_67:
    LOWORD(v77) = v39;
    goto LABEL_68;
  }
  if (v14 == v16)
  {
    __int16 v39 = 8;
    goto LABEL_67;
  }
  __int16 v39 = 0;
LABEL_68:
  if (v17 == 0.0)
  {
    v39 |= 0x10u;
  }
  else
  {
    if (v14 != v17) {
      goto LABEL_73;
    }
    v39 |= 0x20u;
  }
LABEL_72:
  LOWORD(v77) = v39;
LABEL_73:
  if (v32) {
    int v40 = v34;
  }
  else {
    int v40 = 1;
  }
  if ((v40 | (v36 || v38)) == 1)
  {
    if (v32) {
      __int16 v41 = v39;
    }
    else {
      __int16 v41 = v39 | 0x3C;
    }
    if (v34) {
      __int16 v42 = v41 | 0x41;
    }
    else {
      __int16 v42 = v41;
    }
    if (v36) {
      __int16 v43 = v42 | 0x81;
    }
    else {
      __int16 v43 = v42;
    }
    if (v38) {
      v43 |= 2u;
    }
    LOWORD(v77) = v43;
  }
  int v46 = *((unsigned __int8 *)a2 + 36);
  if (*((unsigned char *)a2 + 36) || *((unsigned char *)a2 + 37))
  {
    if (*((unsigned char *)a2 + 37))
    {
      int v46 = *((unsigned __int8 *)a2 + 36);
    }
    if (v46)
    {
      re::addVertexUVs((re *)a1, v45);
      re::computeAABB((re *)a1, &v62);
      float32x2_t v47 = v63;
      float32x2_t v48 = (float32x2_t)v62;
      __int32 v49 = (float32x2_t *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
      unsigned int v51 = v50;
      uint64_t result = re::modifyVertexUVs((re *)a1, v50);
      if (a1[4])
      {
        unint64_t v53 = 0;
        float32x2_t v54 = vsub_f32(v47, v48);
        __asm { FMOV            V2.2S, #1.0 }
        float32x2_t v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v54), (int8x8_t)v54, _D2);
        uint64_t v60 = v52;
        do
        {
          if (v51 == v53)
          {
            uint64_t v64 = 0;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v65 = 136315906;
            unsigned int v66 = "operator[]";
            __int16 v67 = 1024;
            int v68 = 601;
            __int16 v69 = 2048;
            uint64_t v70 = v51;
            __int16 v71 = 2048;
            uint64_t v72 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_105:
            uint64_t v64 = 0;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v73 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v65 = 136315906;
            unsigned int v66 = "operator[]";
            __int16 v67 = 1024;
            int v68 = 609;
            __int16 v69 = 2048;
            uint64_t v70 = v60;
            __int16 v71 = 2048;
            uint64_t v72 = v60;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v52 == v53) {
            goto LABEL_105;
          }
          float32x2_t v61 = *v49;
          v49 += 2;
          *(float32x2_t *)(result + 8 * v53++) = vdiv_f32(vsub_f32(v61, v48), v59);
        }
        while (v53 < a1[4]);
      }
    }
    else
    {
      return re::internal::GeomAttributeManager::deleteAttribute((re::internal::GeomAttributeManager *)(a1 + 16), "vertexUV");
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::buildRoundedBoxOrPlatter(re *a1, uint64_t a2)
{
  unint64_t v7 = (unint64_t)a1;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  v34[1] = 0;
  unint64_t v35 = 0;
  v34[0] = 0;
  int v36 = 0;
  unsigned int v9 = v8;
  uint64_t v33 = 0;
  v30[1] = 0;
  unint64_t v31 = 0;
  v30[0] = 0;
  int v32 = 0;
  if (*(unsigned char *)(a2 + 2))
  {
    re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v30, *(_DWORD *)(v7 + 16) - v8);
    if (v9 < *(_DWORD *)(v7 + 16))
    {
      uint64_t v12 = v11;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      if (v9 <= v11) {
        uint64_t v2 = v11;
      }
      else {
        uint64_t v2 = v9;
      }
      while (v9 - v2 + v14)
      {
        unint64_t v3 = v31;
        if (v31 <= v14) {
          goto LABEL_56;
        }
        *(_OWORD *)(v33 + v13) = *(_OWORD *)(v10 + 16 * v9 + v13);
        ++v14;
        v13 += 16;
        if (v9 + v14 >= *(unsigned int *)(v7 + 16)) {
          goto LABEL_9;
        }
      }
      *(void *)int v46 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)__int32 v49 = 136315906;
      *(void *)&v49[4] = "operator[]";
      *(_WORD *)&void v49[12] = 1024;
      *(_DWORD *)&v49[14] = 601;
      *(_WORD *)&v49[18] = 2048;
      *(void *)&v49[20] = v2;
      __int16 v50 = 2048;
      *(void *)unsigned int v51 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_56:
      *(void *)int v46 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)__int32 v49 = 136315906;
      *(void *)&v49[4] = "operator[]";
      *(_WORD *)&void v49[12] = 1024;
      *(_DWORD *)&v49[14] = 789;
      *(_WORD *)&v49[18] = 2048;
      *(void *)&v49[20] = v14;
      __int16 v50 = 2048;
      *(void *)unsigned int v51 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
  }
LABEL_9:
  *(void *)&void v51[2] = 0;
  memset(v49, 0, sizeof(v49));
  if (*(_WORD *)(a2 + 64))
  {
    *(void *)&v48[2] = 0;
    memset(v46, 0, sizeof(v46));
    if (*(_DWORD *)(v7 + 40))
    {
      re::DynamicArray<int>::setCapacity(v46, *(unsigned int *)(v7 + 40));
      uint64_t v15 = *(unsigned int *)(v7 + 40);
      LODWORD(v28[0]) = 0;
      if (v15)
      {
        unsigned int v16 = 0;
        while (1)
        {
          uint64_t v12 = v16;
          unint64_t v14 = v35;
          if (v35 <= v16) {
            break;
          }
          if ((*(_WORD *)(a2 + 64) & *(_WORD *)(v37 + 2 * v16)) == 0)
          {
            re::DynamicArray<int>::add(v46, v28);
            unsigned int v16 = v28[0];
            uint64_t v15 = *(void *)(v7 + 40);
          }
          LODWORD(v28[0]) = ++v16;
          if (v16 >= v15) {
            goto LABEL_17;
          }
        }
LABEL_57:
        v29[0] = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v43 = 136315906;
        *(void *)&v43[4] = "operator[]";
        *(_WORD *)&v43[12] = 1024;
        *(_DWORD *)&v43[14] = 789;
        *(_WORD *)&v43[18] = 2048;
        *(void *)&v43[20] = v12;
        __int16 v44 = 2048;
        *(void *)unsigned int v45 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_58:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 789;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_59:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 789;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v4;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_60:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 609;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 601;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 609;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_63:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 789;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v4;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_64:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 609;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 601;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        *(void *)__int16 v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        *(_WORD *)&v46[12] = 1024;
        *(_DWORD *)&v46[14] = 609;
        *(_WORD *)&v46[18] = 2048;
        *(void *)&v46[20] = v7;
        __int16 v47 = 2048;
        *(void *)float32x2_t v48 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_17:
    *(void *)&void v45[2] = 0;
    memset(v43, 0, sizeof(v43));
    v29[0] = *(void *)&v48[2];
    v29[1] = *(void *)&v46[16];
    v28[0] = 0;
    v28[1] = 0;
    re::makeMeshFromFaces(v7, v29, v28, (uint64_t)v49, (uint64_t)v43, (unint64_t)&v38);
    re::GeomMesh::operator=((re::GeomMesh *)v7, (re::GeomMesh *)&v38);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v38);
    if (*(void *)v43 && *(void *)&v45[2]) {
      (*(void (**)(void))(**(void **)v43 + 40))();
    }
    if (*(void *)v46 && *(void *)&v48[2]) {
      (*(void (**)(void))(**(void **)v46 + 40))();
    }
  }
  if (*(unsigned char *)(a2 + 2))
  {
    LODWORD(v14) = v18;
    LODWORD(v2) = v20;
    uint64_t v23 = *(unsigned int *)(v7 + 16);
    if (*(void *)&v49[16])
    {
      if (v23)
      {
        unint64_t v7 = 0;
        unint64_t v3 = v22;
        unint64_t v14 = v14;
        uint64_t v2 = v2;
        do
        {
          unint64_t v4 = *(void *)&v49[16];
          if (*(void *)&v49[16] <= v7) {
            goto LABEL_58;
          }
          unsigned int v24 = *(_DWORD *)(*(void *)&v51[2] + 4 * v7);
          unint64_t v4 = v24 - v9;
          if (v24 >= v9)
          {
            unint64_t v5 = v31;
            if (v31 <= v4) {
              goto LABEL_59;
            }
            if (v7 >= v2) {
              goto LABEL_60;
            }
            *float v19 = *(int32x4_t *)(v33 + 16 * v4);
            if (v7 >= v14) {
              goto LABEL_61;
            }
            if (v7 >= v22) {
              goto LABEL_62;
            }
            int8x16_t v25 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v19, *v19), *(int8x16_t *)v19, 0xCuLL), vnegq_f32(*(float32x4_t *)(v17 + 16 * v7))), *(float32x4_t *)v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v17 + 16 * v7), *(int32x4_t *)(v17 + 16 * v7)), *(int8x16_t *)(v17 + 16 * v7), 0xCuLL));
            *(int8x16_t *)(v21 + 16 * v7) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL);
          }
          ++v7;
          ++v19;
        }
        while (v23 != v7);
      }
    }
    else if (v23)
    {
      unint64_t v7 = 0;
      unint64_t v3 = v22;
      unint64_t v14 = v14;
      uint64_t v2 = v2;
      do
      {
        if (v7 >= v9)
        {
          unint64_t v4 = v7 - v9;
          unint64_t v5 = v31;
          if (v31 <= v4) {
            goto LABEL_63;
          }
          if (v7 >= v2) {
            goto LABEL_64;
          }
          *float v19 = *(int32x4_t *)(v33 + 16 * v4);
          if (v7 >= v14) {
            goto LABEL_65;
          }
          if (v7 >= v22) {
            goto LABEL_66;
          }
          int8x16_t v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v19, *v19), *(int8x16_t *)v19, 0xCuLL), vnegq_f32(*(float32x4_t *)(v17 + 16 * v7))), *(float32x4_t *)v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v17 + 16 * v7), *(int32x4_t *)(v17 + 16 * v7)), *(int8x16_t *)(v17 + 16 * v7), 0xCuLL));
          *(int8x16_t *)(v21 + 16 * v7) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), v26, 0xCuLL);
        }
        ++v7;
        ++v19;
      }
      while (v23 != v7);
    }
  }
  if (*(void *)v49 && *(void *)&v51[2]) {
    (*(void (**)(void))(**(void **)v49 + 40))();
  }
  if (v30[0] && v33) {
    (*(void (**)(void))(*(void *)v30[0] + 40))();
  }
  uint64_t result = v34[0];
  if (v34[0])
  {
    if (v37) {
      return (*(uint64_t (**)(void))(*(void *)v34[0] + 40))();
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::computeOrthonormalizedTangentsAndBitangents(re::_anonymous_namespace_ *this, re::GeomMesh *a2, char a3)
{
  unint64_t v4 = (re::_anonymous_namespace_ *)((char *)this + 64);
  if (!a2)
  {
    re::internal::GeomAttributeManager::deleteAttribute((re::_anonymous_namespace_ *)((char *)this + 64), "vertexNormal");
    uint64_t result = re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexTangent");
    if (a3) {
      return result;
    }
    return re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexUV");
  }
  re::internal::GeomAttributeManager::deleteAttribute((re::_anonymous_namespace_ *)((char *)this + 64), "vertexTangent");
  re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexBitangent");
  char v8 = 1;
  int v7 = 2;
  uint64_t result = re::computeTangentsAndBitangents((unsigned int *)this, "vertexUV", "vertexTangent", "vertexBitangent", "vertexNormal", (unint64_t)&v7);
  if ((a3 & 1) == 0) {
    return re::internal::GeomAttributeManager::deleteAttribute(v4, "vertexUV");
  }
  return result;
}

uint64_t re::anonymous namespace'::InternalBoxRoundedCornersOptions::InternalBoxRoundedCornersOptions(uint64_t result, unsigned __int16 *a2)
{
  *(_WORD *)(result + 4) = 0;
  *(_DWORD *)uint64_t result = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = _D0;
  *(_DWORD *)(result + 16) = 1065353216;
  *(_OWORD *)(result + 20) = 0u;
  float v6 = (float *)(result + 20);
  *(void *)(result + 72) = 0;
  *(_OWORD *)(result + 36) = 0u;
  *(_OWORD *)(result + 50) = 0u;
  *(unsigned char *)uint64_t result = *((unsigned char *)a2 + 32);
  *(_WORD *)(result + 1) = *(unsigned __int16 *)((char *)a2 + 37);
  *(unsigned char *)(result + 3) = *((unsigned char *)a2 + 33);
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 34);
  if (*((unsigned char *)a2 + 35))
  {
    float v8 = *((float *)a2 + 5);
    float v7 = *((float *)a2 + 6);
    if (v7 >= v8) {
      float v9 = *((float *)a2 + 5);
    }
    else {
      float v9 = *((float *)a2 + 6);
    }
    float v10 = v9 / 3.0573;
    float v11 = *((float *)a2 + 3);
    if (v11 <= (float)(v9 / 3.0573) || *((unsigned char *)a2 + 36) != 0)
    {
      if (v11 <= v10) {
        float v13 = *((float *)a2 + 3);
      }
      else {
        float v13 = v9 / 3.0573;
      }
      *float v6 = v13;
      float v14 = *((float *)a2 + 4);
      if (v14 >= 0.0)
      {
        if (v14 < v13) {
          float v6 = (float *)(a2 + 8);
        }
        float v15 = *((float *)a2 + 7);
        float v16 = v15 / 3.0573;
        if ((float)(v15 / 3.0573) >= *v6) {
          float v16 = *v6;
        }
      }
      else
      {
        float v15 = *((float *)a2 + 7);
        float v16 = 0.0;
      }
      *(float *)(result + 24) = v16;
      BOOL v23 = v8 > v7;
      float v24 = v8 - (float)(v13 * 3.0573);
      if (v24 < 0.0) {
        float v24 = 0.0;
      }
      BOOL v25 = v7 > v8;
      if (v10 > v11)
      {
        BOOL v23 = 1;
        BOOL v25 = 1;
      }
      if (v23) {
        float v19 = v24;
      }
      else {
        float v19 = 0.0;
      }
      float v20 = v7 - (float)(v13 * 3.0573);
      if (v20 < 0.0) {
        float v20 = 0.0;
      }
      if (!v25) {
        float v20 = 0.0;
      }
      *(float *)(result + 32) = v19;
      *(float *)(result + 36) = v20;
      float v21 = v15 + (float)(v16 * -3.0573);
      if (v21 < 0.0) {
        float v21 = 0.0;
      }
      float v22 = 1.0;
      goto LABEL_43;
    }
  }
  else
  {
    float v8 = *((float *)a2 + 5);
    float v7 = *((float *)a2 + 6);
    float v11 = *((float *)a2 + 3);
  }
  if (v7 >= v8) {
    float v17 = v8;
  }
  else {
    float v17 = v7;
  }
  float v13 = v17 * 0.5;
  if (v13 >= v11) {
    float v13 = v11;
  }
  *(float *)(result + 20) = v13;
  float v18 = *((float *)a2 + 7);
  float v16 = v18 * 0.5;
  if ((float)(v18 * 0.5) >= *((float *)a2 + 4)) {
    float v16 = *((float *)a2 + 4);
  }
  if (v16 >= v13) {
    float v16 = v13;
  }
  *(float *)(result + 24) = v16;
  float v19 = v8 + (float)(v13 * -2.0);
  float v20 = v7 + (float)(v13 * -2.0);
  *(float *)(result + 32) = v19;
  *(float *)(result + 36) = v20;
  float v21 = v18 + (float)(v16 * -2.0);
  float v22 = 0.0;
LABEL_43:
  *(float *)(result + 40) = v21;
  *(float *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22;
  *(float *)(result + 12) = v22;
  *(float *)(result + 16) = v22;
  *(float *)(result + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
  unsigned int v26 = a2[3];
  if (v26 <= 2) {
    int v27 = 2;
  }
  else {
    int v27 = a2[3];
  }
  int v28 = v27 + 1;
  unsigned int v29 = a2[4];
  if (v29 <= 1) {
    int v30 = 1;
  }
  else {
    int v30 = a2[4];
  }
  *(_DWORD *)(result + 60) = v30 + 1;
  unsigned int v31 = *a2;
  if (v31 <= 1) {
    int v32 = 1;
  }
  else {
    int v32 = *a2;
  }
  unsigned int v33 = a2[1];
  if (v33 <= 1) {
    int v34 = 1;
  }
  else {
    int v34 = a2[1];
  }
  *(_DWORD *)(result + 44) = v32;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v34;
  unsigned int v35 = a2[2];
  if (v35 <= 1) {
    int v36 = 1;
  }
  else {
    int v36 = a2[2];
  }
  *(_DWORD *)(result + 52) = v36;
  *(_DWORD *)(result + 56) = v28;
  int v37 = v29 * v26;
  BOOL v39 = *((float *)a2 + 7) == 0.0 || v37 == 0;
  BOOL v41 = v19 == 0.0 || v31 == 0;
  BOOL v43 = v20 == 0.0 || v33 == 0;
  BOOL v45 = v21 == 0.0 || v35 == 0;
  if (v16 == 0.0 && v13 == 0.0) {
    __int16 v47 = 316;
  }
  else {
    __int16 v47 = 20;
  }
  *(_WORD *)(result + 64) = 0;
  if (v16 == 0.0) {
    goto LABEL_91;
  }
  if (v13 == v16)
  {
    __int16 v47 = 40;
LABEL_91:
    *(_WORD *)(result + 64) = v47;
    goto LABEL_92;
  }
  __int16 v47 = 0;
LABEL_92:
  if (v45 || v43 || v41 || v39)
  {
    if (v37) {
      __int16 v48 = v47;
    }
    else {
      __int16 v48 = v47 | 0x28;
    }
    if (v39) {
      v48 |= 0x14u;
    }
    if (v41) {
      __int16 v49 = v48 | 0x41;
    }
    else {
      __int16 v49 = v48;
    }
    if (v43) {
      __int16 v50 = v49 | 0x81;
    }
    else {
      __int16 v50 = v49;
    }
    if (v45) {
      v50 |= 2u;
    }
    *(_WORD *)(result + 64) = v50;
  }
  return result;
}

uint64_t re::buildBoxWithRoundedCorners(re::GeomMesh *a1, long long *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 34))
  {
    uint64_t v31 = *((void *)a2 + 4);
    long long v6 = a2[1];
    long long v29 = *a2;
    long long v30 = v6;
    BYTE2(v31) = 0;
    return re::buildBoxWithRoundedCorners(a1, &v29);
  }
  else
  {
    uint64_t v36 = 0;
    unint64_t v34 = 0;
    v33[0] = 0;
    v33[1] = 0;
    int v35 = 0;
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v29, 0);
    re::DynamicArray<re::GeomMesh>::clear(a1);
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL);
    uint64_t v26 = 0;
    v23[1] = 0;
    uint64_t v24 = 0;
    v23[0] = 0;
    int v25 = 0;
    if (v32) {
      re::DynamicArray<int>::setCapacity(v23, v32);
    }
    for (unint64_t i = 0; i != 3; ++i)
    {
      uint64_t v24 = 0;
      ++v25;
      int v9 = word_2343AC310[i];
      LODWORD(v38[0]) = 0;
      unsigned int v10 = v32;
      if (!v32) {
        goto LABEL_22;
      }
      unsigned int v11 = 0;
      unint64_t v12 = v9 | v28;
      do
      {
        uint64_t v13 = v11;
        unint64_t v14 = v34;
        if (v34 <= v11)
        {
          *(void *)__int16 v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v39 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(void *)((char *)v47 + 4) = "operator[]";
          WORD2(v47[1]) = 1024;
          *(_DWORD *)((char *)&v47[1] + 6) = 789;
          WORD1(v47[2]) = 2048;
          *(void *)((char *)&v47[2] + 4) = v13;
          WORD2(v47[3]) = 2048;
          *(void *)((char *)&v47[3] + 6) = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_40:
          *(void *)__int16 v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v39 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(void *)((char *)v47 + 4) = "operator[]";
          WORD2(v47[1]) = 1024;
          *(_DWORD *)((char *)&v47[1] + 6) = 601;
          WORD1(v47[2]) = 2048;
          *(void *)((char *)&v47[2] + 4) = v2;
          WORD2(v47[3]) = 2048;
          *(void *)((char *)&v47[3] + 6) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_41:
          *(void *)__int16 v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v39 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(void *)((char *)v47 + 4) = "operator[]";
          WORD2(v47[1]) = 1024;
          *(_DWORD *)((char *)&v47[1] + 6) = 601;
          WORD1(v47[2]) = 2048;
          *(void *)((char *)&v47[2] + 4) = v3;
          WORD2(v47[3]) = 2048;
          *(void *)((char *)&v47[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_42:
          *(void *)__int16 v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v39 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(void *)((char *)v47 + 4) = "operator[]";
          WORD2(v47[1]) = 1024;
          *(_DWORD *)((char *)&v47[1] + 6) = 609;
          WORD1(v47[2]) = 2048;
          *(void *)((char *)&v47[2] + 4) = v12;
          WORD2(v47[3]) = 2048;
          *(void *)((char *)&v47[3] + 6) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_43;
        }
        if ((*(_WORD *)(v36 + 2 * v11) & (unsigned __int16)v12) == 0)
        {
          re::DynamicArray<int>::add(v23, v38);
          unsigned int v11 = v38[0];
          unsigned int v10 = v32;
        }
        LODWORD(v38[0]) = ++v11;
      }
      while (v11 < v10);
      if (v24)
      {
        v38[0] = v26;
        v38[1] = v24;
        v47[4] = 0;
        memset(v47, 0, 28);
        *(void *)&void v46[2] = 0;
        memset(v44, 0, sizeof(v44));
        v37[1] = 0;
        v37[0] = 0;
        re::makeMeshFromFaces((unint64_t)&v29, v38, v37, (uint64_t)v47, (uint64_t)v44, (unint64_t)&v39);
        if (*(void *)v44 && *(void *)&v46[2]) {
          (*(void (**)(void))(**(void **)v44 + 40))();
        }
        if (v47[0] && v47[4]) {
          (*(void (**)(void))(*(void *)v47[0] + 40))();
        }
        unint64_t v12 = *((void *)a1 + 2);
        if (v12 > i)
        {
          re::GeomMesh::operator=((re::GeomMesh *)(*((void *)a1 + 4) + 736 * i), (re::GeomMesh *)&v39);
          re::GeomMesh::~GeomMesh((re::GeomMesh *)&v39);
          goto LABEL_22;
        }
LABEL_43:
        v38[0] = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        memset(v47, 0, sizeof(v47));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v44 = 136315906;
        *(void *)&v44[4] = "operator[]";
        *(_WORD *)&unsigned char v44[12] = 1024;
        *(_DWORD *)&v44[14] = 789;
        *(_WORD *)&v44[18] = 2048;
        *(void *)&v44[20] = i;
        __int16 v45 = 2048;
        *(void *)int v46 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_22:
      if (i >= 2 && v27[2])
      {
        uint64_t v2 = v16;
        uint64_t v3 = v18;
        if (v30)
        {
          unint64_t v21 = 0;
          uint64_t v2 = v2;
          uint64_t v3 = v3;
          unint64_t v12 = v20;
          while (v2 != v21)
          {
            if (v3 == v21) {
              goto LABEL_41;
            }
            if (v20 == v21) {
              goto LABEL_42;
            }
            int8x16_t v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v17 + 16 * v21), *(int32x4_t *)(v17 + 16 * v21)), *(int8x16_t *)(v17 + 16 * v21), 0xCuLL), vnegq_f32(*(float32x4_t *)(v15 + 16 * v21))), *(float32x4_t *)(v17 + 16 * v21), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v15 + 16 * v21), *(int32x4_t *)(v15 + 16 * v21)), *(int8x16_t *)(v15 + 16 * v21), 0xCuLL));
            *(int8x16_t *)(v19 + 16 * v21++) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL);
            if (v21 >= v30) {
              goto LABEL_32;
            }
          }
          goto LABEL_40;
        }
      }
      else
      {
      }
LABEL_32:
      ;
    }
    if (v23[0] && v26) {
      (*(void (**)(void))(*(void *)v23[0] + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v29);
    uint64_t result = v33[0];
    if (v33[0])
    {
      if (v36) {
        return (*(uint64_t (**)(void))(*(void *)v33[0] + 40))();
      }
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::buildRoundedBoxWithStandardUVs(re *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v700 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned int *)a2 + 11);
  uint64_t v5 = *((unsigned int *)a2 + 12);
  float v6 = *((float *)a2 + 5);
  float v8 = *((float *)a2 + 8);
  float v7 = *((float *)a2 + 9);
  float v9 = *((float *)a2 + 10);
  unsigned int v10 = *((_DWORD *)a2 + 13);
  uint64_t v11 = *((unsigned int *)a2 + 14);
  int v12 = *((_DWORD *)a2 + 15);
  unint64_t v13 = (v11 - 1);
  int v14 = (v12 - 1) * v13;
  if (v11) {
    int v15 = *((_DWORD *)a2 + 14);
  }
  else {
    int v15 = v11 - 1;
  }
  unint64_t v16 = (v14 + v15 + 3);
  unint64_t v17 = (v5 + v4);
  unint64_t v616 = *((unsigned int *)a2 + 15);
  LODWORD(v625) = 4 * v11;
  int v621 = v17 - 2;
  unint64_t v18 = (8 * v16);
  uint64_t v19 = (2 * v4);
  unsigned int v20 = v18 + 4 * v17 * v12;
  LODWORD(v655[0]) = (v12 - 1) * v13;
  unsigned int v622 = v10;
  int v629 = 4 * v11 + 2 * (v17 - 2);
  LODWORD(v627) = v20 + v19 * v5;
  LODWORD(v651[0]) = v14 + v15 + 3;
  uint64_t v632 = (v12 - 1);
  LODWORD(v647[0]) = v12 - 1;
  LODWORD(v643[0]) = 0;
  unint64_t v623 = v627 + v629 * v10;
  re::DynamicArray<unsigned short>::resize(a3, v623);
  *(void *)&v671[0] = v655;
  *((void *)&v671[0] + 1) = v3;
  *(void *)&v671[1] = v643;
  *((void *)&v671[1] + 1) = v651;
  *(void *)&v696[0] = v647;
  *((void *)&v696[0] + 1) = v3;
  *(void *)&v696[1] = v643;
  uint64_t v634 = v5;
  unsigned int v21 = v5 * v4;
  unint64_t v636 = v4;
  if (!(v5 * v4)) {
    goto LABEL_12;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  unsigned int v22 = v643[0];
  unsigned int v23 = v21;
  uint64_t v24 = *(void *)(v3 + 32);
  do
  {
    unint64_t v25 = v22;
    if (v4 <= v22)
    {
      LODWORD(v643[0]) = v22 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_557:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_558:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_559:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_560:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_561:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_562:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_563:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_564:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_565:
      LODWORD(v643[0]) = v25 + 1;
      v659[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_566;
    }
    *(_WORD *)(v24 + 2 * v22++) = 513;
    --v23;
  }
  while (v23);
  int v26 = 0;
  uint64_t v27 = *(void *)(v3 + 32);
  do
  {
    unint64_t v25 = v22 + v26;
    if (v4 <= v25) {
      goto LABEL_557;
    }
    *(_WORD *)(v27 + 2 * v25) = 1025;
    ++v26;
  }
  while (v21 != v26);
  LODWORD(v643[0]) = v22 + v26;
  unint64_t v4 = v636;
LABEL_12:
  unsigned int v28 = v622;
  int v29 = v13 * v622;
  if (v13 * v622)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v30 = v643[0];
    int v31 = v13 * v622;
    uint64_t v32 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v30;
      if (v4 <= v30) {
        goto LABEL_558;
      }
      *(_WORD *)(v32 + 2 * v30++) = 2306;
      --v31;
    }
    while (v31);
    LODWORD(v643[0]) = v30;
    unint64_t v4 = v636;
    unsigned int v28 = v622;
  }
  int v33 = v28 * v4;
  if (v28 * v4)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v34 = v643[0];
    int v35 = v33;
    uint64_t v36 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v34;
      if (v4 <= v34) {
        goto LABEL_559;
      }
      *(_WORD *)(v36 + 2 * v34++) = 2114;
      --v35;
    }
    while (v35);
    LODWORD(v643[0]) = v34;
    unsigned int v28 = v622;
  }
  if (v29)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v37 = v643[0];
    int v38 = v13 * v622;
    uint64_t v39 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v37;
      if (v4 <= v37) {
        goto LABEL_560;
      }
      *(_WORD *)(v39 + 2 * v37++) = 2306;
      --v38;
    }
    while (v38);
    LODWORD(v643[0]) = v37;
    unsigned int v28 = v622;
  }
  int v40 = v28 * v634;
  if (v28 * v634)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v41 = v643[0];
    int v42 = v28 * v634;
    uint64_t v43 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v41;
      if (v4 <= v41) {
        goto LABEL_561;
      }
      *(_WORD *)(v43 + 2 * v41++) = 2178;
      --v42;
    }
    while (v42);
    LODWORD(v643[0]) = v41;
  }
  if (v29)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v44 = v643[0];
    int v45 = v13 * v622;
    uint64_t v46 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v44;
      if (v4 <= v44) {
        goto LABEL_562;
      }
      *(_WORD *)(v46 + 2 * v44++) = 2306;
      --v45;
    }
    while (v45);
    LODWORD(v643[0]) = v44;
  }
  if (v33)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v47 = v643[0];
    uint64_t v48 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v47;
      if (v4 <= v47) {
        goto LABEL_563;
      }
      *(_WORD *)(v48 + 2 * v47++) = 2114;
      --v33;
    }
    while (v33);
    LODWORD(v643[0]) = v47;
  }
  if (v29)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v49 = v643[0];
    uint64_t v50 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v49;
      if (v4 <= v49) {
        goto LABEL_564;
      }
      *(_WORD *)(v50 + 2 * v49++) = 2306;
      --v29;
    }
    while (v29);
    LODWORD(v643[0]) = v49;
  }
  if (v40)
  {
    unint64_t v4 = *(void *)(v3 + 16);
    unsigned int v51 = v643[0];
    uint64_t v52 = *(void *)(v3 + 32);
    do
    {
      unint64_t v25 = v51;
      if (v4 <= v51) {
        goto LABEL_565;
      }
      *(_WORD *)(v52 + 2 * v51++) = 2178;
    }
    while (--v40);
  }
  uint64_t v628 = (v11 - 1);
  unsigned int v602 = v21;
  v662 = 0;
  unint64_t v660 = 0;
  v659[0] = 0;
  v659[1] = 0;
  int v661 = 0;
  v658 = 0;
  unint64_t v656 = 0;
  v655[0] = 0;
  v655[1] = 0;
  unint64_t v13 = (v616 + 1);
  int v657 = 0;
  re::DynamicArray<float>::resize((uint64_t)v659, v13);
  re::DynamicArray<float>::resize((uint64_t)v655, v13);
  unint64_t v25 = v660;
  if (!v660) {
    goto LABEL_758;
  }
  unint64_t v53 = v662;
  _DWORD *v662 = 0;
  unint64_t v4 = v656;
  if (!v656)
  {
LABEL_759:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = 0;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_760;
  }
  float32x2_t v54 = v658;
  _DWORD *v658 = v628;
  unint64_t v55 = v616;
  if (v616 < 2)
  {
LABEL_58:
    if (v25 <= v616)
    {
LABEL_760:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      unint64_t v576 = v55;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v576;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_761;
    }
    uint64_t v637 = v11;
    unint64_t v18 = (v616 * v11);
    v53[v616] = v18;
    if (v4 <= v616)
    {
LABEL_761:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      unint64_t v577 = v55;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v577;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_762;
    }
    v54[v616] = v18;
    v654 = 0;
    v651[1] = 0;
    unint64_t v652 = 0;
    v650 = 0;
    v651[0] = 0;
    int v653 = 0;
    v647[1] = 0;
    unint64_t v648 = 0;
    v646 = 0;
    v647[0] = 0;
    int v649 = 0;
    v643[1] = 0;
    unint64_t v644 = 0;
    v642 = 0;
    v643[0] = 0;
    int v645 = 0;
    v639[1] = 0;
    unint64_t v640 = 0;
    unint64_t v4 = v636;
    v639[0] = 0;
    int v635 = v636 + 1;
    int v641 = 0;
    uint64_t v11 = v616;
    re::DynamicArray<unsigned int>::resize(v651, (v635 + v635 * v634), re::kInvalidMeshIndex);
    re::DynamicArray<float>::resize((uint64_t)v643, (v625 + 2 * v17 - 3));
    re::DynamicArray<float>::resize((uint64_t)v647, v652);
    re::DynamicArray<float>::resize((uint64_t)v639, v644);
    unint64_t v25 = v652;
    if (!v652)
    {
LABEL_762:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = 0;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_763:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 601;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v25;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_764:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 601;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v19;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_765:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      unint64_t v3 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 609;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v4;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v248;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_766:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v4;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_767:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v17;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_768:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v4;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_769:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      unsigned int v491 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 797;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v3;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_770:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      unint64_t v3 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 609;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v11;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v491;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_771:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      unsigned int v491 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 797;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v3;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_772:
      *(void *)v699 = 0;
      long long v672 = 0u;
      long long v673 = 0u;
      memset(v671, 0, sizeof(v671));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v696[0]) = 136315906;
      *(void *)((char *)v696 + 4) = "operator[]";
      WORD6(v696[0]) = 1024;
      *(_DWORD *)((char *)v696 + 14) = 609;
      WORD1(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 4) = v11;
      WORD6(v696[1]) = 2048;
      *(void *)((char *)&v696[1] + 14) = v491;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_773;
    }
    int v59 = ~v616;
    unint64_t v633 = (v18 + 3);
    int v60 = 2 * v633;
    unint64_t v631 = v18;
    float32x2_t v61 = v654;
    _DWORD *v654 = 2 * v633 + v18;
    unint64_t v18 = v637;
    if (v636 > 1)
    {
      uint64_t v62 = 1;
      int v63 = v616 * ((8 * v637) | 1) + (v634 + v19 - 4) * v13 + 24;
      while (v25 != v62)
      {
        v61[v62++] = v63;
        v63 += v59;
        if (v636 == v62) {
          goto LABEL_65;
        }
      }
      goto LABEL_610;
    }
LABEL_65:
    if (v25 <= v636) {
      goto LABEL_766;
    }
    int v615 = 8 * v633;
    int v64 = v13 * (v636 - 1);
    int v65 = v13 * (v634 - 2);
    v61[v636] = 3 * v633 + v631;
    if (v634 >= 2)
    {
      int v66 = v65 + v616 + v615 + v13 * (v634 - 1) + v64 + v64;
      uint64_t v67 = v634 - 1;
      int v68 = 1;
      int v69 = v64 + v616 * ((8 * v637) | 1) + 24;
      do
      {
        unint64_t v4 = (v4 + v68);
        if (v25 <= v4) {
          goto LABEL_611;
        }
        v61[v4] = v69;
        unint64_t v4 = (v19 + v68);
        if (v25 <= v4) {
          goto LABEL_612;
        }
        v61[v4] = v66;
        v66 += v59;
        v69 += v13;
        v68 += v635;
        --v67;
        unint64_t v4 = v636;
      }
      while (v67);
    }
    int v618 = v13 * (v634 - 1);
    unint64_t v17 = (v635 * v634);
    if (v25 <= v17) {
      goto LABEL_767;
    }
    v61[v17] = v633 + v631;
    if (v4 >= 2)
    {
      unint64_t v70 = v636 - 1;
      int v71 = v616 * ((8 * v637) | 1) + 24;
      unsigned int v72 = v17 + 1;
      do
      {
        unint64_t v4 = v72;
        if (v25 <= v72) {
          goto LABEL_613;
        }
        v61[v72] = v71;
        v71 += v13;
        ++v72;
      }
      while (--v70);
    }
    unsigned int v73 = v636;
    unint64_t v4 = (v17 + v636);
    if (v25 <= v4) {
      goto LABEL_768;
    }
    LODWORD(v612) = (4 * v616 + 4) * v621;
    unint64_t v74 = (v17 + v636);
    v61[v4] = v631;
    if (v634 >= 2)
    {
      unsigned int v75 = v636 + 2;
      int v76 = 1;
      int v77 = v612 + 8 * v633;
      while (1)
      {
        unsigned int v78 = v75;
        unint64_t v79 = v636 - 1;
        if (v73 >= 2) {
          break;
        }
LABEL_82:
        ++v76;
        unsigned int v73 = v636;
        v75 += v635;
        if (v76 == v634) {
          goto LABEL_85;
        }
      }
      while (1)
      {
        unint64_t v4 = v78;
        if (v25 <= v78) {
          break;
        }
        v61[v78++] = v77++;
        if (!--v79) {
          goto LABEL_82;
        }
      }
LABEL_242:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v4;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_243;
    }
    int v77 = v612 + 8 * v633;
LABEL_85:
    unsigned int v80 = v628 + v73;
    if (v637)
    {
      uint64_t v81 = 0;
      unint64_t v4 = v644;
      float32x4_t v82 = v646;
      while (v4 != v81)
      {
        v82[v81] = v81;
        unint64_t v25 = v80 + v81;
        if (v4 <= v25) {
          goto LABEL_567;
        }
        v82[v25] = v633 + v81;
        unint64_t v25 = (v636 + v634 + 2 * v637 - 2 + v81);
        if (v4 <= v25) {
          goto LABEL_568;
        }
        v82[v25] = v60 + v81;
        unint64_t v25 = (v634 + v19 + 3 * v637 - 3 + v81);
        if (v4 <= v25) {
          goto LABEL_569;
        }
        v82[v25] = 3 * v633 + v81++;
        if (v637 == v81) {
          goto LABEL_92;
        }
      }
LABEL_566:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v4;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_567:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_568:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_569:
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v4;
      _os_log_send_and_compose_impl();
      v394 = (float32x2_t *)_os_crash_msg();
      __break(1u);
LABEL_570:
      float32x2_t v458 = v452;
      float32x2_t v456 = v452;
      v453 = a1;
      goto LABEL_571;
    }
LABEL_92:
    if (v636 >= 2)
    {
      unint64_t v4 = v644;
      unsigned int v83 = v646;
      unint64_t v84 = v636 - 1;
      int v85 = v13 * (v636 - 2) + 8 * v631 + 24;
      unsigned int v86 = v637;
      do
      {
        unint64_t v25 = v86;
        if (v4 <= v86) {
          goto LABEL_618;
        }
        v83[v86] = v85;
        v85 += v59;
        ++v86;
      }
      while (--v84);
    }
    unsigned int v87 = v80 + v637;
    if (v634 >= 2)
    {
      unint64_t v4 = v644;
      __int32 v88 = v646;
      uint64_t v89 = v634 - 1;
      int v90 = (v636 + v634 - 3) * v13 + 8 * v631 + 24;
      unsigned int v91 = v80 + v637;
      do
      {
        unint64_t v25 = v91;
        if (v4 <= v91) {
          goto LABEL_619;
        }
        v88[v91] = v90;
        v90 += v59;
        ++v91;
      }
      while (--v89);
    }
    if (v636 >= 2)
    {
      unint64_t v4 = v644;
      unsigned int v92 = v646;
      unint64_t v93 = v636 - 1;
      int v94 = (v634 + v19 - 4) * v13 + 8 * v631 + 24;
      unsigned int v95 = v636 + v634 + 3 * v637 - 2;
      do
      {
        unint64_t v25 = v95;
        if (v4 <= v95) {
          goto LABEL_620;
        }
        v92[v95] = v94;
        v94 += v59;
        ++v95;
      }
      while (--v93);
    }
    if (v634 >= 2)
    {
      unint64_t v4 = v644;
      int v96 = v646;
      uint64_t v97 = v634 - 1;
      int v98 = (v19 + 2 * v634 - 5) * v13 + 8 * v631 + 24;
      unsigned int v99 = v634 + v625 + v19 - 3;
      do
      {
        unint64_t v25 = v99;
        if (v4 <= v99) {
          goto LABEL_621;
        }
        v96[v99] = v98;
        v98 += v59;
        ++v99;
      }
      while (--v97);
    }
    unint64_t v25 = v648;
    if (!v648) {
      goto LABEL_776;
    }
    uint64_t v613 = (4 * v633);
    uint64_t v100 = v650;
    _DWORD *v650 = v613 + v631;
    unint64_t v4 = v636;
    if (v636 < 2)
    {
LABEL_113:
      if (v25 <= v636) {
        goto LABEL_777;
      }
      int v606 = 3 * v633;
      int v103 = v13 * 2 * v621;
      int v104 = v615 + v103;
      int v105 = v615 + v103 + v64;
      int v605 = 5 * v633;
      v100[v636] = 5 * v633 + v631;
      if (v634 < 2)
      {
LABEL_119:
        if (v25 <= v17) {
          goto LABEL_778;
        }
        unsigned int v604 = 7 * v633;
        v100[v17] = 7 * v633 + v631;
        if (v4 < 2)
        {
LABEL_124:
          unint64_t v4 = (v17 + v636);
          if (v25 <= v74) {
            goto LABEL_779;
          }
          unint64_t v17 = (3 * v633);
          v100[v74] = v631 + 6 * v633;
          if (v634 >= 2)
          {
            unsigned int v113 = v636 + 2;
            int v114 = 1;
            while (1)
            {
              unsigned int v115 = v113;
              unint64_t v116 = v636 - 1;
              if (v636 >= 2) {
                break;
              }
LABEL_130:
              ++v114;
              v113 += v635;
              if (v114 == v634) {
                goto LABEL_131;
              }
            }
            while (1)
            {
              unint64_t v4 = v115;
              if (v25 <= v115) {
                break;
              }
              v100[v115++] = v77++;
              if (!--v116) {
                goto LABEL_130;
              }
            }
LABEL_243:
            *(void *)&v671[0] = 0;
            long long v686 = 0u;
            long long v687 = 0u;
            long long v684 = 0u;
            long long v685 = 0u;
            *(_OWORD *)v683 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            v677[0] = 136315906;
            *(void *)&v677[1] = "operator[]";
            LOWORD(v677[3]) = 1024;
            *(unsigned int *)((char *)&v677[3] + 2) = 789;
            HIWORD(v677[4]) = 2048;
            *(void *)&v677[5] = v4;
            LOWORD(v677[7]) = 2048;
            *(void *)((char *)&v677[7] + 2) = v25;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_244;
          }
LABEL_131:
          if (v637)
          {
            uint64_t v117 = 0;
            unint64_t v4 = v640;
            unsigned int v118 = v642;
            unsigned int v119 = v634 + v19 + 3 * v637 - 3;
            unsigned int v120 = v636 + v634 + 2 * v637 - 2;
            unsigned int v121 = v642;
            while (v4 + v117)
            {
              *unsigned int v121 = v637 - v631 + 8 * v631 + 20 + v117;
              unint64_t v25 = v80;
              if (v4 <= v80) {
                goto LABEL_615;
              }
              uint64_t v11 = v637 * ((6 * v616) | 1) + 17 + v117;
              v118[v80] = v11;
              unint64_t v25 = v120;
              if (v4 <= v120) {
                goto LABEL_616;
              }
              uint64_t v11 = (v637 + 5 * v631 + 14 + v117);
              v118[v120] = v11;
              unint64_t v25 = v119;
              if (v4 <= v119) {
                goto LABEL_617;
              }
              uint64_t v11 = (v637 + v637 * 4 * v616 + 11 + v117);
              v118[v119] = v11;
              ++v121;
              --v117;
              ++v119;
              ++v120;
              ++v80;
              if (-v637 == v117) {
                goto LABEL_138;
              }
            }
            goto LABEL_614;
          }
LABEL_138:
          uint64_t v11 = v623;
          if (v636 < 2)
          {
LABEL_142:
            if (v634 < 2)
            {
LABEL_146:
              int v128 = v105 + v618;
              if (v636 < 2)
              {
LABEL_150:
                if (v634 < 2)
                {
LABEL_154:
                  if (!v644) {
                    goto LABEL_781;
                  }
                  v646[v644 - 1] = *v646;
                  if (!v640)
                  {
LABEL_782:
                    *(void *)&v671[0] = 0;
                    long long v686 = 0u;
                    long long v687 = 0u;
                    long long v684 = 0u;
                    long long v685 = 0u;
                    *(_OWORD *)v683 = 0u;
                    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    v677[0] = 136315906;
                    *(void *)&v677[1] = "operator[]";
                    LOWORD(v677[3]) = 1024;
                    *(unsigned int *)((char *)&v677[3] + 2) = 789;
                    HIWORD(v677[4]) = 2048;
                    *(void *)&v677[5] = 0;
                    LOWORD(v677[7]) = 2048;
                    *(void *)((char *)&v677[7] + 2) = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_783:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    LODWORD(v696[0]) = 136315906;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v13 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_784:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    LODWORD(v696[0]) = 136315906;
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v11 - v25 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_785:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    uint64_t v19 = v428;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    LODWORD(v696[0]) = 136315906;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v19 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_786:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    LODWORD(v696[0]) = 136315906;
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v17 - v25 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_787:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    LODWORD(v696[0]) = 136315906;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v637 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_788:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    LODWORD(v696[0]) = 136315906;
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v18 - v25 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_789:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    LODWORD(v696[0]) = 136315906;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v16 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_790:
                    v663[0] = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(void *)((char *)v696 + 4) = "operator[]";
                    LODWORD(v696[0]) = 136315906;
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = (v19 - v25 + v4 - 1);
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_791:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    uint64_t v344 = &_os_log_internal;
                    unint64_t v578 = v336;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 797;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v578;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_792:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v344;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_793:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    unint64_t v579 = v336;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 797;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v579;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_794:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v19;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    unint64_t v358 = _os_crash_msg();
                    __break(1u);
LABEL_795:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    unint64_t v580 = v358;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 797;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v580;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v25;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_796:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v16;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    unint64_t v358 = _os_crash_msg();
                    __break(1u);
LABEL_797:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    unint64_t v3 = v358;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 797;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v3;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v25;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_798:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v17;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v4;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_799:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v16;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v19;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_800;
                  }
                  int v603 = 2 * v633;
                  uint64_t v625 = v622 + 1;
                  int v619 = (v19 - 2) * (v634 - 1);
                  unsigned int v608 = v612 + 8 * v633 + v619;
                  v642[v640 - 1] = *v642;
                  bzero(v683, 0x2D0uLL);
                  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v683[1]);
                  v600 = (re::internal::GeomAttributeManager *)((char *)&v686 + 8);
                  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v686 + 8), "vertexPosition", 1, 7);
                  if (v623 < v685)
                  {
                    int v137 = v695;
                    if (v695)
                    {
                      unsigned int v138 = 0;
                      do
                      {
                        float v139 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v694, v138);
                        re::internal::accessFaceVaryingAttributeSubmesh(v139, v140);
                        ++v138;
                      }
                      while (v137 != v138);
                    }
                  }
                  re::DynamicArray<re::GeomCell4>::resize(&v684, v623);
                  unsigned int v691 = v623;
                  if (v692)
                  {
                    unint64_t v141 = v693;
                    uint64_t v142 = 8 * v692;
                    do
                    {
                      uint64_t v143 = *v141++;
                      (*(void (**)(uint64_t, void))(*(void *)v143 + 72))(v143, v691);
                      v142 -= 8;
                    }
                    while (v142);
                  }
                  int v144 = v628;
                  if (LODWORD(v683[1]) > v608 + (v629 | 1) * v625
                    && v685
                    && (v685 - 1) > (unint64_t)v685)
                  {
                    while (1)
                      ;
                  }
                  LODWORD(v683[1]) = v608 + (v629 | 1) * v625;
                  unsigned int v688 = v683[1];
                  if (v689)
                  {
                    uint64_t v145 = v690;
                    uint64_t v146 = 8 * v689;
                    do
                    {
                      uint64_t v147 = *v145++;
                      (*(void (**)(uint64_t, void))(*(void *)v147 + 72))(v147, v688);
                      v146 -= 8;
                    }
                    while (v146);
                  }
                  if (*(void *)(v3 + 8) < v623) {
                    re::DynamicArray<unsigned short>::setCapacity((void *)v3, v623);
                  }
                  if (v632)
                  {
                    unsigned int v148 = 0;
                    int v149 = 0;
                    do
                    {
                      unsigned int v150 = v148;
                      if (v144)
                      {
                        int v151 = v149 * v637;
                        unsigned int v150 = v148 + v144;
                        int v152 = 1;
                        do
                        {
                          int v153 = v151 + 1;
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v148 + v152++ - 1, v151, v151 + 1, v637 + v151 + 1, v637 + v151);
                          int v151 = v153;
                        }
                        while (v637 != v152);
                        int v144 = v628;
                      }
                      ++v149;
                      v148 += v144;
                    }
                    while (v149 != v632);
                  }
                  else
                  {
                    unsigned int v150 = 0;
                  }
                  int v154 = v632 * v637;
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v150, v631, v632 * v637, v631 + 1);
                  *(void *)v607 = (v631 + 1);
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v150 + 1, v631, v607[0], v631 + 2);
                  *(void *)v610 = (v631 + 2);
                  unint64_t v598 = (v631 - 1);
                  re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v150 + 2, v631, v631 + 2, v631 - 1);
                  unsigned int v155 = v150 + 3;
                  unsigned int v156 = (v637 | 0xFFFFFFFE) + v637;
                  unint64_t v157 = v156 >> 1;
                  unint64_t v601 = (v632 * v637);
                  if (v156 >= 2)
                  {
                    if (v157 <= 1) {
                      uint64_t v158 = 1;
                    }
                    else {
                      uint64_t v158 = v156 >> 1;
                    }
                    int v159 = v632 * v637;
                    do
                    {
                      int v154 = v159 + 1;
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v155++, v607[0], v159, v159 + 1);
                      int v159 = v154;
                      --v158;
                    }
                    while (v158);
                  }
                  if (v637)
                  {
                    re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v155, v607[0], v154, v610[0]);
                  }
                  else
                  {
                    re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v155, v607[0], v154, v154 + 1, v610[0]);
                    ++v154;
                  }
                  int v609 = 6 * v633;
                  if (v156 >= 2)
                  {
                    if (v157 <= 1) {
                      unint64_t v157 = 1;
                    }
                    unsigned int v160 = v155 + 1;
                    do
                    {
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v160++, v610[0], v154, v154 + 1);
                      ++v154;
                      --v157;
                    }
                    while (v157);
                  }
                  int v161 = 1;
                  unint64_t v25 = (unint64_t)v677;
                  unint64_t v17 = 3;
                  unint64_t v13 = v633;
                  unint64_t v3 = v16;
                  do
                  {
                    if (v16)
                    {
                      unint64_t v18 = 0;
                      unint64_t v4 = 0;
                      while (1)
                      {
                        uint64_t v11 = v685;
                        if ((unint64_t)v685 <= v4) {
                          break;
                        }
                        uint64_t v162 = 0;
                        uint64_t v163 = v686 + v18;
                        do
                        {
                          v677[v162] = *(_DWORD *)(v163 + v162 * 4);
                          ++v162;
                        }
                        while (v162 != 4);
                        uint64_t v164 = 0;
                        if (v677[3] == -1) {
                          uint64_t v165 = 3;
                        }
                        else {
                          uint64_t v165 = 4;
                        }
                        do
                          v677[v164++] += v13;
                        while (v165 != v164);
                        re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)v683, v3, v165, (double *)v677);
                        unint64_t v3 = (v3 + 1);
                        ++v4;
                        v18 += 16;
                        if (v4 == v16) {
                          goto LABEL_206;
                        }
                      }
                      *(void *)&v696[0] = 0;
                      long long v678 = 0u;
                      long long v679 = 0u;
                      memset(v677, 0, sizeof(v677));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v671[0]) = 136315906;
                      *(void *)((char *)v671 + 4) = "operator[]";
                      WORD6(v671[0]) = 1024;
                      *(_DWORD *)((char *)v671 + 14) = 797;
                      WORD1(v671[1]) = 2048;
                      *(void *)((char *)&v671[1] + 4) = v4;
                      WORD6(v671[1]) = 2048;
                      *(void *)((char *)&v671[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_242;
                    }
LABEL_206:
                    unint64_t v13 = (v13 + v633);
                    ++v161;
                  }
                  while (v161 != 8);
                  *(void *)v677 = v662;
                  *(void *)&v677[2] = v660;
                  *(void *)&v671[0] = v658;
                  *((void *)&v671[0] + 1) = v656;
                  LODWORD(v696[0]) = 8 * v633;
                  *(_DWORD *)v699 = 8 * v16;
                  uint64_t v11 = v637;
                  unsigned int v166 = v622;
                  unint64_t v167 = v627;
                  if (v634)
                  {
                    LODWORD(v4) = 0;
                    while (1)
                    {
                      unint64_t v13 = v636;
                      if (v636) {
                        break;
                      }
                      LODWORD(v4) = v4 + 1;
LABEL_218:
                      if (v4 == v634)
                      {
                        int v170 = 0;
                        while (1)
                        {
                          unint64_t v13 = v636;
                          if (v636) {
                            break;
                          }
                          ++v170;
LABEL_229:
                          if (v170 == v634) {
                            goto LABEL_230;
                          }
                        }
                        unsigned int v171 = v170 * v635;
                        unint64_t v25 = (++v170 * v635);
                        while (1)
                        {
                          uint64_t v19 = v171;
                          unint64_t v3 = v648;
                          if (v648 <= v171) {
                            break;
                          }
                          unint64_t v16 = v171 + 1;
                          if (v648 <= v16) {
                            goto LABEL_348;
                          }
                          unint64_t v17 = (v25 + 1);
                          if (v648 <= v17) {
                            goto LABEL_349;
                          }
                          unint64_t v18 = v25;
                          if (v648 <= v25) {
                            goto LABEL_350;
                          }
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v20++, v650[v171], v650[v16], v650[v17], v650[v25]);
                          unint64_t v25 = (v25 + 1);
                          unsigned int v171 = v19 + 1;
                          --v13;
                          uint64_t v11 = v637;
                          if (!v13)
                          {
                            unsigned int v166 = v622;
                            unint64_t v167 = v627;
                            goto LABEL_229;
                          }
                        }
                        *(void *)&v696[0] = 0;
                        long long v678 = 0u;
                        long long v679 = 0u;
                        memset(v677, 0, sizeof(v677));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v671[0]) = 136315906;
                        *(void *)((char *)v671 + 4) = "operator[]";
                        WORD6(v671[0]) = 1024;
                        *(_DWORD *)((char *)v671 + 14) = 797;
                        WORD1(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 4) = v19;
                        WORD6(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_348:
                        *(void *)&v696[0] = 0;
                        long long v678 = 0u;
                        long long v679 = 0u;
                        memset(v677, 0, sizeof(v677));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v671[0]) = 136315906;
                        *(void *)((char *)v671 + 4) = "operator[]";
                        WORD6(v671[0]) = 1024;
                        *(_DWORD *)((char *)v671 + 14) = 797;
                        WORD1(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 4) = v16;
                        WORD6(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_349:
                        *(void *)&v696[0] = 0;
                        long long v678 = 0u;
                        long long v679 = 0u;
                        memset(v677, 0, sizeof(v677));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v671[0]) = 136315906;
                        *(void *)((char *)v671 + 4) = "operator[]";
                        WORD6(v671[0]) = 1024;
                        *(_DWORD *)((char *)v671 + 14) = 797;
                        WORD1(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 4) = v17;
                        WORD6(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_350:
                        *(void *)&v696[0] = 0;
                        long long v678 = 0u;
                        long long v679 = 0u;
                        memset(v677, 0, sizeof(v677));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v671[0]) = 136315906;
                        *(void *)((char *)v671 + 4) = "operator[]";
                        WORD6(v671[0]) = 1024;
                        *(_DWORD *)((char *)v671 + 14) = 797;
                        WORD1(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 4) = v18;
                        WORD6(v671[1]) = 2048;
                        *(void *)((char *)&v671[1] + 14) = v3;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_351:
                        uint64_t v284 = 0;
                        uint64_t v283 = 0;
LABEL_352:
                        unint64_t v291 = v19;
                        unint64_t v292 = v13;
                        if (v652)
                        {
                          unint64_t v282 = v3;
                          unint64_t v3 = *v654;
                          if (v284 > v3)
                          {
                            if (v3 < v19)
                            {
                              uint64_t v285 = v283;
                              unint64_t v4 = v654[v652 - 1];
                              if (v4 < v19)
                              {
                                if (v648)
                                {
                                  uint64_t v19 = *v650;
                                  if (v19 < v291)
                                  {
                                    unint64_t v13 = v650[v648 - 1];
                                    if (v13 < v291)
                                    {
                                      float v287 = *(float *)(v285 + 4 * v3);
                                      float32x4_t v293 = *(float32x4_t *)(v25 + 16 * v3);
                                      v293.i32[3] = 0;
                                      float32x4_t v294 = vmaxnmq_f32(v293, (float32x4_t)xmmword_234382190);
                                      float32x4_t v295 = vminnmq_f32(v293, (float32x4_t)xmmword_234382180);
                                      float32x4_t v296 = *(float32x4_t *)(v25 + 16 * v4);
                                      v295.i32[3] = 0;
                                      v296.i32[3] = 0;
                                      v294.i32[3] = 0;
                                      float32x2_t v286 = (float32x2_t)vminnmq_f32(v295, v296).u64[0];
                                      float32x2_t v288 = (float32x2_t)vmaxnmq_f32(v294, v296).u64[0];
                                      float32x4_t v297 = *(float32x4_t *)(v25 + 16 * v19);
                                      v297.i32[3] = 0;
                                      float32x4_t v298 = vmaxnmq_f32(v297, (float32x4_t)xmmword_234382190);
                                      float32x4_t v299 = vminnmq_f32(v297, (float32x4_t)xmmword_234382180);
                                      float32x4_t v300 = *(float32x4_t *)(v25 + 16 * v13);
                                      v299.i32[3] = 0;
                                      v300.i32[3] = 0;
                                      float32x2_t v290 = (float32x2_t)vminnmq_f32(v299, v300).u64[0];
                                      v298.i32[3] = 0;
                                      float32x2_t v289 = (float32x2_t)vmaxnmq_f32(v298, v300).u64[0];
                                      unint64_t v4 = (v636 + 1);
                                      unint64_t v278 = v636;
                                      goto LABEL_360;
                                    }
LABEL_850:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
                                    unsigned int v591 = v291;
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v13;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v591;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_851:
                                    re::internal::assertLog((re::internal *)6, (uint64_t)v330, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v19);
                                    _os_crash();
                                    __break(1u);
LABEL_852:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_853:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_854:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    unint64_t v4 = v382;
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_855:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v19;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_856:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v11;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_857:
                                    v663[0] = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_858:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_859:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_860:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v631;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_861:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_862:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v601;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v13;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_863:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v13;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_864:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v11;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_865:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v13;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v4;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_866:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 601;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v11;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v4;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_867:
                                    re::internal::assertLog((re::internal *)6, (uint64_t)v330, v324, v530, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
                                    _os_crash();
                                    __break(1u);
LABEL_868:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_869:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v13;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_870:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v19;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
LABEL_871:
                                    *(void *)v699 = 0;
                                    long long v672 = 0u;
                                    long long v673 = 0u;
                                    memset(v671, 0, sizeof(v671));
                                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                    LODWORD(v696[0]) = 136315906;
                                    *(void *)((char *)v696 + 4) = "operator[]";
                                    WORD6(v696[0]) = 1024;
                                    *(_DWORD *)((char *)v696 + 14) = 609;
                                    WORD1(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 4) = v4;
                                    WORD6(v696[1]) = 2048;
                                    *(void *)((char *)&v696[1] + 14) = v248;
                                    _os_log_send_and_compose_impl();
                                    _os_crash_msg();
                                    __break(1u);
                                  }
LABEL_849:
                                  *(void *)v699 = 0;
                                  long long v672 = 0u;
                                  long long v673 = 0u;
                                  memset(v671, 0, sizeof(v671));
                                  unsigned int v590 = v291;
                                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                  LODWORD(v696[0]) = 136315906;
                                  *(void *)((char *)v696 + 4) = "operator[]";
                                  WORD6(v696[0]) = 1024;
                                  *(_DWORD *)((char *)v696 + 14) = 609;
                                  WORD1(v696[1]) = 2048;
                                  *(void *)((char *)&v696[1] + 4) = v19;
                                  WORD6(v696[1]) = 2048;
                                  *(void *)((char *)&v696[1] + 14) = v590;
                                  _os_log_send_and_compose_impl();
                                  _os_crash_msg();
                                  __break(1u);
                                  goto LABEL_850;
                                }
LABEL_848:
                                *(void *)v699 = 0;
                                long long v672 = 0u;
                                long long v673 = 0u;
                                memset(v671, 0, sizeof(v671));
                                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                                LODWORD(v696[0]) = 136315906;
                                *(void *)((char *)v696 + 4) = "operator[]";
                                WORD6(v696[0]) = 1024;
                                *(_DWORD *)((char *)v696 + 14) = 797;
                                WORD1(v696[1]) = 2048;
                                *(void *)((char *)&v696[1] + 4) = 0;
                                WORD6(v696[1]) = 2048;
                                *(void *)((char *)&v696[1] + 14) = 0;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                                goto LABEL_849;
                              }
LABEL_847:
                              *(void *)v699 = 0;
                              long long v672 = 0u;
                              long long v673 = 0u;
                              memset(v671, 0, sizeof(v671));
                              unsigned int v589 = v291;
                              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                              LODWORD(v696[0]) = 136315906;
                              *(void *)((char *)v696 + 4) = "operator[]";
                              WORD6(v696[0]) = 1024;
                              *(_DWORD *)((char *)v696 + 14) = 609;
                              WORD1(v696[1]) = 2048;
                              *(void *)((char *)&v696[1] + 4) = v4;
                              WORD6(v696[1]) = 2048;
                              *(void *)((char *)&v696[1] + 14) = v589;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              goto LABEL_848;
                            }
LABEL_846:
                            *(void *)v699 = 0;
                            long long v672 = 0u;
                            long long v673 = 0u;
                            memset(v671, 0, sizeof(v671));
                            unint64_t v4 = v291;
                            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                            LODWORD(v696[0]) = 136315906;
                            *(void *)((char *)v696 + 4) = "operator[]";
                            WORD6(v696[0]) = 1024;
                            *(_DWORD *)((char *)v696 + 14) = 609;
                            WORD1(v696[1]) = 2048;
                            *(void *)((char *)&v696[1] + 4) = v3;
                            WORD6(v696[1]) = 2048;
                            *(void *)((char *)&v696[1] + 14) = v4;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
                            goto LABEL_847;
                          }
LABEL_845:
                          *(void *)v699 = 0;
                          long long v672 = 0u;
                          long long v673 = 0u;
                          memset(v671, 0, sizeof(v671));
                          unsigned int v588 = v284;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          LODWORD(v696[0]) = 136315906;
                          *(void *)((char *)v696 + 4) = "operator[]";
                          WORD6(v696[0]) = 1024;
                          *(_DWORD *)((char *)v696 + 14) = 609;
                          WORD1(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 4) = v3;
                          WORD6(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 14) = v588;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                          goto LABEL_846;
                        }
LABEL_844:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v696[0]) = 136315906;
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 797;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = 0;
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                        goto LABEL_845;
                      }
                    }
                    unsigned int v168 = v4 * v635;
                    unint64_t v4 = (v4 + 1);
                    unint64_t v25 = (v4 * v635);
                    while (1)
                    {
                      uint64_t v19 = v168;
                      unint64_t v169 = v652;
                      if (v652 <= v168) {
                        break;
                      }
                      unint64_t v16 = v168 + 1;
                      if (v652 <= v16) {
                        goto LABEL_268;
                      }
                      unint64_t v17 = (v25 + 1);
                      if (v652 <= v17) {
                        goto LABEL_269;
                      }
                      unint64_t v18 = v25;
                      if (v652 <= v25) {
                        goto LABEL_270;
                      }
                      re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v20++, v654[v168], v654[v16], v654[v17], v654[v25]);
                      unint64_t v25 = (v25 + 1);
                      unsigned int v168 = v19 + 1;
                      --v13;
                      uint64_t v11 = v637;
                      if (!v13)
                      {
                        unsigned int v166 = v622;
                        unint64_t v167 = v627;
                        goto LABEL_218;
                      }
                    }
                    *(void *)&v696[0] = 0;
                    long long v678 = 0u;
                    long long v679 = 0u;
                    memset(v677, 0, sizeof(v677));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v671[0]) = 136315906;
                    *(void *)((char *)v671 + 4) = "operator[]";
                    WORD6(v671[0]) = 1024;
                    *(_DWORD *)((char *)v671 + 14) = 797;
                    WORD1(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 4) = v19;
                    WORD6(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_268:
                    *(void *)&v696[0] = 0;
                    long long v678 = 0u;
                    long long v679 = 0u;
                    memset(v677, 0, sizeof(v677));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v671[0]) = 136315906;
                    *(void *)((char *)v671 + 4) = "operator[]";
                    WORD6(v671[0]) = 1024;
                    *(_DWORD *)((char *)v671 + 14) = 797;
                    WORD1(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 4) = v16;
                    WORD6(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_269:
                    *(void *)&v696[0] = 0;
                    long long v678 = 0u;
                    long long v679 = 0u;
                    memset(v677, 0, sizeof(v677));
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v671[0]) = 136315906;
                    *(void *)((char *)v671 + 4) = "operator[]";
                    WORD6(v671[0]) = 1024;
                    *(_DWORD *)((char *)v671 + 14) = 797;
                    WORD1(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 4) = v17;
                    WORD6(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_270:
                    *(void *)&v696[0] = 0;
                    long long v678 = 0u;
                    long long v679 = 0u;
                    memset(v677, 0, sizeof(v677));
                    uint64_t v193 = &_os_log_internal;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v671[0]) = 136315906;
                    *(void *)((char *)v671 + 4) = "operator[]";
                    WORD6(v671[0]) = 1024;
                    *(_DWORD *)((char *)v671 + 14) = 797;
                    WORD1(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 4) = v18;
                    WORD6(v671[1]) = 2048;
                    *(void *)((char *)&v671[1] + 14) = v169;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_271:
                    unint64_t v195 = 0;
                    uint64_t v196 = 0;
LABEL_272:
                    unint64_t v192 = v169;
                    goto LABEL_273;
                  }
LABEL_230:
                  unint64_t v13 = v633;
                  if (v629)
                  {
                    int v172 = 0;
                    int v173 = v619 + 8 * v631 + v612;
                    int v174 = v173 + v166;
                    do
                    {
                      if (v166)
                      {
                        for (int i = 0; i != v166; ++i)
                        {
                          unint64_t v16 = v167;
                          re::GeomMeshBuilder::setFaceVertices((uint64_t)v683, v167 + i, v173 + i + 24, v173 + i + 25, v174 + i + 26, v174 + i + 25);
                          unint64_t v167 = v16;
                        }
                        unint64_t v167 = (v16 + i);
                      }
                      ++v172;
                      v173 += v625;
                      v174 += v625;
                    }
                    while (v172 != v629);
                  }
                  unint64_t v3 = (unint64_t)a1;
                  BOOL v176 = (re *)re::GeomMesh::operator=((uint64_t)a1, &v683[1]);
                  re::GeomMesh::setName(v176, v683[0]);
                  re::GeomMesh::freeName((re *)v683);
                  if (*a2) {
                    re::addVertexUVs(a1, v177);
                  }
                  float32x4_t v178 = (int32x2_t *)a2;
                  float32x4_t v179 = (char *)*((void *)a2 + 9);
                  if (v179)
                  {
                    float32x4_t v180 = re::GeomMesh::addAttribute((uint64_t)a1, v179, 1, 4);
                    float32x4_t v178 = (int32x2_t *)a2;
                    unint64_t v4 = (unint64_t)v180;
                    goto LABEL_245;
                  }
LABEL_244:
                  unint64_t v4 = 0;
LABEL_245:
                  float v181 = *(float *)v178[3].i32;
                  int32x2_t v182 = v178[1];
                  float v680 = v6;
                  float v681 = v181;
                  int32x2_t v682 = v182;
                  v627 = (re::GeomMesh *)v4;
                  if (a2[5])
                  {
                    float v183 = *((float *)a2 + 7);
                    float v674 = v6;
                    float v675 = v183;
                    int32x2_t v676 = v182;
                    unint64_t v25 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v3);
                    unint64_t v612 = v184;
                    uint64_t v11 = v185;
                    unint64_t v16 = v186;
                    unint64_t v192 = v4;
                    if (v4)
                    {
                      unint64_t v169 = v4;
                      uint64_t v193 = v631;
                      if (!(*(unsigned int (**)(unint64_t, unint64_t))(*(void *)v4 + 16))(v4, v186))goto LABEL_271; {
                      unint64_t v4 = re::internal::GeomTypedAttribute<float>::operator[](v4, 0);
                      }
                      uint64_t v194 = (*(uint64_t (**)(unint64_t))(*(void *)v169 + 16))(v169);
                      unint64_t v195 = v4;
                      uint64_t v196 = v194;
                      goto LABEL_272;
                    }
                    unint64_t v195 = 0;
                    uint64_t v196 = 0xFFFFFFFFLL;
                    uint64_t v193 = v631;
LABEL_273:
                    unint64_t v220 = v616;
                    uint64_t v221 = v11;
                    if (v616)
                    {
                      uint64_t v222 = 0;
                      unint64_t v223 = v16;
                      unint64_t v16 = (float)((float)((float)v13 + -3.0) / (float)v616);
                      unint64_t v13 = v612;
                      uint64_t v597 = v612;
                      unint64_t v224 = v223;
                      unint64_t v595 = v223;
                      uint64_t v596 = v11;
                      uint64_t v630 = v196;
                      int v593 = 7 * v193 + 20;
                      int v594 = 5 * v193 + 14;
                      do
                      {
                        if (v16)
                        {
                          uint64_t v225 = 0;
                          unint64_t v18 = 0;
                          unint64_t v226 = (v222 * v16 + v613);
                          int v592 = v222;
                          unint64_t v227 = (v222 * v16 + v609);
                          unint64_t v617 = v195 + 4 * v227;
                          uint64_t v599 = v222 + 1;
                          int v228 = (v222 + 1) * v16;
                          uint64_t v624 = v19 + 16 * v227;
                          if (v612 >= v226) {
                            unint64_t v229 = v612 - v226;
                          }
                          else {
                            unint64_t v229 = 0;
                          }
                          unint64_t v230 = v17 + 16 * v227;
                          if (v612 >= v227) {
                            unint64_t v231 = v612 - v227;
                          }
                          else {
                            unint64_t v231 = 0;
                          }
                          unint64_t v232 = v25 + 16 * v227;
                          if (v11 >= v226) {
                            unint64_t v233 = v11 - v226;
                          }
                          else {
                            unint64_t v233 = 0;
                          }
                          unint64_t v234 = v195;
                          unint64_t v235 = v195 + 4 * v226;
                          if (v11 >= v227) {
                            unint64_t v236 = v11 - v227;
                          }
                          else {
                            unint64_t v236 = 0;
                          }
                          uint64_t v237 = v19 + 16 * v226;
                          if (v595 >= v226) {
                            uint64_t v238 = v595 - v226;
                          }
                          else {
                            uint64_t v238 = 0;
                          }
                          unint64_t v620 = v227;
                          if (v595 >= v227) {
                            uint64_t v239 = v595 - v227;
                          }
                          else {
                            uint64_t v239 = 0;
                          }
                          unint64_t v240 = v17 + 16 * v226;
                          unsigned int v241 = v594 + v228;
                          unint64_t v242 = v25 + 16 * v226;
                          unsigned int v243 = v593 + v228;
                          do
                          {
                            if (v229 == v18) {
                              goto LABEL_686;
                            }
                            v187.i32[0] = *(_DWORD *)(v242 + v225);
                            v188.i64[0] = *(void *)(v242 + v225 + 4);
                            int32x4_t v244 = (int32x4_t)vnegq_f32(v188);
                            float32x4_t v245 = v187;
                            *(uint64_t *)((char *)v245.i64 + 4) = v244.i64[0];
                            *(float32x4_t *)(v242 + v225) = v245;
                            unint64_t v4 = v241;
                            if (v241 >= v612) {
                              goto LABEL_687;
                            }
                            *(float *)v190.i32 = -v187.f32[0];
                            int32x4_t v246 = vzip1q_s32(v190, v244);
                            int32x4_t v247 = v246;
                            v247.i32[2] = v244.i32[1];
                            *(int32x4_t *)(v25 + 16 * v241) = v247;
                            if (v231 == v18) {
                              goto LABEL_688;
                            }
                            v190.i32[1] = v188.i32[0];
                            v190.i32[2] = v244.i32[1];
                            *(int32x4_t *)(v232 + 16 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v190;
                            unint64_t v248 = v243;
                            if (v243 >= v612) {
                              goto LABEL_689;
                            }
                            v187.i32[1] = v188.i32[0];
                            v187.i32[2] = v244.i32[1];
                            *(float32x4_t *)(v25 + 16 * v243) = v187;
                            if (v233 == v18) {
                              goto LABEL_690;
                            }
                            v188.i32[0] = *(_DWORD *)(v240 + v225);
                            float v249 = *(float *)(v240 + v225 + 4);
                            float v250 = -*(float *)(v240 + v225 + 8);
                            float32x4_t v251 = v188;
                            v251.f32[1] = v249;
                            v251.f32[2] = v250;
                            *(float32x4_t *)(v240 + v225) = v251;
                            if (v241 >= v11) {
                              goto LABEL_691;
                            }
                            v251.f32[0] = -v188.f32[0];
                            v251.f32[1] = v249;
                            v251.f32[2] = v250;
                            *(float32x4_t *)(v17 + 16 * v241) = v251;
                            if (v236 == v18) {
                              goto LABEL_692;
                            }
                            v188.f32[1] = -v249;
                            v188.f32[2] = v250;
                            *(float32x4_t *)(v230 + 16 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v188;
                            if (v243 >= v11) {
                              goto LABEL_693;
                            }
                            *(float *)&v246.i32[2] = v250;
                            *(int32x4_t *)(v17 + 16 * v243) = v246;
                            if (v238 == v18) {
                              goto LABEL_694;
                            }
                            v246.i32[0] = *(_DWORD *)(v237 + v225);
                            v187.i64[0] = *(void *)(v237 + v225 + 4);
                            float32x4_t v188 = vnegq_f32(v187);
                            float32x4_t v189 = (float32x4_t)v246;
                            *(uint64_t *)((char *)v189.i64 + 4) = v188.i64[0];
                            *(float32x4_t *)(v237 + v225) = v189;
                            if (v241 >= v224) {
                              goto LABEL_695;
                            }
                            v189.f32[0] = -*(float *)v246.i32;
                            int32x4_t v190 = (int32x4_t)v189;
                            *(uint64_t *)((char *)v190.i64 + 4) = v188.i64[0];
                            *(int32x4_t *)(v19 + 16 * v241) = v190;
                            if (v239 == v18) {
                              goto LABEL_696;
                            }
                            v189.i32[1] = v187.i32[0];
                            v189.i32[2] = v188.i32[1];
                            *(float32x4_t *)(v624 + 16 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v189;
                            if (v243 >= v224) {
                              goto LABEL_697;
                            }
                            v246.i32[1] = v187.i32[0];
                            v246.i32[2] = v188.i32[1];
                            *(int32x4_t *)(v19 + 16 * v243) = v246;
                            if (v627)
                            {
                              if (v226 + v18 >= v196) {
                                goto LABEL_702;
                              }
                              if (v196 <= v241) {
                                goto LABEL_703;
                              }
                              *(_DWORD *)(v234 + 4 * v241) = *(_DWORD *)(v235 + 4 * v18);
                              if (v620 + v18 >= v196) {
                                goto LABEL_704;
                              }
                              *(_DWORD *)(v617 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v235 + 4 * v18);
                              if (v196 <= v243) {
                                goto LABEL_705;
                              }
                              *(_DWORD *)(v234 + 4 * v243) = *(_DWORD *)(v235 + 4 * v18);
                            }
                            ++v18;
                            v225 += 16;
                            --v241;
                            --v243;
                          }
                          while (v16 != v18);
                          unint64_t v220 = v616;
                          uint64_t v193 = v631;
                          unint64_t v192 = (unint64_t)v627;
                          uint64_t v221 = v11;
                          unint64_t v195 = v234;
                          uint64_t v252 = v599;
                        }
                        else
                        {
                          uint64_t v252 = v222 + 1;
                        }
                        uint64_t v222 = v252;
                      }
                      while (v252 != v220);
                      unint64_t v16 = v224;
                    }
                    unint64_t v4 = 0;
                    int v253 = 7 * v193 + 20;
                    int v254 = (8 * v193 + 16) | 7;
                    int v255 = (6 * v193 + 16) | 1;
                    int v256 = 5 * v193 + 14;
                    int v257 = 1;
                    uint64_t v11 = v625;
                    do
                    {
                      if (v4) {
                        unsigned int v258 = (int)(float)((float)v257 + -3.0);
                      }
                      else {
                        unsigned int v258 = 1;
                      }
                      unsigned int v259 = v256 + v4;
                      unint64_t v13 = v612;
                      if (v256 + (int)v4 >= v612) {
                        goto LABEL_736;
                      }
                      unint64_t v18 = (v256 + v4);
                      if (v259 >= v221) {
                        goto LABEL_737;
                      }
                      if (v259 >= v16) {
                        goto LABEL_738;
                      }
                      unint64_t v260 = v25 + 16 * v259;
                      v190.i32[0] = *(_DWORD *)v260;
                      v191.i64[0] = *(void *)(v260 + 4);
                      unint64_t v261 = v17 + 16 * v18;
                      v189.i64[0] = *(void *)v261;
                      float v262 = *(float *)(v261 + 8);
                      unint64_t v263 = v19 + 16 * v18;
                      v187.i32[0] = *(_DWORD *)v263;
                      unint64_t v264 = vnegq_f32(v191).u64[0];
                      int32x4_t v265 = v190;
                      *(uint64_t *)((char *)v265.i64 + 4) = v264;
                      v188.i64[0] = *(void *)(v263 + 4);
                      *(int32x4_t *)unint64_t v260 = v265;
                      unsigned int v266 = v255 + v4 - v258;
                      if (v266 >= v612) {
                        goto LABEL_739;
                      }
                      *(float *)v265.i32 = -*(float *)v190.i32;
                      int32x4_t v267 = v265;
                      *(uint64_t *)((char *)v267.i64 + 4) = v264;
                      *(int32x4_t *)(v25 + 16 * v266) = v267;
                      unsigned int v268 = v253 + v4;
                      if (v253 + (int)v4 >= v612) {
                        goto LABEL_740;
                      }
                      v265.i32[1] = v191.i32[0];
                      v265.i32[2] = HIDWORD(v264);
                      *(int32x4_t *)(v25 + 16 * v26re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v265;
                      unsigned int v269 = v254 + v4 - v258;
                      if (v269 >= v612) {
                        goto LABEL_741;
                      }
                      uint64_t v270 = v255 + v4 - v258;
                      v190.i32[1] = v191.i32[0];
                      v190.i32[2] = HIDWORD(v264);
                      *(int32x4_t *)(v25 + 16 * v269) = v190;
                      float v271 = -v262;
                      float32x4_t v272 = v189;
                      v272.f32[2] = v271;
                      *(float32x4_t *)unint64_t v261 = v272;
                      if (v266 >= v221) {
                        goto LABEL_742;
                      }
                      v272.f32[0] = -v189.f32[0];
                      float32x4_t v191 = v272;
                      v191.i32[1] = v189.i32[1];
                      unint64_t v13 = (v253 + v4);
                      v191.f32[2] = v271;
                      *(float32x4_t *)(v17 + 16 * v270) = v191;
                      if (v268 >= v221) {
                        goto LABEL_743;
                      }
                      uint64_t v273 = v254 + v4 - v258;
                      *(float32x4_t *)(v17 + 16 * v13) = v191;
                      if (v269 >= v221) {
                        goto LABEL_744;
                      }
                      v272.f32[1] = -v189.f32[1];
                      v272.f32[2] = v271;
                      *(float32x4_t *)(v17 + 16 * v273) = v272;
                      float32x4_t v189 = vnegq_f32(v188);
                      int32x4_t v190 = (int32x4_t)v187;
                      *(uint64_t *)((char *)v190.i64 + 4) = v189.i64[0];
                      *(int32x4_t *)unint64_t v263 = v190;
                      if (v266 >= v16) {
                        goto LABEL_745;
                      }
                      *(float *)v190.i32 = -v187.f32[0];
                      int32x4_t v274 = v190;
                      *(uint64_t *)((char *)v274.i64 + 4) = v189.i64[0];
                      *(int32x4_t *)(v19 + 16 * v270) = v274;
                      if (v268 >= v16) {
                        goto LABEL_746;
                      }
                      v190.i32[1] = v188.i32[0];
                      v190.i32[2] = v189.i32[1];
                      *(int32x4_t *)(v19 + 16 * v13) = v190;
                      if (v269 >= v16) {
                        goto LABEL_747;
                      }
                      v187.i32[1] = v188.i32[0];
                      v187.i32[2] = v189.i32[1];
                      *(float32x4_t *)(v19 + 16 * v273) = v187;
                      if (v192)
                      {
                        if (v196 <= v259) {
                          goto LABEL_754;
                        }
                        if (v196 <= v266) {
                          goto LABEL_755;
                        }
                        *(_DWORD *)(v195 + 4 * v270) = *(_DWORD *)(v195 + 4 * v18);
                        if (v196 <= v268) {
                          goto LABEL_756;
                        }
                        *(_DWORD *)(v195 + 4 * v13) = *(_DWORD *)(v195 + 4 * v18);
                        if (v196 <= v269) {
                          goto LABEL_757;
                        }
                        *(_DWORD *)(v195 + 4 * v273) = *(_DWORD *)(v195 + 4 * v18);
                      }
                      --v4;
                      ++v257;
                      uint64_t v193 = v631;
                      int v218 = v633;
                    }
                    while (v4 != -3);
                    uint64_t v219 = (uint64_t)a1;
                    *(void *)&v696[0] = re::GeomMesh::modifyVertexPositions(a1);
                    *((void *)&v696[0] + 1) = v275;
                    v276.f32[0] = v8;
                  }
                  else
                  {
                    uint64_t v197 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v3);
                    unsigned int v199 = v198;
                    *(void *)v699 = v197;
                    *(void *)&v699[8] = v198;
                    uint64_t v201 = v3;
                    uint64_t v202 = v200;
                    unsigned int v204 = v203;
                    uint64_t v11 = v625;
                    if (v613)
                    {
                      uint64_t v209 = 0;
                      unint64_t v4 = v199;
                      uint64_t v210 = 16 * v199;
                      unsigned int v211 = v199 - v613;
                      if (v199 < v613) {
                        unsigned int v211 = 0;
                      }
                      uint64_t v212 = 16 * v211;
                      if (v204 >= v613) {
                        unsigned int v213 = v204 - v613;
                      }
                      else {
                        unsigned int v213 = 0;
                      }
                      unsigned int v214 = v206 - v613;
                      if (v206 < v613) {
                        unsigned int v214 = 0;
                      }
                      uint64_t v215 = 16 * v214;
                      unint64_t v25 = v206;
                      uint64_t v216 = 16 * v213;
                      unint64_t v13 = v204;
                      uint64_t v217 = 16 * v204;
                      uint64_t v19 = v613;
                      while (v210 != v209)
                      {
                        if (v212 == v209) {
                          goto LABEL_749;
                        }
                        v207.i32[0] = *(_DWORD *)(v197 + v209);
                        v207.f32[1] = -*(float *)(v197 + v209 + 4);
                        v207.f32[2] = -*(float *)(v197 + v209 + 8);
                        *(float32x4_t *)(v197 + 16 * v613 + v209) = v207;
                        if (v217 == v209) {
                          goto LABEL_750;
                        }
                        if (v216 == v209) {
                          goto LABEL_751;
                        }
                        v207.i32[0] = *(_DWORD *)(v202 + v209);
                        v207.f32[1] = -*(float *)(v202 + v209 + 4);
                        v207.f32[2] = -*(float *)(v202 + v209 + 8);
                        *(float32x4_t *)(v202 + 16 * v613 + v209) = v207;
                        if (16 * v206 == v209) {
                          goto LABEL_752;
                        }
                        if (v215 == v209) {
                          goto LABEL_753;
                        }
                        v207.i32[0] = *(_DWORD *)(v205 + v209);
                        v207.f32[1] = -*(float *)(v205 + v209 + 4);
                        v207.f32[2] = -*(float *)(v205 + v209 + 8);
                        *(float32x4_t *)(v205 + 16 * v613 + v209) = v207;
                        v209 += 16;
                        ++v19;
                        if (16 * v613 == v209) {
                          goto LABEL_265;
                        }
                      }
LABEL_748:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_749:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_750:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v13;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_751:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_752:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v25;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v25;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_753:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v25;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_754:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v270 = &_os_log_internal;
                      unsigned int v574 = v196;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v18;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v574;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_755:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      unsigned int v575 = v196;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v270;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v575;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_756:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v273 = v196;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v13;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v273;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_757:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      unint64_t v4 = v196;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v273;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_758:
                      *(void *)&v671[0] = 0;
                      long long v686 = 0u;
                      long long v687 = 0u;
                      long long v684 = 0u;
                      long long v685 = 0u;
                      *(_OWORD *)v683 = 0u;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      v677[0] = 136315906;
                      *(void *)&v677[1] = "operator[]";
                      LOWORD(v677[3]) = 1024;
                      *(unsigned int *)((char *)&v677[3] + 2) = 789;
                      HIWORD(v677[4]) = 2048;
                      *(void *)&v677[5] = 0;
                      LOWORD(v677[7]) = 2048;
                      *(void *)((char *)&v677[7] + 2) = 0;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_759;
                    }
LABEL_265:
                    int v218 = v633;
                    v207.f32[0] = v8;
                    uint64_t v219 = (uint64_t)a1;
                  }
                  *(void *)&v671[0] = v662;
                  *((void *)&v671[0] + 1) = v660;
                  *(void *)&v696[0] = v658;
                  *((void *)&v696[0] + 1) = v656;
                  *(_DWORD *)v699 = 8 * v633;
                  unint64_t v16 = (unint64_t)v627;
                  unint64_t v278 = v636;
                  unint64_t v4 = (v636 + 1);
                  if (v602 >= 2)
                  {
                    unint64_t v25 = re::GeomMesh::modifyVertexPositions(a1);
                    uint64_t v19 = v279;
                    unint64_t v13 = v280;
                    unint64_t v282 = v281;
                    if (v627)
                    {
                      unint64_t v3 = v281;
                      if (!(*(unsigned int (**)(re::GeomMesh *))(*(void *)v627 + 16))(v627)) {
                        goto LABEL_351;
                      }
                      uint64_t v283 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v627, 0);
                      uint64_t v284 = (*(uint64_t (**)(re::GeomMesh *))(*(void *)v627 + 16))(v627);
                      goto LABEL_352;
                    }
                    uint64_t v285 = 0;
                    float32x2_t v286 = (float32x2_t)vdupq_n_s32(0x7F800000u).u64[0];
                    float v287 = 0.0;
                    uint64_t v284 = 0xFFFFFFFFLL;
                    float32x2_t v288 = (float32x2_t)0x7F0000007FLL;
                    float32x2_t v289 = (float32x2_t)0x7F0000007FLL;
                    float32x2_t v290 = v286;
                    unint64_t v291 = v19;
                    unint64_t v292 = v13;
LABEL_360:
                    if (v634 >= 2)
                    {
                      float v301 = 1.0 / (float)v278;
                      unint64_t v302 = v278 - 1;
                      int v303 = v278 + 2;
                      uint64_t v304 = 1;
                      while (1)
                      {
                        unint64_t v3 = (v4 * v304);
                        uint64_t v19 = v652;
                        if (v652 <= v3) {
                          goto LABEL_801;
                        }
                        unint64_t v4 = v654[v3];
                        if (v4 >= v291) {
                          goto LABEL_802;
                        }
                        unint64_t v18 = (v3 + v636);
                        if (v652 <= v18) {
                          goto LABEL_803;
                        }
                        unint64_t v13 = v654[v18];
                        if (v13 >= v291) {
                          goto LABEL_804;
                        }
                        if (v4 >= v292) {
                          goto LABEL_805;
                        }
                        if (v4 >= v282) {
                          goto LABEL_806;
                        }
                        unint64_t v305 = v648;
                        if (v648 <= v3) {
                          goto LABEL_807;
                        }
                        uint64_t v19 = v650[v3];
                        if (v19 >= v291) {
                          goto LABEL_808;
                        }
                        if (v648 <= v18) {
                          goto LABEL_809;
                        }
                        uint64_t v306 = v650[v18];
                        if (v306 >= v291) {
                          goto LABEL_810;
                        }
                        if (v19 >= v292) {
                          goto LABEL_811;
                        }
                        if (v19 >= v282) {
                          goto LABEL_812;
                        }
                        if (v636 >= 2) {
                          break;
                        }
LABEL_393:
                        ++v304;
                        unint64_t v4 = (v636 + 1);
                        v303 += v635;
                        if (v304 == v634) {
                          goto LABEL_394;
                        }
                      }
                      uint64_t v307 = 0;
                      while (1)
                      {
                        unint64_t v18 = (v303 + v307);
                        uint64_t v11 = v652;
                        if (v652 <= v18) {
                          break;
                        }
                        uint64_t v11 = v648;
                        if (v648 <= v18) {
                          goto LABEL_718;
                        }
                        unint64_t v248 = v654[v18];
                        if (v248 >= v291) {
                          goto LABEL_719;
                        }
                        unint64_t v18 = v650[v18];
                        float v308 = v301 * (float)(v307 + 1);
                        unint64_t v309 = (float32x2_t *)(v25 + 16 * v248);
                        *(float32x4_t *)v309->f32 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v4), 1.0 - v308), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v13), v308));
                        if (v18 >= v291) {
                          goto LABEL_720;
                        }
                        int v310 = (float32x2_t *)(v25 + 16 * v18);
                        *(float32x4_t *)v310->f32 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v19), 1.0 - v308), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v306), v308));
                        if (v248 >= v292) {
                          goto LABEL_721;
                        }
                        *(_OWORD *)(v16 + 16 * vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = *(_OWORD *)(v16 + 16 * v4);
                        if (v18 >= v292) {
                          goto LABEL_722;
                        }
                        *(_OWORD *)(v16 + 16 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(v16 + 16 * v19);
                        if (v248 >= v282) {
                          goto LABEL_723;
                        }
                        *(_OWORD *)(v17 + 16 * vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = *(_OWORD *)(v17 + 16 * v4);
                        if (v18 >= v282) {
                          goto LABEL_724;
                        }
                        *(_OWORD *)(v17 + 16 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(v17 + 16 * v19);
                        uint64_t v11 = v625;
                        if (v627)
                        {
                          if (v284 <= v248) {
                            goto LABEL_733;
                          }
                          float32x2_t v311 = vsub_f32(*v309, v286);
                          float32x2_t v312 = vsub_f32(v288, *v309);
                          int8x8_t v313 = vbsl_s8((int8x8_t)vcgt_f32(v311, v312), (int8x8_t)v312, (int8x8_t)v311);
                          if (*(float *)v313.i32 > *(float *)&v313.i32[1]) {
                            v313.i32[0] = v313.i32[1];
                          }
                          *(float *)(v285 + 4 * vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v287 + *(float *)v313.i32;
                          if (v284 <= v18) {
                            goto LABEL_734;
                          }
                          float32x2_t v314 = vsub_f32(*v310, v290);
                          float32x2_t v315 = vsub_f32(v289, *v310);
                          int8x8_t v316 = vbsl_s8((int8x8_t)vcgt_f32(v314, v315), (int8x8_t)v315, (int8x8_t)v314);
                          if (*(float *)v316.i32 > *(float *)&v316.i32[1]) {
                            v316.i32[0] = v316.i32[1];
                          }
                          *(float *)(v285 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v287 + *(float *)v316.i32;
                        }
                        if (v302 == ++v307) {
                          goto LABEL_393;
                        }
                      }
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_718:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v248 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v11;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_719:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v568 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v248;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v568;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_720:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v248 = &_os_log_internal;
                      unsigned int v569 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v569;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_721:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v570 = v292;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v248;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v570;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_722:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v248 = v292;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_723:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v4 = &_os_log_internal;
                      unsigned int v571 = v282;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v248;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v571;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_724:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v248 = &_os_log_internal;
                      unsigned int v572 = v282;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v572;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_725:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_726:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_727:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_728:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_729:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_730:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_731:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_732:
                      v663[0] = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v248;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_733:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      LODWORD(v4) = v284;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v248;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_734:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v3 = v284;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_735:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      LODWORD(v193) = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v13;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_736:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_DWORD *)v699 = 136315906;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = (5 * v193 + v4 + 14);
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_737:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      unsigned int v258 = v221;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v18;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v258;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_738:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v193 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v18;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_739:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v19 = v193;
                      LODWORD(v193) = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = 6 * v19 - v258 + v4 + 17;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_740:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      unsigned int v258 = v193;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_DWORD *)v699 = 136315906;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v4 - v258 + 8 * v258 + 20;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_741:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v270 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v4 - v258 + 8 * v631 + 23;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v13;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_742:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      unsigned int v573 = v221;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v270;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v573;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_743:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v273 = v221;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v13;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v273;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_744:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v270 = &_os_log_internal;
                      unint64_t v4 = v221;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v273;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_745:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      uint64_t v273 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v270;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_746:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v13;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_747:
                      v663[0] = 0;
                      long long v698 = 0u;
                      long long v697 = 0u;
                      memset(v696, 0, sizeof(v696));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v699 = 136315906;
                      *(void *)&v699[4] = "operator[]";
                      *(_WORD *)&v699[12] = 1024;
                      *(_DWORD *)&v699[14] = 609;
                      *(_WORD *)&v699[18] = 2048;
                      *(void *)&v699[20] = v273;
                      *(_WORD *)&v699[28] = 2048;
                      *(void *)&v699[30] = v16;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_748;
                    }
                  }
LABEL_394:
                  unint64_t v3 = re::GeomMesh::modifyVertexPositions(a1);
                  unsigned int v626 = v317;
                  uint64_t v19 = v318;
                  unint64_t v321 = v319;
                  uint64_t v630 = v322;
                  BOOL v323 = 0;
                  int v324 = a2;
                  float v325 = *((float *)a2 + 6);
                  if (*((float *)a2 + 5) == 0.0)
                  {
                    unint64_t v25 = v622;
                    unint64_t v4 = (unint64_t)v627;
                    if (v325 == 0.0) {
                      BOOL v323 = *((float *)a2 + 7) == 0.0;
                    }
                  }
                  else
                  {
                    unint64_t v25 = v622;
                    unint64_t v4 = (unint64_t)v627;
                  }
                  unint64_t v326 = v644;
                  if (v4)
                  {
                    unint64_t v17 = v644;
                    unint64_t v16 = v319;
                    unsigned int v327 = (*(uint64_t (**)(unint64_t))(*(void *)v4 + 16))(v4);
                    if (v327)
                    {
                      unint64_t v18 = re::internal::GeomTypedAttribute<float>::operator[](v4, 0);
                      unsigned int v327 = (*(uint64_t (**)(unint64_t))(*(void *)v4 + 16))(v4);
                      unint64_t v328 = v18;
                    }
                    else
                    {
                      unint64_t v328 = 0;
                    }
                    int v324 = a2;
                    unint64_t v321 = v16;
                    unint64_t v326 = v17;
                  }
                  else
                  {
                    unint64_t v328 = 0;
                    unsigned int v327 = -1;
                  }
                  unsigned int v329 = v626;
                  if (!v644) {
                    goto LABEL_825;
                  }
                  unint64_t v4 = *v646;
                  float32x2_t v330 = v627;
                  if (v4 >= v626)
                  {
LABEL_826:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    unsigned int v587 = v329;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v4;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v587;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  else if (v640)
                  {
                    unsigned int v331 = v19;
                    uint64_t v19 = *v642;
                    if (v19 < v626)
                    {
                      unint64_t v332 = v13;
                      float v333 = 1.0 / (float)v25;
                      float v334 = *(float *)(v3 + 16 * v4 + 8);
                      float v335 = *(float *)(v3 + 16 * v19 + 8);
                      if (v323)
                      {
                        if (v326)
                        {
                          unint64_t v336 = 0;
                          int v337 = *((_DWORD *)v324 + 14);
                          int v338 = *((_DWORD *)v324 + 11);
                          int v339 = *((_DWORD *)v324 + 12) + v337 - 1;
                          int v340 = v337 - 1 + v338;
                          unint64_t v341 = (v338 + v337);
                          unint64_t v342 = (v339 + v341);
                          unint64_t v4 = v626;
                          unint64_t v16 = v331;
                          unint64_t v17 = v630;
                          unint64_t v18 = v327;
                          v320.i64[0] = (v340 + v342);
                          unsigned int v343 = v608;
                          while (1)
                          {
                            uint64_t v19 = v644;
                            if (v644 <= v336) {
                              goto LABEL_791;
                            }
                            uint64_t v344 = v646[v336];
                            if (v344 >= v626) {
                              goto LABEL_792;
                            }
                            uint64_t v19 = v640;
                            if (v640 <= v336) {
                              goto LABEL_793;
                            }
                            uint64_t v19 = v642[v336];
                            if (v19 >= v626) {
                              goto LABEL_794;
                            }
                            uint64x2_t v345 = (uint64x2_t)xmmword_23437C0A0;
                            int8x16_t v346 = (int8x16_t)xmmword_23435FD60;
                            if (v336 >= v341)
                            {
                              uint64x2_t v345 = (uint64x2_t)xmmword_23437C080;
                              int8x16_t v346 = (int8x16_t)xmmword_23437C0A0;
                              if (v336 >= v342)
                              {
                                v345.i64[0] = v336;
                                int8x16_t v347 = (int8x16_t)vdupq_lane_s64(vcgtq_u64(v320, v345).i64[0], 0);
                                uint64x2_t v345 = (uint64x2_t)vbslq_s8(v347, (int8x16_t)xmmword_23435FD50, (int8x16_t)xmmword_23435FD60);
                                int8x16_t v346 = vbslq_s8(v347, (int8x16_t)xmmword_23437C080, (int8x16_t)xmmword_23435FD50);
                              }
                            }
                            unint64_t v25 = v343;
                            if (v11) {
                              break;
                            }
LABEL_429:
                            ++v336;
                            unsigned int v343 = v25 + v11;
                            if (v336 == v326) {
                              goto LABEL_455;
                            }
                          }
                          unint64_t v13 = 0;
                          unint64_t v348 = v328 + 4 * v343;
                          unint64_t v349 = v321 + 16 * v343;
                          unint64_t v350 = v332 + 16 * v343;
                          uint64_t v351 = 8;
                          unint64_t v352 = v3 + 16 * v343;
                          while (1)
                          {
                            unint64_t v353 = v25 + v13;
                            if (v25 + v13 >= v626) {
                              break;
                            }
                            *(float32x4_t *)(v352 + 16 * v13) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v344), 1.0 - (float)(v333 * (float)v13)), vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v19), v333 * (float)v13));
                            if (v353 >= v331) {
                              goto LABEL_684;
                            }
                            *(uint64x2_t *)(v350 + 16 * v13) = v345;
                            if (v353 >= v630) {
                              goto LABEL_685;
                            }
                            *(int8x16_t *)(v349 + 16 * v13) = v346;
                            if (v627)
                            {
                              if (v353 >= v327) {
                                goto LABEL_701;
                              }
                              float v354 = *(float *)(v352 + v351);
                              float v355 = v334 - v354;
                              float v356 = v354 - v335;
                              if (v355 <= v356) {
                                float v356 = v355;
                              }
                              *(float *)(v348 + 4 * v13) = v356;
                            }
                            ++v13;
                            v351 += 16;
                            if (v11 == v13) {
                              goto LABEL_429;
                            }
                          }
                          *(void *)v699 = 0;
                          long long v672 = 0u;
                          long long v673 = 0u;
                          memset(v671, 0, sizeof(v671));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(void *)((char *)v696 + 4) = "operator[]";
                          WORD6(v696[0]) = 1024;
                          *(_DWORD *)((char *)v696 + 14) = 609;
                          LODWORD(v696[0]) = 136315906;
                          WORD1(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 4) = (v25 + v13);
                          WORD6(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 14) = v626;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_684:
                          *(void *)v699 = 0;
                          long long v672 = 0u;
                          long long v673 = 0u;
                          memset(v671, 0, sizeof(v671));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          LODWORD(v696[0]) = 136315906;
                          *(void *)((char *)v696 + 4) = "operator[]";
                          WORD6(v696[0]) = 1024;
                          *(_DWORD *)((char *)v696 + 14) = 609;
                          WORD1(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 4) = v25 + v13;
                          WORD6(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 14) = v331;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_685:
                          *(void *)v699 = 0;
                          long long v672 = 0u;
                          long long v673 = 0u;
                          memset(v671, 0, sizeof(v671));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          LODWORD(v696[0]) = 136315906;
                          *(void *)((char *)v696 + 4) = "operator[]";
                          WORD6(v696[0]) = 1024;
                          *(_DWORD *)((char *)v696 + 14) = 609;
                          WORD1(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 4) = v25 + v13;
                          WORD6(v696[1]) = 2048;
                          *(void *)((char *)&v696[1] + 14) = v630;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_686:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 4 * v631 + v18 + 12);
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v597;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_687:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v4;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v597;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_688:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          unint64_t v248 = &_os_log_internal;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 6 * v631 + v18 + 18);
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v597;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_689:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v248;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v597;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_690:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 4 * v631 + 12) + v18;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v596;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_691:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v4;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v596;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_692:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          unint64_t v248 = &_os_log_internal;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 6 * v631 + 18) + v18;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v596;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_693:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v248;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v596;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_694:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 4 * v631 + 12) + v18;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v595;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_695:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v4;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v595;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_696:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          unint64_t v248 = &_os_log_internal;
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = (v16 * v592 + 6 * v631 + 18) + v18;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v595;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_697:
                          v663[0] = 0;
                          long long v698 = 0u;
                          long long v697 = 0u;
                          memset(v696, 0, sizeof(v696));
                          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v699 = 136315906;
                          *(void *)&v699[4] = "operator[]";
                          *(_WORD *)&v699[12] = 1024;
                          *(_DWORD *)&v699[14] = 609;
                          *(_WORD *)&v699[18] = 2048;
                          *(void *)&v699[20] = v248;
                          *(_WORD *)&v699[28] = 2048;
                          *(void *)&v699[30] = v595;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                          goto LABEL_698;
                        }
                      }
                      else if (v326)
                      {
                        unint64_t v4 = v626;
                        uint64_t v19 = v331;
                        unint64_t v13 = v630;
                        unsigned int v357 = v608;
                        unint64_t v18 = v327;
                        unint64_t v358 = 0;
                        while (1)
                        {
                          unint64_t v25 = v644;
                          if (v644 <= v358) {
                            goto LABEL_795;
                          }
                          unint64_t v16 = v646[v358];
                          if (v16 >= v626) {
                            goto LABEL_796;
                          }
                          unint64_t v25 = v640;
                          if (v640 <= v358) {
                            goto LABEL_797;
                          }
                          unint64_t v17 = v642[v358];
                          if (v17 >= v626) {
                            goto LABEL_798;
                          }
                          if (v16 >= v331) {
                            goto LABEL_799;
                          }
                          uint64_t v359 = (float32x4_t *)(v332 + 16 * v16);
                          if (v325 == 0.0)
                          {
                            if (v16 >= v630) {
                              goto LABEL_814;
                            }
                            float32x4_t v360 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v321 + 16 * v16), *(int32x4_t *)(v321 + 16 * v16)), *(int8x16_t *)(v321 + 16 * v16), 0xCuLL), vnegq_f32(*v359)), *(float32x4_t *)(v321 + 16 * v16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v359, *(int32x4_t *)v359), *(int8x16_t *)v359, 0xCuLL));
                            int32x4_t v361 = (int32x4_t)vmulq_f32(v360, v360);
                            v361.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v361.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v361, 2), *(float32x2_t *)v361.i8)).u32[0];
                            float32x4_t v362 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v360, (int32x4_t)v360), (int8x16_t)v360, 0xCuLL);
                            *(float32x2_t *)v360.f32 = vrsqrte_f32((float32x2_t)v361.u32[0]);
                            *(float32x2_t *)v360.f32 = vmul_f32(*(float32x2_t *)v360.f32, vrsqrts_f32((float32x2_t)v361.u32[0], vmul_f32(*(float32x2_t *)v360.f32, *(float32x2_t *)v360.f32)));
                            float32x4_t v363 = vmulq_n_f32(v362, vmul_f32(*(float32x2_t *)v360.f32, vrsqrts_f32((float32x2_t)v361.u32[0], vmul_f32(*(float32x2_t *)v360.f32, *(float32x2_t *)v360.f32))).f32[0]);
                            uint64_t v364 = v363.i64[1];
                            uint64_t v365 = v363.i64[0];
                          }
                          else
                          {
                            if (v16 >= v630) {
                              goto LABEL_815;
                            }
                            uint64_t v365 = *(void *)(v321 + 16 * v16);
                            uint64_t v364 = *(void *)(v321 + 16 * v16 + 8);
                          }
                          unint64_t v25 = v357;
                          if (v11) {
                            break;
                          }
LABEL_454:
                          ++v358;
                          unsigned int v357 = v25 + v11;
                          if (v358 == v326) {
                            goto LABEL_455;
                          }
                        }
                        uint64_t v366 = 0;
                        unint64_t v248 = 0;
                        unint64_t v367 = v328 + 4 * v357;
                        unint64_t v368 = v321 + 16 * v357;
                        unint64_t v369 = v332 + 16 * v357;
                        unint64_t v370 = v3 + 16 * v357;
                        while (1)
                        {
                          unint64_t v371 = v25 + v248;
                          if (v25 + v248 >= v626) {
                            break;
                          }
                          *(float32x4_t *)(v370 + 16 * vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v16), 1.0 - (float)(v333 * (float)v248)), vmulq_n_f32(*(float32x4_t *)(v3 + 16 * v17), v333 * (float)v248));
                          if (v371 >= v331) {
                            goto LABEL_699;
                          }
                          *(float32x4_t *)(v369 + v366) = *v359;
                          if (v371 >= v630) {
                            goto LABEL_700;
                          }
                          uint64_t v372 = (uint64_t *)(v368 + 16 * v248);
                          *uint64_t v372 = v365;
                          v372[1] = v364;
                          if (v627)
                          {
                            if (v371 >= v18) {
                              goto LABEL_706;
                            }
                            float v373 = *(float *)(v370 + v366 + 8);
                            float v374 = v334 - v373;
                            float v375 = v373 - v335;
                            if (v374 <= v375) {
                              float v375 = v374;
                            }
                            *(float *)(v367 + 4 * vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v375;
                          }
                          ++v248;
                          v366 += 16;
                          if (v11 == v248) {
                            goto LABEL_454;
                          }
                        }
LABEL_698:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 609;
                        LODWORD(v696[0]) = 136315906;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = (v25 + v248);
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = v4;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_699:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v696[0]) = 136315906;
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 609;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = v25 + v248;
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = v19;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_700:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v696[0]) = 136315906;
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 609;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = v25 + v248;
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = v13;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_701:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v696[0]) = 136315906;
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 609;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = v25 + v13;
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = v18;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_702:
                        v663[0] = 0;
                        long long v698 = 0u;
                        long long v697 = 0u;
                        memset(v696, 0, sizeof(v696));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v699 = 136315906;
                        *(void *)&v699[4] = "operator[]";
                        *(_WORD *)&v699[12] = 1024;
                        *(_DWORD *)&v699[14] = 609;
                        *(_WORD *)&v699[18] = 2048;
                        *(void *)&v699[20] = (v16 * v592 + 4 * v631 + 12) + v18;
                        *(_WORD *)&v699[28] = 2048;
                        *(void *)&v699[30] = v630;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_703:
                        v663[0] = 0;
                        long long v698 = 0u;
                        long long v697 = 0u;
                        memset(v696, 0, sizeof(v696));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v699 = 136315906;
                        *(void *)&v699[4] = "operator[]";
                        *(_WORD *)&v699[12] = 1024;
                        *(_DWORD *)&v699[14] = 609;
                        *(_WORD *)&v699[18] = 2048;
                        *(void *)&v699[20] = v4;
                        *(_WORD *)&v699[28] = 2048;
                        *(void *)&v699[30] = v630;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_704:
                        v663[0] = 0;
                        long long v698 = 0u;
                        long long v697 = 0u;
                        memset(v696, 0, sizeof(v696));
                        unint64_t v248 = &_os_log_internal;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v699 = 136315906;
                        *(void *)&v699[4] = "operator[]";
                        *(_WORD *)&v699[12] = 1024;
                        *(_DWORD *)&v699[14] = 609;
                        *(_WORD *)&v699[18] = 2048;
                        *(void *)&v699[20] = (v16 * v592 + 6 * v631 + 18) + v18;
                        *(_WORD *)&v699[28] = 2048;
                        *(void *)&v699[30] = v630;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_705:
                        v663[0] = 0;
                        long long v698 = 0u;
                        long long v697 = 0u;
                        memset(v696, 0, sizeof(v696));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v699 = 136315906;
                        *(void *)&v699[4] = "operator[]";
                        *(_WORD *)&v699[12] = 1024;
                        *(_DWORD *)&v699[14] = 609;
                        *(_WORD *)&v699[18] = 2048;
                        *(void *)&v699[20] = v248;
                        *(_WORD *)&v699[28] = 2048;
                        *(void *)&v699[30] = v630;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_706:
                        *(void *)v699 = 0;
                        long long v672 = 0u;
                        long long v673 = 0u;
                        memset(v671, 0, sizeof(v671));
                        uint64_t v527 = &_os_log_internal;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v696[0]) = 136315906;
                        *(void *)((char *)v696 + 4) = "operator[]";
                        WORD6(v696[0]) = 1024;
                        *(_DWORD *)((char *)v696 + 14) = 609;
                        WORD1(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 4) = v25 + v248;
                        WORD6(v696[1]) = 2048;
                        *(void *)((char *)&v696[1] + 14) = v18;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_707:
                        if (v13 >= v248) {
                          goto LABEL_869;
                        }
                        uint64_t v19 = v534 + v13;
                        if (v19 >= v248) {
                          goto LABEL_870;
                        }
                        unint64_t v4 = v19 + v534;
                        if (v4 >= v248) {
                          goto LABEL_871;
                        }
                        v552 = (float *)(v527 + 8 * v19);
                        float v553 = *(float *)(v527 + 8 * v13) - *v552;
                        float v554 = v552[1] - *(float *)(v527 + 8 * v4 + 4);
                        float v664 = (float)(*(float *)&v530 * (float)(v553 / *((float *)v324 + 8))) / (float)v532;
                        float v555 = v553 + 0.0;
                        float v556 = (float)(v553 + 0.0) + v554;
                        float v557 = v553 + v556;
                        *(void *)&v696[0] = &v666;
                        *((void *)&v696[0] + 1) = &v665;
                        *(void *)&v696[1] = &v667;
                        *((void *)&v696[1] + 1) = &v669;
                        *(void *)&v696[2] = &v664;
                        v663[0] = (int *)&v665;
                        v663[1] = (int *)&v667;
                        float v638 = v554 + (float)(v553 + v556);
                        v663[2] = (int *)&v669;
                        v663[3] = (int *)&v664;
                        v558 = v324;
                        if (v665 != -1)
                        {
                          uint64_t v559 = 0;
                          unint64_t v3 = v669;
                          float v560 = v664;
                          unsigned int v561 = v665 + 1;
                          do
                          {
                            unint64_t v4 = v668;
                            if (v3 >= v668) {
                              goto LABEL_843;
                            }
                            *(float *)&uint64_t v562 = v560 * (float)v559;
                            *((float *)&v562 + 1) = v638;
                            *(void *)(v667 + 8 * v3++) = v562;
                            unsigned int v669 = v3;
                          }
                          while (v561 != ++v559);
                        }
                        int v324 = a2;
                        goto LABEL_715;
                      }
LABEL_455:
                      if (!(*v324 | v324[3])) {
                        goto LABEL_456;
                      }
                      float v377 = *((float *)v324 + 6);
                      unint64_t v3 = re::modifyVertexUVs(a1, v627);
                      LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v378;
                      uint64_t v379 = re::GeomMesh::accessVertexPositions(a1);
                      if (v6 != 0.0)
                      {
                        unint64_t v13 = (unint64_t)v380;
                        unsigned int v459 = v616;
                        uint64_t v11 = *(void *)v610;
                        if (v6 <= v377) {
                          goto LABEL_622;
                        }
                        unint64_t v4 = v631;
                        long long v381 = a2;
                        if (v631 >= v248) {
                          goto LABEL_858;
                        }
                        *(void *)(v3 + 8 * v631) = 0;
                        if (v616)
                        {
                          float v460 = 0.0;
                          int v461 = v616;
                          unint64_t v462 = v601;
                          uint64_t v19 = v631;
                          while (v19 < v380)
                          {
                            uint64_t v463 = v462;
                            unint64_t v4 = v462;
                            if (v462 >= v380) {
                              goto LABEL_820;
                            }
                            if (v462 >= v248) {
                              goto LABEL_821;
                            }
                            float32x4_t v464 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v19), *(float32x4_t *)(v379 + 16 * v462));
                            float32x4_t v465 = vmulq_f32(v464, v464);
                            float v460 = v460
                                 + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v465, 2), vaddq_f32(v465, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v465.f32, 1))).f32[0]);
                            *(void *)(v3 + 8 * v462) = LODWORD(v460);
                            unint64_t v462 = (v462 - v637);
                            uint64_t v19 = v463;
                            if (!--v461) {
                              goto LABEL_538;
                            }
                          }
                          goto LABEL_819;
                        }
LABEL_538:
                        unint64_t v4 = v601;
                        if (v380 <= v601) {
                          goto LABEL_859;
                        }
                        if (v631 >= v380) {
                          goto LABEL_860;
                        }
                        if (v628 < 2)
                        {
LABEL_550:
                          unint64_t v13 = v633;
                          unint64_t v382 = v598;
                          if (v616)
                          {
                            unint64_t v4 = 0;
                            unint64_t v483 = v616;
                            while (1)
                            {
                              uint64_t v19 = (v601 + v4);
                              if (v19 >= v248) {
                                goto LABEL_831;
                              }
                              if ((int)v598 + (int)v4 >= v248) {
                                goto LABEL_832;
                              }
                              LODWORD(v484) = 0;
                              HIDWORD(v484) = *(_DWORD *)(v3 + 8 * v19);
                              *(void *)(v3 + 8 * (v598 + v4)) = v484;
                              unint64_t v4 = (v4 - v637);
                              if (!--v483) {
                                goto LABEL_485;
                              }
                            }
                          }
                          goto LABEL_485;
                        }
                        float32x4_t v466 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v601), *(float32x4_t *)(v379 + 16 * v631));
                        float32x4_t v467 = vmulq_f32(v466, v466);
                        float v468 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v467, 2), vaddq_f32(v467, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v467.f32, 1))).f32[0]);
                        float32x4_t v469 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v466, (int32x4_t)v466), (int8x16_t)v466, 0xCuLL);
                        float32x4_t v470 = vnegq_f32(v466);
                        uint64_t v471 = 1;
                        while (1)
                        {
                          unint64_t v472 = v4;
                          v4 += v471;
                          if (v471 == v380 - v601) {
                            goto LABEL_842;
                          }
                          if (v616) {
                            break;
                          }
LABEL_549:
                          ++v471;
                          unint64_t v4 = v472;
                          if (v471 == v628) {
                            goto LABEL_550;
                          }
                        }
                        float32x4_t v473 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v4), *(float32x4_t *)(v379 + 16 * v631));
                        float32x4_t v474 = vmulq_f32(v473, v473);
                        int32x4_t v475 = (int32x4_t)vmulq_f32(v466, v473);
                        float32x4_t v476 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v473, (int32x4_t)v473), (int8x16_t)v473, 0xCuLL), v470), v473, v469);
                        float32x4_t v477 = vmulq_f32(v476, v476);
                        v475.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v475, 2), vadd_f32(*(float32x2_t *)v475.i8, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v475.i8, 1))).u32[0];
                        v475.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v477.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v477, 2), v477)).f32[0]);
                        float32x2_t v478 = vmul_n_f32(*(float32x2_t *)v475.i8, 1.0/ (float)(v468* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v474, 2), vaddq_f32(v474, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v474.f32, 1))).f32[0])));
                        float v479 = 0.0;
                        int v480 = v616;
                        unint64_t v25 = v631;
                        while (v25 < v380)
                        {
                          uint64_t v19 = v4;
                          if (v4 >= v380) {
                            goto LABEL_764;
                          }
                          unint64_t v4 = v4;
                          if (v19 >= v248) {
                            goto LABEL_765;
                          }
                          float32x4_t v481 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v25), *(float32x4_t *)(v379 + 16 * v19));
                          float32x4_t v482 = vmulq_f32(v481, v481);
                          float v479 = v479
                               + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v482, 2), vaddq_f32(v482, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v482.f32, 1))).f32[0]);
                          *(float32x2_t *)(v3 + 8 * v19) = vmul_n_f32(v478, v479);
                          unint64_t v4 = (v19 - v637);
                          unint64_t v25 = v19;
                          if (!--v480) {
                            goto LABEL_549;
                          }
                        }
                        goto LABEL_763;
                      }
                      long long v381 = a2;
                      unint64_t v13 = v633;
                      unint64_t v382 = v598;
                      uint64_t v11 = *(void *)v610;
                      if (!v633) {
                        goto LABEL_485;
                      }
                      unint64_t v4 = v248;
                      uint64_t v383 = v248;
                      unint64_t v384 = v633;
                      v385 = (void *)v3;
                      while (v383)
                      {
                        *v385++ = 0;
                        --v383;
                        if (!--v384) {
                          goto LABEL_485;
                        }
                      }
LABEL_800:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_801:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v3;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v19;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_802:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v581 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v581;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_803:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v19;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_804:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v582 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v13;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v582;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_805:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v583 = v292;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v583;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_806:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v305 = &_os_log_internal;
                      unint64_t v3 = v282;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v4;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_807:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v3;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v305;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_808:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v305 = &_os_log_internal;
                      unsigned int v584 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v584;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_809:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      uint64_t v306 = &_os_log_internal;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 797;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v18;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v305;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_810:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unint64_t v4 = v291;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v306;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v4;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_811:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      unsigned int v585 = v292;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v585;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_812:
                      *(void *)v699 = 0;
                      long long v672 = 0u;
                      long long v673 = 0u;
                      memset(v671, 0, sizeof(v671));
                      LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
                      unsigned int v586 = v282;
                      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                      LODWORD(v696[0]) = 136315906;
                      *(void *)((char *)v696 + 4) = "operator[]";
                      WORD6(v696[0]) = 1024;
                      *(_DWORD *)((char *)v696 + 14) = 609;
                      WORD1(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 4) = v19;
                      WORD6(v696[1]) = 2048;
                      *(void *)((char *)&v696[1] + 14) = v586;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_813;
                    }
LABEL_828:
                    *(void *)v699 = 0;
                    long long v672 = 0u;
                    long long v673 = 0u;
                    memset(v671, 0, sizeof(v671));
                    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v329;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    LODWORD(v696[0]) = 136315906;
                    *(void *)((char *)v696 + 4) = "operator[]";
                    WORD6(v696[0]) = 1024;
                    *(_DWORD *)((char *)v696 + 14) = 609;
                    WORD1(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 4) = v19;
                    WORD6(v696[1]) = 2048;
                    *(void *)((char *)&v696[1] + 14) = v248;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_829;
                  }
                  *(void *)v699 = 0;
                  long long v672 = 0u;
                  long long v673 = 0u;
                  memset(v671, 0, sizeof(v671));
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  LODWORD(v696[0]) = 136315906;
                  *(void *)((char *)v696 + 4) = "operator[]";
                  WORD6(v696[0]) = 1024;
                  *(_DWORD *)((char *)v696 + 14) = 797;
                  WORD1(v696[1]) = 2048;
                  *(void *)((char *)&v696[1] + 4) = 0;
                  WORD6(v696[1]) = 2048;
                  *(void *)((char *)&v696[1] + 14) = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_828;
                }
                int v133 = v128 + v64;
                unint64_t v4 = v640;
                uint64_t v134 = v642;
                uint64_t v135 = v634 - 1;
                unsigned int v136 = v634 + v625 + v19 - 3;
                while (1)
                {
                  unint64_t v25 = v136;
                  if (v4 <= v136) {
                    break;
                  }
                  v134[v136] = v133;
                  v133 += v13;
                  ++v136;
                  if (!--v135) {
                    goto LABEL_154;
                  }
                }
LABEL_659:
                *(void *)&v671[0] = 0;
                long long v686 = 0u;
                long long v687 = 0u;
                long long v684 = 0u;
                long long v685 = 0u;
                *(_OWORD *)v683 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                v677[0] = 136315906;
                *(void *)&v677[1] = "operator[]";
                LOWORD(v677[3]) = 1024;
                *(unsigned int *)((char *)&v677[3] + 2) = 789;
                HIWORD(v677[4]) = 2048;
                *(void *)&v677[5] = v25;
                LOWORD(v677[7]) = 2048;
                *(void *)((char *)&v677[7] + 2) = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_660;
              }
              unint64_t v4 = v640;
              uint64_t v129 = v642;
              unint64_t v130 = v636 - 1;
              unsigned int v131 = v636 + v634 + 3 * v637 - 2;
              int v132 = v105 + v618;
              while (1)
              {
                unint64_t v25 = v131;
                if (v4 <= v131) {
                  break;
                }
                v129[v131] = v132;
                v132 += v13;
                ++v131;
                if (!--v130) {
                  goto LABEL_150;
                }
              }
LABEL_658:
              *(void *)&v671[0] = 0;
              long long v686 = 0u;
              long long v687 = 0u;
              long long v684 = 0u;
              long long v685 = 0u;
              *(_OWORD *)v683 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v677[0] = 136315906;
              *(void *)&v677[1] = "operator[]";
              LOWORD(v677[3]) = 1024;
              *(unsigned int *)((char *)&v677[3] + 2) = 789;
              HIWORD(v677[4]) = 2048;
              *(void *)&v677[5] = v25;
              LOWORD(v677[7]) = 2048;
              *(void *)((char *)&v677[7] + 2) = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_659;
            }
            unint64_t v4 = v640;
            uint64_t v125 = v642;
            uint64_t v126 = v634 - 1;
            int v127 = v105;
            while (1)
            {
              unint64_t v25 = v87;
              if (v4 <= v87) {
                break;
              }
              v125[v87] = v127;
              v127 += v13;
              ++v87;
              if (!--v126) {
                goto LABEL_146;
              }
            }
LABEL_657:
            *(void *)&v671[0] = 0;
            long long v686 = 0u;
            long long v687 = 0u;
            long long v684 = 0u;
            long long v685 = 0u;
            *(_OWORD *)v683 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            v677[0] = 136315906;
            *(void *)&v677[1] = "operator[]";
            LOWORD(v677[3]) = 1024;
            *(unsigned int *)((char *)&v677[3] + 2) = 789;
            HIWORD(v677[4]) = 2048;
            *(void *)&v677[5] = v25;
            LOWORD(v677[7]) = 2048;
            *(void *)((char *)&v677[7] + 2) = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_658;
          }
          unint64_t v4 = v640;
          __int16 v122 = v642;
          unint64_t v123 = v636 - 1;
          unsigned int v124 = v637;
          while (1)
          {
            unint64_t v25 = v124;
            if (v4 <= v124) {
              break;
            }
            v122[v124] = v104;
            v104 += v13;
            ++v124;
            if (!--v123) {
              goto LABEL_142;
            }
          }
LABEL_656:
          *(void *)&v671[0] = 0;
          long long v686 = 0u;
          long long v687 = 0u;
          long long v684 = 0u;
          long long v685 = 0u;
          *(_OWORD *)v683 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v677[0] = 136315906;
          *(void *)&v677[1] = "operator[]";
          LOWORD(v677[3]) = 1024;
          *(unsigned int *)((char *)&v677[3] + 2) = 789;
          HIWORD(v677[4]) = 2048;
          *(void *)&v677[5] = v25;
          LOWORD(v677[7]) = 2048;
          *(void *)((char *)&v677[7] + 2) = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_657;
        }
        unint64_t v110 = v636 - 1;
        int v111 = v103 + v616 * ((8 * v637) | 1) + 24;
        unsigned int v112 = v17 + 1;
        while (1)
        {
          unint64_t v4 = v112;
          if (v25 <= v112) {
            break;
          }
          v100[v112] = v111;
          v111 += v13;
          ++v112;
          if (!--v110) {
            goto LABEL_124;
          }
        }
LABEL_655:
        *(void *)&v671[0] = 0;
        long long v686 = 0u;
        long long v687 = 0u;
        long long v684 = 0u;
        long long v685 = 0u;
        *(_OWORD *)v683 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v677[0] = 136315906;
        *(void *)&v677[1] = "operator[]";
        LOWORD(v677[3]) = 1024;
        *(unsigned int *)((char *)&v677[3] + 2) = 789;
        HIWORD(v677[4]) = 2048;
        *(void *)&v677[5] = v4;
        LOWORD(v677[7]) = 2048;
        *(void *)((char *)&v677[7] + 2) = v25;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_656;
      }
      int v106 = v65 + v616 + v105;
      uint64_t v107 = v634 - 1;
      int v108 = 1;
      int v109 = v616 * ((8 * v637) | 1) + (3 * v634 + 4 * v636 - 7) * v13 + 24;
      while (1)
      {
        unint64_t v4 = (v4 + v108);
        if (v25 <= v4) {
          break;
        }
        v100[v4] = v109;
        unint64_t v4 = (v19 + v108);
        if (v25 <= v4) {
          goto LABEL_654;
        }
        v100[v4] = v106;
        v106 += ~v616;
        v109 += v13;
        v108 += v635;
        --v107;
        unint64_t v4 = v636;
        if (!v107) {
          goto LABEL_119;
        }
      }
    }
    else
    {
      uint64_t v101 = 1;
      int v102 = v616 * ((8 * v637) | 1) + (3 * v634 + 4 * v636 - 8) * v13 + 24;
      while (v25 != v101)
      {
        v100[v101++] = v102;
        v102 += v59;
        if (v636 == v101) {
          goto LABEL_113;
        }
      }
      *(void *)&v671[0] = 0;
      long long v686 = 0u;
      long long v687 = 0u;
      long long v684 = 0u;
      long long v685 = 0u;
      *(_OWORD *)v683 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v677[0] = 136315906;
      *(void *)&v677[1] = "operator[]";
      LOWORD(v677[3]) = 1024;
      *(unsigned int *)((char *)&v677[3] + 2) = 789;
      HIWORD(v677[4]) = 2048;
      *(void *)&v677[5] = v25;
      LOWORD(v677[7]) = 2048;
      *(void *)((char *)&v677[7] + 2) = v25;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = v4;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_654:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = v4;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_655;
  }
  unsigned int v56 = v54 + 1;
  unsigned int v57 = v53 + 1;
  uint64_t v58 = 1;
  while (v25 != v58)
  {
    *unsigned int v57 = *(v57 - 1) + v11;
    if (v4 == v58) {
      goto LABEL_609;
    }
    *unsigned int v56 = *(v56 - 1) + v11;
    ++v56;
    ++v58;
    ++v57;
    if (v616 == v58) {
      goto LABEL_58;
    }
  }
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_609:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v4;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_610:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_611:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v4;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_612:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v4;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_613:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v4;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_614:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v4;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_615:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_616:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_617:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_618:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_619:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_620:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_621:
  *(void *)&v671[0] = 0;
  long long v686 = 0u;
  long long v687 = 0u;
  long long v684 = 0u;
  long long v685 = 0u;
  *(_OWORD *)v683 = 0u;
  LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v677[0] = 136315906;
  *(void *)&v677[1] = "operator[]";
  LOWORD(v677[3]) = 1024;
  *(unsigned int *)((char *)&v677[3] + 2) = 789;
  HIWORD(v677[4]) = 2048;
  *(void *)&v677[5] = v25;
  LOWORD(v677[7]) = 2048;
  *(void *)((char *)&v677[7] + 2) = v4;
  _os_log_send_and_compose_impl();
  uint64_t v379 = _os_crash_msg();
  __break(1u);
LABEL_622:
  long long v381 = a2;
  if (v637)
  {
    unint64_t v4 = v248;
    uint64_t v19 = v601;
    unint64_t v503 = v248 - (unint64_t)v601;
    if (v248 < (unint64_t)v601) {
      unint64_t v503 = 0;
    }
    uint64_t v504 = v637;
    while (v503)
    {
      *(void *)(v3 + 8 * v19) = 0;
      --v503;
      ++v19;
      if (!--v504) {
        goto LABEL_628;
      }
    }
    goto LABEL_818;
  }
LABEL_628:
  unint64_t v4 = (v601 - v637);
  if (v632)
  {
    uint64_t v19 = 0;
    float v505 = 0.0;
    int v506 = v632;
    while (1)
    {
      unint64_t v16 = (v601 + v19);
      if (v16 >= v13) {
        break;
      }
      unint64_t v25 = (v4 + v19);
      if (v25 >= v13) {
        goto LABEL_823;
      }
      if (v25 >= v248) {
        goto LABEL_824;
      }
      float32x4_t v507 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v16), *(float32x4_t *)(v379 + 16 * v25));
      float32x4_t v508 = vmulq_f32(v507, v507);
      float v505 = v505
           + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v508, 2), vaddq_f32(v508, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v508.f32, 1))).f32[0]);
      *(void *)(v3 + 8 * v25) = LODWORD(v505);
      uint64_t v19 = (v19 - v637);
      if (!--v506) {
        goto LABEL_634;
      }
    }
LABEL_822:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v16;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_823:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    LODWORD(v696[0]) = 136315906;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = (v4 + v19);
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_824:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v25;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_825:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 797;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = 0;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_826;
  }
LABEL_634:
  if (v4 >= v13) {
    goto LABEL_861;
  }
  if (v601 >= v13) {
    goto LABEL_862;
  }
  if (v628 >= 2)
  {
    float32x4_t v509 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v4), *(float32x4_t *)(v379 + 16 * v601));
    float32x4_t v510 = vmulq_f32(v509, v509);
    float v511 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v510, 2), vaddq_f32(v510, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v510.f32, 1))).f32[0]);
    float32x4_t v512 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v509, (int32x4_t)v509), (int8x16_t)v509, 0xCuLL);
    float32x4_t v513 = vnegq_f32(v509);
    uint64_t v19 = v13;
    uint64_t v514 = 1;
    while (1)
    {
      unint64_t v25 = v514 + v4;
      if (v514 == v13 - v4) {
        goto LABEL_841;
      }
      if (v459 >= 2) {
        break;
      }
LABEL_645:
      if (++v514 == v628) {
        goto LABEL_646;
      }
    }
    float32x4_t v515 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v25), *(float32x4_t *)(v379 + 16 * v601));
    float32x4_t v516 = vmulq_f32(v515, v515);
    int32x4_t v517 = (int32x4_t)vmulq_f32(v509, v515);
    float32x4_t v518 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v515, (int32x4_t)v515), (int8x16_t)v515, 0xCuLL), v513), v515, v512);
    float32x4_t v519 = vmulq_f32(v518, v518);
    v517.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v517, 2), vadd_f32(*(float32x2_t *)v517.i8, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v517.i8, 1))).u32[0];
    v517.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v519.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v519, 2), v519)).f32[0]);
    float32x2_t v520 = vmul_n_f32(*(float32x2_t *)v517.i8, 1.0/ (float)(v511* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v516, 2), vaddq_f32(v516, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v516.f32, 1))).f32[0])));
    float v521 = 0.0;
    int v522 = v632;
    unint64_t v17 = v601;
    while (v17 < v13)
    {
      unint64_t v16 = v25;
      if (v25 >= v13) {
        goto LABEL_774;
      }
      if (v25 >= v248) {
        goto LABEL_775;
      }
      float32x4_t v523 = vsubq_f32(*(float32x4_t *)(v379 + 16 * v17), *(float32x4_t *)(v379 + 16 * v25));
      float32x4_t v524 = vmulq_f32(v523, v523);
      float v521 = v521
           + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v524, 2), vaddq_f32(v524, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v524.f32, 1))).f32[0]);
      *(float32x2_t *)(v3 + 8 * v25) = vmul_n_f32(v520, v521);
      unint64_t v17 = v25;
      unint64_t v25 = (v25 - v637);
      if (!--v522) {
        goto LABEL_645;
      }
    }
LABEL_773:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v17;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_774:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v16;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_775:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v16;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_776:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = 0;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_777:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = v4;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_778:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = v17;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_779:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = v4;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_780:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_781:
    *(void *)&v671[0] = 0;
    long long v686 = 0u;
    long long v687 = 0u;
    long long v684 = 0u;
    long long v685 = 0u;
    *(_OWORD *)v683 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v677[0] = 136315906;
    *(void *)&v677[1] = "operator[]";
    LOWORD(v677[3]) = 1024;
    *(unsigned int *)((char *)&v677[3] + 2) = 789;
    HIWORD(v677[4]) = 2048;
    *(void *)&v677[5] = 0;
    LOWORD(v677[7]) = 2048;
    *(void *)((char *)&v677[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_782;
  }
LABEL_646:
  unint64_t v13 = v633;
  unint64_t v382 = v598;
  uint64_t v11 = *(void *)v610;
  if (v632)
  {
    uint64_t v19 = 0;
    int v525 = v601 - 1;
    while (1)
    {
      unint64_t v25 = (v4 + v19);
      if (v25 >= v248) {
        break;
      }
      if (v525 + (int)v19 >= v248) {
        goto LABEL_830;
      }
      LODWORD(v526) = 0;
      HIDWORD(v526) = *(_DWORD *)(v3 + 8 * v25);
      *(void *)(v3 + 8 * (v525 + v19)) = v526;
      uint64_t v19 = (v19 - v637);
      if (!--v632) {
        goto LABEL_485;
      }
    }
LABEL_829:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v25;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_830:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    LODWORD(v696[0]) = 136315906;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = (v601 + v19 - 1);
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_831:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v19;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_832:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unint64_t v494 = &_os_log_internal;
    uint64_t v19 = v382;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    LODWORD(v696[0]) = 136315906;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = (v19 + v4);
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_833:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unsigned int v491 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 797;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v494;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_834:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v491;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_835:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unsigned int v491 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 797;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v13;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_836:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unint64_t v494 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v19;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v491;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_837:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unsigned int v491 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 797;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v494;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_838:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v25;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v491;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_839:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unsigned int v491 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 797;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v13;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_840:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v13;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v491;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_841:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v25;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_842:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_843:
    uint64_t v670 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v699 = 136315906;
    *(void *)&v699[4] = "operator[]";
    *(_WORD *)&v699[12] = 1024;
    *(_DWORD *)&v699[14] = 609;
    *(_WORD *)&v699[18] = 2048;
    *(void *)&v699[20] = v3;
    *(_WORD *)&v699[28] = 2048;
    *(void *)&v699[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_844;
  }
LABEL_485:
  unint64_t v4 = v601;
  if (v601 >= v248) {
    goto LABEL_853;
  }
  uint64_t v19 = *(void *)v607;
  if (v382 >= v248) {
    goto LABEL_854;
  }
  if (v607[0] >= v248) {
    goto LABEL_855;
  }
  float32x2_t v386 = *(float32x2_t *)(v3 + 8 * v601);
  float32x2_t v387 = *(float32x2_t *)(v3 + 8 * v382);
  __asm { FMOV            V2.2S, #3.0 }
  *(float32x2_t *)(v3 + 8 * v607[0]) = vdiv_f32(vadd_f32(vadd_f32(v386, v386), v387), _D2);
  if (v11 >= v248) {
    goto LABEL_856;
  }
  *(float32x2_t *)(v3 + 8 * v11) = vdiv_f32(vadd_f32(v386, vadd_f32(v387, v387)), _D2);
  int v393 = v381[2];
  v394 = (float32x2_t *)re::modifyVertexUVs(a1, v380);
  unint64_t v248 = v395;
  int v396 = 0;
  uint64_t v397 = 0;
  v398.f32[0] = v8 * 0.5;
  v399.f32[0] = -(float)(v8 * 0.5);
  do
  {
    *(_DWORD *)&v699[v397] = v396;
    v397 += 4;
    v396 += v13;
  }
  while (v397 != 36);
  v400.f32[0] = -(float)(v8 * 0.5);
  v400.f32[1] = -(float)(v7 * 0.5);
  v401.f32[0] = v8 * 0.5;
  v401.f32[1] = v7 * 0.5;
  v399.f32[1] = v7 * 0.5;
  v398.f32[1] = v400.f32[1];
  if (v616)
  {
    int v402 = 0;
    unsigned int v403 = v631 / v616;
    if (v631 / v616 <= 1) {
      unsigned int v404 = 1;
    }
    else {
      unsigned int v404 = v631 / v616;
    }
    int32x4_t v405 = *(int32x4_t *)v699;
    int32x4_t v406 = *(int32x4_t *)&v699[16];
    while (1)
    {
      int v407 = v402 + 1;
      if (v616 <= v631) {
        break;
      }
LABEL_509:
      int v402 = v407;
      if (v407 == v616) {
        goto LABEL_510;
      }
    }
    int v408 = 0;
    unsigned int v409 = v404;
    int v410 = v402 * v403;
    while (1)
    {
      int32x4_t v411 = vtrn2q_s32(vrev64q_s32(vdupq_n_s32(v408 + v410)), vdupq_n_s32(v407 * v403 + ~v408));
      int32x4_t v412 = vaddq_s32(v411, v405);
      unint64_t v4 = v412.u32[0];
      if (v412.i32[0] >= v248) {
        goto LABEL_725;
      }
      v413 = &v394[v412.u32[0]];
      v414.i32[0] = v413->i32[0];
      float v415 = v413->f32[1];
      float32x2_t v416 = vadd_f32(v401, *v413);
      float32x2_t *v413 = v416;
      unint64_t v4 = v412.u32[1];
      if (v412.i32[1] >= v248) {
        goto LABEL_726;
      }
      v417.f32[0] = -v414.f32[0];
      v417.f32[1] = v415;
      float32x2_t v418 = vadd_f32(v399, v417);
      v394[v412.u32[1]] = v418;
      unint64_t v4 = v412.u32[2];
      if (v412.i32[2] >= v248) {
        goto LABEL_727;
      }
      float v419 = -v415;
      v420.f32[1] = -v415;
      v420.f32[0] = -v414.f32[0];
      float32x2_t v421 = vadd_f32(v400, v420);
      v394[v412.u32[2]] = v421;
      unint64_t v4 = v412.u32[3];
      if (v412.i32[3] >= v248) {
        goto LABEL_728;
      }
      v414.f32[1] = v419;
      int32x4_t v422 = vaddq_s32(v411, v406);
      float32x2_t v423 = vadd_f32(v398, v414);
      v394[v412.u32[3]] = v423;
      unint64_t v4 = v422.u32[0];
      if (v422.i32[0] >= v248) {
        goto LABEL_729;
      }
      v424 = &v394[v422.u32[0]];
      float32x2_t *v424 = v421;
      unint64_t v4 = v422.u32[1];
      if (v422.i32[1] >= v248) {
        goto LABEL_730;
      }
      v425 = &v394[v422.u32[1]];
      float32x2_t *v425 = v423;
      unint64_t v4 = v422.u32[2];
      if (v422.i32[2] >= v248) {
        goto LABEL_731;
      }
      v426 = &v394[v422.u32[2]];
      float32x2_t *v426 = v416;
      unint64_t v4 = v422.u32[3];
      if (v422.i32[3] >= v248) {
        goto LABEL_732;
      }
      v427 = &v394[v422.u32[3]];
      float32x2_t *v427 = v418;
      if (v393)
      {
        v424->f32[0] = -v424->f32[0];
        v425->f32[0] = -v425->f32[0];
        v426->f32[0] = -v426->f32[0];
        v427->f32[0] = -v427->f32[0];
      }
      ++v408;
      if (!--v409) {
        goto LABEL_509;
      }
    }
  }
LABEL_510:
  unint64_t v4 = 0;
  uint64_t v428 = *(unsigned int *)&v699[12];
  unint64_t v17 = *(unsigned int *)&v699[16];
  unint64_t v18 = *(unsigned int *)&v699[24];
  unint64_t v16 = *(unsigned int *)&v699[28];
  uint64_t v19 = *(unsigned int *)&v699[32];
  int v429 = *(_DWORD *)&v699[28] - 1;
  LODWORD(v637) = *(_DWORD *)&v699[20];
  int v430 = *(_DWORD *)&v699[20] - 1;
  int v431 = *(_DWORD *)&v699[12] - 1;
  int v432 = *(_DWORD *)&v699[32] - 1;
  int v433 = *(_DWORD *)&v699[24] - 1;
  unint64_t v13 = *(unsigned int *)&v699[4];
  uint64_t v11 = *(unsigned int *)&v699[8];
  int v434 = *(_DWORD *)&v699[16] - 1;
  int v435 = *(_DWORD *)&v699[8] - 1;
  int v436 = *(_DWORD *)&v699[4] - 1;
  unsigned int v437 = -2;
  do
  {
    if (v436 + (int)v4 >= v248) {
      goto LABEL_783;
    }
    if (v4) {
      unint64_t v25 = v437;
    }
    else {
      unint64_t v25 = 1;
    }
    v438 = &v394[(v436 + v4)];
    v439.i32[0] = v438->i32[0];
    float v440 = v438->f32[1];
    float32x2_t v441 = vadd_f32(v401, *v438);
    float32x2_t *v438 = v441;
    if (v435 + (int)v4 - (int)v25 >= v248) {
      goto LABEL_784;
    }
    v442.f32[0] = -v439.f32[0];
    v442.f32[1] = v440;
    float32x2_t v443 = vadd_f32(v399, v442);
    v394[(v435 + v4 - v25)] = v443;
    if (v431 + (int)v4 >= v248) {
      goto LABEL_785;
    }
    float v444 = -v440;
    v445.f32[1] = -v440;
    v445.f32[0] = -v439.f32[0];
    float32x2_t v446 = vadd_f32(v400, v445);
    v394[(v431 + v4)] = v446;
    if (v434 + (int)v4 - (int)v25 >= v248) {
      goto LABEL_786;
    }
    v439.f32[1] = v444;
    float32x2_t v447 = vadd_f32(v398, v439);
    v394[(v434 + v4 - v25)] = v447;
    if (v430 + (int)v4 >= v248) {
      goto LABEL_787;
    }
    v448 = &v394[(v430 + v4)];
    float32x2_t *v448 = v446;
    if (v433 + (int)v4 - (int)v25 >= v248) {
      goto LABEL_788;
    }
    v449 = &v394[(v433 + v4 - v25)];
    float32x2_t *v449 = v447;
    if (v429 + (int)v4 >= v248) {
      goto LABEL_789;
    }
    v450 = &v394[(v429 + v4)];
    float32x2_t *v450 = v441;
    if (v432 + (int)v4 - (int)v25 >= v248) {
      goto LABEL_790;
    }
    v451 = &v394[(v432 + v4 - v25)];
    float32x2_t *v451 = v443;
    if (v393)
    {
      v448->f32[0] = -v448->f32[0];
      v449->f32[0] = -v449->f32[0];
      v450->f32[0] = -v450->f32[0];
      v451->f32[0] = -v451->f32[0];
    }
    --v4;
    ++v437;
  }
  while (v4 != -3);
  float32x2_t v452 = *v394;
  unint64_t v4 = v248;
  unint64_t v25 = v633;
  if (v19 < 2) {
    goto LABEL_570;
  }
  v453 = a1;
  if ((unint64_t)v248 - 1 <= v19 - 2) {
    goto LABEL_857;
  }
  uint64_t v454 = v19 - 1;
  v455 = v394 + 1;
  float32x2_t v456 = *v394;
  do
  {
    float32x2_t v457 = *v455++;
    v458.i32[0] = vbsl_s8((int8x8_t)vcgt_f32(v452, v457), (int8x8_t)v457, (int8x8_t)v452).u32[0];
    v458.i32[1] = v452.i32[1];
    v458.i32[1] = vbsl_s8((int8x8_t)vcgt_f32(v458, v457), *(int8x8_t *)&v457, *(int8x8_t *)&v452).i32[1];
    float32x2_t v456 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v457, v456), (int8x8_t)v457, (int8x8_t)v456);
    float32x2_t v452 = v458;
    --v454;
  }
  while (v454);
LABEL_571:
  if (v19)
  {
    float32x2_t v485 = vsub_f32(v456, v458);
    if (v485.f32[1] >= v485.f32[0]) {
      v485.f32[0] = v485.f32[1];
    }
    if (v485.f32[0] > 0.0) {
      v485.f32[0] = 1.0 / v485.f32[0];
    }
    unint64_t v486 = v4;
    while (v486)
    {
      float32x2_t *v394 = vmul_n_f32(vsub_f32(*v394, v458), v485.f32[0]);
      ++v394;
      --v486;
      if (!--v19) {
        goto LABEL_579;
      }
    }
LABEL_813:
    v663[0] = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    unint64_t v3 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_814:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v16;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_815:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v16;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_816:
    re::internal::assertLog((re::internal *)6, (uint64_t)v330, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v19);
    _os_crash();
    __break(1u);
LABEL_817:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_818:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v19;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_819:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v19;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_820:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 601;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_821:
    *(void *)v699 = 0;
    long long v672 = 0u;
    long long v673 = 0u;
    memset(v671, 0, sizeof(v671));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v696[0]) = 136315906;
    *(void *)((char *)v696 + 4) = "operator[]";
    WORD6(v696[0]) = 1024;
    *(_DWORD *)((char *)v696 + 14) = 609;
    WORD1(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 4) = v4;
    WORD6(v696[1]) = 2048;
    *(void *)((char *)&v696[1] + 14) = v248;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_822;
  }
LABEL_579:
  *(void *)&v671[0] = v662;
  *((void *)&v671[0] + 1) = v660;
  *(void *)&v696[0] = v658;
  *((void *)&v696[0] + 1) = v656;
  *(_DWORD *)v699 = v615;
  unint64_t v4 = v634;
  unint64_t v25 = v604;
  uint64_t v488 = (uint64_t)a2;
  int v489 = v635;
  if (v602 >= 2)
  {
    uint64_t v490 = re::modifyVertexUVs(a1, v487);
    uint64_t v488 = (uint64_t)a2;
    if (v634 >= 2)
    {
      unsigned int v491 = v487;
      int v492 = v636 + 2;
      uint64_t v493 = 1;
      while (1)
      {
        unint64_t v494 = (v489 * v493);
        uint64_t v19 = v652;
        if (v652 <= v494) {
          goto LABEL_833;
        }
        unint64_t v4 = v654[v494];
        if (v4 >= v487) {
          goto LABEL_834;
        }
        unint64_t v13 = (v494 + v636);
        if (v652 <= v13) {
          goto LABEL_835;
        }
        uint64_t v19 = v654[v13];
        if (v19 >= v487) {
          goto LABEL_836;
        }
        uint64_t v11 = v648;
        if (v648 <= v494) {
          goto LABEL_837;
        }
        unint64_t v25 = v650[v494];
        if (v25 >= v487) {
          goto LABEL_838;
        }
        if (v648 <= v13) {
          goto LABEL_839;
        }
        unint64_t v13 = v650[v13];
        if (v13 >= v487) {
          goto LABEL_840;
        }
        if (v636 >= 2) {
          break;
        }
LABEL_597:
        ++v493;
        int v489 = v635;
        v492 += v635;
        if (v493 == v634) {
          goto LABEL_598;
        }
      }
      uint64_t v495 = 0;
      while (1)
      {
        float v496 = (float)(1.0 / (float)v636) * (float)(v495 + 1);
        float v497 = 1.0 - v496;
        unint64_t v3 = (v492 + v495);
        uint64_t v11 = v652;
        if (v652 <= v3) {
          goto LABEL_769;
        }
        uint64_t v11 = v654[v3];
        if (v11 >= v487) {
          goto LABEL_770;
        }
        *(float32x2_t *)(v490 + 8 * v11) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v490 + 8 * v19), v496), vmul_n_f32(*(float32x2_t *)(v490 + 8 * v4), v497));
        uint64_t v11 = v648;
        if (v648 <= v3) {
          goto LABEL_771;
        }
        uint64_t v11 = v650[v3];
        if (v11 >= v487) {
          goto LABEL_772;
        }
        *(float32x2_t *)(v490 + 8 * v11) = vadd_f32(vmul_n_f32(*(float32x2_t *)(v490 + 8 * v25), v497), vmul_n_f32(*(float32x2_t *)(v490 + 8 * v13), v496));
        if (v636 - 1 == ++v495) {
          goto LABEL_597;
        }
      }
    }
  }
LABEL_598:
  unint64_t v25 = (unint64_t)v646;
  uint64_t v19 = v644;
  uint64_t v11 = v488;
  if (!*(unsigned char *)(v488 + 2))
  {
LABEL_660:
    unsigned int v669 = v608;
    unint64_t v4 = (unint64_t)a1;
    uint64_t v527 = re::modifyVertexUVs(a1, v487);
    LODWORD(vre::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248) = v528;
    uint64_t v667 = v527;
    uint64_t v668 = v528;
    uint64_t v529 = re::GeomMesh::accessVertexPositions(a1);
    LODWORD(v530) = *(_DWORD *)(v11 + 40);
    unsigned int v532 = *(_DWORD *)(v11 + 52);
    int v531 = *(_DWORD *)(v11 + 56);
    int v666 = v531;
    unsigned int v665 = v532;
    int v533 = *(_DWORD *)(v11 + 60);
    unint64_t v13 = (v533 * v531);
    unsigned int v534 = v13 + 1;
    int v324 = (unsigned __int8 *)v11;
    if (*(float *)(v11 + 20) > 0.0)
    {
      float v535 = *(float *)(v11 + 24);
      int v536 = v533 - 1;
      if (v535 <= 0.0) {
        unint64_t v13 = v534;
      }
      else {
        unint64_t v13 = 0;
      }
      if (v535 > 0.0) {
        int v537 = 1;
      }
      else {
        int v537 = v536;
      }
      if (v13 >= v248) {
        goto LABEL_863;
      }
      uint64_t v11 = (v537 * v531);
      if (v11 >= v248) {
        goto LABEL_864;
      }
      unint64_t v4 = (unint64_t)v330;
      if (v13 >= v330) {
        goto LABEL_865;
      }
      if (v11 >= v330) {
        goto LABEL_866;
      }
      if (!v19) {
        goto LABEL_867;
      }
      unint64_t v4 = *(unsigned int *)v25;
      if (v4 >= v248) {
        goto LABEL_868;
      }
      if (v19)
      {
        uint64_t v538 = 0;
        float32x2_t v539 = vsub_f32(*(float32x2_t *)(v527 + 8 * v13), *(float32x2_t *)(v527 + 8 * v11));
        float32x4_t v540 = vsubq_f32(*(float32x4_t *)(v529 + 16 * v13), *(float32x4_t *)(v529 + 16 * v11));
        float32x4_t v541 = vmulq_f32(v540, v540);
        float v542 = (float)(*(float *)&v530
                     * (float)(sqrtf(vaddv_f32(vmul_f32(v539, v539)))
                             / sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 2), vaddq_f32(v541, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 1))).f32[0])))/ (float)v532;
        float32x2_t v543 = *(float32x2_t *)(v527 + 8 * v4);
        uint64_t v544 = v532 + 1;
        float v545 = 0.0;
        unsigned int v546 = v608;
        while (1)
        {
          if (v538 == v19) {
            goto LABEL_851;
          }
          unint64_t v4 = *(unsigned int *)(v25 + 4 * v538);
          if (v4 >= v248) {
            goto LABEL_852;
          }
          float32x2_t v547 = *(float32x2_t *)(v527 + 8 * v4);
          float32x2_t v548 = vsub_f32(v547, v543);
          float v545 = v545 + sqrtf(vaddv_f32(vmul_f32(v548, v548)));
          if (v544) {
            break;
          }
LABEL_681:
          ++v538;
          v546 += v544;
          float32x2_t v543 = v547;
          if (v538 == v19) {
            goto LABEL_715;
          }
        }
        unsigned int v549 = 0;
        unint64_t v4 = v546;
        uint64_t v550 = v544;
        while (v4 < v248)
        {
          *(float *)&uint64_t v551 = v542 * (float)v549;
          *((float *)&v551 + 1) = v545;
          *(void *)(v527 + 8 * v4) = v551;
          ++v549;
          ++v4;
          if (!--v550) {
            goto LABEL_681;
          }
        }
        goto LABEL_780;
      }
      goto LABEL_715;
    }
    goto LABEL_707;
  }
  uint64_t v498 = re::modifyVertexUVs(a1, v487);
  int v324 = (unsigned __int8 *)v11;
  if (v19)
  {
    uint64_t v499 = 0;
    uint64_t v500 = (*(_DWORD *)(v11 + 52) + 1);
    unint64_t v3 = v330;
    unsigned int v501 = v608;
    while (1)
    {
      if (v499 == v19) {
        goto LABEL_816;
      }
      unint64_t v4 = *(unsigned int *)(v25 + 4 * v499);
      if (v4 >= v330) {
        goto LABEL_817;
      }
      unint64_t v13 = v501;
      uint64_t v502 = v500;
      if (v500) {
        break;
      }
LABEL_606:
      ++v499;
      v501 += v500;
      if (v499 == v19) {
        goto LABEL_715;
      }
    }
    while (v13 < v330)
    {
      *(void *)(v498 + 8 * v13++) = *(void *)(v498 + 8 * v4);
      if (!--v502) {
        goto LABEL_606;
      }
    }
    goto LABEL_735;
  }
LABEL_715:
  if (v324[1])
  {
    int v563 = ~(2 * (*((_DWORD *)v324 + 12) + *((_DWORD *)v324 + 11)) + 4 * *((_DWORD *)v324 + 14) - 4);
    unsigned int v564 = *((_DWORD *)a1 + 4);
    unsigned int v565 = v563 + v563 * *((_DWORD *)v324 + 13) + v564;
    unsigned int v566 = v565 >> 1;
    *(void *)&v671[0] = re::modifyVertexUVs(a1, v330);
    *((void *)&v671[0] + 1) = v567;
    v565 &= ~1u;
    int v324 = a2;
  }
LABEL_456:
  if (v324[4]) {
    re::internal::mergeVertexPositions(a1, v330);
  }
  re::GeomMesh::freeName((re *)v683);
  re::internal::GeomAttributeManager::~GeomAttributeManager(v600);
  if ((void)v684 && (void)v686) {
    (*(void (**)(void, void))(*(void *)v684 + 40))(v684, v686);
  }
  if (v639[0] && v642) {
    (*(void (**)(void, _DWORD *))(*(void *)v639[0] + 40))(v639[0], v642);
  }
  if (v643[0] && v646) {
    (*(void (**)(void, _DWORD *))(*(void *)v643[0] + 40))(v643[0], v646);
  }
  if (v647[0] && v650) {
    (*(void (**)(void, _DWORD *))(*(void *)v647[0] + 40))(v647[0], v650);
  }
  if (v651[0] && v654) {
    (*(void (**)(void, _DWORD *))(*(void *)v651[0] + 40))(v651[0], v654);
  }
  if (v655[0] && v658) {
    (*(void (**)(void, _DWORD *))(*(void *)v655[0] + 40))(v655[0], v658);
  }
  if (v659[0] && v662) {
    (*(void (**)(void, _DWORD *))(*(void *)v659[0] + 40))(v659[0], v662);
  }
  return v608;
}

void re::anonymous namespace'::computeGeometryForCanonicalCorner(re::GeomMesh *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v8 = a6;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  uint64_t v122 = *MEMORY[0x263EF8340];
  unsigned int v104 = a5;
  unsigned int v105 = a4;
  unsigned int v103 = a6;
  uint64_t v13 = re::GeomMesh::modifyVertexPositions(a1);
  uint64_t v15 = v14;
  uint64_t v101 = v13;
  uint64_t v102 = v14;
  unsigned int v17 = v16;
  unint64_t v19 = v18;
  unsigned int v88 = v17;
  if (v9)
  {
    unsigned int v20 = 0;
    float v21 = 1.0 / (float)((float)v10 + -1.0);
    unint64_t v86 = v18;
    unint64_t v19 = v18;
    unint64_t v6 = v17;
    float v22 = 1.0 / (float)((float)v9 + -1.0);
    while (1)
    {
      float v23 = v20 == v9 - 1 ? 1.0 : v22 * (float)v20;
      if (v10) {
        break;
      }
LABEL_32:
      if (++v20 >= v9)
      {
        uint64_t v15 = v102;
        unint64_t v19 = v86;
        goto LABEL_34;
      }
    }
    unsigned int v94 = v20;
    uint64_t v15 = 0;
    uint64_t v9 = 16 * v8;
    uint64_t v24 = v90;
    uint64_t v7 = v92;
    LODWORD(v89) = v8;
    while (1)
    {
      unint64_t v25 = v8 + v15;
      *(_OWORD *)unsigned int v112 = 0u;
      float32x4_t v100 = 0u;
      float v26 = v21 * (float)v15;
      if (v15 == v10 - 1) {
        float v26 = 1.0;
      }
      uint64_t v10 = v102;
      if (v25 >= v102)
      {
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        unsigned int v69 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_DWORD *)unint64_t v110 = 136315906;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v8 + v15;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_81:
        v96.i64[0] = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        uint64_t v24 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v112 = 136315906;
        *(void *)&v112[4] = "operator[]";
        *(_WORD *)&v112[12] = 1024;
        *(_DWORD *)&v112[14] = 609;
        __int16 v113 = 2048;
        unint64_t v114 = v8 + v19;
        __int16 v115 = 2048;
        unint64_t v116 = v69;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_82:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_83:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_84:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        *(void *)&long long v98 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v15 + v89;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_90:
        v96.i64[0] = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v112 = 136315906;
        *(void *)&v112[4] = "operator[]";
        *(_WORD *)&v112[12] = 1024;
        *(_DWORD *)&v112[14] = 609;
        __int16 v113 = 2048;
        unint64_t v114 = v19;
        __int16 v115 = 2048;
        unint64_t v116 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_91:
        *(void *)unsigned int v112 = 0;
        long long v120 = 0u;
        long long v121 = 0u;
        long long v118 = 0u;
        long long v119 = 0u;
        long long v117 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v110 = 136315906;
        *(void *)&v110[4] = "operator[]";
        *(_WORD *)&v110[12] = 1024;
        *(_DWORD *)&v110[14] = 609;
        *(_WORD *)&v110[18] = 2048;
        *(void *)&v110[20] = v24;
        *(_WORD *)&v110[28] = 2048;
        *(void *)&v110[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_92;
      }
      int v29 = (void *)(v101 + v9 + 16 * v15);
      void *v29 = v27;
      v29[1] = v28;
      float32x4_t v30 = *(float32x4_t *)v112;
      float32x4_t v31 = vmulq_f32(v30, v30);
      float32x4_t v32 = vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1));
      float32x4_t v33 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2);
      float32x4_t v34 = v100;
      float32x4_t v35 = vmulq_f32(v34, v34);
      float v36 = vaddq_f32(v33, v32).f32[0];
      LODWORD(v37) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u32[0];
      if (v36 == 0.0 && v37 == 0.0)
      {
        long long v38 = xmmword_23435FD80;
        if (v25 >= v6) {
          goto LABEL_82;
        }
        *(_OWORD *)(v7 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23435FD60;
        if (v25 >= v19) {
          goto LABEL_83;
        }
      }
      else
      {
        long long v38 = xmmword_23435FD80;
        if (v37 != 0.0)
        {
          if (v36 == 0.0)
          {
            if (v25 >= v19) {
              goto LABEL_88;
            }
            *(_OWORD *)(v24 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23435FD80;
            if (v25 >= v6) {
              goto LABEL_89;
            }
            int8x16_t v49 = (int8x16_t)vmlaq_f32(vmulq_f32(v34, (float32x4_t)xmmword_23437C0A0), (float32x4_t)xmmword_23435FD80, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
            *(int8x16_t *)(v7 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
          }
          else
          {
            if (v25 >= v6) {
              goto LABEL_84;
            }
            *(_OWORD *)(v7 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)v112;
            float32x4_t v39 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v30)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
            float32x4_t v40 = vmulq_f32(v39, v39);
            float v41 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), v40)).f32[0];
            if (v41 <= 0.0)
            {
              uint64_t v48 = 0;
              uint64_t v47 = 0;
            }
            else
            {
              float32x2_t v42 = (float32x2_t)LODWORD(v41);
              float32x4_t v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL);
              float32x2_t v44 = vrsqrte_f32(v42);
              float32x2_t v45 = vmul_f32(v44, vrsqrts_f32(v42, vmul_f32(v44, v44)));
              float32x4_t v46 = vmulq_n_f32(v43, vmul_f32(v45, vrsqrts_f32(v42, vmul_f32(v45, v45))).f32[0]);
              uint64_t v47 = v46.i64[1];
              uint64_t v48 = v46.i64[0];
            }
            if (v25 >= v19) {
              goto LABEL_85;
            }
            uint64_t v50 = (uint64_t *)(v24 + v9);
            *uint64_t v50 = v48;
            v50[1] = v47;
          }
          goto LABEL_30;
        }
        if (v25 >= v6) {
          goto LABEL_86;
        }
        *(_OWORD *)(v7 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)v112;
        if (v25 >= v19) {
          goto LABEL_87;
        }
      }
      *(_OWORD *)(v24 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v38;
LABEL_30:
      uint64_t v10 = v105;
      ++v15;
      v24 += 16;
      v7 += 16;
      if (v15 >= v105)
      {
        v8 += v15;
        uint64_t v9 = v104;
        unsigned int v20 = v94;
        goto LABEL_32;
      }
    }
  }
LABEL_34:
  uint64_t v24 = v8 - 1;
  unsigned int v51 = v88;
  if (v15 <= v24) {
    goto LABEL_91;
  }
  long long v52 = 0uLL;
  v53.i64[0] = 0;
  v53.i64[1] = *(unsigned int *)(v101 + 16 * v24 + 8);
  float32x4_t v100 = v53;
  unint64_t v6 = v8;
  if (v15 <= v8)
  {
LABEL_92:
    *(void *)unsigned int v112 = 0;
    long long v120 = v52;
    long long v121 = v52;
    long long v118 = v52;
    long long v119 = v52;
    long long v117 = v52;
    unsigned int v51 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v110 = 136315906;
    *(void *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(void *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(void *)&v110[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
  *(float32x4_t *)(v101 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v100;
  if (v8 >= v88)
  {
LABEL_93:
    *(void *)unsigned int v112 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v110 = 136315906;
    *(void *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(void *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(void *)&v110[30] = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_94;
  }
  *(_OWORD *)(v92 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = xmmword_23435FD60;
  if (v8 >= v19)
  {
LABEL_94:
    *(void *)unsigned int v112 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v58 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v110 = 136315906;
    *(void *)&v110[4] = "operator[]";
    *(_WORD *)&v110[12] = 1024;
    *(_DWORD *)&v110[14] = 609;
    *(_WORD *)&v110[18] = 2048;
    *(void *)&v110[20] = v6;
    *(_WORD *)&v110[28] = 2048;
    *(void *)&v110[30] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v7 = v19;
  unint64_t v6 = v90 + 16 * v8;
  *(_OWORD *)unint64_t v6 = xmmword_23435FD80;
  unsigned int v99 = v8;
  *(void *)unint64_t v110 = &v100;
  *(void *)&v110[8] = &v103;
  *(void *)&v110[16] = &v105;
  *(void *)&v110[24] = &v104;
  *(void *)&v110[32] = &v99;
  int v111 = &v101;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v15 = v54;
  uint64_t v10 = v55;
  unint64_t v58 = v8 + 1;
  unint64_t v19 = v102;
  if (v102 <= v58)
  {
LABEL_95:
    uint64_t v108 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v62 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v58;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_96;
  }
  v59.i64[0] = v15;
  v59.i64[1] = v10;
  v60.i64[0] = v56;
  v60.i64[1] = v57;
  float32x4_t v61 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
  *(float32x4_t *)(v101 + 16 * v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vmulq_f32(vaddq_f32(vaddq_f32(v59, v59), v60), v61);
  unint64_t v62 = v8 + 2;
  unint64_t v19 = v102;
  if (v102 <= v62)
  {
LABEL_96:
    uint64_t v108 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v58 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v62;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_97;
  }
  *(float32x4_t *)(v101 + 16 * v62) = vmulq_f32(vaddq_f32(vaddq_f32(v60, v60), v59), v61);
  unint64_t v19 = v102;
  if (v102 <= v58)
  {
LABEL_97:
    uint64_t v108 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v62 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v58;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_98;
  }
  unint64_t v19 = v102;
  if (v102 <= v62)
  {
LABEL_98:
    uint64_t v106 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v62;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_99;
  }
  unint64_t v63 = v108;
  LODWORD(v19) = v88;
  if (v108 >= v88)
  {
LABEL_99:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v84 = v63;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v84;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_100;
  }
  unint64_t v64 = HIDWORD(v108);
  if (HIDWORD(v108) >= v88)
  {
LABEL_100:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v58 = v64;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v58;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_101;
  }
  a3 = v109;
  if (v109 >= v88)
  {
LABEL_101:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = a3;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  if (v58 >= v88)
  {
LABEL_102:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v58;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  uint64_t v65 = v98;
  float v66 = *((float *)&v98 + 2);
  *(float32x4_t *)(v92 + 16 * v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v108), *(float *)&v98), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * HIDWORD(v108)), *((float *)&v98 + 1))), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v109), *((float *)&v98 + 2)));
  uint64_t v10 = v106;
  if (v106 >= v88)
  {
LABEL_103:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v10;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v15 = HIDWORD(v106);
  if (HIDWORD(v106) >= v88)
  {
LABEL_104:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v15;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v9 = v107;
  if (v107 >= v88)
  {
LABEL_105:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v62 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v9;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_106;
  }
  if (v62 >= v88)
  {
LABEL_106:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v62;
    __int16 v115 = 2048;
    unint64_t v116 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_107;
  }
  uint64_t v67 = v97;
  float v68 = *((float *)&v97 + 2);
  *(float32x4_t *)(v92 + 16 * v62) = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v106), *(float *)&v97), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * HIDWORD(v106)), *((float *)&v97 + 1))), vmulq_n_f32(*(float32x4_t *)(v92 + 16 * v107), *((float *)&v97 + 2)));
  if (v62 >= v7)
  {
LABEL_107:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v62;
    __int16 v115 = 2048;
    unint64_t v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v6;
    __int16 v115 = 2048;
    unint64_t v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unsigned int v69 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v8;
    __int16 v115 = 2048;
    unint64_t v116 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
  *(_OWORD *)(v90 + 16 * v62) = *(_OWORD *)v6;
  *(_OWORD *)(v90 + 16 * v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)v6;
  if (!a2) {
    return;
  }
  float v93 = v68;
  float v95 = v66;
  unint64_t v89 = v64;
  unint64_t v91 = v63;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    uint64_t v24 = re::internal::GeomTypedAttribute<float>::operator[](a2, 0);
    unsigned int v69 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  else
  {
    unsigned int v69 = 0;
    uint64_t v24 = 0;
  }
  unint64_t v6 = v103;
  uint64_t v7 = v102;
  if (v102 <= v103) {
    goto LABEL_108;
  }
  uint64_t v70 = v101;
  float32x4_t v71 = *(float32x4_t *)(v101 + 16 * v103);
  uint64_t v72 = v104;
  if (v104)
  {
    uint64_t v73 = 0;
    unsigned int v74 = v105;
    float v75 = 0.0;
    unsigned int v8 = v103;
    while (1)
    {
      unint64_t v19 = v6 + v74 * v73;
      if (v7 <= v19) {
        goto LABEL_90;
      }
      float32x4_t v76 = *(float32x4_t *)(v70 + 16 * v19);
      float32x4_t v77 = vsubq_f32(v76, v71);
      float32x4_t v78 = vmulq_f32(v77, v77);
      float v75 = v75
          + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0]);
      if (v74)
      {
        unint64_t v19 = 0;
        unsigned int v79 = v69 - v8;
        if (v69 < v8) {
          unsigned int v79 = 0;
        }
        do
        {
          if (v79 == v19) {
            goto LABEL_81;
          }
          *(float *)(v24 + 4 * v8 + 4 * v19++) = v75;
        }
        while (v74 != v19);
        v8 += v19;
      }
      ++v73;
      float32x4_t v71 = v76;
      if (v73 == v72) {
        goto LABEL_68;
      }
    }
  }
  float32x4_t v76 = *(float32x4_t *)(v101 + 16 * v103);
  unsigned int v8 = v103;
LABEL_68:
  if (v7 <= v8) {
    goto LABEL_109;
  }
  unint64_t v6 = v8;
  if (v69 <= v8)
  {
LABEL_110:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v6;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_111;
  }
  float32x4_t v80 = vsubq_f32(*(float32x4_t *)(v70 + 16 * v8), v76);
  float32x4_t v81 = vmulq_f32(v80, v80);
  *(float *)(v24 + 4 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]);
  unint64_t v82 = v91;
  if (v69 <= v91)
  {
LABEL_111:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v85 = v82;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v85;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_112;
  }
  unsigned int v83 = (_OWORD *)v89;
  if (v69 <= v89)
  {
LABEL_112:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    unint64_t v6 = (unint64_t)v83;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v6;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  if (v69 <= a3)
  {
LABEL_113:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = a3;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  unint64_t v6 = v8 + 1;
  if (v69 <= v6)
  {
LABEL_114:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v6;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_115;
  }
  *(float *)(v24 + 4 * v6) = (float)((float)(*((float *)&v65 + 1) * *(float *)(v24 + 4 * v89))
                                                   + (float)(*(float *)&v65 * *(float *)(v24 + 4 * v91)))
                                           + (float)(v95 * *(float *)(v24 + 4 * a3));
  if (v69 <= v10)
  {
LABEL_115:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v10;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  if (v69 <= v15)
  {
LABEL_116:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v15;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
  if (v69 <= v9)
  {
LABEL_117:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v9;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_118:
    v96.i64[0] = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v112 = 136315906;
    *(void *)&v112[4] = "operator[]";
    *(_WORD *)&v112[12] = 1024;
    *(_DWORD *)&v112[14] = 609;
    __int16 v113 = 2048;
    unint64_t v114 = v6;
    __int16 v115 = 2048;
    unint64_t v116 = v69;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v6 = v8 + 2;
  if (v69 <= v6) {
    goto LABEL_118;
  }
  *(float *)(v24 + 4 * v6) = (float)((float)(*((float *)&v67 + 1) * *(float *)(v24 + 4 * v15))
                                                   + (float)(*(float *)&v67 * *(float *)(v24 + 4 * v10)))
                                           + (float)(v93 * *(float *)(v24 + 4 * v9));
}

unsigned int **re::anonymous namespace'::classifyFaceType(re::anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,unsigned int,unsigned int,re::DynamicArray<unsigned short> &)::$_0::operator()(unsigned int **result, __int16 a2, __int16 a3, __int16 a4)
{
  int v4 = 0;
  uint64_t v5 = *result;
  do
  {
    unsigned int v6 = *v5;
    if (*v5)
    {
      unsigned int v7 = 0;
      unsigned int v8 = result[1];
      uint64_t v9 = (int *)result[2];
      unint64_t v10 = *((void *)v8 + 2);
      int v11 = *v9;
      while (1)
      {
        unint64_t v12 = v11 + v7;
        *uint64_t v9 = v12 + 1;
        if (v10 <= v12) {
          break;
        }
        *(_WORD *)(*((void *)v8 + 4) + 2 * v12) = a4 | a2;
        ++v7;
        unsigned int v6 = *v5;
        if (v7 >= *v5) {
          goto LABEL_6;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_13:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_6:
    uint64_t v13 = result[3];
    if (v6 < *v13)
    {
      uint64_t v14 = result[1];
      uint64_t v15 = result[2];
      unint64_t v16 = *((void *)v14 + 2);
      unsigned int v17 = *v15;
      do
      {
        *uint64_t v15 = v17 + 1;
        if (v16 <= v17) {
          goto LABEL_13;
        }
        *(_WORD *)(*((void *)v14 + 4) + 2 * v17) = a4 | a3;
        ++v6;
        ++v17;
      }
      while (v6 < *v13);
    }
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t re::anonymous namespace'::classifyFaceType(re::anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,unsigned int,unsigned int,re::DynamicArray<unsigned short> &)::$_1::operator()(uint64_t result, int a2, __int16 a3, __int16 a4, __int16 a5)
{
  if (a2)
  {
    int v5 = 0;
    unsigned int v6 = *(unsigned int **)result;
    uint64_t v7 = *(void *)(result + 8);
    unsigned int v8 = *(unsigned int **)(result + 16);
    unsigned int v9 = *v8;
    unint64_t v10 = *(void *)(v7 + 16);
    do
    {
      if (!*v6) {
        goto LABEL_8;
      }
      unsigned int v11 = 0;
      do
      {
        unint64_t v12 = v9 + v11;
        unsigned int *v8 = v12 + 1;
        if (v10 <= v12)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_12:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_WORD *)(*(void *)(v7 + 32) + 2 * v12) = a5 | a3;
        ++v11;
      }
      while (v11 < *v6);
      v9 += v11;
LABEL_8:
      unsigned int *v8 = v9 + 1;
      if (v10 <= v9) {
        goto LABEL_12;
      }
      *(_WORD *)(*(void *)(v7 + 32) + 2 * v9) = a5 | a4;
      ++v5;
      ++v9;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::anonymous namespace'::stitchTwoRows(uint64_t this, uint64_t a2, uint64_t a3, int a4, void *a5, int a6, int *a7, unsigned int *a8)
{
  uint64_t v14 = (void *)a3;
  uint64_t v15 = this;
  unint64_t v16 = (*(_DWORD *)(a3 + 8) - 1);
  if (a2 >= 2)
  {
    int v21 = a2;
    if (*(_DWORD *)(a3 + 8) != 1)
    {
      unint64_t v22 = 0;
      while (1)
      {
        unint64_t v23 = v14[1];
        if (v23 <= v22) {
          goto LABEL_32;
        }
        unsigned int v9 = (void *)(v22 + 1);
        if (v23 <= v22 + 1) {
          goto LABEL_33;
        }
        this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, *(_DWORD *)(*v14 + 4 * v22) + a4, *(_DWORD *)(*v14 + 4 * v22 + 4) + a4, *a7 + 1, *a7);
        ++*a7;
        ++*a8;
        unint64_t v22 = (unint64_t)v9;
        if ((void *)v16 == v9)
        {
          int v24 = *((_DWORD *)v14 + 2);
          goto LABEL_16;
        }
      }
    }
    int v24 = 1;
LABEL_16:
    int v25 = *a7 + 1;
    *a7 = v25;
    int v26 = v21 - 2;
    if (v21 != 2)
    {
      int v27 = 0;
      do
      {
        if (v16)
        {
          LODWORD(a2) = *a8;
          int v28 = v16;
          do
          {
            this = re::GeomMeshBuilder::setFaceVertices(v15, a2, *a7 - v24, *a7 + 1 - v24, *a7 + 1, *a7);
            ++*a7;
            a2 = *a8 + 1;
            *a8 = a2;
            --v28;
          }
          while (v28);
          int v25 = *a7;
        }
        *a7 = ++v25;
        ++v27;
      }
      while (v27 != v26);
    }
    int v29 = v25 - v24;
    *a7 = v25 - v24;
    if (v16)
    {
      float32x4_t v30 = 0;
      while (1)
      {
        uint64_t v14 = (void *)((char *)v30 + 1);
        unint64_t v31 = a5[1];
        if (v31 <= (unint64_t)v30 + 1) {
          break;
        }
        this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, v29, v29 + 1, *(_DWORD *)(*a5 + 4 * (void)v30 + 4) + a6, *(_DWORD *)(*a5 + 4 * (void)v30) + a6);
        ++*a8;
        int v29 = *a7 + 1;
        *a7 = v29;
        float32x4_t v30 = v14;
        if ((void *)v16 == v14) {
          goto LABEL_27;
        }
      }
LABEL_34:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v31);
      this = _os_crash();
      __break(1u);
      return this;
    }
LABEL_27:
    *a7 = v29 + 1;
  }
  else if (*(_DWORD *)(a3 + 8) != 1)
  {
    unint64_t v17 = 0;
    while (1)
    {
      unint64_t v18 = v14[1];
      if (v18 <= v17) {
        break;
      }
      unsigned int v8 = (void *)(v17 + 1);
      if (v18 <= v17 + 1) {
        goto LABEL_30;
      }
      unint64_t v19 = a5[1];
      if (v19 <= (unint64_t)v8) {
        goto LABEL_31;
      }
      this = re::GeomMeshBuilder::setFaceVertices(v15, *a8, *(_DWORD *)(*v14 + 4 * v17) + a4, *(_DWORD *)(*v14 + 4 * v17 + 4) + a4, *(_DWORD *)(*a5 + 4 * v17 + 4) + a6, *(_DWORD *)(*a5 + 4 * v17) + a6);
      ++*a8;
      unint64_t v17 = (unint64_t)v8;
      if ((void *)v16 == v8) {
        return this;
      }
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v18);
    _os_crash();
    __break(1u);
LABEL_30:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v18);
    _os_crash();
    __break(1u);
LABEL_31:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17 + 1, v19);
    _os_crash();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v22, v23);
    _os_crash();
    __break(1u);
LABEL_33:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v23);
    _os_crash();
    __break(1u);
    goto LABEL_34;
  }
  return this;
}

uint64_t re::anonymous namespace'::BezierArc::BezierArc(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = 0;
  v33[3] = *MEMORY[0x263EF8340];
  *(void *)uint64_t result = a2;
  *(_OWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v9 = (float32x2_t)vdup_n_s32(0x3FC3AB4Bu);
  do
  {
    unint64_t v10 = (int32x2_t *)((char *)&_MergedGlobals_368 + v3 * 8);
    v10[10] = vrev64_s32((int32x2_t)vsub_f32(v9, v11));
    ++v3;
  }
  while (v3 != 10);
  uint64_t v12 = 0;
  float v13 = fminf(fmaxf(*(float *)&a2, 0.0), 1.0);
  float v14 = fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0);
  uint64_t v15 = (float *)&dword_26AF93BDC;
  do
  {
    float v16 = v15[20];
    *(float *)&v32[v12 * 4 + 4] = (float)(v13 * v15[19]) + (float)((float)(1.0 - v13) * *(v15 - 1));
    float v17 = *v15;
    v15 += 2;
    v31[v12++] = (float)(v14 * v16) + (float)((float)(1.0 - v14) * v17);
  }
  while (v12 != 10);
  float v18 = 1.5287;
  float v19 = 1.5287;
  if (*(float *)&a2 < 1.0)
  {
    float v19 = 1.0;
    if (*(float *)&a2 > 0.0) {
      float v19 = (float)(*(float *)&a2 * 0.52866) + 1.0;
    }
  }
  if (*((float *)&a2 + 1) < 1.0)
  {
    float v18 = 1.0;
    if (*((float *)&a2 + 1) > 0.0) {
      float v18 = (float)(*((float *)&a2 + 1) * 0.52866) + 1.0;
    }
  }
  uint64_t v20 = 0;
  float v21 = v19 * a3;
  float v22 = v18 * a3;
  float v23 = -a3;
  int v24 = (float *)v32;
  do
  {
    *(float *)&uint64_t v25 = v21 + (float)(v23 * v31[v20]);
    float v26 = *v24--;
    *((float *)&v25 + 1) = v22 + (float)(v23 * v26);
    *(void *)(result + 8 + 8 * v20++) = v25;
  }
  while (v20 != 5);
  uint64_t v27 = 0;
  int v28 = (float *)v33;
  do
  {
    float v29 = *v28--;
    *(float *)&uint64_t v30 = v21 + (float)(v23 * v29);
    *((float *)&v30 + 1) = v22 + (float)(v23 * *((float *)v33 + v27 + 1));
    *(void *)(result + 48 + 8 * v27++) = v30;
  }
  while (v27 != 5);
  return result;
}

float re::anonymous namespace'::RoundedPatch::evalTangents(uint64_t a1, float32x4_t *a2, uint64_t a3, float a4, float a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  float v9 = *(float *)(a1 + 92);
  if (v9 <= 0.0) {
    a5 = 0.0;
  }
  float v13 = v12;
  float v14 = *(float *)a1;
  float v15 = 1.0;
  if (*(float *)a1 >= 1.0)
  {
    float v15 = 1.5287;
  }
  else if (v14 > 0.0)
  {
    float v15 = (float)(v14 * 0.52866) + 1.0;
  }
  float32x4_t v17 = 0uLL;
  if (sqrtf(vaddv_f32(vmul_f32(v16, v16))) > 0.0)
  {
    *(float32x2_t *)v17.f32 = v16;
    int32x4_t v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    float32x4_t v17 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  }
  uint64_t v21 = 0;
  float32x4_t v38 = v17;
  *a2 = v17;
  long long v40 = xmmword_2343AC300;
  float32x4_t v22 = 0uLL;
  do
  {
    *(float32x2_t *)v22.f32 = vadd_f32(*(float32x2_t *)v22.f32, vmul_n_f32((float32x2_t)v39[v21 + 1], *((float *)&v40 + v21)));
    ++v21;
  }
  while (v21 != 4);
  float32x2_t v23 = vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  float32x4_t v24 = 0uLL;
  if (sqrtf(vaddv_f32(v23)) > 0.0)
  {
    unsigned __int32 v25 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)vmulq_f32(v22, v22), 2), vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1))).u32[0];
    float32x2_t v26 = vrsqrte_f32((float32x2_t)v25);
    float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
    float32x4_t v24 = vmulq_n_f32(v22, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27))).f32[0]);
  }
  float32x4_t v37 = v24;
  if (sqrtf(vaddv_f32(vmul_f32(v28, v28))) <= 0.0)
  {
    float32x2_t v33 = 0;
    v32.i32[0] = 0;
  }
  else
  {
    int32x4_t v29 = (int32x4_t)vmulq_f32((float32x4_t)(unint64_t)v28, (float32x4_t)(unint64_t)v28);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    float32x2_t v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
    int8x16_t v32 = (int8x16_t)vmulq_n_f32((float32x4_t)(unint64_t)v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
    float32x2_t v33 = (float32x2_t)vextq_s8(v32, v32, 4uLL).u64[0];
  }
  float32x4_t v34 = vmulq_f32(v38, v37);
  v34.f32[0] = fmaxf(fminf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0], 1.0), -1.0);
  float v35 = sqrtf(1.0 - (float)(v34.f32[0] * v34.f32[0]));
  *(float *)a3 = vmuls_lane_f32(-v35, v33, 1) + (float)(v34.f32[0] * *(float *)v32.i32);
  *(float *)(a3 + 4) = vmuls_lane_f32(v34.f32[0], v33, 1) + (float)(v35 * *(float *)v32.i32);
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v33.i32[0];
  return v13;
}

float32_t re::anonymous namespace'::computeGeometryForCanonicalCorner(re::GeomMesh &,re::GeomAttribute *,re::anonymous namespace'::RoundedPatch const&,unsigned int,unsigned int,unsigned int)::$_0::operator()(uint64_t a1, _DWORD *a2, uint64_t a3, float32x4_t a4)
{
  float32x4_t v4 = *(float32x4_t *)*(void *)a1;
  int v5 = **(_DWORD **)(a1 + 16);
  uint64_t v6 = (**(_DWORD **)(a1 + 8) + (**(_DWORD **)(a1 + 24) - 1) * v5);
  uint64_t v7 = (v5 + v6 - 1);
  unsigned int v8 = *(_DWORD **)(a1 + 32);
  *a2 = *v8;
  a2[1] = *v8;
  a2[2] = *v8;
  *(_OWORD *)a3 = xmmword_23435FD50;
  if (v6 < v7)
  {
    a4 = vsubq_f32(a4, v4);
    uint64_t v9 = *(void *)(a1 + 40);
    unint64_t v10 = *(unsigned int *)(v9 + 8);
    float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL);
    float32x4_t v12 = vnegq_f32(a4);
    if (v10 <= v6) {
      uint64_t v13 = v6;
    }
    else {
      uint64_t v13 = *(unsigned int *)(v9 + 8);
    }
    uint64_t v14 = 16 * v6 + 16;
    for (uint64_t i = v6; ; ++i)
    {
      if (v13 == i)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v16 = i + 1;
      if (i + 1 >= v10) {
        goto LABEL_15;
      }
      float32x4_t v17 = *(float32x4_t *)*(void *)a1;
      float32x4_t v18 = vsubq_f32(*(float32x4_t *)(*(void *)v9 + v14 - 16), v17);
      float32x4_t v19 = vsubq_f32(*(float32x4_t *)(*(void *)v9 + v14), v17);
      float32x4_t v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
      float32x4_t v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL);
      float32x4_t v22 = vmulq_f32(vmlaq_f32(vmulq_f32(v20, v12), v18, v11), vmlaq_f32(vmulq_f32(v21, v12), v19, v11));
      if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v22)).f32[0] < 0.0)
      {
        float32x4_t v23 = vmlaq_f32(vmulq_f32(v21, vnegq_f32(v18)), v19, v20);
        if (v23.f32[1] > 0.0) {
          break;
        }
      }
      v14 += 16;
      if (v7 == v16) {
        return a4.f32[0];
      }
    }
    *a2 = **(_DWORD **)(a1 + 32);
    a2[1] = i;
    a2[2] = i + 1;
    float32x4_t v24 = vsubq_f32(v18, a4);
    float32x4_t v25 = vsubq_f32(v19, a4);
    float32x4_t v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
    v24.i64[0] = vdivq_f32(vmlaq_f32(vmulq_f32(v26, vnegq_f32(v24)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL)), v23).u64[0];
    a4.i64[0] = vdivq_f32(vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v25)), v26, a4), v23).u64[0];
    *(int32x2_t *)a3 = vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)a4.f32);
    a4.f32[0] = (float)(1.0 - v24.f32[1]) - a4.f32[1];
    *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a4.i32[0];
  }
  return a4.f32[0];
}

float32x2_t re::anonymous namespace'::BezierArc::eval(re::_anonymous_namespace_::BezierArc *this, float a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  double v2 = a2;
  if (a2 >= 0.333333333)
  {
    if (v2 >= 0.666666667)
    {
      float v4 = (v2 + -0.666666667) * 3.0;
      uint64_t v3 = 6;
    }
    else
    {
      float v4 = (v2 + -0.333333333) * 3.0;
      uint64_t v3 = 3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    float v4 = a2 * 3.0;
  }
  uint64_t v5 = 0;
  float v6 = 1.0 - v4;
  v9[0] = v6 * (float)(v6 * v6);
  v9[1] = v4 * (float)((float)(v6 * v6) * 3.0);
  v9[2] = (float)(v4 * v4) * (float)((float)(1.0 - v4) * 3.0);
  v9[3] = v4 * (float)(v4 * v4);
  uint64_t v7 = (char *)this + 8 * v3 + 8;
  float32x2_t result = 0;
  do
  {
    float32x2_t result = vadd_f32(result, vmul_n_f32(*(float32x2_t *)&v7[8 * v5], v9[v5]));
    ++v5;
  }
  while (v5 != 4);
  return result;
}

float32x2_t re::anonymous namespace'::BezierArc::evalFirstDerivative(re::_anonymous_namespace_::BezierArc *this, float a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  double v2 = a2;
  if (a2 >= 0.333333333)
  {
    if (v2 >= 0.666666667)
    {
      float v4 = (v2 + -0.666666667) * 3.0;
      uint64_t v3 = 6;
    }
    else
    {
      float v4 = (v2 + -0.333333333) * 3.0;
      uint64_t v3 = 3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    float v4 = a2 * 3.0;
  }
  uint64_t v5 = 0;
  float v6 = 1.0 - v4;
  v9[0] = (float)(v6 * v6) * -3.0;
  v9[1] = (float)((float)(v6 * v6) * 3.0) + (float)((float)((float)(1.0 - v4) * -6.0) * v4);
  v9[2] = (float)(v4 * (float)((float)(1.0 - v4) * 6.0)) + (float)((float)(v4 * v4) * -3.0);
  v9[3] = (float)(v4 * v4) * 3.0;
  uint64_t v7 = (char *)this + 8 * v3 + 8;
  float32x2_t result = 0;
  do
  {
    float32x2_t result = vadd_f32(result, vmul_n_f32(*(float32x2_t *)&v7[8 * v5], v9[v5]));
    ++v5;
  }
  while (v5 != 4);
  return result;
}

uint64_t re::anonymous namespace'::computeGeometryForInstancedFrontCorners(re::_anonymous_namespace_ *this, re::GeomMesh *a2, re::GeomAttribute *a3, unsigned int a4)
{
  unsigned int v5 = a3;
  uint64_t v8 = re::GeomMesh::modifyVertexPositions(this);
  unsigned int v10 = v9;
  unsigned int v98 = v12;
  unsigned int v23 = v22;
  float32x4_t v24 = a2;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(re::GeomMesh *))(*(void *)a2 + 16))(a2);
    if (result)
    {
      uint64_t v26 = re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)a2, 0);
      uint64_t result = (*(uint64_t (**)(re::GeomMesh *))(*(void *)a2 + 16))(a2);
      uint64_t v27 = v26;
    }
    else
    {
      uint64_t v27 = 0;
    }
    unsigned int v28 = v98;
    float32x4_t v24 = a2;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t result = 0xFFFFFFFFLL;
    unsigned int v28 = v98;
  }
  int v93 = 2 * v5;
  int v29 = 3 * v5;
  if (a4)
  {
    uint64_t v30 = 0;
    unint64_t v92 = v28;
    long long v97 = v24;
    uint64_t v94 = a4;
    uint64_t v31 = (float)((float)((float)v5 + -3.0) / (float)a4);
    int v88 = 3 * v5;
    unsigned int v89 = v5;
    unsigned int v91 = v5 - 1;
    int v90 = v29 - 1;
    do
    {
      if (v31)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        unint64_t v34 = (v30 * v31);
        unint64_t v35 = (v34 + v93);
        uint64_t v95 = v30 + 1;
        uint64_t v96 = v27 + 4 * v35;
        int v36 = (v30 + 1) * v31;
        uint64_t v37 = v13 + 16 * v35;
        if (v10 >= v34) {
          unint64_t v38 = v10 - v34;
        }
        else {
          unint64_t v38 = 0;
        }
        uint64_t v39 = v11 + 16 * v35;
        if (v10 >= v35) {
          unint64_t v40 = v10 - v35;
        }
        else {
          unint64_t v40 = 0;
        }
        uint64_t v41 = v8 + 16 * v35;
        if (v92 >= v34) {
          uint64_t v42 = v92 - v34;
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = v27 + 4 * v34;
        if (v92 >= v35) {
          uint64_t v44 = v92 - v35;
        }
        else {
          uint64_t v44 = 0;
        }
        unint64_t v45 = v23 - v34;
        uint64_t v46 = v13 + 16 * v34;
        if (v23 < v34) {
          unint64_t v45 = 0;
        }
        unint64_t v47 = v23 - v35;
        if (v23 < v35) {
          unint64_t v47 = 0;
        }
        unsigned int v48 = v91 + v36;
        unsigned int v49 = v90 + v36;
        uint64_t v50 = v8 + 4 + 16 * v34;
        uint64_t v51 = v11 + 4 + 16 * v34;
        do
        {
          if (v38 == v33)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_75:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_76:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_77:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_78:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_79:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_80:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_81:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_82:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_83:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_84:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_85:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_86:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_87:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_88:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_89:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_90:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_91:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_92:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_93:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_94:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_95:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_96:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_97:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_98:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_99:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_100:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_101:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_102:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_103:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_104:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_105:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v48 >= v10) {
            goto LABEL_75;
          }
          LODWORD(v14) = *(_DWORD *)(v8 + 16 * v34 + v32);
          *(float *)&long long v16 = -*(float *)&v14;
          float v52 = *(float *)(v50 + v32);
          long long v53 = v16;
          *((float *)&v53 + 1) = v52;
          int v54 = *(_DWORD *)(v50 + v32 + 4);
          DWORD2(v53) = v54;
          *(_OWORD *)(v8 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v53;
          if (v40 == v33) {
            goto LABEL_76;
          }
          float v55 = -v52;
          *((float *)&v16 + 1) = v55;
          DWORD2(v16) = v54;
          *(_OWORD *)(v41 + 16 * v33) = v16;
          if (v49 >= v10) {
            goto LABEL_77;
          }
          *((float *)&v14 + 1) = v55;
          DWORD2(v14) = v54;
          *(_OWORD *)(v8 + 16 * v49) = v14;
          if (v42 == v33) {
            goto LABEL_78;
          }
          if (v48 >= v28) {
            goto LABEL_79;
          }
          float v57 = *(float *)(v51 + v32);
          int v56 = *(_DWORD *)(v51 + v32 + 4);
          LODWORD(v17) = *(_DWORD *)(v11 + 16 * v34 + v32);
          long long v58 = v17;
          *((float *)&v58 + 1) = -v57;
          DWORD2(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v56;
          *(_OWORD *)(v11 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v58;
          if (v44 == v33) {
            goto LABEL_80;
          }
          *(float *)&long long v17 = -*(float *)&v17;
          long long v59 = v17;
          *((float *)&v59 + 1) = -v57;
          DWORD2(v59) = v56;
          *(_OWORD *)(v39 + 16 * v33) = v59;
          if (v49 >= v28) {
            goto LABEL_81;
          }
          *((float *)&v17 + 1) = v57;
          DWORD2(v17) = v56;
          *(_OWORD *)(v11 + 16 * v49) = v17;
          if (v45 == v33) {
            goto LABEL_82;
          }
          if (v48 >= v23) {
            goto LABEL_83;
          }
          LODWORD(v14) = *(_DWORD *)(v46 + v32);
          float v60 = *(float *)(v46 + v32 + 4);
          *(float *)&long long v16 = -*(float *)&v14;
          long long v18 = v16;
          *((float *)&v18 + 1) = v60;
          int v61 = *(_DWORD *)(v46 + v32 + 8);
          DWORD2(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v61;
          *(_OWORD *)(v13 + 16 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v18;
          if (v47 == v33) {
            goto LABEL_84;
          }
          float v62 = -v60;
          *((float *)&v16 + 1) = v62;
          DWORD2(v16) = v61;
          *(_OWORD *)(v37 + 16 * v33) = v16;
          if (v49 >= v23) {
            goto LABEL_85;
          }
          *((float *)&v14 + 1) = v62;
          DWORD2(v14) = v61;
          *(_OWORD *)(v13 + 16 * v49) = v14;
          if (v97)
          {
            if (v34 + v33 >= result) {
              goto LABEL_86;
            }
            if (result <= v48) {
              goto LABEL_87;
            }
            *(_DWORD *)(v27 + 4 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_DWORD *)(v43 + 4 * v33);
            if ((unint64_t)(v34 + v93) + v33 >= result) {
              goto LABEL_88;
            }
            *(_DWORD *)(v96 + 4 * v33) = *(_DWORD *)(v43 + 4 * v33);
            if (result <= v49) {
              goto LABEL_89;
            }
            *(_DWORD *)(v27 + 4 * v49) = *(_DWORD *)(v43 + 4 * v33);
          }
          ++v33;
          --v48;
          --v49;
          v32 += 16;
          unsigned int v28 = v98;
        }
        while (v31 != v33);
        float32x4_t v24 = v97;
        uint64_t v63 = v95;
      }
      else
      {
        uint64_t v63 = v30 + 1;
      }
      uint64_t v30 = v63;
    }
    while (v63 != v94);
    int v29 = v88;
    unsigned int v5 = v89;
  }
  unsigned int v64 = v29 - 1;
  int v65 = 4 * v5 - 1;
  int v66 = v93 - 1;
  unsigned int v67 = v5 - 1;
  uint64_t v68 = -3;
  do
  {
    int v69 = (int)(float)((float)(v68 + 4) + -3.0);
    if (v68 == -3) {
      int v69 = 1;
    }
    if (v67 >= v10) {
      goto LABEL_90;
    }
    if (v67 >= v98) {
      goto LABEL_91;
    }
    if (v67 >= v23) {
      goto LABEL_92;
    }
    uint64_t v70 = (v66 - v69);
    if (v70 >= v10) {
      goto LABEL_93;
    }
    uint64_t v71 = v8 + 16 * v67;
    LODWORD(v20) = *(_DWORD *)v71;
    float v72 = *(float *)(v71 + 4);
    int v73 = *(_DWORD *)(v71 + 8);
    uint64_t v74 = v11 + 16 * v67;
    LODWORD(v19) = *(_DWORD *)v74;
    float v75 = *(float *)(v74 + 4);
    int v76 = *(_DWORD *)(v74 + 8);
    uint64_t v77 = v13 + 16 * v67;
    LODWORD(v15) = *(_DWORD *)v77;
    float v78 = *(float *)(v77 + 4);
    *(float *)&long long v21 = -*(float *)&v20;
    long long v79 = v21;
    *((float *)&v79 + 1) = v72;
    int v80 = *(_DWORD *)(v77 + 8);
    DWORD2(v79) = v73;
    *(_OWORD *)(v8 + 16 * v70) = v79;
    if (v64 >= v10) {
      goto LABEL_94;
    }
    float v81 = -v72;
    *((float *)&v21 + 1) = v81;
    DWORD2(v21) = v73;
    *(_OWORD *)(v8 + 16 * v64) = v21;
    uint64_t v82 = (v65 - v69);
    if (v82 >= v10) {
      goto LABEL_95;
    }
    *((float *)&v20 + 1) = v81;
    DWORD2(v20) = v73;
    *(_OWORD *)(v8 + 16 * v82) = v20;
    if (v70 >= v98) {
      goto LABEL_96;
    }
    long long v83 = v19;
    *((float *)&v83 + 1) = -v75;
    DWORD2(v83) = v76;
    *(_OWORD *)(v11 + 16 * v70) = v83;
    if (v64 >= v98) {
      goto LABEL_97;
    }
    *(float *)&long long v19 = -*(float *)&v19;
    long long v84 = v19;
    *((float *)&v84 + 1) = -v75;
    DWORD2(v84) = v76;
    *(_OWORD *)(v11 + 16 * v64) = v84;
    if (v82 >= v98) {
      goto LABEL_98;
    }
    *((float *)&v19 + 1) = v75;
    DWORD2(v19) = v76;
    *(_OWORD *)(v11 + 16 * v82) = v19;
    if (v70 >= v23) {
      goto LABEL_99;
    }
    *(float *)&long long v18 = -*(float *)&v15;
    long long v85 = v18;
    *((float *)&v85 + 1) = v78;
    DWORD2(v85) = v80;
    *(_OWORD *)(v13 + 16 * v70) = v85;
    if (v64 >= v23) {
      goto LABEL_100;
    }
    float v86 = -v78;
    *((float *)&v18 + 1) = v86;
    DWORD2(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v80;
    *(_OWORD *)(v13 + 16 * v64) = v18;
    if (v82 >= v23) {
      goto LABEL_101;
    }
    *((float *)&v15 + 1) = v86;
    DWORD2(v15) = v80;
    *(_OWORD *)(v13 + 16 * v82) = v15;
    if (v24)
    {
      if (result <= v67) {
        goto LABEL_102;
      }
      if (result <= v70) {
        goto LABEL_103;
      }
      *(_DWORD *)(v27 + 4 * v70) = *(_DWORD *)(v27 + 4 * v67);
      if (result <= v64) {
        goto LABEL_104;
      }
      *(_DWORD *)(v27 + 4 * v64) = *(_DWORD *)(v27 + 4 * v67);
      if (result <= v82) {
        goto LABEL_105;
      }
      *(_DWORD *)(v27 + 4 * v82) = *(_DWORD *)(v27 + 4 * v67);
    }
    --v64;
    --v65;
    --v66;
    --v67;
  }
  while (!__CFADD__(v68++, 1));
  return result;
}

uint64_t re::anonymous namespace'::translateCornerVertexPositions(uint64_t result, unsigned int a2, float32x4_t a3, float a4, float a5, float32x4_t a6)
{
  if (a2)
  {
    unint64_t v6 = 0;
    a6.f32[0] = a3.f32[0] * 0.5;
    float32x4_t v7 = a6;
    v7.f32[1] = a4 * 0.5;
    float32x4_t v8 = v7;
    a3.f32[0] = -(float)(a3.f32[0] * 0.5);
    float32x4_t v9 = a3;
    v9.f32[1] = a4 * 0.5;
    float32x4_t v10 = v9;
    a3.f32[1] = -(float)(a4 * 0.5);
    float32x4_t v11 = a3;
    a6.i32[1] = a3.i32[1];
    float32x4_t v12 = a6;
    do
    {
      if (v6 >= *(unsigned int *)(result + 8))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_19:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_20:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v8.f32[2] = a5 * 0.5;
      *(float32x4_t *)(*(void *)result + 16 * v6) = vaddq_f32(v8, *(float32x4_t *)(*(void *)result + 16 * v6));
      if (a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_14;
      }
      v10.f32[2] = a5 * 0.5;
      *(float32x4_t *)(*(void *)result + 16 * a2 + 16 * v6) = vaddq_f32(v10, *(float32x4_t *)(*(void *)result+ 16 * a2+ 16 * v6));
      if (2 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_15;
      }
      uint64_t v13 = *(void *)result + 32 * a2;
      v11.f32[2] = a5 * 0.5;
      *(float32x4_t *)(v13 + 16 * v6) = vaddq_f32(v11, *(float32x4_t *)(v13 + 16 * v6));
      if (3 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_16;
      }
      uint64_t v14 = *(void *)result + 48 * a2;
      v12.f32[2] = a5 * 0.5;
      *(float32x4_t *)(v14 + 16 * v6) = vaddq_f32(v12, *(float32x4_t *)(v14 + 16 * v6));
      if (4 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_17;
      }
      uint64_t v15 = *(void *)result + 64 * a2;
      a6.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v15 + 16 * v6) = vaddq_f32(a6, *(float32x4_t *)(v15 + 16 * v6));
      if (5 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_18;
      }
      uint64_t v16 = *(void *)result + 80 * a2;
      a3.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v16 + 16 * v6) = vaddq_f32(a3, *(float32x4_t *)(v16 + 16 * v6));
      if (6 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_19;
      }
      uint64_t v17 = *(void *)result + 96 * a2;
      v9.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v17 + 16 * v6) = vaddq_f32(v9, *(float32x4_t *)(v17 + 16 * v6));
      if (7 * a2 + v6 >= *(unsigned int *)(result + 8)) {
        goto LABEL_20;
      }
      uint64_t v18 = *(void *)result + 112 * a2;
      v7.f32[2] = -(float)(a5 * 0.5);
      *(float32x4_t *)(v18 + 16 * v6) = vaddq_f32(v7, *(float32x4_t *)(v18 + 16 * v6));
      ++v6;
    }
    while (a2 != v6);
  }
  return result;
}

uint64_t re::anonymous namespace'::computeGeometryToStitchTwoRows(uint64_t result, uint64_t a2, unsigned int a3, void *a4, int a5, void *a6, int a7, _DWORD *a8)
{
  if (a3 >= 2)
  {
    float32x4_t v10 = (re::GeomMesh *)result;
    if (a2)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
      {
        uint64_t v13 = re::internal::GeomTypedAttribute<float>::operator[](a2, 0);
        uint64_t v14 = a2;
        unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      }
      else
      {
        uint64_t v14 = a2;
        uint64_t v13 = 0;
        unsigned int v15 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
      unsigned int v15 = -1;
    }
    uint64_t v16 = re::GeomMesh::modifyVertexPositions(v10);
    unsigned int v45 = v17;
    unsigned int v20 = v19;
    unsigned int v22 = v21;
    unsigned int v23 = 0;
    float v24 = 1.0 / (float)a3;
    int v25 = *((_DWORD *)a4 + 2);
    uint64_t v26 = a8;
    unsigned int v27 = *a8;
    uint64_t v28 = a3 - 1;
    uint64_t v29 = (uint64_t)a6;
    uint64_t v30 = v14;
    while (1)
    {
      unint64_t v31 = v23;
      unint64_t v32 = a4[1];
      if (v32 <= v23) {
        goto LABEL_33;
      }
      unsigned int v33 = *(_DWORD *)(*a4 + 4 * v23) + a5;
      if (v33 >= v45) {
        goto LABEL_34;
      }
      unint64_t v34 = a6[1];
      if (v34 <= v31) {
        goto LABEL_35;
      }
      uint64_t v35 = (*(_DWORD *)(*a6 + 4 * v31) + a7);
      if (v35 >= v45) {
        goto LABEL_36;
      }
      if (v35 >= v20) {
        goto LABEL_37;
      }
      float32x4_t v36 = *(float32x4_t *)(v16 + 16 * v33);
      float32x4_t v37 = *(float32x4_t *)(v16 + 16 * v35);
      long long v47 = *(_OWORD *)(v18 + 16 * v35);
      if (v35 >= v22) {
        goto LABEL_38;
      }
      uint64_t v38 = 0;
      long long v46 = *(_OWORD *)(result + 16 * v35);
      unsigned int v39 = v27;
      do
      {
        if (v39 >= v45)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_28:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_29:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_30:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v40);
          _os_crash();
          __break(1u);
LABEL_31:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_32:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_33:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v32);
          _os_crash();
          __break(1u);
LABEL_34:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_35:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v31, v34);
          _os_crash();
          __break(1u);
LABEL_36:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_37:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_38:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(float32x4_t *)(v16 + 16 * v39) = vaddq_f32(vmulq_n_f32(v37, v24 * (float)(v38 + 1)), vmulq_n_f32(v36, 1.0 - (float)(v24 * (float)(v38 + 1))));
        if (v39 >= v20) {
          goto LABEL_28;
        }
        *(_OWORD *)(v18 + 16 * v39) = v47;
        if (v39 >= v22) {
          goto LABEL_29;
        }
        *(_OWORD *)(result + 16 * v39) = v46;
        if (v30)
        {
          unint64_t v40 = a4[1];
          if (v40 <= v31) {
            goto LABEL_30;
          }
          unsigned int v41 = *(_DWORD *)(*a4 + 4 * v31) + a5;
          if (v15 <= v41) {
            goto LABEL_31;
          }
          if (v15 <= v39) {
            goto LABEL_32;
          }
          *(_DWORD *)(v13 + 4 * v39) = *(_DWORD *)(v13 + 4 * v41);
        }
        ++v38;
        v39 += v25;
      }
      while (v28 != v38);
      ++v27;
      unsigned int v23 = v31 + 1;
      if ((int)v31 + 1 > (v25 - 1))
      {
        *v26 += v28 * v25;
        return result;
      }
    }
  }
  return result;
}

re *re::anonymous namespace'::computeUVsToStitchTwoRows(re *result, re::GeomMesh *a2, void *a3, int a4, void *a5, int a6, unsigned int *a7)
{
  if (a2 >= 2)
  {
    unsigned int v12 = a2;
    uint64_t result = (re *)re::modifyVertexUVs(result, a2);
    unsigned int v14 = 0;
    float v15 = 1.0 / (float)v12;
    int v16 = *((_DWORD *)a3 + 2);
    unsigned int v17 = *a7;
    uint64_t v18 = v12 - 1;
    while (1)
    {
      unint64_t v19 = v14;
      unint64_t v20 = a3[1];
      if (v20 <= v14) {
        goto LABEL_14;
      }
      unsigned int v21 = *(_DWORD *)(*a3 + 4 * v14) + a4;
      if (v21 >= v13) {
        goto LABEL_15;
      }
      unint64_t v22 = a5[1];
      if (v22 <= v19) {
        goto LABEL_16;
      }
      unsigned int v23 = *(_DWORD *)(*a5 + 4 * v19) + a6;
      if (v23 >= v13) {
        goto LABEL_17;
      }
      uint64_t v24 = 0;
      float32x2_t v25 = *(float32x2_t *)((char *)result + 8 * v21);
      float32x2_t v26 = *(float32x2_t *)((char *)result + 8 * v23);
      unsigned int v27 = v17;
      do
      {
        if (v27 >= v13)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_14:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v20);
          _os_crash();
          __break(1u);
LABEL_15:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v19, v22);
          _os_crash();
          __break(1u);
LABEL_17:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        ++v24;
        *((float32x2_t *)result + v27) = vadd_f32(vmul_n_f32(v26, v15 * (float)v24), vmul_n_f32(v25, 1.0 - (float)(v15 * (float)v24)));
        v27 += v16;
      }
      while (v18 != v24);
      ++v17;
      unsigned int v14 = v19 + 1;
      if ((int)v19 + 1 > (v16 - 1))
      {
        *a7 += v18 * v16;
        return result;
      }
    }
  }
  return result;
}

unsigned int **re::anonymous namespace'::computeUVsForSides(re::GeomMesh &,re::anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,re::Slice<unsigned int>,re::Slice<unsigned int>)::$_0::operator()(unsigned int **result, float a2)
{
  unsigned int v2 = **result;
  if (v2)
  {
    unsigned int v3 = 0;
    int v4 = *result[1];
    do
    {
      if (v4 != -1)
      {
        unsigned int v5 = 0;
        unsigned int v6 = *result[3];
        do
        {
          float32x4_t v7 = (int *)result[2];
          if (v7[2] <= v6)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float *)&uint64_t v8 = *(float *)result[4] * (float)v5;
          *((float *)&v8 + 1) = a2;
          *(void *)(*(void *)v7 + 8 * v6) = v8;
          float32x4_t v9 = result[3];
          unsigned int v6 = *v9 + 1;
          *float32x4_t v9 = v6;
          ++v5;
          int v4 = *result[1];
        }
        while (v5 < v4 + 1);
        unsigned int v2 = **result;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

int **re::anonymous namespace'::computeUVsForSides(re::GeomMesh &,re::anonymous namespace'::InternalBoxRoundedCornersOptions const&,unsigned int,re::Slice<unsigned int>,re::Slice<unsigned int>)::$_1::operator()(int **result, unsigned int a2, float a3, float a4)
{
  if (a2)
  {
    float v4 = (float)(a4 - a3) / (float)((float)a2 + 1.0);
    int v5 = **result;
    for (unsigned int i = 1; i <= a2; ++i)
    {
      if (v5 != -1)
      {
        unsigned int v7 = 0;
        unsigned int v8 = *result[2];
        do
        {
          float32x4_t v9 = result[1];
          if (v9[2] <= v8)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float *)&uint64_t v10 = *(float *)result[3] * (float)v7;
          *((float *)&v10 + 1) = a3 + (float)((float)i * v4);
          *(void *)(*(void *)v9 + 8 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
          float32x4_t v11 = (unsigned int *)result[2];
          unsigned int v8 = *v11 + 1;
          *float32x4_t v11 = v8;
          ++v7;
          int v5 = **result;
        }
        while (v7 < v5 + 1);
      }
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::normalizeUVs(re::GeomMesh &,re::anonymous namespace'::InternalBoxRoundedCornersOptions const&)::$_0::operator()(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v4 = *(unsigned int *)(result + 8);
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      float32x2_t v6 = *(float32x2_t *)(*(void *)result + 8 * a2);
      if (a2 + 1 >= a3)
      {
        float32x2_t v9 = *(float32x2_t *)(*(void *)result + 8 * a2);
LABEL_9:
        float32x2_t v11 = vsub_f32(v9, v6);
        __asm { FMOV            V3.2S, #1.0 }
        float32x2_t v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v11), (int8x8_t)v11, _D3);
        while (v5 < *(unsigned int *)(result + 8))
        {
          *(float32x2_t *)(*(void *)result + 8 * v5) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(void *)result + 8 * v5), v6), v17);
          ++v5;
          if (!--v3) {
            return result;
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      else
      {
        unsigned int v7 = (float32x2_t *)(*(void *)result + 8 * a2 + 8);
        unsigned int v8 = ~a2 + a3;
        float32x2_t v9 = *(float32x2_t *)(*(void *)result + 8 * a2);
        while (~(unint64_t)a2 + v4 > v3 - 2)
        {
          float32x2_t v10 = *v7++;
          float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v10, v6), (int8x8_t)v6, (int8x8_t)v10);
          float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v10), (int8x8_t)v9, (int8x8_t)v10);
          if (!--v8) {
            goto LABEL_9;
          }
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

void re::computeConvexHull2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  collection_u = (void *)geom_create_collection_u();
  geom_convex_hull_2f();
  *(void *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  unint64_t v5 = (char *)geom_collection_data_u();
  uint64_t v6 = geom_collection_size_u();
  re::DynamicArray<float>::copy((void *)a3, 0, v5, v6);
  os_release(collection_u);
}

void *re::computeSignedAreaOf2DPolygon(void *result, uint64_t a2)
{
  unint64_t v2 = result[1];
  double v3 = 0.0;
  if (v2 >= 3)
  {
    uint64_t v4 = (v2 - 1);
    if (v2 >= v2 - 1) {
      unint64_t v5 = v2 - 1;
    }
    else {
      unint64_t v5 = result[1];
    }
    if (v5 >= v4 - 1) {
      unint64_t v5 = v4 - 1;
    }
    uint64_t v6 = -v4;
    unsigned int v7 = (float *)(*result + 8);
    uint64_t v8 = 1;
    while (v2 != v5)
    {
      if (v2 == v8) {
        goto LABEL_13;
      }
      float v9 = *(v7 - 2);
      float v10 = *(v7 - 1);
      float v12 = *v7;
      float v11 = v7[1];
      v7 += 2;
      *(float *)&double v3 = *(float *)&v3 + (float)((float)(v9 * v11) - (float)(v10 * v12));
      ++v8;
      if (v6 + v8 == 1) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, a2, v3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, result[1], v2);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v2);
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v2 = *(_DWORD *)(*((void *)this + 10) + 4 * a2);
  return (v2 >> 28) & 3 | (4 * (v2 & 0xFFFFFFF));
}

uint64_t re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(re::GeomConnectivityManifold *this, int a2, int a3)
{
  unint64_t v3 = (a3 + 4 * a2);
  if (*((void *)this + 13) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 15) + 4 * v3);
}

uint64_t re::GeomConnectivityManifold::faceVertexDualHalfEdge(re::GeomConnectivityManifold *this, int a2, int a3)
{
  unsigned int v4 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, a2, a3);
  if (*((void *)this + 8) <= (unint64_t)v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 10) + 4 * v4);
}

uint64_t re::GeomConnectivityManifold::halfEdgePreviousDual(re::GeomConnectivityManifold *a1, unsigned int a2, unsigned int *a3)
{
  if (*((void *)a1 + 3) <= (unint64_t)(a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(*((void *)a1 + 5) + 16 * (a2 & 0xFFFFFFF) + 12) == -1) {
    unsigned int v5 = 3;
  }
  else {
    unsigned int v5 = 4;
  }
  unsigned int v6 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(a1, a2 & 0xFFFFFFF, (v5 + ((a2 >> 28) & 3) - 1) % v5);
  *a3 = v6;
  if (*((void *)a1 + 8) <= (unint64_t)v6)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)a1 + 10) + 4 * v6);
}

uint64_t re::GeomConnectivityManifold::halfEdgeStartVertex(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 24) <= (a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(void *)(a1 + 40) + 16 * (a2 & 0xFFFFFFF) + 4 * ((a2 >> 28) & 3));
}

uint64_t re::GeomConnectivityManifold::halfEdgeEndVertex(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 24) <= (unint64_t)(a2 & 0xFFFFFFF))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v2 = ((a2 >> 28) & 3) + 1;
  uint64_t v3 = *(void *)(a1 + 40) + 16 * (a2 & 0xFFFFFFF);
  if (*(_DWORD *)(v3 + 12) == -1) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 4;
  }
  if (v2 < v4) {
    unsigned int v4 = 0;
  }
  return *(unsigned int *)(v3 + 4 * (v2 - v4));
}

uint64_t re::GeomConnectivityManifold::halfEdgeNextIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  unsigned int v3 = *(_DWORD *)(*((void *)this + 10) + 4 * a2);
  unint64_t v4 = v3 & 0xFFFFFFF;
  if (*((void *)this + 3) <= v4)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v5 = ((v3 >> 28) & 3) + 1;
  if (*(_DWORD *)(*((void *)this + 5) + 16 * v4 + 12) == -1) {
    unsigned int v6 = 3;
  }
  else {
    unsigned int v6 = 4;
  }
  if (v5 < v6) {
    unsigned int v6 = 0;
  }
  LODWORD(result) = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v4, v5 - v6);
  if (*((void *)this + 8) <= (unint64_t)result)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v8 = *(_DWORD *)(*((void *)this + 10) + 4 * result);
  if ((v8 & 0x40000000) != 0) {
    return result;
  }
  return re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v8 & 0xFFFFFFF, (v8 >> 28) & 3);
}

uint64_t re::GeomConnectivityManifold::halfEdgePreviousIndex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  unsigned int v3 = *(_DWORD *)(*((void *)this + 10) + 4 * a2);
  unint64_t v4 = v3 & 0xFFFFFFF;
  if (*((void *)this + 3) <= v4)
  {
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  if (*(_DWORD *)(*((void *)this + 5) + 16 * v4 + 12) == -1) {
    unsigned int v5 = 3;
  }
  else {
    unsigned int v5 = 4;
  }
  LODWORD(result) = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v4, (v5 + ((v3 >> 28) & 3) - 1) % v5);
  if (*((void *)this + 8) <= (unint64_t)result)
  {
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v7 = *(_DWORD *)(*((void *)this + 10) + 4 * result);
  if ((v7 & 0x40000000) != 0) {
    return result;
  }
  return re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v7 & 0xFFFFFFF, (v7 >> 28) & 3);
}

uint64_t re::GeomConnectivityManifold::halfEdgeDualIndex(re::GeomConnectivityManifold *this, uint64_t a2)
{
  if (*((void *)this + 8) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  unsigned int v2 = *(_DWORD *)(*((void *)this + 10) + 4 * a2);
  if ((v2 & 0x40000000) == 0)
  {
    unint64_t v3 = (v2 >> 28) & 3 | (4 * (v2 & 0xFFFFFFF));
    if (*((void *)this + 13) > v3) {
      return *(unsigned int *)(*((void *)this + 15) + 4 * v3);
    }
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a2;
}

uint64_t re::GeomConnectivityManifold::edgeVertices(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  if (*((void *)this + 28) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = *(unsigned int *)(*((void *)this + 30) + 4 * a2);
  if (*((void *)this + 8) <= v4) {
    goto LABEL_5;
  }
  unint64_t v6 = *(unsigned int *)(*((void *)this + 10) + 4 * v4);
  *a3 = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v6);
  uint64_t result = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v6);
  a3[1] = result;
  return result;
}

uint64_t re::GeomConnectivityManifold::fetchVertexOneRing(re::GeomConnectivityManifold *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  if (*((void *)a1 + 18) <= (unint64_t)a2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = *(unsigned int *)(*((void *)a1 + 20) + 4 * a2);
  if (*((void *)a1 + 8) <= v4) {
    goto LABEL_14;
  }
  unsigned int v6 = *(_DWORD *)(*((void *)a1 + 10) + 4 * v4);
  if ((v6 & 0x80000000) != 0)
  {
    if ((v6 & 0x40000000) != 0)
    {
      while (1)
      {
        LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)a1, v6);
        re::DynamicArray<int>::add((void *)a3, &v11);
        unsigned int v10 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v6, (unsigned int *)&v11);
        if ((v10 & 0x80000000) == 0) {
          break;
        }
        unsigned int v6 = v10;
        if ((v10 & 0x40000000) != 0)
        {
          LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)a1, v10);
          re::DynamicArray<int>::add((void *)a3, &v11);
          return *(unsigned int *)(a3 + 16);
        }
      }
    }
    else
    {
      unsigned int v8 = v6;
      do
      {
        if ((v8 & 0x80000000) == 0) {
          break;
        }
        unsigned int v9 = v8;
        LODWORD(v11) = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)a1, v8);
        re::DynamicArray<int>::add((void *)a3, &v11);
        unsigned int v8 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v9, (unsigned int *)&v11);
      }
      while (v6 != v8);
    }
  }
  return *(unsigned int *)(a3 + 16);
}

uint64_t re::GeomConnectivityManifold::fetchVertexIncidentEdges(re::GeomConnectivityManifold *a1, unsigned int a2, _anonymous_namespace_ *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  unint64_t v4 = a2;
  unint64_t v5 = *((void *)a1 + 18);
  if (v5 <= a2)
  {
LABEL_15:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v4;
    __int16 v20 = 2048;
    unint64_t v21 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v12 = *(_DWORD *)(*((void *)a1 + 20) + 4 * a2);
  unint64_t v5 = v12;
  unint64_t v4 = *((void *)a1 + 8);
  if (v4 <= v12)
  {
LABEL_16:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v5;
    __int16 v20 = 2048;
    unint64_t v21 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v5;
    __int16 v20 = 2048;
    unint64_t v21 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *((void *)a1 + 10);
  unint64_t v4 = *(unsigned int *)(v8 + 4 * v12);
  if ((v4 & 0x40000000) == 0)
  {
    unint64_t v5 = *(unsigned int *)(v8 + 4 * v12);
    while (1)
    {
      unint64_t v3 = v12;
      unint64_t v9 = *((void *)a1 + 23);
      if (v9 <= v12) {
        break;
      }
      re::DynamicArray<int>::add(this, (_DWORD *)(*((void *)a1 + 25) + 4 * v12));
      unint64_t v5 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v5, &v12);
      if (v4 == v5) {
        return *((unsigned int *)this + 4);
      }
    }
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v3;
    __int16 v20 = 2048;
    unint64_t v21 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    uint64_t v13 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    long long v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 797;
    __int16 v18 = 2048;
    unint64_t v19 = v5;
    __int16 v20 = 2048;
    unint64_t v21 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v3 = *((void *)a1 + 23);
  if (v3 <= v12) {
    goto LABEL_17;
  }
  re::DynamicArray<int>::add(this, (_DWORD *)(*((void *)a1 + 25) + 4 * v12));
  do
  {
    uint64_t v10 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v4, &v12);
    unint64_t v5 = v12;
    unint64_t v3 = *((void *)a1 + 23);
    if (v3 <= v12) {
      goto LABEL_14;
    }
    unint64_t v4 = v10;
    re::DynamicArray<int>::add(this, (_DWORD *)(*((void *)a1 + 25) + 4 * v12));
  }
  while ((v4 & 0x40000000) == 0);
  return *((unsigned int *)this + 4);
}

uint64_t re::GeomConnectivityManifold::fetchVertexIncidentFaces(re::GeomConnectivityManifold *a1, unsigned int a2, _anonymous_namespace_ *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  if (*((void *)a1 + 18) <= (unint64_t)a2)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = *(unsigned int *)(*((void *)a1 + 20) + 4 * a2);
  if (*((void *)a1 + 8) <= v4) {
    goto LABEL_10;
  }
  unsigned int v6 = *(_DWORD *)(*((void *)a1 + 10) + 4 * v4);
  if ((v6 & 0x40000000) != 0)
  {
    do
    {
      LODWORD(v9) = v6 & 0xFFFFFFF;
      re::DynamicArray<int>::add(this, &v9);
      unsigned int v6 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v6, (unsigned int *)&v9);
    }
    while ((v6 & 0x40000000) == 0);
  }
  else
  {
    unsigned int v7 = v6;
    do
    {
      LODWORD(v9) = v7 & 0xFFFFFFF;
      re::DynamicArray<int>::add(this, &v9);
      unsigned int v7 = re::GeomConnectivityManifold::halfEdgePreviousDual(a1, v7, (unsigned int *)&v9);
    }
    while (v6 != v7);
  }
  return *((unsigned int *)this + 4);
}

uint64_t re::GeomConnectivityManifold::faceIncidentEdges(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  if (*((void *)this + 3) <= (unint64_t)a2)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = 0;
  if (*(_DWORD *)(*((void *)this + 5) + 16 * a2 + 12) == -1) {
    uint64_t v7 = 3;
  }
  else {
    uint64_t v7 = 4;
  }
  do
  {
    unsigned int v8 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, a2, v6);
    if (*((void *)this + 23) <= (unint64_t)v8)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_9;
    }
    a3[v6++] = *(_DWORD *)(*((void *)this + 25) + 4 * v8);
  }
  while (v7 != v6);
  return v7;
}

BOOL re::GeomConnectivityManifold::isBoundaryFace(re::GeomConnectivityManifold *this, unsigned int a2)
{
  if (*((void *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(*((void *)this + 5) + 16 * a2 + 12) == -1) {
    unsigned int v4 = 3;
  }
  else {
    unsigned int v4 = 4;
  }
  if ((re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, a2, 0) & 0x40000000) != 0) {
    return 1;
  }
  int v5 = 1;
  do
  {
    unsigned int v6 = v5;
    if (v4 == v5) {
      break;
    }
    int v7 = re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, a2, v5);
    int v5 = v6 + 1;
  }
  while ((v7 & 0x40000000) == 0);
  return v6 < v4;
}

BOOL re::GeomConnectivityManifold::isCollapseEdgeSafe(re::GeomConnectivityManifold *this, unsigned int a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  unint64_t v5 = a2;
  unint64_t v6 = *((void *)this + 28);
  if (v6 <= a2)
  {
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v5;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  unint64_t v6 = *(unsigned int *)(*((void *)this + 30) + 4 * a2);
  unint64_t v2 = *((void *)this + 8);
  if (v2 <= v6)
  {
LABEL_102:
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v6;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v5;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_104;
  }
  if ((*(_DWORD *)(*((void *)this + 10) + 4 * v6) & 0x80000000) == 0) {
    return 0;
  }
  re::GeomConnectivityManifold::edgeVertices(this, a2, v59);
  unint64_t v6 = *((void *)this + 28);
  if (v6 <= v5) {
    goto LABEL_103;
  }
  unint64_t v6 = *(unsigned int *)(*((void *)this + 30) + 4 * v5);
  unint64_t v5 = *((void *)this + 8);
  if (v5 <= v6)
  {
LABEL_104:
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v6;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    unint64_t v8 = v12;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v8;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    __int16 v53 = 1024;
    int v54 = 789;
    __int16 v55 = 2048;
    unint64_t v56 = v2;
    __int16 v57 = 2048;
    unint64_t v58 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_107;
  }
  unint64_t v2 = v59[0];
  unint64_t v8 = v59[1];
  uint64_t v4 = *(unsigned int *)(*((void *)this + 10) + 4 * v6);
  if ((v4 & 0x40000000) != 0)
  {
    unsigned int v9 = -1;
    int v10 = v4;
  }
  else
  {
    unsigned int v9 = v4 & 0xFFFFFFF;
    int v10 = re::GeomConnectivityManifold::faceVertexDualHalfEdge(this, v4 & 0xFFFFFFF, (v4 >> 28) & 3);
  }
  if (re::GeomConnectivityManifold::isBoundaryVertex(this, v2))
  {
    char isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex(this, v8);
    if (v4 & 0x40000000) == 0 && (isBoundaryVertex) {
      return 0;
    }
  }
  unint64_t v12 = v10 & 0xFFFFFFF;
  unint64_t v3 = *((void *)this + 3);
  if (v3 <= v12) {
    goto LABEL_105;
  }
  uint64_t v13 = *((void *)this + 5);
  if (*(_DWORD *)(v13 + 16 * v12 + 12) != -1) {
    return 0;
  }
  uint64_t v16 = 0;
  *(_OWORD *)long long v59 = *(_OWORD *)(v13 + 16 * v12);
  while (1)
  {
    unsigned int v17 = v59[v16];
    BOOL v18 = v17 == v2 || v17 == v8;
    if (!v18) {
      break;
    }
    if (++v16 == 3)
    {
      unsigned int v17 = -1;
      break;
    }
  }
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = v9;
    if (v3 <= v9) {
      goto LABEL_110;
    }
    if (*(_DWORD *)(v13 + 16 * v9 + 12) != -1) {
      return 0;
    }
    uint64_t v19 = 0;
    *(_OWORD *)long long v59 = *(_OWORD *)(v13 + 16 * v9);
    while (1)
    {
      uint64_t v4 = v59[v19];
      if (v4 != v2 && v4 != v8) {
        break;
      }
      if (++v19 == 3)
      {
        uint64_t v4 = 0xFFFFFFFFLL;
        break;
      }
    }
    if (re::GeomConnectivityManifold::isCollapseEdgeSafe::$_0::operator()(this, v12) == 2
      || re::GeomConnectivityManifold::isCollapseEdgeSafe::$_0::operator()(this, v9) == 2)
    {
      return 0;
    }
  }
  *(void *)&void v51[2] = 0;
  *(void *)unsigned int v49 = 0;
  *(void *)&v49[8] = 0;
  unint64_t v21 = *(unsigned int *)this;
  unint64_t v22 = *((void *)this + 37);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *((void *)this + 37) = v21;
  *(void *)long long v59 = 0;
  re::DynamicOverflowArray<unsigned long long,3ul>::resize((re::GeomConnectivityManifold *)((char *)this + 248), v23, v59);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *((void *)this + 37) & 0x3FLL;
    if (v25)
    {
      BOOL v18 = v25 == 63;
      uint64_t v26 = -1 << v25;
      if (!v18) {
        uint64_t v24 = ~v26;
      }
    }
    if (*((unsigned char *)this + 264)) {
      uint64_t v27 = (char *)this + 272;
    }
    else {
      uint64_t v27 = (char *)*((void *)this + 35);
    }
    *(void *)&v27[8 * *((void *)this + 32) - 8] &= v24;
  }
  int v28 = *((_DWORD *)this + 66);
  if (v28) {
    uint64_t v29 = (char *)this + 272;
  }
  else {
    uint64_t v29 = (char *)*((void *)this + 35);
  }
  uint64_t v30 = *((void *)this + 32);
  while (1)
  {
    unint64_t v31 = (char *)this + 272;
    if ((v28 & 1) == 0) {
      unint64_t v31 = (char *)*((void *)this + 35);
    }
    if (v29 == &v31[8 * v30]) {
      break;
    }
    *(void *)uint64_t v29 = 0;
    v29 += 8;
    int v28 = *((_DWORD *)this + 66);
  }
  *(void *)&v49[16] = 0;
  *(_DWORD *)&v49[24] = 1;
  unint64_t v3 = *((void *)this + 18);
  if (v3 <= v2) {
    goto LABEL_106;
  }
  unint64_t v2 = *(unsigned int *)(*((void *)this + 20) + 4 * v2);
  unint64_t v3 = *((void *)this + 8);
  if (v3 <= v2)
  {
LABEL_107:
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    __int16 v53 = 1024;
    int v54 = 789;
    __int16 v55 = 2048;
    unint64_t v56 = v2;
    __int16 v57 = 2048;
    unint64_t v58 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    __int16 v53 = 1024;
    int v54 = 789;
    __int16 v55 = 2048;
    unint64_t v56 = v8;
    __int16 v57 = 2048;
    unint64_t v58 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_109;
  }
  unsigned int v32 = *(_DWORD *)(*((void *)this + 10) + 4 * v2);
  if ((v32 & 0x40000000) != 0)
  {
    do
    {
      unsigned int v35 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v32);
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v35);
      unsigned int v36 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v32, v59);
      unsigned int v32 = v36;
    }
    while ((v36 & 0x40000000) == 0);
    unsigned int started = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v36);
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, started);
  }
  else
  {
    unsigned int v33 = v32;
    do
    {
      unint64_t v3 = v33;
      unsigned int v34 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v33);
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v34);
      unsigned int v33 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v3, v59);
    }
    while (v32 != v33);
  }
  unint64_t v2 = *((void *)this + 18);
  if (v2 <= v8) {
    goto LABEL_108;
  }
  unint64_t v8 = *(unsigned int *)(*((void *)this + 20) + 4 * v8);
  unint64_t v2 = *((void *)this + 8);
  if (v2 <= v8)
  {
LABEL_109:
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float v52 = 136315906;
    *(void *)&v52[4] = "operator[]";
    __int16 v53 = 1024;
    int v54 = 789;
    __int16 v55 = 2048;
    unint64_t v56 = v8;
    __int16 v57 = 2048;
    unint64_t v58 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_110:
    *(void *)float v52 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    *(_OWORD *)long long v59 = 0u;
    long long v60 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    *(_WORD *)&void v49[12] = 1024;
    *(_DWORD *)&v49[14] = 797;
    *(_WORD *)&v49[18] = 2048;
    *(void *)&v49[20] = v4;
    __int16 v50 = 2048;
    *(void *)uint64_t v51 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unsigned int v38 = *(_DWORD *)(*((void *)this + 10) + 4 * v8);
  *(_DWORD *)float v52 = -1;
  if ((v38 & 0x40000000) != 0)
  {
    while (1)
    {
      *(_DWORD *)float v52 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v38);
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52)) {
        re::DynamicArray<int>::add(v49, v52);
      }
      unsigned int v41 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v38, v59);
      if ((v41 & 0x40000000) != 0) {
        break;
      }
      unsigned int v38 = v41;
    }
    *(_DWORD *)float v52 = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, v41);
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52)) {
      re::DynamicArray<int>::add(v49, v52);
    }
  }
  else
  {
    unsigned int v39 = v38;
    do
    {
      unsigned int v40 = v39;
      *(_DWORD *)float v52 = re::GeomConnectivityManifold::halfEdgeEndVertex((uint64_t)this, v39);
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, *(unsigned int *)v52)) {
        re::DynamicArray<int>::add(v49, v52);
      }
      unsigned int v39 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v40, v59);
    }
    while (v38 != v39);
  }
  if (*(void *)&v49[16])
  {
    uint64_t v42 = 4 * *(void *)&v49[16] - 4;
    uint64_t v43 = *(int **)&v51[2];
    do
    {
      int v45 = *v43++;
      int v44 = v45;
      BOOL v14 = v45 == v17 || v44 == v4;
      BOOL v47 = !v14 || v42 == 0;
      v42 -= 4;
    }
    while (!v47);
  }
  else
  {
    BOOL v14 = 1;
  }
  if (*(void *)v49) {
    BOOL v48 = *(void *)&v51[2] == 0;
  }
  else {
    BOOL v48 = 1;
  }
  if (!v48) {
    (*(void (**)(void))(**(void **)v49 + 40))();
  }
  return v14;
}

uint64_t re::GeomConnectivityManifold::isCollapseEdgeSafe(unsigned int)::$_0::operator()(void *a1, int a2)
{
  unint64_t v2 = (4 * a2);
  unint64_t v3 = a1[13];
  if (v3 <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = a1[15];
  unint64_t v5 = *(unsigned int *)(v4 + 4 * v2);
  unint64_t v6 = a1[8];
  if (v6 <= v5)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v7 = v2 | 1;
  if (v3 <= v7)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v8 = *(unsigned int *)(v4 + 4 * v7);
  if (v6 <= v8)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v9 = v2 | 2;
  if (v3 <= v9)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v10 = *(unsigned int *)(v4 + 4 * v9);
  if (v6 <= v10) {
    goto LABEL_13;
  }
  return ((*(_DWORD *)(a1[10] + 4 * v8) >> 30) & 1)
       + ((*(_DWORD *)(a1[10] + 4 * v5) >> 30) & 1)
       + ((*(_DWORD *)(a1[10] + 4 * v10) >> 30) & 1u);
}

uint64_t re::GeomConnectivityManifold::glueHalfEdges(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3 = a2;
  unint64_t v4 = *((void *)this + 8);
  if (v4 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_48;
  }
  if ((*(_DWORD *)(*((void *)this + 10) + 4 * a2) & 0x40000000) != 0)
  {
    unsigned int v9 = -1;
  }
  else
  {
    unsigned int v8 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, a2);
    if (*((void *)this + 13) <= (unint64_t)v8)
    {
LABEL_50:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_51;
    }
    unsigned int v9 = *(_DWORD *)(*((void *)this + 15) + 4 * v8);
    unint64_t v4 = *((void *)this + 8);
  }
  if (v4 <= a3) {
    goto LABEL_47;
  }
  if ((*(_DWORD *)(*((void *)this + 10) + 4 * a3) & 0x40000000) != 0)
  {
    if (v9 != -1) {
      goto LABEL_27;
    }
  }
  else
  {
    unsigned int v10 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, a3);
    if (*((void *)this + 13) <= (unint64_t)v10)
    {
LABEL_51:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_52;
    }
    unint64_t v11 = *(unsigned int *)(*((void *)this + 15) + 4 * v10);
    if (v9 != -1 && v11 != -1)
    {
      unsigned int v12 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v11);
      if (*((void *)this + 13) <= (unint64_t)v12)
      {
LABEL_56:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_57;
      }
      *(_DWORD *)(*((void *)this + 15) + 4 * v12) = v9;
      unsigned int v13 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v9);
      if (*((void *)this + 13) <= (unint64_t)v13)
      {
LABEL_57:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_58;
      }
      *(_DWORD *)(*((void *)this + 15) + 4 * v13) = v11;
      unint64_t v14 = *((void *)this + 23);
      if (v14 <= a3)
      {
LABEL_58:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_59;
      }
      if (v14 <= v3)
      {
LABEL_59:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v15 = *((void *)this + 25);
      unint64_t v16 = *(unsigned int *)(v15 + 4 * v3);
      unint64_t v17 = *((void *)this + 28);
      if (v17 <= v16)
      {
LABEL_60:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_61;
      }
      unint64_t v18 = *(unsigned int *)(v15 + 4 * a3);
      uint64_t v19 = *((void *)this + 30);
      *(_DWORD *)(v19 + 4 * v16) = a2;
      if (v17 <= v18)
      {
LABEL_61:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_62;
      }
      *(_DWORD *)(v19 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
      if (v14 <= v9)
      {
LABEL_62:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      *(_DWORD *)(v15 + 4 * v9) = v18;
      if (v14 <= v11)
      {
LABEL_63:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_64;
      }
      *(_DWORD *)(v15 + 4 * v11) = v18;
LABEL_32:
      char v26 = 1;
      goto LABEL_33;
    }
    if (v9 != -1)
    {
LABEL_27:
      unsigned int v27 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v9);
      if (*((void *)this + 13) <= (unint64_t)v27)
      {
LABEL_52:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_53;
      }
      *(_DWORD *)(*((void *)this + 15) + 4 * v27) = v9;
      if (*((void *)this + 23) <= v3)
      {
LABEL_53:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_54;
      }
      unint64_t v28 = *(unsigned int *)(*((void *)this + 25) + 4 * v3);
      if (*((void *)this + 28) <= v28)
      {
LABEL_54:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_55;
      }
      *(_DWORD *)(*((void *)this + 30) + 4 * v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
      if (*((void *)this + 8) <= (unint64_t)v9)
      {
LABEL_55:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_56;
      }
      *(_DWORD *)(*((void *)this + 10) + 4 * v9) |= 0x40000000u;
      goto LABEL_32;
    }
    if (v11 != -1)
    {
      unsigned int v32 = re::GeomConnectivityManifold::e2eIndexFromHalfEdgeIndex(this, v11);
      if (*((void *)this + 13) <= (unint64_t)v32)
      {
LABEL_68:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_69;
      }
      *(_DWORD *)(*((void *)this + 15) + 4 * v32) = v11;
      if (*((void *)this + 23) <= (unint64_t)a3)
      {
LABEL_69:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_70;
      }
      unint64_t v33 = *(unsigned int *)(*((void *)this + 25) + 4 * a3);
      if (*((void *)this + 28) <= v33)
      {
LABEL_70:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(*((void *)this + 30) + 4 * v33) = v11;
      if (*((void *)this + 8) <= v11) {
        goto LABEL_71;
      }
      char v26 = 0;
      *(_DWORD *)(*((void *)this + 10) + 4 * v11) |= 0x40000000u;
      goto LABEL_33;
    }
  }
  unint64_t v20 = *((void *)this + 23);
  if (v20 <= v3)
  {
LABEL_64:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v21 = *((void *)this + 25);
  unint64_t v22 = *(unsigned int *)(v21 + 4 * v3);
  unint64_t v23 = *((void *)this + 28);
  if (v23 <= v22)
  {
LABEL_65:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v24 = *((void *)this + 30);
  *(_DWORD *)(v24 + 4 * v22) = a2;
  if (v20 <= a3)
  {
LABEL_66:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  unint64_t v25 = *(unsigned int *)(v21 + 4 * a3);
  if (v23 <= v25)
  {
LABEL_67:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  char v26 = 0;
  *(_DWORD *)(v24 + 4 * v25) = a2;
LABEL_33:
  if (*((void *)this + 8) <= (unint64_t)a3)
  {
LABEL_48:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_49;
  }
  uint64_t result = re::GeomConnectivityManifold::halfEdgeStartVertex((uint64_t)this, *(unsigned int *)(*((void *)this + 10) + 4 * a3));
  if (*((void *)this + 18) <= (unint64_t)result)
  {
LABEL_49:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v30 = *((void *)this + 20);
  char v31 = v26 ^ 1;
  if (*(_DWORD *)(v30 + 4 * result) != a3) {
    char v31 = 1;
  }
  if ((v31 & 1) == 0) {
    *(_DWORD *)(v30 + 4 * result) = v9;
  }
  return result;
}

double re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = a2 & 0xFFFFFFF;
  if (v2 != **(_DWORD **)a1 && v2 != **(_DWORD **)(a1 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (*(void *)(v3 + 24) <= (unint64_t)v2)
    {
      memset(v11, 0, sizeof(v11));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v4 = *(void *)(v3 + 40) + 16 * v2;
    v11[0] = *(_OWORD *)v4;
    unsigned int v5 = (a2 >> 28) & 3;
    if (HIDWORD(v11[0]) == -1) {
      unsigned int v6 = 3;
    }
    else {
      unsigned int v6 = 4;
    }
    if (v5 < v6) {
      unsigned int v6 = 0;
    }
    BOOL v7 = HIDWORD(v11[0]) == -1;
    *((_DWORD *)v11 + v5 - v6) = **(_DWORD **)(a1 + 32);
    int v8 = DWORD2(v11[0]);
    int v9 = HIDWORD(v11[0]);
    if (v7) {
      int v9 = -1;
    }
    double result = *(double *)v11;
    *(void *)uint64_t v4 = *(void *)&v11[0];
    *(_DWORD *)(v4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
    *(_DWORD *)(v4 + 12) = v9;
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::collapseEdgeWithoutSafetyCheck(re::GeomConnectivityManifold *this, unsigned int a2, unsigned int *a3)
{
  char isBoundaryVertex = &v48;
  uint64_t v53 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  unint64_t v8 = *((void *)this + 28);
  if (v8 <= a2)
  {
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    unint64_t v12 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v11 = *((void *)this + 30);
  unint64_t v12 = *(unsigned int *)(v11 + 4 * a2);
  unsigned int Index = re::GeomConnectivityManifold::halfEdgeNextIndex(this, *(_DWORD *)(v11 + 4 * a2));
  unsigned int v13 = re::GeomConnectivityManifold::halfEdgePreviousIndex(this, v12);
  unint64_t v3 = *((void *)this + 8);
  if (v3 <= v12)
  {
LABEL_62:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    unint64_t v15 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v12;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 797;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v5;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v3;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  unsigned int v33 = v13;
  unint64_t v32 = v7;
  unsigned int v14 = *(_DWORD *)(*((void *)this + 10) + 4 * v12);
  unint64_t v5 = v14 & 0xFFFFFFF;
  unint64_t v15 = (v14 >> 28) & 3;
  if ((v14 & 0x40000000) != 0)
  {
    unint64_t v7 = 0;
    int v16 = -1;
    uint64_t v4 = 0xFFFFFFFFLL;
    unsigned int v30 = -1;
  }
  else
  {
    uint64_t v4 = re::GeomConnectivityManifold::faceVertexDualHalfEdgeIndex(this, v14 & 0xFFFFFFF, (v14 >> 28) & 3);
    unsigned int v30 = re::GeomConnectivityManifold::halfEdgeNextIndex(this, v4);
    int v16 = re::GeomConnectivityManifold::halfEdgePreviousIndex(this, v4);
    unint64_t v3 = v4;
    unint64_t v7 = *((void *)this + 8);
    if (v7 <= v4)
    {
LABEL_74:
      *(void *)unsigned int v41 = 0;
      isBoundaryVertex[3] = 0u;
      isBoundaryVertex[4] = 0u;
      isBoundaryVertex[1] = 0u;
      isBoundaryVertex[2] = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v3;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_75;
    }
    unint64_t v7 = *(unsigned int *)(*((void *)this + 10) + 4 * v4);
  }
  unint64_t v3 = *((void *)this + 3);
  if (v3 <= v5) {
    goto LABEL_63;
  }
  long long v48 = *(_OWORD *)(*((void *)this + 5) + 16 * v5);
  unint64_t v3 = *(unsigned int *)((unint64_t)&v48 | (4 * v15));
  unsigned int v17 = v15 + 1;
  if (HIDWORD(v48) == -1) {
    unsigned int v18 = 3;
  }
  else {
    unsigned int v18 = 4;
  }
  if (v17 < v18) {
    unsigned int v18 = 0;
  }
  unint64_t v15 = *((void *)this + 18);
  if (v15 <= v3) {
    goto LABEL_64;
  }
  unsigned int v29 = v16;
  char v31 = a3;
  unint64_t v15 = *((unsigned int *)&v48 + v17 - v18);
  int v19 = *(_DWORD *)(*((void *)this + 20) + 4 * v3);
  char isBoundaryVertex = (long long *)re::GeomConnectivityManifold::isBoundaryVertex(this, v3);
  int v20 = re::GeomConnectivityManifold::isBoundaryVertex(this, v15);
  int v28 = v7;
  if ((v14 & 0x40000000) == 0)
  {
    if ((isBoundaryVertex & v20) == 1)
    {
      unint64_t v7 = *((void *)this + 18);
      if (v7 <= v3)
      {
LABEL_81:
        *(void *)unsigned int v41 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(void *)&v40[20] = v3;
        *(_WORD *)&v40[28] = 2048;
        *(void *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_82;
      }
      uint64_t v21 = *((void *)this + 20);
      if (*(_DWORD *)(v21 + 4 * v3) != v30) {
        goto LABEL_38;
      }
      if (v7 <= v15)
      {
LABEL_82:
        *(void *)unsigned int v41 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(void *)&v40[20] = v15;
        *(_WORD *)&v40[28] = 2048;
        *(void *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_83;
      }
      int v19 = *(_DWORD *)(v21 + 4 * v15);
      if (v19 != Index) {
        goto LABEL_38;
      }
      unint64_t v7 = v33;
      char isBoundaryVertex = (long long *)*((void *)this + 8);
      if ((unint64_t)isBoundaryVertex <= v33)
      {
LABEL_84:
        *(void *)unsigned int v41 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(void *)&v40[20] = v7;
        *(_WORD *)&v40[28] = 2048;
        *(void *)&v40[30] = isBoundaryVertex;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_85;
      }
      if ((*(_DWORD *)(*((void *)this + 10) + 4 * v33) & 0x40000000) == 0)
      {
LABEL_36:
        unint64_t v23 = this;
        uint64_t v24 = v33;
        goto LABEL_37;
      }
    }
    else
    {
      if (!isBoundaryVertex)
      {
        if (v20)
        {
          unint64_t v7 = Index;
          char isBoundaryVertex = (long long *)*((void *)this + 8);
          if ((unint64_t)isBoundaryVertex <= Index)
          {
LABEL_85:
            *(void *)unsigned int v41 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v40 = 136315906;
            *(void *)&v40[4] = "operator[]";
            *(_WORD *)&v40[12] = 1024;
            *(_DWORD *)&v40[14] = 789;
            *(_WORD *)&v40[18] = 2048;
            *(void *)&v40[20] = v7;
            *(_WORD *)&v40[28] = 2048;
            *(void *)&v40[30] = isBoundaryVertex;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_86:
            *(void *)unsigned int v41 = 0;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v48 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unsigned int v40 = 136315906;
            *(void *)&v40[4] = "operator[]";
            *(_WORD *)&v40[12] = 1024;
            *(_DWORD *)&v40[14] = 789;
            *(_WORD *)&v40[18] = 2048;
            *(void *)&v40[20] = v15;
            *(_WORD *)&v40[28] = 2048;
            *(void *)&v40[30] = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if ((*(_DWORD *)(*((void *)this + 10) + 4 * Index) & 0x40000000) == 0)
          {
            unint64_t v7 = *((void *)this + 18);
            if (v7 <= v15) {
              goto LABEL_86;
            }
            int v19 = *(_DWORD *)(*((void *)this + 20) + 4 * v15);
            goto LABEL_38;
          }
        }
        goto LABEL_36;
      }
      unint64_t v7 = *((void *)this + 18);
      if (v7 <= v3)
      {
LABEL_83:
        *(void *)unsigned int v41 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v48 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unsigned int v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        *(_WORD *)&v40[12] = 1024;
        *(_DWORD *)&v40[14] = 789;
        *(_WORD *)&v40[18] = 2048;
        *(void *)&v40[20] = v3;
        *(_WORD *)&v40[28] = 2048;
        *(void *)&v40[30] = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_84;
      }
      if (*(_DWORD *)(*((void *)this + 20) + 4 * v3) != v30) {
        goto LABEL_38;
      }
    }
    unint64_t v23 = this;
    uint64_t v24 = v29;
LABEL_37:
    int v19 = re::GeomConnectivityManifold::halfEdgeDualIndex(v23, v24);
LABEL_38:
    unint64_t v7 = v4;
    char isBoundaryVertex = (long long *)*((void *)this + 8);
    if ((unint64_t)isBoundaryVertex <= v4)
    {
LABEL_76:
      *(void *)unsigned int v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_77;
    }
    int v22 = *(_DWORD *)(*((void *)this + 10) + 4 * v4) & 0xFFFFFFF;
    goto LABEL_40;
  }
  unint64_t v7 = *((void *)this + 18);
  if (v7 <= v15)
  {
LABEL_75:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v15;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
  int v19 = *(_DWORD *)(*((void *)this + 20) + 4 * v15);
  if (v19 == Index) {
    int v19 = re::GeomConnectivityManifold::halfEdgeDualIndex(this, v33);
  }
  int v22 = -1;
LABEL_40:
  int v37 = v3;
  int v38 = v15;
  int v35 = v22;
  int v36 = v14 & 0xFFFFFFF;
  *(void *)unsigned int v40 = &v36;
  *(void *)&v40[8] = &v35;
  *(void *)&v40[16] = this;
  *(void *)&unsigned char v40[24] = &v38;
  *(void *)&v40[32] = &v37;
  unint64_t v7 = *((void *)this + 18);
  if (v7 <= v15)
  {
LABEL_65:
    uint64_t v39 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v41 = 136315906;
    *(void *)&unsigned int v41[4] = "operator[]";
    __int16 v42 = 1024;
    int v43 = 789;
    __int16 v44 = 2048;
    unint64_t v45 = v15;
    __int16 v46 = 2048;
    BOOL v47 = (_OWORD *)v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  unint64_t v7 = *(unsigned int *)(*((void *)this + 20) + 4 * v15);
  char isBoundaryVertex = (long long *)*((void *)this + 8);
  if ((unint64_t)isBoundaryVertex <= v7)
  {
LABEL_66:
    uint64_t v39 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    unint64_t v12 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v41 = 136315906;
    *(void *)&unsigned int v41[4] = "operator[]";
    __int16 v42 = 1024;
    int v43 = 789;
    __int16 v44 = 2048;
    unint64_t v45 = v7;
    __int16 v46 = 2048;
    BOOL v47 = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    unint64_t v15 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v12;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  unsigned int v25 = *(_DWORD *)(*((void *)this + 10) + 4 * v7);
  if ((v25 & 0x40000000) != 0)
  {
    do
    {
      re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()((uint64_t)v40, v25);
      unsigned int v25 = re::GeomConnectivityManifold::halfEdgePreviousDual(this, v25, (unsigned int *)&v48);
    }
    while ((v25 & 0x40000000) == 0);
  }
  else
  {
    LODWORD(isBoundaryVertex) = v25;
    do
    {
      re::GeomConnectivityManifold::replaceVertexInIncidentFaces(unsigned int,unsigned int,unsigned int,unsigned int,unsigned int)::$_0::operator()((uint64_t)v40, isBoundaryVertex);
      char isBoundaryVertex = (long long *)re::GeomConnectivityManifold::halfEdgePreviousDual(this, isBoundaryVertex, (unsigned int *)&v48);
    }
    while (v25 != isBoundaryVertex);
  }
  unint64_t v7 = *((void *)this + 8);
  if (v7 <= v12) {
    goto LABEL_67;
  }
  *(_DWORD *)(*((void *)this + 10) + 4 * v12) &= ~0x80000000;
  unint64_t v7 = Index;
  char isBoundaryVertex = (long long *)*((void *)this + 8);
  if ((unint64_t)isBoundaryVertex <= Index)
  {
LABEL_68:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  *(_DWORD *)(*((void *)this + 10) + 4 * Index) &= ~0x80000000;
  unint64_t v7 = v33;
  char isBoundaryVertex = (long long *)*((void *)this + 8);
  if ((unint64_t)isBoundaryVertex <= v33)
  {
LABEL_69:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  *(_DWORD *)(*((void *)this + 10) + 4 * v33) &= ~0x80000000;
  uint64_t result = re::GeomConnectivityManifold::glueHalfEdges(this, Index, v33);
  unint64_t v7 = (4 * v5);
  unint64_t v5 = *((void *)this + 13);
  if (v5 <= v7)
  {
LABEL_70:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v7;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v15;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  *(_DWORD *)(*((void *)this + 15) + 4 * v7) = v12;
  if ((v14 & 0x40000000) == 0)
  {
    unint64_t v7 = v4;
    unint64_t v5 = *((void *)this + 8);
    if (v5 <= v4)
    {
LABEL_77:
      *(void *)unsigned int v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_78;
    }
    *(_DWORD *)(*((void *)this + 10) + 4 * v4) &= ~0x80000000;
    unint64_t v7 = v30;
    unint64_t v5 = *((void *)this + 8);
    if (v5 <= v30)
    {
LABEL_78:
      *(void *)unsigned int v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_79;
    }
    *(_DWORD *)(*((void *)this + 10) + 4 * v30) &= ~0x80000000;
    unint64_t v7 = v29;
    unint64_t v5 = *((void *)this + 8);
    if (v5 <= v29)
    {
LABEL_79:
      *(void *)unsigned int v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_80;
    }
    *(_DWORD *)(*((void *)this + 10) + 4 * v29) &= ~0x80000000;
    uint64_t result = re::GeomConnectivityManifold::glueHalfEdges(this, v30, v29);
    unint64_t v7 = 4 * (v28 & 0xFFFFFFFu);
    unint64_t v5 = *((void *)this + 13);
    if (v5 <= v7)
    {
LABEL_80:
      *(void *)unsigned int v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)unsigned int v40 = 136315906;
      *(void *)&v40[4] = "operator[]";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 789;
      *(_WORD *)&v40[18] = 2048;
      *(void *)&v40[20] = v7;
      *(_WORD *)&v40[28] = 2048;
      *(void *)&v40[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_81;
    }
    *(_DWORD *)(*((void *)this + 15) + 4 * v7) = v4;
  }
  unint64_t v7 = *((void *)this + 18);
  if (v7 <= v15) {
    goto LABEL_71;
  }
  uint64_t v27 = *((void *)this + 20);
  *(_DWORD *)(v27 + 4 * v15) = v12;
  unint64_t v15 = *((void *)this + 28);
  uint64_t v4 = v32;
  if (v15 <= v32)
  {
LABEL_72:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v4;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  *(_DWORD *)(*((void *)this + 30) + 4 * v32) = v12;
  *char v31 = v3;
  if (v7 <= v3)
  {
LABEL_73:
    *(void *)unsigned int v41 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v40 = 136315906;
    *(void *)&v40[4] = "operator[]";
    *(_WORD *)&v40[12] = 1024;
    *(_DWORD *)&v40[14] = 789;
    *(_WORD *)&v40[18] = 2048;
    *(void *)&v40[20] = v3;
    *(_WORD *)&v40[28] = 2048;
    *(void *)&v40[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_74;
  }
  *(_DWORD *)(v27 + 4 * v3) = v19;
  return result;
}

re::GeomAttribute *re::addVertexUVs(re *this, re::GeomMesh *a2)
{
  uint64_t result = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!result)
  {
    return re::GeomMesh::addAttribute((uint64_t)this, "vertexUV", 1, 6);
  }
  return result;
}

uint64_t re::accessVertexUVs(re *this, const re::GeomMesh *a2)
{
  uint64_t v2 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  uint64_t v3 = re::internal::GeomTypedAttribute<double>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return v3;
}

uint64_t re::modifyVertexUVs(re *this, re::GeomMesh *a2)
{
  uint64_t v2 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexUV");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 16))(v2)) {
    return 0;
  }
  uint64_t v3 = re::internal::GeomTypedAttribute<double>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return v3;
}

uint64_t re::buildExtrudedText(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  v11[0] = 0;
  v11[1] = 0;
  int v13 = 0;
  unint64_t v12 = 0;
  uint64_t v17 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v16 = 0;
  uint64_t v5 = DWORD2(v15);
  if (DWORD2(v15))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 64;
    do
    {
      unint64_t v8 = *((void *)&v15 + 1);
      if (*((void *)&v15 + 1) <= v6)
      {
        *(void *)int v22 = 0;
        memset(v20, 0, 64);
        long long v19 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v29[0] = 136315906;
        *(void *)&v29[1] = "operator[]";
        LOWORD(v29[3]) = 1024;
        *(_DWORD *)((char *)&v29[3] + 2) = 789;
        HIWORD(v29[4]) = 2048;
        *(void *)&_OWORD v29[5] = v6;
        LOWORD(v29[7]) = 2048;
        *(void *)((char *)&v29[7] + 2) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_12:
        uint64_t v18 = 0;
        long long v30 = 0u;
        long long v31 = 0u;
        memset(v29, 0, sizeof(v29));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v22 = 136315906;
        *(void *)&v22[4] = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        char v26 = v3;
        __int16 v27 = 2048;
        unint64_t v28 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v8 = v12;
      uint64_t v3 = (re::GeomMesh *)*(unsigned int *)(v17 + v7);
      if (v12 <= (unint64_t)v3) {
        goto LABEL_12;
      }
      int v9 = (float32x4_t *)(v17 + v7 - 64);
      uint64_t v3 = (re::GeomMesh *)(v14 + 736 * v3);
      *(void *)&long long v19 = 0;
      DWORD2(v19) = 0;
      bzero(v20, 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)v20);
      uint64_t v21 = 0;
      re::GeomMesh::copy(v3, (re::GeomMesh *)&v19);
      re::transform((re::GeomMesh *)&v19, v9);
      re::DynamicArray<re::GeomMesh>::add(a1, (re::GeomMesh *)&v19);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v19);
      ++v6;
      v7 += 80;
    }
    while (v5 != v6);
  }
  if (*((void *)&v14 + 1))
  {
    if (v17) {
      (*(void (**)(void))(**((void **)&v14 + 1) + 40))();
    }
    uint64_t v17 = 0;
    long long v15 = 0uLL;
    *((void *)&v14 + 1) = 0;
    ++v16;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v11);
}

void re::anonymous namespace'::buildExtrudedText(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
  }
  else
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    uint64_t v5 = &unk_26E70DB48;
    __int16 v6 = 0;
    *(_OWORD *)cf = 0u;
    memset(v8, 0, sizeof(v8));
    uint64_t v9 = 0x7FFFFFFFLL;
    uint64_t v5 = &unk_26E70DB48;
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

uint64_t re::buildExtrudedText(re *this, re::GeomMesh *a2, const re::GeomBuildExtrudedTextOptions *a3, re::GeomBuildExtrudedTextSupport *a4)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  v22[0] = 0;
  v22[1] = 0;
  int v24 = 0;
  __int16 v23 = 0;
  uint64_t v28 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  int v27 = 0;
  uint64_t v8 = *((void *)&v26 + 1);
  uint64_t v9 = DWORD2(v26);
  if (DWORD2(v26))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = 0;
    uint64_t v4 = v23;
    int v13 = (unsigned int *)(v28 + 64);
    while (*((void *)&v26 + 1) != v10)
    {
      unint64_t v5 = *v13;
      if ((unint64_t)v23 <= v5) {
        goto LABEL_30;
      }
      uint64_t v14 = v25 + 736 * v5;
      uint64_t v11 = (re::GeomMesh *)(*(_DWORD *)(v14 + 16) + v11);
      uint64_t v12 = (v12 + *(_DWORD *)(v14 + 40));
      ++v10;
      v13 += 20;
      if (DWORD2(v26) == v10) {
        goto LABEL_8;
      }
    }
    v52[0] = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v36 = 136315906;
    *(void *)&unsigned int v36[4] = "operator[]";
    __int16 v37 = 1024;
    *(_DWORD *)int v38 = 789;
    *(_WORD *)&v38[4] = 2048;
    *(void *)&v38[6] = v8;
    *(_WORD *)&v38[14] = 2048;
    *(void *)&v38[16] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    v52[0] = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v36 = 136315906;
    *(void *)&unsigned int v36[4] = "operator[]";
    __int16 v37 = 1024;
    *(_DWORD *)int v38 = 789;
    *(_WORD *)&v38[4] = 2048;
    *(void *)&v38[6] = v5;
    *(_WORD *)&v38[14] = 2048;
    *(void *)&v38[16] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    *(void *)unint64_t v45 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v52[0]) = 136315906;
    *(void *)((char *)v52 + 4) = "operator[]";
    WORD2(v52[1]) = 1024;
    *(_DWORD *)((char *)&v52[1] + 6) = 789;
    WORD1(v52[2]) = 2048;
    *(void *)((char *)&v52[2] + 4) = v6;
    WORD2(v52[3]) = 2048;
    *(void *)((char *)&v52[3] + 6) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    uint64_t v29 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    memset(v52, 0, sizeof(v52));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    __int16 v46 = 1024;
    int v47 = 789;
    __int16 v48 = 2048;
    long long v49 = v4;
    __int16 v50 = 2048;
    long long v51 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v12 = 0;
  uint64_t v11 = 0;
LABEL_8:
  bzero(v36, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v36[8]);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v40, "vertexPosition", 1, 7);
  if (v41)
  {
    uint64_t v4 = v42;
    uint64_t v15 = 8 * v41;
    do
    {
      uint64_t v16 = *(void *)v4;
      uint64_t v4 = (re::GeomMesh *)((char *)v4 + 8);
      (*(void (**)(uint64_t, re::GeomMesh *))(*(void *)v16 + 80))(v16, v11);
      v15 -= 8;
    }
    while (v15);
  }
  if (*(void *)&v38[10] < (unint64_t)v12) {
    re::DynamicArray<re::BlendNode>::setCapacity(&v38[2], v12);
  }
  if (v43)
  {
    uint64_t v17 = v44;
    uint64_t v4 = (re::GeomMesh *)(8 * v43);
    do
    {
      uint64_t v18 = *v17++;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 80))(v18, v12);
      uint64_t v4 = (re::GeomMesh *)((char *)v4 - 8);
    }
    while (v4);
  }
  if (v9)
  {
    unint64_t v6 = 0;
    uint64_t v19 = 64;
    do
    {
      uint64_t v11 = (re::GeomMesh *)*((void *)&v26 + 1);
      if (*((void *)&v26 + 1) <= v6) {
        goto LABEL_31;
      }
      uint64_t v11 = v23;
      uint64_t v4 = (re::GeomMesh *)*(unsigned int *)(v28 + v19);
      if (v23 <= v4) {
        goto LABEL_32;
      }
      int v20 = (float32x4_t *)(v28 + v19 - 64);
      uint64_t v4 = (re::GeomMesh *)(v25 + 736 * v4);
      *(void *)&long long v30 = 0;
      DWORD2(v30) = 0;
      bzero(&v31, 0x2C8uLL);
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v31);
      uint64_t v35 = 0;
      re::GeomMesh::copy(v4, (re::GeomMesh *)&v30);
      re::transform((re::GeomMesh *)&v30, v20);
      re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)v36, (const re::GeomMesh *)&v30);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v30);
      ++v6;
      v19 += 80;
    }
    while (v9 != v6);
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v30, 0);
  re::GeomMesh::operator=((uint64_t)&v30, &v36[8]);
  re::GeomMesh::setName((re *)&v30, *(const char **)v36);
  re::GeomMesh::freeName((re *)v36);
  re::GeomMesh::freeName((re *)v36);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v40);
  if (*(void *)&v38[2] && v39) {
    (*(void (**)(void))(**(void **)&v38[2] + 40))();
  }
  re::GeomMesh::operator=(this, (re::GeomMesh *)&v30);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v30);
  if (*((void *)&v25 + 1))
  {
    if (v28) {
      (*(void (**)(void))(**((void **)&v25 + 1) + 40))();
    }
    uint64_t v28 = 0;
    long long v26 = 0uLL;
    *((void *)&v25 + 1) = 0;
    ++v27;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v22);
}

uint64_t re::buildExtrudedText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  uint64_t v12 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  re::DynamicArray<re::GeomMesh>::operator=(a1, (uint64_t)v7);
  re::DynamicArray<re::GeomMesh>::operator=(a2, (uint64_t)&v9 + 8);
  if (*((void *)&v9 + 1))
  {
    if (v12) {
      (*(void (**)(void))(**((void **)&v9 + 1) + 40))();
    }
    uint64_t v12 = 0;
    long long v10 = 0uLL;
    *((void *)&v9 + 1) = 0;
    ++v11;
  }
  return re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v7);
}

uint64_t re::DynamicArray<re::GeomMesh>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::anonymous namespace'::computeFrameSizeHelper(const char *a1, const char *a2, char a3, float a4, float a5)
{
  CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 0x8000100u);
  if (!v9) {
    return 0;
  }
  CFStringRef v10 = v9;
  CTFontRef v11 = CTFontCreateWithName(v9, 1.0, 0);
  if (v11)
  {
    CTFontRef v12 = v11;
    if (AttributeString)
    {
      uint64_t v15 = AttributeString;
      float v16 = 12.0;
      if (a4 > 0.0) {
        float v16 = a4;
      }
      float v20 = v16;
      float32x2_t v18 = vmul_n_f32(v17, v20);
      CFRelease(v15);
    }
    else
    {
      float32x2_t v18 = 0;
    }
    CFRelease(v12);
  }
  else
  {
    float32x2_t v18 = 0;
  }
  CFRelease(v10);
  return (uint64_t)v18;
}

double re::GeomBuildExtrudedTextOptions::getFontMetrics(re::GeomBuildExtrudedTextOptions *this, const char *a2, float a3)
{
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)this, 0x8000100u);
  if (!v4) {
    return 0.0;
  }
  CFStringRef v5 = v4;
  uint64_t v6 = CTFontCreateWithName(v4, 1.0, 0);
  if (v6)
  {
    uint64_t v7 = v6;
    CGFloat Ascent = CTFontGetAscent(v6);
    CGFloat CapHeight = CTFontGetCapHeight(v7);
    CGFloat XHeight = CTFontGetXHeight(v7);
    CGFloat Descent = CTFontGetDescent(v7);
    v9.f64[0] = XHeight;
    v9.f64[1] = Descent;
    v10.f64[0] = Ascent;
    v10.f64[1] = CapHeight;
    float32x4_t v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
    float v12 = 12.0;
    if (a3 > 0.0) {
      float v12 = a3;
    }
    *(void *)&double v17 = vmulq_n_f32(v11, v12).u64[0];
    CFRelease(v7);
  }
  else
  {
    double v17 = 0.0;
  }
  CFRelease(v5);
  return v17;
}

uint64_t re::anonymous namespace'::buildScene(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  uint64_t v6 = &v156;
  v7.i64[0] = 0x7F0000007FLL;
  v7.i64[1] = 0x7F0000007FLL;
  float32x4_t v165 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  float32x4_t v166 = v7;
  uint64_t v164 = 0;
  unint64_t v162 = 0;
  uint64_t v160 = 0;
  unint64_t v161 = 0;
  int v163 = 0;
  unsigned int v158 = 0;
  long long v156 = 0u;
  long long v157 = 0u;
  uint64_t v159 = 0x7FFFFFFFLL;
  float v8 = *(float *)(a2 + 88);
  float v9 = *(float *)(a2 + 92);
  if (*(void *)(a2 + 40)) {
    float64x2_t v10 = *(const char **)(a2 + 48);
  }
  else {
    float64x2_t v10 = (const char *)(a2 + 41);
  }
  CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v10, 0x8000100u);
  CTFontRef v12 = CTFontCreateWithName(v11, 1.0, 0);
  CTFontRef v14 = v12;
  v15.i32[0] = 12.0;
  if (*(float *)(a2 + 64) > 0.0) {
    v15.i32[0] = *(_DWORD *)(a2 + 64);
  }
  int v16 = *(unsigned __int8 *)(a2 + 72);
  v155[1] = 1065353216;
  v155[0] = v16;
  v13.i32[0] = *(_DWORD *)(a2 + 99);
  int16x8_t v17 = (int16x8_t)vmovl_u8(v13);
  *(int8x8_t *)v17.i8 = vext_s8(*(int8x8_t *)v17.i8, *(int8x8_t *)v17.i8, 4uLL);
  v155[2] = vmovn_s16(v17).u32[0];
  if (!v11 || !v12)
  {
LABEL_62:
    if (!v11) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  int32x2_t run = v15;
  if (*(void *)(a2 + 8)) {
    float32x2_t v18 = *(const char **)(a2 + 16);
  }
  else {
    float32x2_t v18 = (const char *)(a2 + 9);
  }
  if (AttributeString)
  {
    CFAttributedStringRef v21 = AttributeString;
    if ((float)(v8 * v9) == 0.0) {
    else
    }
      float32x2_t v22 = vdiv_f32(*(float32x2_t *)(a2 + 88), (float32x2_t)vdup_lane_s32(run, 0));
    __int16 v23 = v175;
    v193.size.width = v22.f32[0];
    v193.size.height = v22.f32[1];
    v193.origin.x = 0.0;
    v193.origin.double y = 0.0;
    CGPathRef v24 = CGPathCreateWithRect(v193, 0);
    CFAttributedStringRef v116 = v21;
    if (v24)
    {
      long long v25 = v24;
      CFIndex Length = CFAttributedStringGetLength(v21);
      CTFramesetterRef v27 = CTFramesetterCreateWithAttributedString(v21);
      if (v27)
      {
        uint64_t v28 = v27;
        keys[0] = *(void **)MEMORY[0x263F03C70];
        values[0].i64[0] = *MEMORY[0x263EFFB38];
        CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        v188.location = 0;
        v188.length = Length;
        long long v30 = CTFramesetterCreateFrame(v28, v188, v25, v29);
        CFDictionaryRef v31 = v29;
        CFAttributedStringRef v21 = v116;
        CFRelease(v31);
        CFRelease(v28);
      }
      else
      {
        long long v30 = 0;
      }
      CFRelease(v25);
      __int16 v23 = v175;
    }
    else
    {
      long long v30 = 0;
    }
    unint64_t v32 = 0;
    v33.i64[0] = 0;
    LODWORD(v34) = 0;
    HIDWORD(v34) = run.i32[0];
    v33.i64[1] = *(unsigned int *)(a2 + 68);
    float32x4_t v35 = *(float32x4_t *)(a2 + 80);
    v35.i64[1] = 0x3F80000000000000;
    values[0] = (float32x4_t)run.u32[0];
    values[1] = (float32x4_t)v34;
    values[2] = v33;
    long long v183 = xmmword_23435FBB0;
    do
    {
      *(float32x4_t *)&keys[v32 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_23435FD50, COERCE_FLOAT(*(_OWORD *)&values[v32 / 0x10])), (float32x4_t)xmmword_23435FD60, *(float32x2_t *)values[v32 / 0x10].f32, 1), (float32x4_t)xmmword_23435FD80, values[v32 / 0x10], 2), v35, values[v32 / 0x10], 3);
      v32 += 16;
    }
    while (v32 != 64);
    if (!v30)
    {
LABEL_61:
      CFRelease(v21);
      goto LABEL_62;
    }
    unint64_t v114 = v14;
    float32x4_t v127 = v169;
    float32x4_t v128 = *(float32x4_t *)keys;
    float32x4_t v134 = (float32x4_t)v171;
    float32x4_t v135 = v170;
    int v36 = v30;
    theArradouble y = CTFrameGetLines(v30);
    origins = 0;
    unint64_t Count = CFArrayGetCount(theArray);
    v151[1] = 0;
    unint64_t v152 = 0;
    v151[0] = 0;
    int v153 = 0;
    BOOL v38 = Count == 0;
    unint64_t v121 = Count;
    CTFrameRef frame = v36;
    if (Count)
    {
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(v151, Count);
      uint64_t v39 = origins;
      unint64_t v40 = Count - v152;
      if (Count > v152)
      {
        uint64_t v41 = &origins[v152];
        do
        {
          v41->x = 0.0;
          v41->double y = 0.0;
          ++v41;
          --v40;
        }
        while (v40);
      }
      unint64_t v152 = Count;
      ++v153;
      v189.location = 0;
      v189.length = Count;
      CTFrameGetLineOrigins(v36, v189, v39);
      CFIndex v42 = 0;
      unsigned int v43 = 0;
      do
      {
        ValueAtunsigned int Index = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v42);
        CFArrayRef GlyphRuns = CTLineGetGlyphRuns(ValueAtIndex);
        uint64_t v46 = CFArrayGetCount(GlyphRuns);
        if (v46)
        {
          for (CFIndex i = 0; i != v46; ++i)
          {
            __int16 v48 = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
            v43 += CTRunGetGlyphCount(v48);
          }
        }
        ++v42;
        unint64_t Count = v121;
      }
      while (v42 != v121);
      double v49 = 0.0;
      if (*(unsigned char *)(a2 + 98))
      {
        CFIndex v50 = 0;
        __int16 v23 = (unsigned char *)v152;
        p_double y = &origins->y;
        float v52 = INFINITY;
        do
        {
          long long v53 = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v50);
          CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(v53, 0x40uLL);
          if (v23 == (unsigned char *)v50) {
            goto LABEL_156;
          }
          double v54 = *p_y;
          p_y += 2;
          float v55 = BoundsWithOptions.origin.y + v54;
          if (v52 > v55) {
            float v52 = v55;
          }
          ++v50;
        }
        while (v121 != v50);
        int v56 = *(unsigned __int8 *)(a2 + 98);
        __int16 v23 = v175;
        if (*(unsigned char *)(a2 + 98))
        {
          uint64_t v6 = &v156;
LABEL_43:
          float v57 = 0.0;
          if (v52 >= 0.0) {
            float v57 = v52;
          }
          float v58 = -v57;
          float v59 = v57 * -0.5;
          if (v56 == 1) {
            float v59 = v58;
          }
          double v49 = v59;
          goto LABEL_52;
        }
        BOOL v38 = 0;
      }
      else
      {
        BOOL v38 = 0;
        __int16 v23 = v175;
      }
      uint64_t v6 = &v156;
    }
    else
    {
      v190.location = 0;
      v190.length = 0;
      CTFrameGetLineOrigins(v36, v190, 0);
      unsigned int v43 = 0;
      int v56 = *(unsigned __int8 *)(a2 + 98);
      if (*(unsigned char *)(a2 + 98))
      {
        float v52 = INFINITY;
        goto LABEL_43;
      }
      double v49 = 0.0;
      BOOL v38 = 1;
    }
LABEL_52:
    unint64_t v123 = (_anonymous_namespace_ *)(a1 + 40);
    if (*(void *)(a1 + 48) < (unint64_t)v43) {
      re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v123, v43);
    }
    if (v161 < v43) {
      re::DynamicArray<re::AABB>::setCapacity(&v160, v43);
    }
    if (v38)
    {
LABEL_57:
      CFRelease(frame);
      if (v151[0] && origins) {
        (*(void (**)(void))(*(void *)v151[0] + 40))();
      }
      CTFontRef v14 = v114;
      CFAttributedStringRef v21 = v116;
      goto LABEL_61;
    }
    CFIndex v61 = 0;
    int32x4_t v124 = vdupq_n_s32(0x7F800000u);
    kedouble y = (void *)*MEMORY[0x263F039A0];
    uint64_t v126 = a3;
    unint64_t v133 = a1;
    while (1)
    {
      CFIndex v129 = v61;
      long long v62 = (const __CTLine *)CFArrayGetValueAtIndex(theArray, v61);
      CFArrayRef v119 = CTLineGetGlyphRuns(v62);
      uint64_t v118 = CFArrayGetCount(v119);
      if (v118) {
        break;
      }
LABEL_144:
      CFIndex v61 = v129 + 1;
      if (v129 + 1 == Count) {
        goto LABEL_57;
      }
    }
    CFIndex v63 = 0;
    while (1)
    {
      uint64_t v64 = (const __CTRun *)CFArrayGetValueAtIndex(v119, v63);
      CFDictionaryRef Attributes = CTRunGetAttributes(v64);
      Value = (const __CTFont *)CFDictionaryGetValue(Attributes, key);
      runa = v64;
      Glyphunint64_t Count = CTRunGetGlyphCount(v64);
      font = Value;
      CFStringRef v131 = CTFontCopyFullName(Value);
      CFHashCode v68 = CFHash(v131);
      unint64_t v69 = GlyphCount;
      CFHashCode v130 = v68;
      buffer = 0;
      v147[1] = 0;
      unint64_t v148 = 0;
      uint64_t v146 = 0;
      v147[0] = 0;
      int v149 = 0;
      v143[1] = 0;
      unint64_t v144 = 0;
      v143[0] = 0;
      int v145 = 0;
      unint64_t range = GlyphCount;
      CFIndex v120 = v63;
      if (GlyphCount)
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v143, GlyphCount);
        unint64_t v69 = GlyphCount;
        uint64_t v70 = v146;
        if (v144 < GlyphCount)
        {
          uint64_t v71 = 16 * GlyphCount - 16 * v144;
          if (v71 >= 1)
          {
            bzero(&v146[v144], 16 * (((unint64_t)v71 >> 4) - ((unint64_t)v71 > 0xF)) + 16);
            unint64_t v69 = GlyphCount;
          }
        }
        unint64_t v144 = v69;
        ++v145;
      }
      else
      {
        uint64_t v70 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v147, v69);
      v191.location = 0;
      v191.length = GlyphCount;
      CTRunGetGlyphs(runa, v191, buffer);
      v192.location = 0;
      v192.length = GlyphCount;
      CTRunGetPositions(runa, v192, v70);
      (**(void (***)(uint64_t, CFStringRef, CFHashCode))a3)(a3, v131, v130);
      if (GlyphCount) {
        break;
      }
LABEL_137:
      CFRelease(v131);
      if (v143[0] && v70) {
        (*(void (**)(void))(*(void *)v143[0] + 40))();
      }
      if (v147[0] && buffer) {
        (*(void (**)(void))(*(void *)v147[0] + 40))();
      }
      CFIndex v63 = v120 + 1;
      unint64_t Count = v121;
      if (v120 + 1 == v118) {
        goto LABEL_144;
      }
    }
    unint64_t v72 = 0;
    while (1)
    {
      uint64_t v73 = v148;
      if (v148 <= v72)
      {
        *(void *)uint64_t v185 = 0;
        long long v171 = 0u;
        v172[0] = 0u;
        float32x4_t v169 = 0u;
        float32x4_t v170 = 0u;
        *(_OWORD *)keys = 0u;
        uint64_t v6 = (long long *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v72;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_147:
        *(void *)uint64_t v185 = 0;
        v6[12] = 0u;
        v6[13] = 0u;
        v6[10] = 0u;
        v6[11] = 0u;
        v6[9] = 0u;
        uint64_t v6 = (long long *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v72;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        *(void *)uint64_t v175 = 0;
        v6[12] = 0u;
        v6[13] = 0u;
        v6[10] = 0u;
        v6[11] = 0u;
        v6[9] = 0u;
        uint64_t v6 = (long long *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v185 = 136315906;
        *(void *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 789;
        *(_WORD *)&v185[18] = 2048;
        *(void *)&v185[20] = v72;
        *(_WORD *)&v185[28] = 2048;
        *(void *)&v185[30] = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_149:
        *(void *)uint64_t v175 = 0;
        v6[12] = 0u;
        v6[13] = 0u;
        v6[10] = 0u;
        v6[11] = 0u;
        v6[9] = 0u;
        uint64_t v6 = (long long *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v185 = 136315906;
        *(void *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 789;
        *(_WORD *)&v185[18] = 2048;
        *(void *)&v185[20] = a1;
        *(_WORD *)&v185[28] = 2048;
        *(void *)&v185[30] = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        *(void *)uint64_t v175 = 0;
        v6[12] = 0u;
        v6[13] = 0u;
        v6[10] = 0u;
        v6[11] = 0u;
        v6[9] = 0u;
        unint64_t v113 = v95;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v185 = 136315906;
        *(void *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 789;
        *(_WORD *)&v185[18] = 2048;
        *(void *)&v185[20] = v113;
        *(_WORD *)&v185[28] = 2048;
        *(void *)&v185[30] = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_151:
        *(void *)uint64_t v185 = 0;
        long long v171 = 0u;
        v172[0] = 0u;
        float32x4_t v169 = 0u;
        float32x4_t v170 = 0u;
        *(_OWORD *)keys = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = v72;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = v73;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_152:
        uint64_t v167 = 0;
        long long v183 = 0u;
        long long v184 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        __int16 v176 = 1024;
        int v177 = 789;
        __int16 v178 = 2048;
        uint64_t v179 = 0;
        __int16 v180 = 2048;
        uint64_t v181 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_153:
        uint64_t v167 = 0;
        long long v183 = 0u;
        long long v184 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        __int16 v176 = 1024;
        int v177 = 789;
        __int16 v178 = 2048;
        uint64_t v179 = 1;
        __int16 v180 = 2048;
        uint64_t v181 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_154:
        uint64_t v167 = 0;
        long long v183 = 0u;
        long long v184 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        __int16 v176 = 1024;
        int v177 = 789;
        __int16 v178 = 2048;
        uint64_t v179 = 2;
        __int16 v180 = 2048;
        uint64_t v181 = 2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_155:
        uint64_t v167 = 0;
        long long v183 = 0u;
        long long v184 = 0u;
        memset(values, 0, sizeof(values));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v175 = 136315906;
        *(void *)&v175[4] = "operator[]";
        __int16 v176 = 1024;
        int v177 = 789;
        __int16 v178 = 2048;
        uint64_t v179 = 3;
        __int16 v180 = 2048;
        uint64_t v181 = 3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_156:
        *(void *)uint64_t v185 = 0;
        long long v171 = 0u;
        v172[0] = 0u;
        float32x4_t v169 = 0u;
        float32x4_t v170 = 0u;
        *(_OWORD *)keys = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        values[0].i32[0] = 136315906;
        *(uint64_t *)((char *)values[0].i64 + 4) = (uint64_t)"operator[]";
        values[0].i16[6] = 1024;
        *(__int32 *)((char *)&values[0].i32[3] + 2) = 789;
        values[1].i16[1] = 2048;
        *(uint64_t *)((char *)values[1].i64 + 4) = (uint64_t)v23;
        values[1].i16[6] = 2048;
        *(uint64_t *)((char *)&values[1].i64[1] + 6) = (uint64_t)v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      (*(void (**)(uint64_t, void))(*(void *)a3 + 8))(a3, buffer[v72]);
      uint64_t v73 = v148;
      if (v148 <= v72) {
        goto LABEL_147;
      }
      CGGlyph v139 = buffer[v72];
      CFTypeRef cf = v131;
      CFHashCode v141 = v130;
      unint64_t v74 = ((v130 << 6) + (v130 >> 2) - 0x61C8864680B583E9 + v139) ^ v130;
      unint64_t v142 = v74;
      if (v131) {
        CFRetain(v131);
      }
      if ((void)v156)
      {
        uint64_t v75 = *(unsigned int *)(*((void *)&v156 + 1) + 4 * (v74 % DWORD2(v157)));
        if (v75 != 0x7FFFFFFF)
        {
          uint64_t v76 = v157;
          {
            uint64_t v75 = *(_DWORD *)(v76 + 56 * v75 + 8) & 0x7FFFFFFF;
            if (v75 == 0x7FFFFFFF) {
              goto LABEL_90;
            }
          }
          unint64_t v95 = *(unsigned int *)(v76 + 56 * v75 + 48);
          float32x4_t v86 = v134;
          float32x4_t v85 = v135;
          a1 = v129;
          goto LABEL_116;
        }
      }
LABEL_90:
      uint64_t v73 = v148;
      if (v148 <= v72) {
        goto LABEL_151;
      }
      unint64_t runb = *(unsigned int *)(a1 + 16);
      CGGlyph v77 = buffer[v72];
      float v78 = (re::GeomMesh *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
      if (!v78)
      {
        re::GeomMesh::GeomMesh((re::GeomMesh *)keys, 0);
        v79.i64[0] = 0x7F0000007FLL;
        v79.i64[1] = 0x7F0000007FLL;
        float32x4_t v173 = (float32x4_t)v124;
        float32x4_t v174 = v79;
        re::internal::build3dGlyph((uint64_t)keys, font, v77, (uint64_t)v155);
        if (re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v172, "vertexUV"))
        {
          *(void *)&v185[32] = 0;
          memset(v185, 0, 28);
          re::DynamicArray<double>::resize((uint64_t)v185, 4uLL);
          unint64_t v80 = *(void *)&v185[16];
          if (!*(void *)&v185[16]) {
            goto LABEL_152;
          }
          **(void **)&v185[32] = "vertexUV";
          if (v80 == 1) {
            goto LABEL_153;
          }
          *(void *)(*(void *)&v185[32] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "vertexNormal";
          if (v80 <= 2) {
            goto LABEL_154;
          }
          *(void *)(*(void *)&v185[32] + 16) = "vertexTangent";
          if (v80 == 3) {
            goto LABEL_155;
          }
          *(void *)(*(void *)&v185[32] + 24) = "vertexBitangent";
          re::internal::buildMeshByConvertingFaceVaryingToVertexHelper((unint64_t)keys, (uint64_t)v185, 0, (unint64_t)keys);
          if (*(void *)v185 && *(void *)&v185[32]) {
            (*(void (**)(void))(**(void **)v185 + 40))();
          }
        }
        re::computeAABB((re *)keys, values);
        float32x4_t v173 = values[0];
        float32x4_t v174 = values[1];
        float v78 = (re::GeomMesh *)(*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 24))(a3, keys);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)keys);
        a1 = v133;
      }
      re::DynamicArray<re::GeomMesh>::add((_anonymous_namespace_ *)a1, v78);
      re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)&v160, (uint64_t)v78 + 736);
      unint64_t v81 = v142;
      if ((void)v156)
      {
        unint64_t v82 = v142 % DWORD2(v157);
        uint64_t v83 = *(unsigned int *)(*((void *)&v156 + 1) + 4 * v82);
        a1 = v129;
        if (v83 != 0x7FFFFFFF)
        {
          uint64_t v84 = v157;
          {
            uint64_t v83 = *(_DWORD *)(v84 + 56 * v83 + 8) & 0x7FFFFFFF;
            if (v83 == 0x7FFFFFFF) {
              goto LABEL_106;
            }
          }
          a3 = v126;
          float32x4_t v86 = v134;
          float32x4_t v85 = v135;
          unint64_t v95 = runb;
          goto LABEL_116;
        }
LABEL_106:
        float32x4_t v86 = v134;
        float32x4_t v85 = v135;
      }
      else
      {
        unint64_t v82 = 0;
        float32x4_t v86 = v134;
        float32x4_t v85 = v135;
        a1 = v129;
      }
      unsigned int v87 = v159;
      if (v159 == 0x7FFFFFFF)
      {
        unsigned int v87 = v158;
        unsigned int v88 = v158;
        if (v158 == DWORD2(v157))
        {
          float32x4_t v86 = v134;
          float32x4_t v85 = v135;
          unsigned int v88 = v158;
          unint64_t v82 = v81 % DWORD2(v157);
        }
        unsigned int v158 = v88 + 1;
        uint64_t v89 = v157;
        int v90 = *(_DWORD *)(v157 + 56 * v87 + 8);
      }
      else
      {
        uint64_t v89 = v157;
        int v90 = *(_DWORD *)(v157 + 56 * v159 + 8);
        LODWORD(v159) = v90 & 0x7FFFFFFF;
      }
      uint64_t v91 = v89 + 56 * v87;
      *(_DWORD *)(v91 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v90 | 0x80000000;
      uint64_t v92 = *((void *)&v156 + 1);
      *(_DWORD *)(v91 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*((void *)&v156 + 1) + 4 * v82) | 0x80000000;
      *(void *)uint64_t v91 = v81;
      *(_WORD *)(v91 + 16) = v139;
      CFTypeRef v93 = cf;
      CFHashCode v94 = v141;
      *(void *)(v91 + 24) = cf;
      *(void *)(v91 + 32) = v94;
      *(void *)(v91 + 40) = v81;
      if (v93)
      {
        CFRetain(v93);
        float32x4_t v86 = v134;
        float32x4_t v85 = v135;
      }
      unint64_t v95 = runb;
      *(_DWORD *)(v89 + 56 * v87 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = runb;
      *(_DWORD *)(v92 + 4 * v82) = v87;
      ++HIDWORD(v157);
      ++HIDWORD(v159);
      __int16 v23 = v175;
      a3 = v126;
LABEL_116:
      LODWORD(v184) = v95;
      uint64_t v73 = v144;
      uint64_t v6 = &v156;
      if (v144 <= v72) {
        goto LABEL_148;
      }
      uint64_t v73 = v152;
      if (v152 <= a1) {
        goto LABEL_149;
      }
      unint64_t v96 = 0;
      uint64_t v70 = v146;
      long long v97 = &v146[v72];
      *(CGFloat *)&long long v98 = v97->x;
      double y = v97->y;
      float32x4_t v100 = &origins[a1];
      *(float *)&long long v98 = *(double *)&v98 + v100->x;
      *(float *)&double y = v49 + y + v100->y;
      DWORD1(v9re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = LODWORD(y);
      DWORD2(v9re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      HIDWORD(v9re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1.0;
      *(_OWORD *)uint64_t v185 = xmmword_23435FD50;
      *(_OWORD *)&v185[16] = xmmword_23435FD60;
      *(_OWORD *)&v185[32] = xmmword_23435FD80;
      long long v186 = v98;
      do
      {
        *(float32x4_t *)&keys[v96 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v128, COERCE_FLOAT(*(_OWORD *)&v185[v96])), v127, *(float32x2_t *)&v185[v96], 1), v85, *(float32x4_t *)&v185[v96], 2), v86, *(float32x4_t *)&v185[v96], 3);
        v96 += 16;
      }
      while (v96 != 64);
      values[0] = *(float32x4_t *)keys;
      values[1] = v169;
      values[2] = v170;
      long long v183 = v171;
      uint64_t v73 = v162;
      if (v162 <= v95) {
        goto LABEL_150;
      }
      re::AABB::transform((float32x4_t *)(v164 + 32 * v95), values, (uint64_t)keys);
      float32x4_t v101 = v165;
      float32x4_t v102 = v166;
      v101.i32[3] = 0;
      float32x4_t v103 = *(float32x4_t *)keys;
      float32x4_t v104 = v169;
      v103.i32[3] = 0;
      v102.i32[3] = 0;
      v104.i32[3] = 0;
      float32x4_t v165 = vminnmq_f32(v101, v103);
      float32x4_t v166 = vmaxnmq_f32(v102, v104);
      a1 = v133;
      unint64_t v105 = *(void *)(v133 + 48);
      unint64_t v106 = *(void *)(v133 + 56);
      if (v106 >= v105)
      {
        unint64_t v107 = v106 + 1;
        if (v105 < v106 + 1)
        {
          if (*(void *)v123)
          {
            uint64_t v108 = 2 * v105;
            BOOL v109 = v105 == 0;
            unint64_t v110 = 8;
            if (!v109) {
              unint64_t v110 = v108;
            }
            if (v110 <= v107) {
              unint64_t v111 = v107;
            }
            else {
              unint64_t v111 = v110;
            }
            re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v123, v111);
          }
          else
          {
            a3 = v126;
            re::DynamicArray<re::RigSplineIKJoint>::setCapacity(v123, v107);
            ++*(_DWORD *)(v133 + 64);
          }
        }
        unint64_t v106 = *(void *)(v133 + 56);
      }
      uint64_t v112 = *(void *)(v133 + 72) + 80 * v106;
      *(float32x4_t *)(v112 + 16) = values[1];
      *(float32x4_t *)(v112 + 32) = values[2];
      *(_OWORD *)(v112 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v183;
      *(_OWORD *)(v112 + 64) = v184;
      *(float32x4_t *)uint64_t v112 = values[0];
      ++*(void *)(v133 + 56);
      ++*(_DWORD *)(v133 + 64);
      if (cf) {
        CFRelease(cf);
      }
      if (++v72 == range) {
        goto LABEL_137;
      }
    }
  }
LABEL_63:
  CFRelease(v11);
LABEL_64:
  if (v14) {
    CFRelease(v14);
  }
  (*(void (**)(uint64_t, float32x4_t *))(*(void *)a3 + 32))(a3, &v165);
  uint64_t result = v160;
  if (v160)
  {
    if (v164) {
      return (*(uint64_t (**)(void))(*(void *)v160 + 40))();
    }
  }
  return result;
}

CFAttributedStringRef re::anonymous namespace'::createAttributeString(void *a1, char a2, char a3, const char *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  char v14 = a2;
  settings.spec = kCTParagraphStyleSpecifierAlignment;
  settings.valueSize = 1;
  settings.value = &v14;
  char v13 = a3;
  int v18 = 6;
  uint64_t v19 = 1;
  CFAttributedStringRef v20 = &v13;
  CTParagraphStyleRef v6 = CTParagraphStyleCreate(&settings, 2uLL);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a4, 0x8000100u);
  float v9 = (void *)*MEMORY[0x263F03CA0];
  keys[0] = *(void **)MEMORY[0x263F039A0];
  keys[1] = v9;
  values[0] = a1;
  values[1] = v6;
  CFDictionaryRef v10 = CFDictionaryCreate(v7, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (v10)
  {
    CFAttributedStringRef v11 = CFAttributedStringCreate(0, v8, v10);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFAttributedStringRef v11 = 0;
  if (v8) {
LABEL_3:
  }
    CFRelease(v8);
LABEL_4:
  if (v6) {
    CFRelease(v6);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

float32x2_t re::anonymous namespace'::computeSuggestedFrameSize(re::_anonymous_namespace_ *this, const __CFAttributedString *a2, CGFloat a3)
{
  keys[1] = *(void **)MEMORY[0x263EF8340];
  CTFramesetterRef v4 = CTFramesetterCreateWithAttributedString(this);
  if (v4)
  {
    CFStringRef v5 = v4;
    keys[0] = *(void **)MEMORY[0x263F03C70];
    values = (void *)*MEMORY[0x263EFFB38];
    CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    v14.height = 1.79769313e308;
    v13.location = 0;
    v13.length = 0;
    v14.width = a3;
    CGSize v7 = CTFramesetterSuggestFrameSizeWithConstraints(v5, v13, v6, v14, &fitRange);
    CFRelease(v6);
    CFRelease(v5);
    float64x2_t v8 = (float64x2_t)v7;
  }
  else
  {
    float64x2_t v8 = *(float64x2_t *)MEMORY[0x263F001B0];
  }
  return vcvt_f32_f64(v8);
}

re::GeomMesh *re::DynamicArray<re::GeomMesh>::add(_anonymous_namespace_ *this, re::GeomMesh *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::GeomMesh>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 736 * v4;
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  bzero((void *)(v5 + 16), 0x2C8uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v5 + 16));
  *(void *)(v5 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t result = re::GeomMesh::copy(a2, (re::GeomMesh *)v5);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::HashTable<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey,unsigned int,re::Hash<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          float64x2_t v8 = *(const void **)(v6 + 24);
          if (v8)
          {
            CFRelease(v8);
            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 56;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

BOOL re::EqualTo<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>::operator()(unsigned __int16 *a1, unsigned __int16 *a2)
{
  BOOL result = 0;
  if (*((void *)a1 + 3) == *((void *)a2 + 3) && *a1 == *a2)
  {
    CFStringRef v2 = (const __CFString *)*((void *)a1 + 1);
    CFStringRef v3 = (const __CFString *)*((void *)a2 + 1);
    if (v2 == v3 || v2 && v3 && CFEqual(v2, v3)) {
      return 1;
    }
  }
  return result;
}

void re::HashTable<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey,unsigned int,re::Hash<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)long long v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = v6 + 24;
        do
        {
          if ((*(_DWORD *)(v14 - 16) & 0x80000000) != 0)
          {
            unint64_t v15 = *(void *)(v14 - 24);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 56 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 56 * v18;
            *(_WORD *)(v22 + 16) = *(_WORD *)(v14 - 8);
            __int16 v23 = *(const void **)v14;
            *(void *)(v22 + 24) = *(void *)v14;
            *(_OWORD *)(v22 + 32) = *(_OWORD *)(v14 + 8);
            if (v23)
            {
              CFRetain(v23);
              uint64_t v12 = *(void *)(a1 + 8);
            }
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(_DWORD *)(v14 + 24);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;
            unsigned int v10 = *(_DWORD *)&v25[32];
          }
          ++v11;
          v14 += 56;
        }
        while (v11 < v10);
      }
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::anonymous namespace'::GlyphCache::setFont(re::_anonymous_namespace_::GlyphCache *this, CFTypeRef cf, unint64_t a3)
{
  uint64_t v6 = *((unsigned __int16 *)this + 4);
  uint64_t v7 = (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9 + v6;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v8 = v7 ^ a3;
  long long v9 = (const void *)*((void *)this + 2);
  if (v9) {
    CFRelease(v9);
  }
  *((void *)this + 3) = a3;
  *((void *)this + 4) = v8;
  *((_WORD *)this + 4) = v6;
  *((void *)this + 2) = cf;
  if (cf)
  {
    CFRetain(cf);
    CFRelease(cf);
  }
}

uint64_t re::anonymous namespace'::GlyphCache::setGlyphIndex(uint64_t this, unsigned __int16 a2)
{
  *(_WORD *)(this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a2;
  *(void *)(this + 32) = ((*(void *)(this + 24) << 6) + a2 + (*(void *)(this + 24) >> 2) - 0x61C8864680B583E9) ^ *(void *)(this + 24);
  return this;
}

uint64_t re::anonymous namespace'::GlyphCache::cachedGlyph(re::_anonymous_namespace_::GlyphCache *this)
{
  if (!*((void *)this + 5)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*((void *)this + 6)
                       + 4 * (*((void *)this + 4) % (unint64_t)*((unsigned int *)this + 16)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 7);
  while (1)
  {
    uint64_t v3 = *((void *)this + 7);
    if (v4) {
      break;
    }
    uint64_t v2 = *(_DWORD *)(v3 + 816 * v2 + 8) & 0x7FFFFFFF;
    if (v2 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v3 + 816 * v2 + 48;
}

uint64_t re::anonymous namespace'::GlyphCache::storeGlyph(uint64_t a1, re::GeomMesh *a2)
{
  uint64_t v4 = a1 + 40;
  unint64_t v5 = *(void *)(a1 + 32);
  if (!*(void *)(a1 + 40))
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  unint64_t v6 = v5 % *(unsigned int *)(a1 + 64);
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 48) + 4 * v6);
  if (v7 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v10 = *(_DWORD *)(a1 + 76);
    if (v10 == 0x7FFFFFFF)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 72);
      unsigned int v11 = v10;
      if (v10 == *(_DWORD *)(a1 + 64))
      {
        LODWORD(v6) = v5 % *(unsigned int *)(a1 + 64);
        unsigned int v11 = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(a1 + 72) = v11 + 1;
      uint64_t v12 = *(void *)(a1 + 56);
      int v13 = *(_DWORD *)(v12 + 816 * v10 + 8);
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 56);
      int v13 = *(_DWORD *)(v12 + 816 * v10 + 8);
      *(_DWORD *)(a1 + 76) = v13 & 0x7FFFFFFF;
    }
    uint64_t v14 = 816 * v10;
    *(_DWORD *)(v12 + v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 56) + v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 56) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 48) + 4 * v6);
    *(void *)(*(void *)(a1 + 56) + v14) = v5;
    uint64_t v15 = *(void *)(a1 + 56) + v14;
    *(_WORD *)(v15 + 16) = *(_WORD *)(a1 + 8);
    unint64_t v16 = *(const void **)(a1 + 16);
    *(void *)(v15 + 24) = v16;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(a1 + 24);
    if (v16) {
      CFRetain(v16);
    }
    uint64_t v17 = *(void *)(a1 + 56) + 816 * v10;
    *(void *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
    v17 += 48;
    *(_DWORD *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    bzero((void *)(v17 + 16), 0x2C8uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v17 + 16));
    *(void *)(v17 + 72re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    re::GeomMesh::copy(a2, (re::GeomMesh *)v17);
    long long v18 = *((_OWORD *)a2 + 47);
    *(_OWORD *)(v17 + 736) = *((_OWORD *)a2 + 46);
    *(_OWORD *)(v17 + 752) = v18;
    *(_DWORD *)(*(void *)(a1 + 48) + 4 * v6) = v10;
    ++*(_DWORD *)(a1 + 68);
    ++*(_DWORD *)(a1 + 80);
    uint64_t v19 = *(void *)(a1 + 56) + 816 * v10;
    return v19 + 48;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  while (1)
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v9) {
      break;
    }
    uint64_t v7 = *(_DWORD *)(v8 + 816 * v7 + 8) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v19 = v8 + 816 * v7;
  return v19 + 48;
}

void re::HashTable<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v30, 0, 36);
      *(void *)&v30[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::internal::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::internal::FontNameAndGlyphIndexCacheKey>,true,false>::init((uint64_t)v30, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v30;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v30[8];
      *(_OWORD *)long long v30 = v5;
      *(void *)&v30[16] = v6;
      *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      long long v9 = *(_OWORD *)&v30[24];
      *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v30[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        uint64_t v10 = 0;
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = 816 * v8;
        do
        {
          uint64_t v14 = (uint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            uint64_t v15 = (uint64_t)(v14 + 6);
            unint64_t v16 = *v14;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v14 % v17;
            unsigned int v19 = *(_DWORD *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              unsigned int v19 = *(_DWORD *)(a1 + 32);
              unsigned int v20 = v19;
              if (v19 == v17)
              {
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                unsigned int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 816 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 816 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 816 * v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v22 | 0x80000000;
            uint64_t v23 = *(void *)(a1 + 16) + 816 * v19;
            *(_DWORD *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 816 * v19) = v16;
            uint64_t v24 = *(void *)(a1 + 16) + 816 * v19;
            *(_WORD *)(v24 + 16) = *((_WORD *)v14 + 8);
            uint64_t v25 = v6 + v10;
            long long v26 = *(const void **)(v6 + v10 + 24);
            *(void *)(v24 + 24) = v26;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)(v6 + v10 + 32);
            if (v26) {
              CFRetain(v26);
            }
            uint64_t v27 = *(void *)(a1 + 16) + 816 * v19;
            re::GeomMesh::GeomMesh(v27 + 48, v15);
            long long v28 = *(_OWORD *)(v25 + 800);
            *(_OWORD *)(v27 + 784) = *(_OWORD *)(v25 + 784);
            *(_OWORD *)(v27 + 800) = v28;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
          }
          v10 += 816;
        }
        while (v13 != v10);
      }
    }
  }
  else
  {
    if (a2) {
      signed int v29 = a2;
    }
    else {
      signed int v29 = 3;
    }
  }
}

uint64_t *re::HashTable<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey,re::GeomBuildExtrudedTextSupport::Glyph,re::Hash<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,re::EqualTo<re::anonymous namespace'::FontNameAndGlyphIndexCacheKey>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        uint64_t v7 = v6 + v4;
        int v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8 & 0x7FFFFFFF;
          long long v9 = *(const void **)(v7 + 24);
          if (v9)
          {
            CFRelease(v9);
            *(void *)(v7 + 24) = 0;
          }
          re::GeomMesh::~GeomMesh((re::GeomMesh *)(v6 + v4 + 48));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 816;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

float32x2_t *re::buildPlane(re *this, float32x2_t *a2)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  int v6 = a2->u16[1];
  uint64_t v7 = (re::GeomMesh *)a2->u16[0];
  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v83);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexPosition", 1, 7);
    if (a2[2].i8[4]) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexUV", 1, 6);
    }
    if (a2[2].i8[5])
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexNormal", 1, 7);
      if (a2[2].i8[4])
      {
        if (a2[2].i8[5])
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v86, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)this, &v83);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v86);
    BOOL result = (float32x2_t *)*((void *)&v83 + 1);
    if (*((void *)&v83 + 1) && *((void *)&v85 + 1)) {
      return (float32x2_t *)(*(uint64_t (**)(void))(**((void **)&v83 + 1) + 40))();
    }
  }
  else
  {
    BOOL v10 = a2->i16[2] != 0;
    float v11 = a2[2].f32[0];
    BOOL v12 = v11 > 0.0;
    int8x8_t v13 = vbsl_s8((int8x8_t)vcgtz_f32(a2[1]), (int8x8_t)a2[1], (int8x8_t)vneg_f32(a2[1]));
    float v14 = *(float *)&v13.i32[1];
    if (*(float *)&v13.i32[1] >= *(float *)v13.i32) {
      float v15 = *(float *)v13.i32;
    }
    else {
      float v15 = *(float *)&v13.i32[1];
    }
    float v16 = fabsf(v11);
    if ((float)(v16 + v16) > v15) {
      float v16 = v15 * 0.5;
    }
    float v78 = v16;
    float32x2_t v80 = (float32x2_t)v13;
    float v17 = v16 + v16;
    int v18 = v10 && v12;
    float v19 = 0.0;
    if (v10 && v12) {
      float v19 = v17;
    }
    BOOL result = (float32x2_t *)re::buildParametricPlane(this, v7, *(float *)v13.i32 - v19, *(float *)&v13.i32[1] - v19, v6);
    if (v18 == 1)
    {
      unint64_t v82 = a2;
      unsigned int v21 = *((_DWORD *)this + 4);
      unsigned int v22 = *((_DWORD *)this + 10);
      int v23 = a2->u16[0];
      int v24 = v23 + 1;
      int v25 = a2->u16[1];
      int v26 = a2->u16[2];
      int v27 = v26 - 1;
      int v76 = v23;
      int v77 = v25 + 1;
      int v28 = 2 * (v25 + 1 + v23 + 1) + 4 * (v26 - 1);
      int v29 = 2 * (v25 + v23) + 4 * v26;
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v83, (re *)((char *)this + 16));
      LODWORD(v83) = v28 + *((_DWORD *)this + 4);
      unsigned __int32 v88 = v83;
      if (v89)
      {
        long long v30 = v90;
        uint64_t v31 = 8 * v89;
        do
        {
          uint64_t v32 = *v30++;
          (*(void (**)(uint64_t, void))(*(void *)v32 + 72))(v32, v88);
          v31 -= 8;
        }
        while (v31);
      }
      unint64_t v33 = (v29 + *((_DWORD *)this + 10));
      re::DynamicArray<re::GeomCell4>::resize((void *)&v83 + 1, v33);
      unsigned int v91 = v33;
      if (v92)
      {
        unint64_t v34 = v93;
        uint64_t v35 = 8 * v92;
        do
        {
          uint64_t v36 = *v34++;
          (*(void (**)(uint64_t, void))(*(void *)v36 + 72))(v36, v91);
          v35 -= 8;
        }
        while (v35);
      }
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v22, v21, 0, 1, a2->u16[0], 1, v14 * 0.5);
      unsigned int v37 = a2->u16[0];
      unsigned int v38 = v37 + v22;
      unsigned int v39 = v27 + v24 + v21;
      v40.i64[0] = 0;
      v40.i64[1] = LODWORD(v78);
      float32x4_t v75 = v40;
      *(float32x4_t *)CFHashCode v94 = v40;
      float32x4_t v81 = (float32x4_t)LODWORD(v78);
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v38, v24 + v21, v37, v39, (float32x4_t *)v94, &v81);
      unsigned int v41 = v38 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v41, v39, a2->u16[0], v24, a2->u16[1], 0, v80.f32[0] * 0.5);
      unsigned int v42 = v41 + a2->u16[1];
      unsigned int v43 = v39 + v77 + v27;
      *(_OWORD *)CFHashCode v94 = LODWORD(v78);
      *(float *)&unsigned int v79 = -v78;
      v44.i64[0] = 0;
      v44.i64[1] = v79;
      float32x4_t v74 = v44;
      float32x4_t v81 = v44;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v42, v39 + v77, v21 - 1, v43, (float32x4_t *)v94, &v81);
      unsigned int v45 = v42 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v45, v43, v21 - 1, -1, a2->u16[0], 1, v14 * -0.5);
      unsigned int v46 = v45 + a2->u16[0];
      unsigned int v47 = v43 + v24;
      uint64_t v2 = v21 - v24;
      uint64_t v3 = v47 + v27;
      *(float32x4_t *)CFHashCode v94 = v74;
      float32x4_t v81 = (float32x4_t)v79;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v46, v47, v2, v47 + v27, (float32x4_t *)v94, &v81);
      unsigned int v48 = v46 + a2->u16[2];
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(&v83, v48, v3, v2, ~v76, a2->u16[1], 0, v80.f32[0] * -0.5);
      unsigned int v49 = v48 + a2->u16[1];
      *(_OWORD *)CFHashCode v94 = v79;
      float32x4_t v81 = v75;
      re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()((uint64_t)&v82, (int *)&v83, v49, v3 + v77, 0, v21, (float32x4_t *)v94, &v81);
      re::GeomMesh::operator=((uint64_t)this, &v83);
      re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v86);
      BOOL result = (float32x2_t *)*((void *)&v83 + 1);
      if (*((void *)&v83 + 1))
      {
        unsigned int v20 = (re::GeomMesh *)*((void *)&v85 + 1);
        if (*((void *)&v85 + 1)) {
          BOOL result = (float32x2_t *)(*(uint64_t (**)(void))(**((void **)&v83 + 1) + 40))();
        }
      }
    }
    if (a2[2].i8[4])
    {
      re::addVertexUVs(this, v20);
      uint64_t v3 = *((unsigned int *)this + 4);
      uint64_t v50 = re::GeomMesh::accessVertexPositions(this);
      LODWORD(v52) = v51;
      BOOL result = (float32x2_t *)re::modifyVertexUVs(this, v51);
      if (v3)
      {
        int8x8_t v54 = (int8x8_t)vceqz_f32(v80);
        float32x2_t v55 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32((float32x2_t)0xBF8000003F800000, v80), v54);
        float32x2_t v56 = (float32x2_t)vbic_s8((int8x8_t)0x3F0000003F000000, v54);
        uint64_t v52 = v52;
        uint64_t v2 = v53;
        float v57 = (__int32 *)(v50 + 8);
        uint64_t v58 = v52;
        uint64_t v59 = v53;
        while (v58)
        {
          if (!v59) {
            goto LABEL_69;
          }
          v60.i32[0] = *(v57 - 2);
          v60.i32[1] = *v57;
          *result++ = vmla_f32(v56, v55, v60);
          v57 += 4;
          --v59;
          --v58;
          if (!--v3) {
            goto LABEL_38;
          }
        }
        goto LABEL_68;
      }
    }
LABEL_38:
    if (a2[2].i8[5])
    {
      uint64_t v52 = *((unsigned int *)this + 4);
      if (v52)
      {
        uint64_t v62 = v61;
        uint64_t v63 = v61;
        while (v63)
        {
          *(_OWORD *)result->f32 = xmmword_23435FD60;
          result += 2;
          --v63;
          if (!--v52) {
            goto LABEL_43;
          }
        }
        v81.i64[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFHashCode v94 = 136315906;
        *(void *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        __int16 v95 = 2048;
        uint64_t v96 = v62;
        __int16 v97 = 2048;
        uint64_t v98 = v62;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_68:
        v81.i64[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFHashCode v94 = 136315906;
        *(void *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 601;
        __int16 v95 = 2048;
        uint64_t v96 = v52;
        __int16 v97 = 2048;
        uint64_t v98 = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        v81.i64[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFHashCode v94 = 136315906;
        *(void *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        __int16 v95 = 2048;
        uint64_t v96 = v2;
        __int16 v97 = 2048;
        uint64_t v98 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        v81.i64[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFHashCode v94 = 136315906;
        *(void *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        __int16 v95 = 2048;
        uint64_t v96 = v3;
        __int16 v97 = 2048;
        uint64_t v98 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        v81.i64[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)CFHashCode v94 = 136315906;
        *(void *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 609;
        __int16 v95 = 2048;
        uint64_t v96 = v52;
        __int16 v97 = 2048;
        uint64_t v98 = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
LABEL_43:
    if (a2[2].i8[5]) {
      BOOL v64 = a2[2].i8[4] == 0;
    }
    else {
      BOOL v64 = 1;
    }
    if (!v64)
    {
      int v65 = re::GeomMesh::addAttribute((uint64_t)this, "vertexTangent", 1, 7);
      int v66 = re::GeomMesh::addAttribute((uint64_t)this, "vertexBitangent", 1, 7);
      if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v65 + 16))(v65))
      {
        uint64_t v67 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v65, 0);
        uint64_t v3 = (*(unsigned int (**)(re::GeomAttribute *))(*(void *)v65 + 16))(v65);
      }
      else
      {
        uint64_t v3 = 0;
        uint64_t v67 = 0;
      }
      BOOL result = (float32x2_t *)(*(uint64_t (**)(re::GeomAttribute *))(*(void *)v66 + 16))(v66);
      if (result)
      {
        uint64_t v68 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v66, 0);
        BOOL result = (float32x2_t *)(*(uint64_t (**)(re::GeomAttribute *))(*(void *)v66 + 16))(v66);
        uint64_t v52 = result;
      }
      else
      {
        uint64_t v52 = 0;
        uint64_t v68 = 0;
      }
      uint64_t v69 = *((unsigned int *)this + 4);
      if (v69)
      {
        uint64_t v70 = 0;
        while (v3 != v70)
        {
          *(_OWORD *)(v67 + 16 * v70) = xmmword_23435FD50;
          if (v52 == v70) {
            goto LABEL_71;
          }
          *(_OWORD *)(v68 + 16 * v70++) = xmmword_234382760;
          if (v69 == v70) {
            goto LABEL_58;
          }
        }
        goto LABEL_70;
      }
    }
LABEL_58:
    switch(a2[3].i32[0])
    {
      case 0:
        long long v71 = xmmword_23435FD90;
        long long v72 = xmmword_23435FD50;
        goto LABEL_61;
      case 1:
        long long v71 = xmmword_23435FD60;
        long long v72 = xmmword_23435FD70;
LABEL_61:
        long long v83 = v71;
        long long v84 = v72;
        long long v73 = xmmword_23435FD80;
        goto LABEL_65;
      case 3:
        long long v83 = xmmword_23435FD50;
        long long v84 = xmmword_23435FD90;
        long long v73 = xmmword_234382760;
        goto LABEL_65;
      case 4:
        long long v83 = xmmword_23435FD50;
        long long v84 = xmmword_23435FD80;
        long long v73 = xmmword_23435FD90;
        goto LABEL_65;
      case 5:
        long long v83 = xmmword_23435FD50;
        long long v84 = xmmword_234382760;
        long long v73 = xmmword_23435FD60;
LABEL_65:
        long long v85 = v73;
        BOOL result = (float32x2_t *)re::transform(this, (float32x4_t *)&v83);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_0::operator()(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, float a8)
{
  uint64_t v15 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 6), "vertexPosition");
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  if (result)
  {
    uint64_t v18 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v15, 0);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    unsigned int v19 = result;
  }
  else
  {
    unsigned int v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v20 = a3 + a6 + 1;
  if (a7)
  {
    if (v20 != a3)
    {
      unsigned int v21 = (_OWORD *)(v18 + 16 * a3);
      if (v19 <= a3) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = v19;
      }
      uint64_t v23 = v20 - a3;
      uint64_t v24 = v22 - a3;
      unsigned int v25 = a4;
      while (v19 > v25)
      {
        if (!v24) {
          goto LABEL_30;
        }
        LODWORD(v17) = *(_DWORD *)(v18 + 16 * v25);
        *((float *)&v17 + 2) = a8;
        *v21++ = v17;
        v25 += a5;
        --v24;
        if (!--v23) {
          goto LABEL_22;
        }
      }
      goto LABEL_28;
    }
  }
  else if (v20 != a3)
  {
    uint64_t v26 = v18 + 8;
    int v27 = (_OWORD *)(v18 + 16 * a3);
    if (v19 <= a3) {
      uint64_t v28 = a3;
    }
    else {
      uint64_t v28 = v19;
    }
    uint64_t v29 = v20 - a3;
    uint64_t v30 = v28 - a3;
    unsigned int v31 = a4;
    while (v19 > v31)
    {
      if (!v30) {
        goto LABEL_31;
      }
      long long v32 = LODWORD(a8);
      DWORD2(v32) = *(_DWORD *)(v26 + 16 * v31);
      *v27++ = v32;
      v31 += a5;
      --v30;
      if (!--v29) {
        goto LABEL_22;
      }
    }
LABEL_29:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_22:
  if (a6)
  {
    unint64_t v33 = a1[3];
    uint64_t v34 = a1[5];
    while (v33 > a2)
    {
      uint64_t v35 = (_DWORD *)(v34 + 16 * a2);
      void v35[3] = a4;
      a4 += a5;
      *uint64_t v35 = a3++;
      v35[1] = a3;
      void v35[2] = a4;
      ++a2;
      if (!--a6) {
        return result;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

void re::buildPlane(re::GeomMesh &,re::GeomBuildPlaneOptions const&)::$_1::operator()(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, float32x4_t *a7, float32x4_t *a8)
{
  float v14 = a2;
  uint64_t v16 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a2 + 12), "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16)) {
    goto LABEL_22;
  }
  uint64_t v17 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
  unsigned int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  if (v18 <= a5) {
    goto LABEL_22;
  }
  unsigned int v19 = *(unsigned __int16 *)(*(void *)a1 + 4);
  int v20 = *v14;
  if ((_WORD)v19 == 1)
  {
    int v31 = 1;
LABEL_13:
    unsigned int v32 = a4 - 1;
    unint64_t v33 = *((void *)v14 + 3);
    uint64_t v34 = *((void *)v14 + 5);
    int v35 = v20 - a4;
    while (v33 > a3)
    {
      if (v35) {
        unsigned int v36 = v32 + 1;
      }
      else {
        unsigned int v36 = a6;
      }
      unsigned int v37 = (unsigned int *)(v34 + 16 * a3);
      *unsigned int v37 = a5;
      v37[1] = v32++;
      uint64_t v37[2] = v36;
      v37[3] = -1;
      ++a3;
      --v35;
      if (!--v31) {
        return;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  int v38 = *v14;
  uint64_t v39 = a1;
  float32x4_t v40 = v14;
  unsigned int v42 = a6;
  uint64_t v21 = 0;
  unsigned int v43 = a5;
  uint64_t v22 = a5;
  float v23 = 1.5708 / (float)v19;
  uint64_t v24 = a4 + (unsigned __int16)(v19 - 1);
  uint64_t v25 = v17 + 16 * a4;
  if (v18 <= a4) {
    uint64_t v26 = a4;
  }
  else {
    uint64_t v26 = v18;
  }
  unsigned int v27 = a4;
  uint64_t v28 = v24 - a4;
  unsigned int v41 = v27;
  uint64_t v29 = v26 - v27;
  do
  {
    if (v29 == v21) {
      goto LABEL_21;
    }
    __float2 v30 = __sincosf_stret(v23 * (float)(v21 + 1));
    *(float32x4_t *)(v25 + 16 * v21++) = vaddq_f32(*(float32x4_t *)(v17 + 16 * v22), vaddq_f32(vmulq_n_f32(*a7, v30.__cosval), vmulq_n_f32(*a8, v30.__sinval)));
  }
  while (v28 != v21);
  float v14 = v40;
  int v31 = *(unsigned __int16 *)(*(void *)v39 + 4);
  a6 = v42;
  a5 = v43;
  a4 = v41;
  int v20 = v38;
  if (*(_WORD *)(*(void *)v39 + 4)) {
    goto LABEL_13;
  }
}

void re::buildPlane(re::GeomMesh *a1, float32x2_t *a2)
{
  re::GeomMesh::GeomMesh((re::GeomMesh *)v4, 0);
  re::buildPlane((re *)v4, a2);
  re::DynamicArray<re::GeomMesh>::clear(a1);
  re::DynamicArray<re::GeomMesh>::add((uint64_t)a1, (uint64_t)v4);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v4);
}

void dispatchMipGenRect(void *a1, void *a2, void *a3, void *a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  unint64_t v43 = __PAIR64__(a7, a8);
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  int v16 = a5 - 1;
  uint64_t v17 = a4;
  unint64_t v18 = [v13 width];
  if (v18 >> a5 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = v18 >> a5;
  }
  unint64_t v20 = objc_msgSend(v13, "height", v43);
  if (v20 >> a5 <= 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = v20 >> a5;
  }
  unint64_t v22 = [v13 width];
  if (v22 >> v16 <= 1) {
    LOBYTE(v23) = 1;
  }
  else {
    unint64_t v23 = v22 >> v16;
  }
  unint64_t v24 = (unint64_t)[v13 height] >> v16;
  if (v24 <= 1) {
    LOBYTE(v24) = 1;
  }
  v25.f32[1] = (float)v21;
  __asm { FMOV            V1.2S, #1.0 }
  v25.f32[0] = (float)v19;
  float32x2_t v31 = vdiv_f32(_D1, v25);
  __asm { FMOV            V1.2S, #0.25 }
  v48[0] = v31;
  v48[1] = vmul_f32(v31, _D1);
  v48[2] = vmul_f32(v31, (float32x2_t)0x3F0000003F000000);
  uint64_t v49 = a6;
  BYTE4(v49) = v14 != v13;
  int v50 = a5 - 1;
  int v51 = a5;
  unint64_t v33 = v24 & 1;
  _ZF = v33 == 0;
  uint64_t v34 = (2 * v33) ^ 2;
  uint64_t v35 = 3;
  if (!_ZF) {
    uint64_t v35 = 1;
  }
  if ((v23 & 1) == 0) {
    uint64_t v34 = v35;
  }
  unsigned int v36 = (void *)v17[2 * v34 + 2];

  id v37 = v36;
  [v15 setComputePipelineState:v37];
  [v15 setBytes:v48 length:40 atIndex:0];
  if (v44)
  {
    int v38 = objc_msgSend(v13, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v13, "pixelFormat"), objc_msgSend(v13, "textureType"), v16, 1, 0, 1);
    uint64_t v39 = objc_msgSend(v14, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v14, "pixelFormat"), objc_msgSend(v14, "textureType"), a5, 1, 0, 1);
    float32x4_t v40 = objc_msgSend(v14, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v14, "pixelFormat"), objc_msgSend(v14, "textureType"), 0, 1, 0, 1);
    [v15 setTexture:v38 atIndex:1];
    [v15 setTexture:v39 atIndex:2];
    [v15 setTexture:v38 atIndex:3];
    [v15 setTexture:v40 atIndex:4];
  }
  else
  {
    [v15 setTexture:v13 atIndex:1];
    [v15 setTexture:v14 atIndex:2];
  }
  v47[0] = (unsigned __int16)v45;
  v47[1] = HIWORD(v45);
  void v47[2] = 1;
  uint64_t v41 = [v37 threadExecutionWidth];
  unint64_t v42 = [v37 maxTotalThreadsPerThreadgroup];
  v46[0] = v41;
  v46[1] = v42 / [v37 threadExecutionWidth];
  void v46[2] = 1;
  [v15 dispatchThreads:v47 threadsPerThreadgroup:v46];
}

void generateMipmapsForTexture_HierarchicalTiling_traverse(void *a1, void *a2, unint64_t a3, void *a4, int a5, __int32 a6, unsigned int a7, uint64_t a8, uint16x4_t a9)
{
  a9.i32[0] = a6;
  uint16x4_t v39 = a9;
  id v38 = a1;
  id v16 = a2;
  id v17 = a4;
  uint64_t v18 = [v38 width];
  uint64_t v19 = [v38 height];
  if (v39.u16[1] <= HIWORD(a7))
  {
    uint32x4_t v20 = vmovl_u16(v39);
    v21.i64[0] = v18;
    v21.i64[1] = v19;
    int8x16_t v22 = (int8x16_t)vshlq_u64(v21, (uint64x2_t)vnegq_s64(vdupq_n_s64(a5)));
    int8x16_t v23 = (int8x16_t)vcgtq_u64((uint64x2_t)v22, (uint64x2_t)vdupq_n_s64(1uLL));
    uint64_t v24 = (unsigned __int16)a3;
    int8x16_t v35 = (int8x16_t)vdupq_n_s64(0x800uLL);
    int64x2_t v36 = vsubq_s64((int64x2_t)vandq_s8(v22, v23), (int64x2_t)vmvnq_s8(v23));
    do
    {
      v20.i32[0] = a6;
      if ((unsigned __int16)a7 >= (unsigned __int16)a6)
      {
        __int32 v25 = a6;
        do
        {
          int32x2_t v26 = vshl_n_s32(*(int32x2_t *)v20.i8, 0xBuLL);
          v27.i64[0] = v26.u32[0];
          v27.i64[1] = v26.u32[1];
          v28.i64[0] = 0xFFFFLL;
          v28.i64[1] = 0xFFFFLL;
          int8x16_t v29 = (int8x16_t)vsubq_s64(v36, (int64x2_t)vandq_s8(v27, v28));
          int32x2_t v30 = vmovn_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v35, (uint64x2_t)v29), v29, v35));
          uint32x4_t v40 = v20;
          if (a5 >= 2)
          {
            int32x2_t v37 = v30;
            int32x2_t v31 = vadd_s32(v26, v30);
            uint32x2_t v32 = vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(vadd_s32(v31, v31), (int32x2_t)-1), (int8x8_t)0xFFFF0000FFFFLL), 0xBuLL);
            HIWORD(v44) = v32.i16[2];
            LOWORD(v44) = v32.i16[0];
            int8x8_t v33 = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v20.i8), (int8x8_t)0x1E0000001ELL);
            HIWORD(v43) = v33.i16[2];
            LOWORD(v43) = v33.i16[0];
            a3 = a3 & 0xFFFFFFFFFFFF0000 | v24;
            int32x2_t v34 = v26;
            generateMipmapsForTexture_HierarchicalTiling_traverse(v38, v16, a3, v17, (a5 - 1), v43, v44, a8);
            int32x2_t v30 = v37;
            int32x2_t v26 = v34;
          }
          HIWORD(v42) = v26.i16[2];
          LOWORD(v42) = v26.i16[0];
          HIWORD(v41) = v30.i16[2];
          LOWORD(v41) = v30.i16[0];
          dispatchMipGenRect(v38, v38, v16, v17, a5, v42, v41, a8);
          ++v25;
          uint32x4_t v20 = v40;
          v20.i32[0] = v25;
        }
        while ((unsigned __int16)v25 <= (unsigned __int16)a7);
      }
      ++v20.i32[1];
    }
    while (v20.u16[2] <= HIWORD(a7));
  }
}

void re::SamplerManager::~SamplerManager(re::SamplerManager *this)
{
  re::FixedArray<re::DynamicString>::deinit((void *)this + 17);
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {

    *((void *)this + 15) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3)
  {

    *((void *)this + 14) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {

    *((void *)this + 13) = 0;
  }
  long long v5 = (void *)*((void *)this + 12);
  if (v5)
  {

    *((void *)this + 12) = 0;
  }
  int v6 = (void *)*((void *)this + 11);
  if (v6)
  {

    *((void *)this + 11) = 0;
  }
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7)
  {

    *((void *)this + 10) = 0;
  }
  BOOL v8 = (void *)*((void *)this + 9);
  if (v8)
  {

    *((void *)this + 9) = 0;
  }
  long long v9 = (void *)*((void *)this + 8);
  if (v9)
  {

    *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  BOOL v10 = (void *)*((void *)this + 7);
  if (v10)
  {

    *((void *)this + 7) = 0;
  }
  float v11 = (void *)*((void *)this + 6);
  if (v11)
  {

    *((void *)this + 6) = 0;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 8);
}

BOOL re::SamplerManager::init(id *this, id *a2)
{
  uint64_t v157 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::ObjCObject::operator=(this, a2 + 23);
  long long v5 = v4 + 17;
  if (!this[18])
  {
    uint64_t v143 = 0;
    uint64_t v7 = &v144;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 0;
    __int16 v150 = 2048;
    int v151 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_193;
  }
  int v6 = (re::DynamicString *)this[19];
  *(void *)&long long v152 = "nearest";
  *((void *)&v152 + 1) = 7;
  re::DynamicString::operator=(v6, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 1)
  {
LABEL_193:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 1;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_194;
  }
  BOOL v8 = (re::DynamicString *)((char *)this[19] + 32);
  *(void *)&long long v152 = "bilinear";
  *((void *)&v152 + 1) = 8;
  re::DynamicString::operator=(v8, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 2)
  {
LABEL_194:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 2;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_195;
  }
  long long v9 = (re::DynamicString *)((char *)this[19] + 64);
  *(void *)&long long v152 = "trilinear";
  *((void *)&v152 + 1) = 9;
  re::DynamicString::operator=(v9, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 3)
  {
LABEL_195:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 3;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_196;
  }
  BOOL v10 = (re::DynamicString *)((char *)this[19] + 96);
  *(void *)&long long v152 = "anisotropic4x";
  *((void *)&v152 + 1) = 13;
  re::DynamicString::operator=(v10, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 4)
  {
LABEL_196:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 4;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_197;
  }
  float v11 = (re::DynamicString *)((char *)this[19] + 128);
  *(void *)&long long v152 = "nearestClamp";
  *((void *)&v152 + 1) = 12;
  re::DynamicString::operator=(v11, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 5)
  {
LABEL_197:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 5;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_198;
  }
  BOOL v12 = (re::DynamicString *)((char *)this[19] + 160);
  *(void *)&long long v152 = "bilinearClamp";
  *((void *)&v152 + 1) = 13;
  re::DynamicString::operator=(v12, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 6)
  {
LABEL_198:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 6;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_199;
  }
  id v13 = (re::DynamicString *)((char *)this[19] + 192);
  *(void *)&long long v152 = "trilinearClamp";
  *((void *)&v152 + 1) = 14;
  re::DynamicString::operator=(v13, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 7)
  {
LABEL_199:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 7;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_200;
  }
  id v14 = (re::DynamicString *)((char *)this[19] + 224);
  *(void *)&long long v152 = "nearestClampToZero";
  *((void *)&v152 + 1) = 18;
  re::DynamicString::operator=(v14, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 8)
  {
LABEL_200:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 8;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_201;
  }
  id v15 = (re::DynamicString *)((char *)this[19] + 256);
  *(void *)&long long v152 = "bilinearClampToZero";
  *((void *)&v152 + 1) = 19;
  re::DynamicString::operator=(v15, (uint64_t)&v152);
  uint64_t v7 = (int *)this[18];
  if ((unint64_t)v7 <= 9)
  {
LABEL_201:
    uint64_t v143 = 0;
    uint64_t v18 = &v144;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 9;
    __int16 v150 = 2048;
    int v151 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_202:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 0;
    __int16 v150 = 2048;
    int v151 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    uint64_t v143 = 0;
    unsigned int v47 = &v144;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 1;
    __int16 v150 = 2048;
    int v151 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 2;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_205:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 3;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 4;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_207:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 5;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_208:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 6;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_209:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 7;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_210:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 8;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_211;
  }
  id v16 = (re::DynamicString *)((char *)this[19] + 288);
  *(void *)&long long v152 = "trilinearClampToZero";
  *((void *)&v152 + 1) = 20;
  re::DynamicString::operator=(v16, (uint64_t)&v152);
  id v17 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v17, sel_setRAddressMode_, 2);
  objc_msgSend(v17, sel_setSAddressMode_, 2);
  objc_msgSend(v17, sel_setTAddressMode_, 2);
  objc_msgSend(v17, sel_setMinFilter_, 0);
  objc_msgSend(v17, sel_setMagFilter_, 0);
  objc_msgSend(v17, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v17);
  NS::SharedPtr<MTL::Texture>::operator=(this + 6, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  unint64_t v121 = a2;
  if (v17) {

  }
  uint64_t v18 = (int *)(this + 1);
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 6);
  id v19 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v19, sel_setRAddressMode_, 2);
  objc_msgSend(v19, sel_setSAddressMode_, 2);
  objc_msgSend(v19, sel_setTAddressMode_, 2);
  objc_msgSend(v19, sel_setMinFilter_, 1);
  objc_msgSend(v19, sel_setMagFilter_, 1);
  objc_msgSend(v19, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v19);
  NS::SharedPtr<MTL::Texture>::operator=(this + 7, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v19) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 7);
  id v20 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v20, sel_setRAddressMode_, 2);
  objc_msgSend(v20, sel_setSAddressMode_, 2);
  objc_msgSend(v20, sel_setTAddressMode_, 2);
  objc_msgSend(v20, sel_setMinFilter_, 1);
  objc_msgSend(v20, sel_setMagFilter_, 1);
  objc_msgSend(v20, sel_setMipFilter_, 2);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v20);
  NS::SharedPtr<MTL::Texture>::operator=(this + 8, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v20) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 8);
  id v21 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v21, sel_setRAddressMode_, 2);
  objc_msgSend(v21, sel_setSAddressMode_, 2);
  objc_msgSend(v21, sel_setTAddressMode_, 2);
  objc_msgSend(v21, sel_setMinFilter_, 0);
  objc_msgSend(v21, sel_setMagFilter_, 0);
  objc_msgSend(v21, sel_setMipFilter_, 1);
  objc_msgSend(v21, sel_setMaxAnisotropy_, 4);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v21);
  NS::SharedPtr<MTL::Texture>::operator=(this + 9, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v21) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 9);
  id v22 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v22, sel_setRAddressMode_, 0);
  objc_msgSend(v22, sel_setSAddressMode_, 0);
  objc_msgSend(v22, sel_setTAddressMode_, 0);
  objc_msgSend(v22, sel_setMinFilter_, 0);
  objc_msgSend(v22, sel_setMagFilter_, 0);
  objc_msgSend(v22, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v22);
  NS::SharedPtr<MTL::Texture>::operator=(this + 10, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v22) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 10);
  id v23 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v23, sel_setRAddressMode_, 0);
  objc_msgSend(v23, sel_setSAddressMode_, 0);
  objc_msgSend(v23, sel_setTAddressMode_, 0);
  objc_msgSend(v23, sel_setMinFilter_, 1);
  objc_msgSend(v23, sel_setMagFilter_, 1);
  objc_msgSend(v23, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v23);
  NS::SharedPtr<MTL::Texture>::operator=(this + 11, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v23) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 11);
  id v24 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v24, sel_setRAddressMode_, 0);
  objc_msgSend(v24, sel_setSAddressMode_, 0);
  objc_msgSend(v24, sel_setTAddressMode_, 0);
  objc_msgSend(v24, sel_setMinFilter_, 1);
  objc_msgSend(v24, sel_setMagFilter_, 1);
  objc_msgSend(v24, sel_setMipFilter_, 2);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v24);
  NS::SharedPtr<MTL::Texture>::operator=(this + 12, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v24) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 12);
  id v25 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v25, sel_setRAddressMode_, 4);
  objc_msgSend(v25, sel_setSAddressMode_, 4);
  objc_msgSend(v25, sel_setTAddressMode_, 4);
  objc_msgSend(v25, sel_setMinFilter_, 0);
  objc_msgSend(v25, sel_setMagFilter_, 0);
  objc_msgSend(v25, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v25);
  NS::SharedPtr<MTL::Texture>::operator=(this + 13, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v25) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 13);
  id v26 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v26, sel_setRAddressMode_, 4);
  objc_msgSend(v26, sel_setSAddressMode_, 4);
  objc_msgSend(v26, sel_setTAddressMode_, 4);
  objc_msgSend(v26, sel_setMinFilter_, 1);
  objc_msgSend(v26, sel_setMagFilter_, 1);
  objc_msgSend(v26, sel_setMipFilter_, 1);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v26);
  uint64_t v122 = this + 14;
  NS::SharedPtr<MTL::Texture>::operator=(this + 14, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v26) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), v122);
  id v27 = objc_msgSend(objc_msgSend(MEMORY[0x263F129F8], sel_alloc), sel_init);
  objc_msgSend(v27, sel_setRAddressMode_, 4);
  objc_msgSend(v27, sel_setSAddressMode_, 4);
  objc_msgSend(v27, sel_setTAddressMode_, 4);
  objc_msgSend(v27, sel_setMinFilter_, 1);
  objc_msgSend(v27, sel_setMagFilter_, 1);
  objc_msgSend(v27, sel_setMipFilter_, 2);
  *(void *)&long long v152 = objc_msgSend(*this, sel_newSamplerStateWithDescriptor_, v27);
  NS::SharedPtr<MTL::Texture>::operator=(this + 15, (void **)&v152);
  if ((void)v152)
  {

    *(void *)&long long v152 = 0;
  }
  if (v27) {

  }
  re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(this + 1), this + 15);
  SamplerTableByName = (re::SamplerTable *)re::MaterialManager::findSamplerTableByName((re::MaterialManager *)v121[3], "fallback");
  this[16] = SamplerTableByName;
  re::SamplerTable::init(SamplerTableByName, 0xAuLL);
  if (!this[18]) {
    goto LABEL_202;
  }
  int8x16_t v29 = this[16];
  uint64_t v30 = (uint64_t)this[19];
  unint64_t v31 = *(void *)(v30 + 8);
  if (v31)
  {
    int8x8_t v33 = *(unsigned char **)(v30 + 16);
    if (!v33)
    {
      uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_63;
    }
    LOBYTE(v30) = *v33;
  }
  else
  {
    unint64_t v32 = v31 >> 8;
    int8x8_t v33 = (unsigned char *)(v30 + 9);
    LOBYTE(v30) = v32;
  }
  if ((_BYTE)v30)
  {
    uint64_t v30 = (char)v30;
    char v34 = v33[1];
    if (v34)
    {
      int8x16_t v35 = v33 + 2;
      do
      {
        uint64_t v30 = 31 * v30 + v34;
        int v36 = *v35++;
        char v34 = v36;
      }
      while (v36);
    }
    uint64_t v37 = v30 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v37 = 0;
  }
LABEL_63:
  uint64_t v142 = v37;
  id v141 = this[6];
  re::SamplerTable::setSampler(v29, &v142, &v141);
  if (v141)
  {

    id v141 = 0;
  }
  uint64_t v142 = 0;
  uint64_t v18 = (int *)this[18];
  if ((unint64_t)v18 <= 1) {
    goto LABEL_203;
  }
  id v38 = this[16];
  uint64_t v39 = (uint64_t)this[19];
  unint64_t v40 = *(void *)(v39 + 40);
  if (v40)
  {
    unsigned int v42 = *(unsigned char **)(v39 + 48);
    if (!v42)
    {
      uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_77;
    }
    LOBYTE(v39) = *v42;
  }
  else
  {
    unint64_t v41 = v40 >> 8;
    unsigned int v42 = (unsigned char *)(v39 + 41);
    LOBYTE(v39) = v41;
  }
  if ((_BYTE)v39)
  {
    uint64_t v39 = (char)v39;
    char v43 = v42[1];
    if (v43)
    {
      unsigned int v44 = v42 + 2;
      do
      {
        uint64_t v39 = 31 * v39 + v43;
        int v45 = *v44++;
        char v43 = v45;
      }
      while (v45);
    }
    uint64_t v46 = v39 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v46 = 0;
  }
LABEL_77:
  uint64_t v140 = v46;
  id v139 = this[7];
  re::SamplerTable::setSampler(v38, &v140, &v139);
  if (v139)
  {

    id v139 = 0;
  }
  uint64_t v140 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 2) {
    goto LABEL_204;
  }
  unsigned int v48 = this[16];
  uint64_t v49 = (uint64_t)this[19];
  unint64_t v50 = *(void *)(v49 + 72);
  if (v50)
  {
    uint64_t v52 = *(unsigned char **)(v49 + 80);
    if (!v52)
    {
      uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_91;
    }
    LOBYTE(v49) = *v52;
  }
  else
  {
    unint64_t v51 = v50 >> 8;
    uint64_t v52 = (unsigned char *)(v49 + 73);
    LOBYTE(v49) = v51;
  }
  if ((_BYTE)v49)
  {
    uint64_t v49 = (char)v49;
    char v53 = v52[1];
    if (v53)
    {
      int8x8_t v54 = v52 + 2;
      do
      {
        uint64_t v49 = 31 * v49 + v53;
        int v55 = *v54++;
        char v53 = v55;
      }
      while (v55);
    }
    uint64_t v56 = v49 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v56 = 0;
  }
LABEL_91:
  uint64_t v138 = v56;
  id v137 = this[8];
  re::SamplerTable::setSampler(v48, &v138, &v137);
  if (v137)
  {

    id v137 = 0;
  }
  uint64_t v138 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 3) {
    goto LABEL_205;
  }
  float v57 = this[16];
  uint64_t v58 = (uint64_t)this[19];
  unint64_t v59 = *(void *)(v58 + 104);
  if (v59)
  {
    unsigned int v61 = *(unsigned char **)(v58 + 112);
    if (!v61)
    {
      uint64_t v65 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_105;
    }
    LOBYTE(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *v61;
  }
  else
  {
    unint64_t v60 = v59 >> 8;
    unsigned int v61 = (unsigned char *)(v58 + 105);
    LOBYTE(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v60;
  }
  if ((_BYTE)v58)
  {
    uint64_t v58 = (char)v58;
    char v62 = v61[1];
    if (v62)
    {
      uint64_t v63 = v61 + 2;
      do
      {
        uint64_t v58 = 31 * v58 + v62;
        int v64 = *v63++;
        char v62 = v64;
      }
      while (v64);
    }
    uint64_t v65 = v58 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v65 = 0;
  }
LABEL_105:
  uint64_t v136 = v65;
  id v135 = this[9];
  re::SamplerTable::setSampler(v57, &v136, &v135);
  if (v135)
  {

    id v135 = 0;
  }
  uint64_t v136 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 4) {
    goto LABEL_206;
  }
  int v66 = this[16];
  uint64_t v67 = (uint64_t)this[19];
  unint64_t v68 = *(void *)(v67 + 136);
  if (v68)
  {
    uint64_t v70 = *(unsigned char **)(v67 + 144);
    if (!v70)
    {
      uint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_119;
    }
    LOBYTE(v67) = *v70;
  }
  else
  {
    unint64_t v69 = v68 >> 8;
    uint64_t v70 = (unsigned char *)(v67 + 137);
    LOBYTE(v67) = v69;
  }
  if ((_BYTE)v67)
  {
    uint64_t v67 = (char)v67;
    char v71 = v70[1];
    if (v71)
    {
      long long v72 = v70 + 2;
      do
      {
        uint64_t v67 = 31 * v67 + v71;
        int v73 = *v72++;
        char v71 = v73;
      }
      while (v73);
    }
    uint64_t v74 = v67 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v74 = 0;
  }
LABEL_119:
  uint64_t v134 = v74;
  id v133 = this[10];
  re::SamplerTable::setSampler(v66, &v134, &v133);
  if (v133)
  {

    id v133 = 0;
  }
  uint64_t v134 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 5) {
    goto LABEL_207;
  }
  float32x4_t v75 = this[16];
  uint64_t v76 = (uint64_t)this[19];
  unint64_t v77 = *(void *)(v76 + 168);
  if (v77)
  {
    unsigned int v79 = *(unsigned char **)(v76 + 176);
    if (!v79)
    {
      uint64_t v83 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_133;
    }
    LOBYTE(v76) = *v79;
  }
  else
  {
    unint64_t v78 = v77 >> 8;
    unsigned int v79 = (unsigned char *)(v76 + 169);
    LOBYTE(v76) = v78;
  }
  if ((_BYTE)v76)
  {
    uint64_t v76 = (char)v76;
    char v80 = v79[1];
    if (v80)
    {
      float32x4_t v81 = v79 + 2;
      do
      {
        uint64_t v76 = 31 * v76 + v80;
        int v82 = *v81++;
        char v80 = v82;
      }
      while (v82);
    }
    uint64_t v83 = v76 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v83 = 0;
  }
LABEL_133:
  uint64_t v132 = v83;
  id v131 = this[11];
  re::SamplerTable::setSampler(v75, &v132, &v131);
  if (v131)
  {

    id v131 = 0;
  }
  uint64_t v132 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 6) {
    goto LABEL_208;
  }
  long long v84 = this[16];
  uint64_t v85 = (uint64_t)this[19];
  unint64_t v86 = *(void *)(v85 + 200);
  if (v86)
  {
    unsigned __int32 v88 = *(unsigned char **)(v85 + 208);
    if (!v88)
    {
      uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_147;
    }
    LOBYTE(v85) = *v88;
  }
  else
  {
    unint64_t v87 = v86 >> 8;
    unsigned __int32 v88 = (unsigned char *)(v85 + 201);
    LOBYTE(v85) = v87;
  }
  if ((_BYTE)v85)
  {
    uint64_t v85 = (char)v85;
    char v89 = v88[1];
    if (v89)
    {
      int v90 = v88 + 2;
      do
      {
        uint64_t v85 = 31 * v85 + v89;
        int v91 = *v90++;
        char v89 = v91;
      }
      while (v91);
    }
    uint64_t v92 = v85 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v92 = 0;
  }
LABEL_147:
  uint64_t v130 = v92;
  id v129 = this[12];
  re::SamplerTable::setSampler(v84, &v130, &v129);
  if (v129)
  {

    id v129 = 0;
  }
  uint64_t v130 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 7) {
    goto LABEL_209;
  }
  CFTypeRef v93 = this[16];
  uint64_t v94 = (uint64_t)this[19];
  unint64_t v95 = *(void *)(v94 + 232);
  if (v95)
  {
    __int16 v97 = *(unsigned char **)(v94 + 240);
    if (!v97)
    {
      uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_161;
    }
    LOBYTE(v94) = *v97;
  }
  else
  {
    unint64_t v96 = v95 >> 8;
    __int16 v97 = (unsigned char *)(v94 + 233);
    LOBYTE(v94) = v96;
  }
  if ((_BYTE)v94)
  {
    uint64_t v94 = (char)v94;
    char v98 = v97[1];
    if (v98)
    {
      uint64_t v99 = v97 + 2;
      do
      {
        uint64_t v94 = 31 * v94 + v98;
        int v100 = *v99++;
        char v98 = v100;
      }
      while (v100);
    }
    uint64_t v101 = v94 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v101 = 0;
  }
LABEL_161:
  uint64_t v128 = v101;
  id v127 = this[13];
  re::SamplerTable::setSampler(v93, &v128, &v127);
  if (v127)
  {

    id v127 = 0;
  }
  uint64_t v128 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 8) {
    goto LABEL_210;
  }
  float32x4_t v102 = this[16];
  uint64_t v103 = (uint64_t)this[19];
  unint64_t v104 = *(void *)(v103 + 264);
  if (v104)
  {
    unint64_t v106 = *(unsigned char **)(v103 + 272);
    if (!v106)
    {
      uint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_175;
    }
    LOBYTE(v103) = *v106;
  }
  else
  {
    unint64_t v105 = v104 >> 8;
    unint64_t v106 = (unsigned char *)(v103 + 265);
    LOBYTE(v103) = v105;
  }
  if ((_BYTE)v103)
  {
    uint64_t v103 = (char)v103;
    char v107 = v106[1];
    if (v107)
    {
      uint64_t v108 = v106 + 2;
      do
      {
        uint64_t v103 = 31 * v103 + v107;
        int v109 = *v108++;
        char v107 = v109;
      }
      while (v109);
    }
    uint64_t v110 = v103 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v110 = 0;
  }
LABEL_175:
  uint64_t v126 = v110;
  id v125 = *v122;
  re::SamplerTable::setSampler(v102, &v126, &v125);
  if (v125)
  {

    id v125 = 0;
  }
  uint64_t v126 = 0;
  unsigned int v47 = (int *)this[18];
  if ((unint64_t)v47 <= 9)
  {
LABEL_211:
    uint64_t v143 = 0;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v152 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v144 = 136315906;
    int v145 = "operator[]";
    __int16 v146 = 1024;
    int v147 = 468;
    __int16 v148 = 2048;
    uint64_t v149 = 9;
    __int16 v150 = 2048;
    int v151 = v47;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v111 = this[16];
  uint64_t v112 = (uint64_t)this[19];
  unint64_t v113 = *(void *)(v112 + 296);
  if (v113)
  {
    __int16 v115 = *(unsigned char **)(v112 + 304);
    if (!v115)
    {
      uint64_t v119 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_189;
    }
    LOBYTE(v112) = *v115;
  }
  else
  {
    unint64_t v114 = v113 >> 8;
    __int16 v115 = (unsigned char *)(v112 + 297);
    LOBYTE(v112) = v114;
  }
  if ((_BYTE)v112)
  {
    uint64_t v112 = (char)v112;
    char v116 = v115[1];
    if (v116)
    {
      long long v117 = v115 + 2;
      do
      {
        uint64_t v112 = 31 * v112 + v116;
        int v118 = *v117++;
        char v116 = v118;
      }
      while (v118);
    }
    uint64_t v119 = v112 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v119 = 0;
  }
LABEL_189:
  uint64_t v124 = v119;
  id v123 = this[15];
  re::SamplerTable::setSampler(v111, &v124, &v123);
  if (v123) {

  }
  return *this != 0;
}

void *re::SamplerTable::init(re::SamplerTable *this, unint64_t a2)
{
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 8, a2);
  ++*((_DWORD *)this + 22);
}

void **re::SamplerTable::setSampler(void *a1, void *a2, id *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    uint64_t v11 = a1[10];
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 8), a3);
    LOBYTE(v12[0]) = v11;
    return (void **)re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace((_anonymous_namespace_ *)a1, a2, (char *)v12);
  }
  else
  {
    unint64_t v7 = *(unsigned __int8 *)(a1[1] + 16 * v6 + 8);
    if (a1[10] <= v7)
    {
      memset(v12, 0, sizeof(v12));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t result = (void **)(a1[12] + 8 * v7);
    id v9 = *a3;
    BOOL v10 = *result;
    if (*a3 != *result)
    {
      uint64_t result = NS::SharedPtr<MTL::Texture>::operator=(result, a3);
      if (!v9 || !v10)
      {
        *(void *)&v12[0] = a1;
        return (void **)re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::SamplerTable::rehashNames(void)::{lambda(unsigned char)#1}>(a1, (uint64_t)v12);
      }
    }
  }
  return result;
}

void re::SamplerManager::deinit(re::SamplerManager *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = (id *)*((void *)this + 5);
    uint64_t v4 = 8 * v2;
    do
    {

      *v3++ = 0;
      v4 -= 8;
    }
    while (v4);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 8);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 8);
  *((void *)this + 16) = 0;

  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;

  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 9) = 0;

  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;

  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;

  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  long long v5 = *(void **)this;
  *(void *)this = 0;
}

void re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(id **)(a1 + 32);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3)
      {

        *uint64_t v3 = 0;
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *uint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    id v9 = &result[2 * v6];
    v3[1] = v9;
    uint64_t v10 = v3[2];
    if (v10)
    {
      uint64_t v11 = v9 + 1;
      uint64_t v12 = v3[2];
      do
      {
        *((void *)v11 - 1) = 0;
        *uint64_t v11 = 0;
        v11 += 16;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    uint64_t v10 = 0;
    float32x2_t *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace(_anonymous_namespace_ *a1, void *a2, char *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = v6;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v6);
    uint64_t v8 = *((void *)a1 + 1) + 16 * v7;
    *(unsigned char *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a3;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)a1, v8);
    return *((void *)a1 + 1) + 16 * v7 + 8;
  }
}

void *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::SamplerTable::rehashNames(void)::{lambda(unsigned char)#1}>(void *result, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  result[5] = 0;
  v14[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v14[0] + 8) + 16 * v9;
      unint64_t v11 = *(unsigned __int8 *)(v10 + 8);
      unint64_t v12 = *(void *)(*(void *)a2 + 80);
      if (v12 <= v11)
      {
        uint64_t v16 = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        uint64_t v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 789;
        __int16 v21 = 2048;
        unint64_t v22 = v11;
        __int16 v23 = 2048;
        unint64_t v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(*(void *)(*(void *)a2 + 96) + 8 * v11))
      {
        unint64_t v13 = 0xBF58476D1CE4E5B9 * (*(void *)v10 ^ (*(void *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, char *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  char v17 = *a3;
  uint64_t v18 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v18 = *a2;
  *(unsigned char *)(v18 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, v18);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) >> 27));
  *(void *)(result + 48) ^= v3 ^ ((v4 ^ (v4 >> 31)) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  uint64_t v4 = *(void *)(result + 48);
  *(void *)(result + 40) ^= v3;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a2 + 8)) >> 27));
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v4 ^ v3 ^ ((v3 << 6) + (v3 >> 2) + (v5 ^ (v5 >> 31)) - 0x61C8864680B583E9);
  return result;
}

double re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(v20, v4, a2);
  v18[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd((_anonymous_namespace_ *)v20, (void *)(*(void *)(v18[0] + 8) + 16 * v10), (unsigned char *)(*(void *)(v18[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        uint64_t v10 = v19;
      }
      while (v19 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v11 = *((void *)&v20[3] + 1);
  *((void *)&v20[3] + 1) = a1[7];
  long long v12 = v20[0];
  long long v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(void *)&v20[1] = v5;
  long long v14 = v20[2];
  long long v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
  long long v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v16;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v20);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, unsigned char *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LOBYTE(v14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(unsigned char *)(v17 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, v17);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

void *re::introspect_MeshSortingConfiguration(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      unint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Centroid";
      re::introspect_MeshSortingConfiguration(BOOL)::enumCFDictionaryRef Attributes = (uint64_t)v11;
      unint64_t v12 = re::introspectionAllocator(v11);
      unint64_t v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)unint64_t v13 = 1;
      *((void *)v13 + 1) = 3;
      *((void *)v13 + 2) = "FurthestOBB";
      qword_26879FB98 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      BOOL v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)BOOL v15 = 1;
      *((void *)v15 + 1) = 4;
      *((void *)v15 + 2) = "NearestOBB";
      qword_26879FBA0 = (uint64_t)v15;
      unint64_t v16 = re::introspectionAllocator(v15);
      uint64_t v17 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *((void *)v17 + 1) = 1;
      *((void *)v17 + 2) = "FurthestRadial";
      qword_26879FBA8 = (uint64_t)v17;
      uint64_t v18 = re::introspectionAllocator(v17);
      uint64_t v19 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 24, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *((void *)v19 + 1) = 2;
      *((void *)v19 + 2) = "NearestRadial";
      qword_26879FBB0 = (uint64_t)v19;
      int v20 = re::introspectionAllocator(v19);
      uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 24, 8);
      *(_DWORD *)uint64_t v21 = 1;
      *(void *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 5;
      *(void *)(v21 + 16) = "CentroidWithOverride";
      qword_26879FBB8 = v21;
    }
  }
  {
    unint64_t v22 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MeshSortingConfiguration(BOOL)::info, "MeshSortingConfiguration", 1, 1, 1, 1);
    *(void *)unint64_t v22 = &unk_26E715E00;
    *((void *)v22 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &re::introspect_MeshSortingConfiguration(BOOL)::enumTable;
    *((_DWORD *)v22 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_MeshSortingConfiguration(BOOL)::isInitialized) {
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    char v3 = re::introspect_MeshSortingConfiguration(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v24);
    if (v3) {
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_MeshSortingConfiguration(BOOL)::isInitialized)
    {
LABEL_9:
      unint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_MeshSortingConfiguration(BOOL)::info;
    }
  }
  re::introspect_MeshSortingConfiguration(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MeshSortingConfiguration(BOOL)::info, a2);
  v23[0] = 0x5B547FA33D6536FELL;
  v23[1] = (uint64_t)"MeshSortingConfiguration";
  xmmword_26879FBE8 = v24;
  re::StringID::destroyString((re::StringID *)v23);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_MeshSortingConfiguration(BOOL)::info;
}

void *re::allocInfo_RenderGraphData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_369, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_369))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93C80, "RenderGraphData");
    __cxa_guard_release(&_MergedGlobals_369);
  }
  return &unk_26AF93C80;
}

void re::initInfo_RenderGraphData(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xA3C1F00635BD9A04;
  v5[1] = "RenderGraphData";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &re::initInfo_RenderGraphData(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_RenderGraphData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphData", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphData, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphData>, this);
}

uint64_t re::RenderGraphDataStore::RenderGraphDataStore(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 52) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v5 = a1 + 64;
  *(void *)(a1 + 100) = 0x7FFFFFFFLL;
  long long v6 = re::globalAllocators((re *)a1);
  unint64_t v7 = (_anonymous_namespace_ *)re::PerFrameAllocatorManager::perFrameAllocator(v6[6], a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 168) = v7;
  *(void *)(a1 + 212) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 224) = 0;
  unint64_t v9 = re::globalAllocators(v8);
  uint64_t v10 = re::PerFrameAllocatorManager::perFrameAllocator(v9[6], *(void *)a1);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v10;
  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(v5, v10, 3);
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(a1 + 176, *(void *)(a1 + 8), 3);
  return a1;
}

void re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_19, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::RenderGraphDataStore::deinit(re::RenderGraphDataStore *this)
{
  uint64_t v2 = *((unsigned int *)this + 12);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int *)*((void *)this + 4);
    while (1)
    {
      int v5 = *v4;
      v4 += 6;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 12);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 != v3)
  {
    uint64_t v6 = v3;
    do
    {
      re::internal::destroyPersistent<re::RenderGraphData>((re *)"deinit", 50, *(void (****)(void))(*((void *)this + 4) + 24 * v6 + 16));
      if (*((_DWORD *)this + 12) <= (v3 + 1)) {
        int v7 = v3 + 1;
      }
      else {
        int v7 = *((_DWORD *)this + 12);
      }
      int v8 = v3;
      while (1)
      {
        uint64_t v6 = (v8 + 1);
        if (v7 - 1 == v8) {
          break;
        }
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((void *)this + 4) + 24 * v6) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while (v2 != v3);
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 2);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 8);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 112);
  return re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 22);
}

re *re::internal::destroyPersistent<re::RenderGraphData>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    int v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

_anonymous_namespace_ *re::RenderGraphDataStore::add(re::RenderGraphDataStore *this, uint64_t a2, const re::RuntimeRenderGraphDataStruct *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 40, 8);
  *(void *)uint64_t v5 = &unk_26E70DB98;
  *(_OWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 120, 8);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(void *)(v6 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v6, 0);
  *(void *)(v7 + 22) = 0;
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = 0xFFFFFFFFLL;
  *(void *)uint64_t v7 = &unk_26E715EC0;
  *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(void *)(v7 + 112) = 0;
  if (*((void *)a3 + 14)) {
    int v8 = (const char *)*((void *)a3 + 15);
  }
  else {
    int v8 = (char *)a3 + 113;
  }
  size_t v9 = strlen(v8);
  uint64_t v10 = (char *)(*(uint64_t (**)(void, size_t, void))(**((void **)this + 1) + 32))(*((void *)this + 1), v9 + 1, 0);
  if (*((void *)a3 + 14)) {
    uint64_t v11 = (const char *)*((void *)a3 + 15);
  }
  else {
    uint64_t v11 = (char *)a3 + 113;
  }
  *(void *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = strcpy(v10, v11);
  uint64_t v12 = *((void *)a3 + 5);
  *(_DWORD *)(v6 + 56) = v12;
  *(_DWORD *)(v6 + 16) = 8;
  uint64_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 32))(*((void *)this + 1), 8 * v12 + 23, 0);
    BOOL v15 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v15 - 2) = v13;
    *(v15 - 1) = v14;
    bzero(v15, 8 * v13);
    if (*(_DWORD *)(v6 + 56))
    {
      unint64_t v16 = 0;
      do
      {
        if (*((void *)a3 + 14)) {
          uint64_t v17 = (const char *)*((void *)a3 + 15);
        }
        else {
          uint64_t v17 = (char *)a3 + 113;
        }
        size_t v18 = strlen(v17);
        uint64_t v19 = (char *)(*(uint64_t (**)(void, size_t, void))(**((void **)this + 1) + 32))(*((void *)this + 1), v18 + 1, 0);
        if (*((void *)a3 + 5) <= v16)
        {
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v48 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v48 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v48 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_52:
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v48 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        int v20 = v19;
        strcpy(v19, *(const char **)(*(void *)(*((void *)a3 + 7) + 8 * v16) + 8));
        uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 72, 8);
        *(_OWORD *)uint64_t v21 = 0u;
        *(_OWORD *)(v21 + 16) = 0u;
        *(_OWORD *)(v21 + 32) = 0u;
        *(_OWORD *)(v21 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
        *(void *)(v21 + 64) = 0;
        *((void *)re::IntrospectionMember::IntrospectionMember((re::IntrospectionMember *)v21) + 1) = v20;
        if (*((void *)a3 + 5) <= v16) {
          goto LABEL_50;
        }
        uint64_t v22 = *(void *)(*((void *)a3 + 7) + 8 * v16);
        *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
        *(_DWORD *)(v21 + 36) = *(_DWORD *)(v22 + 36);
        re::SerializedReference<re::IntrospectionBase const*>::operator=((void *)(v21 + 16), (void *)(v22 + 16));
        if (*((void *)a3 + 5) <= v16) {
          goto LABEL_51;
        }
        re::SerializedReference<re::IntrospectionBase const*>::operator=((void *)(v21 + 48), (void *)(*(void *)(*((void *)a3 + 7) + 8 * v16) + 48));
        if (*((void *)a3 + 5) <= v16) {
          goto LABEL_52;
        }
        *(_DWORD *)(v21 + 64) = *(_DWORD *)(*(void *)(*((void *)a3 + 7) + 8 * v16) + 64);
        v15[v16++] = v21;
      }
      while (v16 < *(unsigned int *)(v6 + 56));
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  *(void *)(v6 + 64) = v15;
  *(void *)(v5 + 32) = v6;
  size_t v23 = strlen(*(const char **)(v6 + 48));
  if (v23)
  {
    MurmurHash3_x64_128(*(void *)(v6 + 48), v23, 0, (unint64_t *)&v48);
    unint64_t v24 = (*((void *)&v48 + 1) - 0x61C8864680B583E9 + ((void)v48 << 6) + ((unint64_t)v48 >> 2)) ^ v48;
  }
  else
  {
    unint64_t v24 = 0;
  }
  re::FixedArray<char>::init<>((void *)(v5 + 8), *((void *)this + 1), *((void *)a3 + 10));
  memcpy(*(void **)(v5 + 24), *((const void **)a3 + 12), *(void *)(v5 + 16));
  unint64_t v25 = *((void *)this + 22);
  if (v25)
  {
    unint64_t v25 = v24 % *((unsigned int *)this + 50);
    uint64_t v26 = *(unsigned int *)(*((void *)this + 23) + 4 * v25);
    uint64_t v27 = a2;
    if (v26 != 0x7FFFFFFF)
    {
      uint64_t v28 = *((void *)this + 24);
      if (*(void *)(v28 + 24 * v26 + 8) == v24) {
        goto LABEL_36;
      }
      while (1)
      {
        LODWORD(v26) = *(_DWORD *)(v28 + 24 * v26) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v28 + 24 * v26 + 8) == v24) {
          goto LABEL_36;
        }
      }
    }
  }
  else
  {
    uint64_t v27 = a2;
  }
  uint64_t v29 = *((unsigned int *)this + 53);
  if (v29 == 0x7FFFFFFF)
  {
    uint64_t v29 = *((unsigned int *)this + 52);
    int v30 = v29;
    if (v29 == *((_DWORD *)this + 50))
    {
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)this + 176, 2 * *((_DWORD *)this + 51));
      LODWORD(v25) = v24 % *((unsigned int *)this + 50);
      int v30 = *((_DWORD *)this + 52);
    }
    *((_DWORD *)this + 52) = v30 + 1;
    uint64_t v31 = *((void *)this + 24);
    int v32 = *(_DWORD *)(v31 + 24 * v29);
  }
  else
  {
    uint64_t v31 = *((void *)this + 24);
    int v32 = *(_DWORD *)(v31 + 24 * v29);
    *((_DWORD *)this + 53) = v32 & 0x7FFFFFFF;
  }
  uint64_t v33 = 24 * v29;
  *(_DWORD *)(v31 + v33) = v32 | 0x80000000;
  *(_DWORD *)(*((void *)this + 24) + v33) = *(_DWORD *)(*((void *)this + 24) + 24 * v29) & 0x80000000 | *(_DWORD *)(*((void *)this + 23) + 4 * v25);
  *(void *)(*((void *)this + 24) + 24 * v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v24;
  *(void *)(*((void *)this + 24) + 24 * v29 + 16) = v6;
  *(_DWORD *)(*((void *)this + 23) + 4 * v25) = v29;
  ++*((_DWORD *)this + 51);
  ++*((_DWORD *)this + 54);
LABEL_36:
  unint64_t v34 = *((void *)this + 8);
  unint64_t v35 = (v27 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24;
  if (v34)
  {
    unint64_t v34 = v35 % *((unsigned int *)this + 22);
    uint64_t v36 = *(unsigned int *)(*((void *)this + 9) + 4 * v34);
    if (v36 != 0x7FFFFFFF)
    {
      uint64_t v46 = *((void *)this + 10);
      if (*(void *)(v46 + 24 * v36 + 8) == v35) {
        goto LABEL_44;
      }
      while (1)
      {
        LODWORD(v36) = *(_DWORD *)(v46 + 24 * v36) & 0x7FFFFFFF;
        if (v36 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v46 + 24 * v36 + 8) == v35) {
          goto LABEL_44;
        }
      }
    }
  }
  uint64_t v37 = *((unsigned int *)this + 25);
  if (v37 == 0x7FFFFFFF)
  {
    uint64_t v37 = *((unsigned int *)this + 24);
    int v38 = v37;
    if (v37 == *((_DWORD *)this + 22))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)this + 64, 2 * *((_DWORD *)this + 23));
      LODWORD(v34) = v35 % *((unsigned int *)this + 22);
      int v38 = *((_DWORD *)this + 24);
    }
    *((_DWORD *)this + 24) = v38 + 1;
    uint64_t v39 = *((void *)this + 10);
    int v40 = *(_DWORD *)(v39 + 24 * v37);
  }
  else
  {
    uint64_t v39 = *((void *)this + 10);
    int v40 = *(_DWORD *)(v39 + 24 * v37);
    *((_DWORD *)this + 25) = v40 & 0x7FFFFFFF;
  }
  uint64_t v41 = 24 * v37;
  *(_DWORD *)(v39 + v41) = v40 | 0x80000000;
  *(_DWORD *)(*((void *)this + 10) + v41) = *(_DWORD *)(*((void *)this + 10) + 24 * v37) & 0x80000000 | *(_DWORD *)(*((void *)this + 9) + 4 * v34);
  *(void *)(*((void *)this + 10) + 24 * v37 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v35;
  *(void *)(*((void *)this + 10) + 24 * v37 + 16) = v5;
  *(_DWORD *)(*((void *)this + 9) + 4 * v34) = v37;
  ++*((_DWORD *)this + 23);
  ++*((_DWORD *)this + 26);
LABEL_44:
  uint64_t v42 = *((void *)this + 1);
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  unsigned int v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 40, 8);
  ArcSharedObject::ArcSharedObject(v44, 0);
  *((void *)v44 + 3) = v6;
  *(void *)unsigned int v44 = &unk_26E70DBD8;
  *((void *)v44 + 4) = v43;
  return v44;
}

void *re::SerializedReference<re::IntrospectionBase const*>::operator=(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    if (*(unsigned char *)(v3 + 8)) {
      uint64_t v4 = *(const char **)(v3 + 16);
    }
    else {
      uint64_t v4 = (const char *)(v3 + 9);
    }
    re::SerializedReference<re::IntrospectionBase const*>::setString((uint64_t)a1, v4, *(void *)v3);
  }
  else
  {
    re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)a1);
    *a1 = *a2;
  }
  return a1;
}

void re::FixedArray<char>::init<>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3)
  {
    uint64_t v5 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, 1);
    a1[2] = v5;
    if (v5)
    {
      uint64_t v7 = v5;
      size_t v8 = a3 - 1;
      if (v8)
      {
        bzero(v5, v8);
        v7 += v8;
      }
      *uint64_t v7 = 0;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
  }
}

_anonymous_namespace_ *re::RenderGraphDataStore::createWrappedData(re::RenderGraphDataStore *this, uint64_t a2, const char *__s)
{
  void v15[2] = *MEMORY[0x263EF8340];
  size_t v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, (unint64_t *)v15);
    uint64_t v7 = (v15[1] + (v15[0] << 6) + ((unint64_t)v15[0] >> 2) - 0x61C8864680B583E9) ^ v15[0];
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = re::RenderGraphDataStore::tryGetByTypeNameHash(this, a2, v7);
  v15[0] = v7;
  size_t v9 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)this + 176, v15);
  uint64_t v10 = 0;
  if (v9 && v8)
  {
    uint64_t v11 = *(void *)v9;
    uint64_t v12 = re::globalAllocators(v9)[2];
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 40, 8);
    ArcSharedObject::ArcSharedObject(v10, 0);
    *((void *)v10 + 3) = v11;
    *(void *)uint64_t v10 = &unk_26E70DBD8;
    *((void *)v10 + 4) = v13;
  }
  return v10;
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)"N2re23RenderGraphDataPipeDataE";
  if (((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v3 = (unsigned __int8 *)((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v4 = 5381;
    do
    {
      unint64_t v2 = v4;
      unsigned int v5 = *v3++;
      uint64_t v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  unint64_t v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  uint64_t result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::MipmapGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 24))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 56))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::Slice<re::ClippingParametersEntry>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 88))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::Slice<unsigned short>>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 120))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ProbeContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 152))(*(void *)(result + 8));
  }
  return result;
}

{
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t result;
  const char *v9;
  unint64_t v10[3];

  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 152))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::BlurGenerationContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 184))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 216))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::SFBSystemShellBlurContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 248))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::IBLContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::IBLContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::IBLContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 408))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::BlurPlanesRenderFrameData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 448))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneCRWSReferencePosition>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, a2);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(result + 8) + 920);
    return v3();
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::MeshSortingCollection>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, a2);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**(void **)(result + 8) + 984);
    return v3();
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::AnchorTransformData>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 1080))(*(void *)(result + 8));
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(uint64_t a1, int a2, char *__s)
{
  uint64_t v10[2] = *MEMORY[0x263EF8340];
  {
    re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v9);
  }
  unint64_t v5 = 0x9E3779B97F4A7C17;
  unint64_t v6 = re::RenderGraphDataStore::tryGet<re::VirtualEnvironmentProbeContext>(char const*,char const*)const::kRenderGraphDataPipeDataScopeHash;
  size_t v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, v10);
    unint64_t v5 = ((v10[1] - 0x61C8864680B583E9 + (v10[0] << 6) + (v10[0] >> 2)) ^ v10[0]) - 0x61C8864680B583E9;
  }
  uint64_t result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(a1, ((v6 >> 2) + (v6 << 6) + v5) ^ v6);
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 1112))(*(void *)(result + 8));
  }
  return result;
}

re::DynamicString *re::SerializedReference<re::IntrospectionBase const*>::setString(uint64_t a1, const char *a2, uint64_t a3)
{
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1);
  unint64_t v6 = (re::DynamicString *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 32, 8);
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  *(void *)unint64_t v6 = a3;
  *((void *)v6 + 1) = 0;
  re::DynamicString::setCapacity(v6, 0);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
  v8[0] = a2;
  v8[1] = strlen(a2);
  return re::DynamicString::operator=(v6, (uint64_t)v8);
}

void re::RuntimeRenderGraphData::~RuntimeRenderGraphData(re::RuntimeRenderGraphData *this)
{
  *(void *)this = &unk_26E70DB98;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E70DB98;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RuntimeRenderGraphData::entryPoint(re::RuntimeRenderGraphData *this)
{
  return *((void *)this + 3);
}

re::IntrospectionMember *re::IntrospectionMember::IntrospectionMember(re::IntrospectionMember *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)this + 16);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)this + 48);
  *((_DWORD *)this + 16) = 0;
  return this;
}

void re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&unsigned char v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), *(void *)&v13[16] + v10 + 8, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::RenderGraphDataWrapper::~RenderGraphDataWrapper(re::RenderGraphDataWrapper *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::RenderGraphScopeOutput::addTargetToLane(uint64_t a1, uint64_t *a2, double *a3, int a4)
{
  uint64_t v7 = a1 + 40;
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (v8) {
    goto LABEL_10;
  }
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = -1;
  uint64_t v18 = 0;
  uint64_t v19 = -1;
  char v20 = 0;
  uint64_t v21 = -1;
  re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v7, a2, (uint64_t)v10);
  if (*((void *)&v12 + 1))
  {
    if (v15) {
      (*(void (**)(void))(**((void **)&v12 + 1) + 40))();
    }
    uint64_t v15 = 0;
    long long v13 = 0uLL;
    *((void *)&v12 + 1) = 0;
    ++v14;
  }
  if (v10[0] && (void)v12) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v7, a2);
  if (v8)
  {
LABEL_10:
    *((_OWORD *)v8 + 5) = *(_OWORD *)a3;
    if (a4) {
      re::DynamicArray<re::RenderGraphTargetHandle>::add(v8, a3);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "outputList", "addTargetToLane", 13);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 144 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 144 * v4) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 144 * v4 + 8) == v2) {
        return v6 + 144 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 144 * v4 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 144 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 144 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 144 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 144 * v10;
  return v12 + 16;
}

double re::DynamicArray<re::RenderGraphTargetHandle>::add(_anonymous_namespace_ *this, double *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderGraphTargetHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  long long v5 = (double *)(*((void *)this + 4) + 16 * v4);
  *long long v5 = 0.0;
  v5[1] = NAN;
  *long long v5 = *a2;
  double result = a2[1];
  v5[1] = result;
  *((void *)this + 2) = v4 + 1;
  ++*((_DWORD *)this + 6);
  return result;
}

double re::RenderGraphScopeOutput::inheritPropertiesFromLane(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t v6 = a1 + 88;
  unint64_t v7 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (!v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v14 = 0;
    uint64_t v13 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = -1;
    uint64_t v21 = 0;
    uint64_t v22 = -1;
    char v23 = 0;
    uint64_t v24 = -1;
    unint64_t v7 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v6, a2, (uint64_t)&v11);
    if (*((void *)&v15 + 1))
    {
      if (v18) {
        (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
      }
      uint64_t v18 = 0;
      long long v16 = 0uLL;
      *((void *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (void)v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  re::DynamicArray<re::RenderGraphTargetHandle>::add(v7, a3);
  uint64_t v8 = a1 + 40;
  unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (!v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v14 = 0;
    uint64_t v13 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = -1;
    uint64_t v21 = 0;
    uint64_t v22 = -1;
    char v23 = 0;
    uint64_t v24 = -1;
    unint64_t v9 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v8, a2, (uint64_t)&v11);
    if (*((void *)&v15 + 1))
    {
      if (v18) {
        (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
      }
      uint64_t v18 = 0;
      long long v16 = 0uLL;
      *((void *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (void)v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  return re::DynamicArray<re::RenderGraphTargetHandle>::add(v9, a3);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  long long v15;
  long long v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  uint64_t v6 = a1 + 40;
  unint64_t v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 40, a2);
  if (!v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v14 = 0;
    uint64_t v13 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = -1;
    uint64_t v21 = 0;
    uint64_t v22 = -1;
    char v23 = 0;
    uint64_t v24 = -1;
    unint64_t v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v6, a2, (uint64_t)&v11);
    if (*((void *)&v15 + 1))
    {
      if (v18) {
        (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
      }
      uint64_t v18 = 0;
      long long v16 = 0uLL;
      *((void *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (void)v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v7 + 40), a3);
  uint64_t v8 = a1 + 88;
  unint64_t v9 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (!v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v14 = 0;
    uint64_t v13 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = -1;
    uint64_t v21 = 0;
    uint64_t v22 = -1;
    char v23 = 0;
    uint64_t v24 = -1;
    unint64_t v9 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v8, a2, (uint64_t)&v11);
    if (*((void *)&v15 + 1))
    {
      if (v18) {
        (*(void (**)(void))(**((void **)&v15 + 1) + 40))();
      }
      uint64_t v18 = 0;
      long long v16 = 0uLL;
      *((void *)&v15 + 1) = 0;
      ++v17;
    }
    if (v11 && (void)v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
  }
  return re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v9 + 40), a3);
}

void re::RenderGraphScopeOutput::addBufferToLane(uint64_t a1, uint64_t *a2, double *a3, int a4)
{
  uint64_t v7 = a1 + 88;
  uint64_t v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 88, a2);
  if (v8) {
    goto LABEL_10;
  }
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = -1;
  uint64_t v18 = 0;
  uint64_t v19 = -1;
  char v20 = 0;
  uint64_t v21 = -1;
  re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(v7, a2, (uint64_t)v10);
  if (*((void *)&v12 + 1))
  {
    if (v15) {
      (*(void (**)(void))(**((void **)&v12 + 1) + 40))();
    }
    uint64_t v15 = 0;
    long long v13 = 0uLL;
    *((void *)&v12 + 1) = 0;
    ++v14;
  }
  if (v10[0] && (void)v12) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  uint64_t v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v7, a2);
  if (v8)
  {
LABEL_10:
    *(_OWORD *)(v8 + 96) = *(_OWORD *)a3;
    if (a4) {
      re::DynamicArray<re::RenderGraphTargetHandle>::add((_anonymous_namespace_ *)(v8 + 40), a3);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "outputList", "addBufferToLane", 49);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v8 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(void *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v35, v13, v12);
          long long v15 = *(_OWORD *)v35;
          *(_OWORD *)unint64_t v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v35[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v35[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = (void *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              ++v21;
              v22 += 18;
            }
            while (v21 < v20);
          }
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v12) {
          signed int v27 = 2 * v11;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 144 * v8);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 144 * v8);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 144 * v8;
  *(_DWORD *)(v25 + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 144 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 144 * v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a4;
  uint64_t v29 = *(void *)(a1 + 16) + 144 * v8;
  *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(v29 + 24) = 0;
  *(void *)(v29 + 32) = 0;
  *(_DWORD *)(v29 + 40) = 0;
  *(void *)(v29 + 16) = 0;
  *(void *)(v29 + 16) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v29 + 24) = *(void *)(a5 + 8);
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v30 = *(void *)(v29 + 32);
  *(void *)(v29 + 32) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v30;
  uint64_t v31 = *(void *)(v29 + 48);
  *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v31;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v29 + 40);
  *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
  *(void *)(v29 + 64) = 0;
  *(void *)(v29 + 72) = 0;
  *(void *)(v29 + 56) = 0;
  *(_DWORD *)(v29 + 80) = 0;
  *(void *)(v29 + 56) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = 0;
  *(void *)(v29 + 64) = *(void *)(a5 + 48);
  *(void *)(a5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  uint64_t v32 = *(void *)(v29 + 72);
  *(void *)(v29 + 72) = *(void *)(a5 + 56);
  *(void *)(a5 + 56) = v32;
  uint64_t v33 = *(void *)(v29 + 88);
  *(void *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = *(void *)(a5 + 72);
  *(void *)(a5 + 72) = v33;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v29 + 80);
  *(void *)(v29 + 96) = 0;
  *(void *)(v29 + 104) = -1;
  *(void *)(v29 + 96) = *(void *)(a5 + 80);
  *(void *)(v29 + 104) = *(void *)(a5 + 88);
  *(void *)(v29 + 112) = 0;
  *(void *)(v29 + 120) = -1;
  *(void *)(v29 + 112) = *(void *)(a5 + 96);
  *(void *)(v29 + 120) = *(void *)(a5 + 104);
  *(_OWORD *)(v29 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = *(_OWORD *)(a5 + 112);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 144 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 144;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(uint64_t result)
{
  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    *(_DWORD *)result &= ~0x80000000;
    *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    uint64_t v1 = result + 16;
    re::DynamicArray<unsigned long>::deinit(result + 56);
    return re::DynamicArray<unsigned long>::deinit(v1);
  }
  return result;
}

void *re::DynamicArray<re::RenderGraphTargetHandle>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_15;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (void *)(v8 + 16 * v9);
        uint64_t v11 = v7;
        signed int v12 = (void *)v5[4];
        do
        {
          *uint64_t v11 = 0;
          v11[1] = -1;
          *uint64_t v11 = *v12;
          v11[1] = v12[1];
          v12 += 2;
          v11 += 2;
        }
        while (v12 != v10);
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t ___ZN2re22MaterialParameterTable16kDefaultNameHashEv_block_invoke()
{
  v1[2] = *MEMORY[0x263EF8340];
  uint64_t result = MurmurHash3_x64_128((uint64_t)"Default", 7, 0, v1);
  re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash = (v1[1]
                                                                         + (v1[0] << 6)
                                                                         + (v1[0] >> 2)
                                                                         - 0x61C8864680B583E9) ^ v1[0];
  return result;
}

uint64_t ___ZN2re22MaterialParameterTable13kFadeNameHashEv_block_invoke()
{
  v1[2] = *MEMORY[0x263EF8340];
  uint64_t result = MurmurHash3_x64_128((uint64_t)"Fade", 4, 0, v1);
  re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash = (v1[1]
                                                                   + (v1[0] << 6)
                                                                   + (v1[0] >> 2)
                                                                   - 0x61C8864680B583E9) ^ v1[0];
  return result;
}

BOOL re::MaterialParameterHandle::isParameterType(uint64_t a1, int a2)
{
  int v2 = 64;
  switch(*(unsigned char *)(a1 + 12) & 7)
  {
    case 1:
      int v2 = *(unsigned __int8 *)(a1 + 24);
      if (v2 != 48 && v2 != 34) {
        return v2 == a2;
      }
      return a2 == 34 || a2 == 48;
    case 2:
      return v2 == a2;
    case 3:
      int v2 = 128;
      return v2 == a2;
    case 4:
      int v2 = 192;
      return v2 == a2;
    default:
      int v2 = 0;
      return v2 == a2;
  }
}

uint64_t re::TextureParameterTable::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit(a1 + 200);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1 + 136);
    if (a2[25])
    {
      unint64_t v5 = a2[27];
      re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity((void *)(a1 + 200), v5);
      ++*(_DWORD *)(a1 + 224);
      uint64_t v30 = a2 + 17;
      unint64_t v6 = a2[19];
      if (v6 >= 0x10)
      {
        uint64_t v7 = 0;
        uint64_t v8 = a2[17];
        unint64_t v9 = v6 >> 4;
        while (1)
        {
          unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v31 = (unsigned __int16)~v10;
          if (v10 != 0xFFFF) {
            break;
          }
          v7 += 16;
          if (!--v9) {
            goto LABEL_10;
          }
        }
        uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
        for (i = v11; i != -1; uint64_t v11 = i)
        {
          uint64_t v12 = v30[1] + 16 * v11;
          unint64_t v13 = *(unsigned __int8 *)(v12 + 9);
          uint64_t v29 = *(void *)v12;
          BOOL v14 = (const re::TextureHandle *)re::TextureHandleTable::textureHandleAt((re::TextureHandleTable *)(a2 + 16), v13);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v28, v14);
          re::TextureHandleTable::setTexture((void *)(a1 + 128), &v29, v28);
          re::TextureHandle::invalidate((re::TextureHandle *)v28);
          uint64_t v29 = 0;
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v30);
        }
      }
    }
LABEL_10:
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(a1 + 304);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1 + 240);
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 344) = 0;
    if (a2[38])
    {
      unint64_t v16 = a2[40];
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a1 + 304), v16);
      ++*(_DWORD *)(a1 + 328);
      uint64_t v30 = a2 + 30;
      unint64_t v17 = a2[32];
      if (v17 >= 0x10)
      {
        uint64_t v18 = 0;
        uint64_t v19 = a2[30];
        unint64_t v20 = v17 >> 4;
        while (1)
        {
          unsigned __int16 v21 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v19 + v18)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v31 = (unsigned __int16)~v21;
          if (v21 != 0xFFFF) {
            break;
          }
          v18 += 16;
          if (!--v20) {
            goto LABEL_20;
          }
        }
        uint64_t v22 = __clz(__rbit64((unsigned __int16)~v21)) + v18;
        for (i = v22; i != -1; uint64_t v22 = i)
        {
          uint64_t v23 = v30[1] + 16 * v22;
          unint64_t v24 = *(unsigned __int8 *)(v23 + 8);
          uint64_t v27 = *(void *)v23;
          id v26 = *(id *)re::SamplerTable::samplerAt((re::SamplerTable *)(a2 + 30), v24);
          re::SamplerTable::setSampler((void *)(a1 + 240), &v27, &v26);
          if (v26)
          {

            id v26 = 0;
          }
          uint64_t v27 = 0;
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v30);
        }
      }
    }
LABEL_20:
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)a1, a2);
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 64), a2 + 8);
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy((_anonymous_namespace_ *)(a1 + 352), a2 + 44);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 416), a2 + 52);
  }
  return a1;
}

void re::TextureHandleTable::setTexture(void *a1, uint64_t *a2, os_unfair_lock_s **a3)
{
  re::TextureHandle::metalTexture(a3, &v11);
  unint64_t v6 = v11;
  if (v11)
  {
    re::TextureHandle::metalTexture(a3, &v10);
    id v7 = v10;
    id v8 = objc_msgSend(v10, sel_protectionOptions);
    if (v7) {
  }
    }
  else
  {
    id v8 = 0;
  }
  uint64_t v9 = *a2;
  re::TextureTableImpl<re::TextureHandle>::setTexture(a1, &v9, (const re::TextureHandle *)a3, (uint64_t)v8);
}

unint64_t re::TextureHandleTable::textureHandleAt(re::TextureHandleTable *this, unint64_t a2)
{
  if (*((void *)this + 11) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 13) + 40 * a2;
}

unint64_t re::SamplerTable::samplerAt(re::SamplerTable *this, unint64_t a2)
{
  if (*((void *)this + 10) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 12) + 8 * a2;
}

uint64_t *re::TextureParameterTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 8, a2 + 8);
  }
  if (a2[25]) {
    re::TextureTableImpl<re::TextureHandle>::operator=((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  }
  if (a2[38]) {
    re::SamplerTable::operator=(a1 + 30, a2 + 30);
  }
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 44, a2 + 44);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 52, a2 + 52);
  }
  return a1;
}

uint64_t *re::SamplerTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2) {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
  }
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  a1[13] = a2[13];
  return a1;
}

double re::TextureParameterTable::deinit(re::TextureParameterTable *this)
{
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::deinit((uint64_t)this + 200);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 136);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 304);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 240);
  *((void *)this + 43) = 0;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 352);
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 416);
}

void *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(void *result)
{
  result[5] = 0;
  result[6] = 0;
  unint64_t v1 = result[2];
  result[3] = 0;
  result[4] = v1;
  if (v1 >= 0x10)
  {
    unint64_t v2 = 0;
    *(void *)&long long v3 = -1;
    *((void *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*result + 16 * v2++) = v3;
      unint64_t v1 = result[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    uint64_t v4 = 40 * v1;
    unint64_t v5 = (void *)(result[1] + 32);
    do
    {
      *unint64_t v5 = 0;
      *(v5 - 2) = 0;
      *(v5 - 4) = 0;
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  unint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v1;
  if (v1 >= 0x10)
  {
    unint64_t v2 = 0;
    *(void *)&long long v3 = -1;
    *((void *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*(void *)a1 + 16 * v2++) = v3;
      unint64_t v1 = *(void *)(a1 + 16);
    }
    while (v2 < v1 >> 4);
  }
  if (v1) {
    bzero(*(void **)(a1 + 8), 16 * v1);
  }
}

BOOL re::TextureParameterTable::containsTextureKey(void *a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 17, a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2) != -1;
}

uint64_t *re::ShaderParameterTable::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1, a2);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(a1 + 8, a2 + 8);
  }
  re::ConstantTable::operator=((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
  re::BufferTable::operator=((uint64_t)(a1 + 30), (uint64_t)(a2 + 30));
  return a1;
}

uint64_t re::ConstantTable::operator=(uint64_t a1, uint64_t a2)
{
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + 8, a2 + 8);
  if (a1 != a2) {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  }
  return a1;
}

double re::ShaderParameterTable::deinit(re::ShaderParameterTable *this)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 136);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 176);
  re::BufferTable::deinit((re::ShaderParameterTable *)((char *)this + 240));
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this);
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 64);
}

BOOL re::ShaderParameterTable::containsConstantKey(void *a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 22, a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2) != -1;
}

BOOL re::ShaderParameterTable::containsBufferKey(uint64_t a1, uint64_t *a2)
{
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 240), a2) != -1|| re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)(a1 + 64), a2) != -1;
}

uint64_t re::MaterialParameterTable::operator=(uint64_t a1, uint64_t a2)
{
  re::ShaderParameterTable::operator=((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  re::TextureParameterTable::operator=((uint64_t *)(a1 + 552), (uint64_t *)(a2 + 552));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a1 + 1032, (uint64_t *)(a2 + 1032));
  if (*(unsigned char *)(a1 + 1080)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *(unsigned char *)(a2 + 1080) == 0;
  }
  if (!v4)
  {
    if (!*(unsigned char *)(a1 + 1080) || *(unsigned char *)(a2 + 1080))
    {
      if (!*(unsigned char *)(a1 + 1080) && *(unsigned char *)(a2 + 1080)) {
        *(unsigned char *)(a1 + 1080) = 1;
      }
      *(void *)(a1 + 1081) = *(void *)(a2 + 1081);
    }
    else
    {
      *(unsigned char *)(a1 + 1080) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 1092) || *(unsigned char *)(a2 + 1092))
  {
    if (!*(unsigned char *)(a1 + 1092) || *(unsigned char *)(a2 + 1092))
    {
      if (!*(unsigned char *)(a1 + 1092) && *(unsigned char *)(a2 + 1092)) {
        *(unsigned char *)(a1 + 1092) = 1;
      }
      uint64_t v5 = *(void *)(a2 + 1096);
      *(_DWORD *)(a1 + 1104) = *(_DWORD *)(a2 + 1104);
      *(void *)(a1 + 1096) = v5;
    }
    else
    {
      *(unsigned char *)(a1 + 1092) = 0;
    }
  }
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(unsigned char *)(a1 + 1120) = *(unsigned char *)(a2 + 1120);
  return a1;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::MaterialParameterTable::MaterialParameterTable(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E705458;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  v6 += 24;
  *(void *)(a1 + 152) = &unk_26E6D3970;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(void *)(a1 + 40re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 424) = 1;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 4re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 464) = 0;
  *(void *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 52re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  re::ShaderParameterTable::operator=((uint64_t *)v6, a2);
  *(void *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 56re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 6re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 680) = &unk_26E6D78A0;
  *(_OWORD *)(a1 + 80re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 86re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 96re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 8re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = 0u;
  re::TextureParameterTable::operator=(a1 + 552, a3);
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 10re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(a1 + 1064) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1080) = 0;
  *(unsigned char *)(a1 + 1092) = 0;
  *(_WORD *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 1122) = 0;
  return a1;
}

unint64_t re::MaterialParameterTable::handle@<X0>(re::MaterialParameterTable *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 25, a2);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)a1 + 26) + 16 * v6;
    __int16 v8 = *(_WORD *)(v7 + 8);
    __int16 v9 = *(unsigned __int8 *)(v7 + 10);
    unint64_t result = re::MaterialParameterTable::hash(a1);
    char v11 = *(unsigned char *)(v7 + 11);
    char v12 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 3, a2) != -1)
  {
    unint64_t result = re::MaterialParameterTable::hash(a1);
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 17;
    goto LABEL_10;
  }
  uint64_t v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 86, a2);
  if (v13 != -1)
  {
    __int16 v8 = *(unsigned __int8 *)(*((void *)a1 + 87) + 16 * v13 + 9);
    unint64_t result = re::MaterialParameterTable::hash(a1);
    char v11 = 0;
    char v12 = 2;
LABEL_7:
    __int16 v9 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 69, a2) != -1)
  {
    unint64_t result = re::MaterialParameterTable::hash(a1);
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 18;
    goto LABEL_10;
  }
  uint64_t v14 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 33, a2);
  if (v14 != -1)
  {
    __int16 v8 = *(unsigned __int8 *)(*((void *)a1 + 34) + 16 * v14 + 8);
    unint64_t result = re::MaterialParameterTable::hash(a1);
    char v11 = 0;
    char v12 = 3;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 11, a2) != -1)
  {
    unint64_t result = re::MaterialParameterTable::hash(a1);
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 19;
    goto LABEL_10;
  }
  uint64_t v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 99, a2);
  if (v15 != -1)
  {
    __int16 v8 = *(unsigned __int8 *)(*((void *)a1 + 100) + 16 * v15 + 8);
    unint64_t result = re::MaterialParameterTable::hash(a1);
    char v11 = 0;
    char v12 = 4;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 77, a2) == -1)
  {
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v12 = 0;
    unint64_t result = 0;
    char v11 = 0;
  }
  else
  {
    unint64_t result = re::MaterialParameterTable::hash(a1);
    __int16 v8 = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 20;
  }
LABEL_10:
  *(void *)a3 = *a2;
  *(_WORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v8;
  *(_WORD *)(a3 + 10) = v9;
  *(unsigned char *)(a3 + 12) = v12;
  *(void *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 24) = v11;
  return result;
}

unint64_t re::MaterialParameterTable::hash(re::MaterialParameterTable *this)
{
  if (*((unsigned char *)this + 1120)) {
    return *((void *)this + 139);
  }
  unint64_t v2 = (*((void *)this + 17)
      + ((*((void *)this + 75) - 0x61C8864680B583E9) << 6)
      + ((unint64_t)(*((void *)this + 75) - 0x61C8864680B583E9) >> 2)
      - 0x61C8864680B583E9) ^ (*((void *)this + 75) - 0x61C8864680B583E9);
  unint64_t v3 = (*((void *)this + 83) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  unint64_t v4 = (*((void *)this + 92) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  unint64_t v5 = (*((void *)this + 39) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  unint64_t v6 = (*((void *)this + 105) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  unint64_t v7 = (*((void *)this + 9) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
  unint64_t v8 = (*((void *)this + 31) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  unint64_t v9 = (*((void *)this + 119) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  unint64_t v1 = (*((void *)this + 127) + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  if (*((unsigned char *)this + 1080))
  {
    if (*((unsigned __int8 *)this + 1081) == 255)
    {
      unint64_t v11 = 0x9E3779B97F4A7C17;
    }
    else
    {
      unint64_t v10 = 0xBF58476D1CE4E5B9 * (*(void *)((char *)this + 1081) ^ (*(void *)((char *)this + 1081) >> 30));
      unint64_t v11 = ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
          - 0x61C8864680B583E9;
    }
    v1 ^= (v1 >> 2) + (v1 << 6) + v11;
  }
  if (*((unsigned char *)this + 1092))
  {
    unint64_t v12 = ((v1 << 6) - 0x61C8864680B583E9 + (v1 >> 2) + (unint64_t)*((float *)this + 274)) ^ v1;
    unint64_t v13 = ((unint64_t)*((float *)this + 275) - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
    unint64_t v1 = ((unint64_t)*((float *)this + 276) - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13;
  }
  *((unsigned char *)this + 1120) = 1;
  *((void *)this + 139) = v1;
  return v1;
}

BOOL re::MaterialParameterTable::BOOLValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned char *)(*(void *)(a1 + 192) + v2) != 0;
}

float re::MaterialParameterTable::floatValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(float *)(*(void *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::intValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(void *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::vector2FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::int2Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(void *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::vector3FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(void *)(a1 + 192) + v2);
}

double re::MaterialParameterTable::int3Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(double *)(*(void *)(a1 + 192) + v2);
}

uint64_t re::MaterialParameterTable::vector4FValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 192) + v2);
}

__n128 re::MaterialParameterTable::int4Value(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(__n128 *)(*(void *)(a1 + 192) + v2);
}

__n128 re::MaterialParameterTable::matrix3x3FValue@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unint64_t v6 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v7 = *(void *)(a1 + 192) + v6;
  a4.n128_u64[0] = *(void *)v7;
  a5.n128_u64[0] = *(void *)(v7 + 16);
  a6.n128_u64[0] = *(void *)(v7 + 32);
  a4.n128_u32[2] = *(_DWORD *)(v7 + 8);
  a5.n128_u32[2] = *(_DWORD *)(v7 + 24);
  a6.n128_u32[2] = *(_DWORD *)(v7 + 40);
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a6;
  result.n128_u64[0] = a4.n128_u64[0];
  result.n128_u32[2] = a4.n128_u32[2];
  return result;
}

__n128 re::MaterialParameterTable::matrix4x4FValue@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 176) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v4 = *(void *)(a1 + 192) + v3;
  __n128 result = *(__n128 *)v4;
  long long v6 = *(_OWORD *)(v4 + 16);
  long long v7 = *(_OWORD *)(v4 + 32);
  long long v8 = *(_OWORD *)(v4 + 48);
  *a3 = *(_OWORD *)v4;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

unint64_t re::BufferTable::bufferAt(re::BufferTable *this, unint64_t a2)
{
  if (*((void *)this + 10) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 12) + 16 * a2;
}

void re::MaterialParameterTable::bindingValue(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(*((unsigned char *)a2 + 12) & 7)
  {
    case 1:
      *(void *)buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 3, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 4);
      goto LABEL_8;
    case 2:
      *(void *)buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 69, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 70);
      goto LABEL_8;
    case 3:
      *(void *)buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 11, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 12);
      goto LABEL_8;
    case 4:
      *(void *)buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 77, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 78);
LABEL_8:
      uint64_t v9 = v7 + 40 * v6;
      *(_DWORD *)a3 = *(_DWORD *)(v9 + 8);
      *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)(v9 + 16);
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(v9 + 24);
      *(void *)(a3 + 24) = *(void *)(v9 + 32);
      break;
    default:
      long long v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *a2;
        if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v11 = 0;
        }
        else if (v10)
        {
          unint64_t v11 = re::WeakStringID::debugStr(void)const::msg;
          snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
        }
        else
        {
          unint64_t v11 = "";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = v11;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Attempted to get a binding from an invalid handle %s", buf, 0xCu);
      }
      *(_DWORD *)a3 = 3;
      re::StringID::invalid((re::StringID *)buf);
      *(void *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(void *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      *(unsigned char *)(a3 + 16) = 0;
      re::StringID::invalid((re::StringID *)buf);
      *(void *)(a3 + 24) = *(void *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      break;
  }
}

uint64_t re::MaterialParameterTable::buildPerFrameDestructor(re::MaterialParameterTable *this, re::Allocator *a2)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t result = (*(uint64_t (**)(re::Allocator *))(*(void *)a2 + 24))(a2);
  if ((result & 1) == 0
    && (*((void *)this + 96)
     || *((void *)this + 43)
     || *((void *)this + 109)
     || *((void *)this + 6)
     || *((void *)this + 14)
     || *((void *)this + 72)
     || *((void *)this + 80)))
  {
    uint64_t v5 = re::globalAllocators((re *)result)[2];
    v6[0] = &unk_26E70DCA0;
    void v6[3] = v5;
    v6[4] = v6;
    (*(void (**)(re::Allocator *, re::MaterialParameterTable *, void *))(*(void *)a2 + 16))(a2, this, v6);
    return (uint64_t)re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v6);
  }
  return result;
}

void *re::MaterialParameterTable::passTechniqueHashTable(re::MaterialParameterTable *this, uint64_t a2, int a3)
{
  uint64_t v7 = a2;
  unint64_t v4 = (char *)this + 1032;
  uint64_t result = (void *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v7);
  if (!result)
  {
    if (!a3) {
      return &re::MaterialParameterTable::passTechniqueHashTable(unsigned long,BOOL)const::kDummy;
    }
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    }
    uint64_t v6 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    uint64_t result = (void *)re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)v4, &v6);
    if (!result) {
      return &re::MaterialParameterTable::passTechniqueHashTable(unsigned long,BOOL)const::kDummy;
    }
  }
  return result;
}

double re::MaterialParameterTable::initPassTechniqueMappings(re::MaterialParameterTable *this, re::Allocator *a2, signed int a3, uint64_t a4)
{
  uint64_t v11 = a4;
  uint64_t v6 = (char *)this + 1032;
  if (!*((void *)this + 129)) {
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)this + 1032, (uint64_t)a2, 1);
  }
  int v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v10 = 0x7FFFFFFFLL;
  re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v8, (uint64_t)a2, a3);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v6, &v11, (uint64_t *)v8);
  return re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v8);
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_75, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 72 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v14 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 72 * v14;
    return v13 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = 9 * v10;
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(v11 + 72 * v10 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 8 * v12;
  return v13 + 24;
}

uint64_t re::MaterialParameterTable::appendPassTechniqueMappingsFrom(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a3;
  uint64_t v4 = (uint64_t)a1 + 1032;
  if (!*((void *)a1 + 129))
  {
  }
  uint64_t result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(v4, &v15);
  if (!result) {
    return re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(v4, &v15, a2);
  }
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(a2 + 32);
  if (v7)
  {
    uint64_t v8 = 0;
    unint64_t v9 = *(int **)(a2 + 16);
    while (1)
    {
      int v10 = *v9;
      v9 += 6;
      if (v10 < 0) {
        break;
      }
      if (v7 == ++v8)
      {
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  if (v7 != v8)
  {
    uint64_t v11 = v8;
    uint64_t v12 = *(void *)(a2 + 16);
    do
    {
      uint64_t result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v6, (unint64_t *)(v12 + 24 * v11 + 8), (void *)(v12 + 24 * v11 + 16));
      uint64_t v12 = *(void *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v8 + 1)) {
        int v13 = v8 + 1;
      }
      else {
        int v13 = *(_DWORD *)(a2 + 32);
      }
      int v14 = v8;
      while (1)
      {
        uint64_t v11 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v11;
        if ((*(_DWORD *)(v12 + 24 * v11) & 0x80000000) != 0) {
          goto LABEL_21;
        }
      }
      LODWORD(vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;
LABEL_21:
      ;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = 3 * v8;
  *(void *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::MaterialParameterTable::addPassTechniqueMapping(re::MaterialParameterTable *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  unint64_t v13 = a2;
  uint64_t v11 = a4;
  uint64_t v4 = (uint64_t *)((char *)this + 1032);
  uint64_t v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 1032, &v11);
  if (!v5)
  {
    uint64_t v6 = *v4;
    memset(v8, 0, sizeof(v8));
    int v9 = 0;
    uint64_t v10 = 0x7FFFFFFFLL;
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v8, v6, 1);
    uint64_t v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v4, &v11, (uint64_t *)v8);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v8);
  }
  return re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v5, &v13, &v12);
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = *a2 % (unint64_t)*(unsigned int *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(v4 + 4 * v3);
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(void *)(v7 + 24 * v5 + 8) != v2)
  {
    while (1)
    {
      unsigned int v8 = v5;
      LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5) & 0x7FFFFFFF;
      if (v5 == 0x7FFFFFFF) {
        return 0;
      }
      if (*(void *)(v7 + 24 * v5 + 8) == v2)
      {
        *(_DWORD *)(v7 + 24 * vre::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v7 + 24 * v8) & 0x80000000 | *(_DWORD *)(v7 + 24
                                                                                                * v5) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v7 + 24 * v5) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (int *)(v9 + 24 * v5);
  int v11 = *v10;
  if (*v10 < 0)
  {
    *uint64_t v10 = v11 & 0x7FFFFFFF;
    uint64_t v9 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v9 + 24 * v5);
  }
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v9 + 24 * v5) = *(_DWORD *)(a1 + 36) | v11 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v5;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

double re::MaterialParameterTable::clearPassTechniqueMappings(re::MaterialParameterTable *this)
{
  uint64_t v2 = (re::Allocator *)*((void *)this + 129);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 1032);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
  uint64_t v3 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  return re::MaterialParameterTable::initPassTechniqueMappings(this, v2, 1, v3);
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_12, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v6 + 24));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void *re::MaterialParameterTableDelta::init(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  *(void *)(a1 + 16) = a2;
  re::DynamicArray<BOOL>::setCapacity((void *)(a1 + 16), 0);
  ++*(_DWORD *)(v3 + 40);
  *(void *)(v3 + 56) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity((void *)(v3 + 56), 0);
  ++*(_DWORD *)(v3 + 80);
  *(void *)(v3 + 96) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity((void *)(v3 + 96), 0);
  ++*(_DWORD *)(v3 + 120);
  *(void *)(v3 + 136) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity((void *)(v3 + 136), 0);
  ++*(_DWORD *)(v3 + 160);
  *(void *)(v3 + 176) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity((void *)(v3 + 176), 0);
  *(void *)(v3 + 216) = a2;
  v3 += 216;
  ++*(_DWORD *)(v3 - 16);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((void *)v3, 0);
  ++*(_DWORD *)(v3 + 24);
  *(void *)(v3 + 40) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((void *)(v3 + 40), 0);
  ++*(_DWORD *)(v3 + 64);
  *(void *)(v3 + 80) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((void *)(v3 + 80), 0);
  ++*(_DWORD *)(v3 + 104);
  *(void *)(v3 + 120) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity((void *)(v3 + 120), 0);
  ++*(_DWORD *)(v3 + 144);
  *(void *)(v3 + 160) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity((void *)(v3 + 160), 0);
  ++*(_DWORD *)(v3 + 184);
  *(void *)(v3 + 200) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity((void *)(v3 + 200), 0);
  ++*(_DWORD *)(v3 + 224);
  *(void *)(v3 + 240) = a2;
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity((void *)(v3 + 240), 0);
  ++*(_DWORD *)(v3 + 264);
  *(void *)(v3 + 280) = a2;
  uint64_t result = re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity((void *)(v3 + 280), 0);
  ++*(_DWORD *)(v3 + 304);
  return result;
}

uint64_t re::MaterialParameterTableDelta::deinit(re::MaterialParameterTableDelta *this)
{
  uint64_t v3 = (void *)((char *)this + 96);
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 16);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 14);
      if (v5)
      {
        uint64_t v6 = 32 * v5;
        int v7 = (id *)(v4 + 16);
        do
        {
          if (*((unsigned char *)v7 - 8) && *v7)
          {

            *int v7 = 0;
          }
          *(v7 - 2) = 0;
          v7 += 4;
          v6 -= 32;
        }
        while (v6);
        uint64_t v2 = *((void *)this + 12);
        uint64_t v4 = *((void *)this + 16);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v4);
    }
    *((void *)this + 16) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *uint64_t v3 = 0;
    ++*((_DWORD *)this + 30);
  }
  uint64_t v8 = *((void *)this + 17);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 21);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 19);
      if (v10)
      {
        uint64_t v11 = 32 * v10;
        int v12 = (re::TextureHandle *)(v9 + 16);
        do
        {
          if (*((unsigned char *)v12 - 8)) {
            re::TextureHandle::invalidate(v12);
          }
          *((void *)v12 - 2) = 0;
          int v12 = (re::TextureHandle *)((char *)v12 + 32);
          v11 -= 32;
        }
        while (v11);
        uint64_t v8 = *((void *)this + 17);
        uint64_t v9 = *((void *)this + 21);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40))(v8, v9);
    }
    *((void *)this + 21) = 0;
    *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *((void *)this + 19) = 0;
    *((void *)this + 17) = 0;
    ++*((_DWORD *)this + 40);
  }
  uint64_t result = *((void *)this + 22);
  if (result)
  {
    uint64_t v14 = *((void *)this + 26);
    if (v14)
    {
      uint64_t v15 = *((void *)this + 24);
      if (v15)
      {
        uint64_t v16 = 24 * v15;
        unint64_t v17 = (id *)(v14 + 16);
        do
        {
          if (*((unsigned char *)v17 - 8))
          {
            if (*v17)
            {

              *unint64_t v17 = 0;
            }
          }
          *(v17 - 2) = 0;
          v17 += 3;
          v16 -= 24;
        }
        while (v16);
        uint64_t result = *((void *)this + 22);
        uint64_t v14 = *((void *)this + 26);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v14);
    }
    *((void *)this + 26) = 0;
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    *((void *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  return result;
}

uint64_t re::MaterialParameterTableDelta::encodeClear(re::MaterialParameterTableDelta *this)
{
  *((void *)this + 4) = 0;
  ++*((_DWORD *)this + 10);
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 11);
    uint64_t v4 = 16 * v2;
    do
    {
      *uint64_t v3 = 0;
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  ++*((_DWORD *)this + 20);
  uint64_t v5 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v5)
  {
    uint64_t v6 = 32 * v5;
    int v7 = (id *)(*((void *)this + 16) + 16);
    do
    {
      if (*((unsigned char *)v7 - 8) && *v7)
      {

        *int v7 = 0;
      }
      *(v7 - 2) = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  ++*((_DWORD *)this + 30);
  uint64_t v8 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v8)
  {
    uint64_t v9 = 32 * v8;
    uint64_t v10 = (re::TextureHandle *)(*((void *)this + 21) + 16);
    do
    {
      if (*((unsigned char *)v10 - 8)) {
        re::TextureHandle::invalidate(v10);
      }
      *((void *)v10 - 2) = 0;
      uint64_t v10 = (re::TextureHandle *)((char *)v10 + 32);
      v9 -= 32;
    }
    while (v9);
  }
  ++*((_DWORD *)this + 40);
  uint64_t v11 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v11)
  {
    uint64_t v12 = 24 * v11;
    unint64_t v13 = (id *)(*((void *)this + 26) + 16);
    do
    {
      if (*((unsigned char *)v13 - 8) && *v13)
      {

        *unint64_t v13 = 0;
      }
      *(v13 - 2) = 0;
      v13 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  ++*((_DWORD *)this + 50);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 216);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 256);
  re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 296);
  uint64_t result = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear((uint64_t)this + 336);
  uint64_t v15 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v15)
  {
    uint64_t v16 = 24 * v15;
    unint64_t v17 = (void *)(*((void *)this + 51) + 16);
    do
    {
      if (*((unsigned char *)v17 - 8)) {
        *unint64_t v17 = 0;
      }
      *(v17 - 2) = 0;
      v17 += 3;
      v16 -= 24;
    }
    while (v16);
  }
  ++*((_DWORD *)this + 100);
  uint64_t v18 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v18)
  {
    uint64_t v19 = (void *)*((void *)this + 56);
    uint64_t v20 = 16 * v18;
    do
    {
      *uint64_t v19 = 0;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
  }
  ++*((_DWORD *)this + 110);
  uint64_t v21 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v21)
  {
    uint64_t v22 = (void *)*((void *)this + 61);
    uint64_t v23 = 16 * v21;
    do
    {
      *uint64_t v22 = 0;
      v22 += 2;
      v23 -= 16;
    }
    while (v23);
  }
  ++*((_DWORD *)this + 120);
  *((void *)this + 64) = 0;
  ++*((_DWORD *)this + 130);
  if (*((unsigned char *)this + 536)) {
    *((unsigned char *)this + 536) = 0;
  }
  if (*((unsigned char *)this + 548)) {
    *((unsigned char *)this + 5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  }
  *((unsigned char *)this + 564) = 1;
  return result;
}

uint64_t re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::clear(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v1)
  {
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (void *)(*(void *)(result + 32) + 24);
    do
    {
      if (*((unsigned char *)v3 - 16))
      {
        v3[2] = 0;
        *uint64_t v3 = 0;
      }
      *(v3 - 3) = 0;
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t applyBindingChanges(uint64_t result, uint64_t a2, _anonymous_namespace_ *a3)
{
  if (result)
  {
    uint64_t v4 = 48 * result;
    uint64_t v5 = a2 + 16;
    do
    {
      uint64_t v6 = (uint64_t *)(v5 - 16);
      if (*(unsigned char *)(v5 - 8)) {
        uint64_t result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(a3, v6, v5);
      }
      else {
        uint64_t result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove((uint64_t *)a3, v6);
      }
      v5 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, (int *)a3);
  }
  else
  {
    uint64_t v7 = 5 * v6;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)(*((void *)a1 + 1) + 40 * v6));
    uint64_t v8 = *((void *)a1 + 1) + 8 * v7;
    *(_DWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 8);
    *(unsigned char *)(v8 + 24) = *(unsigned char *)(a3 + 16);
    *(void *)(v8 + 32) = *(void *)(a3 + 24);
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)v8);
    return *((void *)a1 + 1) + 8 * v7 + 8;
  }
}

BOOL re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)(a1[1] + 40 * v3));
    unint64_t v9 = a1[2];
    uint64_t v10 = (void *)(a1[1] + 40 * v4);
    *uint64_t v10 = 0;
    v10[4] = 0;
    uint64_t v10[2] = 0;
    uint64_t v11 = a1[4];
    if (v7) {
      ++v11;
    }
    unint64_t v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v9 >= 0x11 && v12 < v9 >> 2) {
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

void re::MaterialParameterTableDelta::applyDeltaChange(re::MaterialParameterTableDelta *this)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  WeakRetained = objc_loadWeakRetained((id *)this + 1);
  uint64_t v4 = (re::MaterialParameterTable *)(WeakRetained - 1);
  if (WeakRetained) {
    uint64_t v5 = (char *)(WeakRetained - 1);
  }
  else {
    uint64_t v5 = 0;
  }
  if (WeakRetained)
  {
    int8x16_t v6 = WeakRetained;
    if (*((unsigned char *)this + 564))
    {
      WeakRetained[21] = 0;
      ++*((_DWORD *)WeakRetained + 44);
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(WeakRetained + 24);
      v6[42] = 0;
      ++*((_DWORD *)v6 + 86);
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear((uint64_t)(v6 + 50));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 32);
      re::DynamicArray<re::FixedArray<unsigned char>>::clear((uint64_t)(v6 + 57));
      v6[64] = 0;
      ++*((_DWORD *)v6 + 130);
      *((_DWORD *)v6 + 134) = 0;
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 2);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 10);
      uint64_t v7 = v6[95];
      v6[95] = 0;
      if (v7)
      {
        uint64_t v8 = v6[97];
        uint64_t v9 = 40 * v7;
        do
        {
          if (*(unsigned char *)(v8 + 16))
          {
            uint64_t v10 = *(void **)(v8 + 24);
            if (v10)
            {

              *(void *)(v8 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)v8);
          v8 += 40;
          v9 -= 40;
        }
        while (v9);
      }
      ++*((_DWORD *)v6 + 192);
      v6[88] = 0;
      *((_OWORD *)v6 + 45) = 0u;
      unint64_t v11 = v6[87];
      v6[89] = v11;
      if (v11 >= 0x10)
      {
        unint64_t v12 = 0;
        *(void *)&long long v13 = -1;
        *((void *)&v13 + 1) = -1;
        do
        {
          *(_OWORD *)(v6[85] + 16 * v12++) = v13;
          unint64_t v11 = v6[87];
        }
        while (v12 < v11 >> 4);
      }
      if (v11)
      {
        uint64_t v14 = (void *)v6[86];
        uint64_t v15 = 16 * v11;
        do
        {
          *uint64_t v14 = 0;
          v14 += 2;
          v15 -= 16;
        }
        while (v15);
      }
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)(v6 + 106));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 98);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 68);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(v6 + 76);
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)(v6 + 112));
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(v6 + 120);
      ++*((unsigned char *)v6 + 1113);
      ++*((unsigned char *)v6 + 1114);
      re::MaterialParameterTable::clearPassTechniqueMappings(v4);
      if (*((unsigned char *)v6 + 1072)) {
        *((unsigned char *)v6 + 1072) = 0;
      }
      if (*((unsigned char *)v6 + 1084)) {
        *((unsigned char *)v6 + 1084) = 0;
      }
    }
    uint64_t v16 = *((void *)this + 9);
    if (v16)
    {
      uint64_t v17 = *((void *)this + 11);
      uint64_t v18 = 16 * v16;
      do
      {
        if (*(unsigned char *)(v17 + 8))
        {
          uint64_t v19 = (void *)*(unsigned __int8 *)(v17 + 12);
          v87[0] = (id)(*((void *)this + 6) + *(unsigned __int16 *)(v17 + 10));
          v87[1] = v19;
          re::ConstantTable::setConstant(v6 + 18, (void *)v17, (uint64_t)v87, 0);
        }
        else
        {
          v87[0] = *(id *)v17;
          re::removeNameMappedConstant(v87, v6 + 24, v6 + 19);
        }
        v17 += 16;
        v18 -= 16;
      }
      while (v18);
      if (*((void *)this + 9)) {
        ++v5[1121];
      }
    }
    uint64_t v20 = *((void *)this + 14);
    if (v20)
    {
      uint64_t v21 = 32 * v20;
      uint64_t v22 = *((void *)this + 16) + 16;
      do
      {
        uint64_t v23 = (const re::WeakStringID *)(v22 - 16);
        if (*(unsigned char *)(v22 - 8)) {
          re::BufferTable::setBuffer((re::BufferTable *)(v5 + 264), v23, v22);
        }
        else {
          re::BufferTable::removeBuffer((re::BufferTable *)(v5 + 264), v23);
        }
        v22 += 32;
        v21 -= 32;
      }
      while (v21);
    }
    uint64_t v24 = *((void *)this + 19);
    if (v24)
    {
      uint64_t v25 = 32 * v24;
      id v26 = (const re::TextureHandle *)(*((void *)this + 21) + 16);
      do
      {
        if (*((unsigned char *)v26 - 8))
        {
          v79[0] = *((void *)v26 - 2);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v78, v26);
          re::TextureHandleTable::setTexture((void *)v5 + 85, v79, v78);
          re::TextureHandle::invalidate((re::TextureHandle *)v78);
          v79[0] = 0;
        }
        else
        {
          v87[0] = *((id *)v26 - 2);
          re::removeNameMappedProtectedTexture<re::DynamicArray<re::TextureViews<re::TextureHandle>>>(v87, (uint64_t *)v5 + 86, (uint64_t)(v5 + 752));
        }
        id v26 = (const re::TextureHandle *)((char *)v26 + 32);
        v25 -= 32;
      }
      while (v25);
    }
    uint64_t v27 = *((void *)this + 59);
    if (v27)
    {
      uint64_t v28 = *((void *)this + 61);
      for (uint64_t i = 16 * v27; i; i -= 16)
      {
        uint64_t v30 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v5 + 86, (void *)v28);
        if (v30 != -1)
        {
          if (*(unsigned char *)(v28 + 8)) {
            int v1 = *(_DWORD *)(v28 + 9);
          }
          unint64_t v31 = *(unsigned __int8 *)(*((void *)v5 + 87) + 16 * v30 + 9);
          unint64_t v32 = *((void *)v5 + 96);
          if (v32 <= v31)
          {
            v79[1] = 0;
            long long v90 = 0u;
            long long v91 = 0u;
            long long v88 = 0u;
            long long v89 = 0u;
            *(_OWORD *)unint64_t v87 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)char v80 = 136315906;
            *(void *)&v80[4] = "operator[]";
            __int16 v81 = 1024;
            int v82 = 789;
            __int16 v83 = 2048;
            unint64_t v84 = v31;
            __int16 v85 = 2048;
            unint64_t v86 = v32;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          uint64_t v33 = *((void *)v5 + 98);
          uint64_t v34 = v33 + 40 * *(unsigned __int8 *)(*((void *)v5 + 87) + 16 * v30 + 9);
          int v37 = *(unsigned __int8 *)(v34 + 32);
          unint64_t v35 = (unsigned char *)(v34 + 32);
          int v36 = v37;
          int v38 = v37 | *(unsigned __int8 *)(v28 + 8);
          if (*(unsigned char *)(v28 + 8) && v36)
          {
            uint64_t v39 = v33 + 40 * *(unsigned __int8 *)(*((void *)v5 + 87) + 16 * v30 + 9);
            int v41 = *(_DWORD *)(v39 + 33);
            int v40 = (_DWORD *)(v39 + 33);
            if (v41 != v1)
            {
              if (!v38) {
                goto LABEL_61;
              }
              goto LABEL_60;
            }
          }
          else if (v38)
          {
            if (!*(unsigned char *)(v28 + 8) && v36)
            {
              *unint64_t v35 = 0;
LABEL_61:
              LOBYTE(v87[0]) = 0;
              re::Optional<NS::SharedPtr<MTL::Texture>>::operator=(v33 + 40 * v31 + 16, v87);
              if (LOBYTE(v87[0]) && v87[1]) {

              }
              goto LABEL_64;
            }
            int v40 = (_DWORD *)(v33 + 40 * *(unsigned __int8 *)(*((void *)v5 + 87) + 16 * v30 + 9) + 33);
            if (*(unsigned char *)(v28 + 8) && !v36) {
              *unint64_t v35 = 1;
            }
LABEL_60:
            *int v40 = v1;
            goto LABEL_61;
          }
        }
LABEL_64:
        v28 += 16;
      }
    }
    if (*((void *)this + 19) || *((void *)this + 59)) {
      ++v5[1122];
    }
    uint64_t v42 = *((void *)this + 24);
    if (v42)
    {
      uint64_t v43 = (uint64_t *)*((void *)this + 26);
      unsigned int v44 = &v43[3 * v42];
      do
      {
        if (*((unsigned char *)v43 + 8))
        {
          uint64_t v77 = *v43;
          id v76 = (id)v43[2];
          re::SamplerTable::setSampler((void *)v5 + 99, &v77, &v76);
          if (v76)
          {

            id v76 = 0;
          }
          uint64_t v77 = 0;
        }
        else
        {
          *(void *)char v80 = *v43;
          uint64_t v45 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v5 + 99, v80);
          if (v45 != -1)
          {
            uint64_t v46 = *((void *)v5 + 100) + 16 * v45;
            re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt((uint64_t)(v5 + 856), *(unsigned __int8 *)(v46 + 8));
            unsigned int v47 = *(unsigned __int8 *)(v46 + 8);
            v87[0] = v5 + 792;
            unint64_t v48 = *((void *)v5 + 101);
            if (v48 >= 0x10)
            {
              uint64_t v49 = 0;
              uint64_t v50 = *((void *)v5 + 99);
              unint64_t v51 = v48 >> 4;
              while (1)
              {
                unsigned __int16 v52 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + v49)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
                v87[1] = (id)(unsigned __int16)~v52;
                if (v52 != 0xFFFF) {
                  break;
                }
                v49 += 16;
                if (!--v51) {
                  goto LABEL_84;
                }
              }
              uint64_t v53 = __clz(__rbit64((unsigned __int16)~v52)) + v49;
              *(void *)&long long v88 = v53;
              if (v53 != -1)
              {
                do
                {
                  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)(v5 + 792), *((void *)v5 + 100) + 16 * v53);
                  uint64_t v54 = *((void *)v5 + 100);
                  uint64_t v55 = v88;
                  uint64_t v56 = v54 + 16 * v88;
                  unsigned int v59 = *(unsigned __int8 *)(v56 + 8);
                  float v57 = (unsigned char *)(v56 + 8);
                  char v58 = v59;
                  if (v59 >= v47)
                  {
                    *float v57 = v58 - 1;
                    uint64_t v54 = *((void *)v5 + 100);
                    uint64_t v55 = v88;
                  }
                  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash((uint64_t)(v5 + 792), v54 + 16 * v55);
                  re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v87);
                  uint64_t v53 = v88;
                }
                while ((void)v88 != -1);
              }
            }
LABEL_84:
            re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove((uint64_t *)v5 + 99, v80);
          }
        }
        v43 += 3;
      }
      while (v43 != v44);
    }
    applyBindingChanges(*((void *)this + 29), *((void *)this + 31), (_anonymous_namespace_ *)(v5 + 24));
    applyBindingChanges(*((void *)this + 34), *((void *)this + 36), (_anonymous_namespace_ *)(v5 + 88));
    applyBindingChanges(*((void *)this + 39), *((void *)this + 41), (_anonymous_namespace_ *)(v5 + 552));
    applyBindingChanges(*((void *)this + 44), *((void *)this + 46), (_anonymous_namespace_ *)(v5 + 616));
    uint64_t v60 = *((void *)this + 49);
    if (v60)
    {
      uint64_t v61 = 24 * v60;
      char v62 = (uint64_t *)(*((void *)this + 51) + 16);
      do
      {
        uint64_t v63 = v62 - 2;
        if (*((unsigned char *)v62 - 8)) {
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace((_anonymous_namespace_ *)(v5 + 904), v63, v62);
        }
        else {
          re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove((uint64_t *)v5 + 113, v63);
        }
        v62 += 3;
        v61 -= 24;
      }
      while (v61);
    }
    uint64_t v64 = *((void *)this + 54);
    if (v64)
    {
      uint64_t v65 = 16 * v64;
      int v66 = (_DWORD *)(*((void *)this + 56) + 12);
      do
      {
        uint64_t v67 = v66 - 3;
        if (*((unsigned char *)v66 - 4)) {
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v5 + 968), v67, v66);
        }
        else {
          re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove((uint64_t *)v5 + 121, v67);
        }
        v66 += 4;
        v65 -= 16;
      }
      while (v65);
    }
    uint64_t v68 = *((void *)this + 64);
    if (v68)
    {
      uint64_t v69 = *((void *)this + 66);
      uint64_t v70 = 40 * v68;
      do
      {
        if (*(unsigned char *)(v69 + 32))
        {
          re::MaterialParameterTable::clearPassTechniqueMappings((re::MaterialParameterTable *)v5);
        }
        else if (*(unsigned char *)(v69 + 16))
        {
          re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v5, *(void *)(v69 + 8), *(void *)(v69 + 24), *(void *)v69);
        }
        else
        {
          uint64_t v71 = *(void *)v69;
          v87[0] = *(id *)(v69 + 8);
          *(void *)char v80 = v71;
          uint64_t v72 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)(v5 + 1032), (uint64_t *)v80);
          if (v72) {
            re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v72, (uint64_t *)v87);
          }
        }
        v69 += 40;
        v70 -= 40;
      }
      while (v70);
    }
    if (*((unsigned char *)this + 536))
    {
      uint64_t v73 = *(void *)((char *)this + 537);
      if (!v5[1080]) {
        v5[1080] = 1;
      }
      *(void *)(v5 + 1081) = v73;
    }
    if (*((unsigned char *)this + 548))
    {
      *(id *)((char *)v87 + 3) = *((id *)this + 69);
      *(_DWORD *)((char *)&v87[1] + 3) = *((_DWORD *)this + 140);
      uint64_t v74 = v5 + 1096;
      if (v5[1092])
      {
        uint64_t v75 = *((void *)this + 69);
        *((_DWORD *)v5 + 276) = *((_DWORD *)this + 140);
        *uint64_t v74 = v75;
      }
      else
      {
        v5[1092] = 1;
        *uint64_t v74 = *(id *)((char *)v87 + 3);
        *((_DWORD *)v5 + 276) = *(_DWORD *)((char *)&v87[1] + 3);
      }
    }
    v5[1120] = 0;
  }
}

uint64_t re::BufferTable::setBuffer(re::BufferTable *a1, const re::WeakStringID *a2, uint64_t a3)
{
  uint64_t v5 = re::BufferTable::getOrAddKey(a1, a2);
  re::BufferTable::setBufferRef((void **)a1, v5, (void **)a3);
  int8x16_t v6 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)a1 + 144, v5);
  re::BufferTable::setBufferView(a1, v5, *v6, *(void *)(a3 + 8));
  return re::BufferTable::setBufferIndirectResources(a1, v5, 0, 0);
}

BOOL re::BufferTable::removeBuffer(re::BufferTable *this, const re::WeakStringID *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(this, a2);
  uint64_t v5 = v4;
  if (v4 != -1)
  {
    uint64_t v6 = *((void *)this + 1) + 16 * v4;
    unsigned int v8 = *(unsigned __int8 *)(v6 + 8);
    uint64_t v7 = (unsigned __int8 *)(v6 + 8);
    re::DynamicArray<re::BufferView>::removeStableAt((void *)this + 8, v8);
    unint64_t v9 = *v7;
    unint64_t v10 = *((void *)this + 23);
    if (v10 > v9)
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::removeStableAt((uint64_t)this + 144, v9);
      unint64_t v10 = *((void *)this + 23);
    }
    unint64_t v11 = (*((_DWORD *)this + 70) - 1);
    *((_DWORD *)this + 70) = v11;
    if (v11 >= v10) {
      unsigned int v12 = v10;
    }
    else {
      unsigned int v12 = v11;
    }
    unint64_t v13 = *v7;
    if (v12 > v13)
    {
      uint64_t v14 = 16 * v13;
      if (v11 >= v10) {
        int v15 = v10;
      }
      else {
        int v15 = v11;
      }
      do
      {
        if (*(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 144, v13))
        {
          uint64_t v16 = (void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 144, v13);
          if (*((void *)this + 10) <= v13)
          {
            memset(v18, 0, sizeof(v18));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(void *)(*((void *)this + 12) + v14) = *v16;
        }
        ++v13;
        v14 += 16;
      }
      while (v15 != v13);
    }
    *(void *)&v18[0] = v7;
    _ZN2re9HashBrownINS_12WeakStringIDEhNS_4HashIS1_EENS_7EqualToIS1_EENS2_IhEELb0EE9mapValuesIZNS_11BufferTable12removeBufferERKS1_EUlRT_E_EEvOSC_((uint64_t *)this, (unsigned __int8 **)v18);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove((uint64_t *)this, a2);
    *(void *)&v18[0] = this;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(this, (uint64_t)v18);
    re::DynamicArray<re::FixedArray<unsigned long>>::removeStableAt((uint64_t)this + 200, *v7);
    re::DynamicArray<re::Allocator const*>::removeStableAt((void *)this + 30, *v7);
  }
  return v5 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = v6;
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash((uint64_t)a1, (void *)(*((void *)a1 + 1) + 16 * v6));
    unsigned int v8 = (void *)(*((void *)a1 + 1) + 16 * v7);
    v8[1] = *a3;
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash((uint64_t)a1, v8);
    return *((void *)a1 + 1) + 16 * v7 + 8;
  }
}

BOOL re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes((uint64_t)a1, (void *)(a1[1] + 16 * v3));
    unint64_t v9 = (void *)(a1[1] + 16 * v4);
    *unint64_t v9 = 0;
    v9[1] = 0;
    if (v7) {
      uint64_t v10 = a1[4] + 1;
    }
    else {
      uint64_t v10 = a1[4];
    }
    unint64_t v11 = a1[2];
    unint64_t v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2) {
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = v6;
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v6);
    uint64_t v8 = *((void *)a1 + 1) + 16 * v7;
    *(_DWORD *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *a3;
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)a1, v8);
    return *((void *)a1 + 1) + 16 * v7 + 8;
  }
}

void re::TextureTableImpl<re::TextureHandle>::setTexture(void *a1, void *a2, const re::TextureHandle *a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = (_anonymous_namespace_ *)(a1 + 1);
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 1, a2);
  if (v9 == -1)
  {
    uint64_t v18 = a1 + 9;
    uint64_t v19 = a1[11];
    re::TextureHandle::TextureHandle((re::TextureHandle *)v20, a3);
    LOBYTE(v21[0]) = 0;
    LOBYTE(v22) = 0;
    re::DynamicArray<re::TextureViews<re::TextureHandle>>::add(v18, (uint64_t *)v20);
    if (LOBYTE(v21[0]) && v21[1])
    {

      v21[1] = 0;
    }
    re::TextureHandle::invalidate((re::TextureHandle *)v20);
    LOBYTE(v20[0]) = a4;
    BYTE1(v20[0]) = v19;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(v8, a2, (__int16 *)v20);
  }
  else
  {
    uint64_t v10 = a1[2] + 16 * v9;
    unint64_t v11 = *(unsigned __int8 *)(v10 + 9);
    if (a1[11] <= v11)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)uint64_t v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)uint64_t v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(unsigned __int8 *)(v10 + 8);
    unint64_t v13 = (re::TextureHandle *)(a1[13] + 40 * *(unsigned __int8 *)(v10 + 9));
    LOBYTE(v20[0]) = 0;
    re::Optional<NS::SharedPtr<MTL::Texture>>::operator=((uint64_t)v13 + 16, v20);
    if (LOBYTE(v20[0]) && v20[1]) {

    }
    uint64_t v14 = *((void *)v13 + 1);
    uint64_t v15 = *((void *)a3 + 1);
    if (v14 != v15)
    {
      BOOL v17 = 1;
      if (v14 && v15 && *(void *)v13 && *(void *)a3 != 0) {
        BOOL v17 = 0;
      }
      re::TextureHandle::operator=(v13, a3);
      if (v12 != a4)
      {
        LOBYTE(v20[0]) = a4;
        BYTE1(v20[0]) = v11;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(v8, a2, v20);
      }
      if (v17)
      {
        v20[0] = a1;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<re::TextureHandle>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(v8, (uint64_t)v20);
      }
    }
  }
}

void *re::DynamicArray<re::TextureViews<re::TextureHandle>>::add(void *this, uint64_t *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureViews<re::TextureHandle>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = (void *)(v5 + 40 * v4);
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = *a2;
  if (a2[1]) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    *uint64_t v6 = v7;
    v6[1] = a2[1];
    a2[1] = 0;
  }
  int v9 = *((unsigned __int8 *)a2 + 16);
  *(unsigned char *)(v5 + 40 * v4 + 16) = v9;
  if (v9)
  {
    *(void *)(v5 + 40 * v4 + 24) = a2[3];
    a2[3] = 0;
  }
  int v10 = *((unsigned __int8 *)a2 + 32);
  *(unsigned char *)(v5 + 40 * v4 + 32) = v10;
  if (v10) {
    *(_DWORD *)(v5 + 40 * v4 + 33) = *(_DWORD *)((char *)a2 + 33);
  }
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<re::TextureHandle>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(void *result, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  result[5] = 0;
  v15[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v15[0] + 8) + 16 * v9;
      unint64_t v11 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 8;
      unint64_t v12 = *(void *)(*(void *)a2 + 88);
      if (v12 <= v11)
      {
        uint64_t v17 = 0;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v18 = 136315906;
        uint64_t v19 = "operator[]";
        __int16 v20 = 1024;
        int v21 = 789;
        __int16 v22 = 2048;
        unint64_t v23 = v11;
        __int16 v24 = 2048;
        unint64_t v25 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v13 = (void *)(*(void *)(*(void *)a2 + 104) + 40 * v11);
      if (v13[1])
      {
        if (*v13)
        {
          unint64_t v14 = 0xBF58476D1CE4E5B9 * (*(void *)v10 ^ (*(void *)v10 >> 30));
          v4[5] ^= ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27)));
        }
      }
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v15);
    }
  }
  return result;
}

void *re::DynamicArray<re::TextureViews<re::TextureHandle>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TextureViews<re::TextureHandle>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_28;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_28:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 40 * v9;
        do
        {
          unint64_t v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          *unint64_t v12 = 0;
          v12[1] = 0;
          uint64_t v14 = *(void *)(v8 + v10);
          if (*(void *)(v8 + v10 + 8)) {
            BOOL v15 = v14 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (!v15)
          {
            *unint64_t v12 = v14;
            v12[1] = *(void *)(v13 + 8);
            *(void *)(v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          }
          int v16 = *(unsigned __int8 *)(v13 + 16);
          *((unsigned char *)v12 + 16) = v16;
          if (v16)
          {
            v7[v10 / 8 + 3] = *(void *)(v8 + v10 + 24);
            *(void *)(v8 + v10 + 24) = 0;
          }
          int v17 = *(unsigned __int8 *)(v8 + v10 + 32);
          LOBYTE(v7[v10 / 8 + 4]) = v17;
          if (v17) {
            *(_DWORD *)((char *)&v7[v10 / 8 + 4] + 1) = *(_DWORD *)(v8 + v10 + 33);
          }
          if (*(unsigned char *)(v13 + 16))
          {
            int v18 = *(void **)(v8 + v10 + 24);
            if (v18)
            {

              *(void *)(v8 + v10 + 24) = 0;
            }
          }
          re::TextureHandle::invalidate((re::TextureHandle *)(v8 + v10));
          v10 += 40;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t re::TextureTableImpl<re::TextureHandle>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  }
  re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=(a1 + 72, a2 + 72);
  return a1;
}

uint64_t re::DynamicArray<re::TextureViews<re::TextureHandle>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      BOOL v4 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, i);
      if (*v4)
      {

        id *v4 = 0;
      }
    }
  }
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
}

void re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  uint64_t v3 = *(void *)(*(void *)a2 + 768);
  if (v3)
  {
    uint64_t v4 = v2[98];
    uint64_t v5 = 40 * v3;
    do
    {
      if (*(unsigned char *)(v4 + 16))
      {
        uint64_t v6 = *(void **)(v4 + 24);
        if (v6)
        {

          *(void *)(v4 + 24) = 0;
        }
      }
      re::TextureHandle::invalidate((re::TextureHandle *)v4);
      v4 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  re::BufferTable::~BufferTable((re::BufferTable *)(v2 + 33));
  uint64_t v7 = v2[109];
  if (v7)
  {
    uint64_t v8 = (id *)v2[111];
    uint64_t v9 = 8 * v7;
    do
    {
      if (*v8)
      {

        id *v8 = 0;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
}

void *re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DCA0;
  return result;
}

void *re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DCA0;
  return result;
}

uint64_t re::internal::Callable<re::MaterialParameterTable::buildPerFrameDestructor(re::Allocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void *re::ConstantTable::setConstant(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v8 = (_anonymous_namespace_ *)(a1 + 6);
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 6, a2);
  if (v9 == -1)
  {
    uint64_t v15 = *(void *)(a3 + 8);
    uint64_t v16 = a1[3] + 3;
    LOWORD(v17[0]) = v16 & 0xFFFC;
    BYTE2(v17[0]) = v15;
    BYTE3(v17[0]) = a4;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v8, a2, (int *)v17);
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 1), ((unsigned __int16)v16 & 0xFFFC) + (unint64_t)v15);
    if (a1[3] <= (unint64_t)((unsigned __int16)v16 & 0xFFFC))
    {
      memset(v17, 0, sizeof(v17));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return memcpy((void *)(a1[5] + ((unsigned __int16)v16 & 0xFFFC)), *(const void **)a3, v15);
  }
  else
  {
    uint64_t v10 = a1[7] + 16 * v9;
    uint64_t v11 = *(const void **)a3;
    size_t v12 = *(unsigned __int8 *)(v10 + 10);
    uint64_t v13 = (void *)(a1[5] + *(unsigned __int16 *)(v10 + 8));
    return memcpy(v13, v11, v12);
  }
}

uint64_t re::BufferTable::getOrAddKey(re::BufferTable *this, const re::WeakStringID *a2)
{
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(this, a2);
  if (v4 != -1) {
    return *(unsigned __int8 *)(*((void *)this + 1) + 16 * v4 + 8);
  }
  uint64_t v5 = *((unsigned int *)this + 70);
  *((_DWORD *)this + 70) = v5 + 1;
  char v7 = v5;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addOrReplace(this, a2, &v7);
  return v5;
}

void **re::BufferTable::setBufferRef(void **result, unsigned int a2, void **a3)
{
  uint64_t v5 = result;
  if ((unint64_t)result[23] <= a2)
  {
    if (!*a3) {
      return result;
    }
    re::BufferTable::resizeRefs((re::BufferTable *)result, a2 + 1);
  }
  uint64_t v6 = (uint64_t)(v5 + 18);
  uint64_t result = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, a2);
  if (*a3 != *result)
  {
    char v7 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v6, a2);
    return NS::SharedPtr<MTL::Texture>::operator=(v7, a3);
  }
  return result;
}

void re::BufferTable::setBufferView(re::BufferTable *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  unint64_t v8 = *((void *)a1 + 10);
  if (v8 <= a2)
  {
    re::BufferTable::resizeViews(a1, a2 + 1);
    unint64_t v8 = *((void *)a1 + 10);
  }
  if (v8 <= v7)
  {
    memset(v10, 0, sizeof(v10));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v9 = (void *)(*((void *)a1 + 12) + 16 * v7);
  if (v9[1] != a4 || *v9 != a3)
  {
    if (a3 && *v9)
    {
      *uint64_t v9 = a3;
      v9[1] = a4;
    }
    else
    {
      *uint64_t v9 = a3;
      v9[1] = a4;
      *(void *)&v10[0] = a1;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(a1, (uint64_t)v10);
    }
  }
}

uint64_t re::BufferTable::setBufferIndirectResources(re::BufferTable *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a2;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((void *)this + 27) <= (unint64_t)a2)
  {
    re::BufferTable::resizeResourcePointers(this, (a2 + 1));
    re::BufferTable::resizeResourceHashes(this, (v7 + 1));
  }
  uint64_t v9 = *((void *)this + 25);
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  re::FixedArray<unsigned long>::init<>(&v16, v9, a4);
  if (v17)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = v18;
    while (a4 != v11)
    {
      uint64_t v14 = *(void *)(a3 + 8 * v11);
      *(void *)(v13 + 8 * v11) = v14;
      unint64_t v4 = v17;
      if (v17 <= v11) {
        goto LABEL_17;
      }
      v12 ^= (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9 + v14;
      if (v17 <= ++v11) {
        goto LABEL_10;
      }
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a4, a4);
    _os_crash();
    __break(1u);
LABEL_17:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 468;
    __int16 v24 = 2048;
    unint64_t v25 = v11;
    __int16 v26 = 2048;
    unint64_t v27 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a4;
    __int16 v26 = 2048;
    unint64_t v27 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    int v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = a4;
    __int16 v26 = 2048;
    unint64_t v27 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v12 = 0;
LABEL_10:
  a4 = v7;
  unint64_t v7 = *((void *)this + 27);
  if (v7 <= a4) {
    goto LABEL_18;
  }
  re::FixedArray<unsigned long>::operator=((uint64_t *)(*((void *)this + 29) + 24 * a4), &v16);
  unint64_t v7 = *((void *)this + 32);
  if (v7 <= a4) {
    goto LABEL_19;
  }
  *(void *)(*((void *)this + 34) + 8 * a4) = v12;
  uint64_t result = v16;
  if (v16)
  {
    if (v17) {
      return (*(uint64_t (**)(void))(*(void *)v16 + 40))();
    }
  }
  return result;
}

void re::BufferTable::resizeRefs(re::BufferTable *this, unint64_t a2)
{
  uint64_t v3 = (char *)this + 144;
  if (*((void *)this + 23) + 1 == a2)
  {
    *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::addUninitialized((uint64_t)v3) = 0;
  }
  else
  {
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize((uint64_t)v3, a2);
  }
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
      {
        uint64_t v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
        if (*v6)
        {

          *uint64_t v6 = 0;
        }
        ++v5;
      }
      while (v5 != *(void *)(a1 + 40));
      *(void *)(a1 + 40) = a2;
    }
  }
  else
  {
    if (a2 > 8 * *(void *)(a1 + 8))
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (a2 + 7) >> 3);
      unint64_t v4 = *(void *)(a1 + 40);
    }
    for (*(void *)(a1 + 40) = a2; v4 != *(void *)(a1 + 40); ++v4)
      *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v4) = 0;
  }
  ++*(_DWORD *)(a1 + 48);
}

void re::BufferTable::resizeViews(re::BufferTable *this, unint64_t a2)
{
  uint64_t v3 = (re::BufferTable *)((char *)this + 64);
  if (*((void *)this + 10) + 1 == a2)
  {
    __n128 v4 = 0uLL;
    re::DynamicArray<re::RigNodeConstraint>::add(v3, &v4);
  }
  else
  {
    re::DynamicArray<re::RenderGraphNodeDataPointer>::resize((uint64_t)v3, a2);
  }
}

void *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::rehashKeysWith<re::BufferTable::rehashNames(void)::{lambda(unsigned char)#1}>(void *result, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  result[5] = 0;
  v14[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    __n128 v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v14[0] + 8) + 16 * v9;
      unint64_t v11 = *(unsigned __int8 *)(v10 + 8);
      unint64_t v12 = *(void *)(*(void *)a2 + 80);
      if (v12 <= v11)
      {
        uint64_t v16 = 0;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v25 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v17 = 136315906;
        uint64_t v18 = "operator[]";
        __int16 v19 = 1024;
        int v20 = 789;
        __int16 v21 = 2048;
        unint64_t v22 = v11;
        __int16 v23 = 2048;
        unint64_t v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(*(void *)(*(void *)a2 + 96) + 16 * v11))
      {
        unint64_t v13 = 0xBF58476D1CE4E5B9 * (*(void *)v10 ^ (*(void *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

void *re::BufferTable::resizeResourcePointers(re::BufferTable *this, unint64_t a2)
{
  uint64_t v3 = (void *)((char *)this + 200);
  if (*((void *)this + 27) + 1 == a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    re::DynamicArray<re::FixedArray<unsigned long>>::add(v3, &v6);
    uint64_t result = (void *)v6;
    if (v6) {
      BOOL v5 = v7 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return (void *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  else
  {
    return re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::resize(v3, a2);
  }
  return result;
}

void *re::BufferTable::resizeResourceHashes(re::BufferTable *this, unint64_t a2)
{
  uint64_t v3 = (void *)((char *)this + 240);
  if (*((void *)this + 32) + 1 == a2)
  {
    uint64_t v5 = 0;
    return re::DynamicArray<unsigned long>::add(v3, &v5);
  }
  else
  {
    uint64_t v5 = 0;
    return re::DynamicArray<unsigned long>::resize(v3, a2, &v5);
  }
}

void *re::DynamicArray<re::FixedArray<unsigned long>>::add(void *this, void *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::FixedArray<unsigned char>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = (void *)(v3[4] + 24 * v4);
  *uint64_t v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  uint64_t v6 = a2[1];
  *uint64_t v5 = *a2;
  v5[1] = v6;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = v5[2];
  void v5[2] = a2[2];
  a2[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::DynamicArray<unsigned long>::resize(void *result, unint64_t a2, void *a3)
{
  unint64_t v4 = result;
  unint64_t v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result, a2);
      unint64_t v5 = v4[2];
    }
    unint64_t v7 = a2 - v5;
    if (a2 > v5)
    {
      uint64_t v8 = (void *)(v4[4] + 8 * v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

void *re::DynamicArray<re::BufferView>::removeStableAt(void *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = result;
  uint64_t v4 = v2 - 1;
  if (v2 - 1 > a2)
  {
    uint64_t v5 = result[4];
    uint64_t result = (void *)(v5 + 16 * a2);
    uint64_t v6 = (char *)(v5 + 16 * v2);
    if (v6 != (char *)(result + 2))
    {
      uint64_t result = memmove(result, result + 2, v6 - (char *)(result + 2));
      uint64_t v4 = v3[2] - 1;
    }
  }
  v3[2] = v4;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 884, a2, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    unint64_t v5 = v3 - 1;
    if (v3 - 1 > a2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a1, a2 + 1, a1, v3, a1, a2, v7);
      unint64_t v5 = *(void *)(a1 + 40) - 1;
    }
    uint64_t v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
    if (*v6)
    {

      *uint64_t v6 = 0;
    }
    --*(void *)(a1 + 40);
    ++*(_DWORD *)(a1 + 48);
  }
}

uint64_t *_ZN2re9HashBrownINS_12WeakStringIDEhNS_4HashIS1_EENS_7EqualToIS1_EENS2_IhEELb0EE9mapValuesIZNS_11BufferTable12removeBufferERKS1_EUlRT_E_EEvOSC_(uint64_t *result, unsigned __int8 **a2)
{
  v16[0] = result;
  unint64_t v2 = result[2];
  if (v2 >= 0x10)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    unint64_t v7 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(v4, *(void *)(v4 + 8) + 16 * v9);
      uint64_t v10 = *(void *)(v4 + 8);
      uint64_t v11 = i;
      uint64_t v12 = v10 + 16 * i;
      unsigned int v15 = *(unsigned __int8 *)(v12 + 8);
      unint64_t v13 = (unsigned char *)(v12 + 8);
      char v14 = v15;
      if (v15 > **a2)
      {
        *unint64_t v13 = v14 - 1;
        uint64_t v10 = *(void *)(v4 + 8);
        uint64_t v11 = i;
      }
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateKvpsHash(v4, v10 + 16 * v11);
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v16);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    unint64_t v9 = a1[2];
    *(void *)(a1[1] + 16 * v4) = 0;
    uint64_t v10 = a1[4];
    if (v7) {
      ++v10;
    }
    unint64_t v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2) {
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

uint64_t re::DynamicArray<re::FixedArray<unsigned long>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>((uint64_t *)(*(void *)(a1 + 32) + 24 * a2 + 24), (uint64_t *)(*(void *)(a1 + 32) + 24 * v2), (uint64_t *)(*(void *)(a1 + 32) + 24 * a2));
    unint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(*(void *)(a1 + 32) + 24 * v2 - 24));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  if (a1 != a3 || a2 != a4)
  {
    unint64_t v13 = a4 - 1;
    do
    {
      do
      {
        unint64_t v14 = a2;
        unsigned int v15 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, a2);
        uint64_t v16 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, a6);
        NS::SharedPtr<MTL::Texture>::operator=(v16, v15);
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<unsigned long>::operator=(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = (void **)(v4 + 8 * a2);
    int8x16_t v6 = (void **)(v4 + 8 * v2);
    if (v5 + 1 != v6)
    {
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v5, v5 + 1);
        int8x8_t v7 = v5 + 2;
        ++v5;
      }
      while (v7 != v6);
      unint64_t v2 = *(void *)(a1 + 16);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 8 * v2;
  unint64_t v9 = *(void **)(v8 - 8);
  if (v9)
  {

    *(void *)(v8 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

void *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear(a1);
  v17[0] = a2;
  unint64_t v5 = a2[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        return result;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; uint64_t v10 = i)
    {
      uint64_t v11 = *(void *)(v17[0] + 8) + 40 * v10;
      uint64_t v12 = *(void *)v11;
      int v13 = *(_DWORD *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      char v15 = *(unsigned char *)(v11 + 24);
      uint64_t v16 = *(void *)(v11 + 32);
      re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, &v12, &v13);
      uint64_t result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v17);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = v11;
  while (1)
  {
    unint64_t v14 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v13)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v14 < 0x40) {
      break;
    }
    if (v13 + 1 == v10) {
      unint64_t v13 = 0;
    }
    else {
      ++v13;
    }
    if (v13 == v11)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v15 = v12 + 16 * v13;
  int v16 = *(unsigned __int8 *)(v15 + v14);
  *(unsigned char *)(v15 + v14) = v9 & 0x7F;
  BOOL v17 = v16 == 255;
  unint64_t v18 = v14 + 16 * v13;
  int v19 = *a3;
  uint64_t v20 = *((void *)a3 + 1);
  char v21 = *((unsigned char *)a3 + 16);
  uint64_t v22 = *((void *)a3 + 3);
  uint64_t v23 = 5 * v18;
  uint64_t v24 = *((void *)a1 + 1) + 40 * v18;
  *(void *)uint64_t v24 = *a2;
  *(_DWORD *)(v24 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v19;
  *(void *)(v24 + 16) = v20;
  *(unsigned char *)(v24 + 24) = v21;
  *(void *)(v24 + 32) = v22;
  uint64_t v25 = *((void *)a1 + 4) - v17;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v25;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)v24);
  return *((void *)a1 + 1) + 8 * v23 + 8;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  unint64_t v14 = v12 + 16 * v11;
  uint64_t v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  int v16 = v15 == 255;
  BOOL v17 = v13 + 16 * v11;
  unint64_t v18 = *a3;
  int v19 = *((void *)a3 + 1);
  uint64_t v20 = *((unsigned char *)a3 + 16);
  char v21 = *((void *)a3 + 3);
  uint64_t v22 = 5 * v17;
  uint64_t v23 = *((void *)a1 + 1) + 40 * v17;
  *(void *)uint64_t v23 = *a2;
  *(_DWORD *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v18;
  *(void *)(v23 + 16) = v19;
  *(unsigned char *)(v23 + 24) = v20;
  *(void *)(v23 + 32) = v21;
  uint64_t v24 = *((void *)a1 + 4) - v16;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v24;
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes((uint64_t)a1, (re::WeakParameterBinding *)v23);
  return *((void *)a1 + 1) + 8 * v22 + 8;
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::doResize(a1, v3);
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateHashes(uint64_t a1, re::WeakParameterBinding *this)
{
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(void *)this ^ (*(void *)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (*(void *)this ^ (*(void *)this >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  *(void *)(a1 + 40) ^= v4;
  unint64_t result = re::WeakParameterBinding::hash((re::WeakParameterBinding *)((char *)this + 8));
  *(void *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

void *re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  unint64_t v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = v5 >> 4;
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 41 * v6, 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v8 = 0;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      unint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v7];
    unint64_t v6 = v3[2];
    if (v6)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        unint64_t result = (void *)re::KeyValuePair<re::WeakStringID,re::WeakParameterBinding>::KeyValuePair(v3[1] + v10);
        unint64_t v6 = v3[2];
        v10 += 40;
      }
    }
  }
  else
  {
    void *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::KeyValuePair<re::WeakStringID,re::WeakParameterBinding>::KeyValuePair(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 3;
  re::StringID::invalid((re::StringID *)v3);
  *(void *)(a1 + 16) = v3[0] >> 1;
  re::StringID::destroyString((re::StringID *)v3);
  *(unsigned char *)(a1 + 24) = 0;
  re::StringID::invalid((re::StringID *)v3);
  *(void *)(a1 + 32) = v3[0] >> 1;
  re::StringID::destroyString((re::StringID *)v3);
  return a1;
}

double re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v19, 0, sizeof(v19));
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::init(v19, v4, a2);
  v17[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v17[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v18 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    if (v18 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd((int)v19);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v17);
      }
      while (v18 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v10 = *((void *)&v19[3] + 1);
  *((void *)&v19[3] + 1) = a1[7];
  long long v11 = v19[0];
  long long v12 = v19[1];
  v19[0] = *(_OWORD *)a1;
  *(void *)&v19[1] = v5;
  long long v13 = v19[2];
  long long v14 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v19[3];
  a1[7] = v10;
  *(_OWORD *)((char *)&v19[2] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
  long long v15 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v11;
  *((_OWORD *)a1 + 1) = v12;
  *((_OWORD *)a1 + 2) = v13;
  *(_OWORD *)((char *)&v19[1] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v15;
  return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)v19);
}

unint64_t re::WeakParameterBinding::hash(re::WeakParameterBinding *this)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * (*(int *)this ^ ((unint64_t)*(int *)this >> 30));
  unint64_t v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*((void *)this + 1) ^ (*((void *)this + 1) >> 30));
  unint64_t v4 = (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
      + (v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9) ^ v2;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 16)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int8 *)this + 16)) >> 27));
  uint64_t v6 = *((void *)this + 3) ^ (*((void *)this + 3) >> 30);
  unint64_t v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  return ((v4 << 6)
        + (v4 >> 2)
        + ((((v5 ^ (v5 >> 31)) << 6) + ((v5 ^ (v5 >> 31)) >> 2) + (v7 ^ (v7 >> 31)) - 0x61C8864680B583E9) ^ v5 ^ (v5 >> 31))
        - 0x61C8864680B583E9) ^ v4;
}

void re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)a1);
  v13[0] = a2;
  unint64_t v4 = a2[2];
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a2;
    unint64_t v7 = v4 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        return;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = (uint64_t *)(*(void *)(v13[0] + 8) + 16 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(a1, &v11, &v12);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  uint64_t v17 = *a3;
  uint64_t v18 = (void *)(*((void *)a1 + 1) + 16 * v16);
  *uint64_t v18 = *a2;
  v18[1] = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes((uint64_t)a1, v18);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateHashes(uint64_t result, void *a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  unint64_t v5 = v3 ^ *(void *)(result + 40);
  unint64_t v6 = *(void *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v4 ^ (v4 >> 27))) >> 31))
                                      - 0x61C8864680B583E9);
  *(void *)(result + 40) = v5;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v6;
  return result;
}

double re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::internalAdd(v22, *(void *)(v20[0] + 8) + 16 * v12, *(void *)(v20[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v12 = v21;
      }
      while (v21 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v13 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  long long v14 = v22[0];
  long long v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(void *)&v22[1] = v6;
  long long v16 = v22[2];
  long long v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v17;
  long long v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v18;
  return re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)v22);
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(void *a1, uint64_t *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = v6 % v3;
  int8x16_t v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  unint64_t v10 = v6 % v3;
  while (1)
  {
    int8x16_t v11 = *(int8x16_t *)(*a1 + 16 * v10);
    unint64_t v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3) {
      unint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    uint64_t v15 = -1;
    if (v10 == v7) {
      return v15;
    }
  }
  uint64_t v14 = 16 * v10;
  while (1)
  {
    uint64_t v15 = v13 + v14;
    if (v4 == *(void *)(a1[1] + 40 * (v13 + v14))) {
      return v15;
    }
    if (v13 <= 0x3E)
    {
      unint64_t v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (void *)(v8 + 16), v8 + 24);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&unsigned char v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::HashTable(*(void *)(a1 + 16) + 72 * v10 + 24, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v10 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(void *)(v8 + v6 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v8 + v6 + 8), (void *)(v8 + v6 + 8), (void *)(v8 + v6 + 16));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_75, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 16 * v9;
        int v11 = v7;
        do
        {
          *int v11 = *(void *)v8;
          int v12 = *(unsigned __int8 *)(v8 + 8);
          *((unsigned char *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          if (v12) {
            *(_DWORD *)((char *)v11 + 10) = *(_DWORD *)(v8 + 10);
          }
          *(void *)uint64_t v8 = 0;
          v8 += 16;
          v11 += 2;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_21;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 32 * v9;
        int v11 = v7 + 3;
        uint64_t v12 = v8 + 16;
        do
        {
          uint64_t v13 = v12 - 16;
          *(v11 - 3) = *(void *)(v12 - 16);
          int v14 = *(unsigned __int8 *)(v12 - 8);
          *((unsigned char *)v11 - 16) = v14;
          if (v14)
          {
            *(v11 - 1) = *(id *)v12;
            *int v11 = *(void *)(v12 + 8);
          }
          if (*(unsigned char *)(v12 - 8))
          {
            if (*(void *)v12)
            {

              *(void *)uint64_t v12 = 0;
            }
          }
          *(void *)(v12 - 16) = 0;
          v11 += 4;
          v12 += 32;
        }
        while (v13 + 32 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_24;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (void *)(v8 + 32 * v9);
        int v11 = (re::TextureHandle *)(v8 + 16);
        uint64_t v12 = v7 + 2;
        do
        {
          uint64_t v13 = (void *)((char *)v11 - 16);
          *(v12 - 2) = *((void *)v11 - 2);
          int v14 = *((unsigned __int8 *)v11 - 8);
          *((unsigned char *)v12 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
          if (v14)
          {
            *uint64_t v12 = 0;
            v12[1] = 0;
            uint64_t v15 = *(void *)v11;
            if (*((void *)v11 + 1) && v15 != 0)
            {
              *uint64_t v12 = v15;
              v12[1] = *((void *)v11 + 1);
              *((void *)v11 + 1) = 0;
            }
          }
          if (*((unsigned char *)v11 - 8)) {
            re::TextureHandle::invalidate(v11);
          }
          *((void *)v11 - 2) = 0;
          int v11 = (re::TextureHandle *)((char *)v11 + 32);
          v12 += 4;
        }
        while (v13 + 4 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_21;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (id *)(v8 + 24 * v9);
        int v11 = (id *)(v7 + 2);
        uint64_t v12 = (id *)(v8 + 16);
        do
        {
          uint64_t v13 = v12 - 2;
          *(v11 - 2) = *(v12 - 2);
          int v14 = *((unsigned __int8 *)v12 - 8);
          *((unsigned char *)v11 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
          if (v14)
          {
            *int v11 = *v12;
            *uint64_t v12 = 0;
          }
          if (*((unsigned char *)v12 - 8))
          {
            if (*v12)
            {

              *uint64_t v12 = 0;
            }
          }
          *(v12 - 2) = 0;
          v11 += 3;
          v12 += 3;
        }
        while (v13 + 3 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_19;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_19:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (void *)(v8 + 48 * v9);
        int v11 = (void *)(v8 + 40);
        uint64_t v12 = v7 + 3;
        do
        {
          uint64_t v13 = v11 - 5;
          *(v12 - 3) = *(v11 - 5);
          int v14 = *((unsigned __int8 *)v11 - 32);
          *((unsigned char *)v12 - 16) = v14;
          if (v14)
          {
            *((_DWORD *)v12 - 2) = *((_DWORD *)v11 - 6);
            *uint64_t v12 = *(v11 - 2);
            *((unsigned char *)v12 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((unsigned char *)v11 - 8);
            void v12[2] = *v11;
          }
          if (*((unsigned char *)v11 - 32))
          {
            *int v11 = 0;
            *(v11 - 2) = 0;
          }
          *(v11 - 5) = 0;
          v11 += 6;
          v12 += 6;
        }
        while (v13 + 6 != v10);
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_19;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_19;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_19:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (void *)(v8 + 24 * v9);
        int v11 = v7 + 2;
        uint64_t v12 = (void *)(v8 + 16);
        do
        {
          uint64_t v13 = v12 - 2;
          *(v11 - 2) = *(v12 - 2);
          int v14 = *((unsigned __int8 *)v12 - 8);
          *((unsigned char *)v11 - re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v14;
          if (v14) {
            *int v11 = *v12;
          }
          if (*((unsigned char *)v12 - 8)) {
            *uint64_t v12 = 0;
          }
          *(v12 - 2) = 0;
          v11 += 3;
          v12 += 3;
        }
        while (v13 + 3 != v10);
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_19;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_17;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_17:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 16 * v9;
        int v11 = v7;
        uint64_t v12 = v5[4];
        do
        {
          *int v11 = *(void *)v12;
          int v13 = *(unsigned __int8 *)(v12 + 8);
          *((unsigned char *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v13;
          if (v13) {
            *((_DWORD *)v11 + 3) = *(_DWORD *)(v12 + 12);
          }
          *(void *)uint64_t v12 = 0;
          v12 += 16;
          v11 += 2;
        }
        while (v12 != v10);
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_17;
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 16 * v9;
        int v11 = v7;
        do
        {
          *int v11 = *(void *)v8;
          int v12 = *(unsigned __int8 *)(v8 + 8);
          *((unsigned char *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v12;
          if (v12) {
            *(_DWORD *)((char *)v11 + 9) = *(_DWORD *)(v8 + 9);
          }
          *(void *)uint64_t v8 = 0;
          v8 += 16;
          v11 += 2;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    signed int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        int v11 = v7;
        do
        {
          *(_OWORD *)int v11 = *(_OWORD *)v8;
          int v12 = *(unsigned __int8 *)(v8 + 16);
          *((unsigned char *)v11 + 16) = v12;
          if (v12) {
            v11[3] = *(void *)(v8 + 24);
          }
          *((unsigned char *)v11 + 32) = *(unsigned char *)(v8 + 32);
          v8 += 40;
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash(uint64_t a1, re::WeakParameterBinding *this)
{
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(void *)this ^ (*(void *)this >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (*(void *)this ^ (*(void *)this >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  unint64_t result = re::WeakParameterBinding::hash((re::WeakParameterBinding *)((char *)this + 8));
  *(void *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::updateKvpsHash(uint64_t result, void *a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  *(void *)(result + 48) ^= v3 ^ (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v4 ^ (v4 >> 27))) >> 31))
                                  + (v3 << 6)
                                  + (v3 >> 2)
                                  - 0x61C8864680B583E9);
  return result;
}

__n128 re::RenderCamera::computeLocalTransform@<Q0>(re::RenderCamera *this@<X0>, uint64_t a2@<X8>)
{
  float v2 = *((float *)this + 4);
  float v3 = *((float *)this + 5);
  float v4 = v2 + v2;
  float v5 = v3 + v3;
  float v6 = *((float *)this + 6);
  float v7 = *((float *)this + 7);
  float v8 = v6 + v6;
  float v9 = v2 * (float)(v2 + v2);
  float v10 = v3 * (float)(v3 + v3);
  float v11 = v6 * (float)(v6 + v6);
  float v12 = v4 * v3;
  float v13 = v4 * v6;
  float v14 = v5 * v6;
  float v15 = v5 * v7;
  float v16 = v8 * v7;
  HIDWORD(v17) = 0;
  *(float *)&long long v17 = 1.0 - (float)(v10 + v11);
  *((float *)&v17 + 1) = v12 + v16;
  *((float *)&v17 + 2) = v13 - v15;
  float v18 = v4 * v7;
  float v19 = 1.0 - (float)(v9 + v11);
  HIDWORD(v20) = 0;
  *(float *)&long long v20 = v12 - v16;
  *((float *)&v20 + 1) = v19;
  *((float *)&v20 + 2) = v14 + v18;
  HIDWORD(v21) = 0;
  *(float *)&long long v21 = v13 + v15;
  *((float *)&v21 + 1) = v14 - v18;
  *((float *)&v21 + 2) = 1.0 - (float)(v9 + v10);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v20;
  __n128 result = *(__n128 *)this;
  result.n128_u32[3] = 1.0;
  *(_OWORD *)(a2 + 32) = v21;
  *(__n128 *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = result;
  return result;
}

__n128 re::RenderCamera::computeInverseTransform@<Q0>(float32x4_t *this@<X0>, uint64_t a2@<X8>)
{
  float32x4_t v2 = this[1];
  float32x4_t v3 = vnegq_f32(v2);
  int32x4_t v4 = (int32x4_t)vnegq_f32(*this);
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  float32x4_t v6 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), v2), v5, *this);
  int32x4_t v7 = (int32x4_t)vaddq_f32(v6, v6);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  int32x4_t v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v2), v8, v5);
  __n128 result = (__n128)vaddq_f32(vsubq_f32(vmulq_laneq_f32(v8, v2, 3), *this), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL));
  v8.f32[0] = v3.f32[0] + v3.f32[0];
  float v10 = (float)(v3.f32[0] + v3.f32[0]) * v3.f32[0];
  float v11 = vmuls_lane_f32(v3.f32[1] + v3.f32[1], *(float32x2_t *)v3.f32, 1);
  float v12 = vmuls_lane_f32(v3.f32[2] + v3.f32[2], v3, 2);
  float v13 = vmuls_lane_f32(v3.f32[0] + v3.f32[0], *(float32x2_t *)v3.f32, 1);
  float v14 = vmuls_lane_f32(v3.f32[0] + v3.f32[0], v3, 2);
  v3.f32[0] = vmuls_lane_f32(v3.f32[1] + v3.f32[1], v3, 2);
  v8.f32[0] = vmuls_lane_f32(v8.f32[0], v2, 3);
  v5.f32[0] = vmuls_lane_f32(v3.f32[1] + v3.f32[1], v2, 3);
  v2.f32[0] = vmuls_lane_f32(v3.f32[2] + v3.f32[2], v2, 3);
  HIDWORD(v15) = 0;
  *(float *)&long long v15 = 1.0 - (float)(v11 + v12);
  *((float *)&v15 + 1) = v13 + v2.f32[0];
  v9.i32[3] = 0;
  *((float *)&v15 + 2) = v14 - v5.f32[0];
  HIDWORD(v16) = 0;
  *(float *)&long long v16 = v13 - v2.f32[0];
  *((float *)&v16 + 1) = 1.0 - (float)(v10 + v12);
  *((float *)&v16 + 2) = v3.f32[0] + v8.f32[0];
  *(float *)v9.i32 = v14 + v5.f32[0];
  *(float *)&v9.i32[1] = v3.f32[0] - v8.f32[0];
  *(float *)&v9.i32[2] = 1.0 - (float)(v10 + v11);
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v16;
  result.n128_u32[3] = 1.0;
  *(int32x4_t *)(a2 + 32) = v9;
  *(__n128 *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = result;
  return result;
}

int8x8_t re::RenderCamera::transformWorldBoundsToScreen@<D0>(float32x4_t *this@<X0>, float32x4_t *a2@<X1>, const re::Projection *a3@<X2>, uint64_t a4@<X8>)
{
  re::RenderCamera::computeInverseTransform(this, (uint64_t)v28);
  re::Projection::computeMatrix4x4F(a3, (uint64_t)v27);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_370, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_370))
  {
    xmmword_26AF93D20 = xmmword_23435FD50;
    unk_26AF93D30 = xmmword_23435FD60;
    xmmword_26AF93D40 = xmmword_23435FD80;
    unk_26AF93D50 = xmmword_2343AC500;
    __cxa_guard_release(&_MergedGlobals_370);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93D08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93D08))
  {
    dword_26AF93D60 = 0u;
    unk_26AF93D70 = 0u;
    unk_26AF93D80 = 0u;
    unk_26AF93D90 = 0u;
    dword_26AF93D60.i32[0] = 1056964608;
    dword_26AF93D74 = 1056964608;
    dword_26AF93D88 = 1065353216;
    dword_26AF93D9C = 1065353216;
    __cxa_guard_release(&qword_26AF93D08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26AF93D10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_26AF93D10))
  {
    re::operator*<float>(&dword_26AF93D60, (uint64_t)&xmmword_26AF93D20, &xmmword_26AF93DA0);
    __cxa_guard_release(qword_26AF93D10);
  }
  unint64_t v7 = 0;
  float32x4_t v8 = (float32x4_t)xmmword_26AF93DA0;
  float32x4_t v9 = *(float32x4_t *)algn_26AF93DB0;
  float32x4_t v10 = (float32x4_t)xmmword_26AF93DC0;
  float32x4_t v11 = (float32x4_t)unk_26AF93DD0;
  long long v29 = v27[0];
  long long v30 = v27[1];
  long long v31 = v27[2];
  long long v32 = v27[3];
  do
  {
    v33[v7 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(long long *)((char *)&v29 + v7))), v9, *(float32x2_t *)((char *)&v29 + v7), 1), v10, *(float32x4_t *)((char *)&v29 + v7), 2), v11, *(float32x4_t *)((char *)&v29 + v7), 3);
    v7 += 16;
  }
  while (v7 != 64);
  unint64_t v12 = 0;
  float32x4_t v13 = v33[0];
  float32x4_t v14 = v33[1];
  float32x4_t v15 = v33[2];
  float32x4_t v16 = v33[3];
  long long v29 = v28[0];
  long long v30 = v28[1];
  long long v31 = v28[2];
  long long v32 = v28[3];
  do
  {
    v33[v12 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(long long *)((char *)&v29 + v12))), v14, *(float32x2_t *)((char *)&v29 + v12), 1), v15, *(float32x4_t *)((char *)&v29 + v12), 2), v16, *(float32x4_t *)((char *)&v29 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  re::AABB::transform(a2, v33, a4);
  float32x2_t v17 = *(float32x2_t *)a4;
  float32x2_t v18 = *(float32x2_t *)(a4 + 16);
  v17.f32[1] = 1.0 - *(float *)(a4 + 20);
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v17, _D1), (int8x8_t)_D1, (int8x8_t)v17);
  v18.f32[1] = 1.0 - *(float *)(a4 + 4);
  *(int8x8_t *)a4 = vbic_s8((int8x8_t)v24, (int8x8_t)vcltz_f32(v24));
  float32x2_t v25 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v18, _D1), (int8x8_t)_D1, (int8x8_t)v18);
  int8x8_t result = vbic_s8((int8x8_t)v25, (int8x8_t)vcltz_f32(v25));
  *(int8x8_t *)(a4 + 16) = result;
  return result;
}

double re::PerFrameAllocatorGPU::allocInternal@<D0>(re::PerFrameAllocatorGPU *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!a2) {
    goto LABEL_40;
  }
  do
  {
    if (*((unsigned char *)this + 96)) {
      goto LABEL_40;
    }
    char v9 = a4;
    float32x4_t v10 = this;
    if (pthread_self() == *((pthread_t *)this + 10)) {
      break;
    }
    this = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(*((void *)this + 9), *(void *)this);
    unint64_t v12 = (_opaque_pthread_t *)*((void *)this + 10);
    pthread_t v13 = pthread_self();
    a4 = 0;
  }
  while (v12 == v13);
  if (a3 <= 0x10) {
    uint64_t v14 = 16;
  }
  else {
    uint64_t v14 = a3;
  }
  float32x4_t v15 = (char *)v10 + 8;
  uint64_t v16 = 8;
  while (1)
  {
    float32x2_t v17 = *(uint64_t **)((char *)v10 + v16);
    if (v17)
    {
      if (v14 + a2 < v17[8] - v17[7]) {
        break;
      }
    }
    v16 += 8;
    if (v16 == 32)
    {
      uint64_t v18 = *((void *)v10 + 9);
      if (a2 <= 0x10000) {
        uint64_t v19 = 0x10000;
      }
      else {
        uint64_t v19 = a2;
      }
      uint64_t v43 = *(void *)v10;
      long long v20 = (os_unfair_lock_s *)(v18 + 80);
      os_unfair_lock_lock((os_unfair_lock_t)(v18 + 80));
      unint64_t v22 = re::PerFrameAllocatorGPUManager::sizeToIndex(v21, v19);
      unint64_t v23 = *(void *)(v18 + 104);
      if (v22 < v23)
      {
        uint64_t v24 = *(void *)(v18 + 120);
        uint64_t v25 = v24 + 88 * v22;
        unint64_t v28 = *(void *)(v25 + 24);
        long long v26 = (unint64_t *)(v25 + 24);
        unint64_t v27 = v28;
        if (v28) {
          goto LABEL_17;
        }
        unint64_t v40 = 0x10000 << v22;
        if (v22 < v23 - 1)
        {
          if (v23 > ++v22)
          {
            if (2 * v19 <= v40) {
              goto LABEL_38;
            }
            uint64_t v41 = v24 + 88 * v22;
            unint64_t v42 = *(void *)(v41 + 24);
            long long v26 = (unint64_t *)(v41 + 24);
            unint64_t v27 = v42;
            if (v42 < 2) {
              goto LABEL_38;
            }
LABEL_17:
            unint64_t v29 = v27 - 1;
            uint64_t NewChunk = *(void *)(*(void *)(v24 + 88 * v22 + 40) + 8 * v29);
            *long long v26 = v29;
            ++*(_DWORD *)(v24 + 88 * v22 + 32);
LABEL_18:
            *(void *)(NewChunk + 136) = v43;
            *(_OWORD *)(NewChunk + 56) = *(_OWORD *)(NewChunk + 40);
            os_unfair_lock_unlock(v20);
            *(void *)&v44[0] = NewChunk;
            re::DynamicArray<re::TransitionCondition *>::add((void *)v10 + 4, v44);
            uint64_t v32 = 0;
            signed int v33 = 0;
            unint64_t v34 = -1;
            while (1)
            {
              uint64_t v35 = *(void *)&v15[8 * v32];
              if (!v35) {
                break;
              }
              unint64_t v36 = *(void *)(v35 + 64) - *(void *)(v35 + 56);
              if (v36 < v34)
              {
                unint64_t v34 = v36;
                signed int v33 = v32;
              }
              if (++v32 == 3) {
                goto LABEL_29;
              }
            }
            signed int v33 = v32;
LABEL_29:
            uint64_t v38 = v33;
            if (v33 < 3)
            {
              float32x2_t v17 = *(uint64_t **)&v44[0];
              *(void *)&v15[8 * v38] = *(void *)&v44[0];
              if ((v9 & 1) == 0) {
                goto LABEL_31;
              }
LABEL_25:
              uint64_t v37 = (v17[8] - a2) & -v14;
              if (v17[7] > v37) {
                goto LABEL_40;
              }
              v17[8] = v37;
              if (!v37) {
                goto LABEL_40;
              }
LABEL_33:
              uint64_t v39 = *v17;
              a5[2] = a2;
              a5[3] = v17 + 18;
              *a5 = v39;
              a5[1] = v37 - v39;
              return result;
            }
            re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v33, 3);
            _os_crash();
            __break(1u);
          }
          memset(v44, 0, sizeof(v44));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_38:
        uint64_t NewChunk = re::PerFrameAllocatorGPUManager::allocateNewChunk((re::PerFrameAllocatorGPUManager *)v18, v40);
        if (NewChunk) {
          goto LABEL_18;
        }
      }
      os_unfair_lock_unlock(v20);
      goto LABEL_40;
    }
  }
  *(void *)&v44[0] = *(void *)((char *)v10 + v16);
  if (v9) {
    goto LABEL_25;
  }
LABEL_31:
  uint64_t v37 = (v14 + v17[7] - 1) & -v14;
  if ((uint64_t)(v37 + a2) <= v17[8])
  {
    v17[7] = v37 + a2;
    if (v37) {
      goto LABEL_33;
    }
  }
LABEL_40:
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  int32x4_t v4 = pthread_getspecific(*(void *)(a1 + 8));
  if (v4)
  {
    uint64_t v5 = re::DataArray<re::PerFrameAllocatorGPU>::tryGet(a1 + 16, (uint64_t)v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v5 & 0xFFFFFFFFFFFFFFFLL;
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFLL;
      if (v7 == 0xFFFFFFFFFFFFFFFLL)
      {
        if (v8 == 0xFFFFFFFFFFFFFFFLL) {
          return v6;
        }
      }
      else if (v8 != 0xFFFFFFFFFFFFFFFLL && v7 == v8)
      {
        return v6;
      }
      *(unsigned char *)(v5 + 104) = 1;
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  char v9 = (char *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(re::FrameCount)::kAllocationName();
  if (*v9)
  {
    __int16 v16 = 0;
    *(void *)float32x4_t v15 = 0;
    float32x4_t v10 = pthread_self();
    pthread_getname_np(v10, v15, 0xAuLL);
    snprintf(v9, 0x200uLL, "PerThreadAllocatorGPU.%s", v15);
  }
  *(void *)float32x4_t v15 = a1;
  float32x4_t v11 = (const void *)re::DataArray<re::PerFrameAllocatorGPU>::create<char (&)[512],re::FrameCount &,re::PerFrameAllocatorGPUManager *>(a1 + 16, (uint64_t)v9, &v14, (uint64_t *)v15);
  int v12 = (int)v11;
  pthread_setspecific(*(void *)(a1 + 8), v11);
  uint64_t v6 = re::DataArray<re::PerFrameAllocatorGPU>::get(a1 + 16, v12);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return v6;
}

void re::PerFrameAllocatorGPUManager::init(re::PerFrameAllocatorGPUManager *this, re::RenderManager *a2)
{
  if (!*(unsigned char *)this)
  {
    *((void *)this + 16) = a2;
    *(unsigned char *)this = 1;
    uint64_t v4 = pthread_key_create((pthread_key_t *)this + 1, 0);
    if (v4)
    {
      re::internal::assertLog((re::internal *)5, v5, "assertion failure: '%s' (%s:line %i) pthread_key_create failed: %d", "result == 0", "init", 202, v4);
      _os_crash();
      __break(1u);
    }
    else
    {
      re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::resize((void *)this + 11, 0xFuLL);
      uint64_t v6 = *((void *)this + 13);
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (void *)*((void *)this + 15);
        do
        {
          void *v8 = 0x10000 << v7;
          v8 += 11;
          ++v7;
        }
        while (v6 != v7);
      }
      uint64_t v9 = *((void *)a2 + 30);
      re::PerFrameAllocatorGPUManager::addChunks(this, 0x10000, 8 * v9);
      float32x4_t v10 = (_anonymous_namespace_ *)re::PerFrameAllocatorGPUManager::addChunks(this, 0x20000, 4 * v9);
      float32x4_t v11 = (char *)this + 16;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity(v11, 0);
      ++*((_DWORD *)v11 + 6);
      *((_DWORD *)v11 + 11) = 8;
      re::DataArray<re::PerFrameAllocatorGPU>::allocBlock((unsigned int *)v11);
    }
  }
}

uint64_t re::PerFrameAllocatorGPUManager::sizeToIndex(re::PerFrameAllocatorGPUManager *this, uint64_t a2)
{
  if (a2)
  {
    signed int v4 = 16 - __clz(a2 - 1);
    return v4 & ~(v4 >> 31);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "size > 0", "sizeToIndex", 494, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 88 * a2 + 48;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::DynamicArray<unsigned long>::deinit(v10);
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v10 - 40);
      ++v9;
      v8 += 88;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 88 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 80) = 0;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 0;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_DWORD *)(v7 + 72) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  void v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

unint64_t re::PerFrameAllocatorGPUManager::addChunks(re::PerFrameAllocatorGPUManager *this, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::PerFrameAllocatorGPUManager::sizeToIndex(this, a2);
  if (a3 && result < *((void *)this + 13))
  {
    do
    {
      uint64_t NewChunk = re::PerFrameAllocatorGPUManager::allocateNewChunk(this, a2);
      unint64_t result = re::PerFrameAllocatorGPUManager::reuseChunk(this, NewChunk);
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t re::PerFrameAllocatorGPUManager::deinit(uint64_t this)
{
  if (*(unsigned char *)this)
  {
    uint64_t v1 = this;
    uint64_t v2 = (re *)re::DataArray<re::PerFrameAllocatorGPU>::deinit(this + 16);
    unint64_t v3 = *(void *)(v1 + 104);
    if (!v3) {
      goto LABEL_14;
    }
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(v1 + 120);
      uint64_t v6 = v5 + 88 * v4;
      unint64_t v9 = *(void *)(v6 + 64);
      uint64_t v8 = (unint64_t *)(v6 + 64);
      unint64_t v7 = v9;
      if (!v9) {
        goto LABEL_13;
      }
      unint64_t v10 = 0;
      float32x4_t v11 = (void *)(v5 + 88 * v4 + 80);
      do
      {
        uint64_t v12 = *(void *)(*v11 + 8 * v10);
        if (v12)
        {
          uint64_t v13 = re::globalAllocators(v2)[2];
          uint64_t v14 = *(void **)(v12 + 144);
          if (v14)
          {

            *(void *)(v12 + 144) = 0;
          }
          *(_OWORD *)(v12 + 56) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v12 + 80));
          re::Allocator::~Allocator((re::Allocator *)(v12 + 16));
          uint64_t v2 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v12);
          unint64_t v7 = *v8;
        }
        if (v7 <= v10)
        {
          uint64_t v17 = 0;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 136315906;
          *(void *)((char *)&v18 + 4) = "operator[]";
          WORD6(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 1024;
          HIWORD(v1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 789;
          _os_log_send_and_compose_impl();
          this = _os_crash_msg();
          __break(1u);
          goto LABEL_18;
        }
        *(void *)(*v11 + 8 * v10++) = 0;
      }
      while (v7 > v10);
      unint64_t v3 = *(void *)(v1 + 104);
LABEL_13:
      unint64_t *v8 = 0;
      uint64_t v15 = v5 + 88 * v4;
      ++*(_DWORD *)(v15 + 72);
      *(void *)(v15 + 24) = 0;
      ++*(_DWORD *)(v15 + 32);
      if (v3 <= ++v4)
      {
LABEL_14:
        this = pthread_key_delete(*(void *)(v1 + 8));
        if (!this)
        {
          *(unsigned char *)uint64_t v1 = 0;
          return this;
        }
LABEL_18:
        re::internal::assertLog((re::internal *)5, v16, "assertion failure: '%s' (%s:line %i) pthread_key_delete failed: %d", "result == 0", "deinit", 248, this, v17, v18);
        _os_crash();
        __break(1u);
      }
    }
  }
  return this;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::PerFrameAllocatorGPU>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    unint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 112 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

unint64_t re::DataArray<re::PerFrameAllocatorGPU>::create<char (&)[512],re::FrameCount &,re::PerFrameAllocatorGPUManager *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = *(_DWORD *)(a1 + 56);
  if ((v8 + 1) >> 24) {
    int v9 = 1;
  }
  else {
    int v9 = v8 + 1;
  }
  *(_DWORD *)(a1 + 56) = v9;
  uint64_t v10 = *(unsigned __int16 *)(a1 + 52);
  unint64_t v11 = *(unsigned __int16 *)(a1 + 54);
  if (v10 == 0xFFFF && v11 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44)) {
      re::DataArray<re::PerFrameAllocatorGPU>::allocBlock((unsigned int *)a1);
    }
    uint64_t v15 = *(void *)(a1 + 16);
    unint64_t v11 = (unsigned __int16)(v15 - 1);
    if (v15)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 48);
      if (v10 < 0x10000)
      {
        uint64_t v16 = (void *)(*(void *)(a1 + 32) + 16 * v11);
        *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v10 + 1;
        *(_DWORD *)(v16[1] + 4 * v10) = *(_DWORD *)(a1 + 56);
        uint64_t v14 = *v16 + 112 * v10;
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v10, v20, v21);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    uint64_t v20 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v21) = 136315906;
    *(void *)((char *)&v21 + 4) = "operator[]";
    WORD6(v21) = 1024;
    HIWORD(v21) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 16) <= v11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = (void *)(*(void *)(a1 + 32) + 16 * v11);
  *(_DWORD *)(v13[1] + 4 * v10) = v9;
  uint64_t v14 = *v13 + 112 * v10;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)v14;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  uint64_t v17 = *a3;
  uint64_t v18 = *a4;
  *(void *)(v14 + 40) = 0;
  *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(void *)(v14 + 64) = 0;
  *(void *)(v14 + 72) = v18;
  *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = a2;
  *(unsigned char *)(v14 + 96) = 0;
  *(_DWORD *)(v14 + 100) = 3;
  *(unsigned char *)(v14 + 104) = 0;
  *(void *)uint64_t v14 = v17;
  *(void *)(v14 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 80) = pthread_self();
  return (v11 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v10;
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 112 * (unsigned __int16)a2;
}

uint64_t re::PerFrameAllocatorGPUManager::allocateNewChunk(re::PerFrameAllocatorGPUManager *this, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = (re *)re::PerFrameAllocatorGPUManager::sizeToIndex(this, a2);
  if ((unint64_t)v4 >= *((void *)this + 13)) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = *((void *)this + 16);
  unint64_t v7 = re::globalAllocators(v4);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 152, 8);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(unsigned char *)(v8 + 32) = 0;
  *(void *)(v8 + 16) = &unk_26E6DEA30;
  *(void *)(v8 + 24) = "PerFrameAllocatorGPUChunk-Linear";
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_DWORD *)(v8 + 112) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_DWORD *)(v8 + 72) = 0;
  *(void *)(v8 + 116) = 0x7FFFFFFFLL;
  *(unsigned char *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0;
  *(void *)(v8 + 136) = 0xFFFFFFFFFFFFFFFLL;
  *(void *)(v8 + 144) = 0;
  v14[0] = v8;
  v23[0] = objc_msgSend(*(id *)(v6 + 184), sel_newBufferWithLength_options_, a2, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v8 + 144), v23);
  if (v23[0]) {

  }
  *(void *)uint64_t v8 = objc_msgSend(*(id *)(v8 + 144), sel_contents);
  int v9 = (char *)objc_msgSend(*(id *)(v8 + 144), sel_length);
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v9;
  uint64_t v10 = *(void *)v8;
  unint64_t v11 = &v9[*(void *)v8];
  *(void *)(v8 + 40) = *(void *)v8;
  *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v11;
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = v11;
  unint64_t v12 = *((void *)this + 13);
  if (v12 <= (unint64_t)v5)
  {
    v14[1] = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)unint64_t v23 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v15 = 136315906;
    uint64_t v16 = "operator[]";
    __int16 v17 = 1024;
    int v18 = 789;
    __int16 v19 = 2048;
    uint64_t v20 = v5;
    __int16 v21 = 2048;
    unint64_t v22 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::DynamicArray<re::TransitionCondition *>::add((void *)(*((void *)this + 15) + 88 * (void)v5 + 48), v14);
  return v14[0];
}

unint64_t re::PerFrameAllocatorGPUManager::reuseChunk(re::PerFrameAllocatorGPUManager *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  unint64_t result = re::PerFrameAllocatorGPUManager::sizeToIndex(a1, *(void *)(a2 + 8));
  if (result < *((void *)a1 + 13)) {
    return (unint64_t)re::DynamicArray<re::TransitionCondition *>::add((void *)(*((void *)a1 + 15) + 88 * result + 8), &v4);
  }
  return result;
}

void re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 20;
  os_unfair_lock_lock(a1 + 20);
  uint64_t v32 = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  v29[0] = 0;
  int v31 = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  v25[0] = 0;
  uint64_t v7 = (uint64_t)&a1[4];
  int v27 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v33, (uint64_t)&a1[4], 0);
  unint64_t v23 = v33;
  uint64_t v24 = v34;
  if (&a1[4] == (os_unfair_lock_s *)v33 && (unsigned __int16)v34 == 0xFFFFLL && (v34 & 0xFFFF0000) == 0xFFFF0000)
  {
    uint64_t v8 = 0;
  }
  else
  {
    do
    {
      int v9 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      uint64_t v10 = re::DataArray<re::PerFrameAllocatorGPU>::get((uint64_t)&a1[4], v9);
      uint64_t v11 = *(void *)v10;
      unint64_t v33 = a2;
      uint64_t v35 = v11;
      if ((*(unsigned int (**)(void, unint64_t *, uint64_t *))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32), &v33, &v35))
      {
        unint64_t v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v29, &v33);
      }
      if (*(unsigned char *)(v10 + 96))
      {
        int v12 = *(_DWORD *)(v10 + 100);
        if (v12 >= 1) {
          *(_DWORD *)(v10 + 100) = --v12;
        }
        if (v12) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = *(unsigned char *)(v10 + 104) == 0;
        }
        if (!v13)
        {
          unint64_t v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
          re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v25, &v33);
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != v7 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
    uint64_t v8 = v32;
    if (v30)
    {
      uint64_t v14 = &v32[v30];
      int v15 = v32;
      do
      {
        uint64_t v16 = re::DataArray<re::PerFrameAllocatorGPU>::get((uint64_t)&a1[4], *v15);
        if (*(void *)(v16 + 48))
        {
          unint64_t v17 = 0;
          do
            re::PerFrameAllocatorGPUManager::reuseChunk((re::PerFrameAllocatorGPUManager *)a1, *(void *)(*(void *)(v16 + 64) + 8 * v17++));
          while (*(void *)(v16 + 48) > v17);
        }
        *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
        ++*(_DWORD *)(v16 + 56);
        *(void *)(v16 + 16) = 0;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(unsigned char *)(v16 + 96) = 1;
        ++v15;
      }
      while (v15 != v14);
    }
  }
  int v18 = v28;
  if (v26)
  {
    uint64_t v19 = 8 * v26;
    uint64_t v20 = v28;
    do
    {
      unint64_t v21 = *v20++;
      re::DataArray<re::PerFrameAllocatorGPU>::destroy(v7, v21);
      v19 -= 8;
    }
    while (v19);
  }
  if (v25[0]) {
    BOOL v22 = v18 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22) {
    (*(void (**)(void))(*(void *)v25[0] + 40))();
  }
  if (v29[0] && v8) {
    (*(void (**)(void))(*(void *)v29[0] + 40))();
  }
  os_unfair_lock_unlock(v6);
}

uint64_t re::DataArray<re::PerFrameAllocatorGPU>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t result = re::DataArray<re::PerFrameAllocatorGPU>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    uint64_t v6 = (_DWORD *)result;
    uint64_t result = re::DynamicArray<unsigned long>::deinit(result + 32);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *uint64_t v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t (***re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re *a1, unint64_t a2))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = re::globalAllocators(a1)[2];
  v6[0] = &unk_26E70DCF8;
  void v6[3] = v4;
  v6[4] = v6;
  re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate((os_unfair_lock_s *)a1, a2, (uint64_t)v6);
  return re::FunctionBase<24ul,BOOL ()(re::FrameCount,re::FrameCount)>::destroyCallable((uint64_t)v6);
}

uint64_t (***re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re *a1, unint64_t a2))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = re::globalAllocators(a1)[2];
  v6[0] = &unk_26E70DD50;
  void v6[3] = v4;
  v6[4] = v6;
  re::PerFrameAllocatorGPUManager::freeAllocatorsWithPredicate((os_unfair_lock_s *)a1, a2, (uint64_t)v6);
  return re::FunctionBase<24ul,BOOL ()(re::FrameCount,re::FrameCount)>::destroyCallable((uint64_t)v6);
}

void re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::~Callable()
{
}

BOOL re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*a3 & 0xFFFFFFFFFFFFFFFuLL) <= (*a2 & 0xFFFFFFFFFFFFFFFuLL);
}

void *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DCF8;
  return result;
}

void *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DCF8;
  return result;
}

uint64_t re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::~Callable()
{
}

BOOL re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *a3 & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  BOOL v6 = v4 != 0xFFFFFFFFFFFFFFFLL && v3 == v4;
  BOOL v7 = v4 == 0xFFFFFFFFFFFFFFFLL;
  if (v3 == 0xFFFFFFFFFFFFFFFLL) {
    return v7;
  }
  else {
    return v6;
  }
}

void *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DD50;
  return result;
}

void *re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DD50;
  return result;
}

uint64_t re::internal::Callable<re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(re::FrameCount)::$_0,BOOL ()(re::FrameCount,re::FrameCount)>::size()
{
  return 16;
}

void *re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PerFrameAllocatorGPUManager::ChunkGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          uint64_t v2 = 88 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            BOOL v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      BOOL v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 88 * v9;
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          _OWORD v11[5] = 0;
          *uint64_t v11 = v12;
          v11[1] = 0;
          *((_DWORD *)v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          void v11[2] = 0;
          v11[3] = 0;
          uint64_t v13 = v8 + 8;
          uint64_t v14 = *(void *)(v8 + 16);
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          void v11[2] = v14;
          *(void *)(v8 + 16) = 0;
          uint64_t v15 = v11[3];
          v11[3] = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = v15;
          uint64_t v16 = v11[5];
          _OWORD v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 40) = v16;
          ++*(_DWORD *)(v8 + 32);
          ++*((_DWORD *)v11 + 8);
          v11[10] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[6] = 0;
          *((_DWORD *)v11 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v17 = *(void *)(v8 + 48);
          uint64_t v18 = *(void *)(v8 + 56);
          uint64_t v19 = v8 + 48;
          v11[6] = v17;
          v11[7] = v18;
          *(void *)uint64_t v19 = 0;
          *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v20 = v11[8];
          v11[8] = *(void *)(v19 + 16);
          *(void *)(v19 + 16) = v20;
          uint64_t v21 = v11[10];
          v11[10] = *(void *)(v19 + 32);
          *(void *)(v19 + 32) = v21;
          ++*(_DWORD *)(v19 + 24);
          ++*((_DWORD *)v11 + 18);
          re::DynamicArray<unsigned long>::deinit(v19);
          re::DynamicArray<unsigned long>::deinit(v13);
          uint64_t v8 = v19 + 40;
          v11 += 11;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DataArray<re::PerFrameAllocatorGPU>::allocBlock(unsigned int *a1)
{
  uint64_t v2 = 112 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    uint64_t v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(void *)(*(void *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(void *)(*(void *)a1 + 8));
  _os_crash();
  __break(1u);
}

double re::DataArray<re::PerFrameAllocatorGPU>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::PerFrameAllocatorGPU>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

unint64_t re::generateFunctionVariantHash(uint64_t *a1, const char *a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  unint64_t v3 = 0x9E3779B97F4A7C17;
  unint64_t v4 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*a1, a1[1], 0);
  size_t v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, v7);
    unint64_t v3 = ((v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + (v7[0] >> 2)) ^ v7[0]) - 0x61C8864680B583E9;
  }
  return ((v4 >> 2) + (v4 << 6) + v3) ^ v4;
}

void re::FunctionReflectionCache::~FunctionReflectionCache(re::FunctionReflectionCache *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 120);
  v11[0] = (char *)this + 120;
  unint64_t v3 = *((void *)this + 17);
  if (v3 >= 0x10)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *v2;
    unint64_t v6 = v3 >> 4;
    while (1)
    {
      unsigned __int16 v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v11[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF) {
        break;
      }
      v4 += 16;
      if (!--v6) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    uint64_t v12 = v8;
    if (v8 != -1)
    {
      do
      {
        re::internal::destroyPersistent<re::FunctionReflectionResult>((re *)"~FunctionReflectionCache", 59, *(id **)(*(void *)(v11[0] + 8) + 16 * v8 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v11);
        uint64_t v8 = v12;
      }
      while (v12 != -1);
      unint64_t v3 = *((void *)this + 17);
    }
  }
LABEL_9:
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *((void *)this + 19) = v3;
  if (v3 >= 0x10)
  {
    unint64_t v9 = 0;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    do
      *(_OWORD *)(*((void *)this + 15) + 16 * v9++) = v10;
    while (v9 < *((void *)this + 17) >> 4);
  }
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2);
  re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::deinit((uint64_t)this + 72);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::FunctionReflectionCache::~FunctionReflectionCache(this);
  JUMPOUT(0x237DBCBD0);
}

re *re::internal::destroyPersistent<re::FunctionReflectionResult>(re *result, uint64_t a2, id *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::FunctionReflectionResult::~FunctionReflectionResult(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, id *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::FunctionReflectionCache::tryGetCachedFunction(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v7 = a2;
  unint64_t v3 = this + 28;
  os_unfair_lock_lock(this + 28);
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(&this[30]._os_unfair_lock_opaque, &v7);
  if (v4 == -1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)&this[32]._os_unfair_lock_opaque + 16 * v4 + 8);
  }
  os_unfair_lock_unlock(v3);
  return v5;
}

void re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(uint64_t a1, uint64_t a2, id *a3, char a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a1 + 88);
  if ((int)v5 >= 1)
  {
    unint64_t v7 = *(void *)(a1 + 88);
    id v37 = (id)(a1 + 8);
    do
    {
      unint64_t v8 = (v7 - 1);
      if (v5 <= v8)
      {
        unint64_t v51 = 0;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)char v62 = 136315906;
        *(void *)&v62[4] = "operator[]";
        *(_WORD *)&v62[12] = 1024;
        *(_DWORD *)&v62[14] = 789;
        *(_WORD *)&v62[18] = 2048;
        *(void *)&v62[20] = v8;
        __int16 v63 = 2048;
        *(void *)uint64_t v64 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v43 = v7 - 1;
      unint64_t v44 = v7;
      unint64_t v9 = (void *)(*(void *)(a1 + 104) + 88 * v8);
      uint64_t v10 = v9[4];
      unint64_t v11 = v9[2];
      uint64_t v12 = v9[9];
      uint64_t v13 = v9[10];
      id v14 = *a3;
      v50[0] = v10;
      v50[1] = v11;
      uint64_t v48 = v13;
      uint64_t v49 = v12;
      char v47 = a4;
      id v45 = v14;
      uint64_t v46 = a5;
      if (v9[6]) {
        uint64_t v15 = (re::ns *)v9[7];
      }
      else {
        uint64_t v15 = (re::ns *)((char *)v9 + 49);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93DE8, memory_order_acquire) & 1) == 0)
      {
        id v14 = (id)__cxa_guard_acquire(&qword_26AF93DE8);
        if (v14)
        {
          re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v35, (char *)&v56);
          if ((_BYTE)v56) {
            char v36 = BYTE1(v56);
          }
          else {
            char v36 = 0;
          }
          _MergedGlobals_371 = v36;
          __cxa_guard_release(&qword_26AF93DE8);
        }
      }
      if (_MergedGlobals_371)
      {
        *(void *)&v64[2] = 0;
        memset(&v62[8], 0, 20);
        re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v62, v11);
        ++*(_DWORD *)&v62[24];
        uint64_t v41 = (const char *)v15;
        re::ShaderManager::makeFunction(*(uint64_t **)(a2 + 56), v12, v15, 0, &v55);
        id v16 = objc_msgSend(v55, sel_functionConstantsDictionary);
        long long v56 = 0u;
        long long v57 = 0u;
        LODWORD(v5re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
        *(void *)((char *)&v58 + 4) = 0x7FFFFFFFLL;
        id v17 = objc_msgSend(v16, sel_keyEnumerator);
        uint64_t v18 = (_anonymous_namespace_ *)objc_msgSend(v17, sel_nextObject);
        if (v18)
        {
          uint64_t v19 = v18;
          do
          {
            unint64_t v51 = (char *)[(_anonymous_namespace_ *)v19 UTF8String];
            *(void *)&long long buf = objc_msgSend(v16, sel_objectForKey_, v19);
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v56, &v51, &buf);
            if ((void)buf) {

            }
            uint64_t v18 = (_anonymous_namespace_ *)objc_msgSend(v17, sel_nextObject);
            uint64_t v19 = v18;
          }
          while (v18);
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        re::DynamicString::setCapacity(&v51, 0x1F4uLL);
        if (v11)
        {
          unint64_t v20 = v11 << 6;
          do
          {
            if (*(unsigned char *)(v10 + 8)) {
              uint64_t v21 = *(void *)(v10 + 16);
            }
            else {
              uint64_t v21 = v10 + 9;
            }
            *(void *)&long long buf = v21;
            if (re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey((uint64_t)&v56, (char **)&buf))
            {
              re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v62, (re::DynamicString *)v10);
            }
            v10 += 64;
            v20 -= 64;
          }
          while (v20);
        }
        *(void *)&long long buf = *(void *)&v64[2];
        *((void *)&buf + 1) = *(void *)&v62[16];
        unint64_t FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&buf, v41);
        unint64_t v23 = (re *)re::DynamicString::appendf((re::DynamicString *)&v51, "Compiling shader %s (%zu) with function constants ", v41, FunctionVariantHash);
        if (*(void *)&v62[16])
        {
          uint64_t v24 = *(void *)&v64[2];
          uint64_t v25 = *(void *)&v62[16] << 6;
          do
          {
            if (*(unsigned char *)(v24 + 8)) {
              uint64_t v26 = *(const char **)(v24 + 16);
            }
            else {
              uint64_t v26 = (const char *)(v24 + 9);
            }
            uint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v24);
            unint64_t v23 = (re *)re::DynamicString::appendf((re::DynamicString *)&v51, "%s=%llu ", v26, As64Bits);
            v24 += 64;
            v25 -= 64;
          }
          while (v25);
        }
        uint64_t v28 = *re::graphicsLogObjects(v23);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = (char *)&v52 + 1;
          if (v52) {
            uint64_t v34 = v53;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v34;
          _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "%s\n", (uint8_t *)&buf, 0xCu);
        }
        if (v51 && (v52 & 1) != 0) {
          (*(void (**)(void))(*(void *)v51 + 40))();
        }
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v56);
        if (v55) {

        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v62);
      }
      LOBYTE(v51) = 0;
      *(void *)char v62 = a1;
      id v29 = v37;
      uint64_t v30 = operator new(0x58uLL);
      *uint64_t v30 = &unk_26E70DE30;
      v30[1] = v50;
      void v30[2] = &v48;
      v30[3] = v62;
      v30[4] = &v45;
      v30[5] = a2;
      v30[6] = &v51;
      v30[7] = &v49;
      v30[8] = v9 + 5;
      v30[9] = &v47;
      v30[10] = &v46;
      *((void *)&v57 + 1) = v30;
      re::runInLocalAutoreleasePool((uint64_t)&v56);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&v56);
      int v31 = v51;
      if (*(void *)v62) {

      }
      if (!v31) {
        break;
      }
      uint64_t v32 = *(void *)(a1 + 104) + 88 * *(void *)(a1 + 88);
      uint64_t v33 = v32 - 88;
      re::DynamicString::deinit((re::DynamicString *)(v32 - 48));
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v33);
      unint64_t v5 = *(void *)(a1 + 88) - 1;
      *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = v5;
      ++*(_DWORD *)(a1 + 96);
      unint64_t v7 = v43;
    }
    while (v44 > 1);
  }
}

void re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(uint64_t a1, uint64_t a2, dispatch_group_t *a3, int a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 112);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  dispatch_group_enter(*a3);
  if (a1) {
    id v11 = (id)(a1 + 8);
  }
  v24[0] = a1 + 120;
  unint64_t v12 = *(void *)(a1 + 136);
  if (v12 >= 0x10)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 120);
    unint64_t v15 = v12 >> 4;
    while (1)
    {
      unsigned __int16 v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v14 + v13)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v24[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF) {
        break;
      }
      v13 += 16;
      if (!--v15) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = __clz(__rbit64((unsigned __int16)~v16)) + v13;
    for (i = v17; i != -1; uint64_t v17 = i)
    {
      uint64_t v18 = *(void *)(*(void *)(v24[0] + 8) + 16 * v17 + 8);
      if (*(unsigned char *)(v18 + 48))
      {
        dispatch_group_enter(*a3);
        uint64_t v19 = *(void *)(a2 + 56);
        unint64_t v23 = *a3;
        if (a1) {
          id v20 = (id)(a1 + 8);
        }
        uint64_t v21 = *a3;
        uint64_t v27 = re::globalAllocators(v21)[2];
        uint64_t v28 = 0;
        uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v27 + 32))(v27, 48, 0);
        *(void *)uint64_t v22 = &unk_26E70DDD8;
        *(void *)(v22 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = a1;
        *(void *)(v22 + 16) = v18;
        *(void *)(v22 + 24) = v21;
        *(void *)(v22 + 32) = a5;
        *(unsigned char *)(v22 + 40) = a4;
        uint64_t v28 = v22;
        re::ShaderManager::scheduleAsyncGroupFuncOnCompilationQueue(v19, a4, a5, (id *)&v23, (uint64_t)v26);
        re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v26);
      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v24);
    }
  }
LABEL_14:
  dispatch_group_leave(*a3);
  if (a1) {

  }
  os_unfair_lock_unlock(v10);
}

BOOL re::FunctionReflectionCache::addTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 24;
  unint64_t v5 = (uint64_t *)(a2 + 80);
  BOOL v6 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 24, (uint64_t *)(a2 + 80));
  if (!v6)
  {
    re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::add((_anonymous_namespace_ *)(a1 + 72), a2);
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(v4, v5);
  }
  return !v6;
}

__n128 re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 88 * v4;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v5, (uint64_t *)a2);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 40), (const re::DynamicString *)(a2 + 40));
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v5 + 72) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::FunctionReflectionCache::hashFunction(uint64_t a1, uint64_t a2, re::FunctionConstantUsageMask *a3, const char *a4, unint64_t a5)
{
  void v11[2] = *MEMORY[0x263EF8340];
  unint64_t v7 = re::TechniqueDefinitionBuilder::hashFunctionConstants(a1, a2, a3);
  size_t v8 = strlen(a4);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a4, v8, 0, v11);
    unint64_t v9 = ((v11[1] - 0x61C8864680B583E9 + (v11[0] << 6) + (v11[0] >> 2)) ^ v11[0]) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v9 = 0x9E3779B97F4A7C17;
  }
  return ((v7 << 6) - 0x61C8864680B583E9 + (v7 >> 2) + (((a5 >> 2) + (a5 << 6) + v9) ^ a5)) ^ v7;
}

uint64_t re::SharedPersistentObject<re::FunctionReflectionCache>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70DDD8;

  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70DDD8;

  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {

    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (objc_msgSend(**(id **)(a1 + 16), sel_functionType) == (id)5) {
    id v2 = **(id **)(a1 + 16);
  }
  else {
    id v2 = objc_msgSend(**(id **)(a1 + 16), sel_reflectionWithOptions_, 3);
  }
  re::mtl::retainedArray<MTL::Argument>((uint64_t)v3, objc_msgSend(v2, sel_arguments));
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(*(void *)(a1 + 16) + 8, (uint64_t)v3);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v3);
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  *(unsigned char *)(*(void *)(a1 + 16) + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 24));
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70DDD8;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v4;
  if (v4) {
    id v5 = (id)(v4 + 8);
  }
  BOOL v6 = *(void **)(a1 + 24);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a2 + 24) = v6;
  char v7 = *(unsigned char *)(a1 + 40);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(unsigned char *)(a2 + 40) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70DDD8;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(void *)(a2 + 24) = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  *(void *)(a2 + 32) = v3;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(re::RenderManager &,re::dispatch::Group,BOOL,unsigned long long)::$_0,void ()(void)>::size()
{
  return 48;
}

void re::mtl::retainedArray<MTL::Argument>(uint64_t a1, id a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  id v4 = objc_msgSend(a2, sel_count);
  if (v4) {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, (unint64_t)v4);
  }
  id v5 = (char *)objc_msgSend(a2, sel_count);
  if (v5)
  {
    BOOL v6 = v5;
    for (uint64_t i = 0; i != v6; ++i)
    {
      id v8 = objc_msgSend(a2, sel_objectAtIndex_, i);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((void *)a1, &v8);
      if (v8) {
    }
      }
  }
}

BOOL re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey(uint64_t a1, char **a2)
{
  size_t v4 = re::RigEvaluation::HashString::operator()((int)&v12, *a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      id v8 = *a2;
      do
      {
        uint64_t v9 = v7 + 32 * v6;
        int v10 = strcmp(*(const char **)(v9 + 16), v8);
        uint64_t v5 = v6;
        if (!v10) {
          break;
        }
        uint64_t v6 = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
        uint64_t v5 = 0x7FFFFFFFLL;
      }
      while (v6 != 0x7FFFFFFF);
    }
  }
  return v5 != 0x7FFFFFFF;
}

void re::FunctionReflectionResult::~FunctionReflectionResult(id *this)
{
  if (*this)
  {

    *this = 0;
  }
}

uint64_t re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 88 * v4;
        do
        {
          re::DynamicString::deinit((re::DynamicString *)(v3 + 40));
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v3);
          v3 += 88;
          v5 -= 88;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v42 = 0u;
  *(_OWORD *)unint64_t v43 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v43[16], 0, 32);
  uint64_t v9 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v42, v7, v8);
  v40[0] = a1;
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a1;
    unint64_t v13 = v10 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v40[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v13) {
        goto LABEL_25;
      }
    }
    uint64_t v16 = __clz(__rbit64((unsigned __int16)~v15)) + v11;
    uint64_t v41 = v16;
    if (v16 != -1)
    {
      do
      {
        uint64_t v17 = *(void *)(v40[0] + 8);
        if (!*(void *)&v43[40])
        {
          int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
        }
        if (!*(void *)&v43[16]
          || (unint64_t v18 = *(void *)v43, *(void *)v43 > (unint64_t)(8 * *(void *)&v43[16])))
        {
          re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(&v42);
          int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
          unint64_t v18 = *(void *)v43;
        }
        uint64_t v19 = (void *)(v17 + 16 * v16);
        unint64_t v20 = 0xBF58476D1CE4E5B9 * (*v19 ^ (*v19 >> 30));
        unint64_t v21 = (0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31);
        unint64_t v22 = v18 >> 4;
        unint64_t v23 = v21 % (v18 >> 4);
        unint64_t v24 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + 16 * v23)), v14)))), (int8x8_t)0x3830282018100800)));
        if (v24 >= 0x40)
        {
          do
          {
            if (v23 + 1 == v22) {
              unint64_t v23 = 0;
            }
            else {
              ++v23;
            }
            unint64_t v24 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + 16 * v23)), v14)))), (int8x8_t)0x3830282018100800)));
          }
          while (v24 > 0x3F);
        }
        uint64_t v25 = v42 + 16 * v23;
        uint64_t v26 = *(unsigned __int8 *)(v25 + v24) == 255;
        *(unsigned char *)(v25 + v24) = v21 & 0x7F;
        uint64_t v27 = v19[1];
        uint64_t v28 = 16 * (v24 + 16 * v23);
        uint64_t v29 = (void *)(*((void *)&v42 + 1) + v28);
        void *v29 = *v19;
        v29[1] = v27;
        ++*(void *)&v43[8];
        *(void *)&v43[16] -= v26;
        unint64_t v30 = 0xBF58476D1CE4E5B9
            * (*(void *)(*((void *)&v42 + 1) + v28) ^ (*(void *)(*((void *)&v42 + 1) + v28) >> 30));
        *(void *)&v43[24] ^= ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                     * (v30 ^ (v30 >> 27)));
        uint64_t v9 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v40);
        int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
        uint64_t v16 = v41;
      }
      while (v41 != -1);
      unint64_t v10 = a1[2];
    }
  }
LABEL_25:
  uint64_t v32 = *(void *)&v43[40];
  *(void *)&v43[40] = a1[7];
  uint64_t result = *(void *)&v43[40];
  long long v33 = v42;
  long long v34 = *(_OWORD *)v43;
  *(void *)unint64_t v43 = v10;
  uint64_t v35 = *a1;
  uint64_t v36 = a1[1];
  *(void *)&long long v42 = *a1;
  *((void *)&v42 + 1) = v36;
  long long v37 = *(_OWORD *)&v43[16];
  long long v38 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v43[32];
  a1[7] = v32;
  *(_OWORD *)&v43[24] = v38;
  long long v39 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v33;
  *((_OWORD *)a1 + 1) = v34;
  *((_OWORD *)a1 + 2) = v37;
  *(_OWORD *)&v43[8] = v39;
  if (result)
  {
    if (v36) {
      *((void *)&v42 + 1) = 0;
    }
    if (v35) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::FunctionReflectionCache::FunctionReflectionTask>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          uint64_t v2 = 88 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacitdouble y = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 88 * v9;
        uint64_t v11 = v7 + 5;
        do
        {
          *(v11 - 1) = 0;
          *(v11 - 4) = 0;
          *(v11 - 3) = 0;
          *(v11 - 5) = 0;
          *((_DWORD *)v11 - 4) = 0;
          uint64_t v12 = *(void *)(v8 + 8);
          *(v11 - 5) = *(void *)v8;
          *(v11 - 4) = v12;
          *(void *)uint64_t v8 = 0;
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
          uint64_t v13 = *(v11 - 3);
          *(v11 - 3) = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = v13;
          uint64_t v14 = *(v11 - 1);
          *(v11 - 1) = *(void *)(v8 + 32);
          *(void *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*((_DWORD *)v11 - 4);
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *uint64_t v11 = *(void *)(v8 + 40);
          *(void *)(v8 + 40) = 0;
          unint64_t v11[3] = *(void *)(v8 + 64);
          *(void *)(v8 + 64) = 0;
          uint64_t v16 = v11[1];
          uint64_t v15 = v11[2];
          uint64_t v17 = *(void *)(v8 + 56);
          v11[1] = *(void *)(v8 + 48);
          void v11[2] = v17;
          *(void *)(v8 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v16;
          *(void *)(v8 + 56) = v15;
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 72);
          re::DynamicString::deinit((re::DynamicString *)(v8 + 40));
          re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v8);
          v11 += 11;
          v8 += 88;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::TechniqueFunctionConstant>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::TechniqueFunctionConstant>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = a1[4];
      uint64_t v11 = v8 << 6;
      uint64_t v12 = v4 << 6;
      do
      {
        uint64_t v13 = re::DynamicString::DynamicString((re::DynamicString *)(v10 + v11), (const re::DynamicString *)(v9 + v11));
        *((_DWORD *)v13 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_DWORD *)(v9 + v11 + 32);
        re::FixedArray<unsigned char>::FixedArray((void *)v13 + 5, (uint64_t *)(v9 + v11 + 40));
        v9 += 64;
        v12 -= 64;
        v10 += 64;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + (v4 << 6)), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (uint64_t *)(a1[4] + (v4 << 6));
      uint64_t v7 = (v5 << 6) - (v4 << 6);
      do
      {
        re::FixedArray<CoreIKTransform>::deinit(v6 + 5);
        re::DynamicString::deinit((re::DynamicString *)v6);
        v6 += 8;
        v7 -= 64;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a3;
  uint64_t v5 = (uint64_t *)(a4 + 40);
  uint64_t v6 = a2 + 5;
  do
  {
    re::DynamicString::operator=((re::DynamicString *)(v5 - 5), (re::DynamicString *)(v6 - 5));
    *((_DWORD *)v5 - 2) = *((_DWORD *)v6 - 2);
    re::FixedArray<unsigned char>::operator=(v5, v6);
    v5 += 8;
    uint64_t v7 = v6 + 3;
    v6 += 8;
  }
  while (v7 != v4);
  return v4;
}

void std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_26E70DE30;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70DE30;
  *(_OWORD *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v2 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
  id v20 = v2;
  long long v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v5 = v4 << 6;
    uint64_t v6 = (unsigned __int16 *)(*v3 + 32);
    do
    {
      objc_msgSend(v2, sel_setConstantValue_type_atIndex_, *((void *)v6 + 3), *v6, v6[1], v20);
      v6 += 32;
      v5 -= 64;
    }
    while (v5);
  }
  uint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = **(void **)(a1 + 24);
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  uint64_t v10 = (re *)**(id **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = re::globalAllocators(v10)[2];
  uint64_t v25 = v12;
  if (v12) {
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v12 + 32))(v12, 40, 0);
  }
  else {
    uint64_t v13 = 0;
  }
  *uint64_t v13 = &unk_26E70DEA0;
  v13[1] = v7;
  void v13[2] = v8;
  v13[3] = v10;
  v13[4] = v11;
  uint64_t v26 = v13;
  dispatch_group_enter(**(dispatch_group_t **)(a1 + 32));
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = **(void **)(a1 + 56);
  if (*(unsigned char *)(v15 + 8)) {
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else {
    uint64_t v17 = v15 + 9;
  }
  int v18 = **(unsigned __int8 **)(a1 + 72);
  uint64_t v19 = **(void **)(a1 + 80);
  uint64_t v22 = v12;
  uint64_t v23 = 0;
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>((uint64_t)v21, (uint64_t)v24);
  **(unsigned char **)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = re::ShaderManager::tryRequestFunctionReflection(v14, v16, v17, &v20, v18, v19, (uint64_t)v21);
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable((uint64_t)v21);
  re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable((uint64_t)v24);
  if (v2) {
}
  }

uint64_t std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0,std::allocator<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70DEA0;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {

    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70DEA0;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {

    *(void *)(a1 + 16) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator()(uint64_t a1, void **a2)
{
  if (*a2)
  {
    uint64_t v27 = 0;
    char v28 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    int v26 = 0;
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v24, a2);
    char v28 = 1;
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v29 = *(void *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 112));
    if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v3 + 120), &v29) == -1)
    {
      uint64_t v4 = re::globalAllocators((re *)0xFFFFFFFFFFFFFFFFLL);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 56, 8);
      uint64_t v6 = v24;
      *(void *)(v5 + 40) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(_OWORD *)(v5 + 16) = 0u;
      *(void *)uint64_t v5 = v6;
      *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
      *(void *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = *((void *)&v24 + 1);
      *(_OWORD *)(v5 + 16) = v25;
      long long v24 = 0u;
      long long v25 = 0u;
      *(void *)(v5 + 40) = v27;
      uint64_t v27 = 0;
      ++v26;
      ++*(_DWORD *)(v5 + 32);
      *(unsigned char *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = v28;
      if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v3 + 120), &v29) == -1)
      {
        if (!*(void *)(v3 + 176))
        {
        }
        uint64_t v8 = *(void *)(v3 + 152);
        if (!v8 || (unint64_t v9 = *(void *)(v3 + 136), v9 > 8 * v8))
        {
          re::HashBrown<unsigned long,re::FunctionReflectionResult *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)(v3 + 120));
          unint64_t v9 = *(void *)(v3 + 136);
        }
        unint64_t v10 = 0xBF58476D1CE4E5B9;
        unint64_t v11 = 0x94D049BB133111EBLL;
        unint64_t v12 = (0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27))) >> 31);
        unint64_t v13 = v9 >> 4;
        uint64_t v14 = *(void *)(v3 + 120);
        unint64_t v15 = v12 % v13;
        while (1)
        {
          unint64_t v16 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v14 + 16 * v15)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
          if (v16 < 0x40) {
            break;
          }
          if (v15 + 1 == v13) {
            unint64_t v15 = 0;
          }
          else {
            ++v15;
          }
          if (v15 == v12 % v13)
          {
            re::internal::assertLog((re::internal *)4, v7, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
            _os_crash();
            __break(1u);
            break;
          }
        }
        uint64_t v17 = v14 + 16 * v15;
        BOOL v18 = *(unsigned __int8 *)(v17 + v16) == 255;
        *(unsigned char *)(v17 + v16) = v12 & 0x7F;
        uint64_t v19 = 16 * (v16 + 16 * v15);
        id v20 = (unint64_t *)(*(void *)(v3 + 128) + v19);
        *id v20 = v29;
        v20[1] = v5;
        uint64_t v21 = *(void *)(v3 + 152) - v18;
        ++*(void *)(v3 + 144);
        *(void *)(v3 + 152) = v21;
        uint64_t v22 = *(void *)(*(void *)(v3 + 128) + v19) ^ (*(void *)(*(void *)(v3 + 128) + v19) >> 30);
        unint64_t v23 = ((v22 * v10) ^ ((v22 * v10) >> 27)) * v11;
        *(void *)(v3 + 160) ^= (v23 >> 31) ^ v23;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 112));
    re::FunctionReflectionResult::~FunctionReflectionResult((id *)&v24);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 24));
}

void *re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *a2 = &unk_26E70DEA0;
  a2[1] = v5;
  a2[2] = v4;
  if (v4) {
    id v6 = (id)(v4 + 8);
  }
  id v7 = *(id *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  a2[3] = v7;
  a2[4] = v8;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_26E70DEA0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = v2;
  *(void *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v4;
  return a2;
}

uint64_t re::internal::Callable<re::FunctionReflectionCache::scheduleFunctionBuildTask(re::RenderManager &,re::Slice<re::TechniqueFunctionConstant>,unsigned long,re::DynamicString const&,unsigned long,re::dispatch::Group,BOOL,unsigned long long)::$_0::operator() const(void)::{lambda(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)#1},void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      unint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 32) = v4;
        *(void *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      unint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    unint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      uint64_t v8 = v6;
      unint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        unint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        unint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 32) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(a2);
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::Pair<NS::SharedPtr<MTL::Function>,re::DynamicArray<NS::SharedPtr<MTL::Argument>>,true> const&)>::destroyCallable(uint64_t a1))(void)
{
  __n128 result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    __n128 result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      __n128 result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void re::mtl::makeDefaultDevice(void *a1@<X8>)
{
  id v3 = MTLCreateSystemDefaultDevice();
  if (v3)
  {
    id v5 = v3;
    *a1 = v5;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Unable to create default system Metal device.", "(mtlDevice != nullptr)", "makeDefaultDevice", 242);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::mtl::getTextureTypeName()
{
  MTLTextureTypeString();
  id v0 = objc_claimAutoreleasedReturnValue();
  uint64_t v1 = [v0 UTF8String];

  return v1;
}

uint64_t re::mtl::getTextureCompressionType(id *a1, void *a2, void *a3, void *a4)
{
  {
    unint64_t v10 = a1;
    unint64_t v11 = a4;
    a4 = v11;
    int v14 = v12;
    a1 = v10;
    if (v14)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableLossy", v13, (char *)&v19);
      if ((_BYTE)v19) {
        char v15 = BYTE1(v19);
      }
      else {
        char v15 = 0;
      }
      re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::disableLossyDefault = v15;
      a1 = v10;
      a4 = v11;
    }
  }
  {
    unint64_t v16 = a1;
    BOOL v18 = a4;
    a4 = v18;
    if (v17)
    {
      re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::lossyIsNotSupported = objc_msgSend(*v16, "supportsFamily:", 1008, v18) ^ 1;
      a4 = v18;
    }
  }
  uint64_t v6 = *a4;
  if (*a3 == 32
    || (v22 = 0, v20 = 0u, v21 = 0u, long long v19 = 0u, MTLPixelFormatGetInfoForDevice(), (WORD4(v19) & 0x400) != 0))
  {
    BOOL v7 = 1;
  }
  else
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    MTLPixelFormatGetInfoForDevice();
    BOOL v7 = (DWORD2(v19) & 0x4000000) == 0;
  }
  unsigned int v8 = (v6 >> 4) & 1;
  if ((v6 & 0x4002) == 2) {
    unsigned int v8 = 1;
  }
  if (re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::disableLossyDefault | re::mtl::getTextureCompressionType(re::mtl::Device const&,MTL::StorageMode const&,MTL::PixelFormat const&,unsigned long const&)::lossyIsNotSupported) {
    unsigned int v8 = 1;
  }
  return (*a2 == 2) & ~(v8 | v7);
}

uint64_t re::mtl::Device::isFrameCaptureEnabled(re::mtl::Device *this)
{
  uint64_t v1 = [MEMORY[0x263F12800] sharedCaptureManager];
  uint64_t v2 = [v1 supportsDestination:2];

  return v2;
}

BOOL re::mtl::Device::needsArgumentBufferTextureEmulation(re::mtl::Device *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93DF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = this;
    int v4 = __cxa_guard_acquire(&qword_26AF93DF8);
    this = v2;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"needsArgumentBufferTextureEmulation", v3, &byte_26AF93DF2);
      __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, &byte_26AF93DF2, &dword_233120000);
      __cxa_guard_release(&qword_26AF93DF8);
      this = v2;
    }
  }
  if (byte_26AF93DF2) {
    return byte_26AF93DF3 != 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E08, memory_order_acquire) & 1) == 0)
  {
    id v5 = (id *)this;
    if (__cxa_guard_acquire(&qword_26AF93E08))
    {
      qword_26AF93E00 = [*v5 argumentBuffersSupport];
      __cxa_guard_release(&qword_26AF93E08);
    }
  }
  return qword_26AF93E00 == 0;
}

uint64_t re::mtl::Device::makeCommandQueue@<X0>(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = objc_msgSend(*a1, sel_newCommandQueueWithDescriptor_, a2);
  *a3 = v4;

  return [v4 setBackgroundGPUPriority:2];
}

void re::mtl::Device::makeLibraryWithFile(void **this@<X0>, re::ns *a2@<X1>, re **a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v6 = objc_alloc(MEMORY[0x263EFF8F8]);
  unsigned int v8 = re::ns::convertToNSString(a2, v7);
  id v32 = 0;
  unint64_t v9 = (void *)[v6 initWithContentsOfFile:v8 options:1 error:&v32];
  id v10 = v32;

  if (v9)
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZNK2re3mtl6Device19makeLibraryWithFileEPKc_block_invoke;
    aBlock[3] = &unk_264BE2330;
    id v12 = v9;
    id v31 = v12;
    unint64_t v13 = _Block_copy(aBlock);
    id v14 = v12;
    dispatch_data_t v15 = dispatch_data_create((const void *)[v14 bytes], objc_msgSend(v14, "length"), 0, v13);
    unint64_t v16 = *this;
    id v29 = 0;
    int v17 = (void *)[v16 newLibraryWithData:v15 error:&v29];
    BOOL v18 = (re *)v29;
    long long v19 = v18;
    if (v17)
    {

      long long v20 = v17;
      *a3 = v20;
      goto LABEL_16;
    }
    uint64_t v22 = *re::graphicsLogObjects(v18);
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    if (v19)
    {
      if (v23)
      {
        long long v24 = v22;
        id v25 = [(re *)v19 localizedDescription];
        uint64_t v26 = [v25 UTF8String];
        *(_DWORD *)long long buf = 136315138;
        long long v34 = (re::ns *)v26;
        _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed [%s].", buf, 0xCu);
      }
    }
    else if (v23)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed.", buf, 2u);
    }
  }
  else
  {
    long long v21 = *re::graphicsLogObjects(v11);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v34 = a2;
      _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed to open the file [%s].", buf, 0xCu);
    }
  }
  uint64_t v27 = (re *)0;
  *a3 = v27;
  char v28 = *re::graphicsLogObjects(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "makeLibraryWithFile failed.", buf, 2u);
  }
  long long v20 = 0;
LABEL_16:
}

void re::mtl::Device::makeComputePipelineState(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  id v4 = objc_msgSend(*a1, sel_newComputePipelineStateWithDescriptor_options_reflection_error_, *a2, 0, 0, &v11);
  *a3 = v4;
  if (!v4)
  {
    id v5 = v11;
    id v6 = *re::graphicsLogObjects(0);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        unsigned int v8 = v11;
        unint64_t v9 = v6;
        id v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)long long buf = 136315138;
        id v13 = v10;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "makeComputePipelineState failed [%s].", buf, 0xCu);
      }
    }
    else if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "makeComputePipelineState failed.", buf, 2u);
    }
  }
}

void re::mtl::Device::makeRenderPipelineState(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  id v4 = objc_msgSend(*a1, sel_newRenderPipelineStateWithDescriptor_error_, a2, &v11);
  *a3 = v4;
  if (!v4)
  {
    id v5 = v11;
    id v6 = *re::graphicsLogObjects(0);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        unsigned int v8 = v11;
        unint64_t v9 = v6;
        id v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)long long buf = 136315138;
        id v13 = v10;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed [%s].", buf, 0xCu);
      }
    }
    else if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed.", buf, 2u);
    }
  }
}

{
  id v4;
  void *v5;
  NSObject *v6;
  BOOL v7;
  void *v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  id v4 = objc_msgSend(*a1, sel_newRenderPipelineStateWithTileDescriptor_options_reflection_error_, a2, 0, 0, &v11);
  *a3 = v4;
  if (!v4)
  {
    id v5 = v11;
    id v6 = *re::graphicsLogObjects(0);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        unsigned int v8 = v11;
        unint64_t v9 = v6;
        id v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)long long buf = 136315138;
        id v13 = v10;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed [%s].", buf, 0xCu);
      }
    }
    else if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "makeRenderPipelineState failed.", buf, 2u);
    }
  }
}

void re::mtl::Device::makeBinaryArchive(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  id v4 = objc_msgSend(*a1, sel_newBinaryArchiveWithDescriptor_error_, *a2, &v11);
  if (!v4)
  {
    id v5 = v11;
    id v6 = *re::graphicsLogObjects(0);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v7)
      {
        unsigned int v8 = v11;
        unint64_t v9 = v6;
        id v10 = objc_msgSend(objc_msgSend(v8, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)long long buf = 136315138;
        id v13 = v10;
        _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "makeBinaryArchive failed [%s].", buf, 0xCu);
      }
    }
    else if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "makeBinaryArchive failed.", buf, 2u);
    }
  }
  *a3 = v4;
}

id re::mtl::Device::makeTexture@<X0>(id a1@<X1>, id *a2@<X0>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v6 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v6 <= 0x4000 && (id v6 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v6 <= 0x4000))
  {
    id result = objc_msgSend(*a2, sel_newTextureWithDescriptor_, a1);
  }
  else
  {
    BOOL v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = v7;
      int v10 = 134218240;
      id v11 = objc_msgSend(a1, sel_width);
      __int16 v12 = 2048;
      id v13 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v10, 0x16u);
    }
    id result = 0;
  }
  *a3 = result;
  return result;
}

id re::mtl::Device::makeTextureWithIOSurface@<X0>(id a1@<X1>, id *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v10 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v10 <= 0x4000 && (int v10 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v10 <= 0x4000))
  {
    id result = objc_msgSend(*a2, sel_newTextureWithDescriptor_iosurface_plane_, a1, a3, a4);
  }
  else
  {
    id v11 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v13 = v11;
      int v14 = 134218240;
      id v15 = objc_msgSend(a1, sel_width);
      __int16 v16 = 2048;
      id v17 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v14, 0x16u);
    }
    id result = 0;
  }
  *a5 = result;
  return result;
}

id re::mtl::Device::makeSharedTexture@<X0>(id a1@<X1>, id *a2@<X0>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v6 = (re *)objc_msgSend(a1, sel_width);
  if ((unint64_t)v6 <= 0x4000 && (id v6 = (re *)objc_msgSend(a1, sel_height), (unint64_t)v6 <= 0x4000))
  {
    id result = objc_msgSend(*a2, sel_newSharedTextureWithDescriptor_, a1);
  }
  else
  {
    BOOL v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = v7;
      int v10 = 134218240;
      id v11 = objc_msgSend(a1, sel_width);
      __int16 v12 = 2048;
      id v13 = objc_msgSend(a1, sel_height);
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Texture too large with dimensions %zu x %zu", (uint8_t *)&v10, 0x16u);
    }
    id result = 0;
  }
  *a3 = result;
  return result;
}

void re::mtl::Device::makeArgumentEncoder(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = objc_msgSend(objc_msgSend(MEMORY[0x263EFF8C0], sel_alloc), sel_initWithObjects_count_, *(void *)(a2 + 32), *(void *)(a2 + 16));
  *a3 = objc_msgSend(*a1, sel_newArgumentEncoderWithArguments_, v5);
  if (v5)
  {
  }
}

id re::mtl::Device::areProgrammableSamplePositionsSupported(id *this)
{
  id v1 = *this;
  if ((objc_msgSend(*this, sel_respondsToSelector_, sel_areProgrammableSamplePositionsSupported) & 1) != 0
    || (id result = objc_msgSend(v1, sel_methodSignatureForSelector_, sel_areProgrammableSamplePositionsSupported)) != 0)
  {
    return objc_msgSend(v1, sel_areProgrammableSamplePositionsSupported);
  }
  return result;
}

void re::mtl::Device::newCounterSampleBufferWithDescriptor(void **a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v4 = *a1;
  id v5 = *a2;
  id v15 = 0;
  id v6 = v5;
  BOOL v7 = (void *)[v4 newCounterSampleBufferWithDescriptor:v6 error:&v15];
  id v8 = v15;

  if (v8)
  {
    int v10 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = v10;
      id v13 = [v8 localizedDescription];
      uint64_t v14 = [v13 UTF8String];
      *(_DWORD *)long long buf = 136315138;
      uint64_t v17 = v14;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "newCounterSampleBufferWithDescriptor failed: %s", buf, 0xCu);
    }
    *a3 = 0;
  }
  else
  {
    *a3 = v7;
    id v11 = v7;
  }
}

void re::mtl::Device::getCounterSet(id *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      id v5 = (id *)MEMORY[0x263F12620];
      goto LABEL_7;
    case 4:
      id v5 = (id *)MEMORY[0x263F12618];
      goto LABEL_7;
    case 2:
      id v5 = (id *)MEMORY[0x263F12610];
LABEL_7:
      id v6 = *v5;
      goto LABEL_9;
  }
  id v6 = 0;
LABEL_9:
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  BOOL v7 = objc_msgSend(*a1, "counterSets", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v13 = [v12 name];

        if (v13 == v6)
        {
          *a3 = v12;
          id v14 = v12;

          goto LABEL_19;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  *a3 = 0;
LABEL_19:
}

void re::mtl::CommandQueue::makeCommandBuffer(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this commandBuffer];
  *a2 = v3;
}

void re::mtl::CommandQueue::makeCommandBufferWithUnretainedReferences(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this commandBufferWithUnretainedReferences];
  *a2 = v3;
}

void re::mtl::CommandQueue::makeCommandBufferWithDescriptor(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = [*a1 commandBufferWithDescriptor:a2];
  *a3 = v4;
}

void re::mtl::CommandQueue::device(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this device];
  *a2 = v3;
}

uint64_t re::mtl::CommandBuffer::getLabel(id *this)
{
  id v2 = *this;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*this label];
    uint64_t v4 = [v3 UTF8String];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t (***re::mtl::CommandBuffer::addCompletionHandler(void **a1, uint64_t a2))(void)
{
  v5[5] = *MEMORY[0x263EF8340];
  id v2 = *a1;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl13CommandBuffer20addCompletionHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE_e28_v16__0___MTLCommandBuffer__8l;
  v5[3] = *(void *)(a2 + 24);
  v5[4] = 0;
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v5, a2);
  [v2 addCompletedHandler:v4];
  return re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v5);
}

void ___ZNK2re3mtl13CommandBuffer20addCompletionHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void (**)(uint64_t, id *))(*(void *)v3 + 16);

  v4(v3, &v5);
}

uint64_t __copy_helper_block_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(a1 + 32);
}

void ___ZNK2re3mtl13CommandBuffer38addCompletionHandlerPrintLabelForDebugEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  id v2 = a2;
  id v7 = v2;
  uint64_t v3 = (re *)[v2 status];
  if (v3 == 5)
  {
    uint64_t v4 = *re::graphicsLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      uint64_t Label = re::mtl::CommandBuffer::getLabel(&v7);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v9 = Label;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Failed CB %s!\n", buf, 0xCu);
    }
  }
}

uint64_t (***re::mtl::CommandBuffer::addScheduledHandler(void **a1, uint64_t a2))(void)
{
  v5[5] = *MEMORY[0x263EF8340];
  id v2 = *a1;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl13CommandBuffer19addScheduledHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c48_ZTSN2re8FunctionIFvRKNS_3mtl13CommandBufferEEEE_e28_v16__0___MTLCommandBuffer__8l;
  v5[3] = *(void *)(a2 + 24);
  v5[4] = 0;
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v5, a2);
  [v2 addScheduledHandler:v4];
  return re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v5);
}

void ___ZNK2re3mtl13CommandBuffer19addScheduledHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void (**)(uint64_t, id *))(*(void *)v3 + 16);

  v4(v3, &v5);
}

void re::mtl::CommandBuffer::makeRenderCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, re **a3@<X8>)
{
  id v4 = [*a1 renderCommandEncoderWithDescriptor:a2];
  re::mtl::RenderCommandEncoder::RenderCommandEncoder(a3, v4);
}

void re::mtl::CommandBuffer::makeParallelRenderCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = [*a1 parallelRenderCommandEncoderWithDescriptor:a2];
  *a3 = v4;
}

void re::mtl::CommandBuffer::makeBlitCommandEncoder(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this blitCommandEncoder];
  *a2 = v3;
}

void re::mtl::CommandBuffer::makeComputeCommandEncoder(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this computeCommandEncoder];
  *a2 = v3;
}

void re::mtl::CommandBuffer::makeComputeCommandEncoder(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = [*a1 computeCommandEncoderWithDescriptor:a2];
  *a3 = v4;
}

void re::mtl::CommandBuffer::commandQueue(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this commandQueue];
  *a2 = v3;
}

void re::mtl::CommandBuffer::error(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this error];
  *a2 = v3;
}

re **re::mtl::RenderCommandEncoder::RenderCommandEncoder(re **a1, void *a2)
{
  id v3 = a2;
  *a1 = v3;
  id v4 = re::globalAllocators(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 264, 8);
  uint64_t v6 = v5;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(void *)(v5 + 256) = 0;
  if (v3) {
    re::mtl::RenderEncoderImpCache::build((re::mtl::RenderEncoderImpCache *)v5, v3);
  }
  a1[1] = (re *)v6;

  return a1;
}

re::mtl::RenderCommandEncoder *re::mtl::RenderCommandEncoder::RenderCommandEncoder(re::mtl::RenderCommandEncoder *this, id *a2)
{
  id v4 = (re *)*a2;
  *(void *)this = v4;
  uint64_t v5 = re::globalAllocators(v4);
  uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 264, 8);
  id v7 = a2[1];
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  void v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  void v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  *((void *)v6 + 32) = 0;
  memcpy(v6, v7, 0x108uLL);
  *((void *)this + 1) = v6;
  return this;
}

void re::mtl::RenderCommandEncoder::~RenderCommandEncoder(re::mtl::RenderCommandEncoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    id v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3[2] + 40))(v3[2], v2);
  }
}

int *re::mtl::RenderCommandEncoder::setLabel(uint64_t **this, id *a2)
{
  id result = re::AppleBuild::get((re::AppleBuild *)this);
  if (*result == 1)
  {
    uint64_t v5 = this[1];
    id v6 = *a2;
    uint64_t v7 = *v5;
    uint64_t v8 = (uint64_t (*)(uint64_t, char *, id))v5[31];
    return (int *)v8(v7, sel_setLabel_, v6);
  }
  return result;
}

uint64_t re::mtl::RenderCommandEncoder::setViewports(uint64_t a1)
{
  v13[1] = *MEMORY[0x263EF8340];
  v5.f64[0] = MEMORY[0x270FA5388](a1);
  if (v3)
  {
    id v6 = (float64x2_t *)&v13[-2 * v4 + 4];
    uint64_t v7 = v2 + 2;
    unsigned int v8 = 1;
    do
    {
      float64x2_t v9 = vcvtq_f64_f32(v7[-1]);
      v6[-2] = vcvtq_f64_f32(v7[-2]);
      v6[-1] = v9;
      float32x2_t v10 = *v7;
      v7 += 3;
      unint64_t v11 = v8;
      float64x2_t v5 = vcvtq_f64_f32(v10);
      *id v6 = v5;
      v6 += 3;
      ++v8;
    }
    while (v11 < v3);
  }
  return objc_msgSend(*v1, "setViewports:count:", v5.f64[0]);
}

int *re::mtl::ParallelRenderCommandEncoder::setLabel(re::mtl::ParallelRenderCommandEncoder *this, const re::ns::String *a2)
{
  id result = re::AppleBuild::get(this);
  if (*result == 1)
  {
    float64x2_t v5 = *(void **)this;
    uint64_t v6 = *(void *)a2;
    return (int *)[v5 setLabel:v6];
  }
  return result;
}

void re::mtl::ParallelRenderCommandEncoder::makeRenderCommandEncoder(id *this@<X0>, re **a2@<X8>)
{
  id v3 = [*this renderCommandEncoder];
  re::mtl::RenderCommandEncoder::RenderCommandEncoder(a2, v3);
}

void re::mtl::BlitCommandEncoder::copyFromBufferToTexture(void **a1, void **a2, uint64_t *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8)
{
  __int16 v12 = *a1;
  id v13 = *a2;
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v16 = a3[2];
  uint64_t v17 = *((void *)a4 + 2);
  long long v22 = *a4;
  uint64_t v23 = v17;
  id v18 = v13;
  uint64_t v19 = *((void *)a8 + 2);
  long long v20 = *a8;
  uint64_t v21 = v19;
  [v12 copyFromBuffer:v18 sourceOffset:v14 sourceBytesPerRow:v15 sourceBytesPerImage:v16 sourceSize:&v22 toTexture:a5 destinationSlice:a6 destinationLevel:a7 destinationOrigin:&v20];
}

uint64_t re::mtl::BlitCommandEncoder::copyFromTextureToBuffer(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6, void *a7, void *a8)
{
  unsigned int v8 = *a1;
  uint64_t v9 = *((void *)a5 + 2);
  long long v14 = *a5;
  uint64_t v15 = v9;
  uint64_t v10 = *((void *)a6 + 2);
  long long v12 = *a6;
  uint64_t v13 = v10;
  return [v8 copyFromTexture:a2 sourceSlice:a3 sourceLevel:a4 sourceOrigin:&v14 sourceSize:&v12 toBuffer:*a7 destinationOffset:*a8 destinationBytesPerRow:a8[1] destinationBytesPerImage:a8[2]];
}

void re::mtl::ComputeCommandEncoder::pushDebugGroup(void **this, re::ns *a2)
{
  uint64_t v2 = *this;
  re::ns::convertToNSString(a2, (const char *)a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 pushDebugGroup:v3];
}

void re::mtl::Drawable::texture(id *this@<X0>, void *a2@<X8>)
{
  id v4 = [*this texture];
  *a2 = v4;
  id v3 = v4;
}

uint64_t (***re::mtl::Drawable::addPresentedHandler(void **a1, uint64_t a2))(void)
{
  v5[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  v4[2] = ___ZNK2re3mtl8Drawable19addPresentedHandlerENS_8FunctionIFvRKS1_EEE_block_invoke;
  v4[3] = &__block_descriptor_72_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE_e23_v16__0___MTLDrawable__8l;
  v5[3] = *(void *)(a2 + 24);
  v5[4] = 0;
  re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::operator=<24ul>((uint64_t)v5, a2);
  [v2 addPresentedHandler:v4];
  return re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::destroyCallable((uint64_t)v5);
}

void ___ZNK2re3mtl8Drawable19addPresentedHandlerENS_8FunctionIFvRKS1_EEE_block_invoke(uint64_t a1)
{
  id v1 = 0;
  (*(void (**)(void, id *))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), &v1);
}

uint64_t __copy_helper_block_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c42_ZTSN2re8FunctionIFvRKNS_3mtl8DrawableEEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::destroyCallable(a1 + 32);
}

void re::mtl::Layer::nextDrawable(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this nextDrawable];
  *a2 = v3;
}

void re::mtl::Library::makeFunction(void **this@<X0>, re::ns *a2@<X1>, void *a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float64x2_t v5 = *this;
  uint64_t v6 = re::ns::convertToNSString(a2, (const char *)a2);
  uint64_t v7 = (void *)[v5 newFunctionWithName:v6];
  *a3 = v7;
  id v8 = v7;

  if (!v7)
  {
    uint64_t v10 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315138;
      long long v12 = a2;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "makeFunction failed for function name: %s.", (uint8_t *)&v11, 0xCu);
    }
  }
}

void re::mtl::Library::makeFunctionWithDescriptor(id *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v38 = 0;
  id v6 = objc_msgSend(*a1, sel_newFunctionWithDescriptor_error_, a2, &v38);
  if (v6)
  {
    if (objc_msgSend(a2, sel_constantValues))
    {
      id v7 = objc_msgSend(a2, sel_name);
      id v8 = objc_msgSend(*a1, sel_newFunctionWithName_, v7);
      id v9 = objc_msgSend(a2, sel_constantValues);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E10, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF93E10))
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableFunctionConstantLabels", v33, (char *)buf);
        if (buf[0]) {
          uint8_t v34 = buf[1];
        }
        else {
          uint8_t v34 = 0;
        }
        _MergedGlobals_372 = v34;
        __cxa_guard_release(&qword_26AF93E10);
      }
      if (_MergedGlobals_372)
      {
        id v35 = v6;
        uint64_t v36 = a3;
        uint64_t v10 = objc_msgSend(v8, sel_functionConstantsDictionary);
        std::string::basic_string[abi:nn180100]<0>(&v37, (char *)objc_msgSend(objc_msgSend(v8, sel_name), sel_UTF8String));
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        id v11 = v10;
        uint64_t v12 = [v11 countByEnumeratingWithState:&v40 objects:buf count:16];
        if (!v12) {
          goto LABEL_33;
        }
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v41;
        while (1)
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v41 != v14) {
              objc_enumerationMutation(v11);
            }
            uint64_t v16 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            uint64_t v17 = [v11 objectForKeyedSubscript:v16];
            if (!v9 || (uint64_t v18 = [v9 constantValueWithFunctionConstant:v17]) == 0)
            {
              if ([v17 type] != 53) {
                goto LABEL_31;
              }
              uint64_t v21 = 0;
              while (1)
              {
                uint64_t v22 = defaultEnableConstants[v21];
                if ([v17 index] == v22) {
                  break;
                }
                v21 += 4;
                if (v21 == 44) {
                  goto LABEL_31;
                }
              }
              id v25 = *(const std::string::value_type **)&defaultEnableConstants[v21 + 2];
              std::string::append(&v37, "-");
              long long v20 = v25;
              goto LABEL_30;
            }
            uint64_t v19 = (int *)v18;
            if ([v17 type] == 53)
            {
              if ([v17 type] == 53 && *(unsigned char *)v19)
              {
                std::string::append(&v37, "-");
                long long v20 = (const std::string::value_type *)[v16 UTF8String];
LABEL_30:
                std::string::append(&v37, v20);
              }
            }
            else
            {
              std::string::append(&v37, "-");
              std::string::append(&v37, (const std::string::value_type *)[v16 UTF8String]);
              std::string::append(&v37, ":");
              std::to_string(&v39, *v19);
              if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v23 = &v39;
              }
              else {
                uint64_t v23 = (std::string *)v39.__r_.__value_.__r.__words[0];
              }
              if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v39.__r_.__value_.__l.__size_;
              }
              std::string::append(&v37, (const std::string::value_type *)v23, size);
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v39.__r_.__value_.__l.__data_);
              }
            }
LABEL_31:
          }
          uint64_t v13 = [v11 countByEnumeratingWithState:&v40 objects:buf count:16];
          if (!v13)
          {
LABEL_33:

            id v6 = v35;
            a3 = v36;
            goto LABEL_38;
          }
        }
      }
      std::string::basic_string[abi:nn180100]<0>(&v37, "");
LABEL_38:
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v31 = &v37;
      }
      else {
        id v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      id v32 = objc_msgSend(NSString, sel_stringWithCString_encoding_, v31, 4);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      objc_msgSend(v6, sel_setLabel_, v32);
      if (v32) {

      }
      if (v8) {
      if (v7)
      }
    }
  }
  else
  {
    uint64_t v26 = (re *)objc_msgSend(v38, sel_code);
    if (v26 != (re *)5)
    {
      uint64_t v27 = *re::graphicsLogObjects(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id v28 = v38;
        id v29 = v27;
        id v30 = objc_msgSend(objc_msgSend(v28, sel_localizedDescription), sel_UTF8String);
        *(_DWORD *)long long buf = 136315138;
        id v45 = v30;
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "makeFunctionWithDescriptor error [%s].", buf, 0xCu);
      }
    }
  }
  *a3 = v6;
}

void re::mtl::reflectionArguments(re::mtl *this@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(-[re::mtl reflectionWithOptions:](this, sel_reflectionWithOptions_, 3), sel_arguments);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  id v5 = objc_msgSend(v4, sel_count);
  if (v5) {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a2, (unint64_t)v5);
  }
  id v6 = (char *)objc_msgSend(v4, sel_count);
  if (v6)
  {
    id v7 = v6;
    for (uint64_t i = 0; i != v7; ++i)
    {
      id v9 = objc_msgSend(v4, sel_objectAtIndex_, i);
      re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((void *)a2, &v9);
      if (v9) {
    }
      }
  }
}

uint64_t re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(re::mtl *this)
{
  if (qword_26AF93E18 != -1) {
    dispatch_once(&qword_26AF93E18, &__block_literal_global_51);
  }
  return byte_26AF93DF1;
}

void ___ZN2re3mtl50commandQueueSupportsDisableAsyncCompletionDispatchEv_block_invoke()
{
  id v0 = objc_msgSend(objc_msgSend(MEMORY[0x263F12818], sel_alloc), sel_init);
  byte_26AF93DF1 = objc_msgSend(v0, sel_respondsToSelector_, sel_setDisableAsyncCompletionDispatch_);
  if (v0)
  {
  }
}

__n128 re::mtl::getTextureLevelInfo@<Q0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *a1;
  MTLGetTextureLevelInfoForDeviceWithOptions();
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 56) = v9;
  *(_OWORD *)(a2 + 72) = v10;

  __n128 result = v11;
  *(__n128 *)(a2 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 88) = v11;
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::mtl::Drawable const&)>::destroyCallable(uint64_t a1))(void)
{
  __n128 result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    __n128 result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      __n128 result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

BOOL re::MeshVisitor::visitMeshScene(uint64_t a1, uint64_t a2)
{
  return *(float *)(a2 + 376) != 0.0 && *(unsigned char *)(a2 + 646) == 0;
}

BOOL re::MeshVisitor::visitVFXScene(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 795)) {
    return 0;
  }
  return *(float *)(a2 + 376) != 0.0 && *(unsigned char *)(a2 + 646) == 0;
}

uint64_t re::MeshVisitor::visitMeshInstance(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 60)) {
    BOOL v3 = *(unsigned char *)(a2 + 112) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return 0;
  }
  uint64_t v4 = (void *)a2;
  uint64_t v6 = *(_DWORD **)(a2 + 48);
  if (v6)
  {
    int v7 = (*v6 ^ 0x180197E) & ~*(_DWORD *)(*(void *)(a2 + 48) + 4) | *v6 & *(_DWORD *)(*(void *)(a2 + 48) + 4);
    if ((v7 & 4) == 0) {
      return 0;
    }
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
  }
  long long v9 = *(void **)(a1 + 24);
  if (!*v9
    || (uint64_t result = re::boundingBoxIntersectFrustums(*(void *)(a2 + 24), *(void *)(a2 + 16), (uint64_t)v9),
        result))
  {
LABEL_12:
    long long v10 = (float32x4_t *)v4[1];
    if (!v10)
    {
      uint64_t result = 1;
      *(_DWORD *)(a1 + 56) = 1;
      *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = -65280;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 36) = v4[13];
      return result;
    }
    uint64_t v11 = 0;
    uint64_t v12 = *(float32x4_t **)(a1 + 16);
    uint64_t v13 = (long long *)v4[2];
    float32x4_t v14 = v12[1];
    float32x4_t v15 = v12[2];
    float32x4_t v16 = v12[3];
    float32x4_t v17 = v12[4];
    long long v18 = v13[1];
    long long v19 = v13[2];
    long long v20 = v13[3];
    long long v30 = *v13;
    long long v31 = v18;
    long long v32 = v19;
    long long v33 = v20;
    do
    {
      *(long long *)((char *)&v43 + v11) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(long long *)((char *)&v30 + v11))), v15, *(float32x2_t *)((char *)&v30 + v11), 1), v16, *(float32x4_t *)((char *)&v30 + v11), 2), v17, *(float32x4_t *)((char *)&v30 + v11), 3);
      v11 += 16;
    }
    while (v11 != 64);
    long long v30 = v43;
    long long v31 = v44;
    long long v32 = v45;
    long long v33 = v46;
    if (v12->i8[0])
    {
      if (v12->i8[1]) {
        uint64_t v21 = &v12->u8[2];
      }
      else {
        uint64_t v21 = (unsigned __int8 *)(*v4 + 24);
      }
      uint64_t v22 = *v21;
      if (v12->i8[4]) {
        uint64_t v23 = &v12->u32[2];
      }
      else {
        uint64_t v23 = (unsigned __int32 *)(*v4 + 28);
      }
      *(void *)&long long v43 = ((unint64_t)*(unsigned __int16 *)(*v4 + 25) << 8) | ((unint64_t)*(unsigned __int8 *)(*v4 + 27) << 24) | v22 | ((unint64_t)*v23 << 32);
      if (v22 == 1)
      {
        unsigned int v24 = re::selectMeshLodByViewDepth(v10, (uint64_t)&v30, (uint64_t)&v43, a1 + 48, 2);
      }
      else
      {
        if (v22)
        {
          re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid Lod select strategy (%d)", "!\"Unreachable code\"", "visitMeshInstance", 74, v22);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
        unsigned int v24 = re::selectMeshLodByScreenArea((uint64_t)v10, (uint64_t)&v30, v12[5].f32, (uint64_t)&v43, a1 + 48, 2);
      }
      *(_DWORD *)(a1 + 56) = v24;
      if (!v24) {
        return 1;
      }
    }
    else
    {
      unsigned int v24 = 1;
      *(_DWORD *)(a1 + 56) = 1;
      *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = -65280;
    }
    uint64_t v25 = 0;
    uint64_t v26 = (_DWORD *)(a1 + 32);
    unint64_t v27 = v10[5].u64[0];
    for (uint64_t i = v26; ; i += 2)
    {
      if (v25 == 2)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < N", "operator[]", 234, 2, 2, v30, v31, v32, v33);
        _os_crash();
        __break(1u);
LABEL_43:
        uint64_t v34 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v35 = 136315906;
        uint64_t v36 = "operator[]";
        __int16 v37 = 1024;
        int v38 = 476;
        __int16 v39 = 2048;
        long long v40 = v4;
        __int16 v41 = 2048;
        unint64_t v42 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_44:
        uint64_t v34 = 0;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v43 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v35 = 136315906;
        uint64_t v36 = "operator[]";
        __int16 v37 = 1024;
        int v38 = 476;
        __int16 v39 = 2048;
        long long v40 = (void *)v2;
        __int16 v41 = 2048;
        unint64_t v42 = v27;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v4 = (void *)LOBYTE(v26[v25 + 4]);
      if (LOBYTE(v26[v25 + 4]))
      {
        if (v27)
        {
          unint64_t v2 = (v4 - 1);
          if (v27 <= v2) {
            goto LABEL_44;
          }
          *uint64_t i = *(_DWORD *)(v10[5].i64[1] + 12 * v2 + 8);
LABEL_36:
          if (v27 <= (unint64_t)v4) {
            goto LABEL_43;
          }
          __int32 v29 = *(_DWORD *)(v10[5].i64[1] + 12 * v4 + 8);
          goto LABEL_40;
        }
        *uint64_t i = 0;
      }
      else
      {
        *uint64_t i = 0;
        if (v27) {
          goto LABEL_36;
        }
      }
      __int32 v29 = v10[3].i32[2];
LABEL_40:
      i[1] = v29;
      if (v24 == ++v25) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t re::MeshVisitor::findLevelIndex(re::MeshVisitor *this, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)this + 14);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  unint64_t v5 = (_DWORD *)((char *)this + 36);
  while (result != 2)
  {
    if (*(v5 - 1) <= a2 && *v5 > a2) {
      return result;
    }
    ++result;
    v5 += 2;
    if (v2 == result) {
      return 0xFFFFFFFFLL;
    }
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < N", "operator[]", 242, 2, 2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t (***re::PatchHandler::setHandler(void *a1, void *a2))(void)
{
  v14[5] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 32);
  id v5 = a2;
  uint64_t v6 = (void **)v4(v3, 8, 8);
  *uint64_t v6 = 0;
  int v7 = _Block_copy(v5);
  uint64_t v8 = *v6;
  *uint64_t v6 = v7;

  a1[1] = v6;
  uint64_t v9 = *a1;
  uint64_t v11 = re::globalAllocators(v10)[2];
  v14[0] = &unk_26E70DFF8;
  uint64_t v14[3] = v11;
  v14[4] = v14;
  uint64_t v12 = *(void (**)(uint64_t, void **, void *))(*(void *)v9 + 16);

  v12(v9, v6, v14);
  return re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v14);
}

void _ZN2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEED0Ev()
{
}

void _ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEEclEOSA_(uint64_t a1, id **a2)
{
}

void *_ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE9cloneIntoESA_(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DFF8;
  return result;
}

void *_ZN2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE8moveIntoESA_(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E70DFF8;
  return result;
}

uint64_t _ZNK2re8internal8CallableIZNS_12PatchHandler10setHandlerEU13block_pointerFvPK13simd_float4x4iDv3_fEE3__0FvPvEJEE4sizeEv()
{
  return 16;
}

void *re::allocInfo_StencilInfoData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_373, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_373))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93FD8, "StencilInfoData");
    __cxa_guard_release(&_MergedGlobals_373);
  }
  return &unk_26AF93FD8;
}

void re::initInfo_StencilInfoData(re *this, re::IntrospectionBase *a2)
{
  v9[0] = 0xAD42BCD4890DDE68;
  v9[1] = "StencilInfoData";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E30, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E30);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93E28 = v7;
      __cxa_guard_release(&qword_26AF93E30);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93E28;
  *((void *)this + 9) = re::internal::defaultConstruct<re::StencilInfoData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::StencilInfoData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::StencilInfoData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::StencilInfoData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

double re::internal::defaultConstruct<re::StencilInfoData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E70E050;
  *(void *)&double result = 134217472;
  a3[1] = 134217472;
  a3[2] = 134217472;
  return result;
}

double re::internal::defaultConstructV2<re::StencilInfoData>(void *a1)
{
  *a1 = &unk_26E70E050;
  *(void *)&double result = 134217472;
  a1[1] = 134217472;
  a1[2] = 134217472;
  return result;
}

uint64_t re::introspect_StencilInfoData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StencilInfoData", (uint64_t (*)(re::internal *))re::allocInfo_StencilInfoData, (re::IntrospectionBase *(*)(void))re::initInfo_StencilInfoData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::StencilInfoData>, this);
}

void *re::allocInfo_ViewportData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94050, "ViewportData");
    __cxa_guard_release(&qword_26AF93E38);
  }
  return &unk_26AF94050;
}

void re::initInfo_ViewportData(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x3F1D7E5A3F4DDB20;
  v12[1] = "ViewportData";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E40);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93EB8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::mtl::introspect_Viewport((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "viewport";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF93EC0 = v10;
      __cxa_guard_release(&qword_26AF93E40);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93EB8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ViewportData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ViewportData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ViewportData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ViewportData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

void re::internal::defaultConstruct<re::ViewportData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E70E090;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0x3F80000000000000;
}

void *re::internal::defaultConstructV2<re::ViewportData>(void *result)
{
  void *result = &unk_26E70E090;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

uint64_t re::introspect_ViewportData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ViewportData", (uint64_t (*)(re::internal *))re::allocInfo_ViewportData, (re::IntrospectionBase *(*)(void))re::initInfo_ViewportData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ViewportData>, this);
}

void *re::allocInfo_VRRData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF940C8, "VRRData");
    __cxa_guard_release(&qword_26AF93E48);
  }
  return &unk_26AF940C8;
}

void re::initInfo_VRRData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x24ABD26BC0;
  v13[1] = "VRRData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E50);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93EC8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "vrrEnabled";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0xC00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF93ED0 = v11;
      __cxa_guard_release(&qword_26AF93E50);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93EC8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::VRRData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::VRRData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::VRRData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::VRRData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::VRRData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E70E0D0;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *(_WORD *)(a3 + 12) = 0;
}

uint64_t re::internal::defaultConstructV2<re::VRRData>(uint64_t result)
{
  *(void *)double result = &unk_26E70E0D0;
  *(_DWORD *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = -1;
  *(_WORD *)(result + 12) = 0;
  return result;
}

uint64_t re::introspect_VRRData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VRRData", (uint64_t (*)(re::internal *))re::allocInfo_VRRData, (re::IntrospectionBase *(*)(void))re::initInfo_VRRData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VRRData>, this);
}

void *re::allocInfo_ThreadGroupMemoryData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94140, "ThreadGroupMemoryData");
    __cxa_guard_release(&qword_26AF93E58);
  }
  return &unk_26AF94140;
}

void re::initInfo_ThreadGroupMemoryData(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0xED88CD191AFD3940;
  v17[1] = "ThreadGroupMemoryData";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E60);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93EE8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_size_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "totalBytes";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF93EF0 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "threadgroupMemoryEnabled";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF93EF8 = v15;
      __cxa_guard_release(&qword_26AF93E60);
    }
  }
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93EE8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ThreadGroupMemoryData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ThreadGroupMemoryData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ThreadGroupMemoryData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ThreadGroupMemoryData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void re::internal::defaultConstruct<re::ThreadGroupMemoryData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_26E70E110;
  *(unsigned char *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ThreadGroupMemoryData>(uint64_t result)
{
  *(void *)double result = &unk_26E70E110;
  *(unsigned char *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t re::introspect_ThreadGroupMemoryData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThreadGroupMemoryData", (uint64_t (*)(re::internal *))re::allocInfo_ThreadGroupMemoryData, (re::IntrospectionBase *(*)(void))re::initInfo_ThreadGroupMemoryData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ThreadGroupMemoryData>, this);
}

void *re::allocInfo_TriangleFillModeData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF941B8, "TriangleFillModeData");
    __cxa_guard_release(&qword_26AF93E68);
  }
  return &unk_26AF941B8;
}

void re::initInfo_TriangleFillModeData(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x5E010951CB0401B0;
  v13[1] = "TriangleFillModeData";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E70, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E70);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93ED8 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::mtl::introspect_TriangleFillMode((re::mtl *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "triangleFillMode";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF93EE0 = v11;
      __cxa_guard_release(&qword_26AF93E70);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93ED8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::TriangleFillModeData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::TriangleFillModeData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TriangleFillModeData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TriangleFillModeData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::TriangleFillModeData>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E70E170;
}

void *re::internal::defaultConstructV2<re::TriangleFillModeData>(void *result)
{
  void *result = &unk_26E70E170;
  return result;
}

uint64_t re::introspect_TriangleFillModeData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TriangleFillModeData", (uint64_t (*)(re::internal *))re::allocInfo_TriangleFillModeData, (re::IntrospectionBase *(*)(void))re::initInfo_TriangleFillModeData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TriangleFillModeData>, this);
}

void *re::introspect_ViewMode(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Mono";
      re::introspect_ViewMode(BOOL)::enumCFDictionaryRef Attributes = (uint64_t)v11;
      long long v12 = re::introspectionAllocator(v11);
      long long v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)long long v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "SinglePass";
      qword_26879FD38 = (uint64_t)v13;
      long long v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = 2;
      *(void *)(v15 + 16) = "DualPass";
      qword_26879FD40 = v15;
    }
  }
  {
    long long v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ViewMode(BOOL)::info, "ViewMode", 1, 1, 1, 1);
    *(void *)long long v16 = &unk_26E715E00;
    *((void *)v16 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &re::introspect_ViewMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_ViewMode(BOOL)::isInitialized) {
      return &re::introspect_ViewMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = re::introspect_ViewMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::introspect_ViewMode(BOOL)::info;
    }
    id v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_ViewMode(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_ViewMode(BOOL)::info;
    }
  }
  re::introspect_ViewMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ViewMode(BOOL)::info, a2);
  v17[0] = 0x47A963CE410;
  v17[1] = (uint64_t)"ViewMode";
  xmmword_26879FD70 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_ViewMode(BOOL)::info;
}

void *re::allocInfo_FilterMapAtlasData(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF93E78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF94230, "FilterMapAtlasData");
    __cxa_guard_release(&qword_26AF93E78);
  }
  return &unk_26AF94230;
}

void re::initInfo_FilterMapAtlasData(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x4F2768EAB2372922;
  v25[1] = "FilterMapAtlasData";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF93E80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF93E80);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "RenderGraphData";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF93F40 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "atlasWidth";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF93F48 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "atlasHeight";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xC00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF93F50 = v15;
      long long v16 = re::introspectionAllocator((re *)v15);
      long long v18 = re::mtl::introspect_PixelFormat((re::mtl *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "format";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF93F58 = v19;
      long long v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint64_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = "protectionOptions";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF93F60 = v23;
      __cxa_guard_release(&qword_26AF93E80);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8) = &qword_26AF93F40;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FilterMapAtlasData>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FilterMapAtlasData>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FilterMapAtlasData>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FilterMapAtlasData>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}