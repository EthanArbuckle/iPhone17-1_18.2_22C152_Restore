void re::BackgroundTaskManager::~BackgroundTaskManager(re::BackgroundTaskManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  dispatch_time_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  re::BackgroundTaskManager::update(this);
  v2 = *((void *)this + 18);
  if (v2)
  {
    v3 = (uint64_t *)*((void *)this + 20);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      atomic_store(1u, (unsigned __int8 *)(v5 + 80));
      v4 -= 8;
    }
    while (v4);
  }
  v6 = atomic_load((unsigned int *)this + 2);
  if (v6 >= 1)
  {
    do
    {
      if (*((void *)this + 18))
      {
        v7 = **((void **)this + 20);
        v8 = dispatch_time(0, 8000000);
        dispatch_group_wait(*(dispatch_group_t *)(v7 + 208), v8);
        atomic_load((unsigned int *)(v7 + 72));
        v9 = *((void *)this + 18);
        if (v9)
        {
          v10 = (uint64_t *)*((void *)this + 20);
          v11 = 8 * v9;
          do
          {
            v12 = *v10++;
            atomic_store(1u, (unsigned __int8 *)(v12 + 80));
            v11 -= 8;
          }
          while (v11);
        }
      }
      re::BackgroundTaskManager::update(this);
      v13 = atomic_load((unsigned int *)this + 2);
    }
    while (v13 > 0);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 168);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 128);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  re::DataArray<re::BackgroundTask>::deinit((uint64_t)this + 16);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 16);
}

{
  uint64_t vars8;

  re::BackgroundTaskManager::~BackgroundTaskManager(this);
  JUMPOUT(0x237DBCBD0);
}

void re::BackgroundTaskManager::update(re::BackgroundTaskManager *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ((int)*((void *)this + 23) >= 1)
  {
    unint64_t v4 = *((void *)this + 23) + 1;
    do
    {
      unint64_t v5 = (v4 - 2);
      unint64_t v6 = *((void *)this + 23);
      if (v6 <= v5)
      {
        uint64_t v25 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v26 = 136315906;
        v27 = "operator[]";
        __int16 v28 = 1024;
        int v29 = 789;
        __int16 v30 = 2048;
        unint64_t v31 = (v4 - 2);
        __int16 v32 = 2048;
        unint64_t v33 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_32:
        uint64_t v25 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v26 = 136315906;
        v27 = "removeStableAt";
        __int16 v28 = 1024;
        int v29 = 969;
        __int16 v30 = 2048;
        unint64_t v31 = v2;
        __int16 v32 = 2048;
        unint64_t v33 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        uint64_t v25 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v26 = 136315906;
        v27 = "removeAt";
        __int16 v28 = 1024;
        int v29 = 931;
        __int16 v30 = 2048;
        unint64_t v31 = v5;
        __int16 v32 = 2048;
        unint64_t v33 = v1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v7 = *(void *)(*((void *)this + 25) + 8 * v5);
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 81));
      if (v8)
      {
        unint64_t v1 = *((void *)this + 23);
        if (v1 <= v5) {
          goto LABEL_33;
        }
        if (v1 - 1 > v5) {
          *(void *)(*((void *)this + 25) + 8 * v5) = *(void *)(*((void *)this + 25) + 8 * v1 - 8);
        }
        *((void *)this + 23) = v1 - 1;
        ++*((_DWORD *)this + 48);
        os_unfair_lock_lock((os_unfair_lock_t)this + 30);
        unint64_t v9 = re::DataArray<re::BackgroundTask>::handle((uint64_t)this + 16, v7);
        re::DataArray<re::BackgroundTask>::destroy((uint64_t)this + 16, v9);
        os_unfair_lock_unlock((os_unfair_lock_t)this + 30);
      }
      --v4;
    }
    while (v4 > 1);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 31);
  uint64_t v10 = *((void *)this + 12);
  if (v10)
  {
    v11 = (void *)*((void *)this + 14);
    uint64_t v12 = 8 * v10;
    do
    {
      re::DynamicArray<re::RigDataValue *>::add((re::BackgroundTaskManager *)((char *)this + 128), v11++);
      v12 -= 8;
    }
    while (v12);
  }
  *((void *)this + 12) = 0;
  ++*((_DWORD *)this + 26);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 31);
  if (*((void *)this + 18))
  {
    unint64_t v2 = 0;
    int v13 = 0;
    unint64_t v1 = 0xFFFFFFFFLL;
    do
    {
      uint64_t v24 = *(void *)(*((void *)this + 20) + 8 * v2);
      unsigned int v14 = atomic_load((unsigned int *)(v24 + 72));
      uint64_t v15 = v24;
      if (v14 == 1)
      {
        re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v24 + 88));
      }
      else
      {
        uint64_t v16 = *(void *)(v24 + 64);
        if (v16)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 48))(v16, v24);
          uint64_t v17 = *(void *)(v15 + 64);
          *(void *)(v15 + 64) = 0;
          if (v17 == v15 + 40)
          {
            (*(void (**)(uint64_t))(*(void *)(v15 + 40) + 32))(v15 + 40);
          }
          else if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
          }
        }
        atomic_fetch_add((atomic_uint *volatile)this + 2, 0xFFFFFFFF);
        unint64_t v5 = *((void *)this + 18);
        if (v5 <= v2) {
          goto LABEL_32;
        }
        uint64_t v18 = v5 - 1;
        if (v5 - 1 > v2)
        {
          uint64_t v19 = *((void *)this + 20);
          uint64_t v20 = v19 + 8 * v2;
          uint64_t v21 = v19 + 8 * v5;
          if (v21 != v20 + 8)
          {
            memmove((void *)v20, (const void *)(v20 + 8), v21 - (v20 + 8));
            uint64_t v18 = *((void *)this + 18) - 1;
          }
        }
        *((void *)this + 18) = v18;
        ++*((_DWORD *)this + 38);
        --v13;
        unsigned __int8 v22 = atomic_load((unsigned __int8 *)(v24 + 81));
        if (v22)
        {
          os_unfair_lock_lock((os_unfair_lock_t)this + 30);
          unint64_t v23 = re::DataArray<re::BackgroundTask>::handle((uint64_t)this + 16, v24);
          re::DataArray<re::BackgroundTask>::destroy((uint64_t)this + 16, v23);
          os_unfair_lock_unlock((os_unfair_lock_t)this + 30);
        }
        else
        {
          re::DynamicArray<re::RigDataValue *>::add((re::BackgroundTaskManager *)((char *)this + 168), &v24);
        }
      }
      unint64_t v2 = ++v13;
    }
    while (*((void *)this + 18) > (unint64_t)v13);
  }
}

uint64_t re::BackgroundTaskManager::tasks(re::BackgroundTaskManager *this)
{
  return *((void *)this + 20);
}

uint64_t re::BackgroundTaskManager::runAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t v10 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  int v12 = *(_DWORD *)(a1 + 72);
  if ((v12 + 1) >> 24) {
    int v13 = 1;
  }
  else {
    int v13 = v12 + 1;
  }
  *(_DWORD *)(a1 + 72) = v13;
  uint64_t v14 = *(unsigned __int16 *)(a1 + 68);
  unint64_t v15 = *(unsigned __int16 *)(a1 + 70);
  if (v14 == 0xFFFF && v15 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 64) >= *(_DWORD *)(a1 + 60)) {
      re::DataArray<re::BackgroundTask>::allocBlock((void *)(a1 + 16));
    }
    uint64_t v19 = *(void *)(a1 + 32);
    unint64_t v15 = (unsigned __int16)(v19 - 1);
    if (!v19) {
      goto LABEL_19;
    }
    uint64_t v14 = *(unsigned int *)(a1 + 64);
    if (v14 >= 0x10000) {
      goto LABEL_20;
    }
    uint64_t v20 = (void *)(*(void *)(a1 + 48) + 16 * v15);
    *(_DWORD *)(a1 + 64) = v14 + 1;
    *(_DWORD *)(v20[1] + 4 * v14) = *(_DWORD *)(a1 + 72);
    uint64_t v17 = (_DWORD *)(*v20 + 216 * v14);
  }
  else
  {
    uint64_t v17 = *(_DWORD **)(a1 + 32);
    if ((unint64_t)v17 <= v15)
    {
LABEL_18:
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v26 = 136315906;
      *(void *)&v26[4] = "operator[]";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v15;
      __int16 v29 = 2048;
      __int16 v30 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_19:
      uint64_t v25 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v26 = 136315906;
      *(void *)&v26[4] = "operator[]";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 789;
      __int16 v27 = 2048;
      unint64_t v28 = v15;
      __int16 v29 = 2048;
      __int16 v30 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_20:
      re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v14, v25, *(void *)v26, *(void *)&v26[8]);
      _os_crash();
      __break(1u);
    }
    uint64_t v18 = (void *)(*(void *)(a1 + 48) + 16 * v15);
    *(_DWORD *)(v18[1] + 4 * v14) = v13;
    uint64_t v17 = (_DWORD *)(*v18 + 216 * v14);
    *(_DWORD *)(a1 + 68) = *v17;
  }
  ++*(_DWORD *)(a1 + 56);
  std::__function::__value_func<re::BackgroundTaskResult ()(re::BackgroundTask &)>::__value_func[abi:nn180100]((uint64_t)&v31, a3);
  std::__function::__value_func<void ()(re::BackgroundTask &)>::__value_func[abi:nn180100]((uint64_t)v26, a4);
  re::BackgroundTask::BackgroundTask((uint64_t)v17, a2, (uint64_t)&v31, (uint64_t)v26);
  std::__function::__value_func<void ()(re::BackgroundTask &)>::~__value_func[abi:nn180100](v26);
  std::__function::__value_func<re::BackgroundTaskResult ()(re::BackgroundTask &)>::~__value_func[abi:nn180100](&v31);
  unint64_t v21 = (v14 | (v15 << 16)) >> 16;
  unsigned __int8 v22 = *(_DWORD **)(a1 + 32);
  if ((unint64_t)v22 <= v21)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v26 = 136315906;
    *(void *)&v26[4] = "operator[]";
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = 797;
    __int16 v27 = 2048;
    unint64_t v28 = (v14 | (v15 << 16)) >> 16;
    __int16 v29 = 2048;
    __int16 v30 = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 16 * v21) + 216 * v14;
  *(void *)int v26 = v23;
  os_unfair_lock_unlock(v10);
  atomic_store(1u, (unsigned int *)(v23 + 72));
  re::dispatch::Queue::global((re::dispatch::Queue *)a5, 0, &v31);
  re::dispatch::Group::async((id *)(v23 + 208), (NSObject **)&v31, (void *)v23, (void (__cdecl *)(void *))re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::__invoke);

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 124));
  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 80), v26);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 124));
  return v23;
}

void re::BackgroundTaskManager::release(uint64_t a1, uint64_t a2)
{
}

unint64_t re::DataArray<re::BackgroundTask>::handle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = (void *)(*(void *)(a1 + 32) + 8);
    while (v4 != 0x10000)
    {
      uint64_t v6 = a2 - *(v5 - 1);
      if (v6 >= -215)
      {
        unint64_t v7 = 0x84BDA12F684BDA13 * (v6 >> 3);
        if (v7 < *(unsigned int *)(a1 + 44)) {
          goto LABEL_8;
        }
      }
      ++v4;
      v5 += 2;
      v3 += 0x10000;
      if (v2 == v4) {
        goto LABEL_7;
      }
    }
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) blockIndex (%zu) is too large for a 16-bit unsigned integer", "!overflow", "handle", 692, 0x10000);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) element isn't in data array", "!\"Unreachable code\"", "handle", 707);
    _os_crash();
    __break(1u);
LABEL_8:
    if (v7 < 0x10000) {
      return v3 & 0xFFFF0000 | ((unint64_t)(*(_DWORD *)(*v5 + 4 * v7) & 0xFFFFFF) << 32) | v7;
    }
  }
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) arrayIndex (%zu) is too large for a 16-bit unsigned integer", "!overflow", "handle", 700, v7);
  unint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::DataArray<re::BackgroundTask>::destroy(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = WORD1(a2);
  unint64_t v3 = *(void *)(a1 + 16);
  if (WORD1(a2) < v3)
  {
    int v4 = a2;
    unsigned int v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(a1 + 48) : *(_DWORD *)(a1 + 44);
    if ((unsigned __int16)a2 < v6)
    {
      uint64_t v7 = (unsigned __int16)a2;
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        uint64_t v11 = *(void *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          re::BackgroundTask::~BackgroundTask((re::BackgroundTask *)(v11 + 216 * (unsigned __int16)a2));
          if (*(void *)(a1 + 16) <= v2)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *int v12 = *(_DWORD *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v4;
          --*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
}

void *re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::__invoke(void *result)
{
  unint64_t v1 = (unsigned int *)result;
  v5[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)result + 80);
  if (v2)
  {
    atomic_store(3u, (unsigned int *)result + 18);
  }
  else
  {
    int v4 = 0;
    v5[0] = &unk_26E721168;
    v5[1] = result;
    v5[2] = &v4;
    v5[3] = v5;
    re::runInLocalAutoreleasePool((uint64_t)v5);
    unint64_t result = std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v5);
    if (v4)
    {
      unsigned int v3 = 3;
    }
    else
    {
      atomic_store(0x3F800000u, v1 + 19);
      unsigned int v3 = 2;
    }
    atomic_store(v3, v1 + 18);
  }
  return result;
}

void std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  unsigned __int8 v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned __int8 v2 = &unk_26E721168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E721168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 32);
  if (v2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
    **(_DWORD **)(a1 + 16) = result;
  }
  else
  {
    int v4 = std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::target(v4);
  }
  return result;
}

uint64_t std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1},std::allocator<re::BackgroundTaskManager::start(re::BackgroundTask *,qos_class_t)::$_0::operator() const(void *)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t re::DataArray<re::BackgroundTask>::DataArray(uint64_t a1, int a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 52) = 0x1FFFFFFFFLL;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = a2;
  re::DataArray<re::BackgroundTask>::allocBlock((void *)a1);
  return a1;
}

_anonymous_namespace_ *re::DataArray<re::BackgroundTask>::allocBlock(void *a1)
{
  uint64_t v3 = 216 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    uint64_t result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  int v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  unint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *unint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::DataArray<re::BackgroundTask>::deinit(uint64_t result)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(result + 44)) {
    return result;
  }
  uint64_t v2 = (void *)result;
  unint64_t v11 = (void *)result;
  if (*(_DWORD *)(result + 40))
  {
    LODWORD(v12) = 0;
    if (!*(void *)(result + 16)) {
      goto LABEL_32;
    }
    uint64_t v3 = (void *)result;
    if (!**(_DWORD **)(*(void *)(result + 32) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    uint64_t v3 = (void *)result;
  }
  unint64_t v11 = v3;
  uint64_t v4 = (unsigned __int16)v12;
  if (v3 != v2 || ((unsigned __int16)v12 == 0xFFFFLL ? (BOOL v5 = (v12 & 0xFFFF0000) == 4294901760) : (BOOL v5 = 0), !v5))
  {
    unint64_t v6 = WORD1(v12);
    do
    {
      unint64_t v7 = v3[2];
      if (v7 <= v6) {
        goto LABEL_31;
      }
      re::DataArray<re::BackgroundTask>::destroy((uint64_t)v2, ((unint64_t)(*(_DWORD *)(*(void *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      uint64_t v3 = v11;
      uint64_t v4 = (unsigned __int16)v12;
      unint64_t v6 = WORD1(v12);
    }
    while (v11 != v2 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  unint64_t v8 = v2[2];
  unint64_t v6 = v8 - 1;
  if (v8 == 1) {
    goto LABEL_26;
  }
  unint64_t v7 = 16 * v8 - 16;
  do
  {
    if (v8 <= v6)
    {
      unint64_t v11 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      unint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 789;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      unint64_t v11 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      unint64_t v15 = "removeAt";
      __int16 v16 = 1024;
      int v17 = 931;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      uint64_t v13 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      unint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 797;
      __int16 v18 = 2048;
      unint64_t v19 = v6;
      __int16 v20 = 2048;
      unint64_t v21 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      uint64_t v13 = 0;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v14 = 136315906;
      unint64_t v15 = "operator[]";
      __int16 v16 = 1024;
      int v17 = 797;
      __int16 v18 = 2048;
      unint64_t v19 = 0;
      __int16 v20 = 2048;
      unint64_t v21 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    int v9 = (void *)(v2[4] + v7);
    (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, *v9);
    (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, v9[1]);
    unint64_t v1 = v2[2];
    if (v1 <= v6) {
      goto LABEL_30;
    }
    unint64_t v8 = v1 - 1;
    if (v1 - 1 > v6)
    {
      *(_OWORD *)(v2[4] + v7) = *(_OWORD *)(v2[4] + 16 * v1 - 16);
      unint64_t v8 = v2[2] - 1;
    }
    v2[2] = v8;
    ++*((_DWORD *)v2 + 6);
    v7 -= 16;
    --v6;
  }
  while (v6);
  v2[6] = 0xFFFFFFFF00000000;
  if (!v8)
  {
    unint64_t v11 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v2 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v14 = 136315906;
    unint64_t v15 = "operator[]";
    __int16 v16 = 1024;
    int v17 = 789;
    __int16 v18 = 2048;
    unint64_t v19 = 0;
    __int16 v20 = 2048;
    unint64_t v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    v2[6] = 0xFFFFFFFF00000000;
  }
  unint64_t v10 = (void *)v2[4];
  (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, *v10);
  (*(void (**)(void, void))(*(void *)*v2 + 40))(*v2, v10[1]);
  uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v2);
  *((_DWORD *)v2 + 11) = 0;
  return result;
}

void re::FiberJobManager::~FiberJobManager(re::FiberJobManager *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  if (*((void *)this + 1))
  {
    atomic_store(1u, (unsigned __int8 *)this + 32);
    uint64_t v3 = *((void *)this + 9);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)*((void *)this + 10);
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v6 + 392));
        v5 -= 8;
      }
      while (v5);
      uint64_t v7 = *((void *)this + 9);
      if (v7)
      {
        unint64_t v8 = 0;
        while (*((void *)this + 9) > v8)
        {
          std::thread::join((std::thread *)(*(void *)(*((void *)this + 10) + 8 * v8++) + 8));
          if (v7 == v8)
          {
            unint64_t v9 = 0;
            while (*((void *)this + 9) > v9)
            {
              unint64_t v10 = *(re::internal::WorkerThread **)(*((void *)this + 10) + 8 * v9);
              unint64_t v11 = (re::AlignedAllocator *)*((void *)this + 2);
              re::internal::WorkerThread::~WorkerThread(v10);
              re::AlignedAllocator::free(v11, v10);
              if (v7 == ++v9) {
                goto LABEL_12;
              }
            }
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_17;
      }
    }
LABEL_12:
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 456);
    atomic_store(0xFFFFFFFFuLL, (unint64_t *)this + 48);
    re::FixedArray<re::FiberJobManager::FiberNode>::deinit((void *)this + 41);
    re::JobProfiler::deinit(*((re::JobProfiler **)this + 3));
    uint64_t v12 = *((void *)this + 3);
    if (v12)
    {
      uint64_t v13 = *v2;
      re::JobProfiler::~JobProfiler(*((re::JobProfiler **)this + 3));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v12);
    }
    *((void *)this + 3) = 0;
    re::WorkStealingQueue<re::Job *>::deinit((uint64_t)this + 128);
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 456);
  re::FixedArray<re::FiberJobManager::FiberNode>::deinit((void *)this + 41);
  re::WorkStealingQueue<re::Job *>::deinit((uint64_t)this + 128);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 5);
}

{
  uint64_t vars8;

  re::FiberJobManager::~FiberJobManager(this);
  JUMPOUT(0x237DBCBC0);
}

uint64_t re::FiberJobManager::fiberFunction(os_unfair_lock_s *this, void *a2)
{
  uint64_t v3 = re::FiberJobManager::currentWorkerThread((re::FiberJobManager *)this);
  re::internal::WorkerThread::postFiberSwitch((re::internal::WorkerThread *)v3, v4);
  if (this[8]._os_unfair_lock_opaque) {
    goto LABEL_29;
  }
  while (1)
  {
    v26[0] = 0;
    int WaitingFiber = re::internal::WorkerThread::getWaitingFiber((re::internal::WorkerThread *)v3, v26);
    if (WaitingFiber != 2) {
      break;
    }
LABEL_3:
    *(_DWORD *)(v3 + 80) = *(_DWORD *)(v3 + 96);
    *(_DWORD *)(v3 + 84) = 2;
    *(void *)(v3 + 88) = 0;
    re::internal::WorkerThread::switchToCustomFiber((re::internal::WorkerThread *)v3, v26[0]);
    uint64_t v3 = re::FiberJobManager::currentWorkerThread((re::FiberJobManager *)this);
    re::internal::WorkerThread::postFiberSwitch((re::internal::WorkerThread *)v3, v6);
LABEL_25:
    if (this[8]._os_unfair_lock_opaque) {
      goto LABEL_29;
    }
  }
  BOOL v7 = WaitingFiber == 1;
  if (!os_unfair_lock_trylock(this + 112))
  {
    BOOL v7 = 1;
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)&this[118]._os_unfair_lock_opaque;
  if (!v8)
  {
LABEL_11:
    os_unfair_lock_unlock(this + 112);
LABEL_13:
    v34[0] = 0;
    int Job = re::internal::WorkerThread::getJob((atomic_ullong *)v3, v34);
    if (Job == 2)
    {
      unint64_t v15 = v34[0];
      *(void *)(re::FiberJobManager::getFiber(*(re::FiberJobManager **)v3, *(_DWORD *)(v3 + 96)) + 16) = v15;
      (*(void (**)(void))v34[0])();
      __int16 v16 = (atomic_uint *)*((void *)v34[0] + 1);
      if (v16)
      {
        atomic_fetch_add_explicit(v16, 0xFFFFFFFF, memory_order_release);
      }
      else
      {
        int v17 = (void *)*((void *)v34[0] + 2);
        if (v17)
        {
          __int16 v18 = v17;
          unint64_t v19 = (void *)*((void *)v34[0] + 2);
          *((void *)v34[0] + 2) = 0;

          dispatch_semaphore_signal(v18);
        }
      }
      uint64_t v20 = *(void *)&this[18]._os_unfair_lock_opaque;
      if (v20)
      {
        unint64_t v21 = *(uint64_t **)&this[20]._os_unfair_lock_opaque;
        uint64_t v22 = 8 * v20;
        do
        {
          uint64_t v23 = *v21++;
          re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v23 + 392));
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v3 = re::FiberJobManager::currentWorkerThread((re::FiberJobManager *)this);
      *(void *)(re::FiberJobManager::getFiber(*(re::FiberJobManager **)v3, *(_DWORD *)(v3 + 96)) + 16) = 0;
    }
    if (!v7 && (Job - 1) >= 2) {
      re::internal::AutoResetEvent::waitOne((re::internal::AutoResetEvent *)(v3 + 392));
    }
    goto LABEL_25;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while (1)
  {
    unint64_t v11 = *(void *)&this[118]._os_unfair_lock_opaque;
    if (v11 <= v10) {
      break;
    }
    uint64_t v12 = *(void *)&this[122]._os_unfair_lock_opaque;
    int v13 = **(_DWORD **)(v12 + v9 + 8);
    if (v13 <= 0)
    {
      __dmb(9u);
      if (!v13)
      {
        v26[0] = *(_DWORD *)(v12 + v9);
        re::DynamicArray<re::BufferView>::removeStableAt(&this[114]._os_unfair_lock_opaque, v10);
        os_unfair_lock_unlock(this + 112);
        goto LABEL_3;
      }
    }
    ++v10;
    v9 += 16;
    if (v8 == v10) {
      goto LABEL_11;
    }
  }
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)long long v34 = 0u;
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  v26[1] = 136315906;
  uint64_t v27 = "operator[]";
  __int16 v28 = 1024;
  int v29 = 789;
  __int16 v30 = 2048;
  unint64_t v31 = v10;
  __int16 v32 = 2048;
  unint64_t v33 = v11;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_29:
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(v3 + 96);
  *(_DWORD *)(v3 + 84) = 5;
  *(void *)(v3 + 88) = 0;
  re::internal::WorkerThread::switchToThreadFiber((re::internal::WorkerThread *)v3);
  re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Cannot resume dead fiber.", "!\"Unreachable code\"", "fiberFunction", 373);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void *re::FixedArray<re::FiberJobManager::FiberNode>::deinit(void *result)
{
  if (*result)
  {
    unint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2] + 104;
      uint64_t v5 = v2 << 7;
      do
      {
        *(void *)(v4 - 40) = 0;
        *(void *)(v4 - 16) = 0;
        *(void *)(v4 - 8) = 0;
        if (*(void *)v4)
        {
          free(*(void **)v4);
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        v4 += 128;
        v5 -= 128;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    *unint64_t v1 = 0;
  }
  return result;
}

void re::FiberJobManager::run(os_unfair_lock_s *this, id *a2)
{
  dispatch_semaphore_t dsema = dispatch_semaphore_create(0);

  uint64_t v4 = a2 + 2;
  re::ObjCObject::operator=(a2 + 2, (id *)&dsema);
  os_unfair_lock_lock(this + 22);
  unint64_t v10 = a2;
  re::WorkStealingQueue<re::Job *>::push(&this[32]._os_unfair_lock_opaque, &v10);
  os_unfair_lock_unlock(this + 22);
  uint64_t v5 = *(void *)&this[18]._os_unfair_lock_opaque;
  if (v5)
  {
    uint64_t v6 = *(uint64_t **)&this[20]._os_unfair_lock_opaque;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v8 + 392));
      v7 -= 8;
    }
    while (v7);
  }
  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v9 = *v4;
  *uint64_t v4 = 0;
}

uint64_t re::FiberJobManager::currentWorkerThread(re::FiberJobManager *this)
{
  unsigned int v2 = re::FiberJobManager::currentWorkerThreadIndex(this);
  if (*((void *)this + 9) <= (unint64_t)v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 10) + 8 * v2);
}

unint64_t re::FiberJobManager::currentWorkerThreadIndex(re::FiberJobManager *this)
{
  pthread_t v2 = pthread_self();
  unint64_t v4 = *((void *)this + 6);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 1;
  while (1)
  {
    uint64_t v7 = *(_opaque_pthread_t **)(*((void *)this + 7) + 8 * v5);
    if (v7) {
      break;
    }
    if (!v2) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v5 = v6;
    if (v4 <= v6++) {
      goto LABEL_9;
    }
  }
  if (!v2 || v7 != v2) {
    goto LABEL_8;
  }
LABEL_10:
  while (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Trying to get the index of a non-worker thread", "isWorkerThread()", "currentWorkerThreadIndex", 383);
    _os_crash();
    __break(1u);
  }
  pthread_t v9 = pthread_self();
  unint64_t v10 = *((void *)this + 6);
  if (v10)
  {
    pthread_t v11 = v9;
    unint64_t v12 = 0;
    unint64_t result = 0;
    do
    {
      int v14 = *(_opaque_pthread_t **)(*((void *)this + 7) + 8 * v12);
      if (v14)
      {
        if (v11 && v14 == v11) {
          return result;
        }
      }
      else if (!v11)
      {
        return result;
      }
      unint64_t v12 = (result + 1);
      unint64_t result = v12;
    }
    while (v10 > v12);
  }
  return 0xFFFFFFFFLL;
}

void re::FiberJobManager::runAsync(re::FiberJobManager *a1, uint64_t a2, unsigned int a3, unsigned int *a4, char a5)
{
  pthread_t v9 = (void *)re::FiberJobManager::currentWorkerThread(a1);
  re::internal::WorkerThread::runAsync(v9, a2, a3, a4, a5);
}

double re::FiberJobManager::waitFor(re::FiberJobManager *a1, atomic_uint *a2, int a3)
{
  if (atomic_load_explicit(a2, memory_order_acquire))
  {
    uint64_t v6 = re::FiberJobManager::currentWorkerThread(a1);
    uint64_t v7 = (re::internal::WorkerThread *)v6;
    if (a3) {
      int v8 = 3;
    }
    else {
      int v8 = 4;
    }
    *(_DWORD *)(v6 + 80) = *(_DWORD *)(v6 + 96);
    *(_DWORD *)(v6 + 84) = v8;
    *(void *)(v6 + 88) = a2;
    unsigned int FreeFiberIndex = re::FiberJobManager::getFreeFiberIndex(a1);
    re::internal::WorkerThread::switchToCustomFiber(v7, FreeFiberIndex);
    if ((a3 & 1) == 0) {
      uint64_t v7 = (re::internal::WorkerThread *)re::FiberJobManager::currentWorkerThread(a1);
    }
    return re::internal::WorkerThread::postFiberSwitch(v7, v10);
  }
  return result;
}

unint64_t re::FiberJobManager::getFreeFiberIndex(re::FiberJobManager *this)
{
  uint64_t v1 = *((void *)this + 43);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)this + 48, memory_order_acquire);
  if (explicit == -1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v3 = explicit;
  atomic_compare_exchange_strong((atomic_ullong *volatile)this + 48, &v3, (explicit & 0xFFFFFFFF00000000 | *(unsigned int *)(v1 + ((unint64_t)explicit << 7)))+ 0x100000000);
  if (v3 != explicit)
  {
    while (v3 != -1)
    {
      unint64_t explicit = v3;
      unint64_t v4 = v3;
      atomic_compare_exchange_strong((atomic_ullong *volatile)this + 48, &v4, (v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1 + ((unint64_t)v3 << 7))) + 0x100000000);
      BOOL v5 = v4 == v3;
      unint64_t v3 = v4;
      if (v5) {
        return explicit;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return explicit;
}

void re::FiberJobManager::addFiberToWaitList(os_unfair_lock_s *a1, unsigned __int32 a2, unint64_t a3)
{
  uint64_t v6 = a1 + 112;
  os_unfair_lock_lock(a1 + 112);
  v7.n128_u32[0] = a2;
  v7.n128_u64[1] = a3;
  re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)&a1[114], &v7);
  os_unfair_lock_unlock(v6);
}

uint64_t re::sharedJobServiceInit(re *a1, uint64_t a2, unsigned int a3, unint64_t a4, char a5, re::Allocator *a6, re::AlignedAllocator *a7)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a1 == 3)
  {
    unint64_t v19 = re::globalAllocators(a1);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 16, 8);
    *(void *)uint64_t v20 = &unk_26E721088;
    uint64_t result = (uint64_t)dispatch_get_global_queue(0, 0);
    *(void *)(v20 + 8) = result;
LABEL_44:
    g_jobService = v20;
    return result;
  }
  unsigned int v10 = a2;
  if (a1 == 2)
  {
    uint64_t v22 = re::globalAllocators(a1);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 216, 8);
    *(void *)uint64_t v20 = &unk_26E721258;
    *(void *)(v20 + 8) = 1018212795;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(void *)(v20 + 48) = 0;
    *(void *)(v20 + 56) = 850045863;
    *(void *)(v20 + 160) = 0;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 140) = 0u;
    *(_WORD *)(v20 + 168) = 1;
    *(_OWORD *)(v20 + 176) = 0u;
    *(_OWORD *)(v20 + 192) = 0u;
    *(void *)(v20 + 208) = 0;
    uint64_t result = (uint64_t)re::ThreadJobManager::init((uint64_t *)v20, v10, a5, a6, a7);
    goto LABEL_44;
  }
  if (a1 == 1)
  {
    int v13 = re::globalAllocators(a1);
    int v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 512, 64);
    unint64_t v15 = v14;
    *int v14 = (uint64_t)&unk_26E7211E8;
    v14[1] = 0;
    __int16 v16 = (re::Allocator **)(v14 + 1);
    v14[32] = 0;
    v14[2] = 0;
    v14[3] = 0;
    *(_OWORD *)(v14 + 5) = 0u;
    *(_OWORD *)(v14 + 7) = 0u;
    *(_OWORD *)(v14 + 9) = 0u;
    *((_DWORD *)v14 + 22) = 0;
    *((unsigned char *)v14 + 320) = 1;
    v14[42] = 0;
    v14[43] = 0;
    v14[41] = 0;
    atomic_store(0xFFFFFFFFuLL, (unint64_t *)v14 + 48);
    *((_DWORD *)v14 + 112) = 0;
    v14[61] = 0;
    v14[58] = 0;
    v14[59] = 0;
    v14[57] = 0;
    *((_DWORD *)v14 + 120) = 0;
    if (!v10)
    {
      int v17 = *re::foundationThreadingLogObjects((re *)v14);
      int v14 = (uint64_t *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Thread count %d is too small, jobservice will create one thread", buf, 8u);
      }
      unsigned int v10 = 1;
    }
    if (v10 >= a3)
    {
      __int16 v18 = *re::foundationThreadingLogObjects((re *)v14);
      int v14 = (uint64_t *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = a3;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v10 + 1;
        _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Fiber count %d is too small, jobservice will create %d fibers", buf, 0xEu);
      }
      a3 = v10 + 1;
    }
    if (a4 <= 0x3FF)
    {
      uint64_t v23 = *re::foundationThreadingLogObjects((re *)v14);
      int v14 = (uint64_t *)os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      if (!v14)
      {
        a4 = 1024;
        if (a6)
        {
LABEL_20:
          *__int16 v16 = a6;
          if (!a7)
          {
            a7 = (re::AlignedAllocator *)re::globalAllocators((re *)v14)[4];
            a6 = *v16;
          }
          v15[2] = (uint64_t)a7;
          atomic_store(1uLL, (unint64_t *)v15 + 16);
          atomic_store(1uLL, (unint64_t *)v15 + 24);
          uint64_t v24 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a6 + 32))(a6, 32, 8);
          *(_OWORD *)uint64_t v24 = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          re::FixedArray<unsigned long>::init<>((uint64_t *)v24, (uint64_t)a6, 0x80uLL);
          v15[32] = v24;
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[1] + 32))(v15[1], 224, 8);
          *(void *)uint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + 16) = "";
          *(_DWORD *)(v25 + 24) = -1;
          *(void *)(v25 + 36) = 0;
          *(void *)(v25 + 28) = 0;
          *(_OWORD *)(v25 + 48) = 0u;
          *(_OWORD *)(v25 + 64) = 0u;
          *(_OWORD *)(v25 + 80) = 0u;
          *(_OWORD *)(v25 + 96) = 0u;
          *(_OWORD *)(v25 + 112) = 0u;
          *(_OWORD *)(v25 + 128) = 0u;
          *(_OWORD *)(v25 + 144) = 0u;
          *(_OWORD *)(v25 + 160) = 0u;
          *(_OWORD *)(v25 + 176) = 0u;
          *(_DWORD *)(v25 + 192) = 0;
          *(void *)(v25 + 196) = 0x7FFFFFFFLL;
          *(void *)(v25 + 208) = 0;
          *(unsigned char *)(v25 + 216) = 0;
          *(_DWORD *)(v25 + 220) = 0;
          v15[3] = v25;
          uint64_t v26 = v15[1];
          v15[41] = v26;
          v15[42] = a3;
          if (a3)
          {
            uint64_t v27 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v26 + 32))(v26, (unint64_t)a3 << 7, 64);
            v15[43] = v27;
            if (!v27) {
              goto LABEL_50;
            }
            uint64_t v29 = a3 - 1;
            if (a3 != 1)
            {
              do
              {
                *(_DWORD *)uint64_t v27 = -1;
                *(_OWORD *)(v27 + 64) = 0uLL;
                *(_OWORD *)(v27 + 80) = 0uLL;
                *(_OWORD *)(v27 + 96) = 0uLL;
                *(void *)(v27 + 112) = 0;
                v27 += 128;
                --v29;
              }
              while (v29);
            }
            *(_DWORD *)uint64_t v27 = -1;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(void *)(v27 + 112) = 0;
            uint64_t v30 = v15[42];
            if (v30)
            {
              uint64_t v31 = v30 << 7;
              __int16 v32 = (re::internal::Fiber *)(v15[43] + 64);
              do
              {
                re::internal::Fiber::init(v32, (void (*)(void *))re::FiberJobManager::fiberFunction, v15, a4);
                __int16 v32 = (re::internal::Fiber *)((char *)v32 + 128);
                v31 -= 128;
              }
              while (v31);
            }
            uint64_t v33 = a3 - 1;
            if ((int)(a3 - 1) >= 0)
            {
              do
              {
                uint64_t v34 = v15[43];
                unint64_t explicit = atomic_load_explicit(v15 + 48, memory_order_acquire);
                long long v36 = (_DWORD *)(v34 + (v33 << 7));
                *long long v36 = explicit;
                unint64_t v37 = explicit;
                atomic_compare_exchange_strong(v15 + 48, &v37, explicit & 0xFFFFFFFF00000000 | v33);
                if (v37 != explicit)
                {
                  unint64_t v38 = v37;
                  do
                  {
                    *long long v36 = v37;
                    atomic_compare_exchange_strong(v15 + 48, &v38, v37 & 0xFFFFFFFF00000000 | v33);
                    BOOL v39 = v38 == v37;
                    unint64_t v37 = v38;
                  }
                  while (!v39);
                }
              }
              while (v33-- > 0);
            }
          }
          v15[57] = v15[1];
          re::DynamicArray<re::RigNodeConstraint>::setCapacity(v15 + 57, a3);
          ++*((_DWORD *)v15 + 120);
          atomic_store(0, (unsigned __int8 *)v15 + 32);
          uint64_t v41 = v15[1];
          v15[5] = v41;
          v15[6] = v10;
          uint64_t v42 = 8 * v10;
          v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, v42, 8);
          v15[7] = (uint64_t)v43;
          if (v43)
          {
            v45 = v43;
            if (v10 != 1)
            {
              bzero(v43, v42 - 8);
              v45 = (void *)((char *)v45 + v42 - 8);
            }
            void *v45 = 0;
            uint64_t v46 = v15[1];
            v15[8] = v46;
            v15[9] = v10;
            v47 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 8 * v10, 8);
            v15[10] = (uint64_t)v47;
            if (!v47) {
              goto LABEL_49;
            }
            v49 = v47;
            if (v10 != 1)
            {
              bzero(v47, v42 - 8);
              v49 = (void *)((char *)v49 + v42 - 8);
            }
            void *v49 = 0;
            *((unsigned char *)v15 + 320) = a5;
            uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 512, 64);
            *(void *)uint64_t v50 = 0;
            *(void *)(v50 + 8) = 0;
            *(_OWORD *)(v50 + 24) = 0u;
            *(_OWORD *)(v50 + 40) = 0u;
            *(_OWORD *)(v50 + 56) = 0u;
            *(void *)(v50 + 72) = 0;
            *(void *)(v50 + 80) = 0xFFFFFFFFLL;
            *(void *)(v50 + 88) = 0;
            *(_DWORD *)(v50 + 96) = -1;
            *(void *)(v50 + 136) = 0;
            *(void *)(v50 + 112) = 0;
            *(void *)(v50 + 120) = 0;
            *(void *)(v50 + 104) = 0;
            *(_DWORD *)(v50 + 128) = 0;
            *(void *)(v50 + 320) = 0;
            *(_DWORD *)(v50 + 384) = -1;
            *(unsigned char *)(v50 + 392) = 0;
            *(void *)(v50 + 400) = 850045863;
            *(_OWORD *)(v50 + 424) = 0u;
            *(_OWORD *)(v50 + 440) = 0u;
            *(_OWORD *)(v50 + 408) = 0u;
            *(void *)(v50 + 456) = 0;
            *(void *)(v50 + 464) = 1018212795;
            *(_OWORD *)(v50 + 472) = 0u;
            *(_OWORD *)(v50 + 488) = 0u;
            *(void *)(v50 + 504) = 0;
            if (v15[9])
            {
              *(void *)v15[10] = v50;
              re::internal::WorkerThread::init(*(re::internal::WorkerThread **)v15[10], (re::FiberJobManager *)v15, a5, 0, (re::AlignedAllocator *)v15[2]);
            }
            long long v53 = 0uLL;
            long long v54 = 0uLL;
            long long v52 = 0uLL;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            long long v53 = 0u;
            long long v54 = 0u;
            long long v52 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            long long v53 = 0u;
            long long v54 = 0u;
            long long v52 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_49:
          re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_50:
          re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_19:
        int v14 = re::globalAllocators((re *)v14);
        a6 = (re::Allocator *)v14[2];
        goto LABEL_20;
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      a4 = 1024;
      *(void *)&buf[14] = 1024;
      _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Fiber stack size %zu is too small, jobservice will create fibers stasks of size %zu", buf, 0x16u);
    }
    if (a6) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  g_jobService = 0;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Must select job service type", "!\"Unreachable code\"", "sharedJobServiceInit", 580);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re *re::internal::destroyPersistent<re::JobService>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    BOOL v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::FiberJobManager::numberOfThreads(re::FiberJobManager *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t re::FiberJobManager::profiler(re::FiberJobManager *this)
{
  return *((void *)this + 3);
}

uint64_t re::FiberJobManager::highPriorityAndQOSOptout(re::FiberJobManager *this)
{
  return *((unsigned __int8 *)this + 320);
}

void *re::allocInfo_JobService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_495, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_495))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F230, "JobService");
    __cxa_guard_release(&_MergedGlobals_495);
  }
  return &unk_26AF9F230;
}

void re::initInfo_JobService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE9829092CC0B0;
  v5[1] = "JobService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_JobService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_JobService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"JobService", (uint64_t (*)(re::internal *))re::allocInfo_JobService, (re::IntrospectionBase *(*)(void))re::initInfo_JobService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::JobService>, this);
}

void re::internal::AutoResetEvent::set(re::internal::AutoResetEvent *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)this, memory_order_acquire) & 1) == 0)
  {
    pthread_t v2 = (std::mutex *)((char *)this + 8);
    std::mutex::lock((std::mutex *)((char *)this + 8));
    *(unsigned char *)this = 1;
    std::condition_variable::notify_one((std::condition_variable *)((char *)this + 72));
    std::mutex::unlock(v2);
  }
}

void re::internal::AutoResetEvent::waitOne(re::internal::AutoResetEvent *this)
{
  m = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  if (*(unsigned char *)this)
  {
    *(unsigned char *)this = 0;
    goto LABEL_6;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 72), &v4);
  while ((*(unsigned char *)this & 1) == 0);
  BOOL owns = v4.__owns_;
  *(unsigned char *)this = 0;
  if (owns)
  {
    m = v4.__m_;
LABEL_6:
    std::mutex::unlock(m);
  }
}

void re::ThreadJobManager::threadFunction(re::ThreadJobManager *this)
{
  pthread_setname_np("Job Service worker");
  uint64_t v2 = 0;
  while (1)
  {
    v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 56);
    v6.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 56));
    while (!*((void *)this + 17))
    {
      if (*((unsigned char *)this + 169)) {
        goto LABEL_7;
      }
      std::condition_variable::wait((std::condition_variable *)((char *)this + 8), &v6);
    }
    if (*((unsigned char *)this + 169))
    {
LABEL_7:
      int v4 = 0;
      goto LABEL_9;
    }
    uint64_t v2 = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)this + 120, v3);
    int v4 = 1;
LABEL_9:
    if (v6.__owns_) {
      std::mutex::unlock(v6.__m_);
    }
    if (!v4) {
      break;
    }
    (*(void (**)(uint64_t))v2)(v2);
    BOOL v5 = *(atomic_uint **)(v2 + 8);
    if (v5) {
      atomic_fetch_add_explicit(v5, 0xFFFFFFFF, memory_order_release);
    }
  }
}

uint64_t *re::ThreadJobManager::init(uint64_t *this, int a2, char a3, re::Allocator *a4, re::AlignedAllocator *a5)
{
  int v8 = this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    this = re::globalAllocators((re *)this);
    a4 = (re::Allocator *)this[2];
  }
  v8[25] = (uint64_t)a4;
  if (!a5)
  {
    this = re::globalAllocators((re *)this);
    a5 = (re::AlignedAllocator *)this[4];
    a4 = (re::Allocator *)v8[25];
  }
  v8[26] = (uint64_t)a5;
  uint64_t v9 = (a2 - 1);
  v8[22] = (uint64_t)a4;
  v8[23] = v9;
  if (a2 != 1)
  {
    unsigned int v10 = (void *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 8 * v9, 8);
    v8[24] = (uint64_t)v10;
    if (v10)
    {
      unint64_t v12 = v10;
      if (v9 != 1)
      {
        bzero(v10, 8 * v9 - 8);
        v12 += v9 - 1;
      }
      *unint64_t v12 = 0;
      *((unsigned char *)v8 + 168) = a3;
      operator new();
    }
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    int v13 = _os_crash();
    __break(1u);
    std::__throw_system_error(v13, "thread constructor failed");
    std::terminate();
  }
  *((unsigned char *)v8 + 168) = a3;
  return this;
}

void re::ThreadJobManager::~ThreadJobManager(re::ThreadJobManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  *((unsigned char *)this + 169) = 1;
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 8));
  std::mutex::unlock(v2);
  if (*((void *)this + 23))
  {
    uint64_t v3 = 0;
    unsigned int v4 = 1;
    do
    {
      std::thread::join((std::thread *)(*((void *)this + 24) + 8 * v3));
      uint64_t v3 = v4;
    }
    while (*((void *)this + 23) > (unint64_t)v4++);
  }
  re::FixedArray<std::thread>::deinit((void *)this + 22);
  __n128 v7 = (void *)((char *)this + 120);
  uint64_t v6 = *((void *)this + 15);
  if (v6)
  {
    if (*((void *)this + 20)) {
      (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
    }
    *((void *)this + 20) = 0;
    *(_OWORD *)__n128 v7 = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *((_DWORD *)this + 38) = 0;
  }
  re::FixedArray<std::thread>::deinit((void *)this + 22);
  if (*v7)
  {
    if (*((void *)this + 20)) {
      (*(void (**)(void))(*(void *)*v7 + 40))(*v7);
    }
    *((void *)this + 20) = 0;
    *(_OWORD *)__n128 v7 = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *((_DWORD *)this + 38) = 0;
  }
  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 8));
}

{
  uint64_t vars8;

  re::ThreadJobManager::~ThreadJobManager(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::FixedArray<std::thread>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      unsigned int v4 = (std::thread *)result[2];
      uint64_t v5 = 8 * v2;
      do
      {
        std::thread::~thread(v4);
        unsigned int v4 = v6 + 1;
        v5 -= 8;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    *uint64_t v1 = 0;
  }
  return result;
}

void re::ThreadJobManager::currentWorkerThreadIndex(re::ThreadJobManager *this, uint64_t a2)
{
}

uint64_t re::ThreadJobManager::run(uint64_t a1, uint64_t (**a2)(void))
{
  return (*a2)(a2);
}

void re::ThreadJobManager::runAsync(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v5 = a2;
  if (a4)
  {
    *a4 = a3;
    if (a3)
    {
      uint64_t v7 = a3;
      int v8 = (unsigned int **)(a2 + 8);
      do
      {
        *int v8 = a4;
        v8 += 8;
        --v7;
      }
      while (v7);
    }
  }
  uint64_t v9 = a3;
  unint64_t v10 = *(void *)(a1 + 184);
  uint64_t v11 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  if (v10 <= a3)
  {
    if (a3)
    {
      do
      {
        uint64_t v14 = v5;
        re::Queue<re::Job *>::enqueue((_anonymous_namespace_ *)(a1 + 120), &v14);
        v5 += 64;
        --v9;
      }
      while (v9);
    }
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 8));
  }
  else if (a3)
  {
    unint64_t v12 = (_anonymous_namespace_ *)(a1 + 120);
    int v13 = (std::condition_variable *)(a1 + 8);
    do
    {
      uint64_t v14 = v5;
      re::Queue<re::Job *>::enqueue(v12, &v14);
      std::condition_variable::notify_one(v13);
      v5 += 64;
      --v9;
    }
    while (v9);
  }
  std::mutex::unlock(v11);
}

_anonymous_namespace_ *re::Queue<re::Job *>::enqueue(_anonymous_namespace_ *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (void *)((char *)result + 16);
  uint64_t v4 = *((void *)result + 2);
  unint64_t v6 = v4 + 1;
  unint64_t v7 = *((void *)result + 1);
  if (v4 + 1 >= v7)
  {
    if (v7 < v6)
    {
      if (*(void *)result)
      {
        unint64_t v8 = 2 * v7;
        if (!v7) {
          unint64_t v8 = 8;
        }
        if (v8 <= v6) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t result = (_anonymous_namespace_ *)re::Queue<re::internal::AssetLoadItem *>::setCapacity(result, v9);
        uint64_t v4 = *((void *)v3 + 2);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::Queue<re::internal::AssetLoadItem *>::setCapacity(v3, v6);
        uint64_t v4 = 0;
        *uint64_t v5 = 0;
        v5[1] = 0;
        *((_DWORD *)v5 + 4) = 0;
      }
    }
    unint64_t v7 = *((void *)v3 + 1);
    unint64_t v6 = v4 + 1;
  }
  *(void *)(*((void *)v3 + 5) + 8 * ((*((void *)v3 + 3) + v4) % v7)) = *a2;
  *((void *)v3 + 2) = v6;
  ++*((_DWORD *)v3 + 8);
  return result;
}

uint64_t re::ThreadJobManager::waitFor(uint64_t result, atomic_uint *a2)
{
  if (atomic_load_explicit(a2, memory_order_acquire))
  {
    uint64_t v3 = result;
    uint64_t v4 = (std::mutex *)(result + 56);
    uint64_t v5 = result + 120;
    do
    {
      std::mutex::lock(v4);
      if (*(void *)(v3 + 136))
      {
        uint64_t v7 = re::Queue<re::internal::AssetLoadItem *>::dequeue(v5, v6);
        std::mutex::unlock(v4);
        if (v7)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))v7)(v7);
          unint64_t v8 = *(atomic_uint **)(v7 + 8);
          if (v8) {
            atomic_fetch_add_explicit(v8, 0xFFFFFFFF, memory_order_release);
          }
          continue;
        }
      }
      else
      {
        std::mutex::unlock(v4);
      }
      uint64_t result = usleep(1u);
    }
    while (atomic_load_explicit(a2, memory_order_acquire));
  }
  return result;
}

uint64_t re::ThreadJobManager::numberOfThreads(re::ThreadJobManager *this)
{
  return (*((_DWORD *)this + 46) + 1);
}

uint64_t re::ThreadJobManager::profiler(re::ThreadJobManager *this)
{
  return 0;
}

uint64_t re::ThreadJobManager::highPriorityAndQOSOptout(re::ThreadJobManager *this)
{
  return *((unsigned __int8 *)this + 168);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (re::ThreadJobManager::*)(void),re::ThreadJobManager*>>(uint64_t *a1)
{
  unint64_t v8 = a1;
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[2];
  uint64_t v5 = (void (*)(void *))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    uint64_t v5 = *(void (**)(void *))(*v6 + v5);
  }
  v5(v6);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (re::internal::WorkerThread::*)(void),re::internal::WorkerThread*>>::reset[abi:nn180100](&v8);
  return 0;
}

void *re::allocInfo_BackgroundTaskService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_496, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_496))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F2B0, "BackgroundTaskService");
    __cxa_guard_release(&_MergedGlobals_496);
  }
  return &unk_26AF9F2B0;
}

void re::initInfo_BackgroundTaskService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x2D7BF0572AA82684;
  v5[1] = "BackgroundTaskService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_BackgroundTaskService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_BackgroundTaskService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BackgroundTaskService", (uint64_t (*)(re::internal *))re::allocInfo_BackgroundTaskService, (re::IntrospectionBase *(*)(void))re::initInfo_BackgroundTaskService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BackgroundTaskService>, this);
}

void *re::allocInfo_SharedClockService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_497, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_497))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F340, "SharedClockService");
    __cxa_guard_release(&_MergedGlobals_497);
  }
  return &unk_26AF9F340;
}

void re::initInfo_SharedClockService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xA811E48D3DB587D8;
  v5[1] = "SharedClockService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = re::internal::defaultRetain<re::SharedClockService>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::SharedClockService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_SharedClockService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_SharedClockService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SharedClockService", (uint64_t (*)(re::internal *))re::allocInfo_SharedClockService, (re::IntrospectionBase *(*)(void))re::initInfo_SharedClockService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SharedClockService>, this);
}

void re::SharedClockManager::TimeSyncClockStateDidChange(_anonymous_namespace_ *a1, uint64_t a2, int a3)
{
  uint64_t v5 = v10 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = 134218240;
    uint64_t v7 = a1;
    __int16 v8 = 1024;
    int v9 = a3;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_INFO, "TimeSyncClock %p lock state did change to %d", (uint8_t *)&v6, 0x12u);
  }
}

id anonymous namespace'::SharedClockLog(_anonymous_namespace_ *this)
{
  if (qword_26AF9F338 != -1) {
    dispatch_once(&qword_26AF9F338, &__block_literal_global_45);
  }
  uint64_t v1 = (void *)qword_26AF9F330;
  return v1;
}

void re::SharedClockManager::TimeSyncClockMasterDidChange(re::SharedClockManager *this, void *a2, void *a3)
{
  long long v4 = v7 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 134217984;
    int v6 = this;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "TimeSyncClock %p master did change", (uint8_t *)&v5, 0xCu);
  }
}

void re::SharedClockManager::TimeSyncClockGrandmasterIdentityDidChange(re::SharedClockManager *this, char *a2, unint64_t a3)
{
  int v6 = v17 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v14 = 134218240;
    *(void *)&v14[4] = this;
    *(_WORD *)&v14[12] = 2048;
    *(void *)&v14[14] = a3;
    _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_INFO, "TimeSyncClock %p grandmaster identity did change to %llu", v14, 0x16u);
  }

  atomic_store(a3, (unint64_t *)a2 + 26);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 26);
  uint64_t v7 = (const void *)*((void *)a2 + 4);
  HostTimeClock = CMClockGetHostTimeClock();
  uint64_t v10 = (_anonymous_namespace_ *)re::ManualCMClockCreateWithReference(HostTimeClock, (OpaqueCMClock *)(a2 + 32), v9);
  if (v10)
  {
    unint64_t v12 = v11 = (int)v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)&v14[4] = "changeGrandmasterID";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 237;
      *(_WORD *)&v14[18] = 1024;
      *(_DWORD *)&v14[20] = v11;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "%s:%d error: %d", v14, 0x18u);
    }
  }
  CFRelease(v7);
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 26);
  re::SharedClockManager::update((os_unfair_lock_s *)a2);
  re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise((uint64_t)(a2 + 120), (uint64_t)a2);
  int v13 = *((void *)a2 + 14);
  *(void *)uint64_t v14 = MEMORY[0x263EF8330];
  *(void *)&v14[8] = 3221225472;
  *(void *)&v14[16] = ___ZN2re18SharedClockManager19changeGrandmasterIDEy_block_invoke;
  unint64_t v15 = &__block_descriptor_40_e5_v8__0l;
  __int16 v16 = a2;
  dispatch_async(v13, v14);
}

void re::SharedClockManager::TimeSyncClockGrandmasterIdentityAndLocalPortDidChange(re::SharedClockManager *this, void *a2, void *a3, int a4)
{
  uint64_t v7 = v14 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = 134218496;
    int v9 = this;
    __int16 v10 = 2048;
    int v11 = a3;
    __int16 v12 = 1024;
    int v13 = a4;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_INFO, "TimeSyncClock %p grandmaster identity did change to %llu and local port to %d", (uint8_t *)&v8, 0x1Cu);
  }
}

void re::SharedClockManager::~SharedClockManager(id *this)
{
  re::SharedClockManager::setSession((re::SharedClockManager *)this, 0);
  re::SharedClockManager::tearDownClocks((re::SharedClockManager *)this);
  if (this[15]) {
    re::DynamicArray<unsigned long>::deinit((uint64_t)(this + 15));
  }
  if (this[6]) {
    RESyncRelease();
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(this + 30));
  uint64_t v2 = (char *)this[27];
  if (v2)
  {

    this[27] = 0;
  }
  re::Event<re::GeometricObjectBase>::~Event(this + 15);

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(this + 8));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

void re::SharedClockManager::setSession(re::SharedClockManager *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (v3 != a2)
  {
    if (v3)
    {
      if (RESyncNetSessionParticipantsCount())
      {
        unint64_t v5 = 0;
        do
        {
          RESyncNetSessionGetParticipantAtIndex();
          re::SharedClockManager::participantDidLeave((uint64_t)this);
          ++v5;
        }
        while (v5 < RESyncNetSessionParticipantsCount());
      }
      os_unfair_lock_lock((os_unfair_lock_t)this + 26);
      unint64_t v6 = *((void *)this + 11);
      uint64_t v14 = 0;
      int v13 = 0;
      if (v6)
      {
        if (v6 >> 61) {
          abort();
        }
        uint64_t v7 = (unint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)&v14, v6);
        int v13 = v7;
        uint64_t v14 = &v7[v8];
        bzero(v7, 8 * v6);
        unint64_t v6 = (unint64_t)&v7[v6];
      }
      else
      {
        uint64_t v7 = 0;
      }
      int v9 = (void *)*((void *)this + 10);
      if (v9)
      {
        __int16 v10 = v7;
        do
        {
          *v10++ = v9[2];
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      while (v7 != (unint64_t *)v6)
      {
        unint64_t v11 = *v7++;
        re::SharedClockManager::peerDidLeave((int8x8_t *)this, v11);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)this + 26);
      if (RESyncNetSessionIsInitialized()) {
        RESyncNetSessionRemoveObserver();
      }
      RESyncRelease();
      if (v13) {
        operator delete(v13);
      }
    }
    *((void *)this + 5) = a2;
    if (!a2) {
      goto LABEL_29;
    }
    RESyncRetain();
    if (RESyncNetSessionIsInitialized())
    {
      if (!*((void *)this + 6)) {
        *((void *)this + 6) = RESyncNetSessionObserverCreate();
      }
      RESyncNetSessionObserverOnParticipantJoin();
      RESyncNetSessionObserverOnParticipantLeave();
      RESyncNetSessionObserverOnReceiveData();
      RESyncNetSessionAddObserver();
      if (RESyncNetSessionParticipantsCount())
      {
        unint64_t v12 = 0;
        do
        {
          RESyncNetSessionGetParticipantAtIndex();
          re::SharedClockManager::participantDidJoin((uint64_t)this);
          ++v12;
        }
        while (v12 < RESyncNetSessionParticipantsCount());
      }
    }
    if (!*((void *)this + 5) || (unint64_t)RESyncNetSessionParticipantsCount() <= 1) {
LABEL_29:
    }
      re::SharedClockManager::tearDownClocks(this);
  }
}

void re::SharedClockManager::tearDownClocks(re::SharedClockManager *this)
{
  if (*((unsigned char *)this + 232))
  {
    if (*((void *)this + 7))
    {
      TimeSyncClockDispose();
      *((void *)this + 7) = 0;
    }
    uint64_t v2 = (const void *)*((void *)this + 4);
    if (v2)
    {
      CFRelease(v2);
      *((void *)this + 4) = 0;
    }
    uint64_t v3 = (const void *)*((void *)this + 3);
    if (v3)
    {
      CFRelease(v3);
      *((void *)this + 3) = 0;
    }
    atomic_store(0, (unint64_t *)this + 26);
    re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise((uint64_t)this + 120, (uint64_t)this);
    *((unsigned char *)this + 232) = 0;
  }
}

void re::SharedClockManager::setUpClocks(re::SharedClockManager *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 232))
  {
    uint64_t v2 = (os_unfair_lock_s *)((char *)this + 104);
    os_unfair_lock_lock((os_unfair_lock_t)this + 26);
    HostTimeClock = CMClockGetHostTimeClock();
    unint64_t v5 = (_anonymous_namespace_ *)re::ManualCMClockCreateWithReference(HostTimeClock, (re::SharedClockManager *)((char *)this + 24), v4);
    if (v5)
    {
      v7 = int v6 = (int)v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315650;
        unint64_t v19 = "setUpClocks";
        __int16 v20 = 1024;
        int v21 = 168;
        __int16 v22 = 1024;
        int v23 = v6;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v18, 0x18u);
      }
    }
    uint64_t v8 = (_anonymous_namespace_ *)TimeSyncAddgPTPServices();
    if (v8)
    {
      uint64_t v9 = TimeSyncSystemDomainClockIdentifier();
      uint64_t v10 = MEMORY[0x237DBC2C0](v9);
      *((void *)this + 7) = v10;
      if (v10)
      {
        unint64_t v11 = CMClockGetHostTimeClock();
        int v13 = (_anonymous_namespace_ *)re::ManualCMClockCreateWithReference(v11, (re::SharedClockManager *)((char *)this + 32), v12);
        if (v13)
        {
          v15 = int v14 = (int)v13;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            int v18 = 136315650;
            unint64_t v19 = "setUpClocks";
            __int16 v20 = 1024;
            int v21 = 176;
            __int16 v22 = 1024;
            int v23 = v14;
            _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v18, 0x18u);
          }
        }
        TimeSyncClockSetLockStateChangeCallback();
        TimeSyncClockSetMasterChangeCallback();
        TimeSyncClockSetgPTPGrandmasterChangeCallback();
        TimeSyncClockSetgPTPGrandmasterAndPortChangeCallback();
        TimeSyncClockSetgPTPLocalPortChangeCallback();
        atomic_store(TimeSyncClockGetgPTPGrandmasterIdentity(), (unint64_t *)this + 26);
        goto LABEL_17;
      __int16 v16 = };
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
LABEL_16:

LABEL_17:
        os_unfair_lock_unlock(v2);
        re::SharedClockManager::update((os_unfair_lock_s *)this);
        atomic_load((unint64_t *)this + 26);
        re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise((uint64_t)this + 120, (uint64_t)this);
        *((unsigned char *)this + 232) = 1;
        return;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "Failed to create time sync clock";
    }
    else {
      __int16 v16 = {;
    }
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      LOWORD(v18) = 0;
      uint64_t v17 = "Failed to add time sync services";
    }
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v18, 2u);
    goto LABEL_16;
  }
}

void re::SharedClockManager::participantDidJoin(uint64_t a1)
{
  *(void *)&v41[13] = *MEMORY[0x263EF8340];
  RESyncParticipantGetPeerID();
  uint64_t IsLocalPeer = RESyncNetSessionGetIsLocalPeer();
  if ((IsLocalPeer & 1) == 0)
  {
    if (atomic_load((unsigned int *)(a1 + 236))) {
      long long v4 = {;
    }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t PeerID = RESyncParticipantGetPeerID();
        _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "Participant joined with peer ID %llu ", buf, 0xCu);
      }

      if (!*(unsigned char *)(a1 + 232)) {
        re::SharedClockManager::setUpClocks((re::SharedClockManager *)a1);
      }
      unint64_t v5 = *(const void **)(a1 + 224);
      if (v5)
      {
        CFDataRef v6 = (const __CFData *)CFRetain(v5);
      }
      else
      {
        unint64_t v37 = 0;
        int v13 = (_anonymous_namespace_ *)getifaddrs(&v37);
        if ((v13 & 0x80000000) != 0) {
          uint64_t v28 = {;
        }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            int v35 = *__error();
            *(_DWORD *)buf = 67109120;
            LODWORD(PeerID) = v35;
            _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "SharedClockManager: unable to list network adapters(errno=%d).", buf, 8u);
          }

          goto LABEL_48;
        }
        int v14 = v37;
        if (!v37)
        {
          MEMORY[0x237DBD610](0);
LABEL_48:
          unint64_t v29 = RESyncParticipantGetPeerID();
          uint64_t v30 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(a1 + 240), v29);
          if (v30)
          {
            CFDataRef v31 = (const __CFData *)CFRetain((CFTypeRef)v30[3]);
            unint64_t v32 = RESyncParticipantGetPeerID();
            BytePtr = CFDataGetBytePtr(v31);
            CFIndex Length = CFDataGetLength(v31);
            re::SharedClockManager::didReceiveData(a1, v32, BytePtr, Length);
            CFRelease(v31);
          }
          return;
        }
        unint64_t v15 = 0;
        __int16 v16 = 0;
        uint64_t v17 = 0;
        int v18 = 0;
        do
        {
          ifa_addr = v14->ifa_addr;
          if (ifa_addr)
          {
            ifa_name = v14->ifa_name;
            if ((!strcmp(ifa_name, "en0") || !strcmp(ifa_name, "awdl0"))
              && (v14->ifa_flags & 0xB) == 3
              && ifa_addr->sa_family == 2)
            {
              *(_DWORD *)&v41[1] = *(_DWORD *)&ifa_addr->sa_data[2];
              int v21 = v14->ifa_name;
              *(_DWORD *)buf = 0;
              strcpy((char *)&PeerID, v21);
              if (v18 >= v16)
              {
                uint64_t v22 = (v15 - v17) >> 5;
                unint64_t v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 59) {
                  abort();
                }
                if ((v16 - (char *)v17) >> 4 > v23) {
                  unint64_t v23 = (v16 - (char *)v17) >> 4;
                }
                if ((unint64_t)(v16 - (char *)v17) >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v24 = v23;
                }
                if (v24)
                {
                  if (v24 >> 59) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  uint64_t v25 = (char *)operator new(32 * v24);
                }
                else
                {
                  uint64_t v25 = 0;
                }
                uint64_t v26 = &v25[32 * v22];
                *(_DWORD *)uint64_t v26 = 0;
                strcpy(v26 + 4, (const char *)&PeerID);
                *((_OWORD *)v26 + 1) = *(_OWORD *)&v41[1];
                if (v15 == v17)
                {
                  uint64_t v17 = (const UInt8 *)v26;
                }
                else
                {
                  long long v36 = v25;
                  uint64_t v27 = 0;
                  do
                  {
                    *(_DWORD *)&v26[v27 - 32] = *(_DWORD *)&v15[v27 - 32];
                    strcpy(&v26[v27 - 28], (const char *)&v15[v27 - 28]);
                    *(_OWORD *)&v26[v27 - 16] = *(_OWORD *)&v15[v27 - 16];
                    v27 -= 32;
                  }
                  while (&v15[v27] != v17);
                  unint64_t v15 = (UInt8 *)v17;
                  uint64_t v17 = (const UInt8 *)&v26[v27];
                  uint64_t v25 = v36;
                }
                __int16 v16 = &v25[32 * v24];
                int v18 = v26 + 32;
                if (v15) {
                  operator delete(v15);
                }
              }
              else
              {
                *(_DWORD *)int v18 = 0;
                strcpy(v18 + 4, (const char *)&PeerID);
                *((_OWORD *)v18 + 1) = *(_OWORD *)&v41[1];
                v18 += 32;
              }
              unint64_t v15 = (UInt8 *)v18;
            }
          }
          int v14 = v14->ifa_next;
        }
        while (v14);
        MEMORY[0x237DBD610](v37);
        if (v15 == v17)
        {
          CFDataRef v6 = 0;
        }
        else
        {
          CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v17, v15 - v17);
          unint64_t v15 = (UInt8 *)v17;
        }
        if (v15) {
          operator delete(v15);
        }
      }
      if (v6)
      {
        RESyncParticipantGetPeerID();
        CFDataGetBytePtr(v6);
        CFDataGetLength(v6);
        v8 = uint64_t v7 = (_anonymous_namespace_ *)RESyncNetSessionSendData();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          uint64_t v9 = RESyncParticipantGetPeerID();
          unint64_t v10 = CFDataGetLength(v6);
          *(_DWORD *)buf = 134218240;
          uint64_t PeerID = v9;
          __int16 v40 = 2048;
          *(void *)uint64_t v41 = v10 >> 5;
          _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_INFO, "Sent %llu %lu addresses:", buf, 0x16u);
        }

        unint64_t v11 = CFDataGetBytePtr(v6);
        unint64_t v12 = CFDataGetLength(v6);
        CFRelease(v6);
      }
      goto LABEL_48;
    }
  }
}

void re::SharedClockManager::update(os_unfair_lock_s *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = this + 26;
  os_unfair_lock_lock(this + 26);
  if (*(void *)&this[14]._os_unfair_lock_opaque)
  {
    uint64_t v15 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int64_t value = 0;
    ClockRateAndAnchors = (_anonymous_namespace_ *)TimeSyncClockGetClockRateAndAnchors();
    if (ClockRateAndAnchors)
    {
      v5 = int v4 = (int)ClockRateAndAnchors;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v23 = "update";
        __int16 v24 = 1024;
        int v25 = 308;
        __int16 v26 = 1024;
        int v27 = v4;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "%s:%d error: %d", buf, 0x18u);
      }
    }
    else
    {
      CFDataRef v6 = *(re **)&this[8]._os_unfair_lock_opaque;
      CMTimeMake(&v18, value, 1000000000);
      CMClockMakeHostTimeFromSystemUnits(&v17, v20);
      re::ManualCMClockUpdateRateAndAnchor(v6, &v18, 1.0, &v17, v7);
    }
  }
  if (*(void *)&this[6]._os_unfair_lock_opaque)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    times = (_anonymous_namespace_ *)mach_get_times();
    if (times)
    {
      v10 = int v9 = (int)times;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v23 = "update";
        __int16 v24 = 1024;
        int v25 = 332;
        __int16 v26 = 1024;
        int v27 = v9;
        _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "%s:%d error: %d", buf, 0x18u);
      }
    }
    else
    {
      unint64_t v11 = *(re **)&this[6]._os_unfair_lock_opaque;
      CMTimeMake(&v14, v16 + 1000000000 * v15, 1000000000);
      CMClockMakeHostTimeFromSystemUnits(&v13, v20);
      re::ManualCMClockUpdateRateAndAnchor(v11, &v14, 1.0, &v13, v12);
    }
  }
  os_unfair_lock_unlock(v2);
}

uint64_t ___ZN2re18SharedClockManager19changeGrandmasterIDEy_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 104));
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 1065353216;
  uint64_t v3 = *(uint64_t **)(v1 + 80);
  if (!v3) {
    goto LABEL_13;
  }
  do
  {
    if (*((_DWORD *)v3 + 6)) {
      int v4 = {;
    }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Non-IPv4 not yet supported", buf, 2u);
      }
    }
    else
    {
      inet_ntop(2, v3 + 5, v17, 0x10u);
      uint64_t v2 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, char *, uint64_t))(**(void **)(v1 + 216) + 32))(*(void *)(v1 + 216), v17, 1500000);
      if (v2) {
        goto LABEL_8;
      }
    }
    uint64_t v2 = (_anonymous_namespace_ *)std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v12, (unint64_t *)v3 + 2, v3 + 2);
LABEL_8:
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  for (i = (void *)v13; i; i = (void *)*i)
    CFDataRef v6 = {;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = i[2];
      *(_DWORD *)buf = 134217984;
      uint64_t v16 = v7;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_INFO, "Disconnecting from peer %llu after failing to ping", buf, 0xCu);
    }

    re::SharedClockManager::peerDidLeave((int8x8_t *)v1, i[2]);
  }
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 104));
  if (*((void *)&v13 + 1) && *(void *)(v1 + 40) && RESyncNetSessionParticipantsCount())
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v1 + 40);
      uint64_t ParticipantAtIndex = RESyncNetSessionGetParticipantAtIndex();
      re::SharedClockManager::participantDidJoin(v1, v9, ParticipantAtIndex);
      ++v8;
    }
    while (v8 < RESyncNetSessionParticipantsCount());
  }
  return std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v12);
}

void re::SharedClockManager::peerDidLeave(int8x8_t *this, unint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v4 = this + 8;
  unint64_t v5 = (const char *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(&this[8], a2);
  if (v5)
  {
    if (!*(void *)&this[7]) {
      goto LABEL_16;
    }
    CFDataRef v6 = v5;
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v5 + 28, 0x8000100u);
    int v8 = *((_DWORD *)v6 + 6);
    if (v8 == 2)
    {
      long long v12 = (_anonymous_namespace_ *)TimeSyncClockRemoveAWDLPort();
      if (v12)
      {
        v11 = int v13 = (int)v12;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
LABEL_14:

          goto LABEL_15;
        }
        int v26 = 136315650;
        int v27 = "peerDidLeave";
        __int16 v28 = 1024;
        int v29 = 513;
        __int16 v30 = 1024;
        int v31 = v13;
LABEL_47:
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v26, 0x18u);
        goto LABEL_14;
      }
    }
    else
    {
      if (v8 != 1)
      {
        if (v8) {
          goto LABEL_15;
        }
        uint64_t v9 = (_anonymous_namespace_ *)TimeSyncClockRemoveUDPv4EndToEndPort();
        if (!v9) {
          goto LABEL_15;
        }
        v11 = int v10 = (int)v9;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        int v26 = 136315650;
        int v27 = "peerDidLeave";
        __int16 v28 = 1024;
        int v29 = 505;
        __int16 v30 = 1024;
        int v31 = v10;
        goto LABEL_47;
      }
      int v14 = (_anonymous_namespace_ *)TimeSyncClockRemoveUDPv6EndToEndPort();
      if (v14)
      {
        v11 = int v15 = (int)v14;
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        int v26 = 136315650;
        int v27 = "peerDidLeave";
        __int16 v28 = 1024;
        int v29 = 509;
        __int16 v30 = 1024;
        int v31 = v15;
        goto LABEL_47;
      }
    }
LABEL_15:
    CFRelease(v7);
LABEL_16:
    uint64_t v16 = (int8x8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v4, a2);
    if (!v16) {
      return;
    }
    int8x8_t v17 = this[9];
    int8x8_t v18 = *v16;
    unint64_t v19 = (unint64_t)v16[1];
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v17);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v17) {
        v19 %= *(void *)&v17;
      }
    }
    else
    {
      v19 &= *(void *)&v17 - 1;
    }
    uint64_t v21 = *(int8x8_t **)(*(void *)v4 + 8 * v19);
    do
    {
      uint64_t v22 = v21;
      uint64_t v21 = (int8x8_t *)*v21;
    }
    while (v21 != v16);
    if (v22 == &this[10]) {
      goto LABEL_34;
    }
    unint64_t v23 = (unint64_t)v22[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&v17) {
        v23 %= *(void *)&v17;
      }
    }
    else
    {
      v23 &= *(void *)&v17 - 1;
    }
    if (v23 != v19)
    {
LABEL_34:
      if (v18)
      {
        unint64_t v24 = *(void *)(*(void *)&v18 + 8);
        if (v20.u32[0] > 1uLL)
        {
          unint64_t v25 = *(void *)(*(void *)&v18 + 8);
          if (v24 >= *(void *)&v17) {
            unint64_t v25 = v24 % *(void *)&v17;
          }
        }
        else
        {
          unint64_t v25 = v24 & (*(void *)&v17 - 1);
        }
        if (v25 == v19) {
          goto LABEL_38;
        }
      }
      *(void *)(*(void *)v4 + 8 * v19) = 0;
      int8x8_t v18 = *v16;
    }
    if (!*(void *)&v18)
    {
LABEL_44:
      *uint64_t v22 = v18;
      *uint64_t v16 = 0;
      --*(void *)&this[11];
      operator delete(v16);
      return;
    }
    unint64_t v24 = *(void *)(*(void *)&v18 + 8);
LABEL_38:
    if (v20.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v17) {
        v24 %= *(void *)&v17;
      }
    }
    else
    {
      v24 &= *(void *)&v17 - 1;
    }
    if (v24 != v19)
    {
      *(void *)(*(void *)v4 + 8 * v24) = v22;
      int8x8_t v18 = *v16;
    }
    goto LABEL_44;
  }
}

void re::SharedClockManager::participantDidLeave(uint64_t a1)
{
  uint64_t v2 = v6 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v4 = 134217984;
    uint64_t PeerID = RESyncParticipantGetPeerID();
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_INFO, "Participant left with peer ID %llu", (uint8_t *)&v4, 0xCu);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  unint64_t v3 = RESyncParticipantGetPeerID();
  re::SharedClockManager::peerDidLeave((int8x8_t *)a1, v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  if ((unint64_t)RESyncNetSessionParticipantsCount() <= 1)
  {
    if (*(unsigned char *)(a1 + 232)) {
      re::SharedClockManager::tearDownClocks((re::SharedClockManager *)a1);
    }
  }
}

void ___ZN2re18SharedClockManager10setSessionEP16RESyncNetSession_block_invoke(uint64_t a1)
{
}

void ___ZN2re18SharedClockManager10setSessionEP16RESyncNetSession_block_invoke_2(uint64_t a1)
{
}

void ___ZN2re18SharedClockManager10setSessionEP16RESyncNetSession_block_invoke_3(uint64_t a1, uint64_t a2, unint64_t a3, const UInt8 *a4, unint64_t a5)
{
}

void re::SharedClockManager::didReceiveData(uint64_t a1, unint64_t a2, const UInt8 *a3, unint64_t a4)
{
  unint64_t v4 = a4;
  *(void *)((char *)&v64[2] + 2) = *MEMORY[0x263EF8340];
  CFIndex v8 = a4;
  v10 = unint64_t v9 = (unint64_t)a4 >> 5;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    unint64_t v62 = v9;
    __int16 v63 = 2048;
    v64[0] = a2;
    _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_INFO, "Received %lu addresses from %llu:", buf, 0x16u);
  }

  unint64_t v11 = (void **)(a1 + 240);
  long long v12 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(a1 + 240), a2);
  if (v12)
  {
    CFRelease((CFTypeRef)v12[3]);
    int v13 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(a1 + 240), a2);
    if (v13)
    {
      int8x8_t v14 = *(int8x8_t *)(a1 + 248);
      uint64_t v15 = *v13;
      unint64_t v16 = v13[1];
      uint8x8_t v17 = (uint8x8_t)vcnt_s8(v14);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        if (v16 >= *(void *)&v14) {
          v16 %= *(void *)&v14;
        }
      }
      else
      {
        v16 &= *(void *)&v14 - 1;
      }
      int8x8_t v18 = (uint64_t *)*((void *)*v11 + v16);
      do
      {
        unint64_t v19 = v18;
        int8x8_t v18 = (uint64_t *)*v18;
      }
      while (v18 != v13);
      if (v19 == (uint64_t *)(a1 + 256)) {
        goto LABEL_22;
      }
      unint64_t v20 = v19[1];
      if (v17.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&v14) {
          v20 %= *(void *)&v14;
        }
      }
      else
      {
        v20 &= *(void *)&v14 - 1;
      }
      if (v20 != v16)
      {
LABEL_22:
        if (v15)
        {
          unint64_t v21 = *(void *)(v15 + 8);
          if (v17.u32[0] > 1uLL)
          {
            unint64_t v22 = *(void *)(v15 + 8);
            if (v21 >= *(void *)&v14) {
              unint64_t v22 = v21 % *(void *)&v14;
            }
          }
          else
          {
            unint64_t v22 = v21 & (*(void *)&v14 - 1);
          }
          if (v22 == v16) {
            goto LABEL_26;
          }
        }
        *((void *)*v11 + v16) = 0;
        uint64_t v15 = *v13;
      }
      if (!v15)
      {
LABEL_32:
        *unint64_t v19 = v15;
        *int v13 = 0;
        --*(void *)(a1 + 264);
        operator delete(v13);
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v15 + 8);
LABEL_26:
      if (v17.u32[0] > 1uLL)
      {
        if (v21 >= *(void *)&v14) {
          v21 %= *(void *)&v14;
        }
      }
      else
      {
        v21 &= *(void *)&v14 - 1;
      }
      if (v21 != v16)
      {
        *((void *)*v11 + v21) = v19;
        uint64_t v15 = *v13;
      }
      goto LABEL_32;
    }
  }
LABEL_33:
  if (*(void *)(a1 + 56))
  {
    unint64_t v56 = a2;
    if (v4 >= 0x20)
    {
      uint64_t v23 = MEMORY[0x263EF8330];
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v24 = a3 + 16;
      do
      {
        *(_DWORD *)buf = *((_DWORD *)v24 - 4);
        int v25 = *(_DWORD *)buf;
        strcpy((char *)&v62, (const char *)v24 - 12);
        *(_OWORD *)((char *)v64 + 2) = *v24;
        int v26 = *(NSObject **)(a1 + 112);
        block[0] = v23;
        block[1] = 3321888768;
        block[2] = ___ZN2re18SharedClockManager14didReceiveDataEP16RESyncNetSessionyPKvj_block_invoke;
        block[3] = &__block_descriptor_80_a8_48c54_ZTSN2re18SharedClockManager23TimeSyncPeerInformationE_e5_v8__0l;
        block[4] = a1;
        block[5] = v56;
        int v58 = v25;
        strcpy(v59, (const char *)&v62);
        long long v27 = *v24;
        v24 += 2;
        long long v60 = v27;
        dispatch_async(v26, block);
        --v9;
      }
      while (v9);
    }
    return;
  }
  CFDataRef v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a3, v8);
  unint64_t v29 = *(void *)(a1 + 248);
  if (v29)
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v29 <= a2) {
        unint64_t v4 = a2 % v29;
      }
    }
    else
    {
      unint64_t v4 = (v29 - 1) & a2;
    }
    int v31 = (void *)*((void *)*v11 + v4);
    if (v31)
    {
      uint64_t v32 = (void *)*v31;
      if (*v31)
      {
        do
        {
          unint64_t v33 = v32[1];
          if (v33 == a2)
          {
            if (v32[2] == a2) {
              goto LABEL_113;
            }
          }
          else
          {
            if (v30.u32[0] > 1uLL)
            {
              if (v33 >= v29) {
                v33 %= v29;
              }
            }
            else
            {
              v33 &= v29 - 1;
            }
            if (v33 != v4) {
              break;
            }
          }
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
    }
  }
  uint64_t v32 = operator new(0x20uLL);
  *uint64_t v32 = 0;
  v32[1] = a2;
  v32[2] = a2;
  v32[3] = 0;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 264) + 1);
  float v35 = *(float *)(a1 + 272);
  if (!v29 || (float)(v35 * (float)v29) < v34)
  {
    BOOL v36 = 1;
    if (v29 >= 3) {
      BOOL v36 = (v29 & (v29 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v29);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      int8x8_t prime = (int8x8_t)v38;
    }
    else {
      int8x8_t prime = (int8x8_t)v37;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v29 = *(void *)(a1 + 248);
    }
    if (*(void *)&prime > v29) {
      goto LABEL_69;
    }
    if (*(void *)&prime < v29)
    {
      unint64_t v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 264) / *(float *)(a1 + 272));
      if (v29 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (*(void *)&prime <= v46) {
        int8x8_t prime = (int8x8_t)v46;
      }
      if (*(void *)&prime >= v29)
      {
        unint64_t v29 = *(void *)(a1 + 248);
      }
      else
      {
        if (prime)
        {
LABEL_69:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __int16 v40 = operator new(8 * *(void *)&prime);
          uint64_t v41 = *v11;
          NSObject *v11 = v40;
          if (v41) {
            operator delete(v41);
          }
          uint64_t v42 = 0;
          *(int8x8_t *)(a1 + 248) = prime;
          do
            *((void *)*v11 + v42++) = 0;
          while (*(void *)&prime != v42);
          v43 = *(void **)(a1 + 256);
          if (v43)
          {
            unint64_t v44 = v43[1];
            uint8x8_t v45 = (uint8x8_t)vcnt_s8(prime);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              if (v44 >= *(void *)&prime) {
                v44 %= *(void *)&prime;
              }
            }
            else
            {
              v44 &= *(void *)&prime - 1;
            }
            *((void *)*v11 + v44) = a1 + 256;
            v49 = (void *)*v43;
            if (*v43)
            {
              do
              {
                unint64_t v50 = v49[1];
                if (v45.u32[0] > 1uLL)
                {
                  if (v50 >= *(void *)&prime) {
                    v50 %= *(void *)&prime;
                  }
                }
                else
                {
                  v50 &= *(void *)&prime - 1;
                }
                if (v50 != v44)
                {
                  if (!*((void *)*v11 + v50))
                  {
                    *((void *)*v11 + v50) = v43;
                    goto LABEL_94;
                  }
                  void *v43 = *v49;
                  void *v49 = **((void **)*v11 + v50);
                  **((void **)*v11 + v50) = v49;
                  v49 = v43;
                }
                unint64_t v50 = v44;
LABEL_94:
                v43 = v49;
                v49 = (void *)*v49;
                unint64_t v44 = v50;
              }
              while (v49);
            }
          }
          unint64_t v29 = (unint64_t)prime;
          goto LABEL_98;
        }
        uint64_t v55 = *v11;
        NSObject *v11 = 0;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v29 = 0;
        *(void *)(a1 + 248) = 0;
      }
    }
LABEL_98:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v29 <= a2) {
        unint64_t v4 = a2 % v29;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v29 - 1) & a2;
    }
  }
  v51 = *v11;
  long long v52 = (void *)*((void *)*v11 + v4);
  if (v52)
  {
    *uint64_t v32 = *v52;
  }
  else
  {
    uint64_t v53 = *(void *)(a1 + 256);
    *uint64_t v32 = v53;
    *(void *)(a1 + 256) = v32;
    v51[v4] = a1 + 256;
    if (!v53) {
      goto LABEL_112;
    }
    unint64_t v54 = *(void *)(v53 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v54 >= v29) {
        v54 %= v29;
      }
    }
    else
    {
      v54 &= v29 - 1;
    }
    long long v52 = (char *)*v11 + 8 * v54;
  }
  *long long v52 = v32;
LABEL_112:
  ++*(void *)(a1 + 264);
LABEL_113:
  v32[3] = v28;
}

void anonymous namespace'::LogPeerInformationArray(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1 + 4;
    for (i = (_DWORD *)(a1 + 16); ; i += 8)
    {
      int v5 = *(i - 4);
      if (v5 == 1) {
        break;
      }
      if (!v5)
      {
        v7 = uint64_t v6 = (_anonymous_namespace_ *)inet_ntop(2, i, (char *)buf, 0x10u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)unint64_t v16 = 136315394;
          uint64_t v17 = v3;
          __int16 v18 = 2080;
          unint64_t v19 = buf;
          CFIndex v8 = (uint8_t *)v16;
          unint64_t v9 = v7;
          int v10 = "   %s udpv4 %s";
          goto LABEL_9;
        }
        goto LABEL_10;
      }
LABEL_11:
      v3 += 32;
      if (!--v2) {
        return;
      }
    }
    CFStringRef v7 = v11 = (_anonymous_namespace_ *)inet_ntop(30, i, v16, 0x2Eu);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = v3;
      __int16 v14 = 2080;
      uint64_t v15 = v16;
      CFIndex v8 = buf;
      unint64_t v9 = v7;
      int v10 = "   %s udpv6 %s";
LABEL_9:
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_INFO, v10, v8, 0x16u);
    }
LABEL_10:

    goto LABEL_11;
  }
}

void ___ZN2re18SharedClockManager14didReceiveDataEP16RESyncNetSessionyPKvj_block_invoke(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  int v41 = *(_DWORD *)(a1 + 48);
  strcpy(v42, (const char *)(a1 + 52));
  long long v43 = *(_OWORD *)(a1 + 64);
  if (*(void *)(v4 + 56))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 104));
    int v5 = (void *)(v4 + 64);
    uint64_t v6 = (_anonymous_namespace_ *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(v4 + 64), v3);
    if (v6) {
      CFStringRef v7 = {;
    }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        unint64_t v49 = v3;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_INFO, "Already connected to peer %llu", buf, 0xCu);
      }
LABEL_8:

LABEL_9:
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 104));
      return;
    }
    if (v41) {
      CFStringRef v7 = {;
    }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Non-IPv4 not yet supported", buf, 2u);
      }
      goto LABEL_8;
    }
    inet_ntop(2, &v43, (char *)buf, 0x10u);
    CFIndex v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint8_t *, uint64_t))(**(void **)(v4 + 216) + 32))(*(void *)(v4 + 216), buf, 1500000);
    v10 = char v9 = (char)v8;
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if ((v9 & 1) == 0)
    {
      if (v11)
      {
        *(_DWORD *)unint64_t v44 = 136315138;
        uint8x8_t v45 = buf;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_INFO, "Failed to ping peer at %s", v44, 0xCu);
      }

      goto LABEL_9;
    }
    if (v11)
    {
      *(_DWORD *)unint64_t v44 = 136315394;
      uint8x8_t v45 = buf;
      __int16 v46 = 2080;
      v47[0] = v42;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_INFO, "Successfully pinged peer at %s on %s", v44, 0x16u);
    }

    CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v42, 0x8000100u);
    uint64_t v13 = (_anonymous_namespace_ *)TimeSyncClockAddUDPv4EndToEndPort();
    if (v13)
    {
      v14 = unint64_t v1 = (unint64_t)v13;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v44 = 136315650;
        uint8x8_t v45 = (uint8_t *)"attemptToReachPeerAtAddress";
        __int16 v46 = 1024;
        LODWORD(v47[0]) = 565;
        WORD2(v47[0]) = 1024;
        *(_DWORD *)((char *)v47 + 6) = v1;
        _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "%s:%d error: %d", v44, 0x18u);
      }
    }
    unint64_t v15 = *(void *)(v4 + 72);
    if (v15)
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v1 = v3;
        if (v15 <= v3) {
          unint64_t v1 = v3 % v15;
        }
      }
      else
      {
        unint64_t v1 = (v15 - 1) & v3;
      }
      uint64_t v17 = *(void ***)(*v5 + 8 * v1);
      if (v17)
      {
        __int16 v18 = (char *)*v17;
        if (*v17)
        {
          do
          {
            unint64_t v19 = *((void *)v18 + 1);
            if (v19 == v3)
            {
              if (*((void *)v18 + 2) == v3) {
                goto LABEL_94;
              }
            }
            else
            {
              if (v16.u32[0] > 1uLL)
              {
                if (v19 >= v15) {
                  v19 %= v15;
                }
              }
              else
              {
                v19 &= v15 - 1;
              }
              if (v19 != v1) {
                break;
              }
            }
            __int16 v18 = *(char **)v18;
          }
          while (v18);
        }
      }
    }
    __int16 v18 = (char *)operator new(0x38uLL);
    *(void *)__int16 v18 = 0;
    *((void *)v18 + 1) = v3;
    *((void *)v18 + 2) = v3;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    float v20 = (float)(unint64_t)(*(void *)(v4 + 88) + 1);
    float v21 = *(float *)(v4 + 96);
    if (v15 && (float)(v21 * (float)v15) >= v20)
    {
LABEL_84:
      unint64_t v37 = (void *)*v5;
      unint64_t v38 = *(void **)(*v5 + 8 * v1);
      if (v38)
      {
        *(void *)__int16 v18 = *v38;
      }
      else
      {
        *(void *)__int16 v18 = *(void *)(v4 + 80);
        *(void *)(v4 + 80) = v18;
        v37[v1] = v4 + 80;
        if (!*(void *)v18) {
          goto LABEL_93;
        }
        unint64_t v39 = *(void *)(*(void *)v18 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v39 >= v15) {
            v39 %= v15;
          }
        }
        else
        {
          v39 &= v15 - 1;
        }
        unint64_t v38 = (void *)(*v5 + 8 * v39);
      }
      *unint64_t v38 = v18;
LABEL_93:
      ++*(void *)(v4 + 88);
LABEL_94:
      *((_DWORD *)v18 + 6) = v41;
      strcpy(v18 + 28, v42);
      *(_OWORD *)(v18 + 40) = v43;
      if (v12) {
        CFRelease(v12);
      }
      goto LABEL_9;
    }
    BOOL v22 = 1;
    if (v15 >= 3) {
      BOOL v22 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v15);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = *(void *)(v4 + 72);
    }
    if (*(void *)&prime > v15) {
      goto LABEL_50;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 88) / *(float *)(v4 + 96));
      if (v15 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(v4 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_50:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v26 = operator new(8 * *(void *)&prime);
          long long v27 = (void *)*v5;
          *int v5 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(v4 + 72) = prime;
          do
            *(void *)(*v5 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = *(void **)(v4 + 80);
          if (v29)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*v5 + 8 * v30) = v4 + 80;
            float v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*v5 + 8 * v36))
                  {
                    *(void *)(*v5 + 8 * v36) = v29;
                    goto LABEL_75;
                  }
                  *unint64_t v29 = *v35;
                  *float v35 = **(void **)(*v5 + 8 * v36);
                  **(void **)(*v5 + 8 * v36) = v35;
                  float v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_75:
                unint64_t v29 = v35;
                float v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_79;
        }
        __int16 v40 = (void *)*v5;
        *int v5 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v15 = 0;
        *(void *)(v4 + 72) = 0;
      }
    }
LABEL_79:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v15 <= v3) {
        unint64_t v1 = v3 % v15;
      }
      else {
        unint64_t v1 = v3;
      }
    }
    else
    {
      unint64_t v1 = (v15 - 1) & v3;
    }
    goto LABEL_84;
  }
}

__n128 __copy_helper_block_a8_48c54_ZTSN2re18SharedClockManager23TimeSyncPeerInformationE(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  strcpy(&a1[3].n128_i8[4], &a2[3].n128_i8[4]);
  __n128 result = a2[4];
  a1[4] = result;
  return result;
}

void ___ZN12_GLOBAL__N_114SharedClockLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.re", "SharedClock");
  unint64_t v1 = (void *)qword_26AF9F330;
  qword_26AF9F330 = (uint64_t)v0;
}

id re::internal::defaultRetain<re::SharedClockService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::SharedClockService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t *re::foundationTimingLogObjects(re *this)
{
  {
    re::foundationTimingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Foundation.Timing");
  }
  return &re::foundationTimingLogObjects(void)::logObjects;
}

void *re::allocInfo_SimulationClock(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_498))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F3C0, "SimulationClock");
    __cxa_guard_release(&_MergedGlobals_498);
  }
  return &unk_26AF9F3C0;
}

void re::initInfo_SimulationClock(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4256CCBB645C544ELL;
  v5[1] = "SimulationClock";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_SimulationClock(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_SimulationClock(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SimulationClock", (uint64_t (*)(re::internal *))re::allocInfo_SimulationClock, (re::IntrospectionBase *(*)(void))re::initInfo_SimulationClock, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SimulationClock>, this);
}

_anonymous_namespace_ *re::Scheduler::configure(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v88 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)a1;
  if (*(void *)a1
        *(void *)v3))
  {
    re::FixedArray<re::StringID>::deinit((void *)v3 + 1);
    re::FixedArray<re::StringID>::deinit((void *)v3 + 4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3 + 56);
    *((void *)v3 + 15) = 0;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3 + 128);
    *((void *)v3 + 24) = 0;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3 + 200);
    *((void *)v3 + 33) = 0;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3 + 272);
    *((void *)v3 + 42) = 0;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v3 + 344);
    *((void *)v3 + 51) = 0;
    re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((void *)v3 + 52);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 55);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 58);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 61);
    re::FixedArray<re::Function<void ()(float)>>::deinit((void *)v3 + 64);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 67);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 70);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 73);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 76);
    re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((void *)v3 + 79);
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v3 + 82);
    re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((void *)v3 + 85);
    re::DynamicArray<unsigned long>::deinit((uint64_t)v3 + 704);
    *((void *)v3 + 93) = 0;
    *((int32x2_t *)v3 + 94) = vdup_n_s32(0x7F7FFFFFu);
    re::Scheduler::ExecutionContext::deinit((_anonymous_namespace_ *)((char *)v3 + 760));
  }
  *(void *)unint64_t v3 = v4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F440, memory_order_acquire) & 1) == 0) {
    goto LABEL_126;
  }
  while (1)
  {
    v76 = *(uint64_t **)(a2 + 32);
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 <= 1) {
      unint64_t v6 = 1;
    }
    else {
      unint64_t v6 = *(void *)(a2 + 16);
    }
    unint64_t v7 = *(void *)(a2 + 72);
    a2 = *(void *)(a2 + 56);
    long long v83 = 0uLL;
    *(void *)&long long v84 = 0;
    re::FixedArray<re::StringID>::init<>(&v83, v4, v6);
    re::FixedArray<float>::operator=((uint64_t *)v3 + 1, (uint64_t *)&v83);
    re::FixedArray<re::StringID>::deinit(&v83);
    re::FixedArray<re::StringID>::init<>((void *)v3 + 4, v4, a2);
    *((void *)v3 + 7) = v4;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v3 + 7, 0);
    *((_DWORD *)v3 + 18) += 2;
    if ((a2 & 0x3F) != 0) {
      unint64_t v8 = (a2 >> 6) + 1;
    }
    else {
      unint64_t v8 = a2 >> 6;
    }
    *((void *)v3 + 15) = a2;
    *(void *)&long long v83 = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)((char *)v3 + 56), v8, &v83);
    *((void *)v3 + 16) = v4;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v3 + 16, 0);
    *((_DWORD *)v3 + 36) += 2;
    *((void *)v3 + 24) = a2;
    *(void *)&long long v83 = 0;
    uint64_t v75 = (uint64_t)v3 + 128;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)((char *)v3 + 128), v8, &v83);
    *((void *)v3 + 25) = v4;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v3 + 25, 0);
    *((_DWORD *)v3 + 54) += 2;
    *((void *)v3 + 33) = a2;
    *(void *)&long long v83 = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)((char *)v3 + 200), v8, &v83);
    *((void *)v3 + 34) = v4;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v3 + 34, 0);
    *((_DWORD *)v3 + 72) += 2;
    *((void *)v3 + 42) = a2;
    *(void *)&long long v83 = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)((char *)v3 + 272), v8, &v83);
    *((void *)v3 + 43) = v4;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v3 + 43, 0);
    *((_DWORD *)v3 + 90) += 2;
    *((void *)v3 + 51) = a2;
    *(void *)&long long v83 = 0;
    uint64_t v74 = (uint64_t)v3 + 344;
    unint64_t v78 = v8;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)((char *)v3 + 344), v8, &v83);
    re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>((uint64_t)v3 + 416, v4, v6);
    *((void *)v3 + 55) = v4;
    *((void *)v3 + 56) = a2;
    if (!a2) {
      goto LABEL_22;
    }
    char v9 = (unsigned char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2, 1);
    *((void *)v3 + 57) = v9;
    if (!v9)
    {
LABEL_122:
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_123:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_124:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_125;
    }
    BOOL v11 = v9;
    unint64_t v12 = a2 - 1;
    if (a2 != 1)
    {
      memset(v9, 1, a2 - 1);
      v11 += v12;
    }
    unsigned char *v11 = 1;
    *((void *)v3 + 58) = v4;
    *((void *)v3 + 59) = a2;
    uint64_t v13 = (unsigned char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2, 1);
    *((void *)v3 + 60) = v13;
    if (!v13) {
      goto LABEL_123;
    }
    unint64_t v15 = v13;
    if (a2 != 1)
    {
      memset(v13, 1, a2 - 1);
      v15 += v12;
    }
    *unint64_t v15 = 1;
    *((void *)v3 + 61) = v4;
    *((void *)v3 + 62) = a2;
    uint8x8_t v16 = (unsigned char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v4 + 32))(v4, a2, 1);
    *((void *)v3 + 63) = v16;
    if (!v16) {
      goto LABEL_124;
    }
    __int16 v18 = v16;
    if (a2 == 1)
    {
      *uint8x8_t v16 = 0;
      *((void *)v3 + 64) = v4;
      *((void *)v3 + 65) = 1;
    }
    else
    {
      bzero(v16, a2 - 1);
      v18[v12] = 0;
      *((void *)v3 + 64) = v4;
      *((void *)v3 + 65) = a2;
      if (a2 > 0x666666666666666)
      {
        re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a2);
        _os_crash();
        __break(1u);
LABEL_22:
        *((void *)v3 + 58) = v4;
        *((void *)v3 + 59) = 0;
        *((void *)v3 + 61) = v4;
        *((void *)v3 + 62) = 0;
        *((void *)v3 + 64) = v4;
        *((void *)v3 + 65) = 0;
        goto LABEL_28;
      }
    }
    float v20 = (uint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(void *)v4 + 32))(v4, 40 * a2, 8);
    *((void *)v3 + 66) = v20;
    if (v20) {
      break;
    }
LABEL_125:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_126:
    if (__cxa_guard_acquire(&qword_26AF9F440))
    {
      qword_26AF9F450 = 0x32549179C460AFB4;
      unk_26AF9F458 = "DefaultPhase";
      __cxa_guard_release(&qword_26AF9F440);
    }
  }
  BOOL v22 = v20;
  if (a2 != 1)
  {
    do
    {
      v22[4] = 0;
      *(_OWORD *)BOOL v22 = 0u;
      *((_OWORD *)v22 + 1) = 0u;
      float v20 = re::globalAllocators((re *)v20);
      v22[3] = v20[2];
      v22[4] = 0;
      v22 += 5;
      --v12;
    }
    while (v12);
  }
  v22[4] = 0;
  *(_OWORD *)BOOL v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[3] = re::globalAllocators((re *)v20)[2];
  v22[4] = 0;
LABEL_28:
  unint64_t v72 = v7;
  re::FixedArray<int>::init<>((uint64_t *)v3 + 67, v4, a2);
  re::FixedArray<double>::init<>((uint64_t *)v3 + 70, v4, a2);
  re::FixedArray<unsigned long>::init<>((uint64_t *)v3 + 73, v4, a2);
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>((uint64_t)v3 + 632, v4, a2);
  re::FixedArray<double>::init<>((uint64_t *)v3 + 82, v4, a2);
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>((uint64_t)v3 + 680, v4, v6);
  *((void *)v3 + 88) = v4;
  unint64_t v23 = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v3 + 88, 0);
  ++*((_DWORD *)v3 + 182);
  *((void *)v3 + 93) = 0;
  *((int32x2_t *)v3 + 94) = vdup_n_s32(0x7F7FFFFFu);
  *(void *)&long long v85 = 0;
  *((void *)&v83 + 1) = 0;
  *(void *)&long long v84 = 0;
  DWORD2(v84) = 0;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v83, v6);
  ++DWORD2(v84);
  *(void *)v80 = 0;
  do
  {
    re::DynamicArray<unsigned long>::add(&v83, v80);
    ++*(void *)v80;
  }
  while (*(void *)v80 < v6);
  if (v5) {
    unint64_t v24 = v76;
  }
  else {
    unint64_t v24 = &qword_26AF9F450;
  }
  v79[0] = (const void *)v85;
  v79[1] = (const void *)v84;
  memset(v80, 0, 24);
  re::FixedArray<unsigned long>::init<>((uint64_t *)v80, v4, v84);
  re::FixedArray<unsigned long>::copy(v80, v79);
  re::FixedArray<unsigned long>::operator=((uint64_t *)v3 + 76, (uint64_t *)v80);
  if (*(void *)v80 && *(void *)&v80[8]) {
    (*(void (**)(void))(**(void **)v80 + 40))();
  }
  if ((void)v83 && (void)v85) {
    (*(void (**)(void))(*(void *)v83 + 40))();
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 32;
  unint64_t v77 = v6;
  do
  {
    unint64_t v28 = *((void *)v3 + 2);
    if (v28 <= v26)
    {
LABEL_109:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v26;
      __int16 v81 = 2048;
      unint64_t v82 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_110:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v26;
      __int16 v81 = 2048;
      unint64_t v82 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_111:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v26;
      __int16 v81 = 2048;
      unint64_t v82 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_112:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v26;
      __int16 v81 = 2048;
      unint64_t v82 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_113:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v26;
      __int16 v81 = 2048;
      unint64_t v82 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_114:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_117:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_118:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_119:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_120:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_121:
      v79[0] = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      unint64_t v3 = (_anonymous_namespace_ *)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 468;
      *(_WORD *)&v80[18] = 2048;
      *(void *)&v80[20] = v28;
      __int16 v81 = 2048;
      unint64_t v82 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_122;
    }
    re::StringID::operator=((unint64_t *)(*((void *)v3 + 3) + v25 * 8), &v24[v25]);
    unint64_t v28 = *((void *)v3 + 53);
    if (v28 <= v26) {
      goto LABEL_110;
    }
    uint64_t v29 = *((void *)v3 + 54);
    *(void *)(v29 + v27 - 32) = v4;
    uint64_t v30 = v29 + v27 - 32;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v30, 0);
    *(_DWORD *)(v30 + 16) += 2;
    *(void *)(v30 + 64) = 0;
    unint64_t v28 = *((void *)v3 + 53);
    if (v28 <= v26) {
      goto LABEL_111;
    }
    uint64_t v31 = *((void *)v3 + 54);
    unint64_t v32 = *(void *)(v31 + v27 + 32);
    *(void *)(v31 + v27 + 32) = a2;
    *(void *)&long long v83 = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)(v31 + v27 - 32), v78, &v83);
    if (a2 && v32 > a2)
    {
      uint64_t v33 = *(void *)(v31 + v27 + 32) & 0x3FLL;
      if (v33)
      {
        BOOL v34 = v33 == 63;
        uint64_t v35 = -1 << v33;
        if (v34) {
          uint64_t v36 = 63;
        }
        else {
          uint64_t v36 = ~v35;
        }
      }
      else
      {
        uint64_t v36 = 63;
      }
      if (*(unsigned char *)(v31 + v27 - 16)) {
        uint64_t v37 = v31 + v27 - 8;
      }
      else {
        uint64_t v37 = *(void *)(v31 + v27);
      }
      uint64_t v38 = v37 + 8 * *(void *)(v31 + v27 - 24);
      *(void *)(v38 - 8) &= v36;
    }
    unint64_t v28 = *((void *)v3 + 86);
    if (v28 <= v26) {
      goto LABEL_112;
    }
    uint64_t v39 = *((void *)v3 + 87);
    *(void *)(v39 + v27 - 32) = v4;
    uint64_t v40 = v39 + v27 - 32;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v40, 0);
    *(_DWORD *)(v40 + 16) += 2;
    *(void *)(v40 + 64) = 0;
    unint64_t v28 = *((void *)v3 + 86);
    if (v28 <= v26) {
      goto LABEL_113;
    }
    uint64_t v41 = *((void *)v3 + 87);
    unint64_t v42 = *(void *)(v41 + v27 + 32);
    *(void *)(v41 + v27 + 32) = a2;
    *(void *)&long long v83 = 0;
    __n128 result = re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)(v41 + v27 - 32), v78, &v83);
    if (a2 && v42 > a2)
    {
      uint64_t v44 = *(void *)(v41 + v27 + 32) & 0x3FLL;
      if (v44)
      {
        BOOL v34 = v44 == 63;
        uint64_t v45 = -1 << v44;
        if (v34) {
          uint64_t v46 = 63;
        }
        else {
          uint64_t v46 = ~v45;
        }
      }
      else
      {
        uint64_t v46 = 63;
      }
      if (*(unsigned char *)(v41 + v27 - 16)) {
        uint64_t v47 = v41 + v27 - 8;
      }
      else {
        uint64_t v47 = *(void *)(v41 + v27);
      }
      uint64_t v48 = v47 + 8 * *(void *)(v41 + v27 - 24);
      *(void *)(v48 - 8) &= v46;
    }
    ++v26;
    v27 += 72;
    v25 += 2;
    unint64_t v49 = v77;
  }
  while (v77 != v26);
  if (a2)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    unint64_t v28 = 0;
    long long v52 = (unint64_t *)(v72 + 80);
    uint64_t v53 = 32;
    unint64_t v73 = v4;
    while (1)
    {
      unint64_t v26 = *((void *)v3 + 5);
      if (v26 <= v28) {
        goto LABEL_114;
      }
      re::StringID::operator=((unint64_t *)(*((void *)v3 + 6) + v50), (uint64_t *)v52 - 10);
      if (*((unsigned char *)v52 - 64)) {
        re::DynamicBitset<unsigned long long,256ul>::setBit(v75, v28);
      }
      else {
        re::DynamicBitset<unsigned long long,64ul>::clearBit(v75, v28);
      }
      if (*((unsigned char *)v52 - 56)) {
        re::DynamicBitset<unsigned long long,256ul>::setBit(v74, v28);
      }
      else {
        re::DynamicBitset<unsigned long long,64ul>::clearBit(v74, v28);
      }
      unint64_t v26 = *((void *)v3 + 65);
      if (v26 <= v28) {
        goto LABEL_115;
      }
      re::FunctionBase<24ul,void ()(float)>::operator=<24ul>(*((void *)v3 + 66) + v51, (uint64_t)(v52 - 5));
      unint64_t v26 = *((void *)v3 + 68);
      if (v26 <= v28) {
        goto LABEL_116;
      }
      *(_DWORD *)(*((void *)v3 + 69) + 4 * v28) = *((_DWORD *)v52 - 12);
      unint64_t v26 = *((void *)v3 + 59);
      if (v26 <= v28) {
        goto LABEL_117;
      }
      *(unsigned char *)(*((void *)v3 + 60) + v28) = *((unsigned char *)v52 - 51);
      unint64_t v26 = *((void *)v3 + 62);
      if (v26 <= v28) {
        goto LABEL_118;
      }
      *(unsigned char *)(*((void *)v3 + 63) + v28) = *((unsigned char *)v52 - 44);
      unint64_t v26 = *((void *)v3 + 74);
      if (v26 <= v28) {
        goto LABEL_119;
      }
      unint64_t v54 = *v52;
      if (*v52 >= v49) {
        unint64_t v54 = 0;
      }
      *(void *)(*((void *)v3 + 75) + 8 * v28) = v54;
      unint64_t v26 = *((void *)v3 + 80);
      if (v26 <= v28) {
        goto LABEL_120;
      }
      uint64_t v55 = *((void *)v3 + 81);
      *(void *)(v55 + v53 - 32) = v4;
      uint64_t v56 = v55 + v53 - 32;
      re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v56, 0);
      *(_DWORD *)(v56 + 16) += 2;
      *(void *)(v56 + 64) = 0;
      unint64_t v26 = *((void *)v3 + 80);
      if (v26 <= v28) {
        goto LABEL_121;
      }
      uint64_t v57 = *((void *)v3 + 81);
      unint64_t v58 = *(void *)(v57 + v53 + 32);
      *(void *)(v57 + v53 + 32) = a2;
      *(void *)&long long v83 = 0;
      re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)(v57 + v53 - 32), v78, &v83);
      if (v58 > a2)
      {
        uint64_t v59 = *(void *)(v57 + v53 + 32) & 0x3FLL;
        if (v59)
        {
          BOOL v34 = v59 == 63;
          uint64_t v60 = -1 << v59;
          if (v34) {
            uint64_t v61 = 63;
          }
          else {
            uint64_t v61 = ~v60;
          }
        }
        else
        {
          uint64_t v61 = 63;
        }
        if (*(unsigned char *)(v57 + v53 - 16)) {
          uint64_t v62 = v57 + v53 - 8;
        }
        else {
          uint64_t v62 = *(void *)(v57 + v53);
        }
        uint64_t v63 = v62 + 8 * *(void *)(v57 + v53 - 24);
        *(void *)(v63 - 8) &= v61;
      }
      if (*((unsigned char *)v52 - 63)) {
        re::Scheduler::enqueueTaskWithDeadline(v3, v28, *((float *)v52 - 15));
      }
      ++v28;
      v53 += 72;
      v52 += 16;
      v51 += 40;
      v50 += 16;
      unint64_t v49 = v77;
      unint64_t v4 = v73;
      if (a2 == v28)
      {
        unint64_t v4 = 0;
        unint64_t v26 = v72;
        while (1)
        {
          unint64_t v64 = v72 + (v4 << 7);
          uint64_t v65 = *(void *)(v64 + 104);
          if (v65) {
            break;
          }
LABEL_104:
          if (++v4 == a2)
          {
            unint64_t v69 = 0;
            v70 = (unsigned __int8 *)(v72 + 28);
            do
            {
              int v71 = *v70;
              v70 += 128;
              __n128 result = re::Scheduler::updateTaskSchedule(v3, v69++, v71);
            }
            while (a2 != v69);
            return result;
          }
        }
        v66 = *(unint64_t **)(v64 + 120);
        unint64_t v28 = 8 * v65;
        while (1)
        {
          unint64_t v67 = *v66;
          unint64_t v68 = *((void *)v3 + 80);
          if (v68 <= *v66) {
            break;
          }
          re::DynamicBitset<unsigned long long,256ul>::setBit(*((void *)v3 + 81) + 72 * v67, v4);
          ++v66;
          v28 -= 8;
          if (!v28) {
            goto LABEL_104;
          }
        }
        v79[0] = 0;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v83 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v80 = 136315906;
        *(void *)&v80[4] = "operator[]";
        *(_WORD *)&v80[12] = 1024;
        *(_DWORD *)&v80[14] = 468;
        *(_WORD *)&v80[18] = 2048;
        *(void *)&v80[20] = v67;
        __int16 v81 = 2048;
        unint64_t v82 = v68;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_109;
      }
    }
  }
  return result;
}

uint64_t re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x38E38E38E38E38FLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 72 * a3, 8);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    __n128 result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 1;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 64) = 0;
      result += 72;
      --v6;
    }
    while (v6);
  }
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 64) = 0;
  return result;
}

uint64_t re::FixedArray<re::StringID>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 16 * a2;
}

void re::Scheduler::enqueueTaskWithDeadline(re::Scheduler *this, unint64_t a2, float a3)
{
  unint64_t FirstBitSet = a2;
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (*((void *)this + 5) <= a2)
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Invalid task handle: %zu", "task < m_taskNames.size()", "enqueueTaskWithDeadline", 300, a2);
    _os_crash();
    __break(1u);
    goto LABEL_58;
  }
  unint64_t v8 = this;
  uint64_t v4 = &v48;
  if (*((float *)this + 210) >= a3)
  {
    unint64_t v3 = *((void *)this + 74);
    if (v3 <= a2)
    {
LABEL_60:
      uint64_t v40 = 0;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v45 = 136315906;
      *(void *)&v45[4] = "operator[]";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 468;
      *(_WORD *)&v45[18] = 2048;
      *(void *)uint64_t v46 = FirstBitSet;
      *(_WORD *)&v46[8] = 2048;
      *(void *)&v46[10] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_61;
    }
    unint64_t v9 = *(void *)(*((void *)this + 75) + 8 * a2);
    this = (re::Scheduler *)re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 128, a2);
    if (!this) {
      goto LABEL_18;
    }
    unint64_t v10 = *((void *)v8 + 106);
    if (v9 <= v10 && (v9 != v10 || *((void *)v8 + 107) >= FirstBitSet)) {
      goto LABEL_18;
    }
    *(void *)uint64_t v45 = 0;
    *(void *)&v45[8] = 0;
    *(_DWORD *)&v45[16] = 1;
    *(void *)&v46[4] = 0;
    *(void *)&v46[12] = 0;
    unint64_t v11 = *((void *)v8 + 5);
    if ((v11 & 0x3F) != 0) {
      unint64_t v12 = (v11 >> 6) + 1;
    }
    else {
      unint64_t v12 = v11 >> 6;
    }
    uint64_t v47 = *((void *)v8 + 5);
    *(void *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)v45, v12, buf);
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v45, FirstBitSet);
    re::Scheduler::resolveEnabledTaskSetDependencies((uint64_t)&v40, (uint64_t)v8, (uint64_t *)v45);
    uint64_t v13 = v43;
    if ((v42 & 1) == 0) {
      uint64_t v13 = (unint64_t *)v43[1];
    }
    uint64_t v14 = v41;
    if ((v41 & 0x3FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_49;
    }
    uint64_t v15 = 0;
    while (1)
    {
      unint64_t v17 = *v13++;
      unint64_t v16 = v17;
      if (v17) {
        break;
      }
      v15 -= 64;
      if (!--v14) {
        goto LABEL_49;
      }
    }
    unint64_t v35 = __clz(__rbit64(v16));
    if (v35 + 1 == v15)
    {
LABEL_49:
      if (v40 && (v42 & 1) == 0) {
        (*(void (**)(void))(*(void *)v40 + 40))();
      }
      if (*(void *)v45)
      {
        if ((v45[16] & 1) == 0) {
          (*(void (**)(void))(**(void **)v45 + 40))();
        }
      }
      return;
    }
    unint64_t FirstBitSet = v35 - v15;
    while (1)
    {
      unint64_t v3 = *((void *)v8 + 74);
      if (v3 <= FirstBitSet) {
        break;
      }
      unint64_t v3 = *(void *)(*((void *)v8 + 75) + 8 * FirstBitSet);
      unint64_t v5 = *((void *)v8 + 96);
      if (v5 <= v3) {
        goto LABEL_59;
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(*((void *)v8 + 97) + 72 * v3, FirstBitSet);
      unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v40, FirstBitSet + 1);
      if (FirstBitSet == -1) {
        goto LABEL_49;
      }
    }
LABEL_58:
    uint64_t v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v48 = 136315906;
    *(void *)(v4 + 1) = "operator[]";
    __int16 v49 = 1024;
    *(int *)((char *)v4 + 14) = 468;
    __int16 v50 = 2048;
    *(void *)(v4 + 5) = FirstBitSet;
    __int16 v51 = 2048;
    *(void *)((char *)v4 + 30) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    uint64_t v44 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v48 = 136315906;
    *(void *)(v4 + 1) = "operator[]";
    __int16 v49 = 1024;
    *(int *)((char *)v4 + 14) = 468;
    __int16 v50 = 2048;
    *(void *)(v4 + 5) = v3;
    __int16 v51 = 2048;
    *(void *)((char *)v4 + 30) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_60;
  }
LABEL_18:
  uint64_t v18 = *((void *)v8 + 90);
  if (v18)
  {
    uint64_t v19 = (float *)(*((void *)v8 + 92) + 8);
    uint64_t v20 = 16 * v18;
    while (*((void *)v19 - 1) != FirstBitSet)
    {
      v19 += 4;
      v20 -= 16;
      if (!v20) {
        goto LABEL_22;
      }
    }
    if (!isDebugLoggingEnabled) {
      goto LABEL_37;
    }
    if (*v19 <= a3) {
      goto LABEL_37;
    }
    uint64_t v31 = *re::foundationTimingLogObjects(isDebugLoggingEnabled);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_37;
    }
    unint64_t v37 = *((void *)v8 + 5);
    if (v37 > FirstBitSet)
    {
      uint64_t v38 = *(void *)(*((void *)v8 + 6) + 16 * FirstBitSet + 8);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      _os_log_debug_impl(&dword_233120000, v31, OS_LOG_TYPE_DEBUG, "Rescheduling task [%s] with deadline: %f", buf, 0x16u);
LABEL_37:
      float v32 = fminf(*v19, a3);
      *uint64_t v19 = v32;
      float v33 = fminf(*((float *)v8 + 188), v32);
LABEL_42:
      *((float *)v8 + 188) = v33;
      return;
    }
LABEL_61:
    uint64_t v40 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    memset(buf, 0, sizeof(buf));
    unint64_t v39 = v37;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 468;
    *(_WORD *)&v45[18] = 2048;
    *(void *)uint64_t v46 = FirstBitSet;
    *(_WORD *)&v46[8] = 2048;
    *(void *)&v46[10] = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_22:
  if (v21)
  {
    BOOL v22 = *re::foundationTimingLogObjects(v21);
    uint64_t v21 = (re *)os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v21)
    {
      uint64_t v36 = *(void *)(re::FixedArray<re::StringID>::operator[]((uint64_t)v8 + 32, FirstBitSet) + 8);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      _os_log_debug_impl(&dword_233120000, v22, OS_LOG_TYPE_DEBUG, "Scheduling task [%s] with deadline: %f", buf, 0x16u);
    }
  }
  unint64_t v23 = *((void *)v8 + 90);
  unint64_t v24 = *((void *)v8 + 89);
  if (v23 >= v24)
  {
    unint64_t v25 = v23 + 1;
    if (v24 < v23 + 1)
    {
      if (*((void *)v8 + 88))
      {
        uint64_t v26 = 2 * v24;
        BOOL v27 = v24 == 0;
        unint64_t v28 = 8;
        if (!v27) {
          unint64_t v28 = v26;
        }
        if (v28 <= v25) {
          unint64_t v29 = v25;
        }
        else {
          unint64_t v29 = v28;
        }
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v8 + 88, v29);
      }
      else
      {
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v8 + 88, v25);
        ++*((_DWORD *)v8 + 182);
      }
    }
    unint64_t v23 = *((void *)v8 + 90);
  }
  uint64_t v34 = *((void *)v8 + 92) + 16 * v23;
  *(void *)uint64_t v34 = FirstBitSet;
  *(float *)(v34 + 8) = a3;
  ++*((void *)v8 + 90);
  ++*((_DWORD *)v8 + 182);
  if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v8 + 128, FirstBitSet))
  {
    float v33 = fminf(*((float *)v8 + 188), a3);
    goto LABEL_42;
  }
}

uint64_t re::Scheduler::ExecutionContext::deinit(re::Scheduler::ExecutionContext *this)
{
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit(this);
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((void *)this + 3);
  uint64_t result = re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 6);
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 84) = 0;
  return result;
}

void re::Scheduler::setEnabled(re::Scheduler *this, unint64_t a2, int a3)
{
  char v3 = a3;
  unint64_t v6 = (char *)this + 128;
  if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 128, a2) != a3)
  {
    if (v3)
    {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v6, a2);
      re::Scheduler::recalculateNextScheduledDelta(this);
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, a2)) {
        re::Scheduler::recalculateNextUpdateIntervalUpdate(this, a2);
      }
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 344, a2))
      {
        re::Scheduler::resetTaskCurrentTime(this, a2);
      }
    }
    else
    {
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v6, a2);
      re::Scheduler::recalculateNextScheduledDelta(this);
    }
  }
}

uint64_t re::Scheduler::recalculateNextScheduledDelta(re::Scheduler *this)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)&v24, (uint64_t *)this + 34);
  v27[5] = *((void *)this + 42);
  re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)&v24, (uint64_t)this + 128);
  uint64_t v2 = v27;
  if ((v26 & 1) == 0) {
    uint64_t v2 = (uint64_t *)v27[1];
  }
  if (v25 >= 0xB)
  {
    uint64_t v3 = 8 * v25;
    while (!*v2)
    {
      ++v2;
      v3 -= 8;
      if (!v3) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
  if (v25)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v25;
    do
    {
      uint64_t v6 = *v2++;
      v4 |= v6;
      v5 -= 8;
    }
    while (v5);
    if (v4)
    {
LABEL_12:
      *((_DWORD *)this + 188) = 0;
      goto LABEL_32;
    }
  }
LABEL_13:
  *((_DWORD *)this + 188) = *((_DWORD *)this + 189);
  re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)&v20, (uint64_t *)this + 25);
  v23[5] = *((void *)this + 33);
  re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)&v20, (uint64_t)this + 128);
  unint64_t v7 = (unint64_t *)v23[1];
  if (v22) {
    unint64_t v7 = v23;
  }
  uint64_t v8 = v21;
  if ((v21 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v11 = *v7++;
      unint64_t v10 = v11;
      if (v11) {
        break;
      }
      v9 -= 64;
      if (!--v8) {
        goto LABEL_24;
      }
    }
    unint64_t v12 = __clz(__rbit64(v10));
    if (v12 + 1 != v9)
    {
      unint64_t FirstBitSet = v12 - v9;
      unint64_t v14 = *((void *)this + 71);
      do
      {
        if (v14 <= FirstBitSet)
        {
          v27[6] = 0;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v36 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v28 = 136315906;
          unint64_t v29 = "operator[]";
          __int16 v30 = 1024;
          int v31 = 468;
          __int16 v32 = 2048;
          unint64_t v33 = FirstBitSet;
          __int16 v34 = 2048;
          unint64_t v35 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        float v15 = *(double *)(*((void *)this + 72) + 8 * FirstBitSet) - *((double *)this + 93);
        *((float *)this + 188) = fminf(*((float *)this + 188), v15);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v20, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_24:
  uint64_t v16 = *((void *)this + 90);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (float *)(*((void *)this + 92) + 8);
    do
    {
      if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 128, *((void *)v18 - 1))) {
        *((float *)this + 188) = fminf(*((float *)this + 188), *v18);
      }
      v18 += 4;
      v17 -= 16;
    }
    while (v17);
  }
  if (v20 && (v22 & 1) == 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
LABEL_32:
  uint64_t result = v24;
  if (v24)
  {
    if ((v26 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v24 + 40))();
    }
  }
  return result;
}

double re::Scheduler::recalculateNextUpdateIntervalUpdate(re::Scheduler *this, unint64_t a2)
{
  if (*((void *)this + 68) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  if (*((void *)this + 71) <= a2)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  double v2 = *((double *)this + 93);
  double v3 = *(float *)(*((void *)this + 69) + 4 * a2);
  double v4 = (floor(v2 / v3 + 0.001) + 1.0) * v3;
  if (v2 == 0.0) {
    double v4 = 0.0;
  }
  *(double *)(*((void *)this + 72) + 8 * a2) = v4;
  if (*((void *)this + 83) <= a2)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double result = *((double *)this + 93);
  *(double *)(*((void *)this + 84) + 8 * a2) = result;
  return result;
}

double re::Scheduler::resetTaskCurrentTime(re::Scheduler *this, unint64_t a2)
{
  if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, a2))
  {
    return re::Scheduler::recalculateNextUpdateIntervalUpdate(this, a2);
  }
  else
  {
    if (*((void *)this + 83) <= a2)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    double result = *((double *)this + 93);
    *(double *)(*((void *)this + 84) + 8 * a2) = result;
  }
  return result;
}

uint64_t re::Scheduler::setEnabled(uint64_t result, uint64_t a2, int a3)
{
  double v4 = (re::Scheduler *)result;
  uint64_t v5 = result + 128;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(result + 136);
  if (v6 >= v7) {
    unint64_t v8 = *(void *)(result + 136);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  if (!a3)
  {
    if (v8)
    {
      uint64_t v16 = 0;
      uint64_t v17 = a2 + 24;
      if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
        uint64_t v17 = *(void *)(a2 + 32);
      }
      BOOL v18 = 1;
      do
      {
        uint64_t v19 = result + 152;
        if ((*(_DWORD *)(result + 144) & 1) == 0) {
          uint64_t v19 = *(void *)(result + 160);
        }
        if ((*(void *)(v19 + 8 * v16) & *(void *)(v17 + 8 * v16)) != 0) {
          break;
        }
        BOOL v18 = ++v16 < v8;
      }
      while (v8 != v16);
      if (v18)
      {
        re::DynamicBitset<unsigned long long,256ul>::subtractBitSet(result + 128, a2);
        return re::Scheduler::recalculateNextScheduledDelta(v4);
      }
    }
    return result;
  }
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a2 + 32);
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v10 = a2 + 24;
    }
    LOBYTE(v11) = 1;
    while (1)
    {
      uint64_t v12 = result + 152;
      if ((*(_DWORD *)(result + 144) & 1) == 0) {
        uint64_t v12 = *(void *)(result + 160);
      }
      uint64_t v13 = *(void *)(v12 + 8 * v9);
      uint64_t v14 = *(void *)(v10 + 8 * v9);
      if ((v14 & ~v13) != 0) {
        goto LABEL_43;
      }
      int v11 = (v13 == v14) & v11;
      if (v8 == ++v9)
      {
        if (v7 < v6)
        {
          char v15 = v11 ^ 1;
          goto LABEL_29;
        }
        if (v11) {
          goto LABEL_43;
        }
        return result;
      }
    }
  }
  if (v7 >= v6) {
    goto LABEL_43;
  }
  char v15 = 0;
LABEL_29:
  uint64_t v20 = a2 + 24;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0) {
    uint64_t v20 = *(void *)(a2 + 32);
  }
  if (*(void *)(v20 + 8 * v7)) {
    goto LABEL_43;
  }
  uint64_t v21 = v20 + 8;
  while (v6 - 1 != v7)
  {
    if (*(void *)(v21 + 8 * v7++)) {
      goto LABEL_39;
    }
  }
  unint64_t v7 = *(void *)(a2 + 8);
LABEL_39:
  char v23 = v7 >= v6 ? v15 : 0;
  if ((v23 & 1) == 0)
  {
LABEL_43:
    re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)&v42, (uint64_t *)(result + 200));
    uint64_t v46 = *((void *)v4 + 33);
    re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)&v42, a2);
    re::DynamicBitset<unsigned long long,256ul>::subtractBitSet((uint64_t)&v42, v5);
    re::DynamicBitset<unsigned long long,256ul>::orWithBitSet(v5, a2);
    re::Scheduler::recalculateNextScheduledDelta(v4);
    uint64_t v24 = v45;
    if ((v44 & 1) == 0) {
      uint64_t v24 = (unint64_t *)v45[1];
    }
    uint64_t v25 = v43;
    if ((v43 & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v26 = 0;
      while (1)
      {
        unint64_t v28 = *v24++;
        unint64_t v27 = v28;
        if (v28) {
          break;
        }
        v26 -= 64;
        if (!--v25) {
          goto LABEL_53;
        }
      }
      unint64_t v29 = __clz(__rbit64(v27));
      if (v29 + 1 != v26)
      {
        unint64_t FirstBitSet = v29 - v26;
        do
        {
          re::Scheduler::recalculateNextUpdateIntervalUpdate(v4, FirstBitSet);
          unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v42, FirstBitSet + 1);
        }
        while (FirstBitSet != -1);
      }
    }
LABEL_53:
    re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)&v38, &v42);
    v41[5] = v46;
    re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)&v38, (uint64_t)v4 + 344);
    int v31 = v41;
    if ((v40 & 1) == 0) {
      int v31 = (unint64_t *)v41[1];
    }
    uint64_t v32 = v39;
    if ((v39 & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v33 = 0;
      while (1)
      {
        unint64_t v35 = *v31++;
        unint64_t v34 = v35;
        if (v35) {
          break;
        }
        v33 -= 64;
        if (!--v32) {
          goto LABEL_63;
        }
      }
      unint64_t v36 = __clz(__rbit64(v34));
      if (v36 + 1 != v33)
      {
        unint64_t v37 = v36 - v33;
        do
        {
          re::Scheduler::resetTaskCurrentTime(v4, v37);
          unint64_t v37 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v38, v37 + 1);
        }
        while (v37 != -1);
      }
    }
LABEL_63:
    if (v38 && (v40 & 1) == 0) {
      (*(void (**)(void))(*(void *)v38 + 40))();
    }
    double result = v42;
    if (v42)
    {
      if ((v44 & 1) == 0) {
        return (*(uint64_t (**)(void))(*(void *)v42 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::DynamicBitset<unsigned long long,256ul>::andWithBitSet(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (v2 >= *(void *)(result + 8)) {
    unint64_t v2 = *(void *)(result + 8);
  }
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = *(void *)(a2 + 32);
      if (*(unsigned char *)(a2 + 16)) {
        uint64_t v4 = a2 + 24;
      }
      uint64_t v5 = result + 24;
      if ((*(unsigned char *)(result + 16) & 1) == 0) {
        uint64_t v5 = *(void *)(result + 32);
      }
      *(void *)(v5 + 8 * i) &= *(void *)(v4 + 8 * i);
    }
  }
  return result;
}

uint64_t re::DynamicBitset<unsigned long long,256ul>::subtractBitSet(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (v2 >= *(void *)(result + 8)) {
    unint64_t v2 = *(void *)(result + 8);
  }
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      int v4 = *(_DWORD *)(result + 16);
      uint64_t v5 = result + 24;
      if ((v4 & 1) == 0) {
        uint64_t v5 = *(void *)(result + 32);
      }
      if (*(unsigned char *)(a2 + 16)) {
        uint64_t v6 = a2 + 24;
      }
      else {
        uint64_t v6 = *(void *)(a2 + 32);
      }
      uint64_t v7 = result + 24;
      if ((v4 & 1) == 0) {
        uint64_t v7 = *(void *)(result + 32);
      }
      *(void *)(v7 + 8 * i) ^= *(void *)(v6 + 8 * i) & *(void *)(v5 + 8 * i);
    }
  }
  return result;
}

re::Scheduler *re::Scheduler::updateTaskSchedule(re::Scheduler *this, unint64_t a2, int a3)
{
  unint64_t v4 = *((void *)this + 56);
  if (v4 <= a2) {
    goto LABEL_41;
  }
  uint64_t v6 = this;
  if (*(unsigned __int8 *)(*((void *)this + 57) + a2) == a3) {
    return this;
  }
  int v7 = 0;
  char v8 = 0;
  switch(*(unsigned char *)(*((void *)this + 57) + a2))
  {
    case 1:
      goto LABEL_11;
    case 2:
      char v8 = 0;
      uint64_t v9 = (uint64_t)this + 200;
      int v7 = 1;
      goto LABEL_10;
    case 3:
      uint64_t v10 = (uint64_t)this + 272;
      goto LABEL_8;
    case 4:
      int v7 = 0;
      uint64_t v9 = (uint64_t)this + 56;
      goto LABEL_9;
    case 5:
      uint64_t v10 = (uint64_t)this + 200;
LABEL_8:
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v10, a2);
      uint64_t v9 = (uint64_t)v6 + 56;
      int v7 = 1;
LABEL_9:
      char v8 = 1;
LABEL_10:
      this = (re::Scheduler *)re::DynamicBitset<unsigned long long,64ul>::clearBit(v9, a2);
      unint64_t v4 = *((void *)v6 + 56);
LABEL_11:
      if (v4 <= a2) {
        goto LABEL_42;
      }
      *(unsigned char *)(*((void *)v6 + 57) + a2) = a3;
      switch(a3)
      {
        case 1:
          goto LABEL_14;
        case 2:
        case 5:
          re::Scheduler::recalculateNextUpdateIntervalUpdate(v6, a2);
          this = (re::Scheduler *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v6 + 200, a2);
          int v7 = 1;
          if (a3 == 5) {
            goto LABEL_17;
          }
LABEL_14:
          if ((v8 & 1) == 0) {
            goto LABEL_34;
          }
          goto LABEL_18;
        case 3:
          re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v6 + 272, a2);
          int v7 = 1;
          goto LABEL_17;
        case 4:
LABEL_17:
          re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v6 + 56, a2);
LABEL_18:
          uint64_t v11 = *((void *)v6 + 53);
          if (v11)
          {
            uint64_t v12 = *((void *)v6 + 54);
            uint64_t v13 = v12 + 72 * v11;
            do
            {
              int v14 = *(_DWORD *)(v12 + 16);
              if (v14) {
                char v15 = (void *)(v12 + 24);
              }
              else {
                char v15 = *(void **)(v12 + 32);
              }
              uint64_t v16 = *(void *)(v12 + 8);
              while (1)
              {
                uint64_t v17 = v12 + 24;
                if ((v14 & 1) == 0) {
                  uint64_t v17 = *(void *)(v12 + 32);
                }
                if (v15 == (void *)(v17 + 8 * v16)) {
                  break;
                }
                *v15++ = 0;
                int v14 = *(_DWORD *)(v12 + 16);
              }
              v12 += 72;
            }
            while (v12 != v13);
          }
          this = (re::Scheduler *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v6 + 56, 0);
          if (this == (re::Scheduler *)-1) {
            goto LABEL_34;
          }
          unint64_t v18 = (unint64_t)this;
          break;
        default:
          goto LABEL_44;
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected previous task schedule type.", "!\"Unreachable code\"", "updateTaskSchedule", 655);
      _os_crash();
      __break(1u);
LABEL_44:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected previous task schedule type.", "!\"Unreachable code\"", "updateTaskSchedule", 697);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233F3EDF0);
  }
  do
  {
    if (*((void *)v6 + 74) <= v18)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v19 = *(void *)(*((void *)v6 + 75) + 8 * v18);
    if (*((void *)v6 + 53) <= v19) {
      goto LABEL_40;
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(*((void *)v6 + 54) + 72 * v19, v18);
    this = (re::Scheduler *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v6 + 56, v18 + 1);
    unint64_t v18 = (unint64_t)this;
  }
  while (this != (re::Scheduler *)-1);
LABEL_34:
  if (v7)
  {
    return (re::Scheduler *)re::Scheduler::recalculateNextScheduledDelta(v6);
  }
  return this;
}

uint64_t re::Scheduler::setTaskUpdateInterval(re::Scheduler *this, unint64_t a2, float a3)
{
  if (*((void *)this + 68) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*((void *)this + 69) + 4 * a2) = a3;
  uint64_t result = re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, a2);
  if (result)
  {
    re::Scheduler::recalculateNextUpdateIntervalUpdate(this, a2);
    return re::Scheduler::recalculateNextScheduledDelta(this);
  }
  return result;
}

uint64_t re::Scheduler::resolveEnabledTaskSetDependencies(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)(re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray(a1, a3) + 64) = a3[8];
  re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)&v22, a3);
  v25[5] = a3[8];
  while (1)
  {
    unint64_t v6 = v23;
    int v7 = (v24 & 1) != 0 ? v25 : (unint64_t *)v25[1];
    if (v23 < 0xB) {
      break;
    }
    uint64_t v8 = 8 * v23;
    uint64_t v9 = v7;
    while (!*v9)
    {
      ++v9;
      v8 -= 8;
      if (!v8) {
        goto LABEL_24;
      }
    }
LABEL_14:
    if ((v23 & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v16 = *v7++;
        unint64_t v15 = v16;
        if (v16) {
          break;
        }
        v14 -= 64;
        if (!--v6) {
          goto LABEL_23;
        }
      }
      unint64_t v17 = __clz(__rbit64(v15));
      if (v17 + 1 != v14)
      {
        unint64_t FirstBitSet = v17 - v14;
        do
        {
          unint64_t v19 = *(void *)(a2 + 640);
          if (v19 <= FirstBitSet)
          {
            v25[6] = 0;
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            long long v34 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v26 = 136315906;
            unint64_t v27 = "operator[]";
            __int16 v28 = 1024;
            int v29 = 476;
            __int16 v30 = 2048;
            unint64_t v31 = FirstBitSet;
            __int16 v32 = 2048;
            unint64_t v33 = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          re::DynamicBitset<unsigned long long,256ul>::orWithBitSet((uint64_t)&v22, *(void *)(a2 + 648) + 72 * FirstBitSet);
          unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v22, FirstBitSet + 1);
        }
        while (FirstBitSet != -1);
      }
    }
LABEL_23:
    re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)&v22, a2 + 128);
    re::DynamicBitset<unsigned long long,256ul>::subtractBitSet((uint64_t)&v22, a1);
    re::DynamicBitset<unsigned long long,256ul>::orWithBitSet(a1, (uint64_t)&v22);
  }
  if (v23)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 8 * v23;
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = *v12++;
      v10 |= v13;
      v11 -= 8;
    }
    while (v11);
    if (v10) {
      goto LABEL_14;
    }
  }
LABEL_24:
  uint64_t result = v22;
  if (v22) {
    BOOL v21 = (v24 & 1) == 0;
  }
  else {
    BOOL v21 = 0;
  }
  if (v21) {
    return (*(uint64_t (**)(void))(*(void *)v22 + 40))();
  }
  return result;
}

uint64_t re::anonymous namespace'::SchedulerUtil::isDebugLoggingEnabled(re::_anonymous_namespace_::SchedulerUtil *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F448))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableSchedulerLogging", v2, v4);
    if (v4[0]) {
      char v3 = v4[1];
    }
    else {
      char v3 = 0;
    }
    _MergedGlobals_499 = v3;
    __cxa_guard_release(&qword_26AF9F448);
  }
  return _MergedGlobals_499;
}

float re::Scheduler::nextScheduledDelta(re::Scheduler *this)
{
  unint64_t v1 = *((void *)this + 106);
  unint64_t v2 = *((void *)this + 99);
  if (v1 >= v2) {
    return *((float *)this + 188);
  }
  uint64_t v3 = *((void *)this + 100);
  uint64_t v4 = v3 + 72 * v1;
  unint64_t v5 = *((void *)this + 107) + 1;
  if (v5 >= *(void *)(v4 + 64))
  {
    char v8 = 0;
  }
  else
  {
    int v6 = *(_DWORD *)(v4 + 16);
    if (v6) {
      int v7 = (int8x8_t *)(v4 + 24);
    }
    else {
      int v7 = *(int8x8_t **)(v4 + 32);
    }
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)(v4 + 8);
    uint64_t v11 = v4 + 24;
    while (1)
    {
      uint64_t v12 = v4 + 24;
      if ((v6 & 1) == 0) {
        uint64_t v12 = *(void *)(v4 + 32);
      }
      if (v7 == (int8x8_t *)(v12 + 8 * v10)) {
        break;
      }
      int8x8_t v13 = *v7++;
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      v9 += v14.u32[0];
    }
    unint64_t v15 = v5 >> 6;
    if (v5 >= 0x40)
    {
      if (v15 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v5 >> 6;
      }
      if (v10 <= v17 - 1) {
        goto LABEL_52;
      }
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      uint64_t v19 = 8 * v17;
      do
      {
        uint64_t v20 = v4 + 24;
        if ((v6 & 1) == 0) {
          uint64_t v20 = *(void *)(v4 + 32);
        }
        uint8x8_t v21 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v20 + v18));
        v21.i16[0] = vaddlv_u8(v21);
        v16 += v21.u32[0];
        v18 += 8;
      }
      while (v19 != v18);
    }
    else
    {
      uint64_t v16 = 0;
    }
    if (v10 <= v15) {
      goto LABEL_51;
    }
    if ((v6 & 1) == 0) {
      uint64_t v11 = *(void *)(v4 + 32);
    }
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)(v11 + 8 * v15) & ~(-1 << v5)));
    v22.i16[0] = vaddlv_u8(v22);
    char v8 = v9 != v22.u32[0] + v16;
  }
  unint64_t v23 = v1 + 1;
  if (v1 + 1 < v2)
  {
    do
    {
      if (v2 <= v23)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_52:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v24 = v3 + 72 * v23;
      unint64_t v25 = *(void *)(v24 + 8);
      int v26 = *(_DWORD *)(v24 + 16);
      if (v25 >= 0xB)
      {
        if (v26) {
          unint64_t v27 = (uint64_t *)(v24 + 24);
        }
        else {
          unint64_t v27 = *(uint64_t **)(v24 + 32);
        }
        uint64_t v29 = 8 * v25 - 8;
        do
        {
          uint64_t v30 = *v27++;
          LOBYTE(v25) = v30 != 0;
          if (v30) {
            BOOL v31 = 1;
          }
          else {
            BOOL v31 = v29 == 0;
          }
          v29 -= 8;
        }
        while (!v31);
        goto LABEL_46;
      }
      if (v26)
      {
        __int16 v28 = (uint64_t *)(v24 + 24);
        if (v25)
        {
LABEL_43:
          uint64_t v32 = 0;
          uint64_t v33 = 8 * v25;
          do
          {
            uint64_t v34 = *v28++;
            v32 |= v34;
            v33 -= 8;
          }
          while (v33);
          unint64_t v25 = v32 != 0;
        }
      }
      else
      {
        __int16 v28 = *(uint64_t **)(v24 + 32);
        if (v25) {
          goto LABEL_43;
        }
      }
LABEL_46:
      v8 |= v25;
    }
    while (++v23 != v2);
  }
  float result = 0.0;
  if (!v8) {
    return *((float *)this + 188);
  }
  return result;
}

void *re::Scheduler::beginPhaseExecution(re::Scheduler *this, double a2, double a3)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  double v11 = *((double *)this + 93) + a2;
  *((double *)this + 93) = v11;
  BYTE12(v101) = 0;
  uint64_t v100 = 0;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  *(void *)&long long v102 = -1;
  *((void *)&v102 + 1) = -1;
  *(double *)&long long v101 = v11;
  float v12 = a3;
  *((float *)&v101 + 2) = v12;
  int8x8_t v13 = (uint64_t *)((char *)this + 416);
  if (&v96 != (long long *)((char *)this + 416) && *v13)
  {
    re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>((uint64_t)&v96, *v13, *((void *)this + 53));
    if (*((void *)&v96 + 1) != *((void *)this + 53))
    {
LABEL_192:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
      _os_crash();
      __break(1u);
LABEL_193:
      v94[0] = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 468;
      *(_WORD *)&v104[18] = 2048;
      *(void *)v105 = FirstBitSet;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_194:
      v94[0] = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 468;
      *(_WORD *)&v104[18] = 2048;
      *(void *)v105 = FirstBitSet;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_195:
      *(void *)v104 = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v107 = 136315906;
      *(void *)&v107[4] = "operator[]";
      *(_WORD *)&v107[12] = 1024;
      *(_DWORD *)&v107[14] = 468;
      __int16 v108 = 2048;
      unint64_t v109 = FirstBitSet;
      __int16 v110 = 2048;
      *(void *)v111 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_196:
      v94[0] = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 468;
      *(_WORD *)&v104[18] = 2048;
      *(void *)v105 = FirstBitSet;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_197:
      v94[0] = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 468;
      *(_WORD *)&v104[18] = 2048;
      *(void *)v105 = FirstBitSet;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      v94[0] = 0;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v104 = 136315906;
      *(void *)&v104[4] = "operator[]";
      *(_WORD *)&v104[12] = 1024;
      *(_DWORD *)&v104[14] = 468;
      *(_WORD *)&v104[18] = 2048;
      *(void *)v105 = FirstBitSet;
      *(_WORD *)&v105[8] = 2048;
      *(void *)&v105[10] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*((void *)&v96 + 1))
    {
      unint64_t v15 = (uint64_t *)*((void *)this + 54);
      uint64_t v16 = v97;
      uint64_t v17 = 72 * *((void *)&v96 + 1);
      do
      {
        if (v15 != (uint64_t *)v16)
        {
          uint64_t v18 = *v15;
          if (*(void *)v16)
          {
            if (v18) {
              re::DynamicOverflowArray<unsigned long long,5ul>::copy(v16, (uint64_t)v15);
            }
            else {
              *(void *)(v16 + 8) = 0;
            }
            *(_DWORD *)(v16 + 16) += 2;
          }
          else if (v18)
          {
            unint64_t v19 = v15[1];
            *(void *)uint64_t v16 = v18;
            re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)v16, v19);
            *(_DWORD *)(v16 + 16) += 2;
            re::DynamicOverflowArray<unsigned long long,5ul>::copy(v16, (uint64_t)v15);
          }
          *(void *)(v16 + 64) = v15[8];
        }
        v15 += 9;
        v16 += 72;
        v17 -= 72;
      }
      while (v17);
    }
  }
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::init<>((uint64_t)&v97 + 8, *(void *)this, *((void *)this + 2));
  if ((void)v98)
  {
    uint64_t v20 = *((void *)&v98 + 1);
    uint64_t v21 = 72 * v98;
    do
    {
      unint64_t v4 = *((void *)this + 5);
      unint64_t v5 = *(int **)(v20 + 64);
      if ((v4 & 0x3F) != 0) {
        unint64_t v22 = (v4 >> 6) + 1;
      }
      else {
        unint64_t v22 = v4 >> 6;
      }
      *(void *)(v20 + 64) = v4;
      *(void *)buf = 0;
      re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)v20, v22, buf);
      if (v4) {
        BOOL v23 = (unint64_t)v5 > v4;
      }
      else {
        BOOL v23 = 0;
      }
      if (v23)
      {
        uint64_t v24 = *(void *)(v20 + 64) & 0x3FLL;
        if (v24)
        {
          BOOL v25 = v24 == 63;
          uint64_t v26 = -1 << v24;
          if (v25) {
            uint64_t v27 = 63;
          }
          else {
            uint64_t v27 = ~v26;
          }
        }
        else
        {
          uint64_t v27 = 63;
        }
        if (*(unsigned char *)(v20 + 16)) {
          uint64_t v28 = v20 + 24;
        }
        else {
          uint64_t v28 = *(void *)(v20 + 32);
        }
        *(void *)(v28 + 8 * *(void *)(v20 + 8) - 8) &= v27;
      }
      v20 += 72;
      v21 -= 72;
    }
    while (v21);
  }
  uint64_t v29 = (int *)*((void *)this + 86);
  if (v29)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    unint64_t FirstBitSet = (unint64_t)this + 128;
    while (1)
    {
      unint64_t v4 = *((void *)&v96 + 1);
      if (*((void *)&v96 + 1) <= v31) {
        break;
      }
      unint64_t v4 = *((void *)this + 86);
      if (v4 <= v31) {
        goto LABEL_170;
      }
      re::DynamicBitset<unsigned long long,256ul>::orWithBitSet(v97 + v30, *((void *)this + 87) + v30);
      unint64_t v4 = *((void *)&v96 + 1);
      if (*((void *)&v96 + 1) <= v31) {
        goto LABEL_171;
      }
      re::DynamicBitset<unsigned long long,256ul>::andWithBitSet(v97 + v30, (uint64_t)this + 128);
      unint64_t v4 = *((void *)this + 86);
      if (v4 <= v31) {
        goto LABEL_172;
      }
      re::DynamicBitset<unsigned long long,256ul>::subtractBitSet(*((void *)this + 87) + v30, (uint64_t)this + 128);
      ++v31;
      v30 += 72;
      if (v29 == (int *)v31) {
        goto LABEL_43;
      }
    }
    *(void *)v107 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v113 = 136315906;
    *(void *)&v113[4] = "operator[]";
    *(_WORD *)&v113[12] = 1024;
    *(_DWORD *)&v113[14] = 468;
    __int16 v114 = 2048;
    unint64_t v115 = v31;
    __int16 v116 = 2048;
    *(void *)v117 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_170:
    *(void *)v107 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v113 = 136315906;
    *(void *)&v113[4] = "operator[]";
    *(_WORD *)&v113[12] = 1024;
    *(_DWORD *)&v113[14] = 468;
    __int16 v114 = 2048;
    unint64_t v115 = v31;
    __int16 v116 = 2048;
    *(void *)v117 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_171:
    *(void *)v107 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v113 = 136315906;
    *(void *)&v113[4] = "operator[]";
    *(_WORD *)&v113[12] = 1024;
    *(_DWORD *)&v113[14] = 468;
    __int16 v114 = 2048;
    unint64_t v115 = v31;
    __int16 v116 = 2048;
    *(void *)v117 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    *(void *)v107 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v113 = 136315906;
    *(void *)&v113[4] = "operator[]";
    *(_WORD *)&v113[12] = 1024;
    *(_DWORD *)&v113[14] = 468;
    __int16 v114 = 2048;
    unint64_t v115 = v31;
    __int16 v116 = 2048;
    *(void *)v117 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_173;
  }
LABEL_43:
  *((_DWORD *)this + 189) = 2139095039;
  re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)v113, (uint64_t *)this + 34);
  uint64_t v118 = *((void *)this + 42);
  uint64_t v32 = (re::_anonymous_namespace_::SchedulerUtil *)re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)v113, (uint64_t)this + 128);
  uint64_t v33 = *(uint64_t **)&v117[2];
  if (v113[16]) {
    uint64_t v33 = (uint64_t *)((char *)&v115 + 4);
  }
  if (*(void *)&v113[8] < 0xBuLL)
  {
    if (!*(void *)&v113[8]) {
      goto LABEL_62;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 8 * *(void *)&v113[8];
    do
    {
      uint64_t v37 = *v33++;
      v35 |= v37;
      v36 -= 8;
    }
    while (v36);
    if (!v35)
    {
LABEL_62:
      int v38 = 2139095039;
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v34 = 8 * *(void *)&v113[8];
    while (!*v33)
    {
      ++v33;
      v34 -= 8;
      if (!v34) {
        goto LABEL_62;
      }
    }
  }
  int v38 = 0;
  if (isDebugLoggingEnabled)
  {
    char v40 = *(unint64_t **)&v117[2];
    if (v113[16]) {
      char v40 = (unint64_t *)((char *)&v115 + 4);
    }
    uint64_t v41 = *(void *)&v113[8];
    if ((*(void *)&v113[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v42 = 0;
      while (1)
      {
        unint64_t v44 = *v40++;
        unint64_t v43 = v44;
        if (v44) {
          break;
        }
        v42 -= 64;
        if (!--v41) {
          goto LABEL_63;
        }
      }
      unint64_t v92 = __clz(__rbit64(v43));
      if (v92 + 1 != v42)
      {
        unint64_t FirstBitSet = v92 - v42;
        uint64_t v29 = &dword_233120000;
        do
        {
          unint64_t v4 = *re::foundationTimingLogObjects(isDebugLoggingEnabled);
          if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v6 = *((void *)this + 5);
            if (v6 <= FirstBitSet) {
              goto LABEL_195;
            }
            uint64_t v93 = *(void *)(*((void *)this + 6) + 16 * FirstBitSet + 8);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v93;
            _os_log_debug_impl(&dword_233120000, (os_log_t)v4, OS_LOG_TYPE_DEBUG, "Scheduling continuous task [%s]", buf, 0xCu);
          }
          isDebugLoggingEnabled = (re *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v113, FirstBitSet + 1);
          unint64_t FirstBitSet = (unint64_t)isDebugLoggingEnabled;
        }
        while (isDebugLoggingEnabled != (re *)-1);
      }
    }
  }
LABEL_63:
  *((_DWORD *)this + 188) = v38;
  re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray((uint64_t)v107, (uint64_t *)this + 25);
  uint64_t v112 = *((void *)this + 33);
  re::DynamicBitset<unsigned long long,256ul>::andWithBitSet((uint64_t)v107, (uint64_t)this + 128);
  uint64_t v45 = *(unint64_t **)&v111[2];
  if (v107[16]) {
    uint64_t v45 = (unint64_t *)((char *)&v109 + 4);
  }
  uint64_t v46 = *(void *)&v107[8];
  if ((*(void *)&v107[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v47 = 0;
    double v48 = v11 + a3;
    while (1)
    {
      unint64_t v50 = *v45++;
      unint64_t v49 = v50;
      if (v50) {
        break;
      }
      v47 -= 64;
      if (!--v46) {
        goto LABEL_71;
      }
    }
    unint64_t v51 = __clz(__rbit64(v49));
    if (v51 + 1 != v47)
    {
      unint64_t FirstBitSet = v51 - v47;
      uint64_t v29 = (int *)&v99;
      unint64_t v7 = *((void *)this + 71);
      unint64_t v4 = 72;
      unint64_t v5 = &dword_233120000;
      while (1)
      {
        if (v7 <= FirstBitSet) {
          goto LABEL_179;
        }
        double v71 = *(double *)(*((void *)this + 72) + 8 * FirstBitSet);
        if (v71 <= v48) {
          break;
        }
LABEL_154:
        float v87 = v71 - *((double *)this + 93);
        *((float *)this + 188) = fminf(*((float *)this + 188), v87);
        unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v107, FirstBitSet + 1);
        if (FirstBitSet == -1) {
          goto LABEL_71;
        }
      }
      unint64_t v6 = *((void *)this + 74);
      if (v6 <= FirstBitSet) {
        goto LABEL_180;
      }
      unint64_t v6 = *(void *)(*((void *)this + 75) + 8 * FirstBitSet);
      unint64_t v7 = *((void *)&v96 + 1);
      if (*((void *)&v96 + 1) <= v6) {
        goto LABEL_181;
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v97 + 72 * v6, FirstBitSet);
      unint64_t v7 = v98;
      if ((unint64_t)v98 <= v6) {
        goto LABEL_182;
      }
      unint64_t v72 = (re::_anonymous_namespace_::SchedulerUtil *)re::DynamicBitset<unsigned long long,256ul>::setBit(*((void *)&v98 + 1) + 72 * v6, FirstBitSet);
      unint64_t v6 = *((void *)this + 68);
      if (v6 <= FirstBitSet) {
        goto LABEL_183;
      }
      unint64_t v6 = *((void *)this + 59);
      if (v6 <= FirstBitSet) {
        goto LABEL_184;
      }
      double v74 = *(float *)(*((void *)this + 69) + 4 * FirstBitSet);
      int v75 = *(unsigned __int8 *)(*((void *)this + 60) + FirstBitSet);
      switch(v75)
      {
        case 3:
          if (v79)
          {
            unint64_t v7 = *re::foundationTimingLogObjects(v79);
            if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v6 = *((void *)this + 5);
              if (v6 <= FirstBitSet) {
                goto LABEL_197;
              }
              uint64_t v89 = *(void *)(*((void *)this + 6) + 16 * FirstBitSet + 8);
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v89;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v74;
              _os_log_debug_impl(&dword_233120000, (os_log_t)v7, OS_LOG_TYPE_DEBUG, "Scheduling substep interval task [%s] with interval: %f", buf, 0x16u);
            }
          }
          unint64_t v6 = *((void *)this + 71);
          if (v6 <= FirstBitSet) {
            goto LABEL_186;
          }
          double v80 = *(double *)(*((void *)this + 72) + 8 * FirstBitSet);
          unint64_t v6 = *((void *)&v99 + 1);
          if (!*((void *)&v99 + 1))
          {
            re::FixedArray<unsigned long>::init<>((uint64_t *)&v99, *(void *)this, *((void *)this + 5));
            unint64_t v6 = *((void *)&v99 + 1);
          }
          if (v6 <= FirstBitSet) {
            goto LABEL_188;
          }
          double v81 = floor(v48 / v74 + 0.001);
          unint64_t v82 = (unint64_t)(v81 + 0.5 + 1.0) - (unint64_t)(v80 / v74 + 0.5);
          uint64_t v83 = v100;
          *(void *)(v100 + 8 * FirstBitSet) = v82;
          unint64_t v6 = *((void *)this + 62);
          if (v6 <= FirstBitSet) {
            goto LABEL_189;
          }
          __int16 v84 = *(unsigned __int8 *)(*((void *)this + 63) + FirstBitSet);
          if (*(unsigned char *)(*((void *)this + 63) + FirstBitSet))
          {
            unint64_t v6 = *((void *)this + 83);
            if (v6 <= FirstBitSet) {
              goto LABEL_191;
            }
            if (*(double *)(*((void *)this + 84) + 8 * FirstBitSet) != 0.0 || (++v84, (v84 & 0x100) == 0))
            {
              unint64_t v6 = *((void *)&v99 + 1);
              if (*((void *)&v99 + 1) <= FirstBitSet) {
                goto LABEL_193;
              }
              if (v82 > v84) {
                *(void *)(v83 + 8 * FirstBitSet) = v84;
              }
            }
          }
          unint64_t v7 = *((void *)this + 71);
          if (v7 <= FirstBitSet) {
            goto LABEL_190;
          }
          double v71 = (v81 + 1.0) * v74;
          break;
        case 2:
          double v71 = (floor(v48 / v74 + 0.001) + 1.0) * v74;
          if (v85)
          {
            long long v86 = *re::foundationTimingLogObjects(v85);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v6 = *((void *)this + 5);
              if (v6 <= FirstBitSet) {
                goto LABEL_198;
              }
              uint64_t v90 = *(void *)(*((void *)this + 6) + 16 * FirstBitSet + 8);
              double v91 = v71 - *((double *)this + 93);
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = v90;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v74;
              *(_WORD *)&buf[22] = 2048;
              *(double *)&buf[24] = v91;
              _os_log_debug_impl(&dword_233120000, v86, OS_LOG_TYPE_DEBUG, "Scheduling combined interval task [%s] with interval: %f (deadline: %f)", buf, 0x20u);
            }
          }
          unint64_t v7 = *((void *)this + 71);
          if (v7 <= FirstBitSet) {
            goto LABEL_187;
          }
          break;
        case 1:
          if (v76)
          {
            unint64_t v77 = *re::foundationTimingLogObjects(v76);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              unint64_t v6 = *((void *)this + 5);
              if (v6 <= FirstBitSet) {
                goto LABEL_196;
              }
              uint64_t v88 = *(void *)(*((void *)this + 6) + 16 * FirstBitSet + 8);
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = v88;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v74;
              _os_log_debug_impl(&dword_233120000, v77, OS_LOG_TYPE_DEBUG, "Scheduling continuous interval task [%s] with interval: %f", buf, 0x16u);
            }
          }
          unint64_t v7 = *((void *)this + 71);
          if (v7 <= FirstBitSet) {
            goto LABEL_185;
          }
          uint64_t v78 = *((void *)this + 72);
          double v71 = *(double *)(v78 + 8 * FirstBitSet) + v74;
          goto LABEL_153;
        default:
          re::internal::assertLog((re::internal *)4, v73, "assertion failure: '%s' (%s:line %i) Unknown over schedule strategy.", "!\"Unreachable code\"", "beginPhaseExecution", 515);
          float result = (void *)_os_crash();
          __break(1u);
          return result;
      }
      uint64_t v78 = *((void *)this + 72);
LABEL_153:
      *(double *)(v78 + 8 * FirstBitSet) = v71;
      goto LABEL_154;
    }
  }
LABEL_71:
  if (*((void *)this + 90))
  {
    unint64_t v7 = 0;
    uint64_t v29 = &dword_233120000;
    unint64_t v6 = 72;
    while (1)
    {
      uint64_t v52 = *((void *)this + 92) + 16 * v7;
      unint64_t FirstBitSet = *(void *)v52;
      float v53 = *(float *)(v52 + 8);
      unint64_t v4 = v52 + 8;
      float v54 = v53 - a2;
      *(float *)unint64_t v4 = v54;
      uint64_t Bit = re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 128, FirstBitSet);
      if ((Bit & 1) == 0) {
        goto LABEL_85;
      }
      if (*(float *)v4 >= a3) {
        break;
      }
      if (v56)
      {
        uint64_t v57 = *re::foundationTimingLogObjects(v56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v5 = (int *)*((void *)this + 5);
          if ((unint64_t)v5 <= FirstBitSet) {
            goto LABEL_194;
          }
          uint64_t v63 = *(void *)(*((void *)this + 6) + 16 * FirstBitSet + 8);
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v63;
          _os_log_debug_impl(&dword_233120000, v57, OS_LOG_TYPE_DEBUG, "Scheduling enqueued task [%s]", buf, 0xCu);
        }
      }
      unint64_t v4 = *((void *)this + 74);
      if (v4 <= FirstBitSet) {
        goto LABEL_175;
      }
      unint64_t v4 = *(void *)(*((void *)this + 75) + 8 * FirstBitSet);
      unint64_t v5 = (int *)*((void *)&v96 + 1);
      if (*((void *)&v96 + 1) <= v4) {
        goto LABEL_176;
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v97 + 72 * v4, FirstBitSet);
      unint64_t v5 = (int *)v98;
      if ((unint64_t)v98 <= v4) {
        goto LABEL_177;
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(*((void *)&v98 + 1) + 72 * v4, FirstBitSet);
      unint64_t FirstBitSet = *((void *)this + 90);
      if (FirstBitSet <= v7) {
        goto LABEL_178;
      }
      uint64_t v58 = FirstBitSet - 1;
      if (FirstBitSet - 1 > v7)
      {
        uint64_t v59 = *((void *)this + 92);
        uint64_t v60 = v59 + 16 * FirstBitSet;
        uint64_t v61 = v59 + 16 * v7;
        uint64_t v62 = *(void *)(v60 - 16);
        *(_DWORD *)(v61 + 8) = *(_DWORD *)(v60 - 8);
        *(void *)uint64_t v61 = v62;
        uint64_t v58 = *((void *)this + 90) - 1;
      }
      *((void *)this + 90) = v58;
      ++*((_DWORD *)this + 182);
LABEL_86:
      if (v7 >= *((void *)this + 90)) {
        goto LABEL_90;
      }
    }
    *((float *)this + 188) = fminf(*((float *)this + 188), *(float *)v4);
LABEL_85:
    ++v7;
    goto LABEL_86;
  }
LABEL_90:
  *(void *)v104 = 0;
  *(void *)&v104[8] = 0;
  *(_DWORD *)&v104[16] = 1;
  *(void *)&v105[4] = 0;
  *(void *)&v105[12] = 0;
  unint64_t v64 = *((void *)this + 5);
  if ((v64 & 0x3F) != 0) {
    unint64_t v65 = (v64 >> 6) + 1;
  }
  else {
    unint64_t v65 = v64 >> 6;
  }
  uint64_t v106 = *((void *)this + 5);
  *(void *)buf = 0;
  re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)v104, v65, buf);
  if (*((void *)&v96 + 1))
  {
    uint64_t v66 = v97;
    uint64_t v67 = 72 * *((void *)&v96 + 1);
    do
    {
      re::DynamicBitset<unsigned long long,256ul>::orWithBitSet((uint64_t)v104, v66);
      v66 += 72;
      v67 -= 72;
    }
    while (v67);
  }
  re::Scheduler::resolveEnabledTaskSetDependencies((uint64_t)v94, (uint64_t)this, (uint64_t *)v104);
  re::DynamicBitset<unsigned long long,256ul>::subtractBitSet((uint64_t)v94, (uint64_t)v104);
  unint64_t v68 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v94, 0);
  if (v68 != -1)
  {
    unint64_t FirstBitSet = v68;
    while (1)
    {
      unint64_t v31 = *((void *)this + 74);
      if (v31 <= FirstBitSet) {
        break;
      }
      unint64_t v31 = *(void *)(*((void *)this + 75) + 8 * FirstBitSet);
      uint64_t v29 = (int *)*((void *)&v96 + 1);
      if (*((void *)&v96 + 1) <= v31) {
        goto LABEL_174;
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v97 + 72 * v31, FirstBitSet);
      unint64_t FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v94, FirstBitSet + 1);
      if (FirstBitSet == -1) {
        goto LABEL_101;
      }
    }
LABEL_173:
    uint64_t v103 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v119 = 136315906;
    v120 = "operator[]";
    __int16 v121 = 1024;
    int v122 = 468;
    __int16 v123 = 2048;
    unint64_t v124 = FirstBitSet;
    __int16 v125 = 2048;
    v126 = (int *)v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    uint64_t v103 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v119 = 136315906;
    v120 = "operator[]";
    __int16 v121 = 1024;
    int v122 = 468;
    __int16 v123 = 2048;
    unint64_t v124 = v31;
    __int16 v125 = 2048;
    v126 = v29;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = v4;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_177:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = v4;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "removeAt";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 931;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = v7;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = FirstBitSet;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_181:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = v6;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_182:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = v6;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_183:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_184:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_185:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_186:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_187:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_188:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_189:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_190:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_191:
    v94[0] = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v128 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 468;
    *(_WORD *)&v104[18] = 2048;
    *(void *)v105 = FirstBitSet;
    *(_WORD *)&v105[8] = 2048;
    *(void *)&v105[10] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_192;
  }
LABEL_101:
  re::Scheduler::ExecutionContext::deinit((re::Scheduler *)((char *)this + 760));
  re::FixedArray<float>::operator=((uint64_t *)this + 95, (uint64_t *)&v96);
  re::FixedArray<float>::operator=((uint64_t *)this + 98, (uint64_t *)&v97 + 1);
  re::FixedArray<unsigned long>::operator=((uint64_t *)this + 101, (uint64_t *)&v99);
  long long v69 = v102;
  *((_OWORD *)this + 52) = v101;
  *((_OWORD *)this + 53) = v69;
  if (v94[0] && (v95 & 1) == 0) {
    (*(void (**)(void))(*(void *)v94[0] + 40))();
  }
  if (*(void *)v104 && (v104[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v104 + 40))();
  }
  if (*(void *)v107 && (v107[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v107 + 40))();
  }
  if (*(void *)v113 && (v113[16] & 1) == 0) {
    (*(void (**)(void))(**(void **)v113 + 40))();
  }
  if ((void)v99)
  {
    if (*((void *)&v99 + 1))
    {
      (*(void (**)(void))(*(void *)v99 + 40))();
      *((void *)&v99 + 1) = 0;
      uint64_t v100 = 0;
    }
    *(void *)&long long v99 = 0;
  }
  re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((void *)&v97 + 1);
  return re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit(&v96);
}

unint64_t re::Scheduler::executePhase(re::Scheduler *this, unint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 844) = 1;
  *((void *)this + 106) = a2;
  if (*((void *)this + 96) <= a2) {
    goto LABEL_42;
  }
  uint64_t v3 = *((void *)this + 97) + 72 * a2;
  unint64_t result = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v3, 0);
  if (result != -1)
  {
    unint64_t v5 = result;
    while (1)
    {
      *((void *)this + 107) = v5;
      if (*((void *)this + 56) <= v5) {
        goto LABEL_34;
      }
      int v6 = *(unsigned __int8 *)(*((void *)this + 57) + v5);
      if (v6 == 5 || v6 == 2)
      {
        if (*((void *)this + 59) <= v5) {
          goto LABEL_35;
        }
        if (*(unsigned char *)(*((void *)this + 60) + v5) == 3) {
          break;
        }
      }
      if (*((void *)this + 83) <= v5) {
        goto LABEL_36;
      }
      double v16 = *((double *)this + 104);
      uint64_t v17 = *((void *)this + 84);
      double v18 = *(double *)(v17 + 8 * v5);
      *(double *)(v17 + 8 * v5) = v16;
      if (*((void *)this + 65) <= v5) {
        goto LABEL_37;
      }
      float v19 = v16 - v18;
      uint64_t v20 = *((void *)this + 66);
      *(float *)&long long v21 = v19;
      (*(void (**)(void, long long *))(**(void **)(v20 + 40 * v5 + 32) + 16))(*(void *)(v20 + 40 * v5 + 32), &v21);
LABEL_31:
      unint64_t result = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v3, v5 + 1);
      unint64_t v5 = result;
      if (result == -1) {
        goto LABEL_32;
      }
    }
    if (*((void *)this + 68) > v5)
    {
      if (*((void *)this + 102) <= v5)
      {
LABEL_39:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_40;
      }
      unint64_t v8 = *((void *)this + 83);
      if (v8 <= v5)
      {
LABEL_40:
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v9 = *(void *)(*((void *)this + 103) + 8 * v5);
      if (!v9) {
        goto LABEL_26;
      }
      uint64_t v10 = 0;
      float v11 = *(float *)(*((void *)this + 69) + 4 * v5);
      double v12 = *(double *)(*((void *)this + 84) + 8 * v5);
      while (*((void *)this + 65) > v5)
      {
        if (v10) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = v12 == 0.0;
        }
        if (v13) {
          float v14 = 0.0;
        }
        else {
          float v14 = v11;
        }
        uint64_t v15 = *((void *)this + 66);
        *(float *)&long long v21 = v14;
        (*(void (**)(void, long long *))(**(void **)(v15 + 40 * v5 + 32) + 16))(*(void *)(v15 + 40 * v5 + 32), &v21);
        if (v9 == ++v10)
        {
          unint64_t v8 = *((void *)this + 83);
LABEL_26:
          if (v8 > v5)
          {
            *(void *)(*((void *)this + 84) + 8 * v5) = *((void *)this + 104);
            goto LABEL_31;
          }
LABEL_41:
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_42:
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
LABEL_32:
  *((unsigned char *)this + 844) = 0;
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned long long,5ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[1];
    *(void *)a1 = v3;
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned long long,5ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<unsigned long long,5ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity((void *)a1, *(void *)(a2 + 8));
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      unint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        BOOL v13 = (void *)(v11 + 8 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        unint64_t result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 8 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    unint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  unint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    unint64_t result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  return result;
}

re::ManualClock *re::ManualClock::ManualClock(re::ManualClock *this)
{
  *(void *)this = &unk_26E721318;
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0x7F80000000000000;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)this + 5, 0);
  ++*((_DWORD *)this + 16);
  re::Defaults::floatValue((re::Defaults *)re::SimulationClock::kDefaultMaxDeltaTimeKey, v2, (uint64_t)v4);
  if (v4[0] && v5 > 0.0) {
    *((float *)this + 9) = v5;
  }
  return this;
}

uint64_t re::ManualClock::start(uint64_t this)
{
  *(unsigned char *)(this + 8) = 1;
  return this;
}

uint64_t re::ManualClock::stop(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t re::ManualClock::reset(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void re::ManualClock::resetDeltaTime(re::ManualClock *this, uint64_t a2)
{
}

uint64_t re::ManualClock::update(uint64_t this, float a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(this + 8)) {
    return this;
  }
  float v3 = a2;
  if (a2 < 0.0)
  {
    re::internal::assertLog((re::internal *)5, a3, "assertion failure: '%s' (%s:line %i) Negative time step: %g s", "deltaTime >= 0.0f", "update", 49, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)5, a3, "assertion failure: '%s' (%s:line %i) Time step exceeds 10 years: %g s", "deltaTime < 10 * 365 * 24 * 3600.0f", "update", 50, v3);
    _os_crash();
    __break(1u);
  }
  if (a2 >= 315360000.0) {
    goto LABEL_14;
  }
  uint64_t v4 = this;
  if (a2 > 3600.0)
  {
    float v5 = *re::foundationTimingLogObjects((re *)this);
    this = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (this)
    {
      int buf = 134217984;
      *(double *)buf_4 = v3;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Large time step: %g s", (uint8_t *)&buf, 0xCu);
    }
  }
  double v6 = v3;
  double v7 = *(double *)(v4 + 16) + v3;
  *(double *)(v4 + 16) = v7;
  if (*(float *)(v4 + 36) < v3)
  {
    uint64_t v8 = *re::foundationTimingLogObjects((re *)this);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = *(float *)(v4 + 36);
      int buf = 134218240;
      *(double *)buf_4 = v3;
      *(_WORD *)&buf_4[8] = 2048;
      *(double *)&buf_4[10] = v9;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Clamping time step %g s to %g s", (uint8_t *)&buf, 0x16u);
    }
    float v3 = *(float *)(v4 + 36);
    double v7 = *(double *)(v4 + 16);
    double v6 = v3;
  }
  double v10 = v6 + *(double *)(v4 + 24);
  *(double *)(v4 + 24) = v10;
  *(float *)(v4 + 32) = v3;
  *(_DWORD *)buf_4 = 0;
  int buf = LODWORD(v3);
  *(double *)&buf_4[4] = v10;
  *(double *)&buf_4[12] = v7;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 96))(v4, &buf);
}

void re::ManualClock::onTimeDidChange(uint64_t a1)
{
}

void re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::raise(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    re::Event<re::GeometricObjectBase>::doDeferredActions((_anonymous_namespace_ *)a1);
  }
}

void re::ManualClock::~ManualClock(re::ManualClock *this)
{
  *(void *)this = &unk_26E721318;
  re::Event<re::GeometricObjectBase>::~Event((void *)this + 5);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E721318;
  re::Event<re::GeometricObjectBase>::~Event((void *)this + 5);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ManualClock::isRunning(re::ManualClock *this)
{
  return *((unsigned __int8 *)this + 8);
}

float re::ManualClock::deltaTime(re::ManualClock *this)
{
  return *((float *)this + 8);
}

float re::ManualClock::maxDeltaTime(re::ManualClock *this)
{
  return *((float *)this + 9);
}

float re::ManualClock::simulationTime(re::ManualClock *this)
{
  return *((double *)this + 3);
}

float re::ManualClock::totalTime(re::ManualClock *this)
{
  return *((double *)this + 2);
}

uint64_t re::ManualClock::timeDidChange(re::ManualClock *this)
{
  return (uint64_t)this + 40;
}

void re::DisplayLinkClock::update(re::DisplayLinkClock *this)
{
  double v2 = CACurrentMediaTime();
  double v3 = *((double *)this + 19);
  *((double *)this + 19) = v2;
  if (*((unsigned char *)this + 9))
  {
    float v4 = v2 - v3;
    double v5 = *((double *)this + 3);
    double v6 = *((double *)this + 2) + v4;
    if (*((float *)this + 9) < v4) {
      float v4 = *((float *)this + 9);
    }
    *((double *)this + 2) = v6;
    *((double *)this + 3) = v5 + v4;
    *((float *)this + 8) = v4;
    v7[0] = LODWORD(v4);
    *(double *)&v7[1] = v5 + v4;
    *(double *)&v7[2] = v6;
    (*(void (**)(re::DisplayLinkClock *, void *))(*(void *)this + 96))(this, v7);
  }
}

uint64_t re::DisplayLinkClock::DisplayLinkClock(uint64_t a1, id *a2)
{
  *(void *)a1 = &unk_26E7213B8;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 36) = 0x427000007F800000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)(a1 + 48), 0);
  ++*(_DWORD *)(a1 + 72);
  id v4 = *a2;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = v4;
  return a1;
}

void re::DisplayLinkClock::~DisplayLinkClock(re::DisplayLinkClock *this)
{
  *(void *)this = &unk_26E7213B8;
  if (*((unsigned char *)this + 8))
  {
    double v2 = (void *)*((void *)this + 18);
    if (v2)
    {
      [v2 invalidate];
      double v3 = (void *)*((void *)this + 18);
      *((void *)this + 18) = 0;
    }
    *((unsigned char *)this + 8) = 0;
  }

  re::Event<re::GeometricObjectBase>::~Event((void *)this + 6);
}

{
  uint64_t vars8;

  re::DisplayLinkClock::~DisplayLinkClock(this);
  JUMPOUT(0x237DBCBD0);
}

void re::DisplayLinkClock::init(re::DisplayLinkClock *this)
{
  if (!*((unsigned char *)this + 8))
  {
    re::DisplayLinkClock::initDisplayLink(this);
    *((unsigned char *)this + 8) = 1;
    re::Defaults::floatValue((re::Defaults *)re::SimulationClock::kDefaultMaxDeltaTimeKey, v2, (uint64_t)v3);
    if (v3[0])
    {
      if (v4 > 0.0) {
        *((float *)this + 9) = v4;
      }
    }
  }
}

void re::DisplayLinkClock::initDisplayLink(re::DisplayLinkClock *this)
{
  double v2 = [[REDisplayLinkTarget alloc] initWithClock:this];
  uint64_t v8 = v2;
  if (*((void *)this + 17) == MEMORY[0x263EF83A0]) {
    double v3 = &selRef_update;
  }
  else {
    double v3 = &selRef_updateOnQueue;
  }
  uint64_t v4 = [MEMORY[0x263F15788] displayLinkWithTarget:v2 selector:*v3];
  double v5 = (void *)*((void *)this + 18);
  *((void *)this + 18) = v4;

  [*((id *)this + 18) setPreferredFramesPerSecond:llroundf(*((float *)this + 10))];
  double v6 = (void *)*((void *)this + 18);
  double v7 = [MEMORY[0x263EFF9F0] currentRunLoop];
  [v6 addToRunLoop:v7 forMode:*MEMORY[0x263EFF588]];
}

CFTimeInterval *re::DisplayLinkClock::start(CFTimeInterval *this)
{
  if (!*((unsigned char *)this + 9))
  {
    unint64_t v1 = this;
    re::DisplayLinkClock::init((re::DisplayLinkClock *)this);
    v1[19] = CACurrentMediaTime();
    this = (CFTimeInterval *)*((void *)v1 + 18);
    if (this) {
      this = (CFTimeInterval *)[(CFTimeInterval *)this setPaused:0];
    }
    *((unsigned char *)v1 + 9) = 1;
  }
  return this;
}

void re::DisplayLinkClock::resetDeltaTime(CFTimeInterval *this)
{
  this[19] = CACurrentMediaTime();
}

uint64_t re::DisplayLinkClock::stop(uint64_t this)
{
  if (*(unsigned char *)(this + 9))
  {
    uint64_t v1 = this;
    this = *(void *)(this + 144);
    if (this) {
      this = [(id)this setPaused:1];
    }
    *(unsigned char *)(v1 + 9) = 0;
  }
  return this;
}

void re::DisplayLinkClock::reset(re::DisplayLinkClock *this)
{
  if (*((unsigned char *)this + 9))
  {
    double v2 = (void *)*((void *)this + 18);
    if (v2) {
      [v2 setPaused:1];
    }
    *((unsigned char *)this + 9) = 0;
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((CFTimeInterval *)this + 19) = CACurrentMediaTime();
}

void re::DisplayLinkClock::onTimeDidChange(uint64_t a1)
{
}

uint64_t re::DisplayLinkClock::isRunning(re::DisplayLinkClock *this)
{
  return *((unsigned __int8 *)this + 9);
}

float re::DisplayLinkClock::deltaTime(re::DisplayLinkClock *this)
{
  return *((float *)this + 8);
}

float re::DisplayLinkClock::maxDeltaTime(re::DisplayLinkClock *this)
{
  return *((float *)this + 9);
}

float re::DisplayLinkClock::simulationTime(re::DisplayLinkClock *this)
{
  return *((double *)this + 3);
}

float re::DisplayLinkClock::totalTime(re::DisplayLinkClock *this)
{
  return *((double *)this + 2);
}

uint64_t re::DisplayLinkClock::timeDidChange(re::DisplayLinkClock *this)
{
  return (uint64_t)this + 48;
}

re::VariableStepTimer *re::VariableStepTimer::VariableStepTimer(re::VariableStepTimer *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26E721448;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 7) = 1065353216;
  *((_DWORD *)this + 16) = 2139095040;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  double v2 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)this + 9, 0);
  ++*((_DWORD *)this + 24);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  re::DynamicArray<re::EvaluationRegister>::setCapacity((void *)this + 20, 0);
  ++*((_DWORD *)this + 46);
  return this;
}

void re::VariableStepTimer::~VariableStepTimer(re::VariableStepTimer *this)
{
}

{
  uint64_t vars8;

  re::VariableStepTimer::~VariableStepTimer(this);
  JUMPOUT(0x237DBCBD0);
}

double re::VariableStepTimer::setClock(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != a2)
  {
    if (v3)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
      *(void *)&long long v8 = a1;
      *((void *)&v8 + 1) = re::VariableStepTimer::onClockDidChange;
      *(void *)&long long v9 = 0;
      *((void *)&v9 + 1) = re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::createSubscription<re::VariableStepTimer>(re::VariableStepTimer *,REEventHandlerResult (re::VariableStepTimer::*)(re::SimulationClock*,re::SimulationClockEventArgs const&))::{lambda(re::SimulationClock*,re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::Subscription const&,re::SimulationClockEventArgs const&)#1}::__invoke;
      re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(v5, &v8, (uint64_t)v10);
      if (v10[0])
      {
        if (*(_DWORD *)(v5 + 80))
        {
          v10[0] = 0;
          long long v11 = v8;
          long long v12 = v9;
          *(void *)&double result = re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(v5 + 40, (uint64_t)v10).n128_u64[0];
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable((void *)v5, &v8);
        }
      }
    }
    *(void *)(a1 + 8) = a2;
    if (a2)
    {
      double v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
      *(void *)&long long v8 = a1;
      *((void *)&v8 + 1) = re::VariableStepTimer::onClockDidChange;
      *(void *)&long long v9 = 0;
      *((void *)&v9 + 1) = re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::createSubscription<re::VariableStepTimer>(re::VariableStepTimer *,REEventHandlerResult (re::VariableStepTimer::*)(re::SimulationClock*,re::SimulationClockEventArgs const&))::{lambda(re::SimulationClock*,re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::Subscription const&,re::SimulationClockEventArgs const&)#1}::__invoke;
      re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf((uint64_t)v7, &v8, (uint64_t)v10);
      if (!v10[0])
      {
        if (*((_DWORD *)v7 + 20))
        {
          v10[0] = 1;
          long long v11 = v8;
          long long v12 = v9;
          *(void *)&double result = re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add((uint64_t)v7 + 40, (uint64_t)v10).n128_u64[0];
        }
        else
        {
          *(void *)&double result = re::DynamicArray<re::EvaluationRegister>::add(v7, (uint64_t)&v8).n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t re::VariableStepTimer::onClockDidChange(uint64_t a1, uint64_t a2, float *a3)
{
  if (*(unsigned char *)(a1 + 24))
  {
    float v4 = *(float *)(a1 + 52) + (float)(*a3 * *(float *)(a1 + 56));
    *(float *)(a1 + 52) = v4;
    float v5 = fabsf(v4);
    float v6 = *(float *)(a1 + 60);
    if (v5 >= v6)
    {
      ++*(void *)(a1 + 16);
      float v8 = *(float *)(a1 + 64);
      float v9 = v5 - v8;
      float v10 = -v8;
      if (v4 >= 0.0) {
        float v10 = *(float *)(a1 + 64);
      }
      BOOL v11 = v5 <= v8;
      float v12 = 0.0;
      if (!v11)
      {
        float v12 = v9;
        float v4 = v10;
      }
      *(float *)(a1 + 48) = v12;
      *(float *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v4;
      *(_DWORD *)(a1 + 52) = 0;
      *(_DWORD *)(a1 + 44) = 0;
      *(double *)(a1 + 32) = *(double *)(a1 + 32) + v4;
      uint64_t v7 = a1 + 160;
    }
    else
    {
      *(_DWORD *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      *(float *)(a1 + 44) = v6 - v5;
      uint64_t v7 = a1 + 72;
    }
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::raise(v7, a1);
  }
  return 0;
}

uint64_t re::VariableStepTimer::start(uint64_t this)
{
  *(unsigned char *)(this + 24) = 1;
  return this;
}

uint64_t re::VariableStepTimer::stop(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t re::VariableStepTimer::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 32) = 0;
  return this;
}

void re::VariableStepTimer::onIdle(uint64_t a1)
{
}

void re::VariableStepTimer::onTimeDidChange(uint64_t a1)
{
}

void re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::raise(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v3 + 1;
  if (*(void *)(a1 + 16))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(a1 + 32) + 32 * v5 + 24))(a2) == 1) {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)a1, v5);
      }
      else {
        ++v5;
      }
    }
    while (v5 < *(void *)(a1 + 16));
    int v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v3;
  if (!v3)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      uint64_t v7 = 0;
      for (unint64_t i = 0; i != v6; ++i)
      {
        unint64_t v9 = *(void *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v15 = 136315906;
          double v16 = "operator[]";
          __int16 v17 = 1024;
          int v18 = 789;
          __int16 v19 = 2048;
          unint64_t v20 = i;
          __int16 v21 = 2048;
          unint64_t v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v10 = *(void *)(a1 + 72) + v7;
        uint64_t v11 = *(void *)(v10 + 32);
        long long v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        uint64_t v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (void *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0])) {
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
          }
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable((void *)a1, (void *)v13 + 1);
        }
        v7 += 40;
      }
    }
  }
}

uint64_t re::VariableStepTimer::clock(re::VariableStepTimer *this)
{
  return *((void *)this + 1);
}

uint64_t re::VariableStepTimer::frameCount(re::VariableStepTimer *this)
{
  return *((void *)this + 2);
}

uint64_t re::VariableStepTimer::isRunning(re::VariableStepTimer *this)
{
  return *((unsigned __int8 *)this + 24);
}

double re::VariableStepTimer::time(re::VariableStepTimer *this)
{
  return *((double *)this + 4);
}

float re::VariableStepTimer::deltaTime(re::VariableStepTimer *this)
{
  return *((float *)this + 10);
}

uint64_t re::VariableStepTimer::accumulatedSteps(re::VariableStepTimer *this)
{
  return 1;
}

float re::VariableStepTimer::idleTime(re::VariableStepTimer *this)
{
  return *((float *)this + 11);
}

float re::VariableStepTimer::lostTime(re::VariableStepTimer *this)
{
  return *((float *)this + 12);
}

float re::VariableStepTimer::excessTime(re::VariableStepTimer *this)
{
  return *((float *)this + 13);
}

float re::VariableStepTimer::speed(re::VariableStepTimer *this)
{
  return *((float *)this + 14);
}

uint64_t re::VariableStepTimer::pendingSteps(re::VariableStepTimer *this)
{
  return 0;
}

uint64_t re::VariableStepTimer::idle(re::VariableStepTimer *this)
{
  return (uint64_t)this + 72;
}

uint64_t re::VariableStepTimer::timeDidChange(re::VariableStepTimer *this)
{
  return (uint64_t)this + 160;
}

uint64_t re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::createSubscription<re::VariableStepTimer>(re::VariableStepTimer *,REEventHandlerResult (re::VariableStepTimer::*)(re::SimulationClock*,re::SimulationClockEventArgs const&))::{lambda(re::SimulationClock*,re::Event<re::SimulationClock,re::SimulationClockEventArgs const&>::Subscription const&,re::SimulationClockEventArgs const&)#1}::__invoke(uint64_t a1, void *a2)
{
  int v3 = (uint64_t (*)(void *, uint64_t))a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, uint64_t))(*v5 + v3);
  }
  return v3(v5, a1);
}

id ManualClockLog(void)
{
  if (qword_26AF9F468 != -1) {
    dispatch_once(&qword_26AF9F468, &__block_literal_global_46);
  }
  os_log_t v0 = (void *)_MergedGlobals_500;
  return v0;
}

void ___Z14ManualClockLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.re", "ManualClock");
  uint64_t v1 = (void *)_MergedGlobals_500;
  _MergedGlobals_500 = (uint64_t)v0;
}

uint64_t re::ManualCMClockCreateWithReference(re *this, OpaqueCMClock *a2, OpaqueCMClock **a3)
{
  if (!this) {
    return 4294954543;
  }
  uint64_t result = FigDerivedClockCreateWithGetTimeCallback();
  if (!result)
  {
    CFRetain(this);
    uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
    uint64_t result = 0;
    *(_DWORD *)uint64_t DerivedStorage = 0;
    *(void *)(DerivedStorage + 8) = this;
    *(void *)(DerivedStorage + 16) = 0x3FF0000000000000;
    uint64_t v6 = MEMORY[0x263F010E0];
    long long v7 = *MEMORY[0x263F010E0];
    *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x263F010E0];
    uint64_t v8 = *(void *)(v6 + 16);
    *(void *)(DerivedStorage + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v8;
    *(_OWORD *)(DerivedStorage + 48) = v7;
    *(void *)(DerivedStorage + 64) = v8;
  }
  return result;
}

void re::ManualCMClockUpdateRateAndAnchor(re *this, CMTime *a2, double a3, CMTime *a4, CMTime *a5)
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  if (*(double *)(DerivedStorage + 16) != a3 || (time1 = *a2, CMTime v11 = v13, CMTimeCompare(&time1, &v11)))
  {
    os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage);
    *(double *)(DerivedStorage + 16) = a3;
    long long v9 = *(_OWORD *)&a2->value;
    *(void *)(DerivedStorage + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = a2->epoch;
    *(_OWORD *)(DerivedStorage + 24) = v9;
    long long v10 = *(_OWORD *)&a4->value;
    *(void *)(DerivedStorage + 64) = a4->epoch;
    *(_OWORD *)(DerivedStorage + 48) = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage);
  }
}

CMTime *anonymous namespace'::REManualCMClock_ConvertReferenceTimeToLocalTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  memset(&v11, 0, sizeof(v11));
  CMTime lhs = *a2;
  CMTime rhs = *(CMTime *)(a1 + 48);
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeMultiplyByFloat64(&v11, &time, *(Float64 *)(a1 + 16));
  CMTime v7 = *(CMTime *)(a1 + 24);
  CMTime v6 = v11;
  return CMTimeAdd(a3, &v7, &v6);
}

uint64_t re::ProxyAudioClockCreate(re *this, OpaqueCMClock **a2)
{
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  long long v8 = *MEMORY[0x263F01090];
  uint64_t v9 = *(void *)(MEMORY[0x263F01090] + 16);
  uint64_t TimeCallback = FigDerivedClockCreateWithGetTimeCallback();
  if (!TimeCallback)
  {
    CFRetain(HostTimeClock);
    uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
    *(_DWORD *)uint64_t DerivedStorage = 0;
    *(void *)(DerivedStorage + 8) = HostTimeClock;
    CMTime v6 = +[REProxyAudioClockManager sharedInstance];
    [v6 addClock:*(void *)this];
  }
  return TimeCallback;
}

CFStringRef anonymous namespace'::REManualCMClock_CopyDebugDesc(_anonymous_namespace_ *this, OpaqueCMClock *a2)
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage);
  CFAllocatorRef v4 = CFGetAllocator(this);
  CMTime time = *(CMTime *)(DerivedStorage + 24);
  CFStringRef v5 = CMTimeCopyDescription(v4, &time);
  CFAllocatorRef v6 = CFGetAllocator(this);
  CMTime v12 = *(CMTime *)(DerivedStorage + 48);
  CFStringRef v7 = CMTimeCopyDescription(v6, &v12);
  uint64_t v8 = *(void *)(DerivedStorage + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage);
  CFAllocatorRef v9 = CFGetAllocator(this);
  CFStringRef v10 = CFStringCreateWithFormat(v9, 0, @"REManualCMClock rate %0.2f, own anchor %@, reference anchor %@", v8, v5, v7);
  CFRelease(v5);
  CFRelease(v7);
  return v10;
}

void anonymous namespace'::REManualCMClock_Finalize(_anonymous_namespace_ *this, OpaqueCMClock *a2)
{
  double v2 = *(const void **)(FigDerivedClockGetDerivedStorage() + 8);
  CFRelease(v2);
}

BOOL anonymous namespace'::REManualCMClock_MightDrift(_anonymous_namespace_ *this, OpaqueCMClock *a2, OpaqueCMClock *a3)
{
  return this != a2;
}

double anonymous namespace'::REManualCMClock_GetRate(_anonymous_namespace_ *this, OpaqueCMClock *a2)
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage);
  double v3 = *(double *)(DerivedStorage + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage);
  return v3;
}

uint64_t anonymous namespace'::REManualCMClock_GetAnchorTime(_anonymous_namespace_ *this, CMTime *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  memset(&v9, 0, sizeof(v9));
  CMClockGetTime(&v9, *(CMClockRef *)(DerivedStorage + 8));
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)DerivedStorage);
    *a2 = v8;
    os_unfair_lock_unlock((os_unfair_lock_t)DerivedStorage);
  }
  if (a3) {
    *a3 = v9;
  }
  return 0;
}

void anonymous namespace'::REProxyAudioClock_Finalize(_anonymous_namespace_ *this, OpaqueCMClock *a2)
{
  double v3 = +[REProxyAudioClockManager sharedInstance];
  [v3 removeClock:this];

  CFAllocatorRef v4 = *(const void **)(FigDerivedClockGetDerivedStorage() + 8);
  CFRelease(v4);
}

BOOL anonymous namespace'::REProxyAudioClock_MightDrift(_anonymous_namespace_ *this, OpaqueCMClock *a2, OpaqueCMClock *a3)
{
  if (this == a2) {
    return 0;
  }
  return !FigDerivedClockVerifyCallbacksMatch() || !FigDerivedClockVerifyCallbacksMatch();
}

void *re::allocInfo_SimulationTimer(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_501, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_501))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F488, "SimulationTimer");
    __cxa_guard_release(&_MergedGlobals_501);
  }
  return &unk_26AF9F488;
}

void re::initInfo_SimulationTimer(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4256CCBB6638AABCLL;
  v5[1] = "SimulationTimer";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_SimulationTimer(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_SimulationTimer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SimulationTimer", (uint64_t (*)(re::internal *))re::allocInfo_SimulationTimer, (re::IntrospectionBase *(*)(void))re::initInfo_SimulationTimer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SimulationTimer>, this);
}

void re::introspect_ClockOrTimebaseType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F508, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF9F508);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Timebase";
      qword_26AF9F5B8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "AudioClock";
      qword_26AF9F5C0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "HostClock";
      qword_26AF9F5C8 = (uint64_t)v30;
      unint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "SharedClock";
      qword_26AF9F5D0 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = 4;
      *(void *)(v34 + 16) = "CustomClock";
      qword_26AF9F5D8 = v34;
      __cxa_guard_release(&qword_26AF9F508);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F510, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F510))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF9F638, "ClockOrTimebaseType", 4, 4, 1, 1);
    qword_26AF9F638 = (uint64_t)&unk_26E715E00;
    qword_26AF9F678 = (uint64_t)&re::introspect_ClockOrTimebaseType(BOOL)::enumTable;
    dword_26AF9F648 = 9;
    __cxa_guard_release(&qword_26AF9F510);
  }
  if ((_MergedGlobals_502 & 1) == 0)
  {
    _MergedGlobals_502 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF9F638, a2);
    uint64_t v36 = 0x5C6F678444E6A912;
    uint64_t v37 = "ClockOrTimebaseType";
    v40[0] = 208862;
    v40[1] = "int";
    double v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v40);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v40);
      long long v4 = (unsigned int *)qword_26AF9F678;
      v39[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            CMTime v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  CMTime v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v38.var0 = 2 * v10;
            v38.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v14, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              __int16 v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v38.var0 = 2 * v18;
              v38.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v22, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v23);
      xmmword_26AF9F658 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ClockOrTimebaseType", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_ClockOrTimebase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F518))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F730, "ClockOrTimebase");
    __cxa_guard_release(&qword_26AF9F518);
  }
  return &unk_26AF9F730;
}

void re::initInfo_ClockOrTimebase(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x3BDE3B02BE92815ELL;
  v48[1] = "ClockOrTimebase";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F520, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF9F520);
    if (v4)
    {
      CFStringRef v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_ClockOrTimebaseType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + 16) = &qword_26AF9F638;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9F6D0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint64_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "identifier";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9F6D8 = v11;
      CMTime v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "locallyControlled";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x1000000003;
      *(_DWORD *)(v15 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9F6E0 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint64_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "master";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1800000004;
      *(_DWORD *)(v19 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9F6E8 = v19;
      unint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_double((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "rate";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x2000000005;
      *(_DWORD *)(v23 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF9F6F0 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      long long v25 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        long long v25 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v25;
        initInfo_CMTime(v25);
      }
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "ownTime";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x2800000006;
      *(_DWORD *)(v26 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF9F6F8 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      uint64_t v28 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        uint64_t v28 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v28;
        initInfo_CMTime(v28);
      }
      uint64_t v29 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "masterTime";
      *(void *)(v29 + 16) = v28;
      *(void *)(v29 + 24) = 0;
      *(void *)(v29 + 32) = 0x4000000007;
      *(_DWORD *)(v29 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_26AF9F700 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      uint64_t v32 = re::introspect_double((re *)1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "rateToTOD";
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0x5800000008;
      *(_DWORD *)(v33 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_26AF9F708 = v33;
      uint64_t v34 = re::introspectionAllocator((re *)v33);
      uint64_t v35 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        uint64_t v35 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v35;
        initInfo_CMTime(v35);
      }
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = "ownTimeToTOD";
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0x6000000009;
      *(_DWORD *)(v36 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v36 + 48) = 0;
      *(void *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_26AF9F710 = v36;
      uint64_t v37 = re::introspectionAllocator((re *)v36);
      StringID v38 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        StringID v38 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v38;
        initInfo_CMTime(v38);
      }
      uint64_t v39 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 72, 8);
      *(_DWORD *)uint64_t v39 = 1;
      *(void *)(v39 + 8) = "masterTimeToTOD";
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = 0;
      *(void *)(v39 + 32) = 0x780000000ALL;
      *(_DWORD *)(v39 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v39 + 48) = 0;
      *(void *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_26AF9F718 = v39;
      char v40 = re::introspectionAllocator((re *)v39);
      uint64_t v42 = re::introspect_BOOL((re *)1, v41);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v40 + 32))(v40, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "ignoreClockSourceAnchor";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x900000000BLL;
      *(_DWORD *)(v43 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF9F720 = v43;
      unint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v45 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        uint64_t v45 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v45;
        initInfo_CMTime(v45);
      }
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "latestSeekTarget";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x940000000CLL;
      *(_DWORD *)(v46 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF9F728 = v46;
      __cxa_guard_release(&qword_26AF9F520);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 12;
  *((void *)this + 8) = &qword_26AF9F6D0;
  *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = re::internal::defaultConstruct<re::ClockOrTimebase>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = re::internal::defaultDestruct<re::ClockOrTimebase>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ClockOrTimebase>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ClockOrTimebase>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

__n128 re::internal::defaultConstruct<re::ClockOrTimebase>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0x3FF0000000000000;
  uint64_t v3 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)(a3 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *MEMORY[0x263F010E0];
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(a3 + 56) = v5;
  *(__n128 *)(a3 + 64) = result;
  *(void *)(a3 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v5;
  *(void *)(a3 + 88) = 0x3FF0000000000000;
  *(void *)(a3 + 112) = v5;
  *(__n128 *)(a3 + 96) = result;
  *(__n128 *)(a3 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = result;
  *(void *)(a3 + 136) = v5;
  *(unsigned char *)(a3 + 144) = 0;
  *(void *)(a3 + 164) = v5;
  *(__n128 *)(a3 + 148) = result;
  return result;
}

__n128 re::internal::defaultConstructV2<re::ClockOrTimebase>(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  uint64_t v1 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *MEMORY[0x263F010E0];
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v3;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  *(void *)(a1 + 112) = v3;
  *(__n128 *)(a1 + 96) = result;
  *(__n128 *)(a1 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = result;
  *(void *)(a1 + 136) = v3;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 164) = v3;
  *(__n128 *)(a1 + 148) = result;
  return result;
}

void *re::allocInfo_TimebaseTree(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F530, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F530))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F7A8, "TimebaseTree");
    __cxa_guard_release(&qword_26AF9F530);
  }
  return &unk_26AF9F7A8;
}

void re::initInfo_TimebaseTree(re *this, re::IntrospectionBase *a2)
{
  v27[0] = 0x3DB5CEF367814FF8;
  v27[1] = "TimebaseTree";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F538, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF9F538);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v5, v6);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "nodes";
      *(void *)(v7 + 16) = &qword_26AF9F680;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9F608 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint64_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "masterID";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x3000000002;
      *(_DWORD *)(v11 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9F610 = v11;
      CMTime v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint64_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "timeSyncClockGrandmasterID";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x7000000003;
      *(_DWORD *)(v15 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9F618 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_double((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "currentAbsoluteTime";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x6800000004;
      *(_DWORD *)(v19 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9F620 = v19;
      unint64_t v20 = re::introspectionAllocator((re *)v19);
      int v21 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        int v21 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v21;
        initInfo_CMTime(v21);
      }
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "masterAnchor";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x3800000005;
      *(_DWORD *)(v22 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF9F628 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      uint64_t v24 = (re::IntrospectionBase *)qword_26AF9F568;
      if (!qword_26AF9F568)
      {
        uint64_t v24 = (re::IntrospectionBase *)allocInfo_CMTime();
        qword_26AF9F568 = (uint64_t)v24;
        initInfo_CMTime(v24);
      }
      uint64_t v25 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v25 = 1;
      *(void *)(v25 + 8) = "ownTimeForSourceAnchor";
      *(void *)(v25 + 16) = v24;
      *(void *)(v25 + 24) = 0;
      *(void *)(v25 + 32) = 0x5000000006;
      *(_DWORD *)(v25 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v25 + 48) = 0;
      *(void *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_26AF9F630 = v25;
      __cxa_guard_release(&qword_26AF9F538);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF9F608;
  *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = re::internal::defaultConstruct<re::TimebaseTree>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = re::internal::defaultDestruct<re::TimebaseTree>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::TimebaseTree>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::TimebaseTree>;
  re::IntrospectionRegistry::add(this, v3);
  long long v26 = v28;
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F590, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F590))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF9F680);
    qword_26AF9F680 = (uint64_t)&unk_26E7216F8;
    __cxa_guard_release(&qword_26AF9F590);
  }
  if ((byte_26AF9F501 & 1) == 0)
  {
    double v2 = (re *)re::introspect_uint64_t((re *)1, a2);
    uint64_t v3 = (uint64_t)v2;
    long long v4 = (void *)qword_26AF9F528;
    if (!qword_26AF9F528)
    {
      long long v4 = re::allocInfo_ClockOrTimebase(v2);
      qword_26AF9F528 = (uint64_t)v4;
      re::initInfo_ClockOrTimebase((re *)v4, v5);
    }
    if ((byte_26AF9F501 & 1) == 0)
    {
      byte_26AF9F501 = 1;
      int v6 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF9F680, 0);
      qword_26AF9F690 = 0x3000000007;
      dword_26AF9F698 = v6;
      word_26AF9F69C = 0;
      *(void *)&xmmword_26AF9F6A0 = 0;
      *((void *)&xmmword_26AF9F6A0 + 1) = 0xFFFFFFFFLL;
      qword_26AF9F6B0 = v3;
      unk_26AF9F6B8 = 0;
      qword_26AF9F6C0 = (uint64_t)v4;
      unk_26AF9F6C8 = 0;
      qword_26AF9F680 = (uint64_t)&unk_26E7216F8;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)&qword_26AF9F680, (const re::IntrospectionBase *)&v25);
      if (v26) {
        CMTime v9 = v27;
      }
      else {
        CMTime v9 = (char *)&v26 + 1;
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      long long v10 = *(_OWORD *)(v3 + 32);
      long long v20 = *((_OWORD *)v4 + 2);
      long long v21 = v10;
      uint64_t v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v22);
      if (v11)
      {
        uint64_t v12 = *v11;
        *((void *)&v19 + 1) = v12;
      }
      else
      {
        uint64_t v25 = 0x449AD97C4B77BED4;
        long long v26 = "_CompareFunc";
        int v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v25);
        if (v13)
        {
          uint64_t v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(void *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          uint64_t v15 = (void *)v25;
          uint64_t v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (uint64_t v16 = *v31,
              uint64_t v25 = v14,
              long long v26 = v16,
              LODWORD(v27) = -1,
              (__int16 v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v30.var0 + 768, &v25)) == 0)|| !*(void *)v17)
        {
          long long v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        long long v23 = v20;
        long long v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_26AF9F6A0 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

__n128 re::internal::defaultConstruct<re::TimebaseTree>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 36) = 0x7FFFFFFFLL;
  *(void *)(a3 + 48) = 0;
  uint64_t v3 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)(a3 + 56) = *MEMORY[0x263F010E0];
  uint64_t v5 = *(void *)(v3 + 16);
  *(void *)(a3 + 72) = v5;
  *(__n128 *)(a3 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = result;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = v5;
  *(unsigned char *)(a3 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  return result;
}

double re::internal::defaultDestruct<re::TimebaseTree>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a3);
}

__n128 re::internal::defaultConstructV2<re::TimebaseTree>(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  *(void *)(a1 + 48) = 0;
  uint64_t v1 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)(a1 + 56) = *MEMORY[0x263F010E0];
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(a1 + 72) = v3;
  *(__n128 *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = result;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = v3;
  *(unsigned char *)(a1 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  return result;
}

uint64_t re::introspect_TimebaseTree(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseTree", (uint64_t (*)(re::internal *))re::allocInfo_TimebaseTree, (re::IntrospectionBase *(*)(void))re::initInfo_TimebaseTree, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimebaseTree>, this);
}

void *re::allocInfo_TimebaseService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F540))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F820, "TimebaseService");
    __cxa_guard_release(&qword_26AF9F540);
  }
  return &unk_26AF9F820;
}

void re::initInfo_TimebaseService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x483E17396C8F9B2ELL;
  v5[1] = "TimebaseService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((void *)this + 11) = re::internal::defaultRetain<re::TimebaseService>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::TimebaseService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_TimebaseService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_TimebaseService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseService", (uint64_t (*)(re::internal *))re::allocInfo_TimebaseService, (re::IntrospectionBase *(*)(void))re::initInfo_TimebaseService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TimebaseService>, this);
}

id re::TimebaseLog(re *this)
{
  if (qword_26AF9F550 != -1) {
    dispatch_once(&qword_26AF9F550, &__block_literal_global_47);
  }
  uint64_t v1 = (void *)qword_26AF9F548;
  return v1;
}

void ___ZN2re11TimebaseLogEv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.re", "Timebase");
  uint64_t v1 = (void *)qword_26AF9F548;
  qword_26AF9F548 = (uint64_t)v0;
}

void *allocInfo_CMTime(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F558, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F558))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F898, "CMTime");
    __cxa_guard_release(&qword_26AF9F558);
  }
  return &unk_26AF9F898;
}

void initInfo_CMTime(re::IntrospectionBase *a1)
{
  v21[0] = 3983742126;
  v21[1] = "CMTime";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)a1 + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F560, memory_order_acquire) & 1) == 0)
  {
    uint64_t v3 = (re *)__cxa_guard_acquire(&qword_26AF9F560);
    if (v3)
    {
      long long v4 = re::introspectionAllocator(v3);
      long long v6 = re::introspect_int64_t((re *)1, v5);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "value";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF9F598 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_int((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "timescale";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x800000002;
      *(_DWORD *)(v11 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF9F5A0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "flags";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0xC00000003;
      *(_DWORD *)(v15 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF9F5A8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_int64_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "epoch";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x1000000004;
      *(_DWORD *)(v19 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF9F5B0 = v19;
      __cxa_guard_release(&qword_26AF9F560);
    }
  }
  *((void *)a1 + 2) = 0x1800000008;
  *((_DWORD *)a1 + 6) = 4;
  *((_WORD *)a1 + 14) = 1;
  *((_DWORD *)a1 + 14) = 4;
  *((void *)a1 + 8) = &qword_26AF9F598;
  *((void *)a1 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = re::internal::defaultConstruct<CMTime>;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = re::internal::defaultDestruct<CMTime>;
  *((void *)a1 + 13) = re::internal::defaultConstructV2<CMTime>;
  *((void *)a1 + 14) = re::internal::defaultDestructV2<CMTime>;
  re::IntrospectionRegistry::add(a1, v2);
  long long v20 = v22;
}

uint64_t re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 200 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 200 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 200 * v4 + 16) == v2) {
        return v6 + 200 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 200 * v4 + 24;
}

uint64_t re::TimebaseTree::rootID(re::TimebaseTree *this)
{
  if (*((_DWORD *)this + 7))
  {
    uint64_t v2 = *((unsigned int *)this + 8);
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = 0;
    if (v2)
    {
      uint64_t v5 = (int *)(v3 + 8);
      while (1)
      {
        int v6 = *v5;
        v5 += 50;
        if (v6 < 0) {
          break;
        }
        if (v2 == ++v4)
        {
          LODWORD(v4) = *((_DWORD *)this + 8);
          break;
        }
      }
    }
    uint64_t v10 = *(void *)(v3 + 200 * v4 + 16);
    if (v10)
    {
      int v7 = -1;
      while (++v7 < *((_DWORD *)this + 7))
      {
        uint64_t result = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this, &v10);
        if (result)
        {
          uint64_t v9 = result;
          uint64_t result = v10;
          uint64_t v10 = *(void *)(v9 + 24);
          if (v10) {
            continue;
          }
        }
        return result;
      }
    }
  }
  return 0;
}

re *re::TimebaseService::CreateAudioClock(re::TimebaseService *this, OpaqueCMClock **a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  CMClockRef HostTimeClock = 0;
  uint64_t v2 = (re *)re::ProxyAudioClockCreate((re *)&HostTimeClock, a2);
  if (v2)
  {
    int v3 = (int)v2;
    uint64_t v4 = re::TimebaseLog(v2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      uint64_t v9 = "CreateAudioClock";
      __int16 v10 = 1024;
      int v11 = 156;
      __int16 v12 = 1024;
      int v13 = v3;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "%s:%d error: %d", buf, 0x18u);
    }
  }
  uint64_t result = HostTimeClock;
  if (!HostTimeClock)
  {
    int v6 = re::TimebaseLog(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "AudioClock is unavailable! Falling back to host clock.", buf, 2u);
    }

    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CFRetain(HostTimeClock);
    return HostTimeClock;
  }
  return result;
}

uint64_t re::TimebaseManager::TimebaseManager(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E721618;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(void *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = a2;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 28re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 324) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  if (a2)
  {
    uint64_t v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    *(void *)&long long v9 = a1;
    *((void *)&v9 + 1) = re::TimebaseManager::didChangeSharedClocks;
    *(void *)&long long v10 = 0;
    *((void *)&v10 + 1) = re::Event<re::SharedClockService,OpaqueCMClock *,OpaqueCMClock *,unsigned long long>::createSubscription<re::TimebaseManager>(re::TimebaseManager *,REEventHandlerResult (re::TimebaseManager::*)(re::SharedClockService*,OpaqueCMClock *,OpaqueCMClock *,unsigned long long))::{lambda(re::SharedClockService*,re::Event<re::SharedClockService,OpaqueCMClock *,OpaqueCMClock *,unsigned long long>::Subscription const&,OpaqueCMClock *&&,OpaqueCMClock *&,unsigned long long &&)#1}::__invoke;
    re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf((uint64_t)v4, &v9, (uint64_t)v11);
    if (!v11[0])
    {
      if (*((_DWORD *)v4 + 20))
      {
        v11[0] = 1;
        long long v12 = v9;
        long long v13 = v10;
        re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add((uint64_t)v4 + 40, (uint64_t)v11);
      }
      else
      {
        re::DynamicArray<re::EvaluationRegister>::add(v4, (uint64_t)&v9);
      }
    }
    float v5 = *(float *)(a1 + 64);
  }
  else
  {
    float v5 = 1.0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1 + 32, vcvtps_u32_f32(64.0 / v5));
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1 + 72, vcvtps_u32_f32(64.0 / *(float *)(a1 + 104)));
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1 + 112, vcvtps_u32_f32(64.0 / *(float *)(a1 + 144)));
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1 + 152, vcvtps_u32_f32(64.0 / *(float *)(a1 + 184)));
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1 + 192, vcvtps_u32_f32(64.0 / *(float *)(a1 + 224)));
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v6, HostTimeClock, (CMTimebaseRef *)(a1 + 232));
  return a1;
}

uint64_t re::TimebaseManager::didChangeSharedClocks(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  os_unfair_lock_t v79 = (os_unfair_lock_t)(a1 + 24);
  char v80 = 1;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  CMClockOrTimebaseRef v11 = *(CMClockOrTimebaseRef *)(a1 + 272);
  if (a3) {
    CFTypeRef v12 = CFRetain(a3);
  }
  else {
    CFTypeRef v12 = 0;
  }
  *(void *)(a1 + 272) = v12;
  CMClockOrTimebaseRef v13 = *(CMClockOrTimebaseRef *)(a1 + 264);
  if (a4) {
    CFTypeRef v14 = CFRetain(a4);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)(a1 + 264) = v14;
  uint64_t v15 = *(const void **)(a1 + 280);
  if (!v15)
  {
    re::TimebaseManager::updatePrimarySharedClock((re::TimebaseManager *)a1, v9, v10);
    uint64_t v15 = *(const void **)(a1 + 280);
  }
  re::TimebaseManager::updatePrimarySharedClock((re::TimebaseManager *)a1, v9, v10);
  unint64_t v16 = a1 + 72;
  __int16 v17 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>((void *)(a1 + 72), (unint64_t)v15);
  if (!v17) {
    goto LABEL_69;
  }
  double v71 = (uint64_t *)(a1 + 72);
  CFTypeRef cf = v15;
  v70 = v17;
  unint64_t v18 = v17[3];
  *(void *)&long long v73 = v18;
  if (std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)(a1 + 112), v18))
  {
    CFTypeRef v19 = CFRetain(*(CFTypeRef *)(a1 + 280));
    std::__hash_table<std::__hash_value_type<unsigned long long,void const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1 + 112, v18, &v73)[3] = v19;
    CFRelease(cf);
  }
  unint64_t v20 = *(void *)(a1 + 280);
  unint64_t v21 = 0x9DDFEA08EB382D69 * (((8 * v20) + 8) ^ HIDWORD(v20));
  unint64_t v22 = 0x9DDFEA08EB382D69 * (HIDWORD(v20) ^ (v21 >> 47) ^ v21);
  unint64_t v23 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
  unint64_t v24 = *(void *)(a1 + 80);
  if (v24)
  {
    uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v16 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
      if (v23 >= v24) {
        unint64_t v16 = v23 % v24;
      }
    }
    else
    {
      unint64_t v16 = v23 & (v24 - 1);
    }
    long long v26 = *(void ***)(*v71 + 8 * v16);
    if (v26)
    {
      uint64_t v27 = (char *)*v26;
      if (*v26)
      {
        do
        {
          unint64_t v28 = *((void *)v27 + 1);
          if (v28 == v23)
          {
            if (*((void *)v27 + 2) == v20)
            {
              unint64_t v68 = (void *)(a1 + 72);
              uint64_t v15 = cf;
              goto LABEL_52;
            }
          }
          else
          {
            if (v25.u32[0] > 1uLL)
            {
              if (v28 >= v24) {
                v28 %= v24;
              }
            }
            else
            {
              v28 &= v24 - 1;
            }
            if (v28 != v16) {
              break;
            }
          }
          uint64_t v27 = *(char **)v27;
        }
        while (v27);
      }
    }
  }
  uint64_t v27 = (char *)operator new(0x48uLL);
  long long v69 = (void *)(a1 + 88);
  *((void *)&v76 + 1) = a1 + 88;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v23;
  *((void *)v27 + 2) = v20;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *((_DWORD *)v27 + 16) = 1065353216;
  LOBYTE(v77) = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 96) + 1);
  float v30 = *(float *)(a1 + 104);
  unint64_t v68 = (void *)(a1 + 72);
  if (!v24 || (float)(v30 * (float)v24) < v29)
  {
    BOOL v31 = v24 < 3 || (v24 & (v24 - 1)) != 0;
    unint64_t v32 = v31 | (2 * v24);
    unint64_t v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33) {
      size_t v34 = v33;
    }
    else {
      size_t v34 = v32;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v71, v34);
    unint64_t v24 = *(void *)(a1 + 80);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24) {
        unint64_t v16 = v23 % v24;
      }
      else {
        unint64_t v16 = v23;
      }
    }
    else
    {
      unint64_t v16 = (v24 - 1) & v23;
    }
  }
  uint64_t v35 = *v71;
  uint64_t v36 = *(void **)(*v71 + 8 * v16);
  if (v36)
  {
    *(void *)uint64_t v27 = *v36;
    uint64_t v15 = cf;
  }
  else
  {
    *(void *)uint64_t v27 = *v69;
    *long long v69 = v27;
    *(void *)(v35 + 8 * v16) = v69;
    uint64_t v15 = cf;
    if (!*(void *)v27) {
      goto LABEL_51;
    }
    unint64_t v37 = *(void *)(*(void *)v27 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v37 >= v24) {
        v37 %= v24;
      }
    }
    else
    {
      v37 &= v24 - 1;
    }
    uint64_t v36 = (void *)(*v71 + 8 * v37);
  }
  *uint64_t v36 = v27;
LABEL_51:
  *(void *)&long long v76 = 0;
  ++*(void *)(a1 + 96);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>>>>::reset[abi:nn180100]((uint64_t)&v76);
LABEL_52:
  uint64_t v38 = *((void *)v27 + 4);
  *((void *)v27 + 3) = v70[3];
  *((void *)v27 + 4) = 0;
  uint64_t v39 = v70[4];
  v70[4] = 0;
  char v40 = (void *)*((void *)v27 + 4);
  *((void *)v27 + 4) = v39;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (void *)v70[4];
  v70[4] = v38;
  if (v41) {
    operator delete(v41);
  }
  uint64_t v42 = *((void *)v27 + 6);
  uint64_t v43 = *((void *)v27 + 5);
  uint64_t v44 = v70[6];
  *((void *)v27 + 5) = v70[5];
  v70[5] = v43;
  *((void *)v27 + 6) = v44;
  v70[6] = v42;
  uint64_t v45 = *((void *)v27 + 7);
  *((void *)v27 + 7) = v70[7];
  v70[7] = v45;
  int v46 = *((_DWORD *)v27 + 16);
  *((_DWORD *)v27 + 16) = *((_DWORD *)v70 + 16);
  *((_DWORD *)v70 + 16) = v46;
  if (*((void *)v27 + 7))
  {
    unint64_t v47 = *((void *)v27 + 5);
    unint64_t v48 = *(void *)(*((void *)v27 + 6) + 8);
    if ((v47 & (v47 - 1)) != 0)
    {
      if (v48 >= v47) {
        v48 %= v47;
      }
    }
    else
    {
      v48 &= v47 - 1;
    }
    *(void *)(*((void *)v27 + 4) + 8 * v48) = v27 + 48;
  }
  if (v45)
  {
    unint64_t v49 = v70[5];
    unint64_t v50 = *(void *)(v70[6] + 8);
    if ((v49 & (v49 - 1)) != 0)
    {
      if (v50 >= v49) {
        v50 %= v49;
      }
    }
    else
    {
      v50 &= v49 - 1;
    }
    *(void *)(v70[4] + 8 * v5re::VariableStepTimer::setClock((uint64_t)this, 0) = v70 + 6;
  }
  std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::__erase_unique<void const*>(v68, (unint64_t)v15);
LABEL_69:
  for (unint64_t i = *(void **)(a1 + 88); i; unint64_t i = (void *)*i)
  {
    for (unint64_t j = (void *)i[6]; j; unint64_t j = (void *)*j)
    {
      unint64_t v53 = j[2];
      *(void *)(v53 + 112) = a5;
      uint64_t v54 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 288, v53);
      if (v54) {
        (*(void (**)(void))(*(void *)v54 + 16))();
      }
    }
  }
  long long v76 = 0u;
  long long v77 = 0u;
  int v78 = 1065353216;
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  long long v55 = *(uint64_t ***)(a1 + 128);
  if (v55)
  {
    while (1)
    {
      CFTypeID v56 = CFGetTypeID(v55[3]);
      if (v56 == CMTimebaseGetTypeID()) {
        break;
      }
LABEL_92:
      long long v55 = (uint64_t **)*v55;
      if (!v55) {
        goto LABEL_93;
      }
    }
    CMClockOrTimebaseRef v57 = CMTimebaseCopySource((CMTimebaseRef)v55[3]);
    CMClockOrTimebaseRef v58 = v57;
    if (*(void *)(a1 + 264)
      && (v57 != v11 ? (BOOL v59 = v57 == v13) : (BOOL v59 = 1),
          v59 || re::TimebaseManager::matchesAudioClock((re::TimebaseManager *)a1, v57)))
    {
      CFTypeRef v60 = CFRetain(v55[3]);
      uint64_t v61 = (float *)&v73;
    }
    else
    {
      if (v58 != v11 && v58 != v13) {
        goto LABEL_91;
      }
      CFTypeRef v60 = CFRetain(v55[3]);
      uint64_t v61 = (float *)&v76;
    }
    std::__hash_table<OpaqueCMTimebase *,std::hash<OpaqueCMTimebase *>,std::equal_to<OpaqueCMTimebase *>,std::allocator<OpaqueCMTimebase *>>::__emplace_unique_key_args<OpaqueCMTimebase *,OpaqueCMTimebase *>(v61, (unint64_t)v60, (uint64_t)v60);
LABEL_91:
    CFRelease(v58);
    goto LABEL_92;
  }
LABEL_93:
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v15) {
    CFRelease(v15);
  }
  std::unique_lock<re::UnfairLock>::unlock((uint64_t)&v79);
  for (k = (uint64_t **)v77; k; k = (uint64_t **)*k)
  {
    unint64_t v64 = *(OpaqueCMClock **)(a1 + 272);
    if (!v64) {
      unint64_t v64 = *(OpaqueCMClock **)(a1 + 280);
    }
    CMTimebaseSetSourceClock((CMTimebaseRef)k[2], v64);
    CFRelease(k[2]);
  }
  for (m = (uint64_t **)v74; m; m = (uint64_t **)*m)
  {
    uint64_t v66 = *(OpaqueCMClock **)(a1 + 264);
    if (!v66) {
      uint64_t v66 = *(OpaqueCMClock **)(a1 + 280);
    }
    CMTimebaseSetSourceClock((CMTimebaseRef)m[2], v66);
    CFRelease(m[2]);
  }
  re::TimebaseManager::_beforeFrameUpdate((os_unfair_lock_s *)a1);
  re::TimebaseManager::_afterFrameUpdate((os_unfair_lock_s *)a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v73);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v76);
  if (v80) {
    os_unfair_lock_unlock(v79);
  }
  return 0;
}

void re::TimebaseManager::~TimebaseManager(re::TimebaseManager *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
    if (*(void *)(v3 + 16))
    {
      uint64_t v4 = v3;
      unint64_t v5 = 0;
      uint64_t v6 = v3 + 40;
      do
      {
        int v7 = (re::TimebaseManager **)(*(void *)(v4 + 32) + 32 * v5);
        if (*v7 == this)
        {
          if (!*(_DWORD *)(v4 + 80))
          {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((void *)v4, v5);
            continue;
          }
          v28[0] = 0;
          long long v8 = *((_OWORD *)v7 + 1);
          long long v29 = *(_OWORD *)v7;
          long long v30 = v8;
          re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(v6, (uint64_t)v28);
        }
        ++v5;
      }
      while (v5 < *(void *)(v4 + 16));
    }
  }
  uint64_t v9 = (const void *)*((void *)this + 34);
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = (const void *)*((void *)this + 33);
  if (v10) {
    CFRelease(v10);
  }
  CMClockOrTimebaseRef v11 = (const void *)*((void *)this + 35);
  if (v11) {
    CFRelease(v11);
  }
  CFTypeRef v12 = (const void *)*((void *)this + 32);
  if (v12) {
    CFRelease(v12);
  }
  for (unint64_t i = (uint64_t **)*((void *)this + 6); i; unint64_t i = (uint64_t **)*i)
    re::TimebaseManager::cleanUpLeafLocallyControlledTimebase(this, (OpaqueCMTimebase *)i[2]);
  for (unint64_t j = (uint64_t **)*((void *)this + 16); j; unint64_t j = (uint64_t **)*j)
    CFRelease(j[3]);
  for (k = (uint64_t **)*((void *)this + 21); k; k = (uint64_t **)*k)
    CFRelease(k[3]);
  CFRelease(*((CFTypeRef *)this + 29));
  re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 36);
  unint64_t v16 = (void *)*((void *)this + 26);
  if (v16)
  {
    do
    {
      __int16 v17 = (void *)*v16;
      operator delete(v16);
      unint64_t v16 = v17;
    }
    while (v17);
  }
  unint64_t v18 = (void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v18) {
    operator delete(v18);
  }
  CFTypeRef v19 = (void *)*((void *)this + 21);
  if (v19)
  {
    do
    {
      unint64_t v20 = (void *)*v19;
      operator delete(v19);
      CFTypeRef v19 = v20;
    }
    while (v20);
  }
  unint64_t v21 = (void *)*((void *)this + 19);
  *((void *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  if (v21) {
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 16);
  if (v22)
  {
    do
    {
      unint64_t v23 = (void *)*v22;
      operator delete(v22);
      unint64_t v22 = v23;
    }
    while (v23);
  }
  unint64_t v24 = (void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v24) {
    operator delete(v24);
  }
  uint8x8_t v25 = (void *)*((void *)this + 11);
  if (v25)
  {
    do
    {
      long long v26 = (void *)*v25;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(v25 + 4));
      operator delete(v25);
      uint8x8_t v25 = v26;
    }
    while (v26);
  }
  uint64_t v27 = (void *)*((void *)this + 9);
  *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  if (v27) {
    operator delete(v27);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 32);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::TimebaseManager::~TimebaseManager(this);
  JUMPOUT(0x237DBCBD0);
}

void re::TimebaseManager::cleanUpLeafLocallyControlledTimebase(re::TimebaseManager *this, OpaqueCMTimebase *a2)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, this, (CFNotificationName)*MEMORY[0x263F01108], a2);
  unint64_t v5 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v5, this, (CFNotificationName)*MEMORY[0x263F010F8], a2);
  uint64_t v6 = CFNotificationCenterGetLocalCenter();
  CFStringRef v7 = (const __CFString *)*MEMORY[0x263F01100];
  CFNotificationCenterRemoveObserver(v6, this, v7, a2);
}

re *re::TimebaseManager::audioClock(re::TimebaseManager *this, OpaqueCMClock **a2)
{
  uint64_t result = (re *)*((void *)this + 32);
  if (!result)
  {
    uint64_t result = re::TimebaseService::CreateAudioClock(0, a2);
    *((void *)this + 32) = result;
  }
  return result;
}

CMClockRef re::TimebaseManager::hostClock(re::TimebaseManager *this)
{
  CMClockRef result = (CMClockRef)*((void *)this + 31);
  if (!result)
  {
    CMClockRef result = CMClockGetHostTimeClock();
    *((void *)this + 31) = result;
  }
  return result;
}

void re::TimebaseManager::updatePrimarySharedClock(re::TimebaseManager *this, uint64_t a2, OpaqueCMClock **a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void *)*((void *)this + 33);
  if (v4 || (uint64_t v4 = (const void *)*((void *)this + 34)) != 0)
  {
    *((void *)this + 35) = CFRetain(v4);
  }
  else
  {
    CMClockRef HostTimeClock = (re *)*((void *)this + 31);
    if (!HostTimeClock)
    {
      CMClockRef HostTimeClock = CMClockGetHostTimeClock();
      *((void *)this + 31) = HostTimeClock;
    }
    uint64_t v6 = (re *)re::ManualCMClockCreateWithReference(HostTimeClock, (re::TimebaseManager *)((char *)this + 280), a3);
    if (v6)
    {
      int v7 = (int)v6;
      long long v8 = re::TimebaseLog(v6);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315650;
        long long v10 = "updatePrimarySharedClock";
        __int16 v11 = 1024;
        int v12 = 280;
        __int16 v13 = 1024;
        int v14 = v7;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v9, 0x18u);
      }
    }
  }
}

BOOL re::TimebaseManager::matchesAudioClock(re::TimebaseManager *this, CMClockOrTimebaseRef clockOrTimebase1)
{
  AudioClock = (re *)*((void *)this + 32);
  if (!AudioClock)
  {
    AudioClock = re::TimebaseService::CreateAudioClock(this, 0);
    *((void *)this + 32) = AudioClock;
  }
  if (!CMSyncMightDrift(clockOrTimebase1, AudioClock)) {
    return 1;
  }
  if (*((unsigned char *)this + 336)) {
    return 0;
  }
  uint64_t v6 = +[REProxyAudioClockManager sharedInstance];
  int v7 = (const void *)[v6 copyAudioClock];

  if (!v7) {
    return 0;
  }
  BOOL v5 = CMSyncMightDrift(clockOrTimebase1, v7) == 0;
  CFRelease(v7);
  return v5;
}

void std::unique_lock<re::UnfairLock>::unlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)a1);
    *(unsigned char *)(a1 + 8) = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    re::TimebaseManager::_beforeFrameUpdate(v2);
  }
}

void re::TimebaseManager::_beforeFrameUpdate(os_unfair_lock_s *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = this + 6;
  os_unfair_lock_lock(this + 6);
  uint64_t v3 = *(uint64_t ***)&this[22]._os_unfair_lock_opaque;
  if (v3)
  {
    uint64_t v4 = (CMTime *)MEMORY[0x263F010E0];
    do
    {
      CFTypeID v5 = CFGetTypeID(v3[2]);
      if (v5 == CMClockGetTypeID())
      {
        long long v8 = v3[2];
        int v9 = *(uint64_t **)&this[70]._os_unfair_lock_opaque;
        if (!v9)
        {
          re::TimebaseManager::updatePrimarySharedClock((re::TimebaseManager *)this, v6, v7);
          int v9 = *(uint64_t **)&this[70]._os_unfair_lock_opaque;
        }
        if (v8 == v9)
        {
          memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
          CMSyncGetTime(&outOfClockOrTimebaseAnchorTime, v3[2]);
          for (unint64_t i = v3[6]; i; unint64_t i = (uint64_t *)*i)
          {
            uint64_t v15 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(i[2], (unint64_t)v3[3]);
            if (v15)
            {
              *(CMTime *)(v15 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = outOfClockOrTimebaseAnchorTime;
            }
            else
            {
              unint64_t v16 = re::TimebaseLog(0);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
              {
                LOWORD(outRelativeToClockOrTimebaseAnchorTime.value) = 0;
                _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Didn't find expected shared clock in TimebaseTree during beforeFrameUpdate", (uint8_t *)&outRelativeToClockOrTimebaseAnchorTime, 2u);
              }
            }
          }
        }
        else
        {
          Float64 v42 = 0.0;
          Float64 outRelativeRate = 0.0;
          long long v10 = *(const void **)&this[66]._os_unfair_lock_opaque;
          if (v10)
          {
            RelativeRateAndAnchorTime = (re *)CMSyncGetRelativeRateAndAnchorTime(v3[2], v10, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
            if (RelativeRateAndAnchorTime)
            {
              int v12 = (int)RelativeRateAndAnchorTime;
              __int16 v13 = re::TimebaseLog(RelativeRateAndAnchorTime);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v46.value) = 136315650;
                *(CMTimeValue *)((char *)&v46.value + 4) = (CMTimeValue)"_beforeFrameUpdate";
                LOWORD(v46.flags) = 1024;
                *(CMTimeFlags *)((char *)&v46.flags + 2) = 467;
                WORD1(v46.epoch) = 1024;
                HIDWORD(v46.epoch) = v12;
                _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v46, 0x18u);
              }
            }
          }
          else
          {
            Float64 outRelativeRate = 1.0;
            CMTime outOfClockOrTimebaseAnchorTime = *v4;
            CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
          }
          __int16 v17 = *(const void **)&this[68]._os_unfair_lock_opaque;
          if (v17)
          {
            unint64_t v18 = (re *)CMSyncGetRelativeRateAndAnchorTime(v3[2], v17, &v42, &v46, &v40);
            if (v18)
            {
              int v19 = (int)v18;
              unint64_t v20 = re::TimebaseLog(v18);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v45.value) = 136315650;
                *(CMTimeValue *)((char *)&v45.value + 4) = (CMTimeValue)"_beforeFrameUpdate";
                LOWORD(v45.flags) = 1024;
                *(CMTimeFlags *)((char *)&v45.flags + 2) = 477;
                WORD1(v45.epoch) = 1024;
                HIDWORD(v45.epoch) = v19;
                _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v45, 0x18u);
              }
            }
          }
          else
          {
            Float64 v42 = 1.0;
            CMTime v46 = *v4;
            CMTime v40 = v46;
          }
          for (unint64_t j = v3[6]; j; unint64_t j = (uint64_t *)*j)
          {
            uint64_t v22 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(j[2], (unint64_t)v3[3]);
            if (v22)
            {
              uint64_t v23 = v22;
              *(CFAbsoluteTime *)(j[2] + 104) = CFAbsoluteTimeGetCurrent();
              unint64_t v24 = *(const void **)&this[68]._os_unfair_lock_opaque;
              if (v24)
              {
                CMTime time = *(CMTime *)(v23 + 96);
                CMSyncConvertTime(&v45, &time, v3[2], v24);
              }
              else
              {
                CMTime v45 = *v4;
              }
              long long v26 = *(const void **)&this[66]._os_unfair_lock_opaque;
              if (v26)
              {
                CMTime v37 = *(CMTime *)(v23 + 40);
                CMSyncConvertTime(&v38, &v37, v3[2], v26);
              }
              else
              {
                CMTime v38 = *v4;
              }
              CMTime lhs = v45;
              CMTime rhs = *(CMTime *)(v23 + 120);
              CMTimeSubtract(&v36, &lhs, &rhs);
              double Seconds = CMTimeGetSeconds(&v36);
              CMTime v32 = v38;
              CMTime v31 = *(CMTime *)(v23 + 64);
              CMTimeSubtract(&v33, &v32, &v31);
              double v28 = CMTimeGetSeconds(&v33);
              if (qword_26AF9F578 != -1) {
                dispatch_once(&qword_26AF9F578, &__block_literal_global_54);
              }
              if (fabs(Seconds) > *(double *)&qword_26AF9F570 || fabs(v28) > *(double *)&qword_26AF9F570)
              {
                *(Float64 *)(v23 + 32) = outRelativeRate;
                *(CMTime *)(v23 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = outOfClockOrTimebaseAnchorTime;
                *(CMTime *)(v23 + 64) = outRelativeToClockOrTimebaseAnchorTime;
                *(Float64 *)(v23 + 88) = v42;
                *(CMTime *)(v23 + 96) = v46;
                long long v29 = *(_OWORD *)&v40.value;
                *(void *)(v23 + 136) = v40.epoch;
                *(_OWORD *)(v23 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = v29;
                uint64_t v30 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&this[72], j[2]);
                if (v30) {
                  (*(void (**)(void))(*(void *)v30 + 16))();
                }
              }
            }
            else
            {
              uint8x8_t v25 = re::TimebaseLog(0);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v45.value) = 0;
                _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Didn't find expected clock in TimebaseTree during beforeFrameUpdate", (uint8_t *)&v45, 2u);
              }
            }
          }
        }
      }
      uint64_t v3 = (uint64_t **)*v3;
    }
    while (v3);
  }
  os_unfair_lock_unlock(v2);
}

void re::TimebaseManager::_afterFrameUpdate(os_unfair_lock_s *this)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  uint64_t v2 = this + 6;
  os_unfair_lock_lock(this + 6);
  v143 = (re::TimebaseManager *)this;
  if (*(void *)&this[54]._os_unfair_lock_opaque)
  {
    memset(v173, 0, sizeof(v173));
    int v174 = 1065353216;
    CFTypeID v5 = *(uint64_t **)&this[52]._os_unfair_lock_opaque;
    v137 = v2;
    if (v5)
    {
      char v138 = 0;
      v139 = this + 66;
      v145 = this + 68;
      v148 = this + 38;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      while (1)
      {
        if (!*(void *)&v139->_os_unfair_lock_opaque
          || (uint64_t v6 = *((void *)v143 + 30)) == 0
          || (uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6),
              long long v8 = (OpaqueCMClock **)v139,
              v7 != *(void *)(v5[2] + 112)))
        {
          long long v8 = (OpaqueCMClock **)v145;
        }
        int v9 = *v8;
        if (!*v8)
        {
          int v9 = (OpaqueCMClock *)*((void *)v143 + 35);
          if (!v9)
          {
            re::TimebaseManager::updatePrimarySharedClock(v143, (uint64_t)v3, v4);
            int v9 = (OpaqueCMClock *)*((void *)v143 + 35);
          }
        }
        uint64_t v10 = v5[2];
        if (*(unsigned char *)(v10 + 120) == 2)
        {
          uint64_t v11 = re::TimebaseTree::rootID((re::TimebaseTree *)v5[2]);
          int v12 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v148, v11);
          if (v9)
          {
            if (v11)
            {
              if (v12)
              {
                __int16 v13 = (re *)v12[3];
                if (v13 != v9)
                {
                  uint64_t v14 = v5[2];
                  timebaseOut.int64_t value = v11;
                  uint64_t v15 = *(unsigned int *)(v14 + 32);
                  if (v15)
                  {
                    uint64_t v16 = 0;
                    __int16 v17 = (int *)(*(void *)(v14 + 16) + 8);
                    while (1)
                    {
                      int v18 = *v17;
                      v17 += 50;
                      if (v18 < 0) {
                        break;
                      }
                      if (v15 == ++v16)
                      {
                        LODWORD(v16) = *(_DWORD *)(v14 + 32);
                        break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v16) = 0;
                  }
                  if (v15 != v16)
                  {
                    uint64_t v110 = v16;
                    do
                    {
                      v111 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v148, *(void *)(*(void *)(v14 + 16) + 200 * v110 + 16));
                      if (v111)
                      {
                        uint64_t v112 = v111;
                        CFTypeID v113 = CFGetTypeID((CFTypeRef)v111[3]);
                        if (v113 == CMTimebaseGetTypeID())
                        {
                          __int16 v114 = (OpaqueCMTimebase *)v112[3];
                          unint64_t v115 = (re *)CMTimebaseCopySource(v114);
                          if (v115 == v13)
                          {
                            OSStatus v116 = CMTimebaseSetSourceClock(v114, v9);
                            unint64_t v115 = v13;
                            if (v116)
                            {
                              v117 = re::TimebaseLog(v13);
                              if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(buf[0].value) = 136315650;
                                *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"changeSharedClock";
                                LOWORD(buf[0].flags) = 1024;
                                *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 881;
                                WORD1(buf[0].epoch) = 1024;
                                HIDWORD(buf[0].epoch) = v116;
                                _os_log_error_impl(&dword_233120000, v117, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)buf, 0x18u);
                              }

                              unint64_t v115 = v13;
                            }
                          }
                          CFRelease(v115);
                        }
                      }
                      if (*(_DWORD *)(v14 + 32) <= (v16 + 1)) {
                        int v118 = v16 + 1;
                      }
                      else {
                        int v118 = *(_DWORD *)(v14 + 32);
                      }
                      while (1)
                      {
                        uint64_t v110 = (v16 + 1);
                        if (v118 - 1 == v16) {
                          break;
                        }
                        LODWORD(v16) = v16 + 1;
                        int v119 = v110;
                        if ((*(_DWORD *)(*(void *)(v14 + 16) + 200 * v110 + 8) & 0x80000000) != 0) {
                          goto LABEL_203;
                        }
                      }
                      int v119 = v118;
LABEL_203:
                      LODWORD(v16) = v119;
                    }
                    while (v15 != v119);
                  }
                  CFTypeRef v19 = CFRetain(v9);
                  *((void *)std::__hash_table<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v148, v11, &timebaseOut)+ 3) = v19;
                  CFRelease(v13);
                  char v138 = 1;
                }
              }
            }
          }
          uint64_t v10 = v5[2];
        }
        uint64_t v144 = *(unsigned int *)(v10 + 32);
        uint64_t v20 = 0;
        if (v144)
        {
          unint64_t v21 = (int *)(*(void *)(v10 + 16) + 8);
          while (1)
          {
            int v22 = *v21;
            v21 += 50;
            if (v22 < 0) {
              break;
            }
            if (v144 == ++v20)
            {
              LODWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v10 + 32);
              break;
            }
          }
        }
        if (v144 != v20) {
          break;
        }
LABEL_31:
        CFTypeID v5 = (uint64_t *)*v5;
        if (!v5) {
          goto LABEL_215;
        }
      }
      uint64_t v23 = v20;
      v147 = v5;
      v140 = v9;
      while (1)
      {
        uint64_t v24 = *(void *)(v10 + 16) + 200 * v23;
        unint64_t v172 = 0;
        unint64_t v25 = *(void *)(v24 + 16);
        unint64_t v171 = v25;
        if (v25) {
          break;
        }
LABEL_171:
        if (*(_DWORD *)(v10 + 32) <= (v20 + 1)) {
          int v104 = v20 + 1;
        }
        else {
          int v104 = *(_DWORD *)(v10 + 32);
        }
        while (1)
        {
          uint64_t v23 = (v20 + 1);
          if (v104 - 1 == v20) {
            break;
          }
          LODWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = v20 + 1;
          int v105 = v23;
          if ((*(_DWORD *)(*(void *)(v10 + 16) + 200 * v23 + 8) & 0x80000000) != 0) {
            goto LABEL_178;
          }
        }
        int v105 = v104;
LABEL_178:
        LODWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = v105;
        if (v144 == v105) {
          goto LABEL_31;
        }
      }
      uint64_t v26 = 0;
      int64_t value = 0;
      while (1)
      {
        double v28 = value;
        uint64_t v29 = v26;
        if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v173, &v172))
        {
          goto LABEL_171;
        }
        uint64_t v30 = v5[2];
        uint64_t v31 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v30, v25);
        if (!v31)
        {
          uint64_t v103 = re::TimebaseLog(0);
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_170;
          }
          LOWORD(buf[0].value) = 0;
          uint64_t v106 = v103;
          v107 = "Failed to find expected ID";
LABEL_185:
          uint32_t v109 = 2;
LABEL_186:
          _os_log_error_impl(&dword_233120000, v106, OS_LOG_TYPE_ERROR, v107, (uint8_t *)buf, v109);
          goto LABEL_170;
        }
        uint64_t v26 = v31;
        CMTime v32 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v148, v25);
        if (!v32) {
          break;
        }
        int64_t value = (OpaqueCMTimebase *)*((void *)v32 + 3);
LABEL_65:
        *((unsigned char *)v32 + 56) = 1;
        if (!*(void *)(v26 + 24) && *(void *)(v5[2] + 48))
        {
          CMClockOrTimebaseRef v44 = CMTimebaseCopySource(value);
          if (!v44)
          {
            uint64_t v103 = re::TimebaseLog(0);
            if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf[0].value) = 0;
              uint64_t v106 = v103;
              v107 = "root timebase with external source does not have valid source";
              goto LABEL_185;
            }
LABEL_170:

            goto LABEL_171;
          }
          CMTime v45 = v44;
          memset(&v191, 0, sizeof(v191));
          CMTime time = *(CMTime *)(v5[2] + 80);
          CMSyncConvertTime(&v191, &time, value, v44);
          if (v191.flags)
          {
            CMTime lhs = v191;
            CMTime rhs = *(CMTime *)(v5[2] + 56);
            CMTimeSubtract(&v169, &lhs, &rhs);
            if (fabs(CMTimeGetSeconds(&v169)) <= 0.001) {
              goto LABEL_108;
            }
          }
          CMTime timebaseTime = *(CMTime *)(v5[2] + 80);
          CMTime immediateSourceTime = *(CMTime *)(v5[2] + 56);
          CMTime v46 = (re *)CMTimebaseSetRateAndAnchorTime(value, 1.0, &timebaseTime, &immediateSourceTime);
          if (v46)
          {
            int v47 = (int)v46;
            unint64_t v48 = re::TimebaseLog(v46);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf[0].value) = 136315650;
              *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"_afterFrameUpdate";
              LOWORD(buf[0].flags) = 1024;
              *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 699;
              WORD1(buf[0].epoch) = 1024;
              HIDWORD(buf[0].epoch) = v47;
              _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)buf, 0x18u);
            }

            CFTypeID v5 = v147;
          }
          snprintf((char *)buf, 0x64uLL, "re-anchoring tree %p with root ID %llu", (const void *)v5[2], *(void *)(v26 + 8));
          std::string::basic_string[abi:nn180100]<0>(&__p, (char *)buf);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F580, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26AF9F580))
          {
            xmmword_26AF9F5E0 = 0u;
            *(_OWORD *)&qword_26AF9F5F0 = 0u;
            dword_26AF9F600 = 1065353216;
            __cxa_guard_release(&qword_26AF9F580);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F588, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26AF9F588))
          {
            dword_26AF9F504 = 0;
            __cxa_guard_release(&qword_26AF9F588);
          }
          os_unfair_lock_lock((os_unfair_lock_t)&dword_26AF9F504);
          unint64_t v50 = re::foundationTimingLogObjects(v49);
          int v51 = 0;
          if (os_log_type_enabled((os_log_t)*v50, OS_LOG_TYPE_DEFAULT))
          {
            double Current = CFAbsoluteTimeGetCurrent();
            unint64_t v53 = std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::find<std::string>(&xmmword_26AF9F5E0, (unsigned __int8 *)&__p);
            if (v53 && Current - *((double *)v53 + 5) < 2.0)
            {
              int v51 = 0;
            }
            else
            {
              timebaseOut.int64_t value = (CMTimeValue)&__p;
              *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&xmmword_26AF9F5E0, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&timebaseOut)+ 5) = Current;
              if (qword_26AF9F5F8 == 100)
              {
                *(void *)&timebaseOut.timescale = 0;
                timebaseOut.epoch = 0;
                timebaseOut.int64_t value = (CMTimeValue)&timebaseOut.timescale;
                for (uint64_t i = qword_26AF9F5F0; i; uint64_t i = *(void *)i)
                {
                  *(void *)v175 = i + 40;
                  long long v55 = std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::__emplace_unique_key_args<double,std::piecewise_construct_t const&,std::tuple<double const&>,std::tuple<>>((uint64_t **)&timebaseOut, (double *)(i + 40), (uint64_t)&std::piecewise_construct, (uint64_t **)v175);
                  std::string::operator=((std::string *)(v55 + 5), (const std::string *)(i + 16));
                }
                std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::clear((uint64_t)&xmmword_26AF9F5E0);
                int v9 = v140;
                if (&timebaseOut.timescale != (CMTimeScale *)timebaseOut.value)
                {
                  int v56 = 10;
                  p_timescale = &timebaseOut.timescale;
                  do
                  {
                    CMClockOrTimebaseRef v58 = *(CMTimeScale ***)p_timescale;
                    BOOL v59 = p_timescale;
                    if (*(void *)p_timescale)
                    {
                      do
                      {
                        CFTypeRef v60 = v58;
                        CMClockOrTimebaseRef v58 = (CMTimeScale **)v58[1];
                      }
                      while (v58);
                    }
                    else
                    {
                      do
                      {
                        CFTypeRef v60 = (CMTimeScale **)*((void *)v59 + 2);
                        BOOL v34 = *v60 == v59;
                        BOOL v59 = (CMTimeScale *)v60;
                      }
                      while (v34);
                    }
                    double v61 = *((double *)v60 + 4);
                    if (Current - v61 >= 2.0) {
                      break;
                    }
                    *(void *)v175 = v60 + 5;
                    *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&xmmword_26AF9F5E0, (unsigned __int8 *)v60 + 40, (uint64_t)&std::piecewise_construct, (long long **)v175)+ 5) = v61;
                    uint64_t v62 = *(CMTimeScale ***)p_timescale;
                    if (*(void *)p_timescale)
                    {
                      do
                      {
                        uint64_t v63 = v62;
                        uint64_t v62 = (CMTimeScale **)v62[1];
                      }
                      while (v62);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v63 = (CMTimeScale **)*((void *)p_timescale + 2);
                        BOOL v34 = *v63 == p_timescale;
                        p_timescale = (CMTimeScale *)v63;
                      }
                      while (v34);
                    }
                    if (!--v56) {
                      break;
                    }
                    p_timescale = (CMTimeScale *)v63;
                  }
                  while (v63 != (CMTimeScale **)timebaseOut.value);
                }
                std::__tree<std::__value_type<double,std::string>,std::__map_value_compare<double,std::__value_type<double,std::string>,std::less<double>,true>,std::allocator<std::__value_type<double,std::string>>>::destroy((uint64_t)&timebaseOut, *(char **)&timebaseOut.timescale);
                int v51 = 1;
                CFTypeID v5 = v147;
              }
              else
              {
                int v51 = 1;
              }
            }
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&dword_26AF9F504);
          if (SHIBYTE(__p.epoch) < 0)
          {
            operator delete((void *)__p.value);
            if (!v51)
            {
LABEL_108:
              CFRelease(v45);
              goto LABEL_109;
            }
          }
          else if (!v51)
          {
            goto LABEL_108;
          }
          uint64_t v66 = (id)*re::foundationTimingLogObjects(v65);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            CMTimeValue v67 = v147[2];
            uint64_t v141 = *(void *)(v26 + 8);
            uint64_t v142 = *(void *)(v67 + 48);
            CMTime v163 = *(CMTime *)(v67 + 80);
            Float64 Seconds = CMTimeGetSeconds(&v163);
            CMTime v162 = *(CMTime *)(v147[2] + 56);
            Float64 v69 = CMTimeGetSeconds(&v162);
            LODWORD(timebaseOut.value) = 134219520;
            *(CMTimeValue *)((char *)&timebaseOut.value + 4) = v67;
            LOWORD(timebaseOut.flags) = 2048;
            *(void *)((char *)&timebaseOut.flags + 2) = v141;
            HIWORD(timebaseOut.epoch) = 2048;
            v181 = value;
            __int16 v182 = 2048;
            uint64_t v183 = v142;
            __int16 v184 = 2048;
            v185 = v45;
            __int16 v186 = 2048;
            Float64 v187 = Seconds;
            int v9 = v140;
            __int16 v188 = 2048;
            Float64 v189 = v69;
            _os_log_impl(&dword_233120000, v66, OS_LOG_TYPE_DEFAULT, "re-anchoring tree %p with root ID %llu (timebase %p) to source %llu (timebase %p) ownTime=%0.2f, sourceTime=%0.2f", (uint8_t *)&timebaseOut, 0x48u);
          }

          CFTypeID v5 = v147;
          goto LABEL_108;
        }
LABEL_109:
        if (!v28) {
          goto LABEL_147;
        }
        CFTypeID v70 = CFGetTypeID(v28);
        if (v70 != CMTimebaseGetTypeID()) {
          goto LABEL_147;
        }
        double v71 = (OpaqueCMTimebase *)CMTimebaseCopySource(v28);
        CFRelease(v71);
        if (v71 != value)
        {
          CFTypeID v72 = CFGetTypeID(value);
          if (v72 == CMTimebaseGetTypeID())
          {
            long long v73 = (re *)CMTimebaseSetSourceTimebase(v28, value);
            if (v73)
            {
              int v74 = (int)v73;
              int v75 = re::TimebaseLog(v73);
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
              {
LABEL_118:

                goto LABEL_119;
              }
              LODWORD(buf[0].value) = 136315650;
              *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"_afterFrameUpdate";
              LOWORD(buf[0].flags) = 1024;
              *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 728;
              WORD1(buf[0].epoch) = 1024;
              HIDWORD(buf[0].epoch) = v74;
              long long v76 = v75;
LABEL_162:
              _os_log_error_impl(&dword_233120000, v76, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)buf, 0x18u);
              goto LABEL_118;
            }
          }
          else
          {
            long long v77 = (re *)CMTimebaseSetSourceClock(v28, value);
            if (v77)
            {
              int v78 = (int)v77;
              int v75 = re::TimebaseLog(v77);
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
                goto LABEL_118;
              }
              LODWORD(buf[0].value) = 136315650;
              *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"_afterFrameUpdate";
              LOWORD(buf[0].flags) = 1024;
              *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 731;
              WORD1(buf[0].epoch) = 1024;
              HIDWORD(buf[0].epoch) = v78;
              long long v76 = v75;
              goto LABEL_162;
            }
          }
        }
LABEL_119:
        if (value == *(OpaqueCMTimebase **)&v145->_os_unfair_lock_opaque)
        {
          double v79 = *(double *)(v29 + 88);
          buf[0] = *(CMTime *)(v29 + 96);
          char v80 = (CMTime *)(v29 + 120);
        }
        else
        {
          double v79 = *(double *)(v29 + 32);
          buf[0] = *(CMTime *)(v29 + 40);
          char v80 = (CMTime *)(v29 + 64);
        }
        CMTime timebaseOut = *v80;
        double v81 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v148, *(void *)(v29 + 8));
        unint64_t v82 = v81;
        if (!*(unsigned char *)(v29 + 144) || !*(_DWORD *)v26)
        {
          if (v79 == 0.0)
          {
            if (CMTimebaseGetRate(v28) != 0.0)
            {
              uint64_t v89 = (re *)CMTimebaseSetRate(v28, 0.0);
              if (v89)
              {
                int v90 = (int)v89;
                double v91 = re::TimebaseLog(v89);
                if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v191.value) = 136315650;
                  *(CMTimeValue *)((char *)&v191.value + 4) = (CMTimeValue)"_afterFrameUpdate";
                  LOWORD(v191.flags) = 1024;
                  *(CMTimeFlags *)((char *)&v191.flags + 2) = 784;
                  WORD1(v191.epoch) = 1024;
                  HIDWORD(v191.epoch) = v90;
                  _os_log_error_impl(&dword_233120000, v91, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v191, 0x18u);
                }

                CFTypeID v5 = v147;
              }
            }
            CMTimebaseGetTime(&v157, v28);
            CMTime v156 = buf[0];
            if (CMTimeCompare(&v157, &v156))
            {
              CMTime v155 = buf[0];
              unint64_t v92 = (re *)CMTimebaseSetTime(v28, &v155);
              if (v92)
              {
                int v93 = (int)v92;
                v94 = re::TimebaseLog(v92);
                if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v191.value) = 136315650;
                  *(CMTimeValue *)((char *)&v191.value + 4) = (CMTimeValue)"_afterFrameUpdate";
                  LOWORD(v191.flags) = 1024;
                  *(CMTimeFlags *)((char *)&v191.flags + 2) = 788;
                  WORD1(v191.epoch) = 1024;
                  HIDWORD(v191.epoch) = v93;
                  char v95 = &v191;
                  long long v96 = v94;
                  goto LABEL_164;
                }
                goto LABEL_144;
              }
            }
          }
          else
          {
            memset(&v191, 0, sizeof(v191));
            CMTime v154 = buf[0];
            CMSyncConvertTime(&v191, &v154, v28, value);
            memset(&__p, 0, sizeof(__p));
            CMTime v153 = v191;
            CMTime v152 = timebaseOut;
            CMTimeSubtract(&__p, &v153, &v152);
            if (CMTimebaseGetRate(v28) != v79 || (CMTime v151 = __p, fabs(CMTimeGetSeconds(&v151)) > 0.001))
            {
              CMTime v150 = buf[0];
              CMTime v149 = timebaseOut;
              long long v97 = (re *)CMTimebaseSetRateAndAnchorTime(v28, v79, &v150, &v149);
              if (v97)
              {
                int v98 = (int)v97;
                v94 = re::TimebaseLog(v97);
                if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v175 = 136315650;
                  *(void *)&v175[4] = "_afterFrameUpdate";
                  __int16 v176 = 1024;
                  int v177 = 811;
                  __int16 v178 = 1024;
                  int v179 = v98;
                  char v95 = (CMTime *)v175;
                  long long v96 = v94;
LABEL_164:
                  _os_log_error_impl(&dword_233120000, v96, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)v95, 0x18u);
                }
LABEL_144:
              }
            }
          }
          if (v82)
          {
            uint64_t v99 = MEMORY[0x263F01090];
            *((_OWORD *)v82 + 2) = *MEMORY[0x263F01090];
            v82[6] = *(void *)(v99 + 16);
          }
          goto LABEL_147;
        }
        CMTime time1 = *(CMTime *)(v29 + 148);
        CMTime time2 = *(CMTime *)(v81 + 4);
        if (CMTimeCompare(&time1, &time2))
        {
          long long v84 = *(_OWORD *)(v29 + 148);
          uint64_t v83 = (long long *)(v29 + 148);
          *(_OWORD *)&v159.int64_t value = v84;
          v159.epoch = *((void *)v83 + 2);
          CMSyncGetTime(&v158, value);
          long long v85 = (re *)CMTimebaseSetRateAndAnchorTime(v28, v79, &v159, &v158);
          if (v85)
          {
            int v86 = (int)v85;
            float v87 = re::TimebaseLog(v85);
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v191.value) = 136315650;
              *(CMTimeValue *)((char *)&v191.value + 4) = (CMTimeValue)"_afterFrameUpdate";
              LOWORD(v191.flags) = 1024;
              *(CMTimeFlags *)((char *)&v191.flags + 2) = 762;
              WORD1(v191.epoch) = 1024;
              HIDWORD(v191.epoch) = v86;
              _os_log_error_impl(&dword_233120000, v87, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v191, 0x18u);
            }
          }
          long long v88 = *v83;
          v82[6] = *((void *)v83 + 2);
          *((_OWORD *)v82 + 2) = v88;
        }
        else if (CMTimebaseGetRate(v28) != v79)
        {
          uint64_t v100 = (re *)CMTimebaseSetRate(v28, v79);
          if (v100)
          {
            int v101 = (int)v100;
            long long v102 = re::TimebaseLog(v100);
            if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v191.value) = 136315650;
              *(CMTimeValue *)((char *)&v191.value + 4) = (CMTimeValue)"_afterFrameUpdate";
              LOWORD(v191.flags) = 1024;
              *(CMTimeFlags *)((char *)&v191.flags + 2) = 778;
              WORD1(v191.epoch) = 1024;
              HIDWORD(v191.epoch) = v101;
              _os_log_error_impl(&dword_233120000, v102, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v191, 0x18u);
            }
          }
        }
LABEL_147:
        if (v172) {
          std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)v173, &v172, &v172);
        }
        unint64_t v172 = v171;
        unint64_t v25 = *(void *)(v26 + 24);
        unint64_t v171 = v25;
        if (!v25) {
          goto LABEL_171;
        }
      }
      int v33 = *(_DWORD *)v26;
      if (*(_DWORD *)v26)
      {
        BOOL v34 = v33 != 3 && *(unsigned char *)(v30 + 120) == 2;
        BOOL v35 = v34;
        if (v33 != 4 && !v35 && !*(void *)(v30 + 48))
        {
          if (v33 == 1)
          {
            AudioClocuint64_t k = (re *)*((void *)v143 + 32);
            if (!AudioClock)
            {
              AudioClocuint64_t k = re::TimebaseService::CreateAudioClock(0, v3);
              *((void *)v143 + 32) = AudioClock;
            }
          }
          else if (v33 == 3)
          {
            AudioClocuint64_t k = v9;
          }
          else
          {
            AudioClocuint64_t k = (re *)*((void *)v143 + 31);
            if (!AudioClock)
            {
              AudioClocuint64_t k = CMClockGetHostTimeClock();
              *((void *)v143 + 31) = AudioClock;
            }
          }
          int64_t value = (OpaqueCMTimebase *)CFRetain(AudioClock);
          goto LABEL_64;
        }
      }
      timebaseOut.int64_t value = 0;
      if (*(void *)(v26 + 24) || (unint64_t v40 = *(void *)(v30 + 48)) == 0)
      {
        CMTime v36 = (re *)CMTimebaseCreateWithSourceClock(allocator, v9, (CMTimebaseRef *)&timebaseOut);
        if (!v36)
        {
LABEL_61:
          int64_t value = (OpaqueCMTimebase *)timebaseOut.value;
          uint64_t v43 = re::TimebaseLog(v36);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(buf[0].value) = 134217984;
            *(CMTimeValue *)((char *)&buf[0].value + 4) = v25;
            _os_log_debug_impl(&dword_233120000, v43, OS_LOG_TYPE_DEBUG, "Creating externally controlled timebase with ID %llu", (uint8_t *)buf, 0xCu);
          }

          CFTypeID v5 = v147;
LABEL_64:
          CMTime v32 = std::__hash_table<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v148, v25, &v171);
          *((void *)v32 + 3) = value;
          goto LABEL_65;
        }
        int v37 = (int)v36;
        CMTime v38 = re::TimebaseLog(v36);
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
LABEL_60:

          goto LABEL_61;
        }
        LODWORD(buf[0].value) = 136315650;
        *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"_afterFrameUpdate";
        LOWORD(buf[0].flags) = 1024;
        *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 647;
        WORD1(buf[0].epoch) = 1024;
        HIDWORD(buf[0].epoch) = v37;
        uint64_t v39 = v38;
      }
      else
      {
        ClockOrTimebaseForID = (OpaqueCMTimebase *)re::TimebaseManager::findClockOrTimebaseForID(v143, v40);
        if (!ClockOrTimebaseForID)
        {
          uint64_t v103 = re::TimebaseLog(0);
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_170;
          }
          CMTimeValue v108 = *(void *)(v5[2] + 48);
          LODWORD(buf[0].value) = 134217984;
          *(CMTimeValue *)((char *)&buf[0].value + 4) = v108;
          uint64_t v106 = v103;
          v107 = "Could not find manual timebase with ID %llu";
          uint32_t v109 = 12;
          goto LABEL_186;
        }
        CMTime v36 = (re *)CMTimebaseCreateWithSourceTimebase(allocator, ClockOrTimebaseForID, (CMTimebaseRef *)&timebaseOut);
        if (!v36) {
          goto LABEL_61;
        }
        int v42 = (int)v36;
        CMTime v38 = re::TimebaseLog(v36);
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        LODWORD(buf[0].value) = 136315650;
        *(CMTimeValue *)((char *)&buf[0].value + 4) = (CMTimeValue)"_afterFrameUpdate";
        LOWORD(buf[0].flags) = 1024;
        *(CMTimeFlags *)((char *)&buf[0].flags + 2) = 642;
        WORD1(buf[0].epoch) = 1024;
        HIDWORD(buf[0].epoch) = v42;
        uint64_t v39 = v38;
      }
      _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)buf, 0x18u);
      goto LABEL_60;
    }
    char v138 = 0;
LABEL_215:
    __int16 v125 = (void *)*((void *)v143 + 21);
    if (v125)
    {
      while ((v138 & 1) != 0 || *((unsigned char *)v125 + 56))
      {
        *((unsigned char *)v125 + 56) = 0;
        v126 = (void *)*v125;
LABEL_219:
        __int16 v125 = v126;
        if (!v126) {
          goto LABEL_249;
        }
      }
      CFRelease((CFTypeRef)v125[3]);
      int8x8_t v127 = *(int8x8_t *)((char *)v143 + 160);
      unint64_t v128 = v125[1];
      uint8x8_t v129 = (uint8x8_t)vcnt_s8(v127);
      v129.i16[0] = vaddlv_u8(v129);
      if (v129.u32[0] > 1uLL)
      {
        if (v128 >= *(void *)&v127) {
          v128 %= *(void *)&v127;
        }
      }
      else
      {
        v128 &= *(void *)&v127 - 1;
      }
      v126 = (void *)*v125;
      uint64_t v130 = *((void *)v143 + 19);
      uint64_t v131 = *(void **)(v130 + 8 * v128);
      do
      {
        v132 = v131;
        uint64_t v131 = (void *)*v131;
      }
      while (v131 != v125);
      if (v132 == (void *)((char *)v143 + 168)) {
        goto LABEL_253;
      }
      unint64_t v133 = v132[1];
      if (v129.u32[0] > 1uLL)
      {
        if (v133 >= *(void *)&v127) {
          v133 %= *(void *)&v127;
        }
      }
      else
      {
        v133 &= *(void *)&v127 - 1;
      }
      uint64_t v134 = *v125;
      if (v133 != v128)
      {
LABEL_253:
        if (v126)
        {
          unint64_t v135 = v126[1];
          if (v129.u32[0] > 1uLL)
          {
            unint64_t v136 = v126[1];
            if (v135 >= *(void *)&v127) {
              unint64_t v136 = v135 % *(void *)&v127;
            }
          }
          else
          {
            unint64_t v136 = v135 & (*(void *)&v127 - 1);
          }
          uint64_t v134 = *v125;
          if (v136 == v128) {
            goto LABEL_242;
          }
        }
        *(void *)(v130 + 8 * v128) = 0;
        uint64_t v134 = *v125;
      }
      if (!v134)
      {
LABEL_248:
        void *v132 = v134;
        *__int16 v125 = 0;
        --*((void *)v143 + 22);
        operator delete(v125);
        goto LABEL_219;
      }
      unint64_t v135 = *(void *)(v134 + 8);
LABEL_242:
      if (v129.u32[0] > 1uLL)
      {
        if (v135 >= *(void *)&v127) {
          v135 %= *(void *)&v127;
        }
      }
      else
      {
        v135 &= *(void *)&v127 - 1;
      }
      if (v135 != v128)
      {
        *(void *)(*((void *)v143 + 19) + 8 * v135) = v132;
        uint64_t v134 = *v125;
      }
      goto LABEL_248;
    }
LABEL_249:
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)v173);
    uint64_t v2 = v137;
  }
  else
  {
    for (unint64_t j = *(uint64_t ***)&this[42]._os_unfair_lock_opaque; j; unint64_t j = (uint64_t **)*j)
      CFRelease(j[3]);
    if (*((void *)v143 + 22))
    {
      __int16 v121 = (void *)*((void *)v143 + 21);
      if (v121)
      {
        do
        {
          int v122 = (void *)*v121;
          operator delete(v121);
          __int16 v121 = v122;
        }
        while (v122);
      }
      *((void *)v143 + 21) = 0;
      uint64_t v123 = *((void *)v143 + 20);
      if (v123)
      {
        for (uint64_t k = 0; k != v123; ++k)
          *(void *)(*((void *)v143 + 19) + 8 * k) = 0;
      }
      *((void *)v143 + 22) = 0;
    }
  }
  os_unfair_lock_unlock(v2);
}

void re::TimebaseManager::setTreeDidChangeCallback(uint64_t a1, unint64_t a2, void *a3)
{
  aBlocuint64_t k = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 288);
  if (aBlock)
  {
    unint64_t v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v7 = v6 ^ (v6 >> 31);
    if (!v5)
    {
      LODWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
LABEL_16:
      uint64_t v21 = *(unsigned int *)(a1 + 324);
      if (v21 == 0x7FFFFFFF)
      {
        uint64_t v21 = *(unsigned int *)(a1 + 320);
        int v22 = v21;
        if (v21 == *(_DWORD *)(a1 + 312))
        {
          re::HashTable<re::TimebaseTree *,void({block_pointer} {__strong})(re::TimebaseTree *),re::Hash<re::TimebaseTree *>,re::EqualTo<re::TimebaseTree *>,true,false>::setCapacity(a1 + 288, 2 * *(_DWORD *)(a1 + 316));
          LODWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v7 % *(unsigned int *)(a1 + 312);
          int v22 = *(_DWORD *)(a1 + 320);
        }
        *(_DWORD *)(a1 + 32re::VariableStepTimer::setClock((uint64_t)this, 0) = v22 + 1;
        uint64_t v23 = *(void *)(a1 + 304);
        int v24 = *(_DWORD *)(v23 + 32 * v21 + 8);
      }
      else
      {
        uint64_t v23 = *(void *)(a1 + 304);
        int v24 = *(_DWORD *)(v23 + 32 * v21 + 8);
        *(_DWORD *)(a1 + 324) = v24 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v23 + 32 * v21 + 8) = v24 | 0x80000000;
      *(_DWORD *)(*(void *)(a1 + 304) + 32 * v21 + 8) = *(_DWORD *)(*(void *)(a1 + 304) + 32 * v21 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 296) + 4 * v9);
      *(void *)(*(void *)(a1 + 304) + 32 * v21) = v7;
      *(void *)(*(void *)(a1 + 304) + 32 * v21 + 16) = a2;
      uint64_t v25 = *(void *)(a1 + 304) + 32 * v21;
      *(void *)(v25 + 24) = _Block_copy(aBlock);
      *(_DWORD *)(*(void *)(a1 + 296) + 4 * vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v21;
      int v26 = *(_DWORD *)(a1 + 316) + 1;
LABEL_22:
      *(_DWORD *)(a1 + 316) = v26;
      ++*(_DWORD *)(a1 + 328);
      goto LABEL_38;
    }
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v7 % *(unsigned int *)(a1 + 312)));
    if (v8 == 0x7FFFFFFF)
    {
LABEL_4:
      unint64_t v9 = v7 % *(unsigned int *)(a1 + 312);
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 296) + 4 * v9);
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v11 = *(void *)(a1 + 304);
        if (*(void *)(v11 + 32 * v10 + 16) == a2) {
          goto LABEL_38;
        }
        while (1)
        {
          uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v11 + 32 * v10 + 16) == a2) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_16;
    }
    uint64_t v27 = *(void *)(a1 + 304);
    while (*(void *)(v27 + 32 * v8 + 16) != a2)
    {
      uint64_t v8 = *(_DWORD *)(v27 + 32 * v8 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        goto LABEL_4;
      }
    }
    double v28 = _Block_copy(aBlock);
    if (*(void *)(a1 + 288))
    {
      uint64_t v29 = *(void *)(a1 + 304);
      for (uint64_t i = *(unsigned int *)(*(void *)(a1 + 296) + 4 * (v7 % *(unsigned int *)(a1 + 312)));
            ;
            uint64_t i = *(_DWORD *)(v29 + 32 * i + 8) & 0x7FFFFFFF)
      {
        unsigned int v31 = 0x7FFFFFFF;
        if (i == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v29 + 32 * i + 16) == a2)
        {
          unsigned int v31 = i;
          break;
        }
      }
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 304);
      unsigned int v31 = 0x7FFFFFFF;
    }
    uint64_t v37 = v29 + 32 * v31;
    CMTime v38 = *(void **)(v37 + 24);
    *(void *)(v37 + 24) = v28;
  }
  else if (v5)
  {
    unint64_t v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v13 = (v12 ^ (v12 >> 31)) % *(unsigned int *)(a1 + 312);
    uint64_t v14 = *(void *)(a1 + 296);
    uint64_t v15 = *(unsigned int *)(v14 + 4 * v13);
    if (v15 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(a1 + 304);
      uint64_t v17 = v16 + 32 * v15;
      if (*(void *)(v17 + 16) == a2)
      {
        *(_DWORD *)(v14 + 4 * v13) = *(_DWORD *)(v17 + 8) & 0x7FFFFFFF;
LABEL_33:
        uint64_t v32 = *(void *)(a1 + 304);
        uint64_t v33 = v32 + 32 * v15;
        int v36 = *(_DWORD *)(v33 + 8);
        BOOL v35 = (int *)(v33 + 8);
        int v34 = v36;
        if (v36 < 0)
        {
          *BOOL v35 = v34 & 0x7FFFFFFF;

          uint64_t v32 = *(void *)(a1 + 304);
          int v34 = *(_DWORD *)(v32 + 32 * v15 + 8);
        }
        *(_DWORD *)(v32 + 32 * v15 + 8) = *(_DWORD *)(a1 + 324) | v34 & 0x80000000;
        *(_DWORD *)(a1 + 324) = v15;
        int v26 = *(_DWORD *)(a1 + 316) - 1;
        goto LABEL_22;
      }
      while (1)
      {
        unsigned int v18 = v15;
        int v19 = *(_DWORD *)(v16 + 32 * v15 + 8);
        uint64_t v15 = v19 & 0x7FFFFFFF;
        if ((v19 & 0x7FFFFFFF) == 0x7FFFFFFF) {
          break;
        }
        uint64_t v20 = v16 + 32 * v15;
        if (*(void *)(v20 + 16) == a2)
        {
          *(_DWORD *)(v16 + 32 * v18 + 8) = *(_DWORD *)(v16 + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v20 + 8) & 0x7FFFFFFF;
          goto LABEL_33;
        }
      }
    }
  }
LABEL_38:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
}

void re::TimebaseManager::beforeFrameUpdate(re::TimebaseManager *this, float a2)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v8, 2516, (uint64_t)this);
  if (a2 > 0.0)
  {
    uint64_t v4 = (OpaqueCMTimebase *)*((void *)this + 29);
    CMTimebaseGetTime(&lhs, v4);
    CMTimeMake(&rhs, (unint64_t)(a2 * 18000.0 + 0.5), 18000);
    CMTimeAdd(&time, &lhs, &rhs);
    CMTimebaseSetTime(v4, &time);
  }
  re::TimebaseManager::_beforeFrameUpdate((os_unfair_lock_s *)this);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v8);
}

uint64_t re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 200 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 200 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 200 * v3 + 16) == a2) {
        return v5 + 200 * v3 + 24;
      }
    }
    return 0;
  }
  return v5 + 200 * v3 + 24;
}

void re::TimebaseManager::afterFrameUpdate(os_unfair_lock_s *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v2, 2518, (uint64_t)this);
  re::TimebaseManager::_afterFrameUpdate(this);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v2);
}

void *re::TimebaseManager::findClockOrTimebaseForID(re::TimebaseManager *this, unint64_t a2)
{
  CMClockRef result = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 19, a2);
  if (result) {
    return (void *)result[3];
  }
  CMClockRef result = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>((void *)this + 14, a2);
  if (result) {
    return (void *)result[3];
  }
  return result;
}

uint64_t re::TimebaseManager::clockOrTimebaseTypeFromRef(re::TimebaseManager *this, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CMTimebaseGetTypeID()) {
    return 0;
  }
  CMClockRef HostTimeClock = (CMClockRef)*((void *)this + 31);
  if (!HostTimeClock)
  {
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    *((void *)this + 31) = HostTimeClock;
  }
  if (CFEqual(HostTimeClock, cf)) {
    return 2;
  }
  unint64_t v9 = (const void *)*((void *)this + 33);
  if (v9 && !CMSyncMightDrift(v9, cf)) {
    return 3;
  }
  uint64_t v10 = (const void *)*((void *)this + 34);
  if (v10)
  {
    if (!CMSyncMightDrift(v10, cf)) {
      return 3;
    }
  }
  uint64_t v11 = (const void *)*((void *)this + 35);
  if (!v11)
  {
    re::TimebaseManager::updatePrimarySharedClock(this, v7, v8);
    uint64_t v11 = (const void *)*((void *)this + 35);
  }
  if (!CMSyncMightDrift(v11, cf)) {
    return 3;
  }
  if (re::TimebaseManager::matchesAudioClock(this, cf)) {
    return 1;
  }
  return 4;
}

unint64_t re::TimebaseManager::addLocallyControlledTimebaseToTree(os_unfair_lock_s *this, OpaqueCMTimebase *a2, re::TimebaseTree *a3, int a4)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  v94 = a3;
  locuint64_t k = this + 6;
  os_unfair_lock_lock(this + 6);
  if (a2)
  {
    CMClockOrTimebaseRef v7 = 0;
    char v85 = 0;
    unint64_t v8 = 0;
    int v86 = this + 18;
    unint64_t v83 = 0;
    unint64_t v82 = this + 8;
    CFStringRef name = (const __CFString *)*MEMORY[0x263F01108];
    CFStringRef v78 = (const __CFString *)*MEMORY[0x263F010F8];
    CFStringRef v77 = (const __CFString *)*MEMORY[0x263F01100];
    char v80 = this + 22;
    cf2 = a2;
    unint64_t v9 = (unint64_t)a2;
    while (1)
    {
      unint64_t v93 = 0;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v86, v9);
      if (v10)
      {
        uint64_t v11 = v10;
        unint64_t v12 = v10[3];
        unint64_t v93 = v12;
        unint64_t RelativeRateAndAnchorTime = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v10 + 4, (unint64_t)v94) != 0;
        if (!v8) {
          goto LABEL_71;
        }
        goto LABEL_56;
      }
      uint64_t v13 = arc4random();
      unint64_t v93 = arc4random() | (unint64_t)(v13 << 32);
      *(_OWORD *)&v96.timescale = 0u;
      long long v97 = 0u;
      LODWORD(v98.value) = 1065353216;
      v96.int64_t value = v93;
      std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__emplace_unique_key_args<re::TimebaseTree *,std::piecewise_construct_t const&,std::tuple<re::TimebaseTree * const&>,std::tuple<>>((uint64_t)&v96.timescale, (unint64_t)v94, &v94)[3] = 1;
      CFRetain((CFTypeRef)v9);
      unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
      unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v14 >> 47) ^ v14);
      unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
      unint64_t v17 = *(void *)&this[20]._os_unfair_lock_opaque;
      if (v17)
      {
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          unint64_t RelativeRateAndAnchorTime = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
          if (v16 >= v17) {
            unint64_t RelativeRateAndAnchorTime = v16 % v17;
          }
        }
        else
        {
          unint64_t RelativeRateAndAnchorTime = (v17 - 1) & v16;
        }
        int v19 = *(void ***)(*(void *)&v86->_os_unfair_lock_opaque + 8 * RelativeRateAndAnchorTime);
        if (v19)
        {
          uint64_t v20 = (char *)*v19;
          if (*v19)
          {
            do
            {
              unint64_t v21 = *((void *)v20 + 1);
              if (v21 == v16)
              {
                if (*((void *)v20 + 2) == v9) {
                  goto LABEL_44;
                }
              }
              else
              {
                if (v18.u32[0] > 1uLL)
                {
                  if (v21 >= v17) {
                    v21 %= v17;
                  }
                }
                else
                {
                  v21 &= v17 - 1;
                }
                if (v21 != RelativeRateAndAnchorTime) {
                  break;
                }
              }
              uint64_t v20 = *(char **)v20;
            }
            while (v20);
          }
        }
      }
      uint64_t v20 = (char *)operator new(0x48uLL);
      *(void *)&outOfClockOrTimebaseAnchorTime.timescale = this + 22;
      *(void *)uint64_t v20 = 0;
      *((void *)v20 + 1) = v16;
      *((void *)v20 + 2) = v9;
      *(_OWORD *)(v20 + 56) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
      *((_DWORD *)v20 + 16) = 1065353216;
      LOBYTE(outOfClockOrTimebaseAnchorTime.epoch) = 1;
      float v22 = (float)(unint64_t)(*(void *)&this[24]._os_unfair_lock_opaque + 1);
      float v23 = *(float *)&this[26]._os_unfair_lock_opaque;
      if (!v17 || (float)(v23 * (float)v17) < v22)
      {
        BOOL v24 = (v17 & (v17 - 1)) != 0;
        if (v17 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v17);
        unint64_t v26 = vcvtps_u32_f32(v22 / v23);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v86, v27);
        unint64_t v17 = *(void *)&this[20]._os_unfair_lock_opaque;
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v16 >= v17) {
            unint64_t RelativeRateAndAnchorTime = v16 % v17;
          }
          else {
            unint64_t RelativeRateAndAnchorTime = v16;
          }
        }
        else
        {
          unint64_t RelativeRateAndAnchorTime = (v17 - 1) & v16;
        }
      }
      uint64_t v28 = *(void *)&v86->_os_unfair_lock_opaque;
      uint64_t v29 = *(void **)(*(void *)&v86->_os_unfair_lock_opaque + 8 * RelativeRateAndAnchorTime);
      if (v29) {
        break;
      }
      *(void *)uint64_t v20 = *(void *)&v80->_os_unfair_lock_opaque;
      *(void *)&v80->_os_unfair_lock_opaque = v20;
      *(void *)(v28 + 8 * RelativeRateAndAnchorTime) = v80;
      if (*(void *)v20)
      {
        unint64_t v30 = *(void *)(*(void *)v20 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v30 >= v17) {
            v30 %= v17;
          }
        }
        else
        {
          v30 &= v17 - 1;
        }
        uint64_t v29 = (void *)(*(void *)&v86->_os_unfair_lock_opaque + 8 * v30);
        goto LABEL_42;
      }
LABEL_43:
      outOfClockOrTimebaseAnchorTime.int64_t value = 0;
      ++*(void *)&this[24]._os_unfair_lock_opaque;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>>>>::reset[abi:nn180100]((uint64_t)&outOfClockOrTimebaseAnchorTime);
LABEL_44:
      *((void *)v20 + 3) = v96.value;
      if (v20 + 24 != (char *)&v96)
      {
        unsigned int v31 = v20 + 32;
        *((_DWORD *)v20 + 16) = v98.value;
        uint64_t v32 = (void *)v97;
        uint64_t v33 = *((void *)v20 + 5);
        if (!v33) {
          goto LABEL_51;
        }
        for (uint64_t i = 0; i != v33; ++i)
          *(void *)(*v31 + 8 * i) = 0;
        BOOL v35 = (void *)*((void *)v20 + 6);
        *((void *)v20 + 6) = 0;
        *((void *)v20 + 7) = 0;
        if (v35)
        {
          while (v32)
          {
            v35[2] = v32[2];
            v35[3] = v32[3];
            int v36 = (void *)*v35;
            std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__node_insert_multi((uint64_t)v31, v35);
            uint64_t v32 = (void *)*v32;
            BOOL v35 = v36;
            if (!v36) {
              goto LABEL_51;
            }
          }
          do
          {
            uint64_t v41 = (void *)*v35;
            operator delete(v35);
            BOOL v35 = v41;
          }
          while (v41);
        }
        else
        {
LABEL_51:
          while (v32)
          {
            uint64_t v37 = operator new(0x20uLL);
            *(void *)uint64_t v37 = 0;
            v37[1] = *((_OWORD *)v32 + 1);
            unint64_t v38 = *((void *)v37 + 2);
            unint64_t v39 = HIDWORD(v38);
            unint64_t v40 = 0x9DDFEA08EB382D69 * (((8 * v38) + 8) ^ HIDWORD(v38));
            *((void *)v37 + 1) = 0x9DDFEA08EB382D69
                                 * ((0x9DDFEA08EB382D69 * (v39 ^ (v40 >> 47) ^ v40)) ^ ((0x9DDFEA08EB382D69
                                                                                         * (v39 ^ (v40 >> 47) ^ v40)) >> 47));
            std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__node_insert_multi((uint64_t)v31, v37);
            uint64_t v32 = (void *)*v32;
          }
        }
      }
      unint64_t v12 = v93;
      std::__hash_table<std::__hash_value_type<unsigned long long,void const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&this[28], v93, &v93)[3] = v9;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v86, v9);
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v96.timescale);
      unint64_t RelativeRateAndAnchorTime = 0;
      if (!v8) {
        goto LABEL_71;
      }
LABEL_56:
      if (!*(void *)v94)
      {
        uint64_t v43 = *((void *)v94 + 2);
LABEL_68:
        if (!*(void *)(v43 + 0x63FFFFFF68)) {
          goto LABEL_69;
        }
        goto LABEL_71;
      }
      unint64_t v42 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
      uint64_t v43 = *((void *)v94 + 2);
      uint64_t v44 = *(unsigned int *)(*((void *)v94 + 1) + 4 * ((v42 ^ (v42 >> 31)) % *((unsigned int *)v94 + 6)));
      if (v44 == 0x7FFFFFFF) {
        goto LABEL_68;
      }
      uint64_t v45 = v44;
      if (*(void *)(v43 + 200 * v44 + 16) == v8)
      {
        if (!*(void *)(v43 + 200 * v44 + 48)) {
          goto LABEL_70;
        }
      }
      else
      {
        do
          LODWORD(v45) = *(_DWORD *)(v43 + 200 * v45 + 8) & 0x7FFFFFFF;
        while (v45 != 0x7FFFFFFF && *(void *)(v43 + 200 * v45 + 16) != v8);
        if (!*(void *)(v43 + 200 * v45 + 48))
        {
          while (1)
          {
            uint64_t v44 = *(_DWORD *)(v43 + 200 * v44 + 8) & 0x7FFFFFFF;
            if (v44 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v43 + 200 * v44 + 16) == v8) {
              goto LABEL_70;
            }
          }
LABEL_69:
          LODWORD(v44) = 0x7FFFFFFF;
LABEL_70:
          *(void *)(v43 + 200 * v44 + 48) = v12;
        }
      }
LABEL_71:
      int v46 = CFEqual((CFTypeRef)v9, cf2);
      if (v46)
      {
        unint64_t v83 = v93;
        if (!std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v82, v9))
        {
          std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>((uint64_t)v82, v9, v9);
          LocalCenter = CFNotificationCenterGetLocalCenter();
          CFNotificationCenterAddObserver(LocalCenter, this, (CFNotificationCallback)re::TimebaseManager::LeafTimebaseNeedsUpdating, name, (const void *)v9, CFNotificationSuspensionBehaviorDrop);
          unint64_t v48 = CFNotificationCenterGetLocalCenter();
          CFNotificationCenterAddObserver(v48, this, (CFNotificationCallback)re::TimebaseManager::LeafTimebaseNeedsUpdating, v78, (const void *)v9, CFNotificationSuspensionBehaviorDrop);
          unint64_t v49 = CFNotificationCenterGetLocalCenter();
          CFNotificationCenterAddObserver(v49, this, (CFNotificationCallback)re::TimebaseManager::LeafMasterDidChange, v77, (const void *)v9, CFNotificationSuspensionBehaviorDrop);
        }
      }
      int v52 = re::TimebaseManager::clockOrTimebaseTypeFromRef((re::TimebaseManager *)this, (CFTypeRef)v9);
      if ((v85 & (v7 != 0)) == 1)
      {
        CFRelease(v7);
        char v85 = 0;
      }
      if (v52 == 3)
      {
        CMClockOrTimebaseRef v7 = 0;
        if ((RelativeRateAndAnchorTime & 1) == 0) {
          goto LABEL_86;
        }
      }
      else if (v52)
      {
        CMClockOrTimebaseRef v7 = *(CMClockOrTimebaseRef *)&this[70]._os_unfair_lock_opaque;
        if (v7)
        {
          if ((RelativeRateAndAnchorTime & 1) == 0) {
            goto LABEL_86;
          }
        }
        else
        {
          re::TimebaseManager::updatePrimarySharedClock((re::TimebaseManager *)this, v50, v51);
          CMClockOrTimebaseRef v7 = *(CMClockOrTimebaseRef *)&this[70]._os_unfair_lock_opaque;
          if ((RelativeRateAndAnchorTime & 1) == 0)
          {
LABEL_86:
            Float64 outRelativeRate = 1.0;
            CMTime outOfClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
            CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
            CMTime v89 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
            Float64 v90 = 1.0;
            CMTime v88 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
            if (v7)
            {
              unint64_t RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime((CMClockOrTimebaseRef)v9, v7, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
              if (CMSyncGetRelativeRate((CMClockOrTimebaseRef)v9, v7) == 0.0
                || RelativeRateAndAnchorTime == -12755)
              {
                CMSyncGetTime(&v96, (CMClockOrTimebaseRef)v9);
                CMTime outOfClockOrTimebaseAnchorTime = v96;
                CMTime outRelativeToClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
              }
              else if (RelativeRateAndAnchorTime)
              {
                long long v55 = re::TimebaseLog(v54);
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v96.value) = 67109120;
                  HIDWORD(v96.value) = RelativeRateAndAnchorTime;
                  _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Failed to calculate relative rate and anchor: %d", (uint8_t *)&v96, 8u);
                }
              }
              CMClockOrTimebaseRef v56 = *(CMClockOrTimebaseRef *)&this[68]._os_unfair_lock_opaque;
              if (v7 == *(CMClockOrTimebaseRef *)&this[66]._os_unfair_lock_opaque && v56)
              {
                CMClockOrTimebaseRef v57 = (re *)CMSyncGetRelativeRateAndAnchorTime((CMClockOrTimebaseRef)v9, v56, &v90, &v89, &v88);
                if (v57)
                {
                  int v58 = (int)v57;
                  BOOL v59 = re::TimebaseLog(v57);
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v96.value) = 136315650;
                    *(CMTimeValue *)((char *)&v96.value + 4) = (CMTimeValue)"addLocallyControlledTimebaseToTree";
                    LOWORD(v96.flags) = 1024;
                    *(CMTimeFlags *)((char *)&v96.flags + 2) = 1038;
                    WORD1(v96.epoch) = 1024;
                    HIDWORD(v96.epoch) = v58;
                    _os_log_error_impl(&dword_233120000, v59, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v96, 0x18u);
                  }
                }
              }
              else if (v7 == v56)
              {
                Float64 v90 = outRelativeRate;
                CMTime v89 = outOfClockOrTimebaseAnchorTime;
                CMTime v88 = outRelativeToClockOrTimebaseAnchorTime;
                Float64 outRelativeRate = 1.0;
                CMTime outOfClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
                CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
              }
            }
            CMTime v87 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
            if (v46) {
              int v60 = a4;
            }
            else {
              int v60 = 0;
            }
            if (v60 == 1)
            {
              if (CMTimebaseGetEffectiveRate(cf2) == 0.0)
              {
                CMTimebaseGetTime(&v87, cf2);
              }
              else
              {
                uint64_t v62 = re::TimebaseLog(v61);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v96.value) = 0;
                  _os_log_error_impl(&dword_233120000, v62, OS_LOG_TYPE_ERROR, "new locally-controlled timebase has non-zero rate so initial seek target is undefined", (uint8_t *)&v96, 2u);
                }
              }
            }
            uint64_t v63 = v94;
            LODWORD(v96.value) = v52;
            *(void *)&v96.timescale = v93;
            LOBYTE(v96.epoch) = 1;
            *(void *)&long long v97 = 0;
            CMTime v98 = outOfClockOrTimebaseAnchorTime;
            CMTime v99 = outRelativeToClockOrTimebaseAnchorTime;
            *((Float64 *)&v97 + 1) = outRelativeRate;
            Float64 v100 = v90;
            CMTime v101 = v89;
            CMTime v102 = v88;
            char v103 = v60;
            CMTime v104 = v87;
            unint64_t v64 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v93 ^ (v93 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v93 ^ (v93 >> 30))) >> 27));
            unint64_t v65 = v64 ^ (v64 >> 31);
            if (*(void *)v94)
            {
              unint64_t v66 = v65 % *((unsigned int *)v94 + 6);
              uint64_t v67 = *(unsigned int *)(*((void *)v94 + 1) + 4 * v66);
              if (v67 != 0x7FFFFFFF)
              {
                uint64_t v68 = *((void *)v94 + 2);
                while (*(void *)(v68 + 200 * v67 + 16) != v93)
                {
                  LODWORD(v67) = *(_DWORD *)(v68 + 200 * v67 + 8) & 0x7FFFFFFF;
                  if (v67 == 0x7FFFFFFF) {
                    goto LABEL_118;
                  }
                }
                goto LABEL_119;
              }
            }
            else
            {
              LODWORD(v66) = 0;
            }
LABEL_118:
            re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v94, v66, v65, &v93, (long long *)&v96.value);
            ++*((_DWORD *)v63 + 10);
LABEL_119:
            std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__emplace_unique_key_args<re::TimebaseTree *,std::piecewise_construct_t const&,std::tuple<re::TimebaseTree * const&>,std::tuple<>>((uint64_t)(v11 + 4), (unint64_t)v63, &v94)[3] = 1;
            goto LABEL_120;
          }
        }
      }
      else
      {
        CMClockOrTimebaseRef v7 = CMTimebaseCopySource((CMTimebaseRef)v9);
        char v85 = 1;
        if ((RelativeRateAndAnchorTime & 1) == 0) {
          goto LABEL_86;
        }
      }
      unint64_t v53 = std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__emplace_unique_key_args<re::TimebaseTree *,std::piecewise_construct_t const&,std::tuple<re::TimebaseTree * const&>,std::tuple<>>((uint64_t)(v11 + 4), (unint64_t)v94, &v94);
      ++v53[3];
LABEL_120:
      unint64_t v8 = v93;
      unint64_t v9 = (unint64_t)v7;
      if (!v7) {
        goto LABEL_123;
      }
    }
    *(void *)uint64_t v20 = *v29;
LABEL_42:
    *uint64_t v29 = v20;
    goto LABEL_43;
  }
  unint64_t v83 = 0;
LABEL_123:
  uint64_t v69 = *(void *)&this[60]._os_unfair_lock_opaque;
  if (v69) {
    uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 56))(v69);
  }
  CFTypeID v70 = v94;
  *((void *)v94 + 14) = v69;
  uint64_t v71 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&this[72], (unint64_t)v70);
  if (v71) {
    (*(void (**)(void))(*(void *)v71 + 16))();
  }
  CFTypeID v72 = (unsigned __int8 *)re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v70, v83);
  long long v73 = v72;
  if (!v72 || v72[144] != a4)
  {
    int v74 = re::TimebaseLog((re *)v72);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v96.value) = 134218496;
      *(CMTimeValue *)((char *)&v96.value + 4) = v83;
      LOWORD(v96.flags) = 2048;
      *(void *)((char *)&v96.flags + 2) = v73;
      HIWORD(v96.epoch) = 1024;
      LODWORD(v97) = a4;
      _os_log_error_impl(&dword_233120000, v74, OS_LOG_TYPE_ERROR, "timebase %llu node %p has unexpected prioritizeContinuity state (expected %d)", (uint8_t *)&v96, 0x1Cu);
    }
  }
  os_unfair_lock_unlock(lock);
  return v83;
}

void re::TimebaseManager::LeafTimebaseNeedsUpdating(re::TimebaseManager *this, __CFNotificationCenter *a2, const __CFString *a3, __CFString *a4, CFDictionaryRef theDict, const __CFDictionary *a6)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x263F010F0]);
  if (Value)
  {
    memset(&v37, 0, sizeof(v37));
    CMTimeMakeFromDictionary(&v37, Value);
  }
  else
  {
    uint64_t v10 = re::TimebaseLog(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(outOfClockOrTimebaseAnchorTime.value) = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "leaf timebase update does not have event time", (uint8_t *)&outOfClockOrTimebaseAnchorTime, 2u);
    }

    CMTime v37 = *(CMTime *)*(void *)&MEMORY[0x263F01090];
  }
  CMTimeValue v44 = v37.value;
  CMTimeFlags flags = v37.flags;
  CMTimeScale timescale = v37.timescale;
  CMTimeEpoch epoch = v37.epoch;
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 6);
  if (a4)
  {
    char v12 = 0;
    CFStringRef v13 = (const __CFString *)*MEMORY[0x263F01108];
    while (1)
    {
      CFStringRef v14 = a4;
      unint64_t v15 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>((void *)a2 + 9, (unint64_t)a4);
      if (!v15) {
        break;
      }
      unint64_t v16 = v15;
      int v19 = re::TimebaseManager::clockOrTimebaseTypeFromRef(a2, a4);
      if (v12) {
        CFRelease(a4);
      }
      if (v19)
      {
        if (v19 == 3) {
          goto LABEL_51;
        }
        a4 = (__CFString *)*((void *)a2 + 35);
        if (a4)
        {
          char v35 = 0;
        }
        else
        {
          re::TimebaseManager::updatePrimarySharedClock(a2, v17, v18);
          char v35 = 0;
          a4 = (__CFString *)*((void *)a2 + 35);
        }
      }
      else
      {
        a4 = (__CFString *)CMTimebaseCopySource((CMTimebaseRef)a4);
        char v35 = 1;
      }
      Float64 outRelativeRate = 1.0;
      CMTime outOfClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
      CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
      CMTime v39 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
      Float64 v40 = 1.0;
      CMTime v38 = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
      OSStatus RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(v14, a4, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
      if (CMSyncGetRelativeRate(v14, a4) == 0.0 || RelativeRateAndAnchorTime)
      {
        Float64 outRelativeRate = 0.0;
        Time = CMSyncGetTime(&v46, v14);
        CMTime outOfClockOrTimebaseAnchorTime = v46;
        CMTime outRelativeToClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
        if (RelativeRateAndAnchorTime != -12755)
        {
          if (RelativeRateAndAnchorTime)
          {
            float v22 = re::TimebaseLog((re *)Time);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v46.value) = 67109120;
              HIDWORD(v46.value) = RelativeRateAndAnchorTime;
              _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to calculate relative rate and anchor: %d", (uint8_t *)&v46, 8u);
            }
          }
        }
      }
      CFStringRef v23 = (const __CFString *)*((void *)a2 + 34);
      if (a4 == *((__CFString **)a2 + 33) && v23)
      {
        BOOL v24 = (re *)CMSyncGetRelativeRateAndAnchorTime(v14, v23, &v40, &v39, &v38);
        if (v24)
        {
          int v25 = (int)v24;
          unint64_t v26 = re::TimebaseLog(v24);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v46.value) = 136315650;
            *(CMTimeValue *)((char *)&v46.value + 4) = (CMTimeValue)"updateEffectiveRateOrAnchorThroughTimebase";
            LOWORD(v46.flags) = 1024;
            *(CMTimeFlags *)((char *)&v46.flags + 2) = 1268;
            WORD1(v46.epoch) = 1024;
            HIDWORD(v46.epoch) = v25;
            _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "%s:%d error: %d", (uint8_t *)&v46, 0x18u);
          }
        }
      }
      else if (a4 == v23)
      {
        Float64 v40 = outRelativeRate;
        CMTime v39 = outOfClockOrTimebaseAnchorTime;
        CMTime v38 = outRelativeToClockOrTimebaseAnchorTime;
        Float64 outRelativeRate = 1.0;
        CMTime outOfClockOrTimebaseAnchorTime = *(CMTime *)*(void *)&MEMORY[0x263F010E0];
        CMTime outRelativeToClockOrTimebaseAnchorTime = outOfClockOrTimebaseAnchorTime;
      }
      for (uint64_t i = (void *)v16[6]; i; uint64_t i = (void *)*i)
      {
        uint64_t v28 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(i[2], v16[3]);
        if (v28)
        {
          uint64_t v29 = v28;
          if (CFEqual(a3, v13) && *(unsigned char *)(v29 + 144) && (flags & 1) != 0)
          {
            *(void *)(v29 + 148) = v44;
            *(_DWORD *)(v29 + 156) = timescale;
            *(_DWORD *)(v29 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = flags;
            *(void *)(v29 + 164) = epoch;
            *(void *)(v29 + 164) = atomic_fetch_add((atomic_ullong *volatile)a2 + 43, 1uLL) + 1;
          }
          *(Float64 *)(v29 + 32) = outRelativeRate;
          *(CMTime *)(v29 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = outOfClockOrTimebaseAnchorTime;
          *(CMTime *)(v29 + 64) = outRelativeToClockOrTimebaseAnchorTime;
          *(Float64 *)(v29 + 88) = v40;
          *(CMTime *)(v29 + 96) = v39;
          long long v31 = *(_OWORD *)&v38.value;
          *(void *)(v29 + 136) = v38.epoch;
          *(_OWORD *)(v29 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = v31;
          uint64_t v32 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)a2 + 288, i[2]);
          if (v32) {
            (*(void (**)(void))(*(void *)v32 + 16))();
          }
        }
        else
        {
          uint64_t v33 = re::TimebaseLog(0);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v46.value) = 0;
            _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Trying to update unknown struct in tree", (uint8_t *)&v46, 2u);
          }
        }
      }
      char v12 = v35;
      if (!a4) {
        goto LABEL_51;
      }
    }
    int v34 = re::TimebaseLog(0);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(outOfClockOrTimebaseAnchorTime.value) = 0;
      _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "Trying to update unknown clock or timebase", (uint8_t *)&outOfClockOrTimebaseAnchorTime, 2u);
    }
  }
LABEL_51:
  os_unfair_lock_unlock((os_unfair_lock_t)a2 + 6);
}

void re::TimebaseManager::LeafMasterDidChange(re::TimebaseManager *this, os_unfair_lock_s *a2, void *a3, __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  unint64_t v9 = a2 + 6;
  locuint64_t k = a2 + 6;
  char v37 = 1;
  os_unfair_lock_lock(a2 + 6);
  uint64_t v10 = (float *)std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(&a2[18]._os_unfair_lock_opaque, (unint64_t)a4);
  if (!v10)
  {
    uint64_t v32 = re::TimebaseLog(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v33) = 0;
      _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Received update for unknown timebase", (uint8_t *)&v33, 2u);
    }

    goto LABEL_50;
  }
  uint64_t v11 = v10;
  long long v33 = 0u;
  long long v34 = 0u;
  float v35 = v10[16];
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)&v33, *((void *)v10 + 5));
  char v12 = (void *)*((void *)v11 + 6);
  if (v12)
  {
    unint64_t v13 = *((void *)&v33 + 1);
    do
    {
      unint64_t v14 = v12[2];
      unint64_t v15 = 0x9DDFEA08EB382D69 * (((8 * v14) + 8) ^ HIDWORD(v14));
      unint64_t v16 = 0x9DDFEA08EB382D69 * (HIDWORD(v14) ^ (v15 >> 47) ^ v15);
      unint64_t v17 = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
      if (v13)
      {
        uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          unint64_t v6 = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
          if (v17 >= v13) {
            unint64_t v6 = v17 % v13;
          }
        }
        else
        {
          unint64_t v6 = v17 & (v13 - 1);
        }
        int v19 = *(void **)(v33 + 8 * v6);
        if (v19)
        {
          for (uint64_t i = (void *)*v19; i; uint64_t i = (void *)*i)
          {
            unint64_t v21 = i[1];
            if (v21 == v17)
            {
              if (i[2] == v14) {
                goto LABEL_42;
              }
            }
            else
            {
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= v13) {
                  v21 %= v13;
                }
              }
              else
              {
                v21 &= v13 - 1;
              }
              if (v21 != v6) {
                break;
              }
            }
          }
        }
      }
      float v22 = operator new(0x20uLL);
      *float v22 = 0;
      v22[1] = v17;
      *((_OWORD *)v22 + 1) = *((_OWORD *)v12 + 1);
      float v23 = (float)(unint64_t)(*((void *)&v34 + 1) + 1);
      if (!v13 || (float)(v35 * (float)v13) < v23)
      {
        BOOL v24 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3) {
          BOOL v24 = 1;
        }
        unint64_t v25 = v24 | (2 * v13);
        unint64_t v26 = vcvtps_u32_f32(v23 / v35);
        if (v25 <= v26) {
          size_t v27 = v26;
        }
        else {
          size_t v27 = v25;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)&v33, v27);
        unint64_t v13 = *((void *)&v33 + 1);
        if ((*((void *)&v33 + 1) & (*((void *)&v33 + 1) - 1)) != 0)
        {
          if (v17 >= *((void *)&v33 + 1)) {
            unint64_t v6 = v17 % *((void *)&v33 + 1);
          }
          else {
            unint64_t v6 = v17;
          }
        }
        else
        {
          unint64_t v6 = (*((void *)&v33 + 1) - 1) & v17;
        }
      }
      uint64_t v28 = v33;
      uint64_t v29 = *(void **)(v33 + 8 * v6);
      if (v29)
      {
        *float v22 = *v29;
      }
      else
      {
        *float v22 = v34;
        *(void *)&long long v34 = v22;
        *(void *)(v28 + 8 * v6) = &v34;
        if (!*v22) {
          goto LABEL_41;
        }
        unint64_t v30 = *(void *)(*v22 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v30 >= v13) {
            v30 %= v13;
          }
        }
        else
        {
          v30 &= v13 - 1;
        }
        uint64_t v29 = (void *)(v33 + 8 * v30);
      }
      *uint64_t v29 = v22;
LABEL_41:
      ++*((void *)&v34 + 1);
LABEL_42:
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  std::unique_lock<re::UnfairLock>::unlock((uint64_t)&lock);
  for (unint64_t j = (uint64_t **)v34; j; unint64_t j = (uint64_t **)*j)
  {
    re::TimebaseManager::removeLocallyControlledTimebaseFromTree(a2, (OpaqueCMTimebase *)a4, (re::TimebaseTree *)j[2], 0);
    re::TimebaseManager::addLocallyControlledTimebaseToTree((re::TimebaseManager *)a2, (OpaqueCMTimebase *)a4, (re::TimebaseTree *)j[2], 0);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v33);
  if (v37)
  {
    unint64_t v9 = lock;
LABEL_50:
    os_unfair_lock_unlock(v9);
  }
}

void re::TimebaseManager::removeLocallyControlledTimebaseFromTree(os_unfair_lock_s *this, OpaqueCMTimebase *a2, re::TimebaseTree *a3, int a4)
{
  uint64_t v69 = a3;
  locuint64_t k = this + 6;
  os_unfair_lock_lock(this + 6);
  uint64_t v67 = a2;
  if (a2)
  {
    unint64_t v7 = 0;
    uint64_t v68 = this + 28;
    unint64_t v65 = this + 8;
    unint64_t v8 = a2;
    while (1)
    {
      unint64_t v9 = v7;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(&this[18]._os_unfair_lock_opaque, (unint64_t)v8);
      if (!v10) {
        goto LABEL_118;
      }
      uint64_t v11 = v10;
      char v12 = v10 + 4;
      if (!std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v10 + 4, (unint64_t)a3))goto LABEL_118; {
      unint64_t v7 = v11[3];
      }
      unint64_t v13 = std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__emplace_unique_key_args<re::TimebaseTree *,std::piecewise_construct_t const&,std::tuple<re::TimebaseTree * const&>,std::tuple<>>((uint64_t)v12, (unint64_t)a3, &v69);
      uint64_t v14 = v13[3];
      uint64_t v15 = v14 - 1;
      v13[3] = v14 - 1;
      if (v14 != 1) {
        goto LABEL_98;
      }
      unint64_t v16 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v12, (unint64_t)a3);
      if (v16) {
        break;
      }
LABEL_35:
      int v26 = a4;
      if (v8 != v67) {
        int v26 = 1;
      }
      if (!v11[7] && v26)
      {
        std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::__erase_unique<void const*>(&this[18]._os_unfair_lock_opaque, (unint64_t)v8);
        size_t v27 = (os_unfair_lock_s *)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v68, v7);
        if (v27)
        {
          int8x8_t v28 = *(int8x8_t *)&this[30]._os_unfair_lock_opaque;
          unint64_t v29 = *(void *)&v27[2]._os_unfair_lock_opaque;
          uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            if (v29 >= *(void *)&v28) {
              v29 %= *(void *)&v28;
            }
          }
          else
          {
            v29 &= *(void *)&v28 - 1;
          }
          uint64_t v31 = *(void *)&v27->_os_unfair_lock_opaque;
          uint64_t v32 = *(os_unfair_lock_s **)(*(void *)&v68->_os_unfair_lock_opaque + 8 * v29);
          do
          {
            long long v33 = v32;
            uint64_t v32 = *(os_unfair_lock_s **)&v32->_os_unfair_lock_opaque;
          }
          while (v32 != v27);
          if (v33 == &this[32]) {
            goto LABEL_57;
          }
          unint64_t v34 = *(void *)&v33[2]._os_unfair_lock_opaque;
          if (v30.u32[0] > 1uLL)
          {
            if (v34 >= *(void *)&v28) {
              v34 %= *(void *)&v28;
            }
          }
          else
          {
            v34 &= *(void *)&v28 - 1;
          }
          if (v34 == v29)
          {
LABEL_59:
            if (v31)
            {
              unint64_t v35 = *(void *)(v31 + 8);
              goto LABEL_61;
            }
          }
          else
          {
LABEL_57:
            if (!v31) {
              goto LABEL_58;
            }
            unint64_t v35 = *(void *)(v31 + 8);
            if (v30.u32[0] > 1uLL)
            {
              unint64_t v36 = *(void *)(v31 + 8);
              if (v35 >= *(void *)&v28) {
                unint64_t v36 = v35 % *(void *)&v28;
              }
            }
            else
            {
              unint64_t v36 = v35 & (*(void *)&v28 - 1);
            }
            if (v36 != v29)
            {
LABEL_58:
              *(void *)(*(void *)&v68->_os_unfair_lock_opaque + 8 * v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
              uint64_t v31 = *(void *)&v27->_os_unfair_lock_opaque;
              goto LABEL_59;
            }
LABEL_61:
            if (v30.u32[0] > 1uLL)
            {
              if (v35 >= *(void *)&v28) {
                v35 %= *(void *)&v28;
              }
            }
            else
            {
              v35 &= *(void *)&v28 - 1;
            }
            if (v35 != v29)
            {
              *(void *)(*(void *)&v68->_os_unfair_lock_opaque + 8 * v35) = v33;
              uint64_t v31 = *(void *)&v27->_os_unfair_lock_opaque;
            }
          }
          *(void *)&v33->_os_unfair_lock_opaque = v31;
          *(void *)&v27->_os_unfair_lock_opaque = 0;
          --*(void *)&this[34]._os_unfair_lock_opaque;
          operator delete(v27);
        }
        char v37 = (os_unfair_lock_s *)std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(v65, (unint64_t)v8);
        if (v37)
        {
          int8x8_t v38 = *(int8x8_t *)&this[10]._os_unfair_lock_opaque;
          unint64_t v39 = *(void *)&v37[2]._os_unfair_lock_opaque;
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.u32[0] > 1uLL)
          {
            if (v39 >= *(void *)&v38) {
              v39 %= *(void *)&v38;
            }
          }
          else
          {
            v39 &= *(void *)&v38 - 1;
          }
          uint64_t v41 = *(void *)&v37->_os_unfair_lock_opaque;
          unint64_t v42 = *(os_unfair_lock_s **)(*(void *)&v65->_os_unfair_lock_opaque + 8 * v39);
          do
          {
            uint64_t v43 = v42;
            unint64_t v42 = *(os_unfair_lock_s **)&v42->_os_unfair_lock_opaque;
          }
          while (v42 != v37);
          if (v43 == &this[12]) {
            goto LABEL_86;
          }
          unint64_t v44 = *(void *)&v43[2]._os_unfair_lock_opaque;
          if (v40.u32[0] > 1uLL)
          {
            if (v44 >= *(void *)&v38) {
              v44 %= *(void *)&v38;
            }
          }
          else
          {
            v44 &= *(void *)&v38 - 1;
          }
          if (v44 == v39)
          {
LABEL_88:
            if (v41)
            {
              unint64_t v45 = *(void *)(v41 + 8);
              goto LABEL_90;
            }
          }
          else
          {
LABEL_86:
            if (!v41) {
              goto LABEL_87;
            }
            unint64_t v45 = *(void *)(v41 + 8);
            if (v40.u32[0] > 1uLL)
            {
              unint64_t v46 = *(void *)(v41 + 8);
              if (v45 >= *(void *)&v38) {
                unint64_t v46 = v45 % *(void *)&v38;
              }
            }
            else
            {
              unint64_t v46 = v45 & (*(void *)&v38 - 1);
            }
            if (v46 != v39)
            {
LABEL_87:
              *(void *)(*(void *)&v65->_os_unfair_lock_opaque + 8 * v3re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
              uint64_t v41 = *(void *)&v37->_os_unfair_lock_opaque;
              goto LABEL_88;
            }
LABEL_90:
            if (v40.u32[0] > 1uLL)
            {
              if (v45 >= *(void *)&v38) {
                v45 %= *(void *)&v38;
              }
            }
            else
            {
              v45 &= *(void *)&v38 - 1;
            }
            if (v45 != v39)
            {
              *(void *)(*(void *)&v65->_os_unfair_lock_opaque + 8 * v45) = v43;
              uint64_t v41 = *(void *)&v37->_os_unfair_lock_opaque;
            }
          }
          *(void *)&v43->_os_unfair_lock_opaque = v41;
          *(void *)&v37->_os_unfair_lock_opaque = 0;
          --*(void *)&this[14]._os_unfair_lock_opaque;
          operator delete(v37);
          re::TimebaseManager::cleanUpLeafLocallyControlledTimebase((re::TimebaseManager *)this, v8);
        }
        CFRelease(v8);
      }
LABEL_98:
      uint64_t v47 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a3, v7);
      if (v47
        && (unint64_t v48 = *(void *)(v47 + 24)) != 0
        && (unint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(v68, v48)) != 0)
      {
        unint64_t v8 = (OpaqueCMTimebase *)v49[3];
        if (!v15) {
          goto LABEL_104;
        }
      }
      else
      {
        unint64_t v8 = 0;
        if (!v15)
        {
LABEL_104:
          if (*(void *)a3)
          {
            unint64_t v50 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
            unint64_t v51 = (v50 ^ (v50 >> 31)) % *((unsigned int *)a3 + 6);
            uint64_t v52 = *((void *)a3 + 1);
            uint64_t v53 = *(unsigned int *)(v52 + 4 * v51);
            if (v53 != 0x7FFFFFFF)
            {
              uint64_t v54 = *((void *)a3 + 2);
              if (*(void *)(v54 + 200 * v53 + 16) == v7)
              {
                *(_DWORD *)(v52 + 4 * v51) = *(_DWORD *)(v54 + 200 * v53 + 8) & 0x7FFFFFFF;
LABEL_111:
                uint64_t v56 = *((void *)a3 + 2);
                uint64_t v57 = v56 + 200 * v53;
                int v60 = *(_DWORD *)(v57 + 8);
                BOOL v59 = (int *)(v57 + 8);
                int v58 = v60;
                if (v60 < 0)
                {
                  *BOOL v59 = v58 & 0x7FFFFFFF;
                  uint64_t v56 = *((void *)a3 + 2);
                  int v58 = *(_DWORD *)(v56 + 200 * v53 + 8);
                }
                int v61 = *((_DWORD *)a3 + 10);
                *(_DWORD *)(v56 + 200 * v53 + 8) = *((_DWORD *)a3 + 9) | v58 & 0x80000000;
                --*((_DWORD *)a3 + 7);
                *((_DWORD *)a3 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v53;
                *((_DWORD *)a3 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v61 + 1;
              }
              else
              {
                while (1)
                {
                  uint64_t v55 = v53;
                  uint64_t v53 = *(_DWORD *)(v54 + 200 * v53 + 8) & 0x7FFFFFFF;
                  if (v53 == 0x7FFFFFFF) {
                    break;
                  }
                  if (*(void *)(v54 + 200 * v53 + 16) == v7)
                  {
                    *(_DWORD *)(v54 + 200 * v55 + 8) = *(_DWORD *)(v54 + 200 * v55 + 8) & 0x80000000 | *(_DWORD *)(v54 + 200 * v53 + 8) & 0x7FFFFFFF;
                    goto LABEL_111;
                  }
                }
              }
            }
          }
          if (v9)
          {
            uint64_t v62 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a3, v9);
            if (v62) {
              *(void *)(v62 + 24) = 0;
            }
          }
        }
      }
      if (!v8) {
        goto LABEL_118;
      }
    }
    int8x8_t v17 = (int8x8_t)v11[5];
    unint64_t v18 = v16[1];
    uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      if (v18 >= *(void *)&v17) {
        v18 %= *(void *)&v17;
      }
    }
    else
    {
      v18 &= *(void *)&v17 - 1;
    }
    uint64_t v20 = *v16;
    unint64_t v21 = *(uint64_t **)(*v12 + 8 * v18);
    do
    {
      float v22 = v21;
      unint64_t v21 = (uint64_t *)*v21;
    }
    while (v21 != v16);
    if (v22 == v11 + 6) {
      goto LABEL_24;
    }
    unint64_t v23 = v22[1];
    if (v19.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&v17) {
        v23 %= *(void *)&v17;
      }
    }
    else
    {
      v23 &= *(void *)&v17 - 1;
    }
    if (v23 != v18)
    {
LABEL_24:
      if (v20)
      {
        unint64_t v24 = *(void *)(v20 + 8);
        if (v19.u32[0] > 1uLL)
        {
          unint64_t v25 = *(void *)(v20 + 8);
          if (v24 >= *(void *)&v17) {
            unint64_t v25 = v24 % *(void *)&v17;
          }
        }
        else
        {
          unint64_t v25 = v24 & (*(void *)&v17 - 1);
        }
        if (v25 == v18) {
          goto LABEL_28;
        }
      }
      *(void *)(*v12 + 8 * v18) = 0;
      uint64_t v20 = *v16;
    }
    if (!v20)
    {
LABEL_34:
      *float v22 = v20;
      *unint64_t v16 = 0;
      --v11[7];
      operator delete(v16);
      goto LABEL_35;
    }
    unint64_t v24 = *(void *)(v20 + 8);
LABEL_28:
    if (v19.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v17) {
        v24 %= *(void *)&v17;
      }
    }
    else
    {
      v24 &= *(void *)&v17 - 1;
    }
    if (v24 != v18)
    {
      *(void *)(*v12 + 8 * v24) = v22;
      uint64_t v20 = *v16;
    }
    goto LABEL_34;
  }
LABEL_118:
  uint64_t v63 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)&this[72], (unint64_t)a3);
  if (v63) {
    (*(void (**)(void))(*(void *)v63 + 16))();
  }
  os_unfair_lock_unlock(lock);
}

void re::TimebaseManager::removeLocallyControlledTimebaseFromTree(os_unfair_lock_s *this, OpaqueCMTimebase *a2, re::TimebaseTree *a3)
{
}

uint64_t re::TimebaseManager::addExternallyControlledTree(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v5 = this + 6;
  uint64_t v31 = this + 6;
  char v32 = 1;
  os_unfair_lock_lock(this + 6);
  unint64_t v6 = this + 48;
  if (std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(&this[48]._os_unfair_lock_opaque, a2)|| (unint64_t v9 = *(void *)(a2 + 48)) != 0&& ((ClockOrTimebaseForID = re::TimebaseManager::findClockOrTimebaseForID((re::TimebaseManager *)this, v9)) == 0|| (v11 = CFGetTypeID(ClockOrTimebaseForID), v11 != CMTimebaseGetTypeID())))
  {
    uint64_t v7 = 0;
    goto LABEL_3;
  }
  unint64_t v12 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v12 >> 47) ^ v12);
  unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
  unint64_t v15 = *(void *)&this[50]._os_unfair_lock_opaque;
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
      if (v14 >= v15) {
        unint64_t v2 = v14 % v15;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
    int8x8_t v17 = *(void **)(*(void *)&v6->_os_unfair_lock_opaque + 8 * v2);
    if (v17)
    {
      for (uint64_t i = (void *)*v17; i; uint64_t i = (void *)*i)
      {
        unint64_t v19 = i[1];
        if (v19 == v14)
        {
          if (i[2] == a2) {
            goto LABEL_47;
          }
        }
        else
        {
          if (v16.u32[0] > 1uLL)
          {
            if (v19 >= v15) {
              v19 %= v15;
            }
          }
          else
          {
            v19 &= v15 - 1;
          }
          if (v19 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v20 = operator new(0x18uLL);
  v20[1] = v14;
  v20[2] = a2;
  float v21 = (float)(unint64_t)(*(void *)&this[54]._os_unfair_lock_opaque + 1);
  float v22 = *(float *)&this[56]._os_unfair_lock_opaque;
  if (!v15 || (float)(v22 * (float)v15) < v21)
  {
    BOOL v23 = 1;
    if (v15 >= 3) {
      BOOL v23 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v15);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)&this[48], v26);
    unint64_t v15 = *(void *)&this[50]._os_unfair_lock_opaque;
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v2 = v14 % v15;
      }
      else {
        unint64_t v2 = v14;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
  }
  uint64_t v27 = *(void *)&v6->_os_unfair_lock_opaque;
  int8x8_t v28 = *(void **)(*(void *)&v6->_os_unfair_lock_opaque + 8 * v2);
  if (v28)
  {
    *uint64_t v20 = *v28;
  }
  else
  {
    uint64_t v29 = *(void *)&this[52]._os_unfair_lock_opaque;
    *uint64_t v20 = v29;
    *(void *)&this[52]._os_unfair_lock_opaque = v20;
    *(void *)(v27 + 8 * v2) = this + 52;
    if (!v29) {
      goto LABEL_46;
    }
    unint64_t v30 = *(void *)(v29 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v30 >= v15) {
        v30 %= v15;
      }
    }
    else
    {
      v30 &= v15 - 1;
    }
    int8x8_t v28 = (void *)(*(void *)&v6->_os_unfair_lock_opaque + 8 * v30);
  }
  *int8x8_t v28 = v20;
LABEL_46:
  ++*(void *)&this[54]._os_unfair_lock_opaque;
LABEL_47:
  std::unique_lock<re::UnfairLock>::unlock((uint64_t)&v31);
  re::TimebaseManager::_afterFrameUpdate(this);
  if (!v32) {
    return 1;
  }
  uint64_t v7 = 1;
  uint64_t v5 = v31;
LABEL_3:
  os_unfair_lock_unlock(v5);
  return v7;
}

void re::TimebaseManager::removeTimebaseTree(os_unfair_lock_s *this, re::TimebaseTree *a2)
{
  locuint64_t k = this + 6;
  char v39 = 1;
  os_unfair_lock_lock(this + 6);
  long long v35 = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  uint64_t v4 = *((unsigned int *)a2 + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int *)(*((void *)a2 + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 50;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)a2 + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 == v5) {
    goto LABEL_34;
  }
  uint64_t v8 = v5;
  unsigned int v9 = *((_DWORD *)a2 + 8);
  do
  {
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(&this[28]._os_unfair_lock_opaque, *(void *)(*((void *)a2 + 2) + 200 * v8 + 16));
    if (!v10) {
      goto LABEL_26;
    }
    int8x8_t v11 = *(int8x8_t *)&this[10]._os_unfair_lock_opaque;
    if (!*(void *)&v11) {
      goto LABEL_26;
    }
    unint64_t v12 = v10[3];
    unint64_t v13 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
    unint64_t v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v13 >> 47) ^ v13);
    unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v11);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v17 = v15;
      if (v15 >= *(void *)&v11) {
        unint64_t v17 = v15 % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v17 = v15 & (*(void *)&v11 - 1);
    }
    unint64_t v18 = *(void **)(*(void *)&this[8]._os_unfair_lock_opaque + 8 * v17);
    if (!v18) {
      goto LABEL_26;
    }
    unint64_t v19 = (void *)*v18;
    if (!v19) {
      goto LABEL_26;
    }
    while (1)
    {
      unint64_t v20 = v19[1];
      if (v15 == v20) {
        break;
      }
      if (v16.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&v11) {
          v20 %= *(void *)&v11;
        }
      }
      else
      {
        v20 &= *(void *)&v11 - 1;
      }
      if (v20 != v17) {
        goto LABEL_26;
      }
LABEL_25:
      unint64_t v19 = (void *)*v19;
      if (!v19) {
        goto LABEL_26;
      }
    }
    if (v19[2] != v12) {
      goto LABEL_25;
    }
    std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>((uint64_t)&v35, v12, v12);
    unsigned int v9 = *((_DWORD *)a2 + 8);
LABEL_26:
    if (v9 <= (int)v5 + 1) {
      unsigned int v21 = v5 + 1;
    }
    else {
      unsigned int v21 = v9;
    }
    while (1)
    {
      uint64_t v8 = (v5 + 1);
      if (v21 - 1 == v5) {
        break;
      }
      LODWORD(v5) = v5 + 1;
      unsigned int v22 = v8;
      if ((*(_DWORD *)(*((void *)a2 + 2) + 200 * v8 + 8) & 0x80000000) != 0) {
        goto LABEL_33;
      }
    }
    unsigned int v22 = v21;
LABEL_33:
    LODWORD(v5) = v22;
  }
  while (v4 != v22);
LABEL_34:
  BOOL v23 = this + 48;
  unint64_t v24 = (os_unfair_lock_s *)std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(&this[48]._os_unfair_lock_opaque, (unint64_t)a2);
  if (v24)
  {
    int8x8_t v25 = *(int8x8_t *)&this[50]._os_unfair_lock_opaque;
    uint64_t v26 = *(void *)&v24->_os_unfair_lock_opaque;
    unint64_t v27 = *(void *)&v24[2]._os_unfair_lock_opaque;
    uint8x8_t v28 = (uint8x8_t)vcnt_s8(v25);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      if (v27 >= *(void *)&v25) {
        v27 %= *(void *)&v25;
      }
    }
    else
    {
      v27 &= *(void *)&v25 - 1;
    }
    uint64_t v29 = *(os_unfair_lock_s **)(*(void *)&v23->_os_unfair_lock_opaque + 8 * v27);
    do
    {
      unint64_t v30 = v29;
      uint64_t v29 = *(os_unfair_lock_s **)&v29->_os_unfair_lock_opaque;
    }
    while (v29 != v24);
    if (v30 == &this[52]) {
      goto LABEL_52;
    }
    unint64_t v31 = *(void *)&v30[2]._os_unfair_lock_opaque;
    if (v28.u32[0] > 1uLL)
    {
      if (v31 >= *(void *)&v25) {
        v31 %= *(void *)&v25;
      }
    }
    else
    {
      v31 &= *(void *)&v25 - 1;
    }
    if (v31 == v27)
    {
LABEL_54:
      if (v26)
      {
        unint64_t v32 = *(void *)(v26 + 8);
        goto LABEL_56;
      }
    }
    else
    {
LABEL_52:
      if (!v26) {
        goto LABEL_53;
      }
      unint64_t v32 = *(void *)(v26 + 8);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v33 = *(void *)(v26 + 8);
        if (v32 >= *(void *)&v25) {
          unint64_t v33 = v32 % *(void *)&v25;
        }
      }
      else
      {
        unint64_t v33 = v32 & (*(void *)&v25 - 1);
      }
      if (v33 != v27)
      {
LABEL_53:
        *(void *)(*(void *)&v23->_os_unfair_lock_opaque + 8 * v27) = 0;
        uint64_t v26 = *(void *)&v24->_os_unfair_lock_opaque;
        goto LABEL_54;
      }
LABEL_56:
      if (v28.u32[0] > 1uLL)
      {
        if (v32 >= *(void *)&v25) {
          v32 %= *(void *)&v25;
        }
      }
      else
      {
        v32 &= *(void *)&v25 - 1;
      }
      if (v32 != v27)
      {
        *(void *)(*(void *)&v23->_os_unfair_lock_opaque + 8 * v32) = v30;
        uint64_t v26 = *(void *)&v24->_os_unfair_lock_opaque;
      }
    }
    *(void *)&v30->_os_unfair_lock_opaque = v26;
    *(void *)&v24->_os_unfair_lock_opaque = 0;
    --*(void *)&this[54]._os_unfair_lock_opaque;
    operator delete(v24);
  }
  std::unique_lock<re::UnfairLock>::unlock((uint64_t)&lock);
  for (uint64_t i = (uint64_t **)v36; i; uint64_t i = (uint64_t **)*i)
    re::TimebaseManager::removeLocallyControlledTimebaseFromTree(this, (OpaqueCMTimebase *)i[2], a2, 1);
  re::TimebaseManager::_afterFrameUpdate(this);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v35);
  if (v39) {
    os_unfair_lock_unlock(lock);
  }
}

void *re::TimebaseManager::copyReadOnlyClockOrTimebaseForID(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = this + 6;
  os_unfair_lock_lock(this + 6);
  ClockOrTimebaseForID = re::TimebaseManager::findClockOrTimebaseForID((re::TimebaseManager *)this, a2);
  os_unfair_lock_unlock(v4);
  if (ClockOrTimebaseForID)
  {
    CFTypeID v6 = CFGetTypeID(ClockOrTimebaseForID);
    if (v6 == CMTimebaseGetTypeID())
    {
      OnlyTimebase = (re *)CMTimebaseCreateReadOnlyTimebase();
      if (OnlyTimebase)
      {
        int v8 = (int)OnlyTimebase;
        unsigned int v9 = re::TimebaseLog(OnlyTimebase);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315650;
          unint64_t v12 = "copyReadOnlyClockOrTimebaseForID";
          __int16 v13 = 1024;
          int v14 = 1403;
          __int16 v15 = 1024;
          int v16 = v8;
          _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "%s:%d error: %d", buf, 0x18u);
        }
      }
      return 0;
    }
    else
    {
      CFRetain(ClockOrTimebaseForID);
    }
  }
  return ClockOrTimebaseForID;
}

void *re::TimebaseManager::copyClockOrTimebaseForID(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v4 = this + 6;
  os_unfair_lock_lock(this + 6);
  ClockOrTimebaseForID = re::TimebaseManager::findClockOrTimebaseForID((re::TimebaseManager *)this, a2);
  os_unfair_lock_unlock(v4);
  if (ClockOrTimebaseForID) {
    CFRetain(ClockOrTimebaseForID);
  }
  return ClockOrTimebaseForID;
}

BOOL re::TimebaseManager::isLocallyControlledClockOrTimebase(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v4 = this + 6;
  os_unfair_lock_lock(this + 6);
  BOOL v5 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(&this[28]._os_unfair_lock_opaque, a2) != 0;
  os_unfair_lock_unlock(v4);
  return v5;
}

void re::TimebaseManager::latestSeekTargetForTimebase(os_unfair_lock_s *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  CFTypeID v6 = this + 6;
  os_unfair_lock_lock(this + 6);
  int v7 = std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(&this[38]._os_unfair_lock_opaque, a2);
  if (v7)
  {
    *(_OWORD *)a3 = *((_OWORD *)v7 + 2);
    uint64_t v8 = v7[6];
  }
  else
  {
    uint64_t v9 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PhaseShapeAndMesh>>>::find<unsigned long long>(&this[28]._os_unfair_lock_opaque, a2);
    if (v9)
    {
      int8x8_t v10 = *(int8x8_t *)&this[20]._os_unfair_lock_opaque;
      if (v10)
      {
        unint64_t v11 = *(void *)(v9 + 24);
        unint64_t v12 = 0x9DDFEA08EB382D69 * (((8 * v11) + 8) ^ HIDWORD(v11));
        unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(v11) ^ (v12 >> 47) ^ v12);
        unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
        uint8x8_t v15 = (uint8x8_t)vcnt_s8(v10);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v16 = v14;
          if (v14 >= *(void *)&v10) {
            unint64_t v16 = v14 % *(void *)&v10;
          }
        }
        else
        {
          unint64_t v16 = v14 & (*(void *)&v10 - 1);
        }
        uint64_t v17 = *(void **)(*(void *)&this[18]._os_unfair_lock_opaque + 8 * v16);
        if (v17)
        {
          for (uint64_t i = (void *)*v17; i; uint64_t i = (void *)*i)
          {
            unint64_t v19 = i[1];
            if (v14 == v19)
            {
              if (i[2] == v11)
              {
                unsigned int v22 = i + 6;
                while (1)
                {
                  unsigned int v22 = (void *)*v22;
                  if (!v22) {
                    break;
                  }
                  uint64_t v9 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v22[2], a2);
                  if (v9)
                  {
                    if (!*(unsigned char *)(v9 + 144)) {
                      goto LABEL_22;
                    }
                    *(_OWORD *)a3 = *(_OWORD *)(v9 + 148);
                    uint64_t v8 = *(void *)(v9 + 164);
                    goto LABEL_23;
                  }
                }
                unint64_t v20 = re::TimebaseLog((re *)v9);
                if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_21;
                }
                int v24 = 134217984;
                unint64_t v25 = a2;
                BOOL v23 = "retrieving seek target for unused timebase %llu";
LABEL_29:
                _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v24, 0xCu);
                goto LABEL_21;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v19 >= *(void *)&v10) {
                  v19 %= *(void *)&v10;
                }
              }
              else
              {
                v19 &= *(void *)&v10 - 1;
              }
              if (v19 != v16) {
                break;
              }
            }
          }
        }
      }
      unint64_t v20 = re::TimebaseLog((re *)v9);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        int v24 = 134217984;
        unint64_t v25 = a2;
        BOOL v23 = "retrieving seek target for un-referenced timebase %llu";
        goto LABEL_29;
      }
LABEL_21:
    }
LABEL_22:
    uint64_t v21 = MEMORY[0x263F01090];
    *(_OWORD *)a3 = *MEMORY[0x263F01090];
    uint64_t v8 = *(void *)(v21 + 16);
  }
LABEL_23:
  *(void *)(a3 + 16) = v8;
  os_unfair_lock_unlock(v6);
}

uint64_t re::TimebaseManager::engineTimebase(re::TimebaseManager *this)
{
  return (uint64_t)this + 232;
}

void ___ZL34AlignmentDifferenceUpdateThresholdv_block_invoke()
{
  os_log_t v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  [v0 doubleForKey:@"clockSyncUpdateThreshold"];
  qword_26AF9F570 = v1;

  if (*(double *)&qword_26AF9F570 == 0.0) {
    qword_26AF9F570 = 0x3F847AE147AE147BLL;
  }
}

void std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      int8x8_t prime = (int8x8_t)v13;
    }
    else {
      int8x8_t prime = (int8x8_t)v12;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v8) {
      goto LABEL_43;
    }
    unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      unint64_t v21 = std::__next_prime(v21);
    }
    else
    {
      uint64_t v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2) {
        unint64_t v21 = v23;
      }
    }
    if (*(void *)&prime <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint8x8_t v15 = operator new(8 * *(void *)&prime);
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (*(void *)&prime != v17);
      unint64_t v18 = *(void **)(a1 + 16);
      if (v18)
      {
        unint64_t v19 = v18[1];
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(void *)&prime) {
            v19 %= *(void *)&prime;
          }
        }
        else
        {
          v19 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = a1 + 16;
        for (uint64_t i = (void *)*v18; *v18; uint64_t i = (void *)*v18)
        {
          unint64_t v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(void *)&prime) {
              v25 %= *(void *)&prime;
            }
          }
          else
          {
            v25 &= *(void *)&prime - 1;
          }
          if (v25 == v19)
          {
            unint64_t v18 = i;
          }
          else
          {
            uint64_t v26 = i;
            if (*(void *)(*(void *)a1 + 8 * v25))
            {
              do
              {
                unint64_t v27 = v26;
                uint64_t v26 = (void *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *unint64_t v18 = v26;
              void *v27 = **(void **)(*(void *)a1 + 8 * v25);
              **(void **)(*(void *)a1 + 8 * v25) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v25) = v18;
              unint64_t v18 = i;
              unint64_t v19 = v25;
            }
          }
        }
      }
      unint64_t v8 = (unint64_t)prime;
    }
    else
    {
      char v39 = *(void **)a1;
      *(void *)a1 = 0;
      if (v39) {
        operator delete(v39);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v29 = v7;
    if (v8 <= v7) {
      unint64_t v29 = v7 % v8;
    }
  }
  else
  {
    unint64_t v29 = (v8 - 1) & v7;
  }
  unint64_t v30 = *(void **)(*(void *)a1 + 8 * v29);
  if (v30)
  {
    int v31 = 0;
    do
    {
      unint64_t v32 = v30;
      unint64_t v30 = (void *)*v30;
      if (!v30) {
        break;
      }
      unint64_t v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v34 = v30[1];
        if (v33 >= v8) {
          unint64_t v34 = v33 % v8;
        }
      }
      else
      {
        unint64_t v34 = v33 & (v8 - 1);
      }
      if (v34 != v29) {
        break;
      }
      BOOL v35 = v33 == v7 && v30[2] == a2[2];
      int v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    unint64_t v32 = 0;
  }
  unint64_t v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8) {
      v37 %= v8;
    }
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v37) = a1 + 16;
    if (!*a2) {
      goto LABEL_79;
    }
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *unint64_t v32 = a2;
  if (*a2)
  {
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

void *re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  *(_OWORD *)&v15[16] = 0u;
  memset(v19, 0, sizeof(v19));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)uint8x8_t v15 = 0x3FF0000000000000uLL;
  *(_OWORD *)&v15[8] = *MEMORY[0x263F010E0];
  *(void *)&v15[24] = *(void *)(MEMORY[0x263F010E0] + 16);
  uint64_t v8 = *(void *)(MEMORY[0x263F010E0] + 16);
  long long v16 = *MEMORY[0x263F010E0];
  *(void *)&long long v17 = v8;
  *((void *)&v17 + 1) = 0x3FF0000000000000;
  long long v9 = *MEMORY[0x263F010E0];
  *(void *)&v19[0] = *(void *)(MEMORY[0x263F010E0] + 16);
  long long v18 = v9;
  long long v10 = *MEMORY[0x263F010E0];
  *((void *)&v19[1] + 1) = *(void *)(MEMORY[0x263F010E0] + 16);
  *(_OWORD *)((char *)v19 + 8) = v10;
  long long v11 = *MEMORY[0x263F010E0];
  *(void *)((char *)&v19[3] + 4) = *(void *)(MEMORY[0x263F010E0] + 16);
  *(_OWORD *)((char *)&v19[2] + 4) = v11;
  unint64_t v12 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, v14);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v12);
  return v12;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 50;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 200 * v10 + 16, *(void *)(a2 + 16) + 200 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 200 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&unsigned char v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0) {
            re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v12 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v12 - 16), v12, v12 + 8);
          }
          ++v11;
          v12 += 200;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 200 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 200 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 200 * v9;
  *(_DWORD *)(v11 + v13 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v13) = a3;
  *(void *)(*(void *)(a1 + 16) + v13 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + v13;
  long long v16 = *a5;
  long long v15 = a5[1];
  *(_OWORD *)(v14 + 56) = a5[2];
  long long v18 = a5[5];
  long long v17 = a5[6];
  long long v19 = a5[4];
  *(_OWORD *)(v14 + 72) = a5[3];
  *(_OWORD *)(v14 + 88) = v19;
  *(_OWORD *)(v14 + 104) = v18;
  *(_OWORD *)(v14 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = v17;
  long long v21 = a5[9];
  long long v20 = a5[10];
  long long v22 = a5[8];
  *(_OWORD *)(v14 + 136) = a5[7];
  *(_OWORD *)(v14 + 152) = v22;
  *(_OWORD *)(v14 + 168) = v21;
  *(_OWORD *)(v14 + 184) = v20;
  *(_OWORD *)(v14 + 24) = v16;
  *(_OWORD *)(v14 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unsigned int v3 = *(_DWORD *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 200 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 200;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v8;
  }
}

uint64_t re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v22 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 16) + 200 * v22;
    return v21 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 200 * v10 + 16) != v6)
  {
    LODWORD(v1re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v11 + 200 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 200 * v10;
  long long v13 = *a3;
  long long v14 = a3[1];
  *(_OWORD *)(v12 + 56) = a3[2];
  *(_OWORD *)(v12 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
  *(_OWORD *)(v12 + 24) = v13;
  long long v15 = a3[3];
  long long v16 = a3[4];
  long long v17 = a3[5];
  *(_OWORD *)(v12 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = a3[6];
  *(_OWORD *)(v12 + 104) = v17;
  *(_OWORD *)(v12 + 88) = v16;
  *(_OWORD *)(v12 + 72) = v15;
  long long v18 = a3[7];
  long long v19 = a3[8];
  long long v20 = a3[9];
  *(_OWORD *)(v12 + 18re::VariableStepTimer::setClock((uint64_t)this, 0) = *(long long *)((char *)a3 + 156);
  *(_OWORD *)(v12 + 168) = v20;
  *(_OWORD *)(v12 + 152) = v19;
  *(_OWORD *)(v12 + 136) = v18;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 16) + 200 * v10;
  return v21 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
    re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchFunction>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, uint64_t *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (long long *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, unint64_t *a2)
{
  return re::HashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1, *a2);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 200 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 50;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 200 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 200 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ClockOrTimebase,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

id re::internal::defaultRetain<re::TimebaseService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::TimebaseService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::SharedClockService,OpaqueCMClock *,OpaqueCMClock *,unsigned long long>::createSubscription<re::TimebaseManager>(re::TimebaseManager *,REEventHandlerResult (re::TimebaseManager::*)(re::SharedClockService*,OpaqueCMClock *,OpaqueCMClock *,unsigned long long))::{lambda(re::SharedClockService*,re::Event<re::SharedClockService,OpaqueCMClock *,OpaqueCMClock *,unsigned long long>::Subscription const&,OpaqueCMClock *&&,OpaqueCMClock *&,unsigned long long &&)#1}::__invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = (uint64_t (*)(void *, uint64_t, void, void, void))a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = (void *)(*a2 + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, uint64_t, void, void, void))(*v8 + v6);
  }
  return v6(v8, a1, *a3, *a4, *a5);
}

void *std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,void const*>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,void const*>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,void const*>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *long long v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::__erase_unique<void const*>(void *a1, unint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>>>::find<void const*>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v7 = *(void **)(*a1 + 8 * v5);
    do
    {
      uint8x8_t v8 = v7;
      unint64_t v7 = (void *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_19;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3) {
        goto LABEL_20;
      }
      unint64_t v10 = *(void *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_20:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *v3;
      }
    }
    *uint8x8_t v8 = v11;
    *unint64_t v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    char v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void const*,re::TimebaseManager::ClockOrTimebaseRefCount>,void *>>>>::reset[abi:nn180100]((uint64_t)v13);
  }
}

void std::__hash_table<OpaqueCMTimebase *,std::hash<OpaqueCMTimebase *>,std::equal_to<OpaqueCMTimebase *>,std::allocator<OpaqueCMTimebase *>>::__emplace_unique_key_args<OpaqueCMTimebase *,OpaqueCMTimebase *>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  char v14 = operator new(0x18uLL);
  *char v14 = 0;
  v14[1] = v8;
  long long v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          unsigned int v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          int v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *int v24 = *v30;
                  *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                int v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        BOOL v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v32 = *(void **)a1;
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *char v14 = *v33;
LABEL_72:
    *unint64_t v33 = v14;
    goto LABEL_73;
  }
  *char v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void re::HashTable<re::TimebaseTree *,void({block_pointer} {__strong})(re::TimebaseTree *),re::Hash<re::TimebaseTree *>,re::EqualTo<re::TimebaseTree *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::TimebaseTree *,void({block_pointer} {__strong})(re::TimebaseTree *),re::Hash<re::TimebaseTree *>,re::EqualTo<re::TimebaseTree *>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(void *)v13;
            uint64_t v21 = *(void *)(a1 + 16) + 32 * v17;
            *(void *)(v21 + 24) = _Block_copy(*(const void **)(v13 + 8));
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,void({block_pointer} {__strong})(unsigned long long,REAudioPlaybackState,REAudioPlaybackState),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::TimebaseManager::ExternallyControlledTimebase>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  uint64_t v12 = (_OWORD *)MEMORY[0x263F010E0];
  *((void *)v10 + 6) = *(void *)(MEMORY[0x263F010E0] + 16);
  *((void *)v10 + 7) = 0;
  *((_OWORD *)v10 + 2) = *v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)uint64_t v10 = *v20;
LABEL_38:
    *int v20 = v10;
    goto LABEL_39;
  }
  *(void *)uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void *std::__hash_table<std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::__unordered_map_hasher<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::hash<re::TimebaseTree *>,std::equal_to<re::TimebaseTree *>,true>,std::__unordered_map_equal<re::TimebaseTree *,std::__hash_value_type<re::TimebaseTree *,unsigned long long>,std::equal_to<re::TimebaseTree *>,std::hash<re::TimebaseTree *>,true>,std::allocator<std::__hash_value_type<re::TimebaseTree *,unsigned long long>>>::__emplace_unique_key_args<re::TimebaseTree *,std::piecewise_construct_t const&,std::tuple<re::TimebaseTree * const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  float v14 = operator new(0x18uLL);
  *float v14 = 0;
  v14[1] = v8;
  long long v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *float v14 = *v22;
LABEL_38:
    *unint64_t v22 = v14;
    goto LABEL_39;
  }
  *float v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void re::TraceDelta::sort(re::TraceDelta *this)
{
  uint64_t v1 = *((void *)this + 6);
  int64_t v2 = *((void *)this + 4);
  if (v2 <= 0)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(*((void *)this + 6), (__n128 *)(v1 + (v2 << 6)), (uint64_t)&v5, v2, 0, 0);
  }
  else
  {
    unint64_t v3 = (__n128 *)std::get_temporary_buffer[abi:nn180100]<re::TraceEntry>(*((void *)this + 4));
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(v1, (__n128 *)(v1 + (v2 << 6)), (uint64_t)&v5, v2, v3, v4);
    if (v3) {
      operator delete(v3);
    }
  }
}

void *re::TraceDelta::reduce(void *this)
{
  uint64_t v1 = this[4];
  if (v1)
  {
    int64_t v2 = this;
    unint64_t v3 = this + 2;
    uint64_t v4 = this[6];
    if (v1 == 1)
    {
      uint64_t v5 = this[6];
    }
    else
    {
      uint64_t v6 = v4 + 64;
      do
      {
        if (*(unsigned char *)(v4 + 16))
        {
          if (*(void *)v4 == *(void *)v6 && *(void *)(v4 + 8) == *(void *)(v6 + 8))
          {
            re::TraceDelta::merge((re *)this, v4, v6, (uint64_t)&v12);
            long long v10 = v12;
            *(_WORD *)(v4 + 16) = v13;
            *(_OWORD *)uint64_t v4 = v10;
            re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v4 + 24, (uint64_t)v14);
            this = (void *)v14[0];
            if (v14[0] && v14[4]) {
              this = (void *)(*(uint64_t (**)(void))(*(void *)v14[0] + 40))();
            }
          }
          else
          {
            if (v6 - 64 != v4)
            {
              long long v8 = *(_OWORD *)v6;
              *(_WORD *)(v4 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_WORD *)(v6 + 16);
              *(_OWORD *)(v4 + 64) = v8;
              this = (void *)re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v4 + 88, v6 + 24);
            }
            v4 += 64;
          }
        }
        else
        {
          long long v9 = *(_OWORD *)v6;
          *(_WORD *)(v4 + 16) = *(_WORD *)(v6 + 16);
          *(_OWORD *)uint64_t v4 = v9;
          this = (void *)re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v4 + 24, v6 + 24);
        }
        v6 += 64;
        uint64_t v5 = v2[6];
      }
      while (v6 != v5 + (v2[4] << 6));
    }
    if (*(unsigned char *)(v4 + 16)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = -1;
    }
    return re::DynamicArray<re::TraceEntry>::resize(v3, ((v4 + (v11 << 6) - v5) >> 6) + 1);
  }
  return this;
}

re *re::TraceDelta::merge@<X0>(re *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  switch(*(unsigned char *)(a3 + 16))
  {
    case 1:
      int v8 = *(unsigned __int8 *)(a2 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a3;
      *(_WORD *)(a4 + 16) = *(_WORD *)(a3 + 16);
      uint64_t result = (re *)re::DynamicArray<BOOL>::DynamicArray(a4 + 24, (uint64_t *)(a3 + 24));
      if (v8 == 3) {
        *(unsigned char *)(a4 + 16) = 2;
      }
      break;
    case 2:
      int v9 = *(unsigned __int8 *)(a2 + 16);
      if (v9 != 3)
      {
        *(_OWORD *)a4 = *(_OWORD *)a3;
        *(unsigned char *)(a4 + 16) = v9;
        *(unsigned char *)(a4 + 17) = *(unsigned char *)(a3 + 17) | *(unsigned char *)(a2 + 17);
        goto LABEL_14;
      }
      long long v10 = *re::traceLogObjects(result);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "TraceDelta: Unxpected sequence Remove + Update", v11, 2u);
      }
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_WORD *)(a4 + 16) = *(_WORD *)(a2 + 16);
      uint64_t result = (re *)re::DynamicArray<BOOL>::DynamicArray(a4 + 24, (uint64_t *)(a2 + 24));
      break;
    case 3:
      if (*(unsigned char *)(a2 + 16) != 1)
      {
        *(_OWORD *)a4 = *(_OWORD *)a3;
        *(_WORD *)(a4 + 16) = *(_WORD *)(a3 + 16);
LABEL_14:
        uint64_t v6 = a4 + 24;
        unint64_t v7 = (uint64_t *)(a3 + 24);
        goto LABEL_15;
      }
      *(void *)(a4 + 56) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 48) = 0;
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(_WORD *)(a4 + 16) = 0;
      break;
    default:
      *(_OWORD *)a4 = *(_OWORD *)a2;
      *(_WORD *)(a4 + 16) = *(_WORD *)(a2 + 16);
      uint64_t v6 = a4 + 24;
      unint64_t v7 = (uint64_t *)(a2 + 24);
LABEL_15:
      uint64_t result = (re *)re::DynamicArray<BOOL>::DynamicArray(v6, v7);
      break;
  }
  return result;
}

void *re::DynamicArray<re::TraceEntry>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = (a2 << 6) | 0x18;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit(v3[4] + v8);
      ++v9;
      v8 += 64;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::TraceEntry>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      unint64_t v6 = v4 << 6;
      do
      {
        unint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 56) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
        *(void *)(v7 + 24) = 0;
        *(_DWORD *)(v7 + 48) = 0;
        *(void *)unint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_WORD *)(v7 + 16) = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::TraceDelta::merge(re::TraceDelta *this, const re::TraceDelta *a2)
{
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = (re::TraceDelta *)((char *)this + 16);
  uint64_t v5 = *((void *)this + 4);
  v25[0] = *((void *)this + 2);
  v25[1] = v3;
  uint64_t v26 = v5;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  unint64_t v6 = (__n128 *)*((void *)this + 6);
  uint8x8_t v28 = v6;
  *((void *)this + 6) = 0;
  ++*((_DWORD *)this + 10);
  int v27 = 1;
  uint64_t v7 = *((void *)a2 + 6);
  *((void *)this + 1) = *((void *)a2 + 1);
  unint64_t v8 = *((void *)a2 + 4) + v5;
  if (v8) {
    this = (re::TraceDelta *)re::DynamicArray<re::TraceEntry>::setCapacity((void *)this + 2, v8);
  }
  unint64_t v9 = v6;
  while (1)
  {
    uint64_t v10 = *((void *)a2 + 6) + (*((void *)a2 + 4) << 6);
    if (v9 == &v6[4 * v5]) {
      break;
    }
    if (v7 == v10) {
      goto LABEL_14;
    }
    if (!v9[1].n128_u8[0]
      || ((unint64_t v11 = v9->n128_u64[0],
           unint64_t v12 = v9->n128_u64[1],
           unint64_t v13 = *(void *)v7,
           unint64_t v14 = *(void *)(v7 + 8),
           v9->n128_u64[0] == *(void *)v7)
        ? (BOOL v15 = v12 == v14)
        : (BOOL v15 = 0),
          v15))
    {
      re::TraceDelta::merge(this, (uint64_t)v9, v7, (uint64_t)&v21);
      if (v22) {
        __n128 v17 = re::DynamicArray<re::TraceEntry>::add(v4, &v21);
      }
      this = v23;
      if (v23 && v24) {
        this = (re::TraceDelta *)(*(uint64_t (**)(__n128))(*(void *)v23 + 40))(v17);
      }
      v9 += 4;
      goto LABEL_23;
    }
    BOOL v16 = v12 < v14;
    if (v11 != v13) {
      BOOL v16 = v11 < v13;
    }
    if (v16)
    {
LABEL_14:
      re::DynamicArray<re::TraceEntry>::add(v4, v9);
      v9 += 4;
      goto LABEL_24;
    }
    BOOL v18 = v14 < v12;
    if (v11 == v13) {
      BOOL v19 = v18;
    }
    else {
      BOOL v19 = v13 < v11;
    }
    if (v19) {
      goto LABEL_16;
    }
LABEL_24:
    unint64_t v6 = v28;
    uint64_t v5 = v26;
  }
  if (v7 != v10)
  {
LABEL_16:
    this = (re::TraceDelta *)re::DynamicArray<re::TraceEntry>::add(v4, (long long *)v7);
LABEL_23:
    v7 += 64;
    goto LABEL_24;
  }
  return re::DynamicArray<re::TraceEntry>::deinit((uint64_t)v25);
}

uint64_t re::TraceDelta::indexOf@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void *)(this + 32);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *(char **)(this + 48);
  unint64_t v6 = &v5[64 * v4];
  uint64_t v7 = v5;
  do
  {
    unint64_t v8 = v4 >> 1;
    unint64_t v9 = &v7[64 * (v4 >> 1)];
    unint64_t v11 = *(void *)v9;
    unint64_t v12 = *((void *)v9 + 1);
    uint64_t v10 = v9 + 64;
    BOOL v13 = v12 < a3;
    BOOL v14 = v11 == a2;
    BOOL v15 = v11 < a2;
    if (v14) {
      BOOL v15 = v13;
    }
    v4 += ~(v4 >> 1);
    if (v15) {
      uint64_t v7 = v10;
    }
    else {
      unint64_t v4 = v8;
    }
  }
  while (v4);
  if (v7 != v6 && *(void *)v7 == a2 && *((void *)v7 + 1) == a3)
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = (v7 - v5) >> 6;
  }
  else
  {
LABEL_13:
    *(unsigned char *)a4 = 0;
  }
  return this;
}

void *std::get_temporary_buffer[abi:nn180100]<re::TraceEntry>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x1FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  int64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(v1 << 6, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(uint64_t result, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6)
{
  size_t v20 = (long long *)result;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    if (a4 == 2)
    {
      unint64_t v8 = a2[-4].n128_u64[0];
      BOOL v19 = a2 - 4;
      BOOL v9 = v8 == *(void *)result;
      BOOL v10 = v8 < *(void *)result;
      if (v9) {
        BOOL v10 = a2[-4].n128_u64[1] < *(void *)(result + 8);
      }
      if (v10) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::TraceEntry *&,re::TraceEntry *&>(&v20, (long long **)&v19);
      }
    }
    else
    {
      unint64_t v11 = a4;
      if ((uint64_t)a4 <= 0)
      {
        return std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(result, (uint64_t)a2);
      }
      else
      {
        unint64_t v15 = a4 >> 1;
        BOOL v16 = (__n128 *)(result + (a4 >> 1 << 6));
        unint64_t v17 = a4 >> 1;
        if ((uint64_t)v11 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>((__n128 *)result, v16, a3, v17, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>((__n128 *)(v7 + (v11 >> 1 << 6)), a2, a3, v11 - (v11 >> 1), &a5[4 * v15]);
          uint64_t result = std::__merge_move_assign[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *,re::TraceEntry *,re::TraceEntry *>((uint64_t)a5, (uint64_t)&a5[4 * v15], (long long *)&a5[4 * v15], (long long *)&a5[4 * v11], v7);
          if (a5)
          {
            uint64_t v18 = (uint64_t)&a5[1].n128_i64[1];
            do
            {
              uint64_t result = re::DynamicArray<unsigned long>::deinit(v18);
              v18 += 64;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(result, v16, a3, v17, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(v7 + (v11 >> 1 << 6), a2, a3, v11 - (v11 >> 1), a5, a6);
          return std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(v7, (long long *)(v7 + (v11 >> 1 << 6)), (long long *)a2, a3, v11 >> 1, v11 - (v11 >> 1), (long long *)a5, a6);
        }
      }
    }
  }
  return result;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::TraceEntry *&,re::TraceEntry *&>(long long **a1, long long **a2)
{
  int64_t v2 = *a1;
  uint64_t v3 = *a2;
  __int16 v8 = *((_WORD *)*a1 + 8);
  long long v7 = **a1;
  v9[0] = *((void *)*a1 + 3);
  *((void *)v2 + 3) = 0;
  uint64_t v4 = *((void *)v2 + 5);
  v9[1] = *((void *)v2 + 4);
  *((void *)v2 + 4) = 0;
  v9[2] = v4;
  *((void *)v2 + 5) = 0;
  uint64_t v11 = *((void *)v2 + 7);
  *((void *)v2 + 7) = 0;
  ++*((_DWORD *)v2 + 12);
  int v10 = 1;
  long long v5 = *v3;
  *((_WORD *)v2 + 8) = *((_WORD *)v3 + 8);
  *int64_t v2 = v5;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)v2 + 24, (uint64_t)v3 + 24);
  *uint64_t v3 = v7;
  *((_WORD *)v3 + 8) = v8;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)v3 + 24, (uint64_t)v9);
  uint64_t result = v9[0];
  if (v9[0])
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*(void *)v9[0] + 40))();
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v25 = v2;
    uint64_t v26 = v3;
    uint64_t v5 = result;
    uint64_t v6 = result + 64;
    if (result + 64 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = v6;
        unint64_t v10 = *(void *)(v8 + 64);
        BOOL v11 = v10 == *(void *)v8;
        BOOL v12 = v10 < *(void *)v8;
        if (v11) {
          BOOL v12 = *(void *)(v8 + 72) < *(void *)(v8 + 8);
        }
        if (v12)
        {
          long long v19 = *(_OWORD *)v9;
          __int16 v20 = *(_WORD *)(v9 + 16);
          uint64_t v21 = *(void *)(v8 + 88);
          long long v22 = *(_OWORD *)(v8 + 96);
          *(void *)(v8 + 88) = 0;
          *(void *)(v8 + 96) = 0;
          *(void *)(v8 + 104) = 0;
          uint64_t v24 = *(void *)(v8 + 120);
          *(void *)(v8 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
          ++*(_DWORD *)(v8 + 112);
          uint64_t v13 = v7;
          int v23 = 1;
          while (1)
          {
            uint64_t v14 = v5 + v13;
            *(_OWORD *)(v14 + 64) = *(_OWORD *)(v5 + v13);
            *(_WORD *)(v14 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_WORD *)(v5 + v13 + 16);
            uint64_t v15 = v5 + v13 + 24;
            re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v5 + v13 + 88, v15);
            if (!v13) {
              break;
            }
            unint64_t v16 = *(void *)(v14 - 64);
            BOOL v17 = (unint64_t)v19 < v16;
            if ((void)v19 == v16) {
              BOOL v17 = *((void *)&v19 + 1) < *(void *)(v14 - 56);
            }
            v13 -= 64;
            if (!v17)
            {
              uint64_t v18 = v5 + v13 + 64;
              goto LABEL_14;
            }
          }
          uint64_t v18 = v5;
LABEL_14:
          *(_OWORD *)uint64_t v18 = v19;
          *(_WORD *)(v18 + 16) = v20;
          re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v15, (uint64_t)&v21);
          uint64_t result = v21;
          if (v21)
          {
            if (v24) {
              uint64_t result = (*(uint64_t (**)(void))(*(void *)v21 + 40))();
            }
          }
        }
        uint64_t v6 = v9 + 64;
        v7 += 64;
        uint64_t v8 = v9;
      }
      while (v9 + 64 != a2);
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  if (a4)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      unint64_t v16 = a2[-4].n128_u64[0];
      uint64_t v15 = a2 - 4;
      BOOL v17 = a2[-4].n128_u64[1] < a1->n128_u64[1];
      BOOL v18 = v16 == a1->n128_u64[0];
      BOOL v19 = v16 < a1->n128_u64[0];
      if (!v18) {
        BOOL v17 = v19;
      }
      __int16 v20 = &a5[1].n128_u64[1];
      if (v17)
      {
        __n128 v21 = *v15;
        a5[1].n128_u16[0] = a2[-3].n128_u16[0];
        *a5 = v21;
        a5[3].n128_u64[1] = 0;
        a5[2].n128_u64[0] = 0;
        a5[2].n128_u64[1] = 0;
        *__int16 v20 = 0;
        a5[3].n128_u32[0] = 0;
        unint64_t v22 = a2[-2].n128_u64[0];
        a5[1].n128_u64[1] = a2[-3].n128_u64[1];
        a5[2].n128_u64[0] = v22;
        a2[-3].n128_u64[1] = 0;
        a2[-2].n128_u64[0] = 0;
        unint64_t v23 = a5[2].n128_u64[1];
        a5[2].n128_u64[1] = a2[-2].n128_u64[1];
        a2[-2].n128_u64[1] = v23;
        unint64_t v24 = a5[3].n128_u64[1];
        a5[3].n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v24;
        ++a2[-1].n128_u32[0];
        ++a5[3].n128_u32[0];
        __n128 result = *a1;
        LOWORD(v24) = a1[1].n128_u16[0];
        a5[7].n128_u32[0] = 0;
        uint64_t v25 = a5 + 7;
        a5[5].n128_u16[0] = v24;
        a5[4] = result;
        a5[7].n128_u64[1] = 0;
        a5[6].n128_u64[0] = 0;
        a5[6].n128_u64[1] = 0;
        a5[5].n128_u64[1] = 0;
        unint64_t v26 = a1[2].n128_u64[0];
        a5[5].n128_u64[1] = a1[1].n128_u64[1];
        a5[6].n128_u64[0] = v26;
        a1[1].n128_u64[1] = 0;
        a1[2].n128_u64[0] = 0;
        unint64_t v27 = a5[6].n128_u64[1];
        a5[6].n128_u64[1] = a1[2].n128_u64[1];
        a1[2].n128_u64[1] = v27;
        unint64_t v28 = a5[7].n128_u64[1];
        a5[7].n128_u64[1] = a1[3].n128_u64[1];
        a1[3].n128_u64[1] = v28;
        uint64_t v14 = a1 + 3;
      }
      else
      {
        __n128 v47 = *a1;
        a5[1].n128_u16[0] = a1[1].n128_u16[0];
        *a5 = v47;
        a5[3].n128_u64[1] = 0;
        a5[2].n128_u64[0] = 0;
        a5[2].n128_u64[1] = 0;
        *__int16 v20 = 0;
        a5[3].n128_u32[0] = 0;
        unint64_t v48 = a1[2].n128_u64[0];
        a5[1].n128_u64[1] = a1[1].n128_u64[1];
        a5[2].n128_u64[0] = v48;
        a1[1].n128_u64[1] = 0;
        a1[2].n128_u64[0] = 0;
        unint64_t v49 = a5[2].n128_u64[1];
        a5[2].n128_u64[1] = a1[2].n128_u64[1];
        a1[2].n128_u64[1] = v49;
        unint64_t v50 = a5[3].n128_u64[1];
        a5[3].n128_u64[1] = a1[3].n128_u64[1];
        a1[3].n128_u64[1] = v50;
        ++a1[3].n128_u32[0];
        ++a5[3].n128_u32[0];
        __n128 result = *v15;
        unsigned __int16 v51 = a2[-3].n128_u16[0];
        a5[7].n128_u32[0] = 0;
        uint64_t v25 = a5 + 7;
        a5[5].n128_u16[0] = v51;
        a5[4] = result;
        a5[7].n128_u64[1] = 0;
        a5[6].n128_u64[0] = 0;
        a5[6].n128_u64[1] = 0;
        a5[5].n128_u64[1] = 0;
        unint64_t v52 = a2[-2].n128_u64[0];
        a5[5].n128_u64[1] = a2[-3].n128_u64[1];
        a5[6].n128_u64[0] = v52;
        a2[-3].n128_u64[1] = 0;
        a2[-2].n128_u64[0] = 0;
        unint64_t v53 = a5[6].n128_u64[1];
        a5[6].n128_u64[1] = a2[-2].n128_u64[1];
        a2[-2].n128_u64[1] = v53;
        unint64_t v54 = a5[7].n128_u64[1];
        a5[7].n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v54;
        uint64_t v14 = a2 - 1;
      }
      unint64_t v10 = v25;
      goto LABEL_29;
    }
    if (a4 == 1)
    {
      __n128 result = *a1;
      a5[1].n128_u16[0] = a1[1].n128_u16[0];
      *a5 = result;
      a5[3].n128_u32[0] = 0;
      unint64_t v10 = a5 + 3;
      a5[3].n128_u64[1] = 0;
      a5[2].n128_u64[0] = 0;
      a5[2].n128_u64[1] = 0;
      a5[1].n128_u64[1] = 0;
      unint64_t v11 = a1[2].n128_u64[0];
      a5[1].n128_u64[1] = a1[1].n128_u64[1];
      a5[2].n128_u64[0] = v11;
      a1[1].n128_u64[1] = 0;
      a1[2].n128_u64[0] = 0;
      unint64_t v12 = a5[2].n128_u64[1];
      a5[2].n128_u64[1] = a1[2].n128_u64[1];
      a1[2].n128_u64[1] = v12;
      unint64_t v13 = a5[3].n128_u64[1];
      a5[3].n128_u64[1] = a1[3].n128_u64[1];
      a1[3].n128_u64[1] = v13;
      uint64_t v14 = a1 + 3;
LABEL_29:
      ++v14->n128_u32[0];
      ++v10->n128_u32[0];
      return result;
    }
    if ((uint64_t)a4 > 8)
    {
      uint64_t v56 = &a1[4 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(a1, v56, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &a5[4 * (a4 >> 1)], a4 - (a4 >> 1));
      uint64_t v57 = &a5[3].n128_u64[1];
      int v58 = &v8[4 * (a4 >> 1)];
      while (v58 != a2)
      {
        BOOL v59 = (__n128 *)(v57 - 7);
        BOOL v60 = v58->n128_u64[1] < v8->n128_u64[1];
        if (v58->n128_u64[0] != v8->n128_u64[0]) {
          BOOL v60 = v58->n128_u64[0] < v8->n128_u64[0];
        }
        int v61 = v57 - 4;
        if (v60)
        {
          __n128 result = *v58;
          *((_WORD *)v57 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v58[1].n128_u16[0];
          *BOOL v59 = result;
          *uint64_t v57 = 0;
          *(v57 - 3) = 0;
          *(v57 - 2) = 0;
          *int v61 = 0;
          *((_DWORD *)v57 - 2) = 0;
          unint64_t v62 = v58[2].n128_u64[0];
          *(v57 - 4) = v58[1].n128_u64[1];
          *(v57 - 3) = v62;
          v58[1].n128_u64[1] = 0;
          v58[2].n128_u64[0] = 0;
          unint64_t v63 = *(v57 - 2);
          *(v57 - 2) = v58[2].n128_u64[1];
          v58[2].n128_u64[1] = v63;
          unint64_t v64 = *v57;
          *uint64_t v57 = v58[3].n128_u64[1];
          v58[3].n128_u64[1] = v64;
          ++v58[3].n128_u32[0];
          v58 += 4;
        }
        else
        {
          __n128 result = *v8;
          *((_WORD *)v57 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v8[1].n128_u16[0];
          *BOOL v59 = result;
          *uint64_t v57 = 0;
          *(v57 - 3) = 0;
          *(v57 - 2) = 0;
          *int v61 = 0;
          *((_DWORD *)v57 - 2) = 0;
          unint64_t v65 = v8[2].n128_u64[0];
          *(v57 - 4) = v8[1].n128_u64[1];
          *(v57 - 3) = v65;
          v8[1].n128_u64[1] = 0;
          v8[2].n128_u64[0] = 0;
          unint64_t v66 = *(v57 - 2);
          *(v57 - 2) = v8[2].n128_u64[1];
          v8[2].n128_u64[1] = v66;
          unint64_t v67 = *v57;
          *uint64_t v57 = v8[3].n128_u64[1];
          v8[3].n128_u64[1] = v67;
          ++v8[3].n128_u32[0];
          v8 += 4;
        }
        ++*((_DWORD *)v57 - 2);
        v57 += 8;
        if (v8 == v56)
        {
          if (v58 != a2)
          {
            unint64_t v68 = 0;
            do
            {
              uint64_t v69 = &v58[v68 / 0x10];
              CFTypeID v70 = &v57[v68 / 8];
              __n128 result = v58[v68 / 0x10];
              *((_WORD *)v70 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v58[v68 / 0x10 + 1].n128_u16[0];
              *(__n128 *)(v70 - 7) = result;
              unint64_t *v70 = 0;
              *(v70 - 3) = 0;
              *(v70 - 2) = 0;
              *(v70 - 4) = 0;
              *((_DWORD *)v70 - 2) = 0;
              unint64_t v71 = v58[v68 / 0x10 + 2].n128_u64[0];
              *(v70 - 4) = v58[v68 / 0x10 + 1].n128_u64[1];
              *(v70 - 3) = v71;
              v69[1].n128_u64[1] = 0;
              v69[2].n128_u64[0] = 0;
              unint64_t v72 = v57[v68 / 8 - 2];
              *(v70 - 2) = v58[v68 / 0x10 + 2].n128_u64[1];
              v69[2].n128_u64[1] = v72;
              unint64_t v73 = v57[v68 / 8];
              unint64_t *v70 = v58[v68 / 0x10 + 3].n128_u64[1];
              v69[3].n128_u64[1] = v73;
              v69[3].n128_u32[0] = v58[v68 / 0x10 + 3].n128_u32[0] + 1;
              *((_DWORD *)v70 - 2) = LODWORD(v57[v68 / 8 - 1]) + 1;
              v68 += 64;
            }
            while (&v69[4] != a2);
          }
          return result;
        }
      }
      if (v8 != v56)
      {
        unint64_t v74 = 0;
        do
        {
          int v75 = &v57[v74 / 8];
          long long v76 = &v8[v74 / 0x10];
          __n128 result = v8[v74 / 0x10];
          *((_WORD *)v75 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v8[v74 / 0x10 + 1].n128_u16[0];
          *(__n128 *)(v75 - 7) = result;
          *int v75 = 0;
          *(v75 - 3) = 0;
          *(v75 - 2) = 0;
          *(v75 - 4) = 0;
          *((_DWORD *)v75 - 2) = 0;
          unint64_t v77 = v8[v74 / 0x10 + 2].n128_u64[0];
          *(v75 - 4) = v8[v74 / 0x10 + 1].n128_u64[1];
          *(v75 - 3) = v77;
          v76[1].n128_u64[1] = 0;
          v76[2].n128_u64[0] = 0;
          unint64_t v78 = v57[v74 / 8 - 2];
          *(v75 - 2) = v8[v74 / 0x10 + 2].n128_u64[1];
          v76[2].n128_u64[1] = v78;
          unint64_t v79 = v57[v74 / 8];
          *int v75 = v8[v74 / 0x10 + 3].n128_u64[1];
          v76[3].n128_u64[1] = v79;
          v76[3].n128_u32[0] = v8[v74 / 0x10 + 3].n128_u32[0] + 1;
          *((_DWORD *)v75 - 2) = LODWORD(v57[v74 / 8 - 1]) + 1;
          v74 += 64;
        }
        while (&v76[4] != v56);
      }
    }
    else if (a1 != a2)
    {
      __n128 result = *a1;
      a5[1].n128_u16[0] = a1[1].n128_u16[0];
      *a5 = result;
      a5[3].n128_u64[1] = 0;
      a5[2].n128_u64[0] = 0;
      a5[2].n128_u64[1] = 0;
      a5[1].n128_u64[1] = 0;
      a5[3].n128_u32[0] = 0;
      unint64_t v29 = a1[2].n128_u64[0];
      a5[1].n128_u64[1] = a1[1].n128_u64[1];
      a5[2].n128_u64[0] = v29;
      a1[1].n128_u64[1] = 0;
      a1[2].n128_u64[0] = 0;
      unint64_t v30 = a5[2].n128_u64[1];
      a5[2].n128_u64[1] = a1[2].n128_u64[1];
      a1[2].n128_u64[1] = v30;
      unint64_t v31 = a5[3].n128_u64[1];
      a5[3].n128_u64[1] = a1[3].n128_u64[1];
      a1[3].n128_u64[1] = v31;
      ++a1[3].n128_u32[0];
      ++a5[3].n128_u32[0];
      unint64_t v32 = a1 + 4;
      if (&a1[4] != a2)
      {
        uint64_t v33 = 0;
        unint64_t v34 = a5;
        do
        {
          BOOL v35 = v32;
          int v36 = v34 + 4;
          unint64_t v37 = v8[4].n128_u64[0];
          BOOL v18 = v37 == v34->n128_u64[0];
          BOOL v38 = v37 < v34->n128_u64[0];
          if (v18) {
            BOOL v38 = v8[4].n128_u64[1] < v34->n128_u64[1];
          }
          if (v38)
          {
            *int v36 = *v34;
            v34[5].n128_u16[0] = v34[1].n128_u16[0];
            v34[5].n128_u64[1] = v34[1].n128_u64[1];
            v34[6] = v34[2];
            v34[1].n128_u64[1] = 0;
            v34[2].n128_u64[0] = 0;
            v34[2].n128_u64[1] = 0;
            v34[7].n128_u64[1] = v34[3].n128_u64[1];
            v34[3].n128_u64[1] = 0;
            ++v34[3].n128_u32[0];
            char v39 = a5;
            v34[7].n128_u32[0] = 1;
            if (v34 != a5)
            {
              uint64_t v40 = v33;
              while (1)
              {
                char v39 = (__n128 *)((char *)a5 + v40);
                unint64_t v41 = *(unint64_t *)((char *)a5[-4].n128_u64 + v40);
                BOOL v18 = v35->n128_u64[0] == v41;
                BOOL v42 = v35->n128_u64[0] < v41;
                if (v18) {
                  BOOL v42 = v8[4].n128_u64[1] < *(void *)((char *)&a5[-3] + v40 - 8);
                }
                if (!v42) {
                  break;
                }
                *char v39 = *(__n128 *)((char *)a5 + v40 - 64);
                v39[1].n128_u16[0] = *(unsigned __int16 *)((char *)a5[-3].n128_u16 + v40);
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v39[1].n128_i64[1], (uint64_t)&v39[-3].n128_i64[1]);
                v40 -= 64;
                if (!v40)
                {
                  char v39 = a5;
                  break;
                }
              }
            }
            __n128 v43 = *v35;
            v39[1].n128_u16[0] = v35[1].n128_u16[0];
            *char v39 = v43;
            re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v39[1].n128_i64[1], (uint64_t)&v8[5].n128_i64[1]);
          }
          else
          {
            __n128 result = *v35;
            v34[5].n128_u16[0] = v35[1].n128_u16[0];
            *int v36 = result;
            v34[7].n128_u64[1] = 0;
            v34[6].n128_u64[0] = 0;
            v34[6].n128_u64[1] = 0;
            v34[5].n128_u64[1] = 0;
            v34[7].n128_u32[0] = 0;
            unint64_t v44 = v8[6].n128_u64[0];
            v34[5].n128_u64[1] = v8[5].n128_u64[1];
            v34[6].n128_u64[0] = v44;
            v8[5].n128_u64[1] = 0;
            v8[6].n128_u64[0] = 0;
            uint64_t v45 = v34[6].n128_i64[1];
            v34[6].n128_u64[1] = v8[6].n128_u64[1];
            v8[6].n128_u64[1] = v45;
            uint64_t v46 = v34[7].n128_i64[1];
            v34[7].n128_u64[1] = v8[7].n128_u64[1];
            v8[7].n128_u64[1] = v46;
            ++v8[7].n128_u32[0];
            ++v34[7].n128_u32[0];
          }
          unint64_t v32 = v35 + 4;
          v33 += 64;
          unint64_t v34 = v36;
          uint64_t v8 = v35;
        }
        while (&v35[4] != a2);
      }
    }
  }
  return result;
}

uint64_t std::__merge_move_assign[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *,re::TraceEntry *,re::TraceEntry *>(uint64_t result, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  if (result == a2)
  {
LABEL_12:
    while (a3 != a4)
    {
      long long v14 = *a3;
      *(_WORD *)(a5 + 16) = *((_WORD *)a3 + 8);
      *(_OWORD *)a5 = v14;
      __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a5 + 24, (uint64_t)a3 + 24);
      a3 += 4;
      a5 += 64;
    }
  }
  else
  {
    uint64_t v9 = result;
    while (a3 != a4)
    {
      BOOL v10 = *(void *)a3 < *(void *)v9;
      if (*(void *)a3 == *(void *)v9) {
        BOOL v10 = *((void *)a3 + 1) < *(void *)(v9 + 8);
      }
      uint64_t v11 = a5 + 24;
      if (v10)
      {
        long long v12 = *a3;
        *(_WORD *)(a5 + 16) = *((_WORD *)a3 + 8);
        *(_OWORD *)a5 = v12;
        __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v11, (uint64_t)a3 + 24);
        a3 += 4;
      }
      else
      {
        long long v13 = *(_OWORD *)v9;
        *(_WORD *)(a5 + 16) = *(_WORD *)(v9 + 16);
        *(_OWORD *)a5 = v13;
        __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v11, v9 + 24);
        v9 += 64;
      }
      a5 += 64;
      if (v9 == a2) {
        goto LABEL_12;
      }
    }
    if (v9 != a2)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = a5 + v15;
        uint64_t v17 = v9 + v15;
        long long v18 = *(_OWORD *)(v9 + v15);
        *(_WORD *)(v16 + 16) = *(_WORD *)(v9 + v15 + 16);
        *(_OWORD *)uint64_t v16 = v18;
        __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a5 + v15 + 24, v9 + v15 + 24);
        v15 += 64;
      }
      while (v17 + 64 != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(uint64_t result, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8)
{
  CMTime v102 = a2;
  if (a6)
  {
    uint64_t v9 = a6;
    long long v12 = a2;
    uint64_t v13 = result;
    while (a5 > a8 && v9 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v14 = 0;
      unint64_t v15 = *(void *)v12;
      uint64_t v16 = -a5;
      while (1)
      {
        uint64_t v17 = (long long *)(v13 + v14);
        unint64_t v18 = *(void *)(v13 + v14);
        BOOL v70 = v15 == v18;
        BOOL v19 = v15 < v18;
        if (v70) {
          BOOL v19 = *((void *)v12 + 1) < *(void *)(v13 + v14 + 8);
        }
        if (v19) {
          break;
        }
        v14 += 64;
        if (__CFADD__(v16++, 1)) {
          return result;
        }
      }
      char v103 = (long long *)(v13 + v14);
      uint64_t v21 = -v16;
      CMTime v101 = a7;
      if (-v16 >= v9)
      {
        if (v16 == -1) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::TraceEntry *&,re::TraceEntry *&>(&v103, &v102);
        }
        if (v16 > 0) {
          uint64_t v21 = 1 - v16;
        }
        uint64_t v34 = v21 >> 1;
        uint64_t v25 = (long long *)(v13 + (v21 >> 1 << 6) + v14);
        unint64_t v24 = a3;
        if (a3 != v12)
        {
          unint64_t v35 = ((char *)a3 - (char *)v12) >> 6;
          int64x2_t v36 = (int64x2_t)*v25;
          unint64_t v24 = v12;
          do
          {
            unint64_t v37 = v35 >> 1;
            BOOL v38 = (int64x2_t *)&v24[4 * (v35 >> 1)];
            int64x2_t v40 = *v38;
            i8 = (long long *)v38[4].i8;
            int32x2_t v41 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v36, (uint64x2_t)v40));
            if (vmovn_s64(vceqq_s64(v40, v36)).u32[0]) {
              __int8 v42 = v41.i8[4];
            }
            else {
              __int8 v42 = v41.i8[0];
            }
            v35 += ~(v35 >> 1);
            if (v42) {
              unint64_t v24 = i8;
            }
            else {
              unint64_t v35 = v37;
            }
          }
          while (v35);
        }
        uint64_t v23 = ((char *)v24 - (char *)v12) >> 6;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v22 = v9;
        }
        else {
          uint64_t v22 = v9 + 1;
        }
        uint64_t v23 = v22 >> 1;
        unint64_t v24 = &v12[4 * (v22 >> 1)];
        uint64_t v25 = v12;
        if (v17 != v12)
        {
          unint64_t v26 = ((uint64_t)v12 - v13 - v14) >> 6;
          int64x2_t v27 = (int64x2_t)*v24;
          uint64_t v25 = (long long *)(v13 + v14);
          do
          {
            unint64_t v28 = v26 >> 1;
            unint64_t v29 = (int64x2_t *)&v25[4 * (v26 >> 1)];
            int64x2_t v31 = *v29;
            unint64_t v30 = (long long *)v29[4].i8;
            int32x2_t v32 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v31, (uint64x2_t)v27));
            if (vmovn_s64(vceqq_s64(v27, v31)).u32[0]) {
              __int8 v33 = v32.i8[4];
            }
            else {
              __int8 v33 = v32.i8[0];
            }
            v26 += ~(v26 >> 1);
            if (v33) {
              unint64_t v26 = v28;
            }
            else {
              uint64_t v25 = v30;
            }
          }
          while (v26);
        }
        uint64_t v34 = ((uint64_t)v25 - v13 - v14) >> 6;
      }
      __n128 v43 = v24;
      if (v25 != v12)
      {
        __n128 v43 = v25;
        if (v12 != v24)
        {
          uint64_t v98 = v34;
          uint64_t v99 = v23;
          uint64_t v44 = a8;
          uint64_t v45 = a3;
          CMTime v104 = v12;
          uint64_t v105 = v25;
          while (1)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::TraceEntry *&,re::TraceEntry *&>(&v105, &v104);
            __n128 v43 = v105 + 4;
            uint64_t v46 = v104 + 4;
            CMTime v104 = v46;
            v105 += 4;
            if (v46 == v24) {
              break;
            }
            if (v43 == v12) {
              long long v12 = v46;
            }
          }
          if (v43 != v12)
          {
            do
            {
              CMTime v104 = v12;
              while (1)
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::TraceEntry *&,re::TraceEntry *&>(&v105, &v104);
                __n128 v47 = v105 + 4;
                unint64_t v48 = v104 + 4;
                CMTime v104 = v48;
                v105 += 4;
                if (v48 == v24) {
                  break;
                }
                if (v47 == v12) {
                  long long v12 = v48;
                }
              }
            }
            while (v47 != v12);
          }
          a3 = v45;
          a8 = v44;
          uint64_t v34 = v98;
          uint64_t v23 = v99;
        }
      }
      a5 = -(v34 + v16);
      uint64_t v49 = v9 - v23;
      uint64_t v100 = a4;
      if (v34 + v23 >= v9 - (v34 + v23) - v16)
      {
        uint64_t v54 = a4;
        uint64_t v55 = v34;
        uint64_t v56 = v23;
        uint64_t v53 = a8;
        __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(v43, v24, a3, v54, -(v34 + v16), v49, v101);
        unint64_t v24 = v25;
        a7 = v101;
        uint64_t v49 = v56;
        a5 = v55;
        a3 = v43;
      }
      else
      {
        unint64_t v50 = v25;
        unsigned __int16 v51 = a3;
        uint64_t v52 = a4;
        a7 = v101;
        uint64_t v53 = a8;
        __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,re::TraceEntry *>(v17, v50, v43, v52, v34, v23, v101);
        a3 = v51;
        char v103 = v43;
        uint64_t v17 = v43;
      }
      CMTime v102 = v24;
      uint64_t v9 = v49;
      long long v12 = v24;
      uint64_t v13 = (uint64_t)v17;
      a8 = v53;
      a4 = v100;
      if (!v49) {
        return result;
      }
    }
    if (a5 <= v9)
    {
      if ((long long *)v13 == v12) {
        return result;
      }
      unint64_t v75 = 0;
      uint64_t v58 = 0;
      do
      {
        long long v76 = &a7[v75 / 0x10];
        unint64_t v77 = v13 + v75;
        long long v78 = *(_OWORD *)(v13 + v75);
        *((_WORD *)v76 + 8) = *(_WORD *)(v13 + v75 + 16);
        *((void *)v76 + 7) = 0;
        *((void *)v76 + 4) = 0;
        *((void *)v76 + 5) = 0;
        *((void *)v76 + 3) = 0;
        *((_DWORD *)v76 + 12) = 0;
        long long *v76 = v78;
        *((void *)v76 + 3) = *(void *)(v13 + v75 + 24);
        *(void *)(v77 + 24) = 0;
        *((void *)v76 + 4) = *(void *)(v13 + v75 + 32);
        *(void *)(v77 + 32) = 0;
        uint64_t v79 = *((void *)&a7[v75 / 0x10 + 2] + 1);
        *((void *)v76 + 5) = *(void *)(v13 + v75 + 40);
        *(void *)(v77 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v79;
        uint64_t v80 = *((void *)&a7[v75 / 0x10 + 3] + 1);
        *((void *)v76 + 7) = *(void *)(v13 + v75 + 56);
        *(void *)(v77 + 56) = v80;
        *(_DWORD *)(v77 + 48) = *(_DWORD *)(v13 + v75 + 48) + 1;
        *((_DWORD *)v76 + 12) = LODWORD(a7[v75 / 0x10 + 3]) + 1;
        ++v58;
        v75 += 64;
      }
      while ((long long *)(v77 + 64) != v12);
      if (v75)
      {
        double v81 = &a7[v75 / 0x10];
        uint64_t v82 = (uint64_t)&a7[v75 / 0x10 - 4];
        unint64_t v83 = a7;
        while (v12 != a3)
        {
          BOOL v84 = *(void *)v12 < *(void *)v83;
          if (*(void *)v12 == *(void *)v83) {
            BOOL v84 = *((void *)v12 + 1) < *((void *)v83 + 1);
          }
          uint64_t v85 = v13 + 24;
          if (v84)
          {
            long long v86 = *v12;
            *(_WORD *)(v13 + 16) = *((_WORD *)v12 + 8);
            *(_OWORD *)uint64_t v13 = v86;
            CMTime v87 = a3;
            __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v85, (uint64_t)v12 + 24);
            a3 = v87;
            v12 += 4;
          }
          else
          {
            long long v88 = *v83;
            *(_WORD *)(v13 + 16) = *((_WORD *)v83 + 8);
            *(_OWORD *)uint64_t v13 = v88;
            CMTime v89 = a3;
            __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v85, (uint64_t)v83 + 24);
            a3 = v89;
            v83 += 4;
          }
          v13 += 64;
          if (v81 == v83) {
            goto LABEL_100;
          }
        }
        if (v81 != v83)
        {
          uint64_t v93 = 0;
          do
          {
            uint64_t v94 = v13 + v93 * 16;
            char v95 = &v83[v93];
            long long v96 = v83[v93];
            *(_WORD *)(v94 + 16) = v83[v93 + 1];
            *(_OWORD *)uint64_t v94 = v96;
            __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v13 + v93 * 16 + 24, (uint64_t)&v83[v93 + 1] + 8);
            v93 += 4;
          }
          while ((long long *)v82 != v95);
        }
      }
    }
    else
    {
      if (v12 == a3) {
        return result;
      }
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      do
      {
        BOOL v59 = &a7[v57];
        BOOL v60 = &v12[v57];
        long long v61 = v12[v57];
        *((_WORD *)v59 + 8) = v12[v57 + 1];
        *((void *)v59 + 7) = 0;
        *((void *)v59 + 4) = 0;
        *((void *)v59 + 5) = 0;
        *((void *)v59 + 3) = 0;
        *((_DWORD *)v59 + 12) = 0;
        *BOOL v59 = v61;
        *((void *)v59 + 3) = *((void *)&v12[v57 + 1] + 1);
        *((void *)v60 + 3) = 0;
        *((void *)v59 + 4) = *(void *)&v12[v57 + 2];
        *((void *)v60 + 4) = 0;
        uint64_t v62 = *((void *)&a7[v57 + 2] + 1);
        *((void *)v59 + 5) = *((void *)&v12[v57 + 2] + 1);
        *((void *)v60 + 5) = v62;
        uint64_t v63 = *((void *)&a7[v57 + 3] + 1);
        *((void *)v59 + 7) = *((void *)&v12[v57 + 3] + 1);
        *((void *)v60 + 7) = v63;
        *((_DWORD *)v60 + 12) = LODWORD(v12[v57 + 3]) + 1;
        *((_DWORD *)v59 + 12) = LODWORD(a7[v57 + 3]) + 1;
        ++v58;
        v57 += 4;
      }
      while (v60 + 4 != a3);
      if (v57 * 16)
      {
        unint64_t v64 = &a7[v57];
        unint64_t v65 = a3 - 4;
        while (v12 != (long long *)v13)
        {
          unint64_t v66 = *((void *)v64 - 8);
          unint64_t v67 = *((void *)v12 - 8);
          BOOL v70 = v66 == v67;
          BOOL v68 = v66 < v67;
          if (v70) {
            BOOL v68 = *((void *)v64 - 7) < *((void *)v12 - 7);
          }
          uint64_t v69 = (uint64_t)v65 + 24;
          BOOL v70 = !v68;
          if (v68) {
            unint64_t v71 = v12 - 4;
          }
          else {
            unint64_t v71 = v64 - 4;
          }
          long long v72 = *v71;
          __int16 v73 = *((_WORD *)v71 + 8);
          if (v70) {
            unint64_t v74 = v64;
          }
          else {
            unint64_t v74 = v12;
          }
          if (v70) {
            v64 -= 4;
          }
          else {
            v12 -= 4;
          }
          *((_WORD *)v65 + 8) = v73;
          *unint64_t v65 = v72;
          v65 -= 4;
          __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v69, (uint64_t)v74 - 40);
          if (v64 == a7) {
            goto LABEL_100;
          }
        }
        unint64_t v90 = 0;
        do
        {
          double v91 = &v65[v90];
          long long v92 = v64[v90 - 4];
          *((_WORD *)v91 + 8) = v64[v90 - 3];
          *double v91 = v92;
          __n128 result = re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v65[v90 + 1] + 8, (uint64_t)&v64[v90 - 2] - 8);
          v90 -= 4;
        }
        while (&v64[v90] != a7);
      }
    }
LABEL_100:
    if (a7)
    {
      uint64_t v97 = (uint64_t)a7 + 24;
      do
      {
        __n128 result = re::DynamicArray<unsigned long>::deinit(v97);
        v97 += 64;
        --v58;
      }
      while (v58);
    }
  }
  return result;
}

re::TraceServer *re::TraceServer::TraceServer(re::TraceServer *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 32) = 0;
  uint64_t v2 = (char *)this + 32;
  *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(_OWORD *)((char *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 96) = 0;
  uint64_t v3 = (char *)this + 96;
  *((unsigned char *)this + 88) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *((_DWORD *)this + 34) = 0;
  *((_WORD *)this + 76) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 46) = 0;
  *(void *)this = &unk_26E721798;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 56) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  *((void *)this + 3re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *((void *)this + 32) = 850045863;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 3re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  *((void *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 1018212795;
  *((void *)this + 5re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 98) = 0;
  uint64_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v5 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_USER_INTERACTIVE, 0);
  *((void *)this + 31) = dispatch_queue_create("trace server", v5);
  dispatch_release(v5);
  secure_tcp = nw_parameters_create_secure_tcp((nw_parameters_configure_protocol_block_t)*MEMORY[0x263F14478], (nw_parameters_configure_protocol_block_t)*MEMORY[0x263F14470]);
  *((void *)this + 1) = secure_tcp;
  uint64_t v7 = (re::TraceFramer *)nw_parameters_copy_default_protocol_stack(secure_tcp);
  uint64_t v8 = re::TraceFramer::definition(v7);
  options = nw_framer_create_options(v8);
  nw_protocol_stack_prepend_application_protocol((nw_protocol_stack_t)v7, options);
  nw_release(options);
  nw_release(v7);
  uint64_t v11 = *re::traceLogObjects(v10);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "TraceServer: Construct", (uint8_t *)v21, 2u);
  }
  *((unsigned char *)this + 32) = 3;
  *((unsigned char *)this + 96) = 4;
  uint64_t v13 = re::globalAllocators((re *)v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 56, 8);
  *(void *)uint64_t v14 = v2;
  *(void *)(v14 + 8) = v3;
  *(void *)(v14 + 48) = 0;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *((void *)this + 3) = v14;
  re::Defaults::BOOLValue((re::Defaults *)"trace.enableTraceFromInit", v15, (char *)v21);
  if (LOBYTE(v21[0])) {
    char v17 = BYTE1(v21[0]);
  }
  else {
    char v17 = 0;
  }
  *((unsigned char *)this + 153) = v17;
  unint64_t v18 = *re::traceLogObjects(v16);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = *((unsigned __int8 *)this + 153);
    v21[0] = 67109120;
    v21[1] = v19;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "TraceServer: Collect trace data from initialzation: %d", (uint8_t *)v21, 8u);
  }
  return this;
}

void re::TraceServer::~TraceServer(re::TraceServer *this)
{
  *(void *)this = &unk_26E721798;
  re::TraceServer::stopListening(this);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 256);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)this + 4);
  uint64_t v2 = *((void *)this + 31);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN2re11TraceServerD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_34;
  block[4] = this;
  dispatch_async(v2, block);
  std::condition_variable::wait((std::condition_variable *)((char *)this + 320), &__lk);
  uint64_t v3 = *((void *)this + 27);
  if (v3)
  {
    uint64_t v4 = (nw_connection_t **)*((void *)this + 29);
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *v4++;
      nw_connection_set_state_changed_handler(*v6, 0);
      nw_connection_force_cancel(*v6);
      uint64_t v8 = re::globalAllocators(v7)[2];
      re::TraceServer::NetworkClient::~NetworkClient((re::TraceServer::NetworkClient *)v6);
      (*(void (**)(uint64_t, nw_connection_t *))(*(void *)v8 + 40))(v8, v6);
      v5 -= 8;
    }
    while (v5);
  }
  *((void *)this + 27) = 0;
  ++*((_DWORD *)this + 56);
  uint64_t v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    nw_release(v9);
    *((void *)this + 1) = 0;
  }
  dispatch_release(*((dispatch_object_t *)this + 31));
  *((void *)this + 31) = 0;
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    uint64_t v12 = re::globalAllocators(v10)[2];
    uint64_t v13 = *(void *)(v11 + 16);
    *(void *)(v11 + 32) = 0;
    int v14 = *(_DWORD *)(v11 + 40) + 1;
    *(_DWORD *)(v11 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
    if (v13)
    {
      if (*(void *)(v11 + 48))
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
        int v14 = *(_DWORD *)(v11 + 40);
      }
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0;
      *(void *)(v11 + 16) = 0;
      *(_DWORD *)(v11 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v14 + 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v11);
    *((void *)this + 3) = 0;
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 368);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 320));
  std::mutex::~mutex((std::mutex *)this + 4);
  uint64_t v15 = *((void *)this + 25);
  if (v15)
  {
    if (*((void *)this + 29)) {
      (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
    }
    *((void *)this + 2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
    *((void *)this + 26) = 0;
    *((void *)this + 27) = 0;
    *((void *)this + 25) = 0;
    ++*((_DWORD *)this + 56);
  }
  uint64_t v16 = *((void *)this + 20);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 24);
    if (v17)
    {
      uint64_t v18 = *((void *)this + 22);
      if (v18)
      {
        uint64_t v19 = 56 * v18;
        uint64_t v20 = v17 + 16;
        do
        {
          re::DynamicArray<re::TraceEntry>::deinit(v20);
          v20 += 56;
          v19 -= 56;
        }
        while (v19);
        uint64_t v16 = *((void *)this + 20);
        uint64_t v17 = *((void *)this + 24);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 40))(v16, v17);
    }
    *((void *)this + 24) = 0;
    *((void *)this + 21) = 0;
    *((void *)this + 22) = 0;
    *((void *)this + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
    ++*((_DWORD *)this + 46);
  }
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 112);
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)this + 48);
}

{
  uint64_t vars8;

  re::TraceServer::~TraceServer(this);
  JUMPOUT(0x237DBCBD0);
}

void ___ZN2re11TraceServerD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 256));
  std::condition_variable::notify_all((std::condition_variable *)(v1 + 320));
  std::mutex::unlock((std::mutex *)(v1 + 256));
}

void re::TraceServer::startListening(nw_parameters_t *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = *re::traceLogObjects((re *)this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315138;
    BOOL v10 = a2;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "TraceServer: start listening on port %s", buf, 0xCu);
  }
  ((void (*)(nw_parameters_t *))(*this)[5].isa)(this);
  uint64_t v5 = nw_listener_create_with_port(a2, this[1]);
  this[2] = v5;
  nw_listener_set_queue(v5, this[31]);
  nw_listener_set_state_changed_handler(this[2], &__block_literal_global_48);
  nw_parameters_t v6 = this[31];
  uint64_t v7 = this[2];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = ___ZN2re11TraceServer14startListeningEPKc_block_invoke_5;
  v8[3] = &__block_descriptor_tmp_7_1;
  v8[4] = this;
  v8[5] = v6;
  nw_listener_set_new_connection_handler(v7, v8);
  nw_listener_start(this[2]);
}

void ___ZN2re11TraceServer14startListeningEPKc_block_invoke(re *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  uint64_t v3 = *re::traceLogObjects(a1);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "TraceServer: listener state changed to %d\n", (uint8_t *)v4, 8u);
  }
}

void ___ZN2re11TraceServer14startListeningEPKc_block_invoke_5(uint64_t a1, NSObject *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (specific)
  {
    uint64_t v5 = specific;
    re::TraceServer::addConnection(*(re::TraceServer **)(a1 + 32), a2);
    nw_parameters_t v6 = nw_connection_copy_endpoint(a2);
    uint64_t v7 = nw_endpoint_copy_address_string(v6);
    uint64_t v8 = nw_endpoint_copy_port_string(v6);
    uint64_t v9 = *re::traceLogObjects((re *)v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v5[27];
      int v11 = 136315650;
      uint64_t v12 = v7;
      __int16 v13 = 2080;
      int v14 = v8;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "TraceServer: new client connection from %s port %s (count=%zu)", (uint8_t *)&v11, 0x20u);
    }
    free(v7);
    free(v8);
    nw_release(v6);
  }
}

void re::TraceServer::addConnection(re::TraceServer *this, NSObject *a2)
{
  uint64_t v4 = re::globalAllocators(this);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 160, 8);
  *(void *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_DWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 10re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(void *)(v5 + 116) = 0x7FFFFFFFLL;
  *(unsigned char *)(v5 + 128) = 1;
  *(_DWORD *)(v5 + 132) = 0;
  *(_DWORD *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  nw_parameters_t v6 = (_anonymous_namespace_ *)nw_retain(*(void **)v5);
  *(unsigned char *)(v5 + 8) = 2;
  unint64_t v7 = *((void *)this + 26);
  unint64_t v8 = *((void *)this + 27);
  if (v8 >= v7)
  {
    unint64_t v9 = v8 + 1;
    if (v7 < v8 + 1)
    {
      if (*((void *)this + 25))
      {
        uint64_t v10 = 2 * v7;
        BOOL v11 = v7 == 0;
        unint64_t v12 = 8;
        if (!v11) {
          unint64_t v12 = v10;
        }
        if (v12 <= v9) {
          unint64_t v13 = v9;
        }
        else {
          unint64_t v13 = v12;
        }
        re::DynamicArray<float *>::setCapacity((void *)this + 25, v13);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity((void *)this + 25, v9);
        ++*((_DWORD *)this + 56);
      }
    }
    unint64_t v8 = *((void *)this + 27);
  }
  *(void *)(*((void *)this + 29) + 8 * v8) = v5;
  *((void *)this + 27) = v8 + 1;
  ++*((_DWORD *)this + 56);
  int v14 = *((void *)this + 31);
  nw_connection_set_queue(a2, v14);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZN2re11TraceServer13addConnectionEP13nw_connection_block_invoke;
  v15[3] = &__block_descriptor_tmp_13_1;
  v15[4] = v14;
  v15[5] = a2;
  nw_connection_set_state_changed_handler(a2, v15);
  nw_connection_start(a2);
}

void re::TraceServer::stopListening(re::TraceServer *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    nw_listener_cancel(v2);
    nw_release(*((void **)this + 2));
    *((void *)this + 2) = 0;
  }
}

void re::TraceServer::send(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 248);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN2re11TraceServer4sendENSt3__110unique_ptrINS_10TraceDeltaENS_9REDeleterIS3_EEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_8_2;
  block[4] = a1;
  void block[5] = v2;
  void block[6] = v3;
  dispatch_async(v3, block);
}

{
  uint64_t v2;
  NSObject *v3;
  void v4[6];

  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 248);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  _DWORD v4[2] = ___ZN2re11TraceServer4sendENSt3__110unique_ptrINS_14TransferReportENS_9REDeleterIS3_EEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_9_2;
  unsigned char v4[4] = v2;
  v4[5] = v3;
  dispatch_async(v3, v4);
}

re *___ZN2re11TraceServer4sendENSt3__110unique_ptrINS_10TraceDeltaENS_9REDeleterIS3_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (!specific) {
    goto LABEL_32;
  }
  uint64_t v5 = specific;
  if (!(*(uint64_t (**)(void *))(*specific + 72))(specific) && !*(unsigned char *)(v3 + 153)) {
    goto LABEL_32;
  }
  unint64_t v7 = *(unsigned __int8 **)(a1 + 40);
  int v8 = *v7;
  if (!*v7 || !*((void *)v7 + 4)) {
    goto LABEL_32;
  }
  if (v8 == 3)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = (unint64_t **)(v5 + 4);
    *((_OWORD *)v5 + 2) = *(_OWORD *)v9;
    re::DynamicArray<re::TraceEntry>::operator=((uint64_t)(v5 + 6), (uint64_t *)(v9 + 16));
    atomic_store(1u, (unsigned __int8 *)v5 + 152);
LABEL_12:
    goto LABEL_13;
  }
  if (v8 != 4)
  {
    if (!(*(uint64_t (**)(void *))(*v5 + 72))(v5) && *(unsigned char *)(v3 + 153))
    {
      re::DynamicArray<re::TraceDelta>::add(v3 + 160, *(void *)(a1 + 40));
      goto LABEL_13;
    }
    uint64_t v10 = (unint64_t **)(v5 + 4);
    re::TraceDelta::merge((re::TraceDelta *)(v5 + 4), *(const re::TraceDelta **)(a1 + 40));
    goto LABEL_12;
  }
  *((_OWORD *)v5 + 6) = *(_OWORD *)v7;
  re::DynamicArray<re::TraceEntry>::operator=((uint64_t)(v5 + 14), (uint64_t *)v7 + 2);
  atomic_store(1u, (unsigned __int8 *)v5 + 88);
LABEL_13:
  unint64_t v12 = *(const re::TraceDelta **)(a1 + 40);
  uint64_t v13 = v5[27];
  if (v13)
  {
    int v14 = (NSObject ***)v5[29];
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *v14;
      if ((_BYTE)(*v14)[19])
      {
        re::TraceServer::trySendInitialDeltas((re::TraceServer *)v5, *v14);
        if (!*((unsigned char *)v16 + 128) && *((double *)v12 + 1) > *((double *)v16 + 18))
        {
          if (*((int *)v16 + 33) < 1)
          {
            re::TraceServer::send((re::TraceServer *)v5, v12, *v16);
            v16[18] = *((void *)v12 + 1);
          }
          else
          {
            re::TraceDelta::merge((re::TraceDelta *)(v16 + 1), v12);
          }
        }
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  uint64_t v17 = (void *)v5[3];
  uint64_t v18 = v17[4];
  if (v18)
  {
    uint64_t v19 = (void *)v17[6];
    uint64_t v20 = 8 * v18;
    do
    {
      if (!*(unsigned char *)(*v19 + 8)) {
        (*(void (**)(void, const re::TraceDelta *))(*(void *)*v19 + 16))(*v19, v12);
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
    uint64_t v21 = v17[4];
    if (v21)
    {
      uint64_t v22 = (unsigned char **)v17[6];
      uint64_t v23 = 8 * v21;
      do
      {
        if ((*v22)[8]) {
          re::TraceDirectServer::trySendInitialDeltas(v17, *v22);
        }
        ++v22;
        v23 -= 8;
      }
      while (v23);
    }
  }
LABEL_32:
  return re::internal::destroyPersistent<re::TraceDelta>((re *)"operator()", 274, v2);
}

void re::anonymous namespace'::validateTraceDelta(unint64_t **this, const re::TraceDelta *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (v3)
  {
    uint64_t v4 = this[4];
    if (v4)
    {
      int v5 = 0;
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      int v8 = this[6];
      uint64_t v9 = (void)v4 << 6;
      do
      {
        if (*((unsigned char *)v8 + 16) != 3 && !v8[5])
        {
          uint64_t v10 = *re::traceLogObjects(v3);
          uint64_t v3 = (re *)os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
          if (v3)
          {
            uint64_t v16 = this[1];
            unint64_t v17 = *v8;
            unint64_t v18 = v8[1];
            int v19 = *((unsigned __int8 *)v8 + 16);
            *(_DWORD *)int buf = 134218752;
            *(void *)uint64_t v23 = v16;
            *(_WORD *)&v23[8] = 2048;
            *(void *)&v23[10] = v17;
            __int16 v24 = 2048;
            unint64_t v25 = v18;
            __int16 v26 = 1024;
            int v27 = v19;
            _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Missing entry payload in non-removal trace: timestamp: %f, id=%llu, child=%llu, mode=%d", buf, 0x26u);
          }
          ++v5;
        }
        if (*v8 <= v6)
        {
          if (*v8 != v6 || v8[1] <= v7)
          {
            BOOL v11 = *re::traceLogObjects(v3);
            uint64_t v3 = (re *)os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
            if (v3)
            {
              unint64_t v12 = this[1];
              unint64_t v13 = *v8;
              unint64_t v14 = v8[1];
              int v15 = *((unsigned __int8 *)v8 + 16);
              *(_DWORD *)int buf = 134219264;
              *(void *)uint64_t v23 = v12;
              *(_WORD *)&v23[8] = 2048;
              *(void *)&v23[10] = v13;
              __int16 v24 = 2048;
              unint64_t v25 = v14;
              __int16 v26 = 1024;
              int v27 = v15;
              __int16 v28 = 2048;
              unint64_t v29 = v6;
              __int16 v30 = 2048;
              unint64_t v31 = v7;
              _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Detected non-sorted entry: timestamp: %f, id=%llu, child=%llu, mode=%d, prevId=%llu, prevChild=%llu", buf, 0x3Au);
            }
            ++v5;
            unint64_t v6 = *v8;
          }
        }
        else
        {
          unint64_t v6 = *v8;
        }
        unint64_t v7 = v8[1];
        v8 += 8;
        v9 -= 64;
      }
      while (v9);
      if (v5 > 0)
      {
        uint64_t v20 = *re::traceLogObjects(v3);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = this[1];
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)uint64_t v23 = v5;
          *(_WORD *)&v23[4] = 2048;
          *(void *)&void v23[6] = v21;
          _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "%d errors found at timestamp: %f", buf, 0x12u);
        }
      }
    }
  }
}

void re::anonymous namespace'::validateSnapshot(unint64_t **this, const re::TraceDelta *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (v3)
  {
    if (*(unsigned char *)this != 3)
    {
      uint64_t v4 = *re::traceLogObjects(v3);
      uint64_t v3 = (re *)os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (v3)
      {
        int v28 = *(unsigned __int8 *)this;
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)unint64_t v31 = v28;
        _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid type for initial snapshot: %d", buf, 8u);
      }
    }
    int v5 = this[4];
    if (v5)
    {
      int v6 = 0;
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = this[6];
      uint64_t v10 = (void)v5 << 6;
      do
      {
        if (*((unsigned char *)v9 + 16) != 1)
        {
          BOOL v11 = *re::traceLogObjects(v3);
          uint64_t v3 = (re *)os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
          if (v3)
          {
            unint64_t v14 = this[1];
            unint64_t v15 = *v9;
            unint64_t v16 = v9[1];
            int v17 = *((unsigned __int8 *)v9 + 16);
            unint64_t v18 = v9[5];
            *(_DWORD *)int buf = 134219008;
            *(void *)unint64_t v31 = v14;
            *(_WORD *)&v31[8] = 2048;
            *(void *)&v31[10] = v15;
            __int16 v32 = 2048;
            unint64_t v33 = v16;
            __int16 v34 = 1024;
            int v35 = v17;
            __int16 v36 = 2048;
            unint64_t v37 = v18;
            _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Unexpected mode in initial snapshot: timestamp: %f, id=%llu, child=%llu, mode=%d, data=%zu", buf, 0x30u);
          }
          ++v6;
        }
        if (!v9[5])
        {
          unint64_t v12 = *re::traceLogObjects(v3);
          uint64_t v3 = (re *)os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          if (v3)
          {
            int v19 = this[1];
            unint64_t v20 = *v9;
            unint64_t v21 = v9[1];
            int v22 = *((unsigned __int8 *)v9 + 16);
            *(_DWORD *)int buf = 134218752;
            *(void *)unint64_t v31 = v19;
            *(_WORD *)&v31[8] = 2048;
            *(void *)&v31[10] = v20;
            __int16 v32 = 2048;
            unint64_t v33 = v21;
            __int16 v34 = 1024;
            int v35 = v22;
            _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Missing snapshot payload in non-removal trace: timestamp: %f, id=%llu, child=%llu, mode=%d", buf, 0x26u);
          }
          ++v6;
        }
        if (*v9 <= v8)
        {
          if (*v9 != v8 || v9[1] <= v7)
          {
            unint64_t v13 = *re::traceLogObjects(v3);
            uint64_t v3 = (re *)os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
            if (v3)
            {
              uint64_t v23 = this[1];
              unint64_t v24 = *v9;
              unint64_t v25 = v9[1];
              int v26 = *((unsigned __int8 *)v9 + 16);
              *(_DWORD *)int buf = 134219264;
              *(void *)unint64_t v31 = v23;
              *(_WORD *)&v31[8] = 2048;
              *(void *)&v31[10] = v24;
              __int16 v32 = 2048;
              unint64_t v33 = v25;
              __int16 v34 = 1024;
              int v35 = v26;
              __int16 v36 = 2048;
              unint64_t v37 = v8;
              __int16 v38 = 2048;
              unint64_t v39 = v7;
              _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Detected non-sorted entry in snapshot: timestamp: %f, id=%llu, child=%llu, mode=%d, prevId=%llu, prevChild=%llu", buf, 0x3Au);
            }
            ++v6;
            unint64_t v8 = *v9;
          }
        }
        else
        {
          unint64_t v8 = *v9;
        }
        unint64_t v7 = v9[1];
        v9 += 8;
        v10 -= 64;
      }
      while (v10);
      if (v6 > 0)
      {
        int v27 = *re::traceLogObjects(v3);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          unint64_t v29 = this[1];
          *(_DWORD *)int buf = 67109376;
          *(_DWORD *)unint64_t v31 = v6;
          *(_WORD *)&v31[4] = 2048;
          *(void *)&v31[6] = v29;
          _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "%d errors found in snapshot at timestamp: %f", buf, 0x12u);
        }
      }
    }
  }
}

uint64_t re::DynamicArray<re::TraceDelta>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::TraceDelta>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::TraceDelta>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  BOOL v11 = (_OWORD *)(*(void *)(a1 + 32) + 56 * v5);
  _OWORD *v11 = *(_OWORD *)a2;
  uint64_t result = re::DynamicArray<re::TraceEntry>::DynamicArray((uint64_t)(v11 + 1), (uint64_t *)(a2 + 16));
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::TraceServer::trySendInitialDeltas(re::TraceServer *this, NSObject **a2)
{
  if (*((unsigned char *)a2 + 128)
    && (*(unsigned int (**)(re::TraceServer *))(*(void *)this + 80))(this)
    && (*(unsigned int (**)(re::TraceServer *))(*(void *)this + 88))(this))
  {
    double v4 = *((double *)this + 13);
    double v5 = *((double *)this + 5);
    if (v4 >= v5) {
      unint64_t v6 = (re::TraceServer *)((char *)this + 32);
    }
    else {
      unint64_t v6 = (re::TraceServer *)((char *)this + 96);
    }
    if (v4 >= v5) {
      uint64_t v7 = (re::TraceServer *)((char *)this + 96);
    }
    else {
      uint64_t v7 = (re::TraceServer *)((char *)this + 32);
    }
    if (v4 >= v5) {
      BOOL v8 = (char *)this + 104;
    }
    else {
      BOOL v8 = (char *)this + 40;
    }
    re::TraceServer::send(this, v6, *a2);
    re::TraceServer::send(this, v7, *a2);
    a2[18] = *(NSObject **)v8;
    if (*((unsigned char *)this + 153))
    {
      uint64_t v9 = *((void *)this + 22);
      if (v9)
      {
        uint64_t v10 = 56 * v9;
        BOOL v11 = (uint64_t *)(*((void *)this + 24) + 16);
        do
        {
          long long v16 = *((_OWORD *)v11 - 1);
          re::DynamicArray<re::TraceEntry>::DynamicArray((uint64_t)v17, v11);
          re::TraceServer::send(this, (const re::TraceDelta *)&v16, *a2);
          re::TraceDelta::merge((re::TraceServer *)((char *)this + 32), (const re::TraceDelta *)&v16);
          re::DynamicArray<re::TraceEntry>::deinit((uint64_t)v17);
          v11 += 7;
          v10 -= 56;
        }
        while (v10);
        uint64_t v12 = *((void *)this + 22);
        uint64_t v13 = *((void *)this + 24);
        *((unsigned char *)this + 153) = 0;
        *((void *)this + 22) = 0;
        if (v12)
        {
          uint64_t v14 = 56 * v12;
          uint64_t v15 = v13 + 16;
          do
          {
            re::DynamicArray<re::TraceEntry>::deinit(v15);
            v15 += 56;
            v14 -= 56;
          }
          while (v14);
        }
      }
      else
      {
        *((unsigned char *)this + 153) = 0;
        *((void *)this + 22) = 0;
      }
      ++*((_DWORD *)this + 46);
    }
    *((unsigned char *)a2 + 128) = 0;
  }
}

void re::TraceServer::send(re::TraceServer *this, const re::TraceDelta *a2, NSObject *a3)
{
  if (*((double *)a2 + 1) == 0.0)
  {
    uint64_t v7 = *re::traceLogObjects(this);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Sending a trace frame with timestamp=0.0. This is unexpected!", buf, 2u);
    }
  }
  *(void *)int buf = &unk_26E716208;
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
  *(int64x2_t *)&unsigned char v12[8] = vdupq_n_s64(0x1000uLL);
  *((void *)&v11 + 1) = dispatch_data_create_alloc();
  BOOL v8 = &v9;
  uint64_t v9 = buf;
  re::TraceDeltaWriter::writeDelta((re::zerocopy ***)&v8, a2);
  re::zerocopy::DispatchWriteStream::mergeTail((re::zerocopy::DispatchWriteStream *)buf);
  unint64_t v6 = v11;
  *(void *)&long long v11 = 0;
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
  *(void *)int buf = &unk_26E716208;
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
  *(void *)int buf = 2;
  *(void *)&long long v11 = v6;
  re::TraceServer::send(this, buf, a3);
  dispatch_release(v6);
}

void re::TraceServer::send(void *a1, unsigned __int8 *a2, NSObject *a3)
{
  uint64_t v5 = a1[27];
  if (v5)
  {
    uint64_t v6 = a1[29];
    uint64_t v7 = 8 * v5;
    while (**(NSObject ***)v6 != a3)
    {
      v6 += 8;
      v7 -= 8;
      if (!v7) {
        goto LABEL_8;
      }
    }
    if (*a2 == 2) {
      ++*(_DWORD *)(*(void *)v6 + 132);
    }
  }
LABEL_8:
  uint64_t v8 = a1[31];
  char v9 = *a2;
  uint64_t v10 = (re::TraceFramer *)nw_content_context_create("re-trace");
  re::TraceFramer::setMessageType(v10, *a2);
  long long v11 = *((void *)a2 + 1);
  completion[0] = MEMORY[0x263EF8330];
  completion[1] = 0x40000000;
  completion[2] = ___ZN2re11TraceServer4sendERKNS_12TraceMessageEP13nw_connection_block_invoke;
  completion[3] = &__block_descriptor_tmp_17_0;
  char v13 = v9;
  completion[4] = v8;
  completion[5] = a3;
  nw_connection_send(a3, v11, (nw_content_context_t)v10, 1, completion);
  nw_release(v10);
}

re *___ZN2re11TraceServer4sendENSt3__110unique_ptrINS_14TransferReportENS_9REDeleterIS3_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (specific)
  {
    double v4 = specific;
    uint64_t v5 = specific[27];
    if (v5)
    {
      uint64_t v6 = (uint64_t *)specific[29];
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6;
        if ((*(unsigned char *)(*v6 + 152) & 2) != 0)
        {
          if (*(int *)(v8 + 136) < 1)
          {
            if (*(_DWORD *)(v8 + 108))
            {
              re::TransferReport::aggregate((double *)(v8 + 64), *(void *)(a1 + 32));
              re::TraceServer::send(v4, v8 + 64, *(NSObject **)v8);
              memset(v18, 0, 36);
              *(void *)&v18[36] = 0x7FFFFFFFLL;
              *(_OWORD *)(v8 + 64) = 0u;
              uint64_t v10 = (void *)(v8 + 80);
              if ((unsigned char *)(v8 + 80) != v18)
              {
                uint64_t v11 = *(void *)v18;
                if (*v10) {
                  BOOL v12 = *v10 == *(void *)v18;
                }
                else {
                  BOOL v12 = 1;
                }
                if (v12)
                {
                  *(void *)unint64_t v18 = *v10;
                  uint64_t v13 = *(void *)&v18[8];
                  uint64_t v14 = *(void *)&v18[16];
                  long long v15 = *(_OWORD *)(v8 + 88);
                  *(void *)(v8 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v11;
                  *(void *)(v8 + 88) = v13;
                  *(void *)(v8 + 96) = v14;
                  *(_OWORD *)&v18[8] = v15;
                  long long v16 = *(_OWORD *)(v8 + 104);
                  *(_OWORD *)(v8 + 104) = *(_OWORD *)&v18[24];
                  *(_OWORD *)&v18[24] = v16;
                }
                else if (*(void *)v18)
                {
                  re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy((uint64_t)v10, (uint64_t)v18);
                  ++*(_DWORD *)(v8 + 120);
                }
                else
                {
                  re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)v10);
                }
              }
              re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v18);
            }
            else
            {
              re::TraceServer::send(v4, *(void *)(a1 + 32), *(NSObject **)v8);
            }
          }
          else
          {
            re::TransferReport::aggregate((double *)(v8 + 64), *(void *)(a1 + 32));
          }
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return re::internal::destroyPersistent<re::TransferReport>((re *)"operator()", 356, v2);
}

void re::TraceServer::send(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v9 = (uint64_t)&unk_26E716208;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)&v9);
  *(int64x2_t *)&char v11[8] = vdupq_n_s64(0x1000uLL);
  *((void *)&v10 + 1) = dispatch_data_create_alloc();
  uint64_t v7 = (re::zerocopy **)&v8;
  uint64_t v8 = &v9;
  re::TransferReportWriter::write(&v7, a2);
  re::zerocopy::DispatchWriteStream::mergeTail((re::zerocopy::DispatchWriteStream *)&v9);
  uint64_t v6 = v10;
  *(void *)&long long v10 = 0;
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)&v9);
  uint64_t v9 = (uint64_t)&unk_26E716208;
  re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)&v9);
  uint64_t v9 = 3;
  *(void *)&long long v10 = v6;
  re::TraceServer::send(a1, (unsigned __int8 *)&v9, a3);
  dispatch_release(v6);
}

BOOL re::TraceServer::addClientFromConnectedSocket(re::TraceServer *this, int a2)
{
  uint64_t v4 = nw_connection_create_with_connected_socket_and_parameters();
  if (v4)
  {
    uint64_t v5 = *((void *)this + 31);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN2re11TraceServer28addClientFromConnectedSocketEi_block_invoke;
    block[3] = &__block_descriptor_tmp_10_0;
    block[4] = v4;
    void block[5] = v5;
    int v8 = a2;
    dispatch_async(v5, block);
  }
  return v4 != 0;
}

void ___ZN2re11TraceServer28addClientFromConnectedSocketEi_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (specific)
  {
    uint64_t v4 = specific;
    re::TraceServer::addConnection(specific, v2);
    uint64_t v6 = *re::traceLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v8 = *((void *)v4 + 27);
      v9[0] = 67109376;
      v9[1] = v7;
      __int16 v10 = 2048;
      uint64_t v11 = v8;
      _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "TraceServer: new client connection from fd://%d (count=%zu)", (uint8_t *)v9, 0x12u);
    }
  }
  nw_release(v2);
}

void re::TraceServer::addDirectClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 248);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2re11TraceServer15addDirectClientEPNS_17TraceDirectClientE_block_invoke;
  v3[3] = &__block_descriptor_tmp_11_2;
  unsigned char v3[4] = v2;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void ___ZN2re11TraceServer15addDirectClientEPNS_17TraceDirectClientE_block_invoke(uint64_t a1)
{
  if (!specific) {
    return;
  }
  uint64_t v3 = *(unsigned char **)(a1 + 40);
  if (!v3)
  {
    uint64_t v13 = *re::traceLogObjects(specific);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v17 = 0;
    long long v15 = (uint8_t *)&v17;
    goto LABEL_28;
  }
  uint64_t v4 = *((void *)specific + 3);
  uint64_t v5 = *(void **)(v4 + 48);
  unint64_t v6 = *(void *)(v4 + 32);
  int v7 = v5;
  if (v6)
  {
    uint64_t v8 = 8 * v6;
    int v7 = *(void **)(v4 + 48);
    while ((unsigned char *)*v7 != v3)
    {
      ++v7;
      v8 -= 8;
      if (!v8)
      {
        int v7 = &v5[v6];
        break;
      }
    }
  }
  if (v6 != v7 - v5)
  {
    uint64_t v13 = *re::traceLogObjects(specific);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v16 = 0;
    uint64_t v14 = "TraceServer: error adding TraceDirectClient. The client has already been added";
    long long v15 = (uint8_t *)&v16;
LABEL_28:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, v15, 2u);
    return;
  }
  unint64_t v9 = *(void *)(v4 + 24);
  if (v6 >= v9)
  {
    unint64_t v10 = v6 + 1;
    if (v9 < v6 + 1)
    {
      if (*(void *)(v4 + 16))
      {
        unint64_t v11 = 2 * v9;
        if (!v9) {
          unint64_t v11 = 8;
        }
        if (v11 <= v10) {
          unint64_t v12 = v10;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<float *>::setCapacity((void *)(v4 + 16), v12);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity((void *)(v4 + 16), v10);
        ++*(_DWORD *)(v4 + 40);
      }
    }
    unint64_t v6 = *(void *)(v4 + 32);
    uint64_t v5 = *(void **)(v4 + 48);
  }
  v5[v6] = v3;
  *(void *)(v4 + 32) = v6 + 1;
  ++*(_DWORD *)(v4 + 40);
  v3[8] = 1;
  re::TraceDirectServer::trySendInitialDeltas((void *)v4, v3);
}

void re::TraceServer::removeDirectClient(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 248);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2re11TraceServer18removeDirectClientEPNS_17TraceDirectClientE_block_invoke;
  v3[3] = &__block_descriptor_tmp_12_1;
  unsigned char v3[4] = v2;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void ___ZN2re11TraceServer18removeDirectClientEPNS_17TraceDirectClientE_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (specific)
  {
    uint64_t v3 = specific;
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      uint64_t v5 = *((void *)specific + 3);
      unint64_t v6 = *(void **)(v5 + 48);
      unint64_t v7 = *(void *)(v5 + 32);
      uint64_t v8 = v6;
      if (v7)
      {
        uint64_t v9 = 8 * v7;
        uint64_t v8 = *(void **)(v5 + 48);
        while (*v8 != v4)
        {
          ++v8;
          v9 -= 8;
          if (!v9)
          {
            uint64_t v8 = &v6[v7];
            break;
          }
        }
      }
      unint64_t v10 = v8 - v6;
      if (v10 != v7)
      {
        if (v7 <= v10)
        {
          long long v15 = 0u;
          long long v16 = 0u;
          long long v13 = 0u;
          long long v14 = 0u;
          *(_OWORD *)int buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v7 - 1 > v10) {
          v6[v10] = v6[v7 - 1];
        }
        *(void *)(v5 + 32) = v7 - 1;
        ++*(_DWORD *)(v5 + 40);
      }
    }
    else
    {
      unint64_t v11 = *re::traceLogObjects(specific);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
      }
    }
    re::TraceServer::tryClearDeltas(v3);
  }
}

void re::TraceServer::tryClearDeltas(re::TraceServer *this)
{
  if (!(*(uint64_t (**)(re::TraceServer *))(*(void *)this + 72))(this))
  {
    *((void *)this + 5) = 0;
    re::DynamicArray<re::TraceEntry>::clear((uint64_t)this + 48);
    atomic_store(0, (unsigned __int8 *)this + 152);
    *((void *)this + 13) = 0;
    re::DynamicArray<re::TraceEntry>::clear((uint64_t)this + 112);
    atomic_store(0, (unsigned __int8 *)this + 88);
    re::DynamicArray<re::SceneCompatibilityVariant>::clear((uint64_t)this + 368);
  }
}

unint64_t re::TraceServer::numTraceDeltaClients(re::TraceServer *this)
{
  return *(void *)(*((void *)this + 3) + 32)
       + atomic_load_explicit((atomic_ullong *volatile)this + 30, memory_order_acquire);
}

uint64_t re::TraceServer::hasMetadata(re::TraceServer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 88);
  return v1 & 1;
}

uint64_t re::TraceServer::hasInitialSnapshot(re::TraceServer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 152);
  return v1 & 1;
}

void ___ZN2re11TraceServer13addConnectionEP13nw_connection_block_invoke(uint64_t a1, int a2)
{
  if (specific)
  {
    if (a2 == 3)
    {
      uint64_t v5 = *(NSObject **)(a1 + 40);
      uint64_t v6 = *((void *)specific + 31);
      v8[0] = MEMORY[0x263EF8330];
      v8[1] = 0x40000000;
      v8[2] = ___ZN2re11TraceServer15scheduleReceiveEPS0_P13nw_connection_block_invoke;
      v8[3] = &__block_descriptor_tmp_15_1;
      v8[4] = v6;
      v8[5] = v5;
      nw_connection_receive_message(v5, v8);
    }
    else if ((a2 & 0xFFFFFFFE) == 4)
    {
      unint64_t v7 = *(NSObject **)(a1 + 40);
      re::TraceServer::removeConnection(specific, v7);
    }
  }
}

void re::TraceServer::removeConnection(re::TraceServer *this, nw_connection_t connection)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 27);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = -v3;
    while (1)
    {
      unint64_t v7 = *(re::TraceServer::NetworkClient **)(*((void *)this + 29) + v5);
      if (*(nw_connection_t *)v7 == connection) {
        break;
      }
      v5 += 8;
      if (v6 == --v4) {
        goto LABEL_14;
      }
    }
    unint64_t v8 = -v4;
    if (*((unsigned char *)v7 + 152)) {
      atomic_fetch_add((atomic_ullong *volatile)this + 30, 0xFFFFFFFFFFFFFFFFLL);
    }
    nw_connection_cancel(connection);
    uint64_t v10 = re::globalAllocators(v9)[2];
    re::TraceServer::NetworkClient::~NetworkClient(v7);
    unint64_t v11 = (re *)(*(uint64_t (**)(uint64_t, re::TraceServer::NetworkClient *))(*(void *)v10 + 40))(v10, v7);
    unint64_t v12 = *((void *)this + 27);
    if (v12 <= v8)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)int buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v13 = v12 - 1;
    if (v12 - 1 > v8 && 8 * v12 - 8 != v5)
    {
      unint64_t v11 = (re *)memmove((void *)(*((void *)this + 29) + v5), (const void *)(*((void *)this + 29) + v5 + 8), 8 * v12 - v5 - 8);
      uint64_t v13 = *((void *)this + 27) - 1;
    }
    *((void *)this + 27) = v13;
    ++*((_DWORD *)this + 56);
    long long v14 = *re::traceLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *((void *)this + 27);
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "TraceServer: removed client connection (count=%zu)", buf, 0xCu);
    }
  }
LABEL_14:
  re::TraceServer::tryClearDeltas(this);
}

void ___ZN2re11TraceServer15scheduleReceiveEPS0_P13nw_connection_block_invoke(uint64_t a1, void *a2, re::TraceFramer *a3, char a4, uint64_t a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (!specific) {
    return;
  }
  unint64_t v11 = specific;
  if (a2)
  {
    if (a3)
    {
      re::TraceFramer::messageType(a3, &v44);
      if (v44)
      {
        uint64_t v13 = *((void *)v11 + 27);
        if (v13)
        {
          long long v14 = *(NSObject **)(a1 + 40);
          int v15 = v45;
          uint64_t v16 = 8 * v13;
          long long v17 = (NSObject ***)*((void *)v11 + 29);
          while (1)
          {
            long long v18 = *v17;
            if (**v17 == v14) {
              break;
            }
            ++v17;
            v16 -= 8;
            if (!v16) {
              goto LABEL_59;
            }
          }
          if (v45 != 4)
          {
            if (v45 != 1)
            {
              int v28 = *re::traceLogObjects(v12);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf[0]) = 67109120;
                HIDWORD(buf[0]) = v15;
                _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "TraceServer received unexpected TraceMessageType: %hhu", (uint8_t *)buf, 8u);
              }
              goto LABEL_59;
            }
            re::zerocopy::DispatchReadStream::DispatchReadStream((re::zerocopy::DispatchReadStream *)v50, a2);
            re::OPackReader::OPackReader((uint64_t)buf, (uint64_t)v50);
            if (re::OPackReader::next((re::OPackReader *)buf, v19) && v55[140] == 6)
            {
              int v20 = *((_DWORD *)v18 + 38);
              int v21 = v56 & 1;
              *((_DWORD *)v18 + 38) = v56;
              if ((v20 & 1) != 0 || !v21)
              {
                if ((v20 & 1) != 0 && !v21) {
                  atomic_fetch_add((atomic_ullong *volatile)v11 + 30, 0xFFFFFFFFFFFFFFFFLL);
                }
              }
              else
              {
                atomic_fetch_add((atomic_ullong *volatile)v11 + 30, 1uLL);
                re::TraceServer::trySendInitialDeltas((re::TraceServer *)v11, v18);
              }
            }
            uint64_t v29 = v58;
            if (!v58) {
              goto LABEL_58;
            }
            goto LABEL_55;
          }
          re::zerocopy::DispatchReadStream::DispatchReadStream((re::zerocopy::DispatchReadStream *)v50, a2);
          re::OPackReader::OPackReader((uint64_t)buf, (uint64_t)v50);
          uint64_t v49 = 0;
          v46[1] = 0;
          uint64_t v47 = 0;
          v46[0] = 0;
          int v48 = 0;
          *(void *)unsigned __int16 v51 = buf;
          int v22 = (re *)re::TraceTargetAppInfoReader::read((re::OPackReader **)v51, (_anonymous_namespace_ *)v46);
          if (v22)
          {
            uint64_t v23 = v47;
            unint64_t v24 = atomic_load((unint64_t *)v11 + 30);
            uint64_t v25 = *((void *)v11 + 48);
            if (v24)
            {
              if (v25 != v47)
              {
LABEL_32:
                __int16 v30 = *re::traceLogObjects(v22);
                if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)unsigned __int16 v51 = 0;
                  _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "TraceServer is already capturing with different app-mode configuration, stopping the connection", v51, 2u);
                }
                re::TraceServer::removeConnection((re::TraceServer *)v11, v14);
                goto LABEL_54;
              }
              if (v47)
              {
                uint64_t v26 = (uint64_t)(v49 + 1);
                uint64_t v27 = *((void *)v11 + 50) + 8;
                while (1)
                {
                  int v22 = (re *)re::DynamicString::operator!=(v27, v26);
                  if (v22) {
                    goto LABEL_32;
                  }
                  v26 += 40;
                  v27 += 40;
                  if (!--v23) {
                    goto LABEL_54;
                  }
                }
              }
            }
            else if (v25)
            {
              goto LABEL_54;
            }
            if (v47)
            {
              unint64_t v31 = v49;
              uint64_t v32 = 40 * v47;
              do
              {
                unint64_t v33 = v31[2];
                if (v33) {
                  unint64_t v34 = v33 >> 1;
                }
                else {
                  unint64_t v34 = v33 >> 1;
                }
                if (v34 && *v31)
                {
                  int v35 = *re::traceLogObjects(v22);
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                  {
                    if (v31[2]) {
                      __int16 v36 = (char *)v31[3];
                    }
                    else {
                      __int16 v36 = (char *)v31 + 17;
                    }
                    uint64_t v38 = *v31;
                    *(_DWORD *)unsigned __int16 v51 = 136315394;
                    *(void *)&v51[4] = v36;
                    __int16 v52 = 2048;
                    uint64_t v53 = v38;
                    _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "TraceServer received App mode request: %s, %llu", v51, 0x16u);
                  }
                  unint64_t v39 = *((void *)v11 + 48);
                  if (v39 >= *((void *)v11 + 47))
                  {
                    re::DynamicArray<re::TraceTargetAppInfo>::growCapacity((void *)v11 + 46, v39 + 1);
                    unint64_t v39 = *((void *)v11 + 48);
                  }
                  uint64_t v40 = (void *)(*((void *)v11 + 50) + 40 * v39);
                  *uint64_t v40 = *v31;
                  int v22 = re::DynamicString::DynamicString((re::DynamicString *)(v40 + 1), (const re::DynamicString *)(v31 + 1));
                  ++*((void *)v11 + 48);
                  ++*((_DWORD *)v11 + 98);
                }
                else
                {
                  unint64_t v37 = *re::traceLogObjects(v22);
                  int v22 = (re *)os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
                  if (v22)
                  {
                    *(_WORD *)unsigned __int16 v51 = 0;
                    _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "TraceServer received App mode request with incorrect bundleID or peerID", v51, 2u);
                  }
                }
                v31 += 5;
                v32 -= 40;
              }
              while (v32);
            }
          }
LABEL_54:
          re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)v46);
          uint64_t v29 = v58;
          if (!v58)
          {
LABEL_58:
            re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v57);
            re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)v55);
            re::zerocopy::DispatchReadStream::~DispatchReadStream(v50);
            goto LABEL_59;
          }
LABEL_55:
          if (v62) {
            (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
          }
          uint64_t v62 = 0;
          uint64_t v59 = 0;
          uint64_t v60 = 0;
          uint64_t v58 = 0;
          ++v61;
          goto LABEL_58;
        }
      }
    }
  }
LABEL_59:
  if (a2) {
    char v41 = 0;
  }
  else {
    char v41 = a4;
  }
  if ((v41 & 1) == 0 && !a5)
  {
    __int8 v42 = *(NSObject **)(a1 + 40);
    uint64_t v43 = *((void *)v11 + 31);
    buf[0] = MEMORY[0x263EF8330];
    buf[1] = 0x40000000;
    buf[2] = ___ZN2re11TraceServer15scheduleReceiveEPS0_P13nw_connection_block_invoke;
    buf[3] = &__block_descriptor_tmp_15_1;
    uint8_t buf[4] = v43;
    buf[5] = v42;
    nw_connection_receive_message(v42, buf);
  }
}

re::TraceServer *___ZN2re11TraceServer4sendERKNS_12TraceMessageEP13nw_connection_block_invoke(uint64_t a1)
{
  if (result)
  {
    uint64_t v3 = *((void *)result + 27);
    if (v3)
    {
      uint64_t v4 = *(nw_connection **)(a1 + 40);
      uint64_t v5 = 8 * v3;
      for (uint64_t i = (nw_connection ***)*((void *)result + 29); ; ++i)
      {
        unint64_t v7 = *i;
        if (**i == v4) {
          break;
        }
        v5 -= 8;
        if (!v5) {
          return result;
        }
      }
      if (*(unsigned char *)(a1 + 48) == 2)
      {
        int v8 = *((_DWORD *)v7 + 33) - 1;
        *((_DWORD *)v7 + 33) = v8;
        if (!v8)
        {
          if (v7[5])
          {
            re::TraceServer::send(result, (const re::TraceDelta *)(v7 + 1), v4);
            v7[18] = v7[2];
            return (re::TraceServer *)re::DynamicArray<re::TraceEntry>::clear((uint64_t)(v7 + 3));
          }
        }
      }
    }
  }
  return result;
}

void re::TraceServer::NetworkClient::~NetworkClient(re::TraceServer::NetworkClient *this)
{
  uint64_t v2 = (char *)this + 24;
  nw_release(*(void **)this);
  *(void *)this = 0;
  re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 10);
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)v2);
}

void *re::TraceDirectServer::trySendInitialDeltas(void *result, unsigned char *a2)
{
  if (*(void *)(result[1] + 32))
  {
    uint64_t v3 = result;
    if (*(void *)(*result + 32))
    {
      if (a2[8])
      {
        (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
        uint64_t result = (void *)(*(uint64_t (**)(unsigned char *, void))(*(void *)a2 + 16))(a2, *v3);
        a2[8] = 0;
      }
    }
  }
  return result;
}

uint64_t re::TraceServer::isTraceFromInitEnabled(re::TraceServer *this)
{
  return *((unsigned __int8 *)this + 153);
}

uint64_t re::TraceServer::targetApps(re::TraceServer *this)
{
  return *((void *)this + 50);
}

uint64_t re::DynamicArray<re::TraceEntry>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::TraceEntry>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::TraceEntry>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::TraceEntry>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::TraceEntry>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::TraceEntry>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::TraceEntry>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::TraceEntry *,re::TraceEntry *,re::TraceEntry *,0>(*(long long **)(a2 + 32), (long long *)(*(void *)(a2 + 32) + (a1[2] << 6)), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = (v4 << 6) - (v9 << 6);
      uint64_t v11 = (v9 << 6) | 0x18;
      unint64_t v12 = (uint64_t *)(*(void *)(a2 + 32) + v11);
      uint64_t result = a1[4] + v11;
      do
      {
        long long v13 = *(_OWORD *)(v12 - 3);
        *(_WORD *)(result - 8) = *((_WORD *)v12 - 4);
        *(_OWORD *)(result - 24) = v13;
        uint64_t v14 = re::DynamicArray<BOOL>::DynamicArray(result, v12);
        v12 += 8;
        uint64_t result = v14 + 64;
        v10 -= 64;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::TraceEntry *,re::TraceEntry *,re::TraceEntry *,0>(*(long long **)(a2 + 32), (long long *)(*(void *)(a2 + 32) + (v4 << 6)), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = (v6 << 6) - (v4 << 6);
      uint64_t v8 = a1[4] + (v4 << 6) + 24;
      do
      {
        uint64_t result = re::DynamicArray<unsigned long>::deinit(v8);
        v8 += 64;
        v7 -= 64;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

long long *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::TraceEntry *,re::TraceEntry *,re::TraceEntry *,0>(long long *a1, long long *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    *(_WORD *)(a3 + 16) = *((_WORD *)v4 + 8);
    *(_OWORD *)a3 = v6;
    re::DynamicArray<BOOL>::operator=(a3 + 24, (uint64_t *)v4 + 3);
    a3 += 64;
    v4 += 4;
  }
  while (v4 != v5);
  return v5;
}

uint64_t re::anonymous namespace'::enableTraceValidation(re::_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F918, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = __cxa_guard_acquire(&qword_26AF9F918);
    if (v2)
    {
      __cxa_guard_release(&qword_26AF9F918);
    }
  }
  return _MergedGlobals_503;
}

BOOL re::anonymous namespace'::enableTraceValidation(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"trace.validateTraces", a2, (char *)v6);
  if (LOBYTE(v6[0])) {
    unsigned __int8 v3 = BYTE1(v6[0]);
  }
  else {
    unsigned __int8 v3 = 0;
  }
  unint64_t v4 = *re::traceLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "ValidateSnapshot enabled: %d", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t re::DynamicArray<re::TraceEntry>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::TraceEntry>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::TraceEntry>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicArray<re::TraceDelta>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TraceDelta>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 56 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
          v11[6] = 0;
          v11[3] = 0;
          v11[4] = 0;
          v11[2] = 0;
          *((_DWORD *)v11 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
          uint64_t v12 = *(void *)(v8 + 16);
          uint64_t v13 = *(void *)(v8 + 24);
          uint64_t v14 = v8 + 16;
          v11[2] = v12;
          v11[3] = v13;
          *(void *)uint64_t v14 = 0;
          *(void *)(v14 + 8) = 0;
          uint64_t v15 = v11[4];
          v11[4] = *(void *)(v14 + 16);
          *(void *)(v14 + 16) = v15;
          uint64_t v16 = v11[6];
          v11[6] = *(void *)(v14 + 32);
          *(void *)(v14 + 32) = v16;
          ++*(_DWORD *)(v14 + 24);
          ++*((_DWORD *)v11 + 10);
          re::DynamicArray<re::TraceEntry>::deinit(v14);
          uint64_t v8 = v14 + 40;
          v11 += 7;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::TraceTargetAppInfo>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TraceTargetAppInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TraceTargetAppInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TraceTargetAppInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TraceTargetAppInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[5 * v9];
        uint64_t v11 = v7;
        do
        {
          void *v11 = *v8;
          *(_OWORD *)(v11 + 1) = 0u;
          *(_OWORD *)(v11 + 3) = 0u;
          uint64_t v13 = v8[1];
          uint64_t v12 = v8 + 1;
          v11[1] = v13;
          *uint64_t v12 = 0;
          v11[4] = v12[3];
          v12[3] = 0;
          uint64_t v15 = v11[2];
          uint64_t v14 = v11[3];
          uint64_t v16 = v12[2];
          v11[2] = v12[1];
          v11[3] = v16;
          v12[1] = v15;
          v12[2] = v14;
          re::DynamicString::deinit((re::DynamicString *)v12);
          uint64_t v8 = v12 + 4;
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::TraceHistory::TraceHistory(re::TraceHistory *this)
{
  *(void *)this = 0x3E800000000;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = re::s_nullDelegate;
  operator new();
}

uint64_t re::TraceHistory::setPersistence(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result != a2)
  {
    if (result) {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a1 + 32) = a2;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(v5 + 8) = 0;
    re::DynamicArray<re::TraceEntry>::clear(v5 + 16);
    (*(void (**)(void, void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), *(void *)(a1 + 24));
    (*(void (**)(void, void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), *(void *)(a1 + 24));
    (*(void (**)(void))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32));
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 16);
    return v6();
  }
  return result;
}

void re::TraceHistory::~TraceHistory(re::TraceHistory *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    re::DynamicArray<re::TraceEntry>::deinit(v2 + 16);
    MEMORY[0x237DBCBD0](v2, 0x1020C4094B8BC74);
  }
  *((void *)this + 1) = 0;
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    re::DynamicArray<re::TraceEntry>::deinit(v3 + 16);
    MEMORY[0x237DBCBD0](v3, 0x1020C4094B8BC74);
  }
  *((void *)this + 2) = 0;
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    re::DynamicArray<re::TraceEntry>::deinit(v4 + 16);
    MEMORY[0x237DBCBD0](v4, 0x1020C4094B8BC74);
  }
  *((void *)this + 3) = 0;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 4) = 0;
}

re::TraceDelta **re::TraceHistory::addData(re::TraceDelta **this, const re::TraceDelta *a2)
{
  int v2 = *(unsigned __int8 *)a2;
  if ((v2 - 1) < 2) {
    return (re::TraceDelta **)re::TraceHistory::addDelta(this, a2);
  }
  if (v2 == 4) {
    return (re::TraceDelta **)re::TraceHistory::addMetadata(this, a2);
  }
  if (v2 == 3) {
    return (re::TraceDelta **)re::TraceHistory::addSnapshot((re::TraceHistory *)this, a2);
  }
  return this;
}

uint64_t re::TraceHistory::addSnapshot(re::TraceHistory *this, const re::TraceDelta *a2)
{
  (*(void (**)(void, const re::TraceDelta *, void))(**((void **)this + 4) + 40))(*((void *)this + 4), a2, 0);
  uint64_t v4 = (_OWORD *)*((void *)this + 2);
  *uint64_t v4 = *(_OWORD *)a2;
  re::DynamicArray<re::TraceEntry>::operator=((uint64_t)(v4 + 1), (uint64_t *)a2 + 2);
  uint64_t v5 = *((void *)this + 1);
  *(void *)(v5 + 8) = 0;
  re::DynamicArray<re::TraceEntry>::clear(v5 + 16);
  *(_DWORD *)this = 0;
  (*(void (**)(void))(**((void **)this + 4) + 88))(*((void *)this + 4));
  uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 16);
  return v6();
}

uint64_t re::TraceHistory::addDelta(re::TraceDelta **this, const re::TraceDelta *a2)
{
  re::TraceDelta::merge(this[1], a2);
  int v3 = *((_DWORD *)this + 1);
  int v4 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v4;
  if (v4 >= v3)
  {
    re::TraceDelta::merge(this[2], this[1]);
    uint64_t v5 = this[1];
    *((void *)v5 + 1) = 0;
    re::DynamicArray<re::TraceEntry>::clear((uint64_t)v5 + 16);
    *(_DWORD *)this = 0;
  }
  (*(void (**)(void))(*(void *)this[4] + 40))();
  (*(void (**)(re::TraceDelta *))(*(void *)this[4] + 88))(this[4]);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[5] + 16);
  return v6();
}

uint64_t re::TraceHistory::addMetadata(re::TraceDelta **this, const re::TraceDelta *a2)
{
  re::TraceDelta::merge(this[3], a2);
  (*(void (**)(re::TraceDelta *, re::TraceDelta *))(*(void *)this[4] + 32))(this[4], this[3]);
  int v3 = *(uint64_t (**)(void))(*(void *)this[5] + 24);
  return v3();
}

void re::TraceHistory::clear(re::TraceHistory *this)
{
  *(_DWORD *)this = 0;
  uint64_t v2 = *((void *)this + 1);
  *(void *)(v2 + 8) = 0;
  re::DynamicArray<re::TraceEntry>::clear(v2 + 16);
  uint64_t v3 = *((void *)this + 2);
  *(void *)(v3 + 8) = 0;
  re::DynamicArray<re::TraceEntry>::clear(v3 + 16);
  operator new();
}

void re::TraceHistoryDelegateNone::~TraceHistoryDelegateNone(re::TraceHistoryDelegateNone *this)
{
}

uint64_t *re::traceLogObjects(re *this)
{
  {
    re::traceLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Trace");
  }
  return &re::traceLogObjects(void)::logObjects;
}

uint64_t re::TraceDeltaWriter::writeDelta(re::zerocopy ***this, const re::TraceDelta *a2)
{
  int v4 = *this;
  char v9 = -29;
  re::zerocopy::writeAll(*v4, (re::zerocopy::WriteStream *)&v9, (char *)1);
  uint64_t v5 = *this;
  char v10 = 8;
  re::zerocopy::writeAll(*v5, (re::zerocopy::WriteStream *)&v10, (char *)1);
  re::OPackWriter::writeInteger(*this, *(unsigned __int8 *)a2);
  uint64_t v6 = *this;
  char v11 = 9;
  re::zerocopy::writeAll(*v6, (re::zerocopy::WriteStream *)&v11, (char *)1);
  re::OPackWriter::writeFloat64(*this, *((double *)a2 + 1));
  unint64_t v7 = *this;
  char v12 = 10;
  re::zerocopy::writeAll(*v7, (re::zerocopy::WriteStream *)&v12, (char *)1);
  return re::TraceDeltaWriter::writeEntries(this, (uint64_t)a2 + 16);
}

uint64_t re::TraceDeltaWriter::writeEntries(re::zerocopy ***a1, uint64_t a2)
{
  uint64_t result = re::OPackWriter::writeArrayBegin(*a1, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = v5 << 6;
    do
    {
      uint64_t result = re::TraceDeltaWriter::writeEntry(a1, v6);
      v6 += 64;
      v7 -= 64;
    }
    while (v7);
    if (*(void *)(a2 + 16) >= 0xFuLL)
    {
      uint64_t v8 = *a1;
      char v9 = 3;
      return re::zerocopy::writeAll(*v8, (re::zerocopy::WriteStream *)&v9, (char *)1);
    }
  }
  return result;
}

uint64_t re::TraceDeltaWriter::writeEntry(re::zerocopy ***a1, uint64_t a2)
{
  int v4 = *a1;
  char v14 = -27;
  re::zerocopy::writeAll(*v4, (re::zerocopy::WriteStream *)&v14, (char *)1);
  uint64_t v5 = *a1;
  char v15 = 8;
  re::zerocopy::writeAll(*v5, (re::zerocopy::WriteStream *)&v15, (char *)1);
  re::OPackWriter::writeInteger(*a1, *(void *)a2);
  uint64_t v6 = *a1;
  char v16 = 9;
  re::zerocopy::writeAll(*v6, (re::zerocopy::WriteStream *)&v16, (char *)1);
  re::OPackWriter::writeInteger(*a1, *(void *)(a2 + 8));
  uint64_t v7 = *a1;
  char v17 = 10;
  re::zerocopy::writeAll(*v7, (re::zerocopy::WriteStream *)&v17, (char *)1);
  re::OPackWriter::writeInteger(*a1, *(unsigned __int8 *)(a2 + 16));
  uint64_t v8 = *a1;
  char v18 = 11;
  re::zerocopy::writeAll(*v8, (re::zerocopy::WriteStream *)&v18, (char *)1);
  re::OPackWriter::writeInteger(*a1, *(unsigned __int8 *)(a2 + 17));
  char v9 = *a1;
  char v19 = 12;
  re::zerocopy::writeAll(*v9, (re::zerocopy::WriteStream *)&v19, (char *)1);
  char v10 = *a1;
  char v11 = *(re::zerocopy::WriteStream **)(a2 + 56);
  unint64_t v12 = *(void *)(a2 + 40);
  return re::OPackWriter::writeData(v10, v11, v12);
}

uint64_t re::TraceDeltaReader::read(re::OPackReader **this, re::TraceDelta *a2)
{
  int v4 = *this;
  uint64_t result = re::OPackReader::next(*this, (uint64_t)a2);
  if (result)
  {
    if (*((unsigned char *)v4 + 196) == 13)
    {
      uint64_t v7 = *this;
      if (re::OPackReader::next(*this, v6))
      {
        while (*((unsigned char *)v7 + 196) == 6)
        {
          int v9 = *((unsigned __int8 *)v7 + 224);
          if (v9 == 2)
          {
            char v11 = *this;
            uint64_t result = re::OPackReader::next(*this, v8);
            if (!result) {
              return result;
            }
            if (*((unsigned char *)v11 + 196) != 12) {
              return 0;
            }
            while (re::OPackReader::next(*this, v12) && *((unsigned char *)*this + 184) != 3)
            {
              uint64_t v21 = 0;
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v17 = 0;
              int v20 = 0;
              __n128 v15 = 0uLL;
              __int16 v16 = 0;
              __n128 v13 = re::DynamicArray<re::TraceEntry>::add((re::TraceDelta *)((char *)a2 + 16), &v15);
              if (v17)
              {
                if (v21) {
                  (*(void (**)(__n128))(*(void *)v17 + 40))(v13);
                }
              }
              *((unsigned char *)*this + 2) = 1;
              if ((re::TraceDeltaReader::read(this, *((void *)a2 + 6) + (*((void *)a2 + 4) << 6) - 64) & 1) == 0) {
                return 0;
              }
            }
          }
          else if (v9 == 1)
          {
            char v14 = *this;
            uint64_t result = re::OPackReader::next(*this, v8);
            if (!result) {
              return result;
            }
            if (*((unsigned char *)v14 + 196) != 8) {
              return 0;
            }
            *((void *)a2 + 1) = *((void *)v14 + 28);
          }
          else if (!*((unsigned char *)v7 + 224))
          {
            char v10 = *this;
            uint64_t result = re::OPackReader::next(*this, v8);
            if (!result) {
              return result;
            }
            if (*((unsigned char *)v10 + 196) != 6) {
              return 0;
            }
            *(unsigned char *)a2 = *((void *)v10 + 28);
          }
          uint64_t v7 = *this;
          if ((re::OPackReader::next(*this, v8) & 1) == 0) {
            return *((unsigned __int8 *)*this + 184) == 5;
          }
        }
      }
      return *((unsigned __int8 *)*this + 184) == 5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::TraceDeltaReader::read(re::OPackReader **a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t result = re::OPackReader::next(*a1, a2);
  if (result)
  {
    if (*((unsigned char *)v4 + 196) == 13)
    {
      uint64_t v7 = *a1;
      if (re::OPackReader::next(*a1, v6))
      {
        do
        {
          if (*((unsigned char *)v7 + 196) != 6) {
            break;
          }
          switch(*((unsigned char *)v7 + 224))
          {
            case 0:
              int v9 = *a1;
              uint64_t result = re::OPackReader::next(*a1, v8);
              if (!result) {
                return result;
              }
              if (*((unsigned char *)v9 + 196) != 6) {
                return 0;
              }
              *(void *)a2 = *((void *)v9 + 28);
              break;
            case 1:
              char v11 = *a1;
              uint64_t result = re::OPackReader::next(*a1, v8);
              if (!result) {
                return result;
              }
              if (*((unsigned char *)v11 + 196) != 6) {
                return 0;
              }
              *(void *)(a2 + 8) = *((void *)v11 + 28);
              break;
            case 2:
              uint64_t v12 = *a1;
              uint64_t result = re::OPackReader::next(*a1, v8);
              if (!result) {
                return result;
              }
              if (*((unsigned char *)v12 + 196) != 6) {
                return 0;
              }
              *(unsigned char *)(a2 + 16) = *((void *)v12 + 28);
              break;
            case 3:
              __n128 v13 = *a1;
              uint64_t result = re::OPackReader::next(*a1, v8);
              if (!result) {
                return result;
              }
              if (*((unsigned char *)v13 + 196) != 6) {
                return 0;
              }
              *(unsigned char *)(a2 + 17) = *((void *)v13 + 28);
              break;
            case 4:
              char v14 = *a1;
              uint64_t result = re::OPackReader::next(*a1, v8);
              if (!result) {
                return result;
              }
              if (*((unsigned char *)v14 + 196) != 11) {
                return 0;
              }
              re::DynamicArray<unsigned char>::resizeUninitialized((void *)(a2 + 24), *((void *)*a1 + 27));
              memcpy(*(void **)(a2 + 56), *((const void **)*a1 + 26), *((void *)*a1 + 27));
              break;
            default:
              return 0;
          }
          uint64_t v7 = *a1;
        }
        while ((re::OPackReader::next(*a1, v10) & 1) != 0);
      }
      return *((unsigned __int8 *)*a1 + 184) == 5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::TraceTargetAppInfoWriter::write(re::zerocopy ***a1, uint64_t a2)
{
  uint64_t result = re::OPackWriter::writeArrayBegin(*a1, *(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = v6 + 40 * v5;
    uint64_t v8 = v6 + 17;
    do
    {
      int v9 = *a1;
      char v18 = -30;
      re::zerocopy::writeAll(*v9, (re::zerocopy::WriteStream *)&v18, (char *)1);
      uint64_t v10 = *a1;
      char v19 = 8;
      re::zerocopy::writeAll(*v10, (re::zerocopy::WriteStream *)&v19, (char *)1);
      uint64_t v11 = v8 - 17;
      re::OPackWriter::writeInteger(*a1, *(void *)(v8 - 17));
      uint64_t v12 = *a1;
      char v20 = 9;
      re::zerocopy::writeAll(*v12, (re::zerocopy::WriteStream *)&v20, (char *)1);
      unint64_t v13 = *(void *)(v8 - 1);
      char v14 = (re::zerocopy::WriteStream *)v8;
      if (v13)
      {
        char v14 = *(re::zerocopy::WriteStream **)(v8 + 7);
        unint64_t v15 = v13 >> 1;
      }
      else
      {
        unint64_t v15 = v13 >> 1;
      }
      uint64_t result = re::OPackWriter::writeString(*a1, v14, v15);
      v8 += 40;
    }
    while (v11 + 40 != v7);
    if (*(void *)(a2 + 16) >= 0xFuLL)
    {
      __int16 v16 = *a1;
      char v17 = 3;
      return re::zerocopy::writeAll(*v16, (re::zerocopy::WriteStream *)&v17, (char *)1);
    }
  }
  return result;
}

BOOL re::TraceTargetAppInfoReader::read(re::OPackReader **a1, _anonymous_namespace_ *a2)
{
  int v4 = *a1;
  if (!re::OPackReader::next(*a1, (uint64_t)a2) || *((unsigned char *)v4 + 196) != 12) {
    return 0;
  }
  uint64_t v6 = re::OPackReader::next(*a1, v5);
  uint64_t v7 = *a1;
  if (!v6) {
    return *((unsigned char *)v7 + 184) == 3;
  }
  while (1)
  {
    int v8 = *((unsigned __int8 *)v7 + 184);
    BOOL v9 = v8 == 3;
    if (v8 == 3) {
      return v9;
    }
    uint64_t v24 = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    re::DynamicString::setCapacity((void *)&v22 + 1, 0);
    double v11 = re::DynamicArray<re::TraceTargetAppInfo>::add(a2, &v22);
    if (*((void *)&v22 + 1) && (v23 & 1) != 0) {
      (*(void (**)(double))(**((void **)&v22 + 1) + 40))(v11);
    }
    uint64_t v12 = *a1;
    *((unsigned char *)v12 + 2) = 1;
    if (!re::OPackReader::next(v12, v10) || *((unsigned char *)v12 + 196) != 13) {
      return v9;
    }
    char v14 = *a1;
    if (re::OPackReader::next(*a1, v13))
    {
      while (*((unsigned char *)v14 + 196) == 6)
      {
        if (*((unsigned char *)v14 + 224) == 1)
        {
          char v20 = *a1;
          if (!re::OPackReader::next(*a1, v15) || *((unsigned char *)v20 + 196) != 10) {
            return 0;
          }
          re::DynamicString::assign((re::DynamicString *)(*((void *)a2 + 4) + 40 * *((void *)a2 + 2) - 32), *((const char **)*a1 + 26), *((void *)*a1 + 27));
        }
        else
        {
          if (*((unsigned char *)v14 + 224)) {
            return 0;
          }
          __int16 v16 = *a1;
          uint64_t v17 = *((void *)a2 + 4);
          uint64_t v18 = *((void *)a2 + 2);
          if (!re::OPackReader::next(*a1, v15) || *((unsigned char *)v16 + 196) != 6) {
            return 0;
          }
          *(void *)(v17 + 40 * v18 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *((void *)v16 + 28);
        }
        char v14 = *a1;
        if ((re::OPackReader::next(*a1, v19) & 1) == 0) {
          break;
        }
      }
    }
    uint64_t v6 = re::OPackReader::next(*a1, v15);
    uint64_t v7 = *a1;
    if ((v6 & 1) == 0) {
      return *((unsigned char *)v7 + 184) == 3;
    }
  }
}

double re::DynamicArray<re::TraceTargetAppInfo>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TraceTargetAppInfo>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)uint64_t v5 = *a2;
  double result = 0.0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 32) = a2[4];
  uint64_t v7 = a2[2];
  *(void *)(v5 + 8) = a2[1];
  a2[1] = 0;
  uint64_t v8 = a2[3];
  a2[4] = 0;
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v7;
  *(void *)(v5 + 24) = v8;
  a2[2] = v10;
  a2[3] = v9;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

char *re::TraceResolverDefault::resolveChild(re::TraceResolverDefault *this, uint64_t a2)
{
  uint64_t v2 = (char *)this + 8;
  snprintf((char *)this + 8, 0x40uLL, "%llu", a2);
  return v2;
}

char *re::TraceResolverDefault::resolveId(re::TraceResolverDefault *this, uint64_t a2)
{
  uint64_t v2 = (char *)this + 8;
  snprintf((char *)this + 8, 0x40uLL, "%llu", a2);
  return v2;
}

uint64_t re::TraceDump::dump(re::zerocopy **this, const re::TraceDelta *a2)
{
  uint64_t result = re::zerocopy::writeAll(*this, (re::zerocopy::WriteStream *)"delta\n", (char *)6);
  uint64_t v5 = *((void *)a2 + 4);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
    uint64_t v7 = v5 << 6;
    do
    {
      uint64_t result = re::TraceDump::dump((uint64_t)this, v6);
      v6 += 8;
      v7 -= 64;
    }
    while (v7);
  }
  return result;
}

uint64_t re::TraceDump::dump(uint64_t a1, uint64_t *a2)
{
  if (a2[1]) {
    return re::TraceDump::dumpChild(a1, a2);
  }
  else {
    return re::TraceDump::dumpParent(a1, (uint64_t)a2);
  }
}

uint64_t re::TraceDump::dumpChild(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*a2 != *(void *)(a1 + 88))
  {
    *(void *)(a1 + 88) = v4;
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)"  +-- ", (char *)6);
    uint64_t v5 = (char *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), v4);
    uint64_t v6 = (char *)strlen(v5);
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)v5, v6);
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)"\n", (char *)1);
  }
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)"    +-- ", (char *)8);
  uint64_t v7 = (char *)(***(uint64_t (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), a2[1]);
  uint64_t v8 = (char *)strlen(v7);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)v7, v8);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)" ", (char *)1);
  unint64_t v9 = *((char *)a2 + 16);
  if (v9 > 3) {
    uint64_t v10 = "???";
  }
  else {
    uint64_t v10 = (char *)*((void *)&off_264BE87A8 + v9);
  }
  double v11 = (char *)strlen(v10);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)v10, v11);
  if (*(unsigned char *)(a1 + 97) && a2[5])
  {
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)" ", (char *)1);
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)a2[7], (char *)a2[5]);
  }
  uint64_t v12 = *(re::zerocopy **)a1;
  return re::zerocopy::writeAll(v12, (re::zerocopy::WriteStream *)"\n", (char *)1);
}

uint64_t re::TraceDump::dumpParent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 88) = *(void *)a2;
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)"  +-- ", (char *)6);
  uint64_t v4 = (char *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), *(void *)a2);
  uint64_t v5 = (char *)strlen(v4);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)v4, v5);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)" ", (char *)1);
  unint64_t v6 = *(char *)(a2 + 16);
  if (v6 > 3) {
    uint64_t v7 = "???";
  }
  else {
    uint64_t v7 = (char *)*((void *)&off_264BE87A8 + v6);
  }
  uint64_t v8 = (char *)strlen(v7);
  re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)v7, v8);
  if (*(unsigned char *)(a1 + 96) && *(void *)(a2 + 40))
  {
    re::zerocopy::writeAll(*(re::zerocopy **)a1, (re::zerocopy::WriteStream *)" ", (char *)1);
    re::zerocopy::writeAll(*(re::zerocopy **)a1, *(re::zerocopy::WriteStream **)(a2 + 56), *(char **)(a2 + 40));
  }
  unint64_t v9 = *(re::zerocopy **)a1;
  return re::zerocopy::writeAll(v9, (re::zerocopy::WriteStream *)"\n", (char *)1);
}

void *re::allocInfo_TraceService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_504, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_504))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9F928, "TraceService");
    __cxa_guard_release(&_MergedGlobals_504);
  }
  return &unk_26AF9F928;
}

void re::initInfo_TraceService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3DE7F4E91F7F73A0;
  v5[1] = "TraceService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::initInfo_TraceService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_TraceService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TraceService", (uint64_t (*)(re::internal *))re::allocInfo_TraceService, (re::IntrospectionBase *(*)(void))re::initInfo_TraceService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::TraceService>, this);
}

id re::TraceFramer::definition(re::TraceFramer *this)
{
  unsigned __int8 v1 = &dword_2687A1000;
  {
    unsigned __int8 v1 = &dword_2687A1000;
    if (v4)
    {
      re::TraceFramer::definition(void)::definition = re::TraceFramer::create(v4);
      unsigned __int8 v1 = &dword_2687A1000;
    }
  }
  uint64_t v2 = (void *)*((void *)v1 + 294);
  return v2;
}

nw_protocol_definition_t re::TraceFramer::create(re::TraceFramer *this)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3221225472;
  _DWORD v4[2] = ___ZN2re11TraceFramer6createEv_block_invoke_9;
  v4[3] = &unk_264BE8858;
  id v5 = &__block_literal_global_49;
  id v6 = &__block_literal_global_7;
  unsigned __int8 v1 = _Block_copy(v4);
  nw_protocol_definition_t definition = nw_framer_create_definition("re-trace-header", 0, v1);

  return definition;
}

uint64_t ___ZN2re11TraceFramer6createEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)temp_buffer = 0;
  uint64_t v3 = 8;
  if (nw_framer_parse_input(v2, 8uLL, 8uLL, temp_buffer, &__block_literal_global_3))
  {
    uint64_t v3 = 8;
    while (1)
    {
      long long v4 = nw_framer_message_create(v2);
      nw_framer_message_set_value(v4, "type", (void *)temp_buffer[4], 0);
      BOOL v5 = nw_framer_deliver_input_no_copy(v2, bswap32(*(unsigned int *)temp_buffer), v4, 1);

      if (!v5) {
        break;
      }
      *(void *)temp_buffer = 0;
      if (!nw_framer_parse_input(v2, 8uLL, 8uLL, temp_buffer, &__block_literal_global_3)) {
        goto LABEL_7;
      }
    }
    uint64_t v3 = 0;
  }
LABEL_7:

  return v3;
}

uint64_t ___ZN2re11TraceFramer6createEv_block_invoke_2(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8 || a2 == 0) {
    return 0;
  }
  else {
    return 8;
  }
}

void ___ZN2re11TraceFramer6createEv_block_invoke_3(uint64_t a1, void *a2, NSObject *a3, size_t a4)
{
  id v6 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  char v15 = 0;
  access_value[0] = MEMORY[0x263EF8330];
  access_value[1] = 3221225472;
  access_value[2] = ___ZN2re11TraceFramer6createEv_block_invoke_4;
  access_value[3] = &unk_264BE8830;
  access_value[4] = &v12;
  BOOL v7 = nw_framer_message_access_value(a3, "type", access_value);
  if (v7)
  {
    unsigned int v9 = bswap32(a4);
    char v10 = *((unsigned char *)v13 + 24);
    nw_framer_write_output(v6, (const uint8_t *)&v9, 8uLL);
    nw_framer_write_output_no_copy(v6, a4);
  }
  else
  {
    uint64_t v8 = *re::traceLogObjects((re *)v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "TraceFramer: Could not access TraceMessageType of output message.", (uint8_t *)&v9, 2u);
    }
  }
  _Block_object_dispose(&v12, 8);
}

uint64_t ___ZN2re11TraceFramer6createEv_block_invoke_4(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

uint64_t ___ZN2re11TraceFramer6createEv_block_invoke_9(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  long long v4 = a2;
  nw_framer_set_input_handler(v4, v3);
  nw_framer_set_output_handler(v4, *(nw_framer_output_handler_t *)(a1 + 40));

  return 1;
}

void re::TraceFramer::setMessageType(re::TraceFramer *a1, unsigned int a2)
{
  long long v4 = re::TraceFramer::definition(a1);
  message = nw_framer_protocol_create_message(v4);

  nw_framer_message_set_value(message, "type", (void *)a2, &__block_literal_global_14_3);
  nw_content_context_set_metadata_for_protocol((nw_content_context_t)a1, message);
}

void re::TraceFramer::messageType(re::TraceFramer *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  BOOL v5 = re::TraceFramer::definition(this);
  id v6 = nw_content_context_copy_protocol_metadata((nw_content_context_t)this, v5);

  if (!v6 || !(BOOL is_framer_message = nw_protocol_metadata_is_framer_message(v6)))
  {
    char v10 = *re::traceLogObjects((re *)is_framer_message);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      double v11 = "TraceFramer: Could not get framer message from context.";
      goto LABEL_11;
    }
LABEL_6:
    *a2 = 0;
    goto LABEL_7;
  }
  access_value[0] = MEMORY[0x263EF8330];
  access_value[1] = 3221225472;
  access_value[2] = ___ZN2re11TraceFramer11messageTypeEPv_block_invoke;
  access_value[3] = &unk_264BE8830;
  access_value[4] = &v14;
  BOOL v8 = nw_framer_message_access_value(v6, "type", access_value);
  if (!v8)
  {
    char v10 = *re::traceLogObjects((re *)v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      double v11 = "TraceFramer: Could not get TraceMessageType from the framer message.";
LABEL_11:
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, v11, v12, 2u);
      goto LABEL_6;
    }
    goto LABEL_6;
  }
  unsigned int v9 = v15;
  *a2 = 1;
  a2[1] = *((unsigned char *)v9 + 24);
LABEL_7:

  _Block_object_dispose(&v14, 8);
}

uint64_t ___ZN2re11TraceFramer11messageTypeEPv_block_invoke(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

NSObject **re::TraceClient::TraceClient(NSObject **a1, dispatch_queue_t target)
{
  uint64_t v3 = dispatch_queue_create_with_target_V2("trace client", 0, target);
  *a1 = v3;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = 1;
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = 0;
  *((_DWORD *)a1 + 18) = 0;
  a1[10] = 0;
  a1[11] = re::s_nullClientDelegate;
  re::TraceClient::initParameters((re::TraceClient *)a1);
  return a1;
}

void re::TraceClient::initParameters(re::TraceClient *this)
{
  nw_parameters_t v2 = nw_parameters_create();
  uint64_t v3 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v2;

  stacuint64_t k = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)this + 3));
  options = nw_tcp_create_options();
  nw_protocol_stack_set_transport_protocol(stack, options);

  id v6 = re::TraceFramer::definition(v5);
  BOOL v7 = nw_framer_create_options(v6);

  nw_protocol_stack_prepend_application_protocol(stack, v7);
}

void re::TraceClient::~TraceClient(re::TraceClient *this)
{
}

void re::TraceClient::forceCancel(re::TraceClient *this)
{
  nw_parameters_t v2 = *((void *)this + 1);
  if (v2)
  {
    if (*((_DWORD *)this + 4) != 5)
    {
      nw_connection_force_cancel(v2);
      nw_parameters_t v2 = *((void *)this + 1);
    }
    *((void *)this + 1) = 0;
  }
}

void re::TraceClient::addTargetApp(re::TraceClient *this, const char *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    long long v4 = (re::TraceClient *)((char *)this + 48);
    uint64_t v7 = a3;
    double v5 = re::DynamicArray<re::TraceTargetAppInfo>::add(v4, &v7);
    if (v8)
    {
      if (v9) {
        (*(void (**)(double))(*(void *)v8 + 40))(v5);
      }
    }
  }
  else
  {
    id v6 = *re::traceLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7) = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "TraceClient: Invalid app bundleID or peerID", (uint8_t *)&v7, 2u);
    }
  }
}

void re::TraceClient::connect(nw_parameters_t *this, const char *a2, const char *a3)
{
  re::TraceClient::disconnect((re::TraceClient *)this);
  re::TraceClient::forceCancel((re::TraceClient *)this);
  nw_endpoint_t host = nw_endpoint_create_host(a2, a3);
  nw_parameters_t v7 = this[4];
  this[4] = host;

  nw_connection_t v8 = nw_connection_create(this[4], this[3]);
  nw_parameters_t v9 = this[1];
  this[1] = v8;

  re::TraceClient::startConnection((id *)this);
}

void re::TraceClient::disconnect(re::TraceClient *this)
{
  nw_parameters_t v2 = *((void *)this + 1);
  if (v2 && *((_DWORD *)this + 4) != 5)
  {
    nw_connection_send(v2, 0, (nw_content_context_t)*MEMORY[0x263F14450], 1, (nw_connection_send_completion_t)*MEMORY[0x263F14438]);
    nw_connection_cancel(*((nw_connection_t *)this + 1));
    re::DynamicArray<re::SceneCompatibilityVariant>::clear((uint64_t)this + 48);
  }
}

void re::TraceClient::startConnection(id *this)
{
  id v2 = *this;
  id v3 = this[1];
  nw_connection_set_queue((nw_connection_t)this[1], (dispatch_queue_t)*this);
  long long v4 = this[1];
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = ___ZN2re11TraceClient15startConnectionEv_block_invoke;
  void v7[3] = &unk_264BE88A0;
  id v8 = v2;
  id v9 = v3;
  id v5 = v3;
  id v6 = v2;
  nw_connection_set_state_changed_handler(v4, v7);
  nw_connection_start((nw_connection_t)this[1]);
}

void re::TraceClient::connectWithFileHandle(re::TraceClient *this)
{
  re::TraceClient::disconnect(this);
  re::TraceClient::forceCancel(this);
  uint64_t v2 = nw_connection_create_with_connected_socket_and_parameters();
  id v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v2;

  re::TraceClient::startConnection((id *)this);
}

void ___ZN2re11TraceClient15startConnectionEv_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (specific)
  {
    nw_parameters_t v7 = specific;
    id v8 = *(id *)(a1 + 40);
    id v9 = a3;
    char v10 = v9;
    if (*((NSObject **)v7 + 1) == v8)
    {
      uint64_t v12 = *re::traceLogObjects(v9);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v12;
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = nw_connection_state_to_string();
        _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "TraceClient connection state = %s", buf, 0xCu);
      }
      unsigned int v14 = v7[4];
      void v7[4] = a2;
      switch(a2)
      {
        case 1u:
          goto LABEL_20;
        case 3u:
          (*(void (**)(void))(**((void **)v7 + 11) + 16))(*((void *)v7 + 11));
          if (!*((void *)v7 + 8)) {
            goto LABEL_15;
          }
          if (*((void *)v7 + 1) && v7[4] != 5)
          {
            *(void *)int buf = &unk_26E716208;
            *(_OWORD *)&uint8_t buf[8] = 0u;
            memset(v25, 0, 24);
            re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
            *(int64x2_t *)((char *)v25 + 8) = vdupq_n_s64(0x1000uLL);
            *(void *)&uint8_t buf[16] = dispatch_data_create_alloc();
            long long v22 = &v23;
            long long v23 = (re::zerocopy *)buf;
            re::TraceTargetAppInfoWriter::write(&v22, (uint64_t)(v7 + 12));
            re::zerocopy::DispatchWriteStream::mergeTail((re::zerocopy::DispatchWriteStream *)buf);
            uint64_t v16 = *(NSObject **)&buf[8];
            *(void *)&uint8_t buf[8] = 0;
            re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
            *(void *)int buf = &unk_26E716208;
            re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
            char v17 = (re::TraceFramer *)nw_content_context_create("re-trace");
            re::TraceFramer::setMessageType(v17, 4u);
            nw_connection_send(*((nw_connection_t *)v7 + 1), v16, (nw_content_context_t)v17, 1, &__block_literal_global_5_3);

LABEL_15:
            if (*((void *)v7 + 1))
            {
              if (v7[4] != 5)
              {
                uint64_t v18 = v7[10];
                *(void *)int buf = &unk_26E716208;
                *(_OWORD *)&uint8_t buf[8] = 0u;
                memset(v25, 0, 24);
                re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
                *(int64x2_t *)((char *)v25 + 8) = vdupq_n_s64(0x20uLL);
                *(void *)&uint8_t buf[16] = dispatch_data_create_alloc();
                long long v23 = (re::zerocopy *)buf;
                re::OPackWriter::writeInteger(&v23, v18);
                re::zerocopy::DispatchWriteStream::mergeTail((re::zerocopy::DispatchWriteStream *)buf);
                uint64_t v19 = *(NSObject **)&buf[8];
                *(void *)&uint8_t buf[8] = 0;
                re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
                *(void *)int buf = &unk_26E716208;
                re::zerocopy::DispatchWriteStream::clear((re::zerocopy::DispatchWriteStream *)buf);
                char v20 = (re::TraceFramer *)nw_content_context_create("re-trace");
                re::TraceFramer::setMessageType(v20, 1u);
                nw_connection_send(*((nw_connection_t *)v7 + 1), v19, (nw_content_context_t)v20, 1, &__block_literal_global_50);
              }
            }
          }
          re::TraceClient::scheduleReceive((id *)v7, v15);
          break;
        case 4u:
          (*(void (**)(void))(**((void **)v7 + 11) + 40))(*((void *)v7 + 11));
LABEL_20:
          re::TraceClient::disconnect((re::TraceClient *)v7);
          break;
        case 5u:
          if (v14 != 4) {
            (*(void (**)(void))(**((void **)v7 + 11) + 40))(*((void *)v7 + 11));
          }
          uint64_t v21 = (void *)*((void *)v7 + 1);
          *((void *)v7 + 1) = 0;

          break;
        default:
          break;
      }
    }
  }
  else
  {
    double v11 = *re::traceLogObjects(0);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    id v8 = v11;
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = nw_connection_state_to_string();
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "TraceClient: connection state changed (%s) for detached connection", buf, 0xCu);
  }
}

void re::TraceClient::scheduleReceive(id *this, re::TraceClient *a2)
{
  id v3 = *this;
  long long v4 = this[1];
  completion[0] = MEMORY[0x263EF8330];
  completion[1] = 3221225472;
  completion[2] = ___ZN2re11TraceClient15scheduleReceiveEPS0__block_invoke;
  completion[3] = &unk_264BE88C8;
  id v7 = v3;
  id v5 = v3;
  nw_connection_receive_message(v4, completion);
}

void ___ZN2re11TraceClient15scheduleReceiveEPS0__block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  id v9 = a2;
  char v10 = a3;
  id v11 = a5;
  if (specific)
  {
    unsigned int v14 = specific;
    if (v9 && v10)
    {
      re::TraceFramer::messageType(v10, v19);
      if (v19[0])
      {
        int v15 = v19[1];
        uint64_t v16 = (_anonymous_namespace_ *)v9;
        char v17 = v16;
        if (v15 == 3)
        {
          LODWORD(v21[0]) = 0;
          memset(v20, 0, sizeof(v20));
          *(void *)((char *)v21 + 4) = 0x7FFFFFFFLL;
          re::zerocopy::DispatchReadStream::DispatchReadStream((re::zerocopy::DispatchReadStream *)v23, v17);
          re::OPackReader::OPackReader((uint64_t)buf, (uint64_t)v23);
          long long v22 = (re::OPackReader *)buf;
          if (re::TransferReportReader::read(&v22, v20)) {
            (*(void (**)(void *, _OWORD *))(**((void **)v14 + 11) + 32))(*((void **)v14 + 11), v20);
          }
          if (v27)
          {
            if (v31) {
              (*(void (**)(uint64_t))(*(void *)v27 + 40))(v27);
            }
            uint64_t v31 = 0;
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v27 = 0;
            ++v30;
          }
          re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)v26);
          re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)v25);
          re::zerocopy::DispatchReadStream::~DispatchReadStream(v23);
          re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)&v20[1]);
        }
        else if (v15 == 2)
        {
          LOBYTE(v20[0]) = 0;
          v21[0] = 0;
          memset((char *)v20 + 8, 0, 36);
          re::zerocopy::DispatchReadStream::DispatchReadStream((re::zerocopy::DispatchReadStream *)v23, v16);
          re::OPackReader::OPackReader((uint64_t)buf, (uint64_t)v23);
          long long v22 = (re::OPackReader *)buf;
          if (re::TraceDeltaReader::read(&v22, (re::TraceDelta *)v20)) {
            (*(void (**)(void *, _OWORD *))(**((void **)v14 + 11) + 24))(*((void **)v14 + 11), v20);
          }
          if (v27)
          {
            if (v31) {
              (*(void (**)(uint64_t))(*(void *)v27 + 40))(v27);
            }
            uint64_t v31 = 0;
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            uint64_t v27 = 0;
            ++v30;
          }
          re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)v26);
          re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)v25);
          re::zerocopy::DispatchReadStream::~DispatchReadStream(v23);
          re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v20[1]);
        }
        else
        {
          uint64_t v18 = *re::traceLogObjects(v16);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 67109120;
            buf[1] = v15;
            _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "TraceClient received unexpected TraceMessageType: %hhu", (uint8_t *)buf, 8u);
          }
        }
      }
      goto LABEL_27;
    }
    if (v9 || !a4)
    {
LABEL_27:
      re::TraceClient::scheduleReceive(v14, v13);
      goto LABEL_28;
    }
    re::TraceClient::disconnect(specific);
  }
LABEL_28:
}

void re::TraceClientDelegateNone::~TraceClientDelegateNone(re::TraceClientDelegateNone *this)
{
}

uint64_t re::TraceClientDelegateNone::clientConnected(re::TraceClientDelegateNone *this)
{
  return puts("✅ Connected");
}

void re::TraceClientDelegateNone::clientLoadedDelta(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = *MEMORY[0x263EF8358];
  v6[0] = &unk_26E7160C8;
  v6[1] = v1;
  char v7 = 0;
  v3[0] = (re::zerocopy *)v6;
  v3[1] = (re::zerocopy *)v4;
  v4[0] = &unk_26E7218B8;
  v4[9] = 0;
  __int16 v5 = 257;
  re::TraceDump::dump(v3, v2);
  re::zerocopy::FileWriteStream::~FileWriteStream((re::zerocopy::FileWriteStream *)v6);
}

uint64_t re::TracePersistenceUtils::copyAll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  v27[0] = 0;
  uint64_t v29 = 0;
  memset(&v27[8], 0, 32);
  int v28 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 64))(a2, v27);
  uint64_t v6 = v5;
  if (v5)
  {
    unsigned int v19 = v5;
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 72))(a1);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 32))(a1, v27);
    (*(void (**)(uint64_t))(*(void *)a2 + 88))(a2);
    unint64_t v8 = v7;
    uint64_t v9 = 0;
    while (1)
    {
      v24[0] = 0;
      uint64_t v26 = 0;
      memset(&v24[8], 0, 32);
      int v25 = 0;
      int v10 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a2 + 48))(a2, v9, v24);
      v21[0] = 0;
      uint64_t v23 = 0;
      memset(&v21[8], 0, 32);
      int v22 = 0;
      id v11 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a2 + 56))(a2, v9, v21);
      char v12 = (char)v11;
      if (!v10) {
        break;
      }
      uint64_t v13 = *(void *)(a3 + 32);
      if (v13) {
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, v24);
      }
      if (v12) {
        goto LABEL_9;
      }
      unsigned int v14 = 0;
      int v15 = v24;
LABEL_15:
      (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 40))(a1, v15, v14);
LABEL_16:
      re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v21[16]);
      re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v24[16]);
      if (++v9 > v8)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        uint64_t v6 = v19;
        goto LABEL_20;
      }
    }
    if (!v11)
    {
      char v17 = *re::traceLogObjects(v11);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134217984;
        uint64_t v31 = v9;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Frame %zu contains neither snapshot nor delta. Skipping", buf, 0xCu);
      }
      goto LABEL_16;
    }
LABEL_9:
    uint64_t v16 = *(void *)(a3 + 32);
    if (v16) {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v16 + 16))(v16, v21);
    }
    if (v10) {
      int v15 = v24;
    }
    else {
      int v15 = 0;
    }
    unsigned int v14 = v21;
    goto LABEL_15;
  }
LABEL_20:
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v27[16]);
  return v6;
}

void re::TracePersistenceSqlite::~TracePersistenceSqlite(sqlite3_stmt **this)
{
  *this = (sqlite3_stmt *)&unk_26E721A28;
  if (this[2])
  {
    sqlite3_finalize(this[3]);
    this[3] = 0;
    sqlite3_finalize(this[4]);
    this[4] = 0;
    sqlite3_finalize(this[5]);
    this[5] = 0;
    sqlite3_finalize(this[6]);
    this[6] = 0;
    sqlite3_close(this[2]);
    this[2] = 0;
  }
}

{
  uint64_t vars8;

  re::TracePersistenceSqlite::~TracePersistenceSqlite(this);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::TracePersistenceSqlite::createStatements(sqlite3 **this)
{
  return !sqlite3_prepare_v2(this[2], "REPLACE INTO rk_frames (id, time, snapshot, delta) VALUES (?1, ?2, ?3, ?4)", -1, this + 3, 0)&& !sqlite3_prepare_v2(this[2], "SELECT time, snapshot FROM rk_frames WHERE id = ?1", -1, this + 4, 0)&& !sqlite3_prepare_v2(this[2], "SELECT time, delta FROM rk_frames WHERE id = ?1", -1, this + 5, 0)&& sqlite3_prepare_v2(this[2], "SELECT MAX(id) FROM rk_frames WHERE id <= ?1 AND snapshot IS NOT NULL", -1, this + 6, 0) == 0;
}

BOOL re::TracePersistenceSqlite::createFile(sqlite3 **this, const char *filename)
{
  if (sqlite3_open_v2(filename, this + 2, 6, 0)) {
    return 0;
  }
  BOOL result = re::TracePersistenceSqlite::createTables(this);
  if (result)
  {
    BOOL result = re::TracePersistenceSqlite::createStatements(this);
    if (result)
    {
      (*((void (**)(sqlite3 **))*this + 9))(this);
      return 1;
    }
  }
  return result;
}

BOOL re::TracePersistenceSqlite::createTables(sqlite3 **this)
{
  return !sqlite3_exec(this[2], "CREATE TABLE IF NOT EXISTS rk_frames (id INT PRIMARY KEY,  time REAL NOT NULL,  delta BLOB,  snapshot BLOB)", 0, 0, 0)&& sqlite3_exec(this[2], "PRAGMA user_version = 1", 0, 0, 0) == 0;
}

uint64_t re::TracePersistenceSqlite::beginBatch(sqlite3 **this)
{
  return sqlite3_exec(this[2], "BEGIN EXCLUSIVE TRANSACTION", 0, 0, 0);
}

uint64_t re::TracePersistenceSqlite::endBatch(sqlite3 **this)
{
  return sqlite3_exec(this[2], "COMMIT TRANSACTION", 0, 0, 0);
}

uint64_t re::TracePersistenceSqlite::add(sqlite3_stmt **this, const re::TraceDelta *a2, const re::TraceDelta *a3, int a4)
{
  uint64_t v5 = a3;
  if (a2)
  {
    if (v14 && v18) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    if (!v5)
    {
      LOBYTE(v14) = 1;
      unsigned int v19 = 0;
      uint64_t v16 = 0;
      *(void *)char v17 = 0;
      uint64_t v5 = a2;
      uint64_t v15 = 0;
LABEL_11:
      double v8 = *((double *)v5 + 1);
      LOBYTE(v5) = v20[0] == 0;
      goto LABEL_12;
    }
LABEL_8:
    if (v13[0] && v13[4]) {
      (*(void (**)(void))(*(void *)v13[0] + 40))();
    }
    goto LABEL_11;
  }
  v20[0] = 1;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  *(void *)n = 0;
  uint64_t v21 = 0;
  if (a3) {
    goto LABEL_8;
  }
  LOBYTE(v14) = 1;
  unsigned int v19 = 0;
  uint64_t v16 = 0;
  *(void *)char v17 = 0;
  double v8 = 0.0;
  uint64_t v15 = 0;
LABEL_12:
  sqlite3_bind_int(this[3], 1, a4);
  sqlite3_bind_double(this[3], 2, v8);
  uint64_t v9 = this[3];
  if (v5) {
    sqlite3_bind_null(v9, 3);
  }
  else {
    sqlite3_bind_blob(v9, 3, v24, n[0], 0);
  }
  int v10 = v14;
  id v11 = this[3];
  if ((_BYTE)v14) {
    sqlite3_bind_blob(v11, 4, v19, v17[0], 0);
  }
  else {
    sqlite3_bind_null(v11, 4);
  }
  sqlite3_step(this[3]);
  sqlite3_reset(this[3]);
  sqlite3_bind_null(this[3], 3);
  sqlite3_bind_null(this[3], 4);
  if (v10 && v15 && v19) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  if ((v5 & 1) == 0 && v21 && v24) {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  return 1;
}

uint64_t re::anonymous namespace'::toOpack(re::_anonymous_namespace_ *this, const re::TraceDelta *a2)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  re::DynamicArray<BOOL>::setCapacity(this, 0x1000uLL);
  v7[0] = &unk_26E716118;
  v7[1] = this;
  uint64_t v6 = v7;
  uint64_t v5 = (re::zerocopy **)&v6;
  return re::TraceDeltaWriter::writeDelta(&v5, a2);
}

uint64_t re::TracePersistenceSqlite::saveMetadata(sqlite3_stmt **this, const re::TraceDelta *a2)
{
  return re::TracePersistenceSqlite::add(this, a2, 0, -1);
}

uint64_t re::TracePersistenceSqlite::saveFrame(re::TracePersistenceSqlite *this, const re::TraceDelta *a2, const re::TraceDelta *a3)
{
  uint64_t result = re::TracePersistenceSqlite::add((sqlite3_stmt **)this, a2, a3, *((_DWORD *)this + 2));
  ++*((_DWORD *)this + 2);
  return result;
}

uint64_t re::TracePersistenceSqlite::loadSnapshotFromRow(sqlite3_stmt **this, int a2, re::TraceDelta *a3)
{
  sqlite3_reset(this[4]);
  sqlite3_bind_int(this[4], 1, a2);
  if (sqlite3_step(this[4]) != 100) {
    return 0;
  }
  sqlite3_column_blob(this[4], 1);
  if (sqlite3_column_bytes(this[4], 1) < 1) {
    return 0;
  }
  if (!v9[0]) {
    return 0;
  }
  uint64_t v6 = v12;
  if (v10 && v6) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  return v7;
}

uint64_t re::anonymous namespace'::fromOpack(uint64_t a1, uint64_t a2, re::TraceDelta *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v7[0] = &unk_26E7161C0;
  v7[1] = a2;
  void v7[2] = a2;
  void v7[3] = a2 + a1;
  re::OPackReader::OPackReader((uint64_t)v8, (uint64_t)v7);
  uint64_t v6 = (re::OPackReader *)v8;
  uint64_t v4 = re::TraceDeltaReader::read(&v6, a3);
  if (v11)
  {
    if (v15) {
      (*(void (**)(void))(*(void *)v11 + 40))();
    }
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    ++v14;
  }
  re::OPackReader::Buffer::~Buffer((re::OPackReader::Buffer *)&v10);
  re::zerocopy::BufferedReadStream::~BufferedReadStream((re::zerocopy::BufferedReadStream *)&v9);
  return v4;
}

uint64_t re::TracePersistenceSqlite::loadDelta(sqlite3_stmt **this, int a2, re::TraceDelta *a3)
{
  sqlite3_reset(this[5]);
  sqlite3_bind_int(this[5], 1, a2);
  if (sqlite3_step(this[5]) != 100) {
    return 0;
  }
  sqlite3_column_blob(this[5], 1);
  if (sqlite3_column_bytes(this[5], 1) < 1) {
    return 0;
  }
  if (!v9[0]) {
    return 0;
  }
  uint64_t v6 = v12;
  if (v10 && v6) {
    (*(void (**)(void))(*(void *)v10 + 40))();
  }
  return v7;
}

uint64_t re::TracePersistenceSqlite::loadMetadata(sqlite3_stmt **this, re::TraceDelta *a2)
{
  return re::TracePersistenceSqlite::loadSnapshotFromRow(this, -1, a2);
}

uint64_t re::TracePersistenceSqlite::truncate(sqlite3 **this)
{
  uint64_t result = sqlite3_exec(this[2], "DELETE FROM rk_frames", 0, 0, 0);
  *((_DWORD *)this + 2) = 0;
  return result;
}

uint64_t re::TracePersistenceSqlite::findSnapshot(sqlite3_stmt **this, int a2)
{
  if (sqlite3_step(this[6]) == 100) {
    return sqlite3_column_int(this[6], 0);
  }
  else {
    return -1;
  }
}

uint64_t re::TracePersistenceSqlite::range(re::TracePersistenceSqlite *this)
{
  return 0;
}

uint64_t re::anonymous namespace'::performCompression(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  compression_stream_operation v2 = v1;
  size_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  long long v16 = 0uLL;
  uint64_t v15 = 0;
  int v17 = 0;
  re::DynamicArray<BOOL>::setCapacity(&v15, 0x8000uLL);
  memset(&stream, 0, sizeof(stream));
  compression_stream_init(&stream, v2, COMPRESSION_LZFSE);
  stream.src_ptr = v6;
  stream.src_size = v4;
  while (1)
  {
    stream.dst_ptr = __src;
    stream.dst_size = 0x8000;
    compression_status v9 = compression_stream_process(&stream, 1);
    if (v9 > COMPRESSION_STATUS_END) {
      break;
    }
    size_t v10 = stream.dst_ptr - __src;
    unint64_t v11 = *((void *)&v16 + 1);
    re::DynamicArray<BOOL>::resize((uint64_t)&v15, stream.dst_ptr - __src + *((void *)&v16 + 1));
    uint64_t v12 = *((void *)&v16 + 1);
    if (*((void *)&v16 + 1) <= v11)
    {
      uint64_t v19 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v21 = 136315906;
      uint64_t v22 = "operator[]";
      __int16 v23 = 1024;
      int v24 = 789;
      __int16 v25 = 2048;
      unint64_t v26 = v11;
      __int16 v27 = 2048;
      uint64_t v28 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    memcpy((void *)(v18 + v11), __src, v10);
    if (v9)
    {
      uint64_t result = compression_stream_destroy(&stream);
LABEL_7:
      *(void *)(v8 + 8) = v15;
      *(_OWORD *)(v8 + 16) = v16;
      *(void *)(v8 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v18;
      *(_DWORD *)(v8 + 32) = 1;
      *(unsigned char *)uint64_t v8 = 1;
      return result;
    }
  }
  uint64_t result = compression_stream_destroy(&stream);
  if (v9 != COMPRESSION_STATUS_ERROR) {
    goto LABEL_7;
  }
  uint64_t result = v15;
  *(unsigned char *)uint64_t v8 = 0;
  if (result && v18) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void re::TracePersistenceMemory::TracePersistenceMemory(re::TracePersistenceMemory *this)
{
  *(void *)this = &unk_26E721AC0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  re::DynamicArray<re::TracePersistenceMemory::Entry>::setCapacity((void *)this + 1, 0x400uLL);
  operator new();
}

void *re::DynamicArray<re::TracePersistenceMemory::Entry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::TracePersistenceMemory::Entry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 7);
        unint64_t v11 = v7;
        do
        {
          *(unsigned char *)unint64_t v11 = *(unsigned char *)v8;
          *(_OWORD *)(v11 + 1) = *(_OWORD *)(v8 + 8);
          v11[7] = 0;
          v11[4] = 0;
          v11[5] = 0;
          v11[3] = 0;
          *((_DWORD *)v11 + 12) = 0;
          uint64_t v12 = v8 + 24;
          uint64_t v13 = *(void *)(v8 + 32);
          v11[3] = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = 0;
          v11[4] = v13;
          *(void *)(v8 + 32) = 0;
          uint64_t v14 = v11[5];
          v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
          uint64_t v15 = v11[7];
          v11[7] = *(void *)(v8 + 56);
          *(void *)(v8 + 56) = v15;
          ++*(_DWORD *)(v8 + 48);
          ++*((_DWORD *)v11 + 12);
          *((unsigned char *)v11 + 64) = *(unsigned char *)(v8 + 64);
          *(_OWORD *)(v11 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)(v8 + 72);
          v11[15] = 0;
          v11[12] = 0;
          v11[13] = 0;
          v11[11] = 0;
          *((_DWORD *)v11 + 28) = 0;
          uint64_t v16 = *(void *)(v8 + 88);
          uint64_t v17 = *(void *)(v8 + 96);
          uint64_t v18 = v8 + 88;
          v11[11] = v16;
          v11[12] = v17;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          uint64_t v19 = v11[13];
          v11[13] = *(void *)(v18 + 16);
          *(void *)(v18 + 16) = v19;
          uint64_t v20 = v11[15];
          v11[15] = *(void *)(v18 + 32);
          *(void *)(v18 + 32) = v20;
          ++*(_DWORD *)(v18 + 24);
          ++*((_DWORD *)v11 + 28);
          re::DynamicArray<re::TraceEntry>::deinit(v18);
          re::DynamicArray<re::TraceEntry>::deinit(v12);
          uint64_t v8 = v18 + 40;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::TracePersistenceMemory::~TracePersistenceMemory(re::TracePersistenceMemory *this)
{
  *(void *)this = &unk_26E721AC0;
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    re::DynamicArray<re::TraceEntry>::deinit(v2 + 16);
    MEMORY[0x237DBCBD0](v2, 0x1020C4094B8BC74);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 6) = 0;
  if (v3)
  {
    uint64_t v4 = *((void *)this + 5);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 3);
      if (v5)
      {
        uint64_t v6 = v5 << 7;
        uint64_t v7 = v4 + 88;
        do
        {
          re::DynamicArray<re::TraceEntry>::deinit(v7);
          re::DynamicArray<re::TraceEntry>::deinit(v7 - 64);
          v7 += 128;
          v6 -= 128;
        }
        while (v6);
        uint64_t v3 = *((void *)this + 1);
        uint64_t v4 = *((void *)this + 5);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v4);
    }
    *((void *)this + 5) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

{
  uint64_t vars8;

  re::TracePersistenceMemory::~TracePersistenceMemory(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::TracePersistenceMemory::saveMetadata(re::TracePersistenceMemory *this, const re::TraceDelta *a2)
{
  uint64_t v2 = (_OWORD *)*((void *)this + 6);
  *uint64_t v2 = *(_OWORD *)a2;
  return re::DynamicArray<re::TraceEntry>::operator=((uint64_t)(v2 + 1), (uint64_t *)a2 + 2);
}

uint64_t re::TracePersistenceMemory::saveFrame(re::TracePersistenceMemory *this, const re::TraceDelta *a2, const re::TraceDelta *a3)
{
  uint64_t v4 = this;
  BOOL v18 = a2 != 0;
  if (a2)
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)a2;
    this = (re::TracePersistenceMemory *)re::DynamicArray<re::TraceEntry>::DynamicArray((uint64_t)&v19[16], (uint64_t *)a2 + 2);
  }
  else
  {
    v19[0] = 0;
    uint64_t v22 = 0;
    *(_OWORD *)&v19[8] = 0u;
    long long v20 = 0u;
    int v21 = 0;
  }
  BOOL v23 = a3 != 0;
  if (a3)
  {
    *(_OWORD *)int v24 = *(_OWORD *)a3;
    this = (re::TracePersistenceMemory *)re::DynamicArray<re::TraceEntry>::DynamicArray((uint64_t)&v24[16], (uint64_t *)a3 + 2);
  }
  else
  {
    v24[0] = 0;
    uint64_t v27 = 0;
    *(_OWORD *)&v24[8] = 0u;
    long long v25 = 0u;
    int v26 = 0;
  }
  unint64_t v5 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  if (v6 >= v5)
  {
    unint64_t v7 = v6 + 1;
    if (v5 < v6 + 1)
    {
      if (*((void *)v4 + 1))
      {
        uint64_t v8 = 2 * v5;
        BOOL v9 = v5 == 0;
        unint64_t v10 = 8;
        if (!v9) {
          unint64_t v10 = v8;
        }
        if (v10 <= v7) {
          unint64_t v11 = v7;
        }
        else {
          unint64_t v11 = v10;
        }
        re::DynamicArray<re::TracePersistenceMemory::Entry>::setCapacity((void *)v4 + 1, v11);
      }
      else
      {
        re::DynamicArray<re::TracePersistenceMemory::Entry>::setCapacity((void *)v4 + 1, v7);
        ++*((_DWORD *)v4 + 8);
      }
    }
    unint64_t v6 = *((void *)v4 + 3);
  }
  unint64_t v12 = *((void *)v4 + 5) + (v6 << 7);
  *(unsigned char *)unint64_t v12 = v18;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)v19;
  *(void *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 24) = *(void *)&v19[16];
  *(void *)&v19[16] = 0;
  *(void *)(v12 + 32) = v20;
  *(void *)&long long v20 = 0;
  uint64_t v13 = *(void *)(v12 + 40);
  *(void *)(v12 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *((void *)&v20 + 1);
  *((void *)&v20 + 1) = v13;
  uint64_t v14 = *(void *)(v12 + 56);
  *(void *)(v12 + 56) = v22;
  uint64_t v22 = v14;
  ++v21;
  ++*(_DWORD *)(v12 + 48);
  *(unsigned char *)(v12 + 64) = v23;
  *(_OWORD *)(v12 + 72) = *(_OWORD *)v24;
  *(void *)(v12 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(v12 + 96) = 0;
  *(void *)(v12 + 104) = 0;
  *(void *)(v12 + 88) = 0;
  *(_DWORD *)(v12 + 112) = 0;
  *(void *)(v12 + 88) = *(void *)&v24[16];
  *(void *)&v24[16] = 0;
  *(void *)(v12 + 96) = v25;
  *(void *)&long long v25 = 0;
  uint64_t v15 = *(void *)(v12 + 104);
  *(void *)(v12 + 104) = *((void *)&v25 + 1);
  *((void *)&v25 + 1) = v15;
  uint64_t v16 = *(void *)(v12 + 120);
  *(void *)(v12 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = v27;
  uint64_t v27 = v16;
  ++v26;
  ++*(_DWORD *)(v12 + 112);
  ++*((void *)v4 + 3);
  ++*((_DWORD *)v4 + 8);
  re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v24[16]);
  return re::DynamicArray<re::TraceEntry>::deinit((uint64_t)&v19[16]);
}

uint64_t re::TracePersistenceMemory::loadSnapshot(re::TracePersistenceMemory *this, unint64_t a2, re::TraceDelta *a3)
{
  if (*((void *)this + 3) <= a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 5);
  if (!*(unsigned char *)(v3 + (a2 << 7))) {
    return 0;
  }
  uint64_t v4 = v3 + (a2 << 7);
  *(_OWORD *)a3 = *(_OWORD *)(v4 + 8);
  re::DynamicArray<re::TraceEntry>::operator=((uint64_t)a3 + 16, (uint64_t *)(v4 + 24));
  return 1;
}

uint64_t re::TracePersistenceMemory::loadDelta(re::TracePersistenceMemory *this, unint64_t a2, re::TraceDelta *a3)
{
  if (*((void *)this + 3) <= a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 5) + (a2 << 7);
  if (!*(unsigned char *)(v3 + 64)) {
    return 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 72);
  re::DynamicArray<re::TraceEntry>::operator=((uint64_t)a3 + 16, (uint64_t *)(v3 + 88));
  return 1;
}

uint64_t re::TracePersistenceMemory::loadMetadata(re::TracePersistenceMemory *this, re::TraceDelta *a2)
{
  uint64_t v2 = *((void *)this + 6);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  re::DynamicArray<re::TraceEntry>::operator=((uint64_t)a2 + 16, (uint64_t *)(v2 + 16));
  return 1;
}

uint64_t re::TracePersistenceMemory::truncate(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 24);
  *(void *)(this + 24) = 0;
  if (v2)
  {
    uint64_t v3 = v2 << 7;
    uint64_t v4 = *(void *)(this + 40) + 88;
    do
    {
      re::DynamicArray<re::TraceEntry>::deinit(v4);
      this = re::DynamicArray<re::TraceEntry>::deinit(v4 - 64);
      v4 += 128;
      v3 -= 128;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 32);
  return this;
}

uint64_t re::TracePersistenceMemory::findSnapshot(re::TracePersistenceMemory *this, int a2)
{
  unint64_t v2 = *((void *)this + 3);
  unsigned int v3 = v2 - 1;
  if ((int)v2 - 1 >= a2) {
    unsigned int v3 = a2;
  }
  if ((v3 & 0x80000000) != 0) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = v3;
    if (v2 <= v3)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(unsigned char *)(*((void *)this + 5) + ((unint64_t)v3 << 7))) {
      break;
    }
    --v3;
    if ((int)v4 < 1) {
      return 0;
    }
  }
  return v4;
}

uint64_t re::TracePersistenceMemory::range(re::TracePersistenceMemory *this)
{
  return 0;
}

void re::TraceDirectCollector::~TraceDirectCollector(re::TraceDirectCollector *this)
{
  *(void *)this = &unk_26E721B48;
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    (*(void (**)(uint64_t, re::TraceDirectCollector *))(*(void *)v2 + 64))(v2, this);
    *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  }
  re::TraceHistory::~TraceHistory((re::TraceDirectCollector *)((char *)this + 80));
  re::TracePersistenceSqlite::~TracePersistenceSqlite((sqlite3_stmt **)this + 2);
}

{
  uint64_t vars8;

  re::TraceDirectCollector::~TraceDirectCollector(this);
  JUMPOUT(0x237DBCBD0);
}

void re::TraceDirectCollector::startCollecting(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a1[9];
    if (v3)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v3 + 64))(v3, a1);
      a1[9] = 0;
    }
    re::TraceHistory::clear((re::TraceHistory *)(a1 + 10));
  }
  uint64_t v4 = *re::traceLogObjects((re *)a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unint64_t v5 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid argument to TraceDirectCollector. traceService is nullptr", v5, 2u);
  }
}

uint64_t re::TraceDirectCollector::saveToFile(re::TraceDirectCollector *this, const char *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v15 = (sqlite3 *)&unk_26E721A28;
  int v16 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  BOOL v4 = re::TracePersistenceSqlite::createFile(&v15, a2);
  if (!v4)
  {
    unint64_t v11 = *re::traceLogObjects((re *)v4);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_12:
      uint64_t v9 = 1;
      goto LABEL_13;
    }
    *(_DWORD *)int buf = 136315138;
    int v21 = a2;
    unint64_t v12 = "Unable to open '%s'\n";
    uint64_t v13 = v11;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v12, buf, 0xCu);
    goto LABEL_12;
  }
  uint64_t v5 = *((void *)this + 14);
  memset(v24, 0, sizeof(v24));
  uint64_t v25 = re::globalAllocators((re *)v4)[2];
  int v26 = 0;
  char v6 = re::TracePersistenceUtils::copyAll((uint64_t)&v15, v5, (uint64_t)v24);
  unint64_t v7 = v26;
  if (v26)
  {
    unint64_t v7 = (re *)(**(uint64_t (***)(re *))v26)(v26);
    if (v26 != (re *)v24) {
      unint64_t v7 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25);
    }
    int v26 = 0;
  }
  uint64_t v8 = *re::traceLogObjects(v7);
  if ((v6 & 1) == 0)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    *(_DWORD *)int buf = 136315138;
    int v21 = a2;
    unint64_t v12 = "Failed to write '%s'\n";
    uint64_t v13 = v8;
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void))(**((void **)this + 14) + 88))(*((void *)this + 14));
    *(_DWORD *)int buf = 134218242;
    int v21 = (const char *)(v10 + 1);
    __int16 v22 = 2080;
    BOOL v23 = a2;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Saved %zu frames to '%s'\n", buf, 0x16u);
    uint64_t v9 = 0;
  }
LABEL_13:
  re::TracePersistenceSqlite::~TracePersistenceSqlite(&v15);
  return v9;
}

re::TraceDelta **re::TraceDirectCollector::clientLoadedDelta(re::TraceDelta **this, const re::TraceDelta *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = this;
  if (*((unsigned char *)this + 9))
  {
    int v4 = *(unsigned __int8 *)a2;
    if ((v4 - 1) < 2)
    {
      uint64_t v5 = this + 2;
      int v6 = *((_DWORD *)v3 + 6);
      a2 = 0;
LABEL_10:
      this = (re::TraceDelta **)re::TracePersistenceSqlite::add(v5, a2, v2, v6);
      ++*((_DWORD *)v3 + 6);
      return this;
    }
    if (v4 != 4)
    {
      if (v4 != 3) {
        return this;
      }
      uint64_t v5 = this + 2;
      int v6 = *((_DWORD *)v3 + 6);
      uint64_t v2 = 0;
      goto LABEL_10;
    }
    uint64_t v8 = this + 2;
    return (re::TraceDelta **)re::TracePersistenceSqlite::add(v8, a2, 0, -1);
  }
  else
  {
    unint64_t v7 = this + 10;
    return re::TraceHistory::addData(v7, a2);
  }
}

void re::xpc::Connection::makeWithListenerEndpoint(void *a1@<X0>, void *a2@<X8>)
{
  id v3 = (id)[objc_alloc(MEMORY[0x263F08D68]) initWithListenerEndpoint:*a1];
  *a2 = v3;
}

void re::xpc::Connection::setExportedInterface(id *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  id v3 = *a1;
  [v3 setExportedInterface:v2];
}

void re::xpc::Connection::setExportedObject(id *this, const re::ObjCObject *a2)
{
  uint64_t v2 = *(void *)a2;
  id v3 = *this;
  [v3 setExportedObject:v2];
}

void re::xpc::Connection::setRemoteObjectInterface(id *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  id v3 = *a1;
  [v3 setRemoteObjectInterface:v2];
}

void re::xpc::Connection::remoteObjectProxy(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this remoteObjectProxy];
  *a2 = v3;
}

void re::xpc::Connection::remoteObjectProxyWithErrorHandler(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = [*a1 remoteObjectProxyWithErrorHandler:a2];
  *a3 = v4;
}

void re::xpc::Connection::syncRemoteObjectProxy(id *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v4 = [*a1 synchronousRemoteObjectProxyWithErrorHandler:a2];
  *a3 = v4;
}

void re::xpc::Connection::setQueue(id *this, const re::dispatch::Queue *a2)
{
  uint64_t v2 = *(void *)a2;
  id v3 = *this;
  [v3 _setQueue:v2];
}

void re::xpc::Listener::makeAnonymous(void *a1@<X8>)
{
  id v3 = [MEMORY[0x263F08D88] anonymousListener];
  *a1 = v3;
}

void re::xpc::Listener::setDelegate(id *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  id v3 = *a1;
  [v3 setDelegate:v2];
}

void re::xpc::Listener::endpoint(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this endpoint];
  *a2 = v3;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::~FVarLevel(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this)
{
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  id v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  id v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeComponents(std::vector<int> *this)
{
  std::vector<unsigned int>::resize(this + 1, (int)((uint64_t)(*((void *)this->__begin_ + 7) - *((void *)this->__begin_ + 6)) >> 2));
  std::vector<int>::pointer begin = this[2].__begin_;
  char v8 = 0;
  std::vector<int>::pointer v3 = this->__begin_;
  unint64_t v4 = this->__begin_[1];
  uint64_t v5 = (char *)((char *)this[2].__end_ - (char *)begin);
  if (v4 <= (unint64_t)v5)
  {
    if (v4 < (unint64_t)v5) {
      this[2].__end_ = (std::vector<int>::pointer)((char *)begin + v4);
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(&this[2].__begin_, v4 - (void)v5, &v8);
    std::vector<int>::pointer v3 = this->__begin_;
  }
  std::vector<unsigned short>::resize((uint64_t)&this[3], v3[2]);
  std::vector<unsigned int>::resize(this + 4, this->__begin_[2]);
  unint64_t v6 = (int)((uint64_t)(*((void *)this->__begin_ + 37) - *((void *)this->__begin_ + 36)) >> 2);
  __int16 v7 = 0;
  std::vector<unsigned short>::resize((uint64_t)&this[5], v6, &v7);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::__append((void **)a1, a2 - v2);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this, int a2)
{
  uint64_t v198 = *MEMORY[0x263EF8340];
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  unsigned int v4 = v3 >> 2;
  int v5 = (v3 >> 2) & 7;
  if (v5) {
    BOOL v6 = (v3 & 3) != 2;
  }
  else {
    BOOL v6 = 0;
  }
  BOOL v167 = v6;
  *((unsigned char *)this + 12) = v5 == 5;
  int v171 = v5;
  unsigned int v168 = v5 - 3;
  BOOL v7 = v5 == 3;
  *((unsigned char *)this + 13) = (v4 & 6) == 4;
  *((unsigned char *)this + 14) = (v4 & 6) == 2;
  uint64_t v8 = *(void *)this;
  uint64_t v9 = *(unsigned int *)(*(void *)this + 8);
  int v177 = 0;
  if ((v4 & 6) == 4) {
    BOOL v7 = 1;
  }
  __int16 v176 = 0;
  BOOL v166 = v7;
  if (v9)
  {
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_240;
    }
    __int16 v176 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)&v177, v9);
    int v177 = &v176[2 * v10];
    bzero(v176, 2 * v9);
    uint64_t v8 = *(void *)this;
  }
  unint64_t v11 = (int)((uint64_t)(*(void *)(v8 + 296) - *(void *)(v8 + 288)) >> 2);
  LOWORD(v178) = 0;
  v170 = (void *)((char *)this + 120);
  std::vector<unsigned short>::resize((uint64_t)this + 120, v11, &v178);
  uint64_t v12 = *(void *)this;
  uint64_t v13 = *(unsigned int *)(*(void *)this + 20);
  v193 = (__int32 *)&v196;
  int v194 = v13;
  int v195 = 16;
  v197 = 0;
  if (v13 <= 0x10)
  {
    uint64_t v14 = (__int32 *)v191;
    Float64 v187 = 0;
    __s = (__int32 *)v191;
    int v189 = v13;
    int v190 = 16;
    uint64_t v192 = 0;
    unint64_t v172 = (__int16 *)v186;
    CMTime __p = 0;
    uint64_t v183 = (__int16 *)v186;
    int v184 = v13;
    int v185 = 16;
    __int16 v178 = v181;
    int v179 = v13;
    int v180 = 16;
  }
  else
  {
    v197 = (__int32 *)operator new(4 * v13);
    v193 = v197;
    int v195 = v13;
    __s = (__int32 *)v191;
    int v189 = v13;
    int v190 = 16;
    uint64_t v192 = 0;
    uint64_t v192 = operator new(4 * v13);
    Float64 v187 = 0;
    __s = (__int32 *)v192;
    int v190 = v13;
    uint64_t v183 = (__int16 *)v186;
    int v184 = v13;
    int v185 = 16;
    Float64 v187 = operator new(2 * v13);
    CMTime __p = 0;
    uint64_t v183 = (__int16 *)v187;
    int v185 = v13;
    __int16 v178 = v181;
    int v179 = v13;
    int v180 = 16;
    CMTime __p = operator new(10 * v13);
    __int16 v178 = __p;
    int v180 = v13;
    uint64_t v14 = __s;
    unint64_t v172 = v183;
    uint64_t v12 = *(void *)this;
  }
  if (*(int *)(v12 + 8) >= 1)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    while (1)
    {
      uint64_t v17 = (2 * v15) | 1;
      uint64_t v18 = *(void *)(v12 + 264);
      uint64_t v19 = *(unsigned int *)(v18 + 8 * v15);
      long long v20 = v193;
      if ((int)v19 >= 1)
      {
        uint64_t v21 = *(int *)(v18 + 4 * v17);
        __int16 v22 = (int *)(*(void *)(v12 + 288) + 4 * v21);
        BOOL v23 = (unsigned __int16 *)(*(void *)(v12 + 312) + 2 * v21);
        uint64_t v24 = *(void *)(v12 + 24);
        uint64_t v25 = *((void *)this + 3);
        int v26 = v193;
        uint64_t v27 = v19;
        do
        {
          uint64_t v28 = *v22++;
          int v29 = *(_DWORD *)(v24 + 8 * v28 + 4);
          LODWORD(v28) = *v23++;
          *v26++ = *(_DWORD *)(v25 + 4 * (v29 + (int)v28));
          --v27;
        }
        while (v27);
      }
      uint64_t v30 = *(void *)(v12 + 336);
      uint64_t v31 = *(int *)(v30 + 4 * v17);
      long long v32 = (int *)(*(void *)(v12 + 360) + 4 * v31);
      uint64_t v33 = *(unsigned int *)(v30 + 8 * v15);
      unint64_t v34 = *(unsigned __int16 *)(*(void *)(v12 + 432) + 2 * v15);
      if (v34)
      {
        if ((int)v19 >= 1 && (int)v33 >= 1)
        {
          uint64_t v42 = 0;
          uint64_t v43 = *(void *)(v12 + 384) + 2 * v31;
          do
          {
            uint64_t v44 = v32[v42];
            unsigned __int8 v45 = *(void **)this;
            uint64_t v46 = *(void *)(*(void *)this + 144);
            uint64_t v47 = *(unsigned int *)(v46 + 8 * v44);
            if ((int)v47 >= 2)
            {
              uint64_t v48 = 0;
              int v49 = 0;
              uint64_t v50 = *(int *)(v46 + 8 * v44 + 4);
              unsigned __int16 v51 = (int *)(v45[15] + 8 * v44);
              while (v47 != v48)
              {
                uint64_t v52 = *(int *)(v45[21] + 4 * v50 + 4 * v48);
                int v53 = 2 * v52;
                uint64_t v54 = v45[3];
                uint64_t v55 = *(int *)(v54 + 8 * v52 + 4);
                uint64_t v56 = v45[6] + 4 * v55;
                int v57 = *(_DWORD *)(v54 + 4 * v53);
                uint64_t v58 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                uint64_t v59 = *((void *)this + 3) + 4 * v55;
                uint64_t v60 = *v51;
                if (*(_WORD *)(v43 + 2 * v42) == (v60 != *(_DWORD *)(v56 + 4 * v58))) {
                  unsigned int v61 = *(unsigned __int16 *)(v45[24] + 2 * v50 + 2 * v48);
                }
                else {
                  unsigned int v61 = v58 + 1;
                }
                if (v61 == v57) {
                  unsigned int v62 = 0;
                }
                else {
                  unsigned int v62 = v61;
                }
                int v63 = *(_DWORD *)(v59 + 4 * v62);
                if (v48)
                {
                  ++v48;
                  if (v63 != v49)
                  {
                    *(_WORD *)&v176[2 * v60] = 1;
                    *(_WORD *)&v176[2 * v51[1]] = 1;
                    uint64_t v64 = *((void *)this + 6);
                    char v65 = *(unsigned char *)(v64 + v44) & 0xFD | (2 * (v15 == v60));
                    *(unsigned char *)(v64 + v44) = v65;
                    char v66 = v65 & 0xFB | (4 * (v15 == v51[1])) | 1;
                    *(unsigned char *)(v64 + v44) = v66;
                    *(unsigned char *)(v64 + v44) = v66 & 0xF7 | (8 * *((unsigned char *)this + 13));
                    break;
                  }
                }
                else
                {
                  uint64_t v48 = 1;
                  int v49 = v63;
                }
              }
            }
            ++v42;
          }
          while (v42 != v33);
        }
      }
      else if ((int)v19 > (v34 & 4) >> 2)
      {
        uint64_t v35 = (v34 >> 2) & 1;
        do
        {
          if (v35) {
            int v36 = v35;
          }
          else {
            int v36 = v19;
          }
          if (v20[v35] != v20[v36 - 1])
          {
            uint64_t v37 = v32[v35];
            uint64_t v38 = *(void *)(*(void *)this + 120) + 8 * v37;
            uint64_t v39 = *(unsigned int *)v38;
            *(_WORD *)&v176[2 * (int)v39] = 1;
            *(_WORD *)&v176[2 * *(int *)(v38 + 4)] = 1;
            uint64_t v40 = *((void *)this + 6);
            LOBYTE(v3re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(unsigned char *)(v40 + v37) & 0xFD | (2 * (v15 == v39));
            *(unsigned char *)(v40 + v37) = v39;
            LOBYTE(v38) = v39 & 0xFB | (4 * (v15 == *(_DWORD *)(v38 + 4))) | 1;
            *(unsigned char *)(v40 + v37) = v38;
            *(unsigned char *)(v40 + v37) = v38 & 0xF7 | (8 * *((unsigned char *)this + 13));
          }
          ++v35;
        }
        while (v19 != v35);
      }
      char v173 = v34;
      if ((v34 & 4) != 0 && !*(_WORD *)&v176[2 * v15])
      {
        if (*((unsigned char *)this + 13))
        {
          if ((int)v19 < 1) {
            goto LABEL_73;
          }
          *(_WORD *)&v176[2 * v15] = 1;
          if (v34)
          {
            if ((int)v33 >= 1)
            {
              do
              {
                uint64_t v82 = *v32++;
                uint64_t v81 = v82;
                if ((*(unsigned char *)(*(void *)(*(void *)this + 240) + v82) & 2) != 0) {
                  *(unsigned char *)(*((void *)this + 6) + v81) |= 8u;
                }
                --v33;
              }
              while (v33);
            }
          }
          else
          {
            *(unsigned char *)(*((void *)this + 6) + *v32) |= 8u;
            uint64_t v76 = v32[(int)v33 - 1];
            *(unsigned char *)(*((void *)this + 6) + v76) |= 8u;
          }
        }
        else
        {
          BOOL v77 = v167;
          if (v19 != 1) {
            BOOL v77 = 0;
          }
          if (v77)
          {
            *(_WORD *)&v176[2 * v15] = 1;
LABEL_73:
            *uint64_t v14 = *v20;
            *unint64_t v172 = 0;
            goto LABEL_74;
          }
        }
      }
      *uint64_t v14 = *v20;
      *unint64_t v172 = 0;
      if ((int)v19 > 1)
      {
        uint64_t v67 = v19 - 1;
        BOOL v68 = v20 + 1;
        int v69 = 1;
        BOOL v70 = v172 + 1;
        while (1)
        {
          __int32 v71 = *v68;
          if (*v68 == *(v68 - 1))
          {
            _WORD *v70 = *(v70 - 1);
          }
          else
          {
            _WORD *v70 = v69;
            if (v69 == 2)
            {
              if (*v14 == v71)
              {
LABEL_56:
                long long v72 = &v14[v69];
                __int16 v73 = wmemchr(v14, v71, v69);
                if (v73) {
                  unint64_t v74 = v73;
                }
                else {
                  unint64_t v74 = &v14[v69];
                }
                uint64_t v75 = (char *)v74 - (char *)v14;
                if (v69 == v75 >> 2)
                {
                  ++v69;
                  *long long v72 = *v68;
                }
                else
                {
                  _WORD *v70 = (unint64_t)v75 >> 2;
                }
                goto LABEL_63;
              }
              long long v14[2] = v71;
              int v69 = 3;
            }
            else
            {
              if (v69 != 1) {
                goto LABEL_56;
              }
              v14[1] = v71;
              int v69 = 2;
            }
          }
LABEL_63:
          ++v68;
          ++v70;
          if (!--v67) {
            goto LABEL_75;
          }
        }
      }
LABEL_74:
      int v69 = 1;
LABEL_75:
      if ((v173 & 1) != 0 && !*(_WORD *)&v176[2 * v15]) {
        *(_WORD *)&v176[2 * v15] = v69 > 1;
      }
      *(_WORD *)(*((void *)this + 9) + 2 * v15) = v69;
      *(_DWORD *)(*((void *)this + 12) + 4 * v15) = v16;
      uint64_t v12 = *(void *)this;
      if (v69 >= 2 && (int)v19 >= 1)
      {
        long long v78 = (_WORD *)(*v170 + 2 * *(int *)(*(void *)(v12 + 264) + 4 * ((2 * v15) | 1)));
        uint64_t v79 = v172;
        do
        {
          __int16 v80 = *v79++;
          *v78++ = v80;
          --v19;
        }
        while (v19);
      }
      v16 += v69;
      if (++v15 >= *(int *)(v12 + 8)) {
        goto LABEL_90;
      }
    }
  }
  int v16 = 0;
LABEL_90:
  unint64_t v83 = v16;
  std::vector<unsigned int>::resize((std::vector<int> *)this + 6, v16);
  unint64_t v84 = *((void *)this + 21);
  uint64_t v85 = (char *)*((void *)this + 22);
  long long v86 = &v85[-v84];
  if (v83 > (unint64_t)&v85[-v84])
  {
    uint64_t v87 = *((void *)this + 23);
    if (v87 - (uint64_t)v85 >= v83 - (unint64_t)&v85[-v84])
    {
      bzero(*((void **)this + 22), v83 - (void)&v85[-v84]);
      *((void *)this + 22) = v83 + v84;
      goto LABEL_108;
    }
    if ((v83 & 0x80000000) == 0)
    {
      unint64_t v88 = v87 - v84;
      uint64_t v89 = 2 * v88;
      if (2 * v88 <= v83) {
        uint64_t v89 = v83;
      }
      if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v90 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v90 = v89;
      }
      double v91 = (char *)operator new(v90);
      bzero(&v86[(void)v91], v83 - (void)&v85[-v84]);
      long long v92 = &v91[v83];
      uint64_t v93 = &v91[v90];
      if (v85 == (char *)v84)
      {
        double v91 = &v86[(void)v91];
      }
      else
      {
        uint64_t v94 = &v85[~v84];
        do
        {
          char v95 = *--v85;
          (v94--)[(void)v91] = v95;
        }
        while (v85 != (char *)v84);
        uint64_t v85 = (char *)v84;
      }
      *((void *)this + 21) = v91;
      *((void *)this + 22) = v92;
      *((void *)this + 23) = v93;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_108;
    }
LABEL_240:
    abort();
  }
  if (v83 < (unint64_t)&v85[-v84]) {
    *((void *)this + 22) = v84 + v83;
  }
LABEL_108:
  if (!*((unsigned char *)this + 13)) {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize((uint64_t)this + 192, v83);
  }
  uint64_t v96 = *(void *)this;
  if (*(int *)(*(void *)this + 8) >= 1)
  {
    uint64_t v97 = 0;
    while (1)
    {
      uint64_t v98 = (2 * v97) | 1;
      uint64_t v99 = *(void *)(v96 + 264);
      uint64_t v100 = *(int *)(v99 + 4 * v98);
      uint64_t v101 = *(void *)(v96 + 288);
      uint64_t v102 = *(unsigned int *)(v99 + 8 * v97);
      uint64_t v103 = *(void *)(v96 + 312);
      int v104 = (int)v102 < 1
           ? 0
           : *(_DWORD *)(*((void *)this + 3)
                       + 4
                       * (*(_DWORD *)(*(void *)(v96 + 24) + 8 * *(int *)(v101 + 4 * v100) + 4)
                        + *(unsigned __int16 *)(v103 + 2 * v100)));
      uint64_t v105 = *(unsigned __int16 *)(*((void *)this + 9) + 2 * v97);
      uint64_t v106 = *((void *)this + 12);
      v107 = (_DWORD *)(*((void *)this + 18) + 4 * *(int *)(v106 + 4 * v97));
      _DWORD *v107 = v104;
      if (*(_WORD *)&v176[2 * v97]) {
        break;
      }
LABEL_234:
      if (++v97 >= *(int *)(v96 + 8)) {
        goto LABEL_237;
      }
    }
    if (v105 >= 2 && (int)v102 >= 2)
    {
      uint64_t v108 = *(int *)(v99 + 4 * v98);
      uint64_t v109 = v102 - 1;
      uint64_t v110 = (unsigned __int16 *)(v103 + 2 * v100 + 2);
      v111 = (int *)(v101 + 4 * v100 + 4);
      uint64_t v112 = (unsigned __int16 *)(*v170 + 2 * v108 + 2);
      uint64_t v113 = 1;
      do
      {
        int v114 = *v112++;
        if (v113 == v114) {
          v107[v113++] = *(_DWORD *)(*((void *)this + 3)
        }
                                   + 4 * (*(_DWORD *)(*(void *)(v96 + 24) + 8 * *v111 + 4) + *v110));
        ++v110;
        ++v111;
        --v109;
      }
      while (v109);
    }
    uint64_t v174 = *((void *)this + 21);
    uint64_t v175 = *(int *)(v106 + 4 * v97);
    __int16 v115 = *(_WORD *)(*(void *)(v96 + 432) + 2 * v97);
    char v116 = 1;
    if (*((unsigned char *)this + 13) || ((v115 & 0x10) == 0 ? (BOOL v117 = (v115 & 1) == 0) : (BOOL v117 = 0), !v117))
    {
LABEL_137:
      int v119 = (unsigned __int16 *)v178;
      bzero(v178, 10 * v105);
      uint64_t v96 = *(void *)this;
      uint64_t v120 = 2 * (int)v97;
      uint64_t v121 = *(unsigned __int16 *)(*((void *)this + 9) + v120);
      if (*(_WORD *)(*(void *)(*(void *)this + 432) + v120))
      {
        if (*(_WORD *)(*((void *)this + 9) + 2 * (int)v97))
        {
          v137 = v119 + 2;
          do
          {
            *(v137 - 2) = 0;
            _WORD *v137 = 1;
            v137 += 5;
            --v121;
          }
          while (v121);
        }
        goto LABEL_183;
      }
      uint64_t v122 = *(void *)(v96 + 360);
      uint64_t v123 = *(void *)(v96 + 336);
      unint64_t v124 = (8 * ((unint64_t)(2 * (int)v97) >> 1)) | 4;
      uint64_t v125 = *(int *)(v123 + v124);
      v126 = (int *)(v122 + 4 * v125);
      uint64_t v127 = 8 * (int)v97;
      uint64_t v128 = *(unsigned int *)(v123 + v127);
      uint64_t v129 = *(void *)(v96 + 264);
      uint64_t v130 = *(int *)(v129 + v124);
      uint64_t v131 = *(unsigned int *)(v129 + v127);
      if (v121 == 1 && (int)v128 <= (int)v131)
      {
        *(_DWORD *)int v119 = 0;
        if ((int)v128 > 0)
        {
          int v132 = 0;
          uint64_t v133 = 0;
          uint64_t v134 = *((void *)this + 6);
          do
          {
            uint64_t v135 = v126[v133];
            if (*(unsigned char *)(v134 + v135))
            {
              if (v132)
              {
                v119[2] = 1;
                break;
              }
              *int v119 = v131;
              v119[1] = v133;
              int v132 = (unsigned __int16)v131;
            }
            else
            {
              char v136 = *(unsigned char *)(*(void *)(v96 + 240) + v135);
              if ((v136 & 4) != 0)
              {
                ++v119[4];
              }
              else if ((v136 & 8) != 0)
              {
                ++v119[3];
              }
            }
            ++v133;
          }
          while (v128 != v133);
        }
        *int v119 = v131;
        goto LABEL_183;
      }
      uint64_t v138 = *((void *)this + 15) + 2 * v130;
      *(_DWORD *)int v119 = 1;
      if ((int)v128 <= (int)v131 && !*(_WORD *)(v138 + 2 * ((int)v131 - 1)))
      {
        uint64_t v139 = *v126;
        if (*(unsigned char *)(*((void *)this + 6) + v139))
        {
          uint64_t v141 = v119 + 2;
          goto LABEL_166;
        }
        char v140 = *(unsigned char *)(*(void *)(v96 + 240) + v139);
        if ((v140 & 4) != 0)
        {
          uint64_t v141 = v119 + 4;
          goto LABEL_166;
        }
        if ((v140 & 8) != 0)
        {
          uint64_t v141 = v119 + 3;
LABEL_166:
          ++*v141;
        }
      }
      if ((int)v131 >= 2)
      {
        uint64_t v142 = 0;
        uint64_t v143 = v122 + 4 * v125 + 4;
        do
        {
          uint64_t v144 = (unsigned __int16 *)(v138 + 2 * v142);
          int v145 = v144[1];
          if (v145 == *v144)
          {
            uint64_t v146 = *(int *)(v143 + 4 * v142);
            if (*(unsigned char *)(*((void *)this + 6) + v146))
            {
              ++v119[5 * v144[1] + 2];
            }
            else
            {
              char v147 = *(unsigned char *)(*(void *)(v96 + 240) + v146);
              if ((v147 & 4) != 0)
              {
                ++v119[5 * v144[1] + 4];
              }
              else if ((v147 & 8) != 0)
              {
                ++v119[5 * v144[1] + 3];
              }
            }
          }
          else
          {
            if (v119[5 * v144[1]])
            {
              ++v119[5 * v144[1] + 2];
              int v145 = v144[1];
            }
            v119[5 * v145 + 1] = v142 + 1;
          }
          ++v119[5 * v144[1]];
          ++v142;
        }
        while (v131 - 1 != v142);
      }
      if (!*(_WORD *)(v138 + 2 * ((int)v131 - 1)) && (int)v128 <= (int)v131) {
        --v119[2];
      }
LABEL_183:
      if ((v116 & 1) == 0 && v105 == 2 && *((unsigned char *)this + 14))
      {
        char v116 = v119[4] || v119[9] || v119[2] || v119[7] != 0;
        if (v171 == 3)
        {
          int v148 = *v119;
          if (v148 != 1) {
            LOBYTE(v1re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v119[5] == 1;
          }
          v116 |= v148;
        }
        if ((v119[3] != 0) != (v119[8] != 0)) {
          char v149 = 48;
        }
        else {
          char v149 = 8;
        }
      }
      else
      {
        if (!v105) {
          goto LABEL_234;
        }
        char v149 = 8;
      }
      CMTime v150 = (unsigned char *)(v174 + v175);
      uint64_t v151 = 2;
      while (1)
      {
        *CMTime v150 = 1;
        if (v119[2])
        {
          *CMTime v150 = 5;
          goto LABEL_202;
        }
        if ((v116 & 1) != 0 || v119[4]) {
          break;
        }
        int v158 = *v119;
        BOOL v153 = v158 == 1;
        BOOL v159 = v158 == 1 && v171 != 0;
        int v156 = 3;
        if (v158 == a2) {
          unsigned int v154 = 1;
        }
        else {
          unsigned int v154 = 3;
        }
        if (v159) {
          goto LABEL_209;
        }
        int v155 = 0;
LABEL_210:
        if (v153) {
          unsigned int v154 = v156;
        }
        *CMTime v150 = v154;
        unsigned int v157 = v154 | ((v119[4] != 0) << 6);
        *CMTime v150 = v157;
        if (v119[4])
        {
          LOBYTE(v157) = v157 | ((*v119 - v119[4] > 1) << 7);
          *CMTime v150 = v157;
          if ((v155 & 1) == 0) {
            goto LABEL_226;
          }
        }
        else
        {
          if (!v155)
          {
            unsigned int v157 = v157 & 0xFFFFFF7F | (((v154 >> 1) & 1) << 7);
            *CMTime v150 = v157;
LABEL_226:
            if (v119[3] | v115 & 0x20) {
              char v160 = 16;
            }
            else {
              char v160 = v149;
            }
            *CMTime v150 = v160 | v157;
            if (!*((unsigned char *)this + 13))
            {
              uint64_t v161 = *(int *)(*((void *)this + 12) + 4 * v97);
              uint64_t v162 = *((void *)this + 24);
              uint64_t v163 = v162 + 4 * v161;
              int v164 = v119[1];
              *(_WORD *)(v163 + v151 - 2) = v164;
              __int16 v165 = *v119 + v164;
              if (v151 == 2 && v164) {
                *(_WORD *)(v162 + 4 * v161 + 2) = v165 + ~(_WORD)v102;
              }
              else {
                *(_WORD *)(v163 + v151) = v165 - 1;
              }
            }
            goto LABEL_202;
          }
          *CMTime v150 = v157 | ((*v119 > 1u) << 7);
        }
LABEL_202:
        v151 += 4;
        ++v150;
        v119 += 5;
        if (!--v105)
        {
          uint64_t v96 = *(void *)this;
          goto LABEL_234;
        }
      }
      int v152 = *v119;
      BOOL v153 = v152 == 1;
      if (v152 == a2) {
        unsigned int v154 = 1;
      }
      else {
        unsigned int v154 = 3;
      }
LABEL_209:
      int v155 = 1;
      int v156 = 1;
      goto LABEL_210;
    }
    if (*((unsigned char *)this + 14))
    {
      char v116 = v105 > 2;
      char v118 = !v166;
      if (v105 > 2) {
        char v118 = 1;
      }
      if (v118) {
        goto LABEL_137;
      }
      if (v105 != 1)
      {
        char v116 = 0;
        goto LABEL_137;
      }
    }
    else
    {
      char v116 = 0;
      if (v168 > 2 || v105 != 1) {
        goto LABEL_137;
      }
    }
    char v116 = (v115 & 4) == 0;
    goto LABEL_137;
  }
LABEL_237:
  operator delete(__p);
  operator delete(v187);
  operator delete(v192);
  operator delete(v197);
  if (v176) {
    operator delete(v176);
  }
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(void *this, int a2, unsigned int a3, int *a4)
{
  uint64_t v4 = *(int *)(*(void *)(*this + 264) + 8 * a2 + 4);
  uint64_t v5 = *(void *)(*this + 288) + 4 * v4;
  uint64_t v6 = *(void *)(*this + 312) + 2 * v4;
  BOOL v7 = (unsigned __int16 *)(this[24] + 4 * *(int *)(this[12] + 4 * a2) + 4 * a3);
  uint64_t v8 = *v7;
  uint64_t v9 = *(int *)(v5 + 4 * v8);
  uint64_t v10 = v7[1];
  uint64_t v11 = *(void *)(*this + 24);
  int v12 = *(_DWORD *)(v11 + 8 * v9);
  uint64_t v13 = *(int *)(v11 + 4 * (int)((2 * v9) | 1));
  uint64_t v14 = this[3];
  uint64_t v15 = *(int *)(v5 + 4 * v10);
  int v16 = *(_DWORD *)(v11 + 8 * v15);
  uint64_t v17 = v14 + 4 * *(int *)(v11 + 4 * (int)((2 * v15) | 1));
  int v18 = *(unsigned __int16 *)(v6 + 2 * v8);
  int v19 = *(unsigned __int16 *)(v6 + 2 * v10);
  if (!v19) {
    int v19 = v16;
  }
  if (v12 - 1 == v18) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = v18 + 1;
  }
  *a4 = *(_DWORD *)(v14 + 4 * v13 + 4 * v20);
  a4[1] = *(_DWORD *)(v17 + 4 * (v19 - 1));
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromVertexFaceSiblings(void *this)
{
  uint64_t v1 = *this;
  unint64_t v2 = *(int **)(*this + 48);
  unint64_t v3 = *(void *)(*this + 56) - (void)v2;
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v4 = this[12];
    uint64_t v5 = (_DWORD *)this[3];
    uint64_t v6 = (v3 >> 2);
    do
    {
      uint64_t v7 = *v2++;
      *v5++ = *(_DWORD *)(v4 + 4 * v7);
      --v6;
    }
    while (v6);
  }
  int v8 = *(_DWORD *)(v1 + 8);
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = this[9];
    do
    {
      if (*(unsigned __int16 *)(v10 + 2 * v9) >= 2u)
      {
        uint64_t v11 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v9);
        uint64_t v12 = *v11;
        if ((int)v12 >= 1)
        {
          uint64_t v13 = (int)v11[1];
          uint64_t v14 = (int *)(*(void *)(v1 + 288) + 4 * v13);
          uint64_t v15 = (unsigned __int16 *)(*(void *)(v1 + 312) + 2 * v13);
          int v16 = (unsigned __int16 *)(this[15] + 2 * v13);
          do
          {
            int v18 = *v16++;
            int v17 = v18;
            if (v18)
            {
              int v19 = *(_DWORD *)(*(void *)(v1 + 24) + 8 * *v14 + 4) + *v15;
              *(_DWORD *)(this[3] + 4 * v19) += v17;
            }
            ++v15;
            ++v14;
            --v12;
          }
          while (v12);
          int v8 = *(_DWORD *)(v1 + 8);
        }
      }
      ++v9;
    }
    while (v9 < v8);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(void *this, int a2, int a3, int *a4)
{
  uint64_t v4 = *this;
  uint64_t v5 = (int *)(*(void *)(*this + 120) + 8 * a2);
  uint64_t v6 = *v5;
  if (*(unsigned __int16 *)(this[9] + 2 * v5[1]) + *(unsigned __int16 *)(this[9] + 2 * v6) < 3)
  {
    if (*(int *)(v4 + 12) < 1)
    {
      uint64_t v19 = this[12];
      uint64_t v20 = this[18];
      *a4 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v6));
      int v18 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 4 * v5[1]));
    }
    else
    {
      uint64_t v17 = this[12];
      *a4 = *(_DWORD *)(v17 + 4 * v6);
      int v18 = *(_DWORD *)(v17 + 4 * v5[1]);
    }
    a4[1] = v18;
  }
  else
  {
    uint64_t v7 = *(int *)(*(void *)(v4 + 144) + ((8 * a2) | 4));
    uint64_t v8 = *(int *)(*(void *)(v4 + 168) + 4 * v7 + 4 * a3);
    uint64_t v9 = *(unsigned __int16 *)(*(void *)(v4 + 192) + 2 * v7 + 2 * a3);
    uint64_t v10 = *(void *)(v4 + 24);
    int v11 = *(_DWORD *)(v10 + 8 * v8);
    int v12 = (2 * v8) | 1;
    uint64_t v13 = this[3] + 4 * *(int *)(v10 + 4 * v12);
    int v14 = *(_DWORD *)(v13 + 4 * v9);
    *a4 = v14;
    if ((int)v9 + 1 < v11) {
      unsigned int v15 = v9 + 1;
    }
    else {
      unsigned int v15 = 0;
    }
    int v16 = *(_DWORD *)(v13 + 4 * v15);
    a4[1] = v16;
    if (*v5 != *(_DWORD *)(*(void *)(v4 + 48) + 4 * *(int *)(v10 + 4 * v12) + 4 * v9))
    {
      *a4 = v16;
      a4[1] = v14;
    }
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(void *this, int a2, int *a3)
{
  uint64_t v3 = *this;
  uint64_t v4 = *(void *)(*this + 336);
  uint64_t v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
    uint64_t v7 = *(int *)(v4 + v6);
    uint64_t v8 = (int *)(*(void *)(v3 + 360) + 4 * v7);
    uint64_t v9 = (unsigned __int16 *)(*(void *)(v3 + 384) + 2 * v7);
    uint64_t v10 = *(int *)(*(void *)(v3 + 264) + v6);
    uint64_t v11 = *(void *)(v3 + 288) + 4 * v10;
    uint64_t v12 = *(void *)(v3 + 312) + 2 * v10;
    __int16 v13 = *(_WORD *)(*(void *)(v3 + 432) + 2 * a2);
    int v14 = *(_DWORD *)(v3 + 12);
    uint64_t v15 = *(void *)(v3 + 120);
    uint64_t v16 = (v5 - 1);
    uint64_t v17 = v16 - 1;
    uint64_t v18 = this[9];
    uint64_t v19 = v16;
    uint64_t v20 = (int *)v11;
    uint64_t v21 = (unsigned __int16 *)v12;
    __int16 v22 = a3;
    do
    {
      uint64_t v24 = *v8++;
      int v23 = v24;
      uint64_t v25 = v15 + 8 * v24;
      LODWORD(v24) = *v9++;
      uint64_t v26 = *(int *)(v25 + 4 * (v24 == 0));
      if (*(_WORD *)(v18 + 2 * v26) == 1)
      {
        uint64_t v27 = (int *)(this[12] + 4 * v26);
        if (!v14) {
          uint64_t v27 = (int *)(this[18] + 4 * *v27);
        }
        int v28 = *v27;
      }
      else if (v13)
      {
        uint64_t v34 = *(int *)(*(void *)(v3 + 144) + 4 * ((2 * v23) | 1));
        uint64_t v35 = *(int *)(*(void *)(v3 + 168) + 4 * v34);
        uint64_t v36 = *(unsigned __int16 *)(*(void *)(v3 + 192) + 2 * v34);
        uint64_t v37 = *(void *)(v3 + 24);
        uint64_t v38 = *(int *)(v37 + 8 * v35 + 4);
        uint64_t v39 = *(void *)(v3 + 48) + 4 * v38;
        uint64_t v40 = this[3] + 4 * v38;
        if (v26 == *(_DWORD *)(v39 + 4 * v36))
        {
          int v28 = *(_DWORD *)(v40 + 4 * v36);
        }
        else
        {
          if (*(_DWORD *)(v37 + 8 * v35) - 1 == v36) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = v36 + 1;
          }
          int v28 = *(_DWORD *)(v40 + 4 * v47);
        }
      }
      else
      {
        if ((v13 & 4) != 0 && !v19)
        {
          uint64_t v29 = *(int *)(v11 + 4 * v17);
          uint64_t v30 = *(void *)(v3 + 24);
          int v31 = *(_DWORD *)(v30 + 8 * v29);
          uint64_t v32 = this[3] + 4 * *(int *)(v30 + 4 * (int)((2 * v29) | 1));
          int v33 = *(unsigned __int16 *)(v12 + 2 * v17);
          if (!*(_WORD *)(v12 + 2 * v17)) {
            int v33 = v31;
          }
          a3[v16] = *(_DWORD *)(v32 + 4 * (v33 - 1));
          goto LABEL_24;
        }
        uint64_t v41 = *v20;
        uint64_t v42 = *(void *)(v3 + 24);
        int v43 = *(_DWORD *)(v42 + 8 * v41);
        uint64_t v44 = this[3] + 4 * *(int *)(v42 + 4 * (int)((2 * v41) | 1));
        int v45 = *v21;
        if (v43 - 1 == v45) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = v45 + 1;
        }
        int v28 = *(_DWORD *)(v44 + 4 * v46);
      }
      *__int16 v22 = v28;
LABEL_24:
      ++v22;
      ++v21;
      ++v20;
      --v19;
      --v5;
    }
    while (v5);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(void *result, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*result + 24);
  uint64_t v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(int *)(v3 + 8 * a2 + 4);
    uint64_t v7 = result[3] + 4 * v6;
    uint64_t v8 = *(void *)(*result + 48) + 4 * v6;
    do
    {
      int v9 = *(_DWORD *)(v7 + 4 * v5);
      if (*(int *)(*result + 12) <= 0)
      {
        uint64_t v10 = *(int *)(result[12] + 4 * *(int *)(v8 + 4 * v5));
        int v9 = v10 - 1;
        uint64_t v11 = (int *)(result[18] + 4 * v10);
        do
        {
          int v12 = *v11++;
          ++v9;
        }
        while (v12 != *(_DWORD *)(v7 + 4 * v5));
      }
      *(unsigned char *)(a3 + v5++) = *(unsigned char *)(result[21] + v9);
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *this, int a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 24);
  uint64_t v4 = *(unsigned int *)(v3 + 8 * a2);
  if ((int)v4 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  LODWORD(v6) = 0;
  uint64_t v7 = *(int *)(v3 + 8 * a2 + 4);
  uint64_t v8 = *((void *)this + 3) + 4 * v7;
  uint64_t v9 = *(void *)(v2 + 48) + 4 * v7;
  int v10 = *(_DWORD *)(v2 + 12);
  do
  {
    int v11 = *(_DWORD *)(v8 + 4 * v5);
    if (v10 <= 0)
    {
      uint64_t v12 = *(int *)(*((void *)this + 12) + 4 * *(int *)(v9 + 4 * v5));
      int v11 = v12 - 1;
      __int16 v13 = (int *)(*((void *)this + 18) + 4 * v12);
      do
      {
        int v14 = *v13++;
        ++v11;
      }
      while (v14 != *(_DWORD *)(v8 + 4 * v5));
    }
    uint64_t v6 = *(unsigned __int8 *)(*((void *)this + 21) + v11) | v6;
    ++v5;
  }
  while (v5 != v4);
  return v6;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      abort();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      abort();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    uint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--int v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<unsigned short>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 1)
  {
    if (a2)
    {
      uint64_t v16 = 2 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    uint64_t v11 = a2 + (v10 >> 1);
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = v10 >> 1;
    unint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 > v11) {
      uint64_t v11 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v18 = &v15[2 * v12];
    uint64_t v19 = &v18[2 * a2];
    uint64_t v20 = 2 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_WORD *)uint64_t v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    __int16 v22 = &v15[2 * v14];
    int v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 2)
    {
      __int16 v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 2);
    if (v9 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 1 > v9) {
      unint64_t v9 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v10];
    uint64_t v15 = &v13[4 * v12];
    bzero(v14, 4 * a2);
    uint64_t v16 = &v14[4 * a2];
    char v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v14 - 1) = v19;
        v14 -= 4;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(OpenSubdiv::v3_1_1::Sdc *this)
{
  {
    OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable = (uint64_t)"bilinear";
    *(_OWORD *)algn_2687A1950 = xmmword_234415BB0;
    qword_2687A1960 = (uint64_t)"catmark";
    xmmword_2687A1968 = xmmword_234415BC0;
    qword_2687A1978 = (uint64_t)"loop";
    unk_2687A1980 = xmmword_234415BD0;
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTable::StencilTable(uint64_t a1, int a2, uint64_t *a3, void *a4, void *a5, void *a6, int a7, unint64_t a8)
{
  *(void *)a1 = &unk_26E721B98;
  *(_DWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
  *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
    0,
    0);
  return a1;
}

void OpenSubdiv::v3_1_1::Far::anonymous namespace'::copyStencilData(int a1, int a2, unint64_t a3, uint64_t *a4, std::vector<int> *this, void *a6, std::vector<int> *a7, void *a8, std::vector<int> *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  unsigned __int8 v33 = a2;
  if (a2) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = a3;
  }
  std::vector<unsigned int>::resize(this, (a4[1] - *a4) >> 2);
  uint64_t v35 = a6;
  uint64_t v39 = a7;
  std::vector<unsigned int>::resize(a7, (uint64_t)(a6[1] - *a6) >> 2);
  uint64_t v36 = a8;
  std::vector<unsigned int>::resize(a9, (uint64_t)(a8[1] - *a8) >> 2);
  std::vector<float>::resize((uint64_t)a11, (uint64_t)(a10[1] - *a10) >> 2);
  if (a13) {
    std::vector<float>::resize((uint64_t)a13, (uint64_t)(a12[1] - *a12) >> 2);
  }
  if (a15) {
    std::vector<float>::resize((uint64_t)a15, (uint64_t)(a14[1] - *a14) >> 2);
  }
  if (a17) {
    std::vector<float>::resize((uint64_t)a17, (uint64_t)(a16[1] - *a16) >> 2);
  }
  if (a19) {
    std::vector<float>::resize((uint64_t)a19, (uint64_t)(a18[1] - *a18) >> 2);
  }
  if (a21) {
    std::vector<float>::resize((uint64_t)a21, (uint64_t)(a20[1] - *a20) >> 2);
  }
  uint64_t v25 = *a4;
  if (v24 >= (a4[1] - *a4) >> 2)
  {
    std::vector<int>::size_type v27 = 0;
    std::vector<int>::size_type v26 = 0;
  }
  else
  {
    std::vector<int>::size_type v26 = 0;
    std::vector<int>::size_type v27 = 0;
    int v28 = 0;
    do
    {
      if (((v24 == a1) & v33) != 0) {
        unint64_t v29 = a3;
      }
      else {
        unint64_t v29 = v24;
      }
      uint64_t v30 = *(int *)(*v35 + 4 * v29);
      uint64_t v31 = *(int *)(v25 + 4 * v29);
      this->__begin_[v27] = v28;
      v39->__begin_[v27] = v30;
      memcpy(&a9->__begin_[v28], (const void *)(*v36 + 4 * v31), 4 * v30);
      memcpy((void *)(*a11 + 4 * v28), (const void *)(*a10 + 4 * v31), 4 * v30);
      if (a13 && *a13 != a13[1]) {
        memcpy((void *)(*a13 + 4 * v28), (const void *)(*a12 + 4 * v31), 4 * v30);
      }
      if (a15 && *a15 != a15[1]) {
        memcpy((void *)(*a15 + 4 * v28), (const void *)(*a14 + 4 * v31), 4 * v30);
      }
      if (a17 && *a17 != a17[1]) {
        memcpy((void *)(*a17 + 4 * v28), (const void *)(*a16 + 4 * v31), 4 * v30);
      }
      if (a19 && *a19 != a19[1]) {
        memcpy((void *)(*a19 + 4 * v28), (const void *)(*a18 + 4 * v31), 4 * v30);
      }
      if (a21 && *a21 != a21[1]) {
        memcpy((void *)(*a21 + 4 * v28), (const void *)(*a20 + 4 * v31), 4 * v30);
      }
      v28 += v30;
      ++v27;
      v26 += v30;
      unint64_t v24 = v29 + 1;
      uint64_t v25 = *a4;
    }
    while (v29 + 1 < (a4[1] - *a4) >> 2);
  }
  std::vector<unsigned int>::resize(this, v27);
  std::vector<unsigned int>::resize(v39, v27);
  std::vector<unsigned int>::resize(a9, v26);
  if (a13 && *a13 != a13[1]) {
    std::vector<float>::resize((uint64_t)a13, v26);
  }
  if (a15 && *a15 != a15[1]) {
    std::vector<float>::resize((uint64_t)a15, v26);
  }
  if (a17 && *a17 != a17[1]) {
    std::vector<float>::resize((uint64_t)a17, v26);
  }
  if (a19 && *a19 != a19[1]) {
    std::vector<float>::resize((uint64_t)a19, v26);
  }
  if (a21 && *a21 != a21[1])
  {
    std::vector<float>::resize((uint64_t)a21, v26);
  }
}

void OpenSubdiv::v3_1_1::Far::StencilTable::~StencilTable(OpenSubdiv::v3_1_1::Far::StencilTable *this)
{
  OpenSubdiv::v3_1_1::Far::StencilTable::~StencilTable(this);
  JUMPOUT(0x237DBCBD0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(void *)this = &unk_26E721B98;
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 5);
  if (v4)
  {
    *((void *)this + 6) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::~StencilBuilder(OpenSubdiv::v3_1_1::Far::internal::WeightTable **this)
{
  uint64_t v1 = *this;
  if (v1)
  {
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::~WeightTable(v1);
    MEMORY[0x237DBCBD0]();
  }
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, int a3, void *a4, float a5)
{
  if (*(_DWORD *)(a1 + 248) <= a2)
  {
    uint64_t v11 = *(int *)(*(void *)(a1 + 216) + 4 * a2);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = *(int *)(*(void *)(a1 + 192) + 4 * a2);
      uint64_t v13 = v12 + v11;
      do
      {
        OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, *(_DWORD *)(*(void *)(a1 + 24) + 4 * v12), a3, *(_DWORD *)(a1 + 244), *(_DWORD *)(a1 + 240), a4, *(float *)(a4[6] + 4 * v12), a5);
        ++v12;
      }
      while (v12 < v13);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 240);
    int v9 = *(_DWORD *)(a1 + 244);
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, a2, a3, v9, v10, a4, a5, 1.0);
  }
}

void OpenSubdiv::v3_1_1::Far::internal::StencilBuilder::Index::AddWithWeight(void ***a1, unsigned int **a2, float a3)
{
  if (a3 != 0.0)
  {
    uint64_t v3 = **a2;
    if ((int)v3 >= 1)
    {
      uint64_t v6 = (int *)a2[1];
      uint64_t v7 = (float *)a2[2];
      do
      {
        if (*v7 != 0.0) {
          OpenSubdiv::v3_1_1::Far::internal::WeightTable::AddWithWeight<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>((uint64_t)**a1, *v6, *((_DWORD *)a1 + 2), **a1, *v7 * a3);
        }
        ++v6;
        ++v7;
        --v3;
      }
      while (v3);
    }
  }
}

OpenSubdiv::v3_1_1::Far::internal::WeightTable *OpenSubdiv::v3_1_1::Far::internal::WeightTable::WeightTable(OpenSubdiv::v3_1_1::Far::internal::WeightTable *this, int a2, int a3, char a4)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v7 = (void **)((char *)this + 48);
  *((_OWORD *)this + 12) = 0u;
  uint64_t v8 = (std::vector<int> *)((char *)this + 192);
  *((void *)this + 3re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  int v9 = 2 * a2;
  if (a2 >= 2621440) {
    int v9 = 5242880;
  }
  int v10 = (std::vector<int> *)((char *)this + 24);
  *((_OWORD *)this + 8) = 0uLL;
  *((_OWORD *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0uLL;
  *((_OWORD *)this + 6) = 0uLL;
  *((_OWORD *)this + 7) = 0uLL;
  *((_OWORD *)this + 4) = 0uLL;
  *((_OWORD *)this + 5) = 0uLL;
  *((_OWORD *)this + 1) = 0uLL;
  *((_OWORD *)this + 2) = 0uLL;
  *(_OWORD *)this = 0uLL;
  *((_DWORD *)this + 62) = a2;
  if (v9 <= a2) {
    int v9 = a2;
  }
  std::vector<int>::size_type v11 = v9;
  *((unsigned char *)this + 252) = a4;
  std::vector<int>::reserve((std::vector<int> *)this, v9);
  std::vector<int>::reserve(v10, v11);
  std::vector<float>::reserve(v7, v11);
  if (a3)
  {
    std::vector<unsigned int>::resize(v10, a2);
    std::vector<float>::resize((uint64_t)v7, a2);
    std::vector<unsigned int>::resize((std::vector<int> *)this, a2);
    std::vector<unsigned int>::resize(v8, a2);
    std::vector<unsigned int>::resize((std::vector<int> *)this + 9, a2);
    uint64_t v12 = *((void *)this + 3);
    if (a2 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *((void *)this + 24);
      uint64_t v15 = *((void *)this + 27);
      uint64_t v16 = *(void *)this;
      uint64_t v17 = *((void *)this + 6);
      do
      {
        *(_DWORD *)(v14 + 4 * v13) = v13;
        *(_DWORD *)(v15 + 4 * v13) = 1;
        *(_DWORD *)(v16 + 4 * v13) = v13;
        *(_DWORD *)(v12 + 4 * v13) = v13;
        *(_DWORD *)(v17 + 4 * v13++) = 1065353216;
      }
      while (a2 != v13);
    }
    unint64_t v18 = (unint64_t)(*((void *)this + 4) - v12) >> 2;
    *((_DWORD *)this + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v18;
    *((_DWORD *)this + 61) = v18 - 1;
  }
  return this;
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int64_t value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      abort();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    int v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::~WeightTable(OpenSubdiv::v3_1_1::Far::internal::WeightTable *this)
{
  unint64_t v2 = (void *)*((void *)this + 27);
  if (v2)
  {
    *((void *)this + 28) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    *((void *)this + 25) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 21);
  if (v4)
  {
    *((void *)this + 22) = v4;
    operator delete(v4);
  }
  int64_t v5 = (void *)*((void *)this + 18);
  if (v5)
  {
    *((void *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 15);
  if (v6)
  {
    *((void *)this + 16) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 6);
  if (v9)
  {
    *((void *)this + 7) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 3);
  if (v10)
  {
    *((void *)this + 4) = v10;
    operator delete(v10);
  }
  std::vector<int>::size_type v11 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v11;
    operator delete(v11);
  }
}

float OpenSubdiv::v3_1_1::Far::internal::WeightTable::merge<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, int a3, int a4, int a5, void *a6, float a7, float a8)
{
  if (*(unsigned char *)(a1 + 252)
    && *(void *)a1 != *(void *)(a1 + 8)
    && a4 < a5
    && *(_DWORD *)(*(void *)a1 + 4 * a4) == a3)
  {
    uint64_t v8 = a4;
    while (*(_DWORD *)(*(void *)(a1 + 24) + 4 * v8) != a2)
    {
      if (a5 == ++v8) {
        goto LABEL_8;
      }
    }
    uint64_t v10 = a6[6];
    float result = (float)(a7 * a8) + *(float *)(v10 + 4 * v8);
    *(float *)(v10 + 4 * v8) = result;
  }
  else
  {
LABEL_8:
    OpenSubdiv::v3_1_1::Far::internal::WeightTable::add<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(a1, a2, a3, a6, a7 * a8);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::internal::WeightTable::add<float,OpenSubdiv::v3_1_1::Far::internal::WeightTable::ScalarAccumulator>(uint64_t a1, int a2, int a3, void *a4, float a5)
{
  uint64_t v10 = *(int **)(a1 + 8);
  if (*(int **)a1 == v10 || *(v10 - 1) != a3)
  {
    uint64_t v14 = *(void *)(a1 + 192);
    int v13 = (std::vector<int> *)(a1 + 192);
    if ((int)((unint64_t)(*(void *)(a1 + 200) - v14) >> 2) <= a3)
    {
      std::vector<int>::size_type v15 = a3 + 1;
      std::vector<unsigned int>::resize(v13, v15);
      std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 216), v15);
      uint64_t v14 = *(void *)(a1 + 192);
      uint64_t v10 = *(int **)(a1 + 8);
    }
    uint64_t v16 = (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2;
    uint64_t v12 = a3;
    *(_DWORD *)(v14 + 4 * a3) = v16;
    uint64_t v11 = *(void *)(a1 + 216);
    *(_DWORD *)(v11 + 4 * a3) = 0;
    *(_DWORD *)(a1 + 244) = v16;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 216);
    uint64_t v12 = a3;
  }
  unint64_t v17 = *(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 240);
  ++*(_DWORD *)(v11 + 4 * v12);
  if ((unint64_t)v10 >= v17)
  {
    int v19 = *(int **)a1;
    uint64_t v20 = ((uint64_t)v10 - *(void *)a1) >> 2;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62) {
      goto LABEL_56;
    }
    unint64_t v22 = v17 - (void)v19;
    unint64_t v23 = (uint64_t)(v17 - (void)v19) >> 1;
    if (v23 > v21) {
      unint64_t v21 = v23;
    }
    if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v21;
    }
    if (v24)
    {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 16, v24);
      int v19 = *(int **)a1;
      uint64_t v10 = *(int **)(a1 + 8);
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::vector<int>::size_type v26 = (int *)&v25[4 * v20];
    std::vector<int>::size_type v27 = &v25[4 * v24];
    *std::vector<int>::size_type v26 = a3;
    unint64_t v18 = v26 + 1;
    while (v10 != v19)
    {
      int v28 = *--v10;
      *--std::vector<int>::size_type v26 = v28;
    }
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = v18;
    *(void *)(a1 + 16) = v27;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *uint64_t v10 = a3;
    unint64_t v18 = v10 + 1;
  }
  unint64_t v29 = *(void *)(a1 + 40);
  *(void *)(a1 + 8) = v18;
  uint64_t v30 = *(char **)(a1 + 32);
  if ((unint64_t)v30 >= v29)
  {
    uint64_t v32 = *(char **)(a1 + 24);
    uint64_t v33 = (v30 - v32) >> 2;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 62) {
      goto LABEL_56;
    }
    uint64_t v35 = v29 - (void)v32;
    if (v35 >> 1 > v34) {
      unint64_t v34 = v35 >> 1;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      uint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 40, v36);
      uint64_t v32 = *(char **)(a1 + 24);
      uint64_t v30 = *(char **)(a1 + 32);
    }
    else
    {
      uint64_t v37 = 0;
    }
    uint64_t v38 = &v37[4 * v33];
    uint64_t v39 = &v37[4 * v36];
    *(_DWORD *)uint64_t v38 = a2;
    uint64_t v31 = v38 + 4;
    while (v30 != v32)
    {
      int v40 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v38 - 1) = v40;
      v38 -= 4;
    }
    *(void *)(a1 + 24) = v38;
    *(void *)(a1 + 32) = v31;
    *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v39;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v30 = a2;
    uint64_t v31 = v30 + 4;
  }
  *(void *)(a1 + 32) = v31;
  unint64_t v41 = a4[8];
  uint64_t v42 = (float *)a4[7];
  if ((unint64_t)v42 < v41)
  {
    *uint64_t v42 = a5;
    int v43 = v42 + 1;
    goto LABEL_55;
  }
  uint64_t v44 = (float *)a4[6];
  uint64_t v45 = v42 - v44;
  unint64_t v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 62) {
LABEL_56:
  }
    abort();
  uint64_t v47 = v41 - (void)v44;
  if (v47 >> 1 > v46) {
    unint64_t v46 = v47 >> 1;
  }
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v48 = v46;
  }
  if (v48)
  {
    int v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 8), v48);
    uint64_t v44 = (float *)a4[6];
    uint64_t v42 = (float *)a4[7];
  }
  else
  {
    int v49 = 0;
  }
  uint64_t v50 = (float *)&v49[4 * v45];
  unsigned __int16 v51 = &v49[4 * v48];
  *uint64_t v50 = a5;
  int v43 = v50 + 1;
  while (v42 != v44)
  {
    int v52 = *((_DWORD *)v42-- - 1);
    *((_DWORD *)v50-- - 1) = v52;
  }
  a4[6] = v50;
  a4[7] = v43;
  a4[8] = v51;
  if (v44) {
    operator delete(v44);
  }
LABEL_55:
  a4[7] = v43;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
  *(void *)(a1 + 32) = 0;
  OpenSubdiv::v3_1_1::Far::PtexIndices::initializePtexIndices((OpenSubdiv::v3_1_1::Sdc *)(a1 + 32), a2);
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 24) = 1;
  if ((*(unsigned char *)(a1 + 9) & 0x10) != 0)
  {
    int64_t v5 = (std::vector<int> *)(a1 + 144);
    uint64_t v6 = *(int *)(a1 + 12);
    if (v6 == -1)
    {
      std::vector<unsigned int>::resize(v5, (int)((uint64_t)(*(void *)(**(void **)(*(void *)a1 + 40) + 464)- *(void *)(**(void **)(*(void *)a1 + 40) + 456)) >> 3));
      uint64_t v10 = *(void *)(a1 + 144);
      unint64_t v11 = *(void *)(a1 + 152) - v10;
      if ((int)(v11 >> 2) >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (v11 >> 2);
        do
        {
          *(_DWORD *)(v10 + 4 * v12) = v12;
          ++v12;
        }
        while (v13 != v12);
      }
    }
    else
    {
      if (v6)
      {
        if ((v6 & 0x80000000) != 0) {
          abort();
        }
        uint64_t v7 = *(const void **)(a1 + 16);
        std::vector<float>::__vallocate[abi:nn180100](v5, *(int *)(a1 + 12));
        int v9 = (void *)(a1 + 152);
        uint64_t v8 = *(char **)(a1 + 152);
        memmove(v8, v7, 4 * v6);
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = (void *)(a1 + 152);
      }
      *int v9 = &v8[4 * v6];
    }
  }
  return a1;
}

OpenSubdiv::v3_1_1::Vtr::internal::Level *OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(void *a1, uint64_t a2, int a3, int a4, int a5, unsigned int a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  float result = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(void *)(*a1 + 40) + 8 * a4);
  if ((a6 & 0x80000000) != 0)
  {
    uint64_t v10 = a1 + 12;
    unsigned int v11 = -1;
  }
  else
  {
    uint64_t v10 = (void *)(a1[15] + 24 * a6);
    unsigned int v11 = *(_DWORD *)(a1[18] + 4 * a6);
  }
  unsigned int v12 = *(_DWORD *)(*v10 + 4 * a4);
  if (!a5) {
    goto LABEL_8;
  }
  int v13 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::boundaryEdgeMaskToType[a5];
  uint64_t v14 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::boundaryEdgeMaskToFeature[a5];
  switch(v13)
  {
    case 2:
      std::vector<int>::size_type v15 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteCorner
          + 64 * v14;
      float result = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints(result, a3, v22, v14, v11);
      goto LABEL_11;
    case 1:
      std::vector<int>::size_type v15 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteBoundary
          + 64 * v14;
      float result = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints(result, a3, v22, v14, v11);
LABEL_11:
      uint64_t v16 = 0;
      int v17 = v22[0];
      do
      {
        uint64_t v18 = *(unsigned int *)&v15[v16];
        int v19 = v17;
        if ((v18 & 0x80000000) == 0) {
          int v19 = v22[v18];
        }
        *(_DWORD *)(a2 + v16) = v19 + v12;
        v16 += 4;
      }
      while (v16 != 64);
      return result;
    case 0:
LABEL_8:
      float result = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(result, a3, v22, 0, v11);
      std::vector<int>::size_type v15 = (char *)&OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(int *,OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::PatchTuple const&,int,int)const::permuteRegular;
      goto LABEL_11;
  }
  if (v12)
  {
    uint64_t v20 = 0;
    int32x4_t v21 = vdupq_n_s32(v12);
    do
    {
      *(int32x4_t *)(a2 + v20 * 4) = vaddq_s32(*(int32x4_t *)&v22[v20], v21);
      v20 += 4;
    }
    while (v20 != 16);
  }
  return result;
}

BOOL OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3, unsigned int a4)
{
  v38[1] = *(int8x8_t *)MEMORY[0x263EF8340];
  uint64_t v7 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(void *)(*(void *)this + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v9 = -1;
  }
  else
  {
    uint64_t v8 = *(int *)(*((void *)this + 18) + 4 * a4);
    if (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*((void *)v7 + 57) + 8 * v8), a3))unsigned int v9 = v8; {
    else
    }
      unsigned int v9 = -1;
  }
  __int16 FaceCompositeVTag = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(v7, a3, v9);
  char v11 = FaceCompositeVTag;
  BOOL v12 = (FaceCompositeVTag & 2) == 0;
  char v13 = v12 | FaceCompositeVTag;
  if ((*((_WORD *)this + 4) & 8) == 0 || (FaceCompositeVTag & 0x1010) == 0) {
    goto LABEL_26;
  }
  unsigned int v14 = (FaceCompositeVTag & 0x4001) != 0x4000;
  if ((FaceCompositeVTag & 0x5001) == 0x5000)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v7, a3, v38, v9);
    uint64_t v15 = 0;
    __int16 v37 = 0;
    int v36 = 0;
    while (1)
    {
      __int16 v16 = v38[0].i16[v15];
      if ((v16 & 0x4000) != 0)
      {
        int v17 = (v16 & 0x2000) != 0 ? 2 : 1;
        if (v17 != (unsigned __int16)v36) {
          break;
        }
      }
      if (++v15 == 4)
      {
        unsigned int v14 = 1;
        goto LABEL_18;
      }
    }
    unsigned int v14 = 0;
  }
LABEL_18:
  char v13 = v14 != 0;
  if (a2 <= 1 && (v11 & 2) != 0)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v7, a3, v38, v9);
    int16x8_t v18 = vdupq_n_s16(v14);
    unsigned __int32 v19 = vmovn_s16(v18).u32[0];
    *(int8x8_t *)v18.i8 = vbic_s8(*(int8x8_t *)v18.i8, (int8x8_t)vceq_s16((int16x4_t)vand_s8(v38[0], (int8x8_t)vdup_n_s16(0x782u)), (int16x4_t)0x82008200820082));
    if (vmovn_s16(v18).u32[0] == v19 && v14 != 0) {
      return 1;
    }
  }
  else
  {
LABEL_26:
    if (v13) {
      return 1;
    }
  }
  BOOL result = 0;
  if (*((unsigned char *)this + 24)) {
    char v22 = v12;
  }
  else {
    char v22 = 1;
  }
  if ((v22 & 1) == 0 && (v11 & 4) != 0 && (v11 & 1) == 0)
  {
    unint64_t v24 = *(void **)(*(void *)(*(void *)this + 40) + 8 * a2);
    if ((v9 & 0x80000000) != 0)
    {
      unsigned int v26 = -1;
    }
    else
    {
      uint64_t v25 = *(int *)(*((void *)this + 18) + 4 * v9);
      if (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(v24[57] + 8 * v25), a3))unsigned int v26 = v25; {
      else
      }
        unsigned int v26 = -1;
    }
    if (*(_DWORD *)(v24[3] + 8 * a3) != 4) {
      return 0;
    }
    OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v24, a3, v38, v26);
    unsigned int v27 = (*((_WORD *)this + 4) & 8) != 0 ? 6016 : 1924;
    unsigned int v28 = (*((_WORD *)this + 4) & 8) != 0 ? 4608 : 516;
    int16x4_t v29 = (int16x4_t)vand_s8((int8x8_t)vceq_s16((int16x4_t)vand_s8((int8x8_t)vdup_n_s16(v27), v38[0]), vdup_n_s16(v28)), (int8x8_t)0x8000400020001);
    v29.i32[0] = vaddv_s16(v29) & 0xF;
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    int v31 = (v38[0].u16[0] >> 1) & 1;
    int v32 = (v38[0].u16[1] >> 1) & 1;
    int v33 = (v38[0].u16[2] >> 1) & 1;
    if (v30.i32[0] != 3 || v32 + v31 + v33 + ((v38[0].u16[3] >> 1) & 1) != 1) {
      return 0;
    }
    if (a2 <= 1)
    {
      if (v31)
      {
        int v35 = v38[0].i16[2] & 0x780;
      }
      else if (v32)
      {
        int v35 = v38[0].i16[3] & 0x780;
      }
      else if (v33)
      {
        int v35 = v38[0].i16[0] & 0x780;
      }
      else
      {
        int v35 = v38[0].i16[1] & 0x780;
      }
      return v35 == 128;
    }
    return 1;
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::anonymous namespace'::identifyManifoldCornerSpan(void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  if ((a6 & 0x80000000) != 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(a1[57] + 8 * a6);
  }
  int v7 = 1;
  uint64_t v8 = *(int *)(a1[3] + 4 * ((2 * a2) | 1));
  uint64_t v9 = *(int *)(a1[6] + 4 * v8 + 4 * a3);
  int v10 = 2 * v9;
  uint64_t v11 = a1[42];
  uint64_t v12 = a1[45] + 4 * *(int *)(v11 + 8 * v9 + 4);
  uint64_t v13 = *(unsigned int *)(v11 + 4 * v10);
  if ((int)v13 < 1)
  {
LABEL_8:
    LODWORD(v14) = -1;
  }
  else
  {
    uint64_t v14 = 0;
    int v15 = *(_DWORD *)(a1[9] + 4 * v8 + 4 * a3);
    while (*(_DWORD *)(v12 + 4 * v14) != v15)
    {
      if (v13 == ++v14) {
        goto LABEL_8;
      }
    }
  }
  int v16 = ((int)v14 + 1) % (int)v13;
  *(_DWORD *)(a5 + 2) = 0;
  *(_WORD *)a5 = 1;
  uint64_t v17 = a1[30];
  int v18 = v14;
  while (1)
  {
    uint64_t result = *(int *)(v12 + 4 * v18);
    int v20 = *(unsigned __int8 *)(v17 + result);
    if (v6)
    {
      uint64_t result = *(unsigned __int8 *)(*(void *)(v6 + 48) + result);
      if (result) {
        v20 |= 6u;
      }
    }
    if ((v20 & a4) != 0) {
      break;
    }
    *(_WORD *)a5 = ++v7;
    int v18 = ((int)v13 - 1 + v18) % (int)v13;
    if (v18 == v16)
    {
      int v18 = ((int)v14 + 1) % (int)v13;
      goto LABEL_16;
    }
  }
  do
  {
LABEL_16:
    uint64_t v21 = *(int *)(v12 + 4 * v16);
    int v22 = *(unsigned __int8 *)(v17 + v21);
    if (v6)
    {
      uint64_t result = v22 | 6u;
      if (*(unsigned char *)(*(void *)(v6 + 48) + v21)) {
        v22 |= 6u;
      }
    }
    if ((v22 & a4) != 0) {
      break;
    }
    *(_WORD *)a5 = ++v7;
    int v16 = (v16 + 1) % (int)v13;
  }
  while (v16 != v14);
  *(_WORD *)(a5 + 2) = v18;
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *this, int a2, int a3, unsigned int a4)
{
  v17[1] = *(int8x8_t *)MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(*(void *)(*(void *)this + 40) + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int v8 = -1;
  }
  else
  {
    uint64_t v7 = *(int *)(*((void *)this + 18) + 4 * a4);
    if (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(v6[57] + 8 * v7), a3))unsigned int v8 = v7; {
    else
    }
      unsigned int v8 = -1;
  }
  OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v6, a3, v17, v8);
  __int16 v9 = v17[0].i16[0] | v17[0].i16[2] | ((v17[0].i32[0] | v17[0].i32[1]) >> 16);
  if ((v9 & 0x1000) == 0) {
    goto LABEL_9;
  }
  if ((*((_WORD *)this + 4) & 8) != 0)
  {
    int8x8_t v11 = vand_s8((int8x8_t)vshl_u16((uint16x4_t)v17[0], (uint16x4_t)0xFFF7FFF6FFF5FFF4), (int8x8_t)0x8000400020001);
    LOWORD(v1re::VariableStepTimer::setClock((uint64_t)this, 0) = v11.i16[0] | v11.i16[2] | ((v11.i32[0] | v11.i32[1]) >> 16);
  }
  else
  {
    if ((v9 & 4) == 0)
    {
LABEL_9:
      LOWORD(v1re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      goto LABEL_12;
    }
    v12.i32[0] = v17[0].u16[1];
    v12.i32[1] = v17[0].u16[0];
    int32x2_t v13 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vand_s8(v12, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFFLL), (int8x8_t)0x100000002);
    unsigned __int32 v10 = vorr_s8((int8x8_t)v13, (int8x8_t)vdup_lane_s32(v13, 1)).u32[0] | v17[0].i8[4] & 4 | (2 * v17[0].u16[3]) & 8;
  }
LABEL_12:
  unsigned __int32 v10 = (unsigned __int16)v10;
  if (v9)
  {
    int8x16_t v15 = vbicq_s8(vbslq_s8((int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v17[0], (int8x8_t)0x10001000100010))), (int8x16_t)xmmword_2343978C0, (int8x16_t)xmmword_234415C20), (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(v17[0], (int8x8_t)0x1000100010001))));
    *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    unsigned __int32 v10 = v15.i32[0] | (unsigned __int16)v10 | v15.i32[1];
    switch((__int16)v10)
    {
      case 1:
      case 4:
        int v16 = 10;
        break;
      case 2:
      case 8:
        int v16 = 5;
        break;
      default:
        goto LABEL_13;
    }
    v10 |= v16;
  }
  else
  {
LABEL_13:
    if (!v10) {
      return 0;
    }
  }
  return OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(int,int,int)const::vBoundaryMaskToEMask[v10];
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(void **)(*(void *)(*(void *)a1 + 40) + 8 * a2);
  if ((a5 & 0x80000000) == 0
    && (uint64_t v9 = *(int *)(*(void *)(a1 + 144) + 4 * a5),
        (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(v8[57] + 8 * v9), a3) & 1) != 0))
  {
    uint64_t result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v8, a3, v40, v9);
    if ((v9 & 0x80000000) == 0) {
      uint64_t result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(*(void **)(v8[57] + 8 * v9), a3, (uint64_t)v39);
    }
  }
  else
  {
    LODWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = -1;
    uint64_t result = (uint64_t)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(v8, a3, v40, 0xFFFFFFFF);
  }
  uint64_t v11 = v8[3];
  uint64_t v12 = *(unsigned int *)(v11 + 8 * a3);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v38 = (2 * a3) | 1;
    uint64_t v14 = v8[6] + 4 * *(int *)(v11 + 4 * v38);
    int v15 = 7;
    if ((*(_WORD *)(a1 + 8) & 8) == 0) {
      int v15 = 3;
    }
    uint64_t v36 = v14;
    int v37 = v15;
    do
    {
      BOOL v16 = (v9 & 0x80000000) != 0 || (v39[v13] & 1) == 0;
      if ((*(_WORD *)(a1 + 8) & 8) != 0
        && ((v40[v13] & 0x1000) != 0 ? (BOOL v17 = (v40[v13] & 0x780) != 256) : (BOOL v17 = 0), v17)
        || !v16)
      {
        __int16 v19 = v40[v13];
        uint64_t v20 = a4 + 6 * v13;
        if (v19)
        {
          uint64_t v21 = *(int *)(v8[6] + 4 * *(int *)(v8[3] + 4 * v38) + 4 * v13);
          uint64_t v22 = v8[36];
          uint64_t v23 = v8[33];
          uint64_t v24 = *(int *)(v23 + 8 * v21 + 4);
          uint64_t v25 = *(unsigned int *)(v23 + 8 * v21);
          uint64_t v26 = v8[39];
          *(_WORD *)(v20 + 4) = 0;
          *(_DWORD *)uint64_t v20 = 0;
          if ((int)v25 < 1)
          {
LABEL_29:
            if ((v19 & 8) == 0) {
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v27 = 0;
            uint64_t v28 = v22 + 4 * v24;
            uint64_t v29 = v26 + 2 * v24;
            while (*(_DWORD *)(v28 + 4 * v27) != a3 || v13 != *(unsigned __int16 *)(v29 + 2 * v27))
            {
              if (v25 == ++v27) {
                goto LABEL_29;
              }
            }
            uint64_t v32 = a4 + 6 * v13;
            *(_WORD *)(v32 + 2) = v27;
            *(_WORD *)uint64_t v20 = 1;
            *(unsigned char *)(v32 + 4) = 2;
            if ((v19 & 8) == 0)
            {
LABEL_30:
              if ((*(_WORD *)(a1 + 8) & 8) != 0)
              {
                uint64_t v31 = a4 + 6 * v13;
                char v30 = *(unsigned char *)(v31 + 4) & 0xFD | (2 * ((v19 & 0x4780) == 17408));
                *(unsigned char *)(v31 + 4) = v30;
              }
              else
              {
                char v30 = *(unsigned char *)(a4 + 6 * v13 + 4);
              }
              goto LABEL_35;
            }
          }
        }
        else
        {
          if ((v19 & 8) == 0) {
            goto LABEL_30;
          }
        }
      }
      else
      {
        uint64_t v18 = a4 + 6 * v13;
        *(_WORD *)(v18 + 4) = 0;
        *(_DWORD *)uint64_t v18 = 0;
        __int16 v19 = v40[v13];
        if ((v19 & 8) == 0) {
          goto LABEL_30;
        }
      }
      uint64_t v33 = a4 + 6 * v13;
      char v30 = *(unsigned char *)(v33 + 4) | 2;
      *(unsigned char *)(v33 + 4) = v30;
LABEL_35:
      if ((v30 & 2) == 0 && (v19 & 7) == 6 && *(unsigned char *)(a1 + 24))
      {
        unint64_t v34 = (unsigned __int16 *)(a4 + 6 * v13);
        int v35 = *v34;
        if (!*v34) {
          int v35 = *(_DWORD *)(v8[33] + 8 * *(int *)(v36 + 4 * v13));
        }
        *((unsigned char *)v34 + 4) = v30 & 0xFD | (2 * (v35 == 1));
      }
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateVertexTables(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  if ((int)(-858993459 * ((*((void *)a2 + 2) - v3) >> 2)) >= 1)
  {
    uint64_t v6 = 0;
    LODWORD(v7) = 0;
    int v8 = 0;
    uint64_t v9 = -858993459 * ((*((void *)a2 + 2) - v3) >> 2);
    unsigned __int32 v10 = (int *)(v3 + 4);
    do
    {
      uint64_t v11 = *v10;
      v10 += 5;
      unint64_t v7 = v11 + (int)v7;
      v8 += OpenSubdiv::v3_1_1::Far::PatchTable::GetNumControlVertices(a2, v6++);
    }
    while (v9 != v6);
    if (v8 && v7)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)a2 + 32), v8);
      std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::resize((uint64_t)a2 + 56, v7);
      if ((*(unsigned char *)(*(void *)this + 8) & 1) == 0)
      {
        int v12 = 3;
        OpenSubdiv::v3_1_1::Far::PatchTable::allocateVaryingVertices((uint64_t)a2, &v12, v7);
      }
      if ((*((_WORD *)this + 4) & 4) != 0)
      {
        std::vector<unsigned int>::resize((std::vector<int> *)((char *)a2 + 224), v7, &OpenSubdiv::v3_1_1::Vtr::INDEX_INVALID);
      }
    }
  }
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::__append((void **)a1, a2 - v2);
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateFVarChannels(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, const OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v5 = *(void *)this;
  uint64_t v7 = *((void *)a2 + 7);
  uint64_t v6 = *((void *)a2 + 8);
  int v8 = (void *)((char *)a2 + 176);
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::resize((uint64_t)a2 + 176, (int)((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2));
  uint64_t v9 = *((void *)this + 18);
  if ((int)((unint64_t)(*((void *)this + 19) - v9) >> 2) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = (unint64_t)(v6 - v7) >> 3;
    do
    {
      int v13 = (*(_DWORD *)(*(void *)(*(void *)(**(void **)(v5 + 40) + 456) + 8 * *(int *)(v9 + 4 * v11)) + 8) >> 2) & 7;
      *(_DWORD *)(*v8 + v1re::VariableStepTimer::setClock((uint64_t)this, 0) = v13;
      unsigned int v14 = *((unsigned __int16 *)this + 4);
      if (*(unsigned char *)(v5 + 8))
      {
        if ((v14 & 2) != 0) {
          int v19 = 4;
        }
        else {
          int v19 = 3;
        }
        int v21 = v19;
        uint64_t v18 = &v21;
      }
      else
      {
        if (v13 == 5) {
          int v15 = 1;
        }
        else {
          int v15 = (v14 >> 13) & 1;
        }
        if ((v14 & 0x700) == 0x300) {
          int v16 = 9;
        }
        else {
          int v16 = 6;
        }
        if (v15) {
          int v17 = 3;
        }
        else {
          int v17 = v16;
        }
        int v20 = v17;
        uint64_t v18 = &v20;
      }
      OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues((uint64_t)a2, v18, v12, v11++);
      uint64_t v9 = *((void *)this + 18);
      v10 += 56;
    }
    while (v11 < (int)((unint64_t)(*((void *)this + 19) - v9) >> 2));
  }
}

unint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam(void *a1, uint64_t a2, int a3, uint64_t a4, char a5, unsigned __int8 a6)
{
  BOOL v6 = *(_DWORD *)(*(void *)(*(void *)(a1[11] + 24 * a3) + 24) + 8 * a4) != 4;
  if (a3 < 1)
  {
    int v9 = 0;
    LOWORD(v8) = 0;
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = a1[8];
    uint64_t v11 = a1[5];
    int v12 = 1;
    unsigned int v13 = a3;
    uint64_t v14 = a3;
    do
    {
      int v15 = *(void **)(v10 + 8 * --v13);
      int v16 = a4;
      a4 = *(int *)(v15[33] + 4 * (int)a4);
      if (*(_DWORD *)(*(void *)(*(void *)(v11 + 8 * v13) + 24) + 8 * a4) == 4)
      {
        int v7 = (*(unsigned __int8 *)(v15[42] + v16) >> 3) & 3;
        int v17 = v8 + v12;
        int v18 = v9 + v12;
        if (v7 == 1) {
          int v19 = v9 + v12;
        }
        else {
          int v19 = v9;
        }
        if (v7 == 2) {
          v8 += v12;
        }
        else {
          int v18 = v19;
        }
        if (v7 == 3) {
          int v8 = v17;
        }
        else {
          int v9 = v18;
        }
        int v12 = 2 * (v12 & 0x7FFF);
      }
      else
      {
        uint64_t v20 = v15[11];
        uint64_t v21 = *(unsigned int *)(v20 + 8 * a4);
        if ((int)v21 < 1)
        {
LABEL_18:
          BOOL v6 = 1;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = v15[15] + 4 * *(int *)(v20 + 4 * (int)((2 * a4) | 1));
          while (*(_DWORD *)(v23 + 4 * v22) != v16)
          {
            if (v21 == ++v22) {
              goto LABEL_18;
            }
          }
          BOOL v6 = 1;
          int v7 = v22;
        }
      }
    }
    while (v14-- > 1);
  }
  if (!v6) {
    int v7 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(a2 + 4 * (int)a4) + v7) & 0xFFFFFFF | (a6 << 28);
  int v26 = (v9 << 22) | ((v8 & 0x3FF) << 12);
  if (v6) {
    int v27 = 16;
  }
  else {
    int v27 = 0;
  }
  return v25 | ((unint64_t)(a3 & 0xF | ((a5 & 0xF) << 8) | v26 | v27) << 32);
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::Create(int *a1, uint64_t a2, uint64_t a3)
{
  if ((a1[2] & 1) == 0) {
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive(a1, a2, a3);
  }
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform(a1, a2, a3);
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::createUniform(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext((uint64_t)v3, a1, a2, a3);
  operator new();
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::createAdaptive(int *a1, uint64_t a2, uint64_t a3)
{
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::BuilderContext((uint64_t)v4, a1, a2, a3);
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::identifyAdaptivePatches((OpenSubdiv::v3_1_1::Far::PatchTableFactory *)v4, v3);
  operator new();
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::identifyAdaptivePatches(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2)
{
  uint64_t v3 = *(void *)this;
  unint64_t v4 = *(int *)(*(void *)this + 28);
  uint64_t v5 = *((void *)this + 9);
  if (v4 > (*((void *)this + 11) - v5) >> 3)
  {
    if ((v4 & 0x80000000) != 0) {
      goto LABEL_110;
    }
    uint64_t v6 = *((void *)this + 10) - v5;
    int v7 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v4);
    int v8 = &v7[v6];
    uint64_t v10 = &v7[8 * v9];
    uint64_t v11 = (char *)*((void *)this + 9);
    int v12 = (char *)*((void *)this + 10);
    unsigned int v13 = v8;
    if (v12 != v11)
    {
      unsigned int v13 = v8;
      do
      {
        uint64_t v14 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v12 != v11);
    }
    *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v13;
    *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v8;
    *((void *)this + 11) = v10;
    if (v11) {
      operator delete(v11);
    }
  }
  unint64_t v15 = *((void *)this + 14);
  int v104 = (char *)this + 112;
  int v16 = (char *)*((void *)this + 13);
  uint64_t v105 = v3;
  if ((unint64_t)v16 < v15)
  {
    *(_DWORD *)int v16 = 0;
    int v17 = v16 + 4;
    goto LABEL_24;
  }
  int v18 = (char *)*((void *)this + 12);
  uint64_t v19 = (v16 - v18) >> 2;
  unint64_t v20 = v19 + 1;
  if ((unint64_t)(v19 + 1) >> 62) {
LABEL_110:
  }
    abort();
  uint64_t v21 = v15 - (void)v18;
  if (v21 >> 1 > v20) {
    unint64_t v20 = v21 >> 1;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    uint64_t v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v104, v22);
    int v18 = (char *)*((void *)this + 12);
    int v16 = (char *)*((void *)this + 13);
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = &v23[4 * v19];
  uint64_t v25 = &v23[4 * v22];
  *(_DWORD *)uint64_t v24 = 0;
  int v17 = v24 + 4;
  while (v16 != v18)
  {
    int v26 = *((_DWORD *)v16 - 1);
    v16 -= 4;
    *((_DWORD *)v24 - 1) = v26;
    v24 -= 4;
  }
  *((void *)this + 12) = v24;
  *((void *)this + 13) = v17;
  *((void *)this + 14) = v25;
  if (v18) {
    operator delete(v18);
  }
LABEL_24:
  *((void *)this + 13) = v17;
  int v27 = (void *)((char *)this + 120);
  std::vector<std::vector<unsigned long>>::resize((void *)this + 15, (uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 2);
  if ((int)((*((void *)this + 19) - *((void *)this + 18)) >> 2) >= 1)
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = *v27 + 24 * v28;
      uint64_t v31 = (_DWORD **)(v29 + 8);
      char v30 = *(_DWORD **)(v29 + 8);
      uint64_t v33 = (void *)(v29 + 16);
      unint64_t v32 = *(void *)(v29 + 16);
      if ((unint64_t)v30 >= v32)
      {
        int v35 = *(_DWORD **)v29;
        uint64_t v36 = ((uint64_t)v30 - *(void *)v29) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          goto LABEL_110;
        }
        uint64_t v38 = v32 - (void)v35;
        if (v38 >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          int v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v33, v39);
          char v30 = *v31;
          int v35 = *(_DWORD **)v29;
        }
        else
        {
          int v40 = 0;
        }
        uint64_t v41 = &v40[4 * v36];
        *(_DWORD *)uint64_t v41 = 0;
        unint64_t v34 = v41 + 4;
        while (v30 != v35)
        {
          int v42 = *--v30;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        *(void *)uint64_t v29 = v41;
        *uint64_t v31 = v34;
        *uint64_t v33 = &v40[4 * v39];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *char v30 = 0;
        unint64_t v34 = v30 + 1;
      }
      *uint64_t v31 = v34;
      ++v28;
    }
    while (v28 < (int)((*((void *)this + 19) - *((void *)this + 18)) >> 2));
  }
  uint64_t v43 = v105;
  if ((int)(-1431655765 * ((*(void *)(v105 + 96) - *(void *)(v105 + 88)) >> 3)) >= 1)
  {
    uint64_t v44 = 0;
    while (1)
    {
      uint64_t v45 = *(int **)(*(void *)(v43 + 40) + 8 * v44);
      uint64_t v47 = (int *)*((void *)this + 13);
      unint64_t v46 = *((void *)this + 14);
      int v48 = v45[2] + *(v47 - 1);
      if ((unint64_t)v47 >= v46)
      {
        uint64_t v50 = (int *)*((void *)this + 12);
        uint64_t v51 = v47 - v50;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          goto LABEL_110;
        }
        uint64_t v53 = v46 - (void)v50;
        if (v53 >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          uint64_t v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v104, v54);
          uint64_t v50 = (int *)*((void *)this + 12);
          uint64_t v47 = (int *)*((void *)this + 13);
        }
        else
        {
          uint64_t v55 = 0;
        }
        uint64_t v56 = (int *)&v55[4 * v51];
        *uint64_t v56 = v48;
        int v49 = v56 + 1;
        while (v47 != v50)
        {
          int v57 = *--v47;
          *--uint64_t v56 = v57;
        }
        *((void *)this + 12) = v56;
        *((void *)this + 13) = v49;
        *((void *)this + 14) = &v55[4 * v54];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        int *v47 = v48;
        int v49 = v47 + 1;
      }
      *((void *)this + 13) = v49;
      uint64_t v58 = *((void *)this + 18);
      if ((int)((unint64_t)(*((void *)this + 19) - v58) >> 2) >= 1)
      {
        uint64_t v59 = 0;
        do
        {
          uint64_t v60 = *v27 + 24 * v59;
          unsigned int v62 = (int **)(v60 + 8);
          unsigned int v61 = *(int **)(v60 + 8);
          int v63 = *(_DWORD *)(*(void *)(*((void *)v45 + 57) + 8 * *(int *)(v58 + 4 * v59)) + 16) + *(v61 - 1);
          char v65 = (void *)(v60 + 16);
          unint64_t v64 = *(void *)(v60 + 16);
          if ((unint64_t)v61 >= v64)
          {
            uint64_t v67 = *(int **)v60;
            uint64_t v68 = ((uint64_t)v61 - *(void *)v60) >> 2;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 62) {
              goto LABEL_110;
            }
            uint64_t v70 = v64 - (void)v67;
            if (v70 >> 1 > v69) {
              unint64_t v69 = v70 >> 1;
            }
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v69;
            }
            if (v71)
            {
              long long v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v65, v71);
              unsigned int v61 = *v62;
              uint64_t v67 = *(int **)v60;
            }
            else
            {
              long long v72 = 0;
            }
            __int16 v73 = (int *)&v72[4 * v68];
            *__int16 v73 = v63;
            char v66 = v73 + 1;
            while (v61 != v67)
            {
              int v74 = *--v61;
              *--__int16 v73 = v74;
            }
            *(void *)uint64_t v60 = v73;
            *unsigned int v62 = v66;
            *char v65 = &v72[4 * v71];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *unsigned int v61 = v63;
            char v66 = v61 + 1;
          }
          *unsigned int v62 = v66;
          ++v59;
          uint64_t v58 = *((void *)this + 18);
        }
        while (v59 < (int)((unint64_t)(*((void *)this + 19) - v58) >> 2));
      }
      if (*v45 >= 1) {
        break;
      }
LABEL_108:
      ++v44;
      uint64_t v43 = v105;
      if (v44 >= (int)(-1431655765 * ((*(void *)(v105 + 96) - *(void *)(v105 + 88)) >> 3))) {
        return;
      }
    }
    uint64_t v75 = 0;
    while (1)
    {
      uint64_t v76 = *(void *)this;
      BOOL v77 = *(void **)(*(void *)(*(void *)this + 40) + 8 * (int)v44);
      if ((*(unsigned char *)(v77[12] + v75) & 1) != 0
        || ((*(unsigned __int8 *)(v76 + 8) >> 2) & 0xF) > (int)v44
        && (*(unsigned char *)(*(void *)(*(void *)(*(void *)(v76 + 64) + 8 * (int)v44) + 408) + v75) & 1) != 0)
      {
        goto LABEL_107;
      }
      long long v78 = (unsigned int *)(v77[3] + 8 * v75);
      uint64_t v79 = v77[6];
      uint64_t v80 = *v78;
      uint64_t v81 = (int)v78[1];
      uint64_t v82 = v77[54];
      __int16 v83 = *(_WORD *)(v82 + 2 * *(int *)(v79 + 4 * v81));
      if ((int)v80 >= 2)
      {
        uint64_t v84 = v80 - 1;
        uint64_t v85 = (int *)(v79 + 4 * v81 + 4);
        do
        {
          uint64_t v86 = *v85++;
          v83 |= *(_WORD *)(v82 + 2 * v86);
          --v84;
        }
        while (v84);
      }
      if ((v83 & 0x800) != 0) {
        goto LABEL_107;
      }
      unint64_t v88 = (_DWORD *)*((void *)this + 10);
      unint64_t v87 = *((void *)this + 11);
      if ((unint64_t)v88 >= v87)
      {
        uint64_t v90 = *((void *)this + 9);
        uint64_t v91 = ((uint64_t)v88 - v90) >> 3;
        unint64_t v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 61) {
          goto LABEL_110;
        }
        uint64_t v93 = v87 - v90;
        if (v93 >> 2 > v92) {
          unint64_t v92 = v93 >> 2;
        }
        unint64_t v94 = (unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v92;
        uint64_t v96 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v94);
        uint64_t v97 = &v96[8 * v91];
        *(_DWORD *)uint64_t v97 = v75;
        *((_DWORD *)v97 + 1) = v44;
        uint64_t v98 = (char *)*((void *)this + 9);
        uint64_t v99 = (char *)*((void *)this + 10);
        uint64_t v100 = v97;
        while (v99 != v98)
        {
          uint64_t v101 = *((void *)v99 - 1);
          v99 -= 8;
          *((void *)v100 - 1) = v101;
          v100 -= 8;
        }
        uint64_t v89 = v97 + 8;
        *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v100;
        *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v97 + 8;
        *((void *)this + 11) = &v96[8 * v95];
        if (v98) {
          operator delete(v98);
        }
      }
      else
      {
        *unint64_t v88 = v75;
        v88[1] = v44;
        uint64_t v89 = v88 + 2;
      }
      *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v89;
      if (OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(this, v44, v75, 0xFFFFFFFF)) {
        break;
      }
      ++*((_DWORD *)this + 15);
      if ((*((_WORD *)this + 4) & 0x700) == 0x400)
      {
        unsigned int v102 = (OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag((OpenSubdiv::v3_1_1::Vtr::internal::Level *)v45, v75, 0xFFFFFFFF) >> 2) & 1;
        uint64_t v103 = (char *)this + 64;
        goto LABEL_106;
      }
LABEL_107:
      if (++v75 >= *v45) {
        goto LABEL_108;
      }
    }
    unsigned int v102 = 1;
    uint64_t v103 = (char *)this + 56;
LABEL_106:
    *(_DWORD *)v103 += v102;
    goto LABEL_107;
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTableFactory::populateAdaptivePatches(OpenSubdiv::v3_1_1::Far::PatchTableFactory *this, OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext *a2, OpenSubdiv::v3_1_1::Far::PatchTable *a3)
{
  uint64_t v5 = 0;
  v210[35] = *MEMORY[0x263EF8340];
  __int16 v178 = *(OpenSubdiv::v3_1_1::Far::TopologyRefiner **)this;
  do
  {
    uint64_t v6 = (char *)&v208 + v5 * 8;
    *(_DWORD *)uint64_t v6 = 6;
    *(void *)(v6 + 4) = 0;
    *(void *)(v6 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
    *(void *)(v6 + 12) = 0;
    *((_DWORD *)v6 + 7) = 0;
    *((void *)v6 + 4) = &v210[v5 + 5];
    *((void *)v6 + 5) = 0x100000000;
    *((void *)v6 + 7) = 0;
    *((void *)v6 + 8) = &v210[v5 + 9];
    *((void *)v6 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0x100000000;
    v5 += 12;
    *((void *)v6 + 11) = 0;
  }
  while (v5 != 36);
  int v7 = *((_DWORD *)this + 14);
  int v208 = 6;
  int v209 = v7;
  BOOL v8 = v7 > 0;
  int v9 = *((unsigned char *)this + 9) & 7;
  switch(v9)
  {
    case 4:
      int v12 = &v208 + 24 * (v7 > 0);
      int v13 = *((_DWORD *)this + 15);
      int v14 = *((_DWORD *)this + 16);
      BOOL v15 = __OFSUB__(v13, v14);
      int v16 = v13 - v14;
      *int v12 = 7;
      v12[1] = v16;
      if ((v16 < 0) ^ v15 | (v16 == 0)) {
        unsigned int v17 = v8;
      }
      else {
        unsigned int v17 = v8 + 1;
      }
      int v18 = &v208 + 24 * v17;
      *int v18 = 8;
      v18[1] = v14;
      unsigned int v183 = v17;
      if (v14 <= 0) {
        unsigned int v11 = v17;
      }
      else {
        unsigned int v11 = v17 + 1;
      }
      break;
    case 3:
      uint64_t v19 = &v208 + 24 * (v7 > 0);
      int v20 = *((_DWORD *)this + 15);
      int v21 = v19[1];
      BOOL v15 = __OFADD__(v21, v20);
      int v22 = v21 + v20;
      *uint64_t v19 = 9;
      v19[1] = v22;
      if ((v22 < 0) ^ v15 | (v22 == 0)) {
        unsigned int v11 = v8;
      }
      else {
        unsigned int v11 = v8 + 1;
      }
      unsigned int v183 = v8;
      break;
    case 2:
      unsigned int v183 = 0;
      BOOL v8 = 0;
      int v10 = *((_DWORD *)this + 15);
      int v209 = v10 + v7;
      if ((v209 < 0) ^ __OFADD__(v10, v7) | (v209 == 0)) {
        unsigned int v11 = 0;
      }
      else {
        unsigned int v11 = 1;
      }
      break;
    default:
      unsigned int v183 = 2;
      unsigned int v11 = v7 > 0;
      BOOL v8 = 1;
      break;
  }
  uint64_t v23 = v11;
  std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>::reserve((char **)a2 + 1, v11);
  uint64_t v191 = 0;
  int v190 = 0;
  if (v11)
  {
    uint64_t v25 = &v209;
    uint64_t v26 = v23;
    do
    {
      int v27 = *v25;
      int v189 = *(v25 - 1);
      OpenSubdiv::v3_1_1::Far::PatchTable::pushPatchArray(a2, &v189, v27, (int *)&v191 + 1, (int *)&v191, &v190);
      v25 += 24;
      --v26;
    }
    while (v26);
  }
  BOOL v185 = v8;
  __int16 v180 = *((_WORD *)this + 4);
  OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateVertexTables(this, a2, v24);
  if (*((void *)this + 18) != *((void *)this + 19)) {
    OpenSubdiv::v3_1_1::Far::PatchTableFactory::allocateFVarChannels(this, a2, v28);
  }
  if (v23)
  {
    uint64_t v29 = 0;
    uint64_t v186 = v23;
    do
    {
      uint64_t PatchArrayVertices = OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices(a2, v29);
      uint64_t v31 = &v208 + 24 * v29;
      *((void *)v31 + 1) = PatchArrayVertices;
      uint64_t v32 = *(int *)(*((void *)a2 + 1) + 20 * (int)v29 + 12);
      *((void *)v31 + 2) = *((void *)a2 + 7) + 8 * v32;
      if ((v180 & 4) != 0) {
        v210[12 * v29 + 2] = *((void *)a2 + 28) + 4 * v32;
      }
      uint64_t v33 = *((void *)this + 18);
      uint64_t v34 = *((void *)this + 19);
      if (v33 != v34)
      {
        int v35 = &v210[12 * v29 + 3];
        uint64_t v36 = v34 - v33;
        unint64_t v37 = (unint64_t)(v34 - v33) >> 2;
        if (v37)
        {
          uint64_t v38 = &v208 + 24 * v29;
          unsigned int v40 = v38[11];
          unint64_t v39 = v38 + 11;
          if (v40 < v37)
          {
            uint64_t v41 = (void **)(&v208 + 24 * v29);
            operator delete(v41[7]);
            *int v35 = (uint64_t)(v41 + 6);
            *unint64_t v39 = 1;
            int v42 = operator new((2 * v36) & 0x7FFFFFFF8);
            v41[7] = v42;
            *int v35 = (uint64_t)v42;
            *unint64_t v39 = v37;
          }
        }
        else
        {
          uint64_t v43 = (void **)(&v208 + 24 * v29);
          operator delete(v43[7]);
          *int v35 = (uint64_t)(v43 + 6);
          *((_DWORD *)v43 + 11) = 1;
        }
        uint64_t v44 = &v208 + 24 * v29;
        v44[10] = v37;
        uint64_t v45 = v44 + 16;
        unint64_t v46 = *((void *)this + 19) - *((void *)this + 18);
        unint64_t v47 = v46 >> 2;
        if ((v46 >> 2))
        {
          int v48 = &v208 + 24 * v29;
          unsigned int v50 = v48[19];
          int v49 = v48 + 19;
          if (v50 < v47)
          {
            uint64_t v51 = (void **)(&v208 + 24 * v29);
            operator delete(v51[11]);
            void *v45 = v51 + 10;
            _DWORD *v49 = 1;
            unint64_t v52 = operator new((2 * v46) & 0x7FFFFFFF8);
            v51[11] = v52;
            uint64_t v23 = v186;
            void *v45 = v52;
            _DWORD *v49 = v47;
          }
        }
        else
        {
          uint64_t v53 = (void **)(&v208 + 24 * v29);
          operator delete(v53[11]);
          void *v45 = v53 + 10;
          *((_DWORD *)v53 + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 1;
        }
        LODWORD(v210[12 * v29 + 8]) = v47;
        if ((int)((*((void *)this + 19) - *((void *)this + 18)) >> 2) >= 1)
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
          do
          {
            uint64_t v56 = *((void *)a2 + 22) + v54;
            int v57 = *(_DWORD *)(v56 + 4) - 1;
            if (v57 > 8) {
              int v58 = -1;
            }
            else {
              int v58 = dword_234415F40[v57];
            }
            uint64_t v59 = *(int *)(*((void *)a2 + 1) + 20 * (int)v29 + 12);
            *(void *)(*v35 + 8 * v55) = *(void *)(v56 + 8) + 4 * v58 * (int)v59;
            *(void *)(*v45 + 8 * v55++) = *(void *)(*((void *)a2 + 22) + v54 + 32) + 8 * v59;
            v54 += 56;
          }
          while (v55 < (int)((*((void *)this + 19) - *((void *)this + 18)) >> 2));
        }
      }
      ++v29;
    }
    while (v29 != v23);
  }
  uint64_t v60 = &v206;
  v204 = &v206;
  uint64_t v205 = 0x100000000;
  v207 = 0;
  unsigned int v61 = &v202;
  v199 = 0;
  v200 = &v202;
  uint64_t v201 = 0x100000000;
  CMTime __p = 0;
  unsigned int v62 = &v198;
  uint64_t v196 = &v198;
  uint64_t v197 = 0x100000000;
  int v63 = *((unsigned char *)this + 9) & 7;
  switch(v63)
  {
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
  }
  uint64_t v65 = *((void *)this + 18);
  uint64_t v64 = *((void *)this + 19);
  if (v65 != v64)
  {
    uint64_t v66 = v64 - v65;
    unint64_t v67 = (unint64_t)(v64 - v65) >> 2;
    if (v67)
    {
      if (HIDWORD(v205) >= v67)
      {
        unint64_t v69 = (unint64_t)(v64 - v65) >> 2;
LABEL_58:
        LODWORD(v205) = v67;
        if (v69)
        {
          if (HIDWORD(v201) >= v69)
          {
            LODWORD(v71) = v69;
LABEL_64:
            LODWORD(v201) = v69;
            if (v71)
            {
              LODWORD(v72) = v71;
              if (HIDWORD(v197) >= v71) {
                goto LABEL_69;
              }
              operator delete(v199);
              uint64_t v196 = &v198;
              HIDWORD(v197) = 1;
              unsigned int v62 = (uint64_t *)operator new((2 * v66) & 0x7FFFFFFF8);
              v199 = v62;
              int v73 = v71;
            }
            else
            {
              operator delete(v199);
              int v73 = 1;
            }
            uint64_t v196 = v62;
            HIDWORD(v197) = v73;
            uint64_t v65 = *((void *)this + 18);
            uint64_t v64 = *((void *)this + 19);
            unint64_t v72 = (unint64_t)(v64 - v65) >> 2;
LABEL_69:
            LODWORD(v197) = v71;
            if ((int)v72 >= 1)
            {
              uint64_t v74 = 0;
              do
              {
                int v75 = *((unsigned char *)this + 9) & 7;
                if (v75 == 2) {
                  operator new();
                }
                if (v75 == 3) {
                  operator new();
                }
                ++v74;
              }
              while (v74 < (int)((unint64_t)(v64 - v65) >> 2));
            }
            goto LABEL_76;
          }
          operator delete(__p);
          v200 = &v202;
          HIDWORD(v201) = 1;
          unsigned int v61 = (uint64_t *)operator new((2 * v66) & 0x7FFFFFFF8);
          CMTime __p = v61;
          int v70 = v69;
        }
        else
        {
          operator delete(__p);
          int v70 = 1;
        }
        v200 = v61;
        HIDWORD(v201) = v70;
        uint64_t v65 = *((void *)this + 18);
        uint64_t v64 = *((void *)this + 19);
        uint64_t v66 = v64 - v65;
        unint64_t v71 = (unint64_t)(v64 - v65) >> 2;
        goto LABEL_64;
      }
      operator delete(v207);
      v204 = &v206;
      HIDWORD(v205) = 1;
      uint64_t v60 = (uint64_t *)operator new((2 * v66) & 0x7FFFFFFF8);
      v207 = v60;
      int v68 = v67;
    }
    else
    {
      operator delete(v207);
      int v68 = 1;
    }
    v204 = v60;
    HIDWORD(v205) = v68;
    uint64_t v65 = *((void *)this + 18);
    uint64_t v64 = *((void *)this + 19);
    uint64_t v66 = v64 - v65;
    unint64_t v69 = (unint64_t)(v64 - v65) >> 2;
    goto LABEL_58;
  }
LABEL_76:
  uint64_t v76 = *((void *)this + 9);
  if ((int)((unint64_t)(*((void *)this + 10) - v76) >> 3) >= 1)
  {
    uint64_t v77 = 0;
    uint64_t v174 = &v208 + 24 * v183;
    uint64_t v175 = (_DWORD **)(v174 + 2);
    __int16 v176 = &v210[12 * v185];
    int v177 = (void *)((char *)a2 + 264);
    do
    {
      long long v78 = (int *)(v76 + 8 * v77);
      uint64_t v79 = v78 + 1;
      uint64_t v80 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*((void *)v178 + 5) + 8 * v78[1]);
      __int16 FaceCompositeVTag = OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(v80, *v78, 0xFFFFFFFF);
      memset(v195, 0, sizeof(v195));
      BOOL IsPatchRegular = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(this, v78[1], *v78, 0xFFFFFFFF);
      int v83 = v78[1];
      int v84 = *v78;
      BOOL v184 = IsPatchRegular;
      uint64_t v179 = v77;
      if (IsPatchRegular)
      {
        RegularPatchBoundaryMasuint64_t k = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(this, v83, v84, 0xFFFFFFFF);
        int v86 = RegularPatchBoundaryMask;
        int v181 = 0;
        float v87 = 0.0;
        if ((v180 & 4) == 0 || RegularPatchBoundaryMask)
        {
          int v89 = RegularPatchBoundaryMask;
        }
        else
        {
          if ((FaceCompositeVTag & 0x1040) == 0) {
            goto LABEL_92;
          }
          LODWORD(v192) = 0;
          int v188 = 0;
          if (!OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(v80, *v78, (float *)&v192, &v188))goto LABEL_92; {
          float v88 = (float)((*((_WORD *)this + 4) >> 4) - *v79);
          }
          if (*(float *)&v192 <= v88) {
            float v88 = *(float *)&v192;
          }
          if (v88 > 0.0)
          {
            int v86 = 0;
            int v181 = 1;
            int v89 = 1 << v188;
            float v87 = v88;
          }
          else
          {
LABEL_92:
            int v86 = 0;
            int v89 = 0;
            int v181 = 0;
          }
        }
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, v210[0], *v78, v78[1], v86, 0xFFFFFFFF);
        v210[0] += 64;
        uint64_t v93 = *v79;
        if (v93 == ((*(unsigned __int8 *)(*(void *)this + 8) >> 2) & 0xF)) {
          LOBYTE(v94) = 0;
        }
        else {
          int v94 = (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(*(void *)this + 64) + 8 * v93) + 408)
        }
                                    + *v78) >> 1) & 0xF;
        uint64_t v95 = &v208;
      }
      else
      {
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans((uint64_t)this, v83, v84, (uint64_t)v195, 0xFFFFFFFF);
        int v90 = *((unsigned char *)this + 9) & 7;
        float v87 = 0.0;
        if (v90 == 2)
        {
          uint64_t v91 = &v210[12 * v185];
          int v92 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(this, 0, (_DWORD *)*v176, *v78, v78[1], (__int16 *)v195, 0xFFFFFFFF);
LABEL_98:
          int v181 = 0;
          int v89 = 0;
          LOBYTE(v94) = 0;
          *v91 += 4 * v92;
          goto LABEL_105;
        }
        if (v90 != 4)
        {
          if (v90 == 3)
          {
            uint64_t v91 = &v210[12 * v185];
            int v92 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>((uint64_t)this, 0, (_DWORD *)*v176);
            goto LABEL_98;
          }
          int v181 = 0;
          int v89 = 0;
          LOBYTE(v94) = 0;
LABEL_105:
          uint64_t v95 = &v208 + 24 * v185;
          goto LABEL_106;
        }
        int v96 = *v78;
        uint64_t v97 = v78[1];
        uint64_t v98 = *(void **)(*(void *)(*(void *)this + 40) + 8 * v97);
        int v99 = *(_DWORD *)(*((void *)this + 12) + 4 * v97);
        if ((FaceCompositeVTag & 4) != 0)
        {
          char v147 = *v175;
          PatchPoints = (int *)OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::GetPatchPoints(0, v98, v96, (uint64_t)v195, v99, 0xFFFFFFFF);
          if (v149 >= 1)
          {
            uint64_t v150 = v149;
            do
            {
              int v151 = *PatchPoints++;
              *v147++ = v151;
              --v150;
            }
            while (v150);
          }
          int v181 = 0;
          int v89 = 0;
          LOBYTE(v94) = 0;
          *v175 += v149;
          uint64_t v95 = v174;
        }
        else
        {
          uint64_t v100 = (_DWORD *)*v176;
          uint64_t v101 = (int *)OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::GetPatchPoints(0, v98, v96, (uint64_t)v195, v99, 0xFFFFFFFF);
          if (v102 >= 1)
          {
            uint64_t v103 = v102;
            do
            {
              int v104 = *v101++;
              *v100++ = v104;
              --v103;
            }
            while (v103);
          }
          int v181 = 0;
          int v89 = 0;
          LOBYTE(v94) = 0;
          uint64_t v95 = &v208 + 24 * v185;
          *v176 += 4 * v102;
        }
      }
LABEL_106:
      unint64_t v105 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::computePatchParam(*(void **)this, *((void *)this + 4), *v79, *v78, v89, v94);
      uint64_t v106 = (unint64_t *)*((void *)v95 + 2);
      *((void *)v95 + 2) = v106 + 1;
      unint64_t v187 = v105;
      *uint64_t v106 = v105;
      if ((v180 & 4) != 0)
      {
        v107 = (float *)*((void *)a2 + 31);
        uint64_t v108 = (float *)*((void *)a2 + 32);
        uint64_t v109 = v108 - v107;
        if ((int)v109 < 1)
        {
LABEL_111:
          if ((unint64_t)v108 >= *v177)
          {
            unint64_t v112 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 62) {
              abort();
            }
            uint64_t v113 = *v177 - (void)v107;
            if (v113 >> 1 > v112) {
              unint64_t v112 = v113 >> 1;
            }
            if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v114 = v112;
            }
            if (v114)
            {
              __int16 v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v177, v114);
              v107 = (float *)*((void *)a2 + 31);
              uint64_t v108 = (float *)*((void *)a2 + 32);
            }
            else
            {
              __int16 v115 = 0;
            }
            char v116 = (float *)&v115[4 * v109];
            *char v116 = v87;
            v111 = v116 + 1;
            while (v108 != v107)
            {
              int v117 = *((_DWORD *)v108-- - 1);
              *((_DWORD *)v116-- - 1) = v117;
            }
            *((void *)a2 + 31) = v116;
            *((void *)a2 + 32) = v111;
            *((void *)a2 + 33) = &v115[4 * v114];
            if (v107)
            {
              operator delete(v107);
              v107 = (float *)*((void *)a2 + 31);
            }
            else
            {
              v107 = v116;
            }
          }
          else
          {
            *uint64_t v108 = v87;
            v111 = v108 + 1;
          }
          *((void *)a2 + 32) = v111;
          LODWORD(v11re::VariableStepTimer::setClock((uint64_t)this, 0) = ((unint64_t)((char *)v111 - (char *)v107) >> 2) - 1;
        }
        else
        {
          uint64_t v110 = 0;
          while (v107[v110] != v87)
          {
            if (((unint64_t)((char *)v108 - (char *)v107) >> 2) == ++v110) {
              goto LABEL_111;
            }
          }
        }
        char v118 = (_DWORD *)*((void *)v95 + 3);
        *char v118 = v110;
        *((void *)v95 + 3) = v118 + 1;
      }
      int v182 = v89;
      uint64_t v120 = *((void *)this + 18);
      uint64_t v119 = *((void *)this + 19);
      if (v120 != v119 && (int)((unint64_t)(v119 - v120) >> 2) >= 1)
      {
        uint64_t v121 = 0;
        while (1)
        {
          uint64_t v122 = *v78;
          uint64_t v123 = *v79;
          int v124 = *(_DWORD *)(*((void *)a2 + 22) + 56 * (int)v121 + 4);
          if (v124 == 3)
          {
            uint64_t v125 = *(void **)(*(void *)(*(void *)this + 40) + 8 * v123);
            if ((v121 & 0x80000000) != 0)
            {
              int v126 = *(_DWORD *)(*((void *)this + 12) + 4 * v123);
            }
            else
            {
              int v126 = *(_DWORD *)(*(void *)(*((void *)this + 15) + 24 * v121) + 4 * v123);
              uint64_t v127 = *(unsigned int *)(v120 + 4 * v121);
              if ((v127 & 0x80000000) == 0)
              {
                uint64_t v128 = *(void **)(v125[57] + 8 * v127);
                uint64_t v129 = *(void *)(*v128 + 24);
                uint64_t v130 = (unsigned int *)(v129 + 8 * v122);
                uint64_t v131 = (int *)(v128[3] + 4 * *(int *)(v129 + 4 * (int)((2 * v122) | 1)));
LABEL_146:
                uint64_t v135 = *((void *)v95 + 4);
                uint64_t v136 = *(void *)(v135 + 8 * v121);
                uint64_t v137 = *v130;
                if ((int)v137 >= 1)
                {
                  uint64_t v138 = *(_DWORD **)(v135 + 8 * v121);
                  uint64_t v139 = v137;
                  do
                  {
                    int v140 = *v131++;
                    *v138++ = v140 + v126;
                    --v139;
                  }
                  while (v139);
                }
                *(void *)(v135 + 8 * v121) = v136 + 4 * (int)v137;
                uint64_t v141 = *((void *)v95 + 8);
                uint64_t v142 = *(unint64_t **)(v141 + 8 * v121);
                *(void *)(v141 + 8 * v121) = v142 + 1;
                *uint64_t v142 = v187;
                goto LABEL_161;
              }
            }
            uint64_t v134 = v125[3];
            uint64_t v131 = (int *)(v125[6] + 4 * *(int *)(v134 + 4 * (int)((2 * v122) | 1)));
            uint64_t v130 = (unsigned int *)(v134 + 8 * v122);
            goto LABEL_146;
          }
          if (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceCompositeValueTag(*(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(void *)(*(void *)(*(void *)(*(void *)this + 40)+ 8 * v123)+ 456)+ 8 * *(int *)(v120 + 4 * v121)), *v78))break; {
          if (!v184)
          }
          {
            uint64_t v192 = 0;
            uint64_t v193 = 0;
            uint64_t v143 = (__int16 *)v195;
            uint64_t v194 = 0;
LABEL_152:
            if (v124 == 9)
            {
              OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>((uint64_t)this, v200[v121], *(_DWORD **)(*((void *)v95 + 4) + 8 * v121));
            }
            else if (v124 == 6)
            {
              OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(this, v204[v121], *(_DWORD **)(*((void *)v95 + 4) + 8 * v121), v122, v123, v143, v121);
            }
            uint64_t v133 = 0;
            LOBYTE(v132) = 0;
            goto LABEL_157;
          }
          int v132 = v182;
          if (!v181) {
            goto LABEL_143;
          }
          OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, *(void *)(*((void *)v95 + 4) + 8 * v121), v122, v123, 0, v121);
          uint64_t v133 = 0x2000000000;
          LOBYTE(v132) = v182;
LABEL_157:
          if ((v124 - 1) > 8) {
            uint64_t v144 = -1;
          }
          else {
            uint64_t v144 = qword_234415F68[v124 - 1];
          }
          *(void *)(*((void *)v95 + 4) + 8 * v121) += 4 * v144;
          uint64_t v145 = *((void *)v95 + 8);
          uint64_t v146 = *(unint64_t **)(v145 + 8 * v121);
          *(void *)(v145 + 8 * v121) = v146 + 1;
          *uint64_t v146 = v133 | v187 & 0xFFFFF01FFFFFFFFFLL | ((unint64_t)(v132 & 0xF) << 40);
LABEL_161:
          ++v121;
          uint64_t v120 = *((void *)this + 18);
          if (v121 >= (int)((unint64_t)(*((void *)this + 19) - v120) >> 2)) {
            goto LABEL_162;
          }
        }
        if (!OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::IsPatchRegular(this, v123, v122, v121))
        {
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          uint64_t v194 = 0;
          uint64_t v143 = (__int16 *)&v192;
          OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetIrregularPatchCornerSpans((uint64_t)this, *v79, *v78, (uint64_t)&v192, v121);
          goto LABEL_152;
        }
        int v132 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GetRegularPatchBoundaryMask(this, *v79, *v78, v121);
LABEL_143:
        OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherRegularPatchPoints(this, *(void *)(*((void *)v95 + 4) + 8 * v121), v122, v123, v132, v121);
        uint64_t v133 = 0x2000000000;
        goto LABEL_157;
      }
LABEL_162:
      uint64_t v77 = v179 + 1;
      uint64_t v76 = *((void *)this + 9);
    }
    while (v179 + 1 < (int)((unint64_t)(*((void *)this + 10) - v76) >> 3));
  }
  OpenSubdiv::v3_1_1::Far::PatchTable::populateVaryingVertices((uint64_t)a2);
  int v152 = *((unsigned char *)this + 9) & 7;
  switch(v152)
  {
    case 2:
      *((void *)a2 + 16) = 0;
      *((void *)a2 + 17) = 0;
      break;
    case 4:
      OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::Finalize(0, *(_DWORD *)a2, (std::vector<int> *)((char *)a2 + 80), (std::vector<int> *)((char *)a2 + 104), (unsigned int *)0xFFFFFFFFLL);
      break;
    case 3:
      *((void *)a2 + 16) = 0;
      *((void *)a2 + 17) = 0;
      break;
  }
  uint64_t v153 = *((void *)this + 18);
  uint64_t v154 = *((void *)this + 19);
  if (v153 != v154)
  {
    int v155 = (void *)((char *)a2 + 200);
    std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::resize((uint64_t)v155, (v154 - v153) >> 2);
    if ((int)((*((void *)this + 19) - *((void *)this + 18)) >> 2) >= 1)
    {
      uint64_t v156 = 0;
      while (1)
      {
        uint64_t v157 = v196[v156];
        if ((int)((*(void *)(v157 + 24) - *(void *)(v157 + 16)) >> 2) < 1)
        {
          (*(void (**)(uint64_t))(*(void *)v157 + 8))(v196[v156]);
          v196[v156] = 0;
        }
        else
        {
          OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit((OpenSubdiv::v3_1_1::Far::StencilTable *)v196[v156]);
          std::vector<unsigned int>::resize((std::vector<int> *)(v157 + 40), (int)((uint64_t)(*(void *)(v157 + 24) - *(void *)(v157 + 16)) >> 2));
          int v158 = *(int **)(v157 + 16);
          unint64_t v159 = *(void *)(v157 + 24) - (void)v158;
          if ((int)(v159 >> 2) >= 1)
          {
            int v160 = 0;
            uint64_t v161 = *(_DWORD **)(v157 + 40);
            uint64_t v162 = (v159 >> 2);
            do
            {
              *v161++ = v160;
              int v163 = *v158++;
              v160 += v163;
              --v162;
            }
            while (v162);
          }
        }
        int v164 = *((unsigned char *)this + 9) & 7;
        if (v164 != 2) {
          break;
        }
        v170 = (void *)v204[v156];
        if (v170)
        {
          int v171 = (void *)v170[4];
          if (v171)
          {
            v170[5] = v171;
            operator delete(v171);
          }
          unsigned int v168 = v170;
          unsigned int v169 = 1232653951;
LABEL_195:
          MEMORY[0x237DBCBD0](v168, v169 | 0x1070C4000000000);
        }
LABEL_196:
        *(void *)(*v155 + 8 * v156) = v196[v156];
        if (++v156 >= (int)((*((void *)this + 19) - *((void *)this + 18)) >> 2)) {
          goto LABEL_197;
        }
      }
      if (v164 != 3) {
        goto LABEL_196;
      }
      __int16 v165 = (void *)v200[v156];
      if (!v165) {
        goto LABEL_196;
      }
      BOOL v166 = (void *)v165[8];
      if (v166)
      {
        v165[9] = v166;
        operator delete(v166);
      }
      BOOL v167 = (void *)v165[5];
      if (v167)
      {
        v165[6] = v167;
        operator delete(v167);
      }
      unsigned int v168 = v165;
      unsigned int v169 = 537674454;
      goto LABEL_195;
    }
  }
LABEL_197:
  operator delete(v199);
  operator delete(__p);
  operator delete(v207);
  uint64_t v172 = 288;
  do
  {
    char v173 = (char *)&v208 + v172;
    operator delete((&v207)[(unint64_t)v172 / 8]);
    *((void *)v173 - 4) = v173 - 16;
    *((_DWORD *)v173 - 5) = 1;
    operator delete(*(void **)((char *)&__p + v172));
    *((void *)v173 - 8) = v173 - 48;
    *((_DWORD *)v173 - 13) = 1;
    v172 -= 96;
  }
  while (v172);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  PatchPoints = (int *)OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(a2);
  uint64_t result = v4;
  if ((int)v4 >= 1)
  {
    uint64_t v7 = v4;
    do
    {
      int v8 = *PatchPoints++;
      *a3++ = v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTableFactory::BuilderContext::GatherIrregularPatchPoints<OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory>(void *a1, uint64_t a2, _DWORD *a3, int a4, int a5, __int16 *a6, unsigned int a7)
{
  if ((a7 & 0x80000000) != 0)
  {
    int v9 = a1 + 12;
    unsigned int v10 = -1;
  }
  else
  {
    int v9 = (void *)(a1[15] + 24 * a7);
    unsigned int v10 = *(_DWORD *)(a1[18] + 4 * a7);
  }
  PatchPoints = (int *)OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::GetPatchPoints(a2, *(void *)(*(void *)(*a1 + 40) + 8 * a5), a4, a6, *(_DWORD *)(*v9 + 4 * a5), v10);
  uint64_t result = v11;
  if ((int)v11 >= 1)
  {
    uint64_t v14 = v11;
    do
    {
      int v15 = *PatchPoints++;
      *a3++ = v15;
      --v14;
    }
    while (v14);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::StencilTable::shrinkToFit(OpenSubdiv::v3_1_1::Far::StencilTable *this)
{
  std::vector<float>::vector(&v11, (const std::vector<int> *)((char *)this + 16));
  unint64_t v2 = (int *)*((void *)this + 2);
  *((_OWORD *)this + 1) = *(_OWORD *)&v11.__begin_;
  int64_t value = v11.__end_cap_.__value_;
  uint64_t v4 = (int *)*((void *)this + 4);
  v11.__begin_ = v2;
  v11.__end_cap_.__value_ = v4;
  *((void *)this + 4) = value;
  if (v2)
  {
    v11.__end_ = v2;
    operator delete(v2);
  }
  std::vector<float>::vector(&v11, (const std::vector<int> *)((char *)this + 64));
  uint64_t v5 = (int *)*((void *)this + 8);
  *((_OWORD *)this + 4) = *(_OWORD *)&v11.__begin_;
  uint64_t v6 = v11.__end_cap_.__value_;
  uint64_t v7 = (int *)*((void *)this + 10);
  v11.__begin_ = v5;
  v11.__end_cap_.__value_ = v7;
  *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v6;
  if (v5)
  {
    v11.__end_ = v5;
    operator delete(v5);
  }
  std::vector<float>::vector(&v11, (const std::vector<int> *)((char *)this + 88));
  int v8 = (int *)*((void *)this + 11);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)&v11.__begin_;
  int v9 = v11.__end_cap_.__value_;
  unsigned int v10 = (int *)*((void *)this + 13);
  v11.__begin_ = v8;
  v11.__end_cap_.__value_ = v10;
  *((void *)this + 13) = v9;
  if (v8)
  {
    v11.__end_ = v8;
    operator delete(v8);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    int v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    int v16 = &v14[8 * a2];
    int v18 = (char *)*a1;
    unsigned int v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      unsigned int v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

OpenSubdiv::v3_1_1::Osd::CpuPatchTable *OpenSubdiv::v3_1_1::Osd::CpuPatchTable::CpuPatchTable(OpenSubdiv::v3_1_1::Osd::CpuPatchTable *this, const OpenSubdiv::v3_1_1::Far::PatchTable *a2)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v186 = (char **)((char *)this + 48);
  __int16 v180 = (char **)((char *)this + 72);
  *((_OWORD *)this + 6) = 0u;
  int v181 = (std::vector<int> *)((char *)this + 96);
  int v182 = (std::vector<int> *)((char *)this + 24);
  *((_OWORD *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0u;
  BOOL v184 = (void *)((char *)this + 144);
  *((_OWORD *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  uint64_t v4 = *((void *)a2 + 1);
  int v5 = -858993459 * ((*((void *)a2 + 2) - v4) >> 2);
  if (v5 < 1)
  {
    std::vector<int>::size_type v13 = 0;
    int v183 = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = -858993459 * ((*((void *)a2 + 2) - v4) >> 2);
    unint64_t v9 = (int *)(v4 + 4);
    do
    {
      int v10 = *(v9 - 1) - 1;
      if (v10 > 8) {
        int v11 = -1;
      }
      else {
        int v11 = dword_234415FB0[v10];
      }
      int v12 = *v9;
      v9 += 5;
      v6 += v12;
      v7 += v11 * v12;
      --v8;
    }
    while (v8);
    int v183 = v6;
    std::vector<int>::size_type v13 = v7;
  }
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve((char **)this, v5);
  std::vector<int>::reserve(v182, v13);
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve(v180, v5);
  int v14 = *((_DWORD *)a2 + 36) - 1;
  if (v14 > 8) {
    int v15 = -1;
  }
  else {
    int v15 = dword_234415FB0[v14];
  }
  std::vector<int>::reserve(v181, v15 * v183);
  unint64_t v187 = a2;
  uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
  unint64_t v17 = (int)v16;
  int v18 = (void *)*((void *)this + 15);
  uint64_t v19 = (void *)*((void *)this + 16);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v19 - v18);
  BOOL v21 = (int)v16 >= v20;
  unint64_t v22 = (int)v16 - v20;
  if ((int)v16 > v20)
  {
    uint64_t v23 = *((void *)this + 17);
    if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v19) >> 3) >= v22)
    {
      bzero(*((void **)this + 16), 24 * ((24 * v22 - 24) / 0x18) + 24);
      *((void *)this + 16) = &v19[3 * ((24 * v22 - 24) / 0x18) + 3];
      int v35 = v187;
      goto LABEL_40;
    }
    if (v16 << 32 < 0) {
      goto LABEL_164;
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v18) >> 3);
    unint64_t v25 = 0x5555555555555556 * ((v23 - (uint64_t)v18) >> 3);
    if (v25 > v17) {
      unint64_t v17 = v25;
    }
    if (v24 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v17 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_165;
    }
    uint64_t v26 = 3 * v17;
    int v27 = (char *)operator new(24 * v17);
    uint64_t v28 = &v27[8 * (v19 - v18)];
    uint64_t v29 = &v27[8 * v26];
    size_t v30 = 24 * ((24 * v22 - 24) / 0x18) + 24;
    bzero(v28, v30);
    uint64_t v31 = &v28[v30];
    if (v19 == v18)
    {
      *((void *)this + 15) = v28;
      *((void *)this + 16) = v31;
      *((void *)this + 17) = v29;
    }
    else
    {
      do
      {
        long long v32 = *(_OWORD *)(v19 - 3);
        v19 -= 3;
        *(_OWORD *)(v28 - 24) = v32;
        v28 -= 24;
        *((void *)v28 + 2) = v19[2];
        *uint64_t v19 = 0;
        v19[1] = 0;
        unsigned char v19[2] = 0;
      }
      while (v19 != v18);
      uint64_t v19 = (void *)*((void *)this + 15);
      uint64_t v33 = (void *)*((void *)this + 16);
      *((void *)this + 15) = v28;
      *((void *)this + 16) = v31;
      *((void *)this + 17) = v29;
      if (v33 != v19)
      {
        uint64_t v34 = v33;
        int v35 = v187;
        do
        {
          unint64_t v37 = (void *)*(v34 - 3);
          v34 -= 3;
          uint64_t v36 = v37;
          if (v37)
          {
            *(v33 - 2) = v36;
            operator delete(v36);
          }
          uint64_t v33 = v34;
        }
        while (v34 != v19);
        if (!v19) {
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v19);
        goto LABEL_40;
      }
    }
    int v35 = v187;
    if (!v19) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  int v35 = v187;
  if (!v21)
  {
    uint64_t v38 = &v18[3 * (int)v16];
    if (v19 != v38)
    {
      unint64_t v39 = (void *)*((void *)this + 16);
      do
      {
        uint64_t v41 = (void *)*(v39 - 3);
        v39 -= 3;
        unsigned int v40 = v41;
        if (v41)
        {
          *(v19 - 2) = v40;
          operator delete(v40);
        }
        uint64_t v19 = v39;
      }
      while (v39 != v38);
    }
    *((void *)this + 16) = v38;
  }
LABEL_40:
  std::vector<std::vector<unsigned long>>::resize(v184, (int)(-1227133513 * ((*((void *)v35 + 23) - *((void *)v35 + 22)) >> 3)));
  uint64_t v42 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v35 + 23) - *((void *)v35 + 22)) >> 3);
  unint64_t v43 = (int)v42;
  uint64_t v44 = (void *)*((void *)this + 21);
  uint64_t v45 = (void *)*((void *)this + 22);
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v45 - v44);
  BOOL v47 = (int)v42 >= v46;
  unint64_t v48 = (int)v42 - v46;
  if ((int)v42 > v46)
  {
    uint64_t v49 = *((void *)this + 23);
    if (0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v45) >> 3) >= v48)
    {
      size_t v68 = 24 * ((24 * v48 - 24) / 0x18) + 24;
      bzero(*((void **)this + 22), v68);
      *((void *)this + 22) = (char *)v45 + v68;
      unsigned int v61 = v187;
      goto LABEL_68;
    }
    if (((v42 << 32) & 0x8000000000000000) == 0)
    {
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v44) >> 3);
      unint64_t v51 = 0x5555555555555556 * ((v49 - (uint64_t)v44) >> 3);
      if (v51 > v43) {
        unint64_t v43 = v51;
      }
      if (v50 >= 0x555555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
      }
      if (v43 <= 0xAAAAAAAAAAAAAAALL)
      {
        uint64_t v52 = 3 * v43;
        uint64_t v53 = (char *)operator new(24 * v43);
        uint64_t v54 = &v53[8 * (v45 - v44)];
        uint64_t v55 = &v53[8 * v52];
        size_t v56 = 24 * ((24 * v48 - 24) / 0x18) + 24;
        bzero(v54, v56);
        int v57 = &v54[v56];
        if (v45 == v44)
        {
          *((void *)this + 21) = v54;
          *((void *)this + 22) = v57;
          *((void *)this + 23) = v55;
        }
        else
        {
          do
          {
            long long v58 = *(_OWORD *)(v45 - 3);
            v45 -= 3;
            *(_OWORD *)(v54 - 24) = v58;
            v54 -= 24;
            *((void *)v54 + 2) = v45[2];
            void *v45 = 0;
            v45[1] = 0;
            v45[2] = 0;
          }
          while (v45 != v44);
          uint64_t v45 = (void *)*((void *)this + 21);
          uint64_t v59 = (void *)*((void *)this + 22);
          *((void *)this + 21) = v54;
          *((void *)this + 22) = v57;
          *((void *)this + 23) = v55;
          if (v59 != v45)
          {
            uint64_t v60 = v59;
            unsigned int v61 = v187;
            do
            {
              int v63 = (void *)*(v60 - 3);
              v60 -= 3;
              unsigned int v62 = v63;
              if (v63)
              {
                *(v59 - 2) = v62;
                operator delete(v62);
              }
              uint64_t v59 = v60;
            }
            while (v60 != v45);
            if (!v45) {
              goto LABEL_68;
            }
LABEL_67:
            operator delete(v45);
            goto LABEL_68;
          }
        }
        unsigned int v61 = v187;
        if (!v45) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
LABEL_165:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_164:
    abort();
  }
  unsigned int v61 = v187;
  if (!v47)
  {
    uint64_t v64 = &v44[3 * (int)v42];
    if (v45 != v64)
    {
      uint64_t v65 = (void *)*((void *)this + 22);
      do
      {
        unint64_t v67 = (void *)*(v65 - 3);
        v65 -= 3;
        uint64_t v66 = v67;
        if (v67)
        {
          *(v45 - 2) = v66;
          operator delete(v66);
        }
        uint64_t v45 = v65;
      }
      while (v65 != v64);
    }
    *((void *)this + 22) = v64;
  }
LABEL_68:
  unint64_t v69 = v61;
  if ((int)(-1227133513 * ((*((void *)v61 + 23) - *((void *)v61 + 22)) >> 3)) >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 4;
    do
    {
      std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve((char **)(*((void *)this + 15) + v70), v5);
      int v73 = *(_DWORD *)(*((void *)v69 + 22) + v72) - 1;
      if (v73 > 8) {
        int v74 = -1;
      }
      else {
        int v74 = dword_234415FB0[v73];
      }
      std::vector<int>::reserve((std::vector<int> *)(*((void *)this + 18) + v70), v74 * v183);
      std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve((char **)(*((void *)this + 21) + v70), v183);
      ++v71;
      unint64_t v69 = v187;
      v70 += 24;
      v72 += 56;
    }
    while (v71 < (int)(-1227133513 * ((*((void *)v187 + 23) - *((void *)v187 + 22)) >> 3)));
  }
  std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve(v186, v183);
  int v75 = v183;
  if (v5 >= 1)
  {
    uint64_t v76 = v69;
    uint64_t v77 = 0;
    do
    {
      long long v78 = (int *)(*((void *)v76 + 1) + 20 * v77);
      int v80 = *v78;
      int v79 = v78[1];
      uint64_t v81 = (*((void *)this + 4) - *((void *)this + 3)) >> 2;
      int v82 = -1431655765 * ((*((void *)this + 7) - *((void *)this + 6)) >> 2);
      int v83 = (_DWORD *)*((void *)this + 1);
      unint64_t v84 = *((void *)this + 2);
      if ((unint64_t)v83 >= v84)
      {
        uint64_t v86 = ((uint64_t)v83 - *(void *)this) >> 4;
        unint64_t v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 60) {
          goto LABEL_164;
        }
        uint64_t v88 = v84 - *(void *)this;
        if (v88 >> 3 > v87) {
          unint64_t v87 = v88 >> 3;
        }
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v89 = v87;
        }
        int v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v89);
        int v92 = &v90[16 * v86];
        *(_DWORD *)int v92 = v80;
        *((_DWORD *)v92 + 1) = v79;
        *((_DWORD *)v92 + 2) = v81;
        *((_DWORD *)v92 + 3) = v82;
        uint64_t v94 = *(void *)this;
        uint64_t v93 = *((void *)this + 1);
        uint64_t v95 = v92;
        if (v93 == *(void *)this)
        {
          uint64_t v76 = v187;
        }
        else
        {
          uint64_t v76 = v187;
          do
          {
            int v96 = *(_DWORD *)(v93 - 16);
            v93 -= 16;
            *((_DWORD *)v95 - 4) = v96;
            v95 -= 16;
            uint64_t v97 = *(void *)(v93 + 4);
            *((_DWORD *)v95 + 3) = *(_DWORD *)(v93 + 12);
            *(void *)(v95 + 4) = v97;
          }
          while (v93 != v94);
          uint64_t v93 = *(void *)this;
        }
        uint64_t v85 = v92 + 16;
        *(void *)this = v95;
        *((void *)this + 1) = v92 + 16;
        *((void *)this + 2) = &v90[16 * v91];
        if (v93) {
          operator delete((void *)v93);
        }
      }
      else
      {
        *int v83 = v80;
        v83[1] = v79;
        uint64_t v85 = v83 + 4;
        v83[2] = v81;
        v83[3] = v82;
        uint64_t v76 = v187;
      }
      *((void *)this + 1) = v85;
      uint64_t PatchArrayVertices = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices(v76, v77);
      std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>((void **)&v182->__begin_, *((void *)this + 4), PatchArrayVertices, &PatchArrayVertices[4 * v99], v99);
      int v100 = *((_DWORD *)v76 + 36);
      unint64_t v101 = *((void *)this + 10);
      unint64_t v102 = *((void *)this + 11);
      if (v101 >= v102)
      {
        uint64_t v104 = (uint64_t)(v101 - (void)*v180) >> 4;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 60) {
          goto LABEL_164;
        }
        uint64_t v106 = v102 - (void)*v180;
        if (v106 >> 3 > v105) {
          unint64_t v105 = v106 >> 3;
        }
        if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v107 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v107 = v105;
        }
        uint64_t v108 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v107);
        uint64_t v110 = &v108[16 * v104];
        *(_DWORD *)uint64_t v110 = v100;
        *((_DWORD *)v110 + 1) = v75;
        *((void *)v110 + 1) = 0;
        unint64_t v112 = (char *)*((void *)this + 9);
        v111 = (char *)*((void *)this + 10);
        uint64_t v113 = v110;
        if (v111 != v112)
        {
          do
          {
            int v114 = *((_DWORD *)v111 - 4);
            v111 -= 16;
            *((_DWORD *)v113 - 4) = v114;
            v113 -= 16;
            uint64_t v115 = *(void *)(v111 + 4);
            *((_DWORD *)v113 + 3) = *((_DWORD *)v111 + 3);
            *(void *)(v113 + 4) = v115;
          }
          while (v111 != v112);
          v111 = *v180;
        }
        uint64_t v103 = v110 + 16;
        *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v113;
        *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v110 + 16;
        *((void *)this + 11) = &v108[16 * v109];
        if (v111) {
          operator delete(v111);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v101 = v100;
        *(_DWORD *)(v101 + 4) = v75;
        uint64_t v103 = (char *)(v101 + 16);
        *(void *)(v101 + 8) = 0;
      }
      *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v103;
      *(void *)BOOL v185 = v77;
      PatchArrayVaryingVertices = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVaryingVertices(v76, v77);
      std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>((void **)&v181->__begin_, *((void *)this + 13), PatchArrayVaryingVertices, &PatchArrayVaryingVertices[4 * v117], v117);
      uint64_t v118 = *((void *)v76 + 22);
      if ((int)(-1227133513 * ((unint64_t)(*((void *)v76 + 23) - v118) >> 3)) >= 1)
      {
        uint64_t v119 = 0;
        do
        {
          int v120 = *(_DWORD *)(v118 + 56 * (int)v119 + 4);
          uint64_t v121 = (char **)(*((void *)this + 15) + 24 * v119);
          uint64_t v123 = v121 + 1;
          unint64_t v122 = (unint64_t)v121[1];
          unint64_t v124 = (unint64_t)v121[2];
          if (v122 >= v124)
          {
            uint64_t v126 = (uint64_t)(v122 - (void)*v121) >> 4;
            unint64_t v127 = v126 + 1;
            if ((unint64_t)(v126 + 1) >> 60) {
              goto LABEL_164;
            }
            uint64_t v128 = v124 - (void)*v121;
            if (v128 >> 3 > v127) {
              unint64_t v127 = v128 >> 3;
            }
            if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v129 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v129 = v127;
            }
            uint64_t v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v129);
            int v132 = &v130[16 * v126];
            *(_DWORD *)int v132 = v120;
            *((_DWORD *)v132 + 1) = v75;
            *((void *)v132 + 1) = 0;
            uint64_t v133 = *v123;
            uint64_t v134 = *v121;
            uint64_t v135 = v132;
            if (*v123 != *v121)
            {
              do
              {
                int v136 = *((_DWORD *)v133 - 4);
                v133 -= 16;
                *((_DWORD *)v135 - 4) = v136;
                v135 -= 16;
                uint64_t v137 = *(void *)(v133 + 4);
                *((_DWORD *)v135 + 3) = *((_DWORD *)v133 + 3);
                *(void *)(v135 + 4) = v137;
              }
              while (v133 != v134);
              uint64_t v133 = *v121;
            }
            *uint64_t v121 = v135;
            uint64_t v125 = v132 + 16;
            *uint64_t v123 = v132 + 16;
            v121[2] = &v130[16 * v131];
            if (v133) {
              operator delete(v133);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v122 = v120;
            *(_DWORD *)(v122 + 4) = v75;
            uint64_t v125 = (char *)(v122 + 16);
            *(void *)(v122 + 8) = 0;
          }
          uint64_t v76 = v187;
          *uint64_t v123 = v125;
          PatchArrayFVarValues = (char *)OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarValues(v187, v185[0], v119);
          std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>((void **)(*v184 + 24 * v119), *(void *)(*v184 + 24 * v119 + 8), PatchArrayFVarValues, &PatchArrayFVarValues[4 * v139], v139);
          uint64_t v118 = *((void *)v187 + 22);
          if (v75 >= 1)
          {
            uint64_t v140 = 0;
            uint64_t v141 = *(void *)(v118 + 56 * (int)v119 + 32)
                 + 8 * *(int *)(*((void *)v187 + 1) + 20 * *(void *)v185 + 12);
            do
            {
              uint64_t v142 = *(void *)(v141 + 8 * v140);
              uint64_t v143 = (unint64_t *)(*((void *)this + 21) + 24 * v119);
              uint64_t v145 = (_DWORD **)(v143 + 1);
              unint64_t v144 = v143[1];
              char v147 = v143 + 2;
              unint64_t v146 = v143[2];
              if (v144 >= v146)
              {
                unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v144 - *v143) >> 2);
                unint64_t v150 = v149 + 1;
                if (v149 + 1 > 0x1555555555555555) {
                  goto LABEL_164;
                }
                unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *v143) >> 2);
                if (2 * v151 > v150) {
                  unint64_t v150 = 2 * v151;
                }
                if (v151 >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v152 = 0x1555555555555555;
                }
                else {
                  unint64_t v152 = v150;
                }
                if (v152) {
                  unint64_t v152 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::PatchParam>>(v152);
                }
                else {
                  uint64_t v153 = 0;
                }
                unint64_t v154 = v152 + 12 * v149;
                *(void *)unint64_t v154 = v142;
                *(_DWORD *)(v154 + 8) = 0;
                int v155 = *v145;
                uint64_t v156 = (_DWORD *)*v143;
                unint64_t v157 = v154;
                if (*v145 != (_DWORD *)*v143)
                {
                  do
                  {
                    uint64_t v158 = *(void *)(v155 - 3);
                    v155 -= 3;
                    int v159 = v155[2];
                    *(void *)(v157 - 12) = v158;
                    v157 -= 12;
                    *(_DWORD *)(v157 + 8) = v159;
                  }
                  while (v155 != v156);
                  int v155 = (_DWORD *)*v143;
                }
                unint64_t *v143 = v157;
                int v148 = (_DWORD *)(v154 + 12);
                os_unfair_lock_s *v145 = (_DWORD *)(v154 + 12);
                void *v147 = v152 + 12 * v153;
                if (v155) {
                  operator delete(v155);
                }
              }
              else
              {
                *(void *)unint64_t v144 = v142;
                *(_DWORD *)(v144 + 8) = 0;
                int v148 = (_DWORD *)(v144 + 12);
              }
              os_unfair_lock_s *v145 = v148;
              ++v140;
            }
            while (v140 != v183);
            uint64_t v76 = v187;
            uint64_t v118 = *((void *)v187 + 22);
            int v75 = v183;
          }
          ++v119;
        }
        while (v119 < (int)(-1227133513 * ((unint64_t)(*((void *)v76 + 23) - v118) >> 3)));
      }
      int v160 = *(_DWORD *)(*((void *)v76 + 1) + 20 * *(void *)v185 + 4);
      if (v160 >= 1)
      {
        int v161 = 0;
        unint64_t v162 = *((void *)this + 7);
        do
        {
          unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v162 - (void)*v186) >> 2);
          uint64_t v164 = *((void *)v76 + 28);
          int v165 = 0;
          if ((int)v163 < (int)((unint64_t)(*((void *)v76 + 29) - v164) >> 2))
          {
            uint64_t v166 = *(unsigned int *)(v164 + 4 * (int)v163);
            if ((v166 & 0x80000000) == 0) {
              int v165 = *(_DWORD *)(*((void *)v76 + 31) + 4 * v166);
            }
          }
          uint64_t v167 = *(void *)(*((void *)v76 + 7) + 8 * (int)v163);
          unint64_t v168 = *((void *)this + 8);
          if (v162 >= v168)
          {
            if (v163 + 1 > 0x1555555555555555) {
              goto LABEL_164;
            }
            unint64_t v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - (void)*v186) >> 2);
            uint64_t v170 = 2 * v169;
            if (2 * v169 <= v163 + 1) {
              uint64_t v170 = v163 + 1;
            }
            if (v169 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v171 = 0x1555555555555555;
            }
            else {
              unint64_t v171 = v170;
            }
            if (v171) {
              unint64_t v171 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::PatchParam>>(v171);
            }
            else {
              uint64_t v172 = 0;
            }
            unint64_t v173 = v171 + 12 * v163;
            *(void *)unint64_t v173 = v167;
            *(_DWORD *)(v173 + 8) = v165;
            uint64_t v175 = (char *)*((void *)this + 6);
            uint64_t v174 = (char *)*((void *)this + 7);
            unint64_t v176 = v173;
            if (v174 != v175)
            {
              do
              {
                uint64_t v177 = *(void *)(v174 - 12);
                v174 -= 12;
                int v178 = *((_DWORD *)v174 + 2);
                *(void *)(v176 - 12) = v177;
                v176 -= 12;
                *(_DWORD *)(v176 + 8) = v178;
              }
              while (v174 != v175);
              uint64_t v174 = *v186;
            }
            unint64_t v162 = v173 + 12;
            *((void *)this + 6) = v176;
            *((void *)this + 7) = v173 + 12;
            *((void *)this + 8) = v171 + 12 * v172;
            if (v174) {
              operator delete(v174);
            }
          }
          else
          {
            *(void *)unint64_t v162 = v167;
            *(_DWORD *)(v162 + 8) = v165;
            v162 += 12;
          }
          *((void *)this + 7) = v162;
          ++v161;
        }
        while (v161 != v160);
      }
      uint64_t v77 = *(void *)v185 + 1;
      int v75 = v183;
    }
    while (*(void *)v185 + 1 != v5);
  }
  return this;
}

void std::vector<OpenSubdiv::v3_1_1::Osd::PatchArray>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (a1[2] - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v3 = a1[1] - *a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(a2);
    int v5 = &v4[v3];
    int v7 = &v4[16 * v6];
    unint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        int v11 = *((_DWORD *)v8 - 4);
        v8 -= 16;
        *((_DWORD *)v10 - 4) = v11;
        v10 -= 16;
        uint64_t v12 = *(void *)(v8 + 4);
        *((_DWORD *)v10 + 3) = *((_DWORD *)v8 + 3);
        *(void *)(v10 + 4) = v12;
      }
      while (v8 != v9);
      uint64_t v8 = *a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<OpenSubdiv::v3_1_1::Osd::PatchParam>::reserve(char **a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      abort();
    }
    uint64_t v3 = (a1[1] - *a1) / 12;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::PatchParam>>(a2);
    int v5 = &v4[12 * v3];
    int v7 = &v4[12 * v6];
    unint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *(void *)(v8 - 12);
        v8 -= 12;
        int v12 = *((_DWORD *)v8 + 2);
        *(void *)(v10 - 12) = v11;
        v10 -= 12;
        *((_DWORD *)v10 + 2) = v12;
      }
      while (v8 != v9);
      uint64_t v8 = *a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::PatchParam>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(12 * a1);
}

void std::vector<int>::__insert_with_size[abi:nn180100]<int const*,int const*>(void **a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  uint64_t v8 = (char *)*a1;
  uint64_t v9 = a2 - (void)*a1;
  int v10 = (char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFFCLL);
  std::vector<int>::size_type v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  int v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (a5 > (uint64_t)&v13[-v14] >> 2)
  {
    unint64_t v15 = a5 + ((uint64_t)(v14 - (void)v8) >> 2);
    if (v15 >> 62) {
      abort();
    }
    uint64_t v16 = v9 >> 2;
    uint64_t v17 = v12 - v8;
    uint64_t v18 = v17 >> 1;
    if (v17 >> 1 <= v15) {
      uint64_t v18 = v15;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19) {
      unint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v11, v19);
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v29 = &v20[4 * v16];
    size_t v30 = &v29[4 * a5];
    uint64_t v31 = 4 * a5;
    long long v32 = v29;
    do
    {
      int v33 = *(_DWORD *)v6;
      v6 += 4;
      *(_DWORD *)long long v32 = v33;
      v32 += 4;
      v31 -= 4;
    }
    while (v31);
    uint64_t v34 = (char *)*a1;
    if (*a1 != v10)
    {
      int v35 = v10;
      do
      {
        int v36 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v29 - 1) = v36;
        v29 -= 4;
      }
      while (v35 != v34);
    }
    unint64_t v37 = &v20[4 * v19];
    uint64_t v38 = a1[1];
    uint64_t v39 = v38 - v10;
    if (v38 != v10) {
      memmove(v30, v10, v38 - v10);
    }
    unsigned int v40 = *a1;
    *a1 = v29;
    a1[1] = &v30[v39];
    a1[2] = v37;
    if (v40)
    {
      operator delete(v40);
    }
    return;
  }
  uint64_t v21 = (uint64_t)(v14 - (void)v10) >> 2;
  if (v21 >= a5)
  {
    unint64_t v22 = &__src[4 * a5];
    unint64_t v24 = *(char **)(v11 - 8);
LABEL_17:
    unint64_t v25 = &v10[4 * a5];
    uint64_t v26 = (int *)&v24[-4 * a5];
    int v27 = v24;
    if ((unint64_t)v26 < v14)
    {
      int v27 = v24;
      do
      {
        int v28 = *v26++;
        *(_DWORD *)int v27 = v28;
        v27 += 4;
      }
      while ((unint64_t)v26 < v14);
    }
    a1[1] = v27;
    if (v24 != v25) {
      memmove(&v24[-4 * ((v24 - v25) >> 2)], v10, v24 - v25);
    }
    if (v22 != v6)
    {
      memmove(v10, v6, v22 - v6);
    }
    return;
  }
  unint64_t v22 = &__src[4 * v21];
  int64_t v23 = a4 - v22;
  if (a4 != v22) {
    memmove(*(void **)(v11 - 8), &__src[4 * v21], a4 - v22);
  }
  unint64_t v24 = (char *)(v14 + v23);
  a1[1] = (void *)(v14 + v23);
  if ((uint64_t)(v14 - (void)v10) >= 1) {
    goto LABEL_17;
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::~PatchTable(OpenSubdiv::v3_1_1::Far::PatchTable *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 17);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v5 = *((void *)this + 25);
  uint64_t v4 = *((void *)this + 26);
  if ((int)((unint64_t)(v4 - v5) >> 3) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v5 = *((void *)this + 25);
        uint64_t v4 = *((void *)this + 26);
      }
      ++v6;
    }
    while (v6 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  uint64_t v8 = (void *)*((void *)this + 31);
  if (v8)
  {
    *((void *)this + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 28);
  if (v9)
  {
    *((void *)this + 2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 25);
  if (v10)
  {
    *((void *)this + 26) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 22);
  if (v11)
  {
    int v12 = (void *)*((void *)this + 23);
    std::vector<int>::size_type v13 = (void *)*((void *)this + 22);
    if (v12 != v11)
    {
      do
      {
        v12 -= 7;
        std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100]((uint64_t)this + 192, v12);
      }
      while (v12 != v11);
      std::vector<int>::size_type v13 = (void *)*((void *)this + 22);
    }
    *((void *)this + 23) = v11;
    operator delete(v13);
  }
  unint64_t v14 = (void *)*((void *)this + 19);
  if (v14)
  {
    *((void *)this + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)*((void *)this + 13);
  if (v15)
  {
    *((void *)this + 14) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 10);
  if (v16)
  {
    *((void *)this + 11) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 7);
  if (v17)
  {
    *((void *)this + 8) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 4);
  if (v18)
  {
    *((void *)this + 5) = v18;
    operator delete(v18);
  }
  unint64_t v19 = (void *)*((void *)this + 1);
  if (v19)
  {
    *((void *)this + 2) = v19;
    operator delete(v19);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[20 * v8];
    uint64_t v11 = *a1;
    int v10 = a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *((_DWORD *)v10 - 5);
        v10 -= 20;
        *((_DWORD *)v12 - 5) = v13;
        v12 -= 20;
        *(_OWORD *)(v12 + 4) = *(_OWORD *)(v10 + 4);
      }
      while (v10 != v11);
      int v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateVaryingVertices(uint64_t a1, _DWORD *a2, int a3)
{
  *(_DWORD *)(a1 + 144) = *a2;
  unsigned int v3 = *a2 - 1;
  if (v3 > 8) {
    int v4 = -1;
  }
  else {
    int v4 = dword_234415FD8[v3];
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 152), v4 * a3);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::resize(uint64_t a1, unint64_t a2)
{
  unsigned int v3 = *(void **)(a1 + 8);
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - *(void *)a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 56 * a2;
    while (v3 != (void *)v7)
    {
      v3 -= 7;
      std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100](a1 + 16, v3);
    }
    *(void *)(a1 + 8) = v7;
  }
}

void OpenSubdiv::v3_1_1::Far::PatchTable::allocateFVarPatchChannelValues(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 176);
  *(_DWORD *)(v5 + 56 * a4 + 4) = *a2;
  unsigned int v6 = *a2 - 1;
  if (v6 > 8) {
    int v7 = -1;
  }
  else {
    int v7 = dword_234415FD8[v6];
  }
  uint64_t v8 = v5 + 56 * a4;
  std::vector<unsigned int>::resize((std::vector<int> *)(v8 + 8), v7 * a3);
  std::vector<OpenSubdiv::v3_1_1::Far::PatchParam>::resize(v8 + 32, a3);
}

void OpenSubdiv::v3_1_1::Far::PatchTable::pushPatchArray(void *a1, int *a2, int a3, int *a4, int *a5, int *a6)
{
  if (a3 >= 1)
  {
    if (a6) {
      int v12 = *a6;
    }
    else {
      int v12 = 0;
    }
    int v13 = *a2;
    int v14 = *a4;
    int v15 = *a5;
    uint64_t v16 = (uint64_t)(a1 + 3);
    unint64_t v17 = a1[3];
    uint64_t v18 = (_DWORD *)a1[2];
    if ((unint64_t)v18 >= v17)
    {
      int v35 = v12;
      uint64_t v20 = a1[1];
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v18 - v20) >> 2);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        abort();
      }
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v20) >> 2);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x666666666666666) {
        unint64_t v24 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v24 = v22;
      }
      unint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(v16, v24);
      uint64_t v26 = &v25[20 * v21];
      int v28 = &v25[20 * v27];
      *(_DWORD *)uint64_t v26 = v13;
      *((_DWORD *)v26 + 1) = a3;
      *((_DWORD *)v26 + 2) = v14;
      *((_DWORD *)v26 + 3) = v15;
      *((_DWORD *)v26 + 4) = v35;
      unint64_t v19 = v26 + 20;
      uint64_t v30 = a1[1];
      uint64_t v29 = a1[2];
      if (v29 != v30)
      {
        do
        {
          int v31 = *(_DWORD *)(v29 - 20);
          v29 -= 20;
          *((_DWORD *)v26 - 5) = v31;
          v26 -= 20;
          *(_OWORD *)(v26 + 4) = *(_OWORD *)(v29 + 4);
        }
        while (v29 != v30);
        uint64_t v29 = a1[1];
      }
      a1[1] = v26;
      a1[2] = v19;
      a1[3] = v28;
      if (v29) {
        operator delete((void *)v29);
      }
    }
    else
    {
      *uint64_t v18 = v13;
      v18[1] = a3;
      v18[2] = v14;
      v18[3] = v15;
      unint64_t v19 = v18 + 5;
      v18[4] = v12;
    }
    a1[2] = v19;
    unsigned int v32 = *a2 - 1;
    if (v32 > 8) {
      int v33 = -1;
    }
    else {
      int v33 = dword_234415FD8[v32];
    }
    int v34 = v33 * a3;
    *a4 += v34;
    *a5 += a3;
    if (a6)
    {
      if (*a2 != 7) {
        int v34 = 0;
      }
      *a6 += v34;
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetNumControlVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2)
{
  int v2 = *(_DWORD *)(*((void *)this + 1) + 20 * a2) - 1;
  if (v2 > 8) {
    int v3 = -1;
  }
  else {
    int v3 = dword_234415FD8[v2];
  }
  return (v3 * *(_DWORD *)(*((void *)this + 1) + 20 * a2 + 4));
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::getPatchArrayVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2)
{
  return *((void *)this + 4) + 4 * *(int *)(*((void *)this + 1) + 20 * a2 + 8);
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayVaryingVertices(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2 == *((void *)this + 20)) {
    return 0;
  }
  unsigned int v3 = *((_DWORD *)this + 36) - 1;
  if (v3 > 8) {
    int v4 = -1;
  }
  else {
    int v4 = dword_234415FD8[v3];
  }
  return v2 + 4 * *(_DWORD *)(*((void *)this + 1) + 20 * a2 + 12) * v4;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::populateVaryingVertices(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 144) - 1;
  if (v1 > 8) {
    int v2 = -1;
  }
  else {
    int v2 = dword_234415FD8[v1];
  }
  uint64_t v3 = *(void *)(this + 8);
  if ((int)(-858993459 * ((*(void *)(this + 16) - v3) >> 2)) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = -858993459 * ((*(void *)(this + 16) - v3) >> 2);
    do
    {
      uint64_t v6 = v3 + 20 * v4;
      int v9 = *(_DWORD *)(v6 + 4);
      int v7 = (int *)(v6 + 4);
      int v8 = v9;
      if (v9 >= 1)
      {
        int v10 = 0;
        int v11 = *(_DWORD *)(v3 + 20 * v4);
        int v12 = (_DWORD *)(v3 + 20 * (int)v4);
        uint64_t v13 = *(void *)(this + 32);
        do
        {
          unsigned int v14 = *v12 - 1;
          if (v14 > 8) {
            int v15 = -1;
          }
          else {
            int v15 = dword_234415FD8[v14];
          }
          uint64_t v16 = (_DWORD *)(v13 + 4 * (v12[2] + v15 * v10));
          uint64_t v17 = (v10 + *(_DWORD *)(v3 + 20 * v4 + 12)) * (uint64_t)v2;
          switch(v11)
          {
            case 3:
              uint64_t v18 = *(void *)(this + 152);
              unint64_t v19 = (_DWORD *)(v18 + 4 * (int)v17);
              *unint64_t v19 = *v16;
              v19[1] = v16[1];
              uint64_t v20 = 3;
              uint64_t v21 = 2;
              int v22 = 2;
              int v23 = 3;
              goto LABEL_16;
            case 4:
              uint64_t v18 = *(void *)(this + 152);
              *(_DWORD *)(v18 + 4 * (int)v17) = *v16;
              uint64_t v20 = 2;
              uint64_t v21 = 1;
              int v22 = 1;
              int v23 = 2;
              goto LABEL_16;
            case 6:
              uint64_t v18 = *(void *)(this + 152);
              unint64_t v24 = (_DWORD *)(v18 + 4 * (int)v17);
              *unint64_t v24 = v16[5];
              v24[1] = v16[6];
              int v23 = 3;
              int v22 = 2;
              uint64_t v21 = 10;
              uint64_t v20 = 9;
              goto LABEL_16;
            case 9:
              uint64_t v18 = *(void *)(this + 152);
              unint64_t v25 = (_DWORD *)(v18 + 4 * v17);
              *unint64_t v25 = *v16;
              v25[1] = v16[5];
              int v23 = 3;
              int v22 = 2;
              uint64_t v21 = 10;
              uint64_t v20 = 15;
LABEL_16:
              *(_DWORD *)(v18 + 4 * (v22 + (int)v17)) = v16[v21];
              *(_DWORD *)(v18 + 4 * (v23 + (int)v17)) = v16[v20];
              int v8 = *v7;
              break;
            default:
              break;
          }
          ++v10;
        }
        while (v10 < v8);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::PatchTable::GetPatchArrayFVarValues(OpenSubdiv::v3_1_1::Far::PatchTable *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 22);
  unsigned int v4 = *(_DWORD *)(v3 + 56 * a3 + 4) - 1;
  if (v4 > 8) {
    int v5 = -1;
  }
  else {
    int v5 = dword_234415FD8[v4];
  }
  return *(void *)(v3 + 56 * a3 + 8) + 4 * *(_DWORD *)(*((void *)this + 1) + 20 * a2 + 12) * v5;
}

void std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a2[1];
  if (v4)
  {
    a2[2] = v4;
    operator delete(v4);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::PatchArray>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(20 * a2);
}

void std::vector<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unsigned int v4 = a1[2];
  uint64_t v6 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(a1[1], v13);
      v6 += v13;
    }
    a1[1] = v6;
  }
  else
  {
    int v7 = *a1;
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      abort();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v12 = (char *)operator new(56 * v11);
    }
    else
    {
      int v12 = 0;
    }
    unsigned int v14 = &v12[56 * v8];
    int v15 = &v12[56 * v11];
    size_t v16 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    if (v6 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        unint64_t v19 = &v14[v18];
        uint64_t v20 = &v6[v18];
        *((void *)v19 - 7) = *(void *)&v6[v18 - 56];
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 4) = 0;
        *((_OWORD *)v19 - 3) = *(_OWORD *)&v6[v18 - 48];
        *((void *)v19 - 4) = *(void *)&v6[v18 - 32];
        *((void *)v20 - 6) = 0;
        *((void *)v20 - 5) = 0;
        *((void *)v20 - 4) = 0;
        *((void *)v19 - 2) = 0;
        *((void *)v19 - 1) = 0;
        *(_OWORD *)(v19 - 24) = *(_OWORD *)&v6[v18 - 24];
        *((void *)v19 - 1) = *(void *)&v6[v18 - 8];
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        *((void *)v20 - 1) = 0;
        v18 -= 56;
      }
      while (&v6[v18] != v7);
      uint64_t v6 = *a1;
      uint64_t v21 = a1[1];
      *a1 = &v14[v18];
      a1[1] = v17;
      a1[2] = v15;
      while (v21 != v6)
      {
        v21 -= 56;
        std::allocator<OpenSubdiv::v3_1_1::Far::PatchTable::FVarPatchChannel>::destroy[abi:nn180100](v5, v21);
      }
    }
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (std::vector<int> **)*((void *)this + 5);
  unint64_t v9 = *v8;
  int end = (int)(*v8)->__end_;
  if (!end)
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.";
LABEL_12:
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v12, a3, a4, a5, a6, a7, a8, v25);
    return 0;
  }
  int begin = (int)v9->__begin_;
  if (!LODWORD(v9->__begin_))
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.";
    goto LABEL_12;
  }
  if (SHIDWORD(v9->__end_cap_.__value_) >= 0x10000)
  {
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.", a3, a4, a5, a6, a7, a8, HIDWORD(v9->__end_cap_.__value_));
    return 0;
  }
  size_t v13 = &v9[1].__begin_[2 * begin - 2];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  std::vector<int>::size_type v16 = v14 + v15;
  if (!(v14 + v15))
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.";
    goto LABEL_12;
  }
  if (*(_DWORD *)this == 2 && v16 != 3 * begin)
  {
    int v12 = "Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.";
    goto LABEL_12;
  }
  std::vector<unsigned int>::resize(v9 + 2, v16);
  int begin_high = HIDWORD(v9->__begin_);
  if (begin_high >= 1)
  {
    std::vector<unsigned int>::resize(v9 + 3, (int)(v9[2].__end_ - v9[2].__begin_));
    std::vector<unsigned int>::resize(v9 + 5, 2 * SHIDWORD(v9->__begin_));
    unint64_t v19 = &v9[6].__begin_[2 * begin_high - 2];
    std::vector<int>::size_type v20 = v19[1] + (uint64_t)*v19;
    std::vector<unsigned int>::resize(v9 + 7, v20);
    std::vector<unsigned short>::resize((uint64_t)&v9[8], v20);
    int v21 = 2 * end - 2;
    unint64_t v22 = (8 * ((unint64_t)v21 >> 1)) | 4;
    std::vector<int>::size_type v23 = *(int *)((char *)v9[11].__begin_ + v22) + (uint64_t)v9[11].__begin_[v21];
    std::vector<unsigned int>::resize(v9 + 12, v23);
    std::vector<unsigned short>::resize((uint64_t)&v9[13], v23);
    std::vector<int>::size_type v24 = *(int *)((char *)v9[14].__begin_ + v22) + (uint64_t)v9[14].__begin_[v21];
    std::vector<unsigned int>::resize(v9 + 15, v24);
    std::vector<unsigned short>::resize((uint64_t)&v9[16], v24);
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this, int a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = (OpenSubdiv::v3_1_1::Vtr::internal::Level **)*((void *)this + 5);
  size_t v13 = *v12;
  int v14 = *((_DWORD *)*v12 + 1);
  if (v14)
  {
    if (!*((_DWORD *)v13 + 5))
    {
      uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.";
LABEL_12:
      OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8, v23);
      return 0;
    }
LABEL_5:
    if (!a2 || OpenSubdiv::v3_1_1::Vtr::internal::Level::validateTopology(v13, a3, a4))
    {
      OpenSubdiv::v3_1_1::Far::TopologyRefiner::initializeInventory(this);
      return 1;
    }
    if (v14) {
      uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.";
    }
    else {
      uint64_t v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.";
    }
    goto LABEL_12;
  }
  if (OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices(*v12)) {
    goto LABEL_5;
  }
  OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.", v16, v17, v18, v19, v20, v21, *((_DWORD *)v13 + 5));
  return 0;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(int *a1)
{
  uint64_t v2 = **((void **)a1 + 5);
  int v3 = a1[1] & 3;
  if (v3)
  {
    BOOL v4 = 0;
  }
  else
  {
    unsigned int v5 = *a1;
    OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
    BOOL v4 = SHIDWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v5 + 2]) > 0;
  }
  if (*(int *)(v2 + 4) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v2 + 240);
      uint64_t v9 = *(void *)(v2 + 216);
      BOOL v16 = *(_DWORD *)(*(void *)(v2 + 144) + v6) < 2;
      char v10 = *(unsigned char *)(v8 + v7);
      char v11 = v10 & 0xFD | (2 * v16);
      *(unsigned char *)(v8 + v7) = v11;
      int v12 = v10 & 1;
      if (!v16 && v12 == 0)
      {
        float v14 = *(float *)(v9 + 4 * v7);
      }
      else
      {
        *(_DWORD *)(v9 + 4 * v7) = 1092616192;
        char v11 = *(unsigned char *)(v8 + v7);
        float v14 = 10.0;
      }
      char v15 = v11 & 0xFB | (4 * (v14 >= 10.0));
      *(unsigned char *)(v8 + v7) = v15;
      BOOL v16 = v14 >= 10.0 || *(float *)(v9 + 4 * v7) <= 0.0;
      if (v16) {
        char v17 = 0;
      }
      else {
        char v17 = 8;
      }
      *(unsigned char *)(v8 + v7++) = v17 | v15 & 0xF7;
      v6 += 8;
    }
    while (v7 < *(int *)(v2 + 4));
  }
  unsigned int v18 = *a1;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
  int v19 = OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v18 + 2];
  if (v19 >= 0) {
    int v20 = OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v18 + 2];
  }
  else {
    int v20 = v19 + 1;
  }
  if (*(int *)(v2 + 8) >= 1)
  {
    uint64_t v21 = 0;
    int v22 = v20 >> 1;
    while (1)
    {
      uint64_t v23 = *(void *)(v2 + 336);
      uint64_t v24 = (8 * v21) | 4;
      char v25 = (int *)(*(void *)(v2 + 360) + 4 * *(int *)(v23 + v24));
      int v26 = *(_DWORD *)(v23 + 8 * v21);
      if (v26 < 1)
      {
        int v30 = 0;
        int v29 = 0;
        int v28 = 0;
        int v27 = 0;
      }
      else
      {
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        int v30 = 0;
        int v31 = (int *)(*(void *)(v2 + 360) + 4 * *(int *)(v23 + v24));
        uint64_t v32 = *(unsigned int *)(v23 + 8 * v21);
        do
        {
          uint64_t v33 = *v31++;
          unsigned int v34 = *(unsigned __int8 *)(*(void *)(v2 + 240) + v33);
          v30 += (v34 >> 1) & 1;
          v29 += (v34 >> 2) & 1;
          v28 += (v34 >> 3) & 1;
          v27 += v34 & 1;
          --v32;
        }
        while (v32);
      }
      uint64_t v35 = *(void *)(v2 + 432);
      uint64_t v36 = *(void *)(v2 + 408);
      uint64_t v37 = *(void *)(v2 + 288);
      uint64_t v38 = *(void *)(v2 + 264);
      uint64_t v39 = *(int *)(v38 + v24);
      uint64_t v40 = *(unsigned int *)(v38 + 8 * v21);
      if (v40 != 1) {
        break;
      }
      BOOL v41 = v26 == 2;
      if (v3 != 2 || v26 != 2) {
        goto LABEL_34;
      }
      BOOL v41 = 1;
LABEL_38:
      *(_DWORD *)(v36 + 4 * v21) = 1092616192;
      __int16 v42 = *(_WORD *)(v35 + 2 * v21);
LABEL_39:
      int v43 = v28 + v29;
      BOOL v44 = *(float *)(v36 + 4 * v21) >= 10.0;
      __int16 v45 = v42 & 0xFFEF | (16 * v44);
      *(_WORD *)(v35 + 2 * v21) = v45;
      float v46 = *(float *)(v36 + 4 * v21);
      if (v46 >= 10.0 || v46 <= 0.0) {
        __int16 v48 = 0;
      }
      else {
        __int16 v48 = 32;
      }
      __int16 v49 = v45 & 0xFF9F | ((v28 != 0) << 6) | v48;
      *(_WORD *)(v35 + 2 * v21) = v49;
      BOOL v50 = *(float *)(v36 + 4 * v21) <= 0.0 && v43 <= 2;
      int v51 = ((1 << v43) & 0xF) << 7;
      if (!v50) {
        int v51 = 1024;
      }
      int v52 = v49 & 0xF871;
      int v53 = v44 && v41;
      if (v53) {
        int v54 = 8;
      }
      else {
        int v54 = 0;
      }
      int v55 = v54 | (4 * (v30 != 0)) | v51 | v52;
      if (v30) {
        int v56 = v55 | (2 * (v40 != v22));
      }
      else {
        int v56 = v55 | (2 * (v40 != v19));
      }
      if (v53) {
        int v57 = v55;
      }
      else {
        int v57 = v56;
      }
      __int16 v58 = (v29 | v57 & 0x10) != 0;
      unsigned int v59 = v57 & 0xFFFF87FF | ((v29 != 0) << 12);
      __int16 v60 = v59 | (v58 << 14);
      *(_WORD *)(v35 + 2 * v21) = v57 & 0x87FF | ((v29 != 0) << 12) | (v58 << 14);
      if (!v29) {
        goto LABEL_91;
      }
      float v61 = *(float *)(v36 + 4 * v21);
      if ((v57 & 0x10) == 0) {
        float v61 = 0.0;
      }
      BOOL v62 = v61 <= 0.0 && v29 <= 2;
      int v63 = 1 << v29;
      if (!v62) {
        int v63 = 8;
      }
      if (v63 != 8)
      {
        if (v63 != 4) {
          goto LABEL_91;
        }
        v60 |= 0x2000u;
        *(_WORD *)(v35 + 2 * v21) = v60;
        if ((v57 & 3) != 0) {
          goto LABEL_91;
        }
        if ((v57 & 4) != 0)
        {
          LOWORD(v5re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v59 | 0x2000;
        }
        else
        {
          if (v19 == 6)
          {
            uint64_t v67 = *(void *)(v2 + 240);
            if (((*(unsigned __int8 *)(v67 + v25[3]) ^ *(unsigned __int8 *)(v67 + *v25)) & 4) != 0
              || ((*(unsigned __int8 *)(v67 + v25[4]) ^ *(unsigned __int8 *)(v67 + v25[1])) & 4) != 0)
            {
              __int16 v68 = 0x4000;
            }
            else
            {
              __int16 v68 = 0;
            }
            LOWORD(v64) = v59 | v68;
          }
          else
          {
            if (v19 != 4) {
              goto LABEL_91;
            }
            unsigned int v64 = v59 | ((((*(unsigned __int8 *)(*(void *)(v2 + 240) + v25[2]) ^ *(unsigned __int8 *)(*(void *)(v2 + 240) + *v25)) >> 2) & 1) << 14);
          }
          LOWORD(v5re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v64 | 0x2000;
        }
LABEL_90:
        *(_WORD *)(v35 + 2 * v21) = v59;
        LOBYTE(v6re::VariableStepTimer::setClock((uint64_t)this, 0) = v59;
        goto LABEL_91;
      }
      BOOL v66 = (v57 & 0x10) == 0 && v26 < 3;
      if (v29 == v26 && !v66) {
        goto LABEL_90;
      }
LABEL_91:
      if (v4 && (v60 & 4) != 0 && (int)v40 >= 1)
      {
        unint64_t v69 = (int *)(v37 + 4 * v39);
        do
        {
          uint64_t v70 = *v69++;
          *(unsigned char *)(*(void *)(v2 + 96) + v70) |= 1u;
          *((unsigned char *)a1 + 8) |= 2u;
          --v40;
        }
        while (v40);
      }
      if (++v21 >= *(int *)(v2 + 8)) {
        return 1;
      }
    }
    BOOL v41 = 0;
LABEL_34:
    __int16 v42 = *(_WORD *)(v35 + 2 * v21);
    if ((v42 & 1) == 0 || v27 == 2 && !v30 && (int)v40 > v26) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2)
{
  uint64_t v3 = **((void **)this + 5);
  unsigned int v4 = *(_DWORD *)this;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(this);
  int v11 = OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v4 + 2];
  int v12 = v11 + (v11 < 0);
  if ((int)((*(void *)(**((void **)this + 5) + 464) - *(void *)(**((void **)this + 5) + 456)) >> 3) < 1) {
    return 1;
  }
  uint64_t v13 = 0;
  int v14 = v12 >> 1;
  while (1)
  {
    char v15 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(void *)(v3 + 456) + 8 * v13);
    if (!*((_DWORD *)v15 + 4)) {
      break;
    }
    OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::completeTopologyFromFaceValues(v15, v14);
    if (++v13 >= (int)((*(void *)(**((void **)this + 5) + 464) - *(void *)(**((void **)this + 5) + 456)) >> 3)) {
      return 1;
    }
  }
  OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.", v5, v6, v7, v8, v9, v10, v13);
  return 0;
}

void OpenSubdiv::v3_1_1::Far::PtexIndices::initializePtexIndices(OpenSubdiv::v3_1_1::Sdc *a1, int *a2)
{
  unsigned int v4 = *a2;
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(a1);
  int v5 = HIDWORD(OpenSubdiv::v3_1_1::Sdc::staticTraitsTable(void)::staticTraitsTable[3 * v4 + 1]);
  uint64_t v6 = (unsigned int **)*((void *)a2 + 5);
  uint64_t v7 = *v6;
  uint64_t v8 = (int)**v6;
  uint64_t v9 = **v6;
  std::vector<unsigned int>::resize((std::vector<int> *)a1, v8 + 1);
  uint64_t v10 = *(_DWORD **)a1;
  if ((int)v8 < 1)
  {
    int v11 = 0;
  }
  else
  {
    int v11 = 0;
    int v12 = (int *)*((void *)v7 + 3);
    uint64_t v13 = *(_DWORD **)a1;
    uint64_t v14 = v9;
    do
    {
      *v13++ = v11;
      int v16 = *v12;
      v12 += 2;
      int v15 = v16;
      if (v16 == v5) {
        int v15 = 1;
      }
      v11 += v15;
      --v14;
    }
    while (v14);
  }
  v10[(int)v9] = v11;
}

double OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, float a3, int a4, float *a5, const float *a6)
{
  int v6 = a2 > 0.0 && a3 <= 0.0;
  if (a2 <= 0.0 || a3 > 0.0) {
    a2 = 0.0;
  }
  if (a6 && (*(_WORD *)this & 0x60) != 0)
  {
    if (a4 >= 1)
    {
      uint64_t v7 = a4;
      do
      {
        if (*a5 > 0.0 && *a6 <= 0.0)
        {
          a2 = a2 + *a5;
          ++v6;
        }
        ++a6;
        ++a5;
        --v7;
      }
      while (v7);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v8 = a4;
    do
    {
      float v9 = *a5++;
      float v10 = v9;
      v6 += v9 > 0.0 && v9 <= 1.0;
      if (v9 <= 0.0 || v9 > 1.0) {
        float v10 = -0.0;
      }
      a2 = a2 + v10;
      --v8;
    }
    while (v8);
  }
  if (!v6) {
    return 0.0;
  }
  *(float *)&double result = a2 / (float)v6;
  if (*(float *)&result > 1.0) {
    *(float *)&double result = 1.0;
  }
  return result;
}

float OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessAtVertex(OpenSubdiv::v3_1_1::Sdc::Crease *this, float a2, int a3, float *a4)
{
  if (a3 >= 2 && (*(_WORD *)this & 0x60) != 0)
  {
    float v4 = 0.0;
    if (a2 > 0.0)
    {
      float v4 = 10.0;
      if (a2 < 10.0)
      {
        int v5 = 0;
        uint64_t v6 = a3;
        float v7 = 0.0;
        do
        {
          float v8 = *a4++;
          float v9 = v8;
          int v10 = v8 > 0.0 && v8 < 10.0;
          if (v8 <= 0.0 || v8 >= 10.0) {
            float v9 = -0.0;
          }
          float v7 = v7 + v9;
          v5 += v10;
          --v6;
        }
        while (v6);
        BOOL v11 = v5 != 0;
        int v12 = v5 - 1;
        if (v12 != 0 && v11) {
          a2 = (float)((float)((float)(v7 - a2) / (float)v12) * 0.25) + (float)(a2 * 0.75);
        }
        return fmaxf(a2 + -1.0, 0.0);
      }
    }
  }
  else
  {
    float v4 = 0.0;
    if (a2 > 0.0)
    {
      float v4 = 10.0;
      if (a2 < 10.0)
      {
        float v4 = 0.0;
        if (a2 > 1.0) {
          return a2 + -1.0;
        }
      }
    }
  }
  return v4;
}

_WORD *OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(_WORD *this, int a2, float *a3, float *a4)
{
  if (a2 > 1 && (*this & 0x60) != 0)
  {
    if ((*this & 0x60) == 0x20)
    {
      int v4 = 0;
      uint64_t v5 = a2;
      float v6 = 0.0;
      float v7 = a3;
      uint64_t v8 = a2;
      do
      {
        float v9 = *v7++;
        float v10 = v9;
        v4 += v9 > 0.0 && v9 < 10.0;
        if (v9 <= 0.0 || v9 >= 10.0) {
          float v10 = -0.0;
        }
        float v6 = v6 + v10;
        --v8;
      }
      while (v8);
      if (v4)
      {
        while (1)
        {
          float v11 = *a3;
          float v12 = 0.0;
          if (*a3 <= 0.0) {
            goto LABEL_16;
          }
          float v12 = 10.0;
          if (v11 >= 10.0) {
            goto LABEL_16;
          }
          if (v4 == 1) {
            break;
          }
          float v13 = (float)((float)((float)((float)(v6 - v11) / (float)(v4 - 1)) * 0.25) + (float)(v11 * 0.75)) + -1.0;
          float v12 = 0.0;
          if (v13 <= 0.0) {
            goto LABEL_16;
          }
LABEL_17:
          *a4++ = v13;
          ++a3;
          if (!--v5) {
            return this;
          }
        }
        float v12 = v11 + -1.0;
        if (v11 <= 1.0) {
          float v12 = 0.0;
        }
LABEL_16:
        float v13 = v12;
        goto LABEL_17;
      }
      do
      {
        int v14 = *(_DWORD *)a3++;
        *(_DWORD *)a4++ = v14;
        --v5;
      }
      while (v5);
    }
  }
  else if (a2 >= 1)
  {
    uint64_t v15 = a2;
    do
    {
      float v16 = *a3;
      float v17 = 0.0;
      if (*a3 > 0.0)
      {
        float v17 = 10.0;
        if (v16 < 10.0)
        {
          float v17 = 0.0;
          if (v16 > 1.0) {
            float v17 = v16 + -1.0;
          }
        }
      }
      *a4++ = v17;
      ++a3;
      --v15;
    }
    while (v15);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::~Level(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  int v4 = (char *)this + 456;
  uint64_t v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)*((void *)this + 57);
  uint64_t v3 = *((void *)v4 + 1);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::~FVarLevel(v2[v5]);
        MEMORY[0x237DBCBD0]();
        uint64_t v2 = (OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)*((void *)this + 57);
        uint64_t v3 = *((void *)this + 58);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *((void *)this + 58) = v2;
    operator delete(v2);
  }
  float v6 = (void *)*((void *)this + 54);
  if (v6)
  {
    *((void *)this + 55) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 51);
  if (v7)
  {
    *((void *)this + 52) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 48);
  if (v8)
  {
    *((void *)this + 4re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 45);
  if (v9)
  {
    *((void *)this + 46) = v9;
    operator delete(v9);
  }
  float v10 = (void *)*((void *)this + 42);
  if (v10)
  {
    *((void *)this + 43) = v10;
    operator delete(v10);
  }
  float v11 = (void *)*((void *)this + 39);
  if (v11)
  {
    *((void *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v11;
    operator delete(v11);
  }
  float v12 = (void *)*((void *)this + 36);
  if (v12)
  {
    *((void *)this + 37) = v12;
    operator delete(v12);
  }
  float v13 = (void *)*((void *)this + 33);
  if (v13)
  {
    *((void *)this + 34) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)this + 30);
  if (v14)
  {
    *((void *)this + 31) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 27);
  if (v15)
  {
    *((void *)this + 28) = v15;
    operator delete(v15);
  }
  float v16 = (void *)*((void *)this + 24);
  if (v16)
  {
    *((void *)this + 25) = v16;
    operator delete(v16);
  }
  float v17 = (void *)*((void *)this + 21);
  if (v17)
  {
    *((void *)this + 22) = v17;
    operator delete(v17);
  }
  unsigned int v18 = (void *)*((void *)this + 18);
  if (v18)
  {
    *((void *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v18;
    operator delete(v18);
  }
  int v19 = (void *)*((void *)this + 15);
  if (v19)
  {
    *((void *)this + 16) = v19;
    operator delete(v19);
  }
  int v20 = (void *)*((void *)this + 12);
  if (v20)
  {
    *((void *)this + 13) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 9);
  if (v21)
  {
    *((void *)this + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v21;
    operator delete(v21);
  }
  int v22 = (void *)*((void *)this + 6);
  if (v22)
  {
    *((void *)this + 7) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 3);
  if (v23)
  {
    *((void *)this + 4) = v23;
    operator delete(v23);
  }
}

BOOL OpenSubdiv::v3_1_1::Vtr::internal::Level::validateTopology(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, void (*a2)(uint64_t, char *, uint64_t), uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 6);
  if (((*((void *)this + 7) - v6) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing face-verts", "MISSING_FACE_VERTS");
    a2(3, __str, a3);
    uint64_t v8 = *((void *)this + 37) - *((void *)this + 36);
    BOOL v63 = 1;
LABEL_65:
    BOOL v65 = 0;
    if (v63 && (v8 & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-faces", "MISSING_VERT_FACES");
      uint64_t v64 = 4;
      goto LABEL_68;
    }
    return v65;
  }
  uint64_t v7 = *((void *)this + 36);
  uint64_t v8 = *((void *)this + 37) - v7;
  if ((v8 & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v63 = a2 != 0;
    goto LABEL_65;
  }
  uint64_t v9 = *(unsigned int *)this;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    while (1)
    {
      float v11 = (unsigned int *)(*((void *)this + 3) + 8 * v10);
      uint64_t v12 = *v11;
      if ((int)v12 >= 1) {
        break;
      }
LABEL_14:
      if (++v10 == v9) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = v6 + 4 * (int)v11[1];
    uint64_t v15 = *((void *)this + 33);
    while (1)
    {
      uint64_t v16 = *(int *)(v14 + 4 * v13);
      uint64_t v17 = *(unsigned int *)(v15 + 8 * v16);
      if ((int)v17 < 1) {
        break;
      }
      uint64_t v18 = *(int *)(v15 + 8 * v16 + 4);
      int v19 = (int *)(v7 + 4 * v18);
      int v20 = (unsigned __int16 *)(*((void *)this + 39) + 2 * v18);
      while (1)
      {
        int v21 = *v19++;
        if (v10 == v21 && v13 == *v20) {
          break;
        }
        ++v20;
        if (!--v17) {
          goto LABEL_61;
        }
      }
      if (++v13 == v12) {
        goto LABEL_14;
      }
    }
LABEL_61:
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - face %d correlation of vert %d failed");
    goto LABEL_63;
  }
LABEL_15:
  uint64_t v22 = *((void *)this + 21);
  if (((*((void *)this + 22) - v22) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing edge-faces", "MISSING_EDGE_FACES");
    a2(0, __str, a3);
    uint64_t v24 = *((void *)this + 10) - *((void *)this + 9);
    BOOL v67 = 1;
LABEL_76:
    BOOL v65 = 0;
    if (v67 && (v24 & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing face-edges", "MISSING_FACE_EDGES");
      uint64_t v64 = 2;
      goto LABEL_68;
    }
    return v65;
  }
  uint64_t v23 = *((void *)this + 9);
  uint64_t v24 = *((void *)this + 10) - v23;
  if ((v24 & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v67 = a2 != 0;
    goto LABEL_76;
  }
  if ((int)v9 >= 1)
  {
    uint64_t v25 = 0;
    while (1)
    {
      int v26 = (unsigned int *)(*((void *)this + 3) + 8 * v25);
      uint64_t v27 = *v26;
      if ((int)v27 >= 1) {
        break;
      }
LABEL_28:
      if (++v25 == v9) {
        goto LABEL_29;
      }
    }
    uint64_t v28 = 0;
    uint64_t v29 = v23 + 4 * (int)v26[1];
    uint64_t v30 = *((void *)this + 18);
    while (1)
    {
      uint64_t v31 = *(int *)(v29 + 4 * v28);
      uint64_t v32 = *(unsigned int *)(v30 + 8 * v31);
      if ((int)v32 < 1) {
        break;
      }
      uint64_t v33 = *(int *)(v30 + 8 * v31 + 4);
      unsigned int v34 = (int *)(v22 + 4 * v33);
      uint64_t v35 = (unsigned __int16 *)(*((void *)this + 24) + 2 * v33);
      while (1)
      {
        int v36 = *v34++;
        if (v25 == v36 && v28 == *v35) {
          break;
        }
        ++v35;
        if (!--v32) {
          goto LABEL_73;
        }
      }
      if (++v28 == v27) {
        goto LABEL_28;
      }
    }
LABEL_73:
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - face %d correlation of edge %d failed", "FAILED_CORRELATION_FACE_EDGE", v25, v28);
    uint64_t v64 = 8;
    goto LABEL_68;
  }
LABEL_29:
  uint64_t v37 = *((void *)this + 15);
  if (((*((void *)this + 16) - v37) & 0x3FFFFFFFCLL) == 0)
  {
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - missing edge-verts", "MISSING_EDGE_VERTS");
    BOOL v68 = 1;
    a2(1, __str, a3);
    uint64_t v39 = *((void *)this + 46) - *((void *)this + 45);
LABEL_84:
    BOOL v65 = 0;
    if (v68 && (v39 & 0x3FFFFFFFCLL) == 0)
    {
      snprintf(__str, 0x400uLL, "%s - missing vert-edges", "MISSING_VERT_EDGES");
      uint64_t v64 = 5;
      goto LABEL_68;
    }
    return v65;
  }
  uint64_t v38 = *((void *)this + 45);
  uint64_t v39 = *((void *)this + 46) - v38;
  if ((v39 & 0x3FFFFFFFCLL) == 0)
  {
    BOOL v68 = a2 != 0;
    goto LABEL_84;
  }
  uint64_t v40 = *((unsigned int *)this + 1);
  if ((int)v40 >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = *((void *)this + 42);
LABEL_33:
    uint64_t v43 = 0;
    char v44 = 1;
    while (1)
    {
      char v45 = v44;
      uint64_t v46 = *(int *)(v37 + 8 * v41 + 4 * v43);
      uint64_t v47 = *(unsigned int *)(v42 + 8 * v46);
      if ((int)v47 < 1) {
        break;
      }
      uint64_t v48 = *(int *)(v42 + 8 * v46 + 4);
      __int16 v49 = (int *)(v38 + 4 * v48);
      BOOL v50 = (unsigned __int16 *)(*((void *)this + 48) + 2 * v48);
      while (1)
      {
        int v51 = *v49++;
        if (v41 == v51 && v43 == *v50) {
          break;
        }
        ++v50;
        if (!--v47) {
          goto LABEL_81;
        }
      }
      char v44 = 0;
      uint64_t v43 = 1;
      if ((v45 & 1) == 0)
      {
        if (++v41 != v40) {
          goto LABEL_33;
        }
        goto LABEL_42;
      }
    }
LABEL_81:
    if (!a2) {
      return 0;
    }
    snprintf(__str, 0x400uLL, "%s - edge %d correlation of vert %d failed");
LABEL_63:
    uint64_t v64 = 7;
LABEL_68:
    a2(v64, __str, a3);
    return 0;
  }
LABEL_42:
  unsigned int v52 = 2 * *((_DWORD *)this + 5);
  uint64_t v77 = (int *)&v78;
  CMTime __p = 0;
  if (v52 >= 0x21)
  {
    CMTime __p = operator new(4 * v52);
    uint64_t v77 = (int *)__p;
  }
  if (*((int *)this + 2) < 1)
  {
LABEL_87:
    unint64_t v69 = *((unsigned int *)this + 1);
    if ((int)v69 < 1)
    {
LABEL_93:
      BOOL v65 = 1;
    }
    else
    {
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      BOOL v65 = 0;
      while (1)
      {
        if ((*(unsigned char *)(*((void *)this + 30) + v71) & 1) == 0)
        {
          if (*(_DWORD *)(*((void *)this + 15) + v70) == *(_DWORD *)(*((void *)this + 15) + v70 + 4))
          {
            if (!a2) {
              goto LABEL_100;
            }
            snprintf(__str, 0x400uLL, "%s - Error in eIndex = %d:  degenerate edge not tagged marked non-manifold", "DEGENERATE_EDGE", v71);
            uint64_t v74 = 12;
            goto LABEL_105;
          }
          int v72 = *(_DWORD *)(*((void *)this + 18) + v70);
          if ((v72 - 3) <= 0xFFFFFFFD) {
            break;
          }
        }
        BOOL v65 = ++v71 >= v69;
        v70 += 8;
        if (v69 == v71) {
          goto LABEL_93;
        }
      }
      if (!a2) {
        goto LABEL_100;
      }
      snprintf(__str, 0x400uLL, "%s - edge %d with %d incident faces not tagged non-manifold", "NON_MANIFOLD_EDGE", v71, v72);
      uint64_t v74 = 13;
LABEL_105:
      a2(v74, __str, a3);
    }
  }
  else
  {
    uint64_t v53 = 0;
    while (1)
    {
      if ((*(_WORD *)(*((void *)this + 54) + 2 * v53) & 0x801) == 0)
      {
        uint64_t v54 = *((void *)this + 33);
        uint64_t v55 = (8 * v53) | 4;
        uint64_t v56 = *(int *)(v54 + v55);
        uint64_t v57 = *((void *)this + 36);
        uint64_t v58 = *(int *)(v54 + 8 * v53);
        uint64_t v59 = *((void *)this + 42);
        uint64_t v75 = *(int *)(v59 + v55);
        uint64_t v76 = *((void *)this + 45);
        uint64_t v60 = *(unsigned int *)(v59 + 8 * v53);
        if (!OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(this, v53, v77, &v77[v58]))
        {
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d cannot orient incident faces and edges", "FAILED_ORIENTATION_INCIDENT_FACES_EDGES", v53);
            uint64_t v73 = 11;
            goto LABEL_98;
          }
          goto LABEL_99;
        }
        if ((int)v58 >= 1)
        {
          uint64_t v61 = 0;
          while (*(_DWORD *)(v57 + 4 * v56 + 4 * v61) == v77[v61])
          {
            if (v58 == ++v61) {
              goto LABEL_54;
            }
          }
          if (a2)
          {
            snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident face %d", "FAILED_ORIENTATION_INCIDENT_FACE", v53, v61);
            uint64_t v73 = 10;
LABEL_98:
            a2(v73, __str, a3);
            goto LABEL_99;
          }
          goto LABEL_99;
        }
LABEL_54:
        if ((int)v60 >= 1) {
          break;
        }
      }
LABEL_47:
      if (++v53 >= *((int *)this + 2)) {
        goto LABEL_87;
      }
    }
    uint64_t v62 = 0;
    while (*(_DWORD *)(v76 + 4 * v75 + 4 * v62) == v77[v58 + v62])
    {
      if (v60 == ++v62) {
        goto LABEL_47;
      }
    }
    if (a2)
    {
      snprintf(__str, 0x400uLL, "%s - vertex %d orientation failure at incident edge %d", "FAILED_ORIENTATION_INCIDENT_EDGE", v53, v62);
      uint64_t v73 = 9;
      goto LABEL_98;
    }
LABEL_99:
    BOOL v65 = 0;
  }
LABEL_100:
  operator delete(__p);
  return v65;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, __int32 __c, int *a3, int *a4)
{
  uint64_t v5 = *((void *)this + 42);
  uint64_t v6 = 8 * __c;
  uint64_t v7 = *(unsigned int *)(v5 + v6);
  uint64_t v8 = *((void *)this + 33);
  int v9 = *(_DWORD *)(v8 + v6);
  if (v9) {
    BOOL v10 = (int)v7 < 2;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && (int)v7 - v9 <= 1)
  {
    unint64_t v15 = (8 * ((unint64_t)(2 * __c) >> 1)) | 4;
    int v60 = v9;
    uint64_t v58 = v7;
    if (v7 == v9)
    {
      uint64_t v16 = *(int *)(*((void *)this + 36) + 4 * *(int *)(v8 + v15));
      int v17 = (2 * v16) | 1;
      uint64_t v18 = *((void *)this + 3);
      int v19 = (__int32 *)(*((void *)this + 6) + 4 * *(int *)(v18 + 4 * v17));
      size_t v20 = *(int *)(v18 + 8 * v16);
      int v21 = &v19[v20];
      uint64_t v22 = wmemchr(v19, __c, v20);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v21;
      }
      unint64_t v24 = (unint64_t)((char *)v23 - (char *)v19) >> 2;
      int v25 = *(_DWORD *)(*((void *)this + 9) + 4 * *(int *)(*((void *)this + 3) + 4 * v17) + 4 * (int)v24);
    }
    else
    {
      LODWORD(v24) = 0;
      int v26 = (int *)(*((void *)this + 45) + 4 * *(int *)(v5 + v15));
      LODWORD(v16) = -1;
      int v25 = -1;
      do
      {
        uint64_t v28 = *v26++;
        int v27 = v28;
        uint64_t v29 = *((void *)this + 18);
        if (*(_DWORD *)(v29 + 8 * v28) == 1)
        {
          uint64_t v16 = *(int *)(*((void *)this + 21) + 4 * *(int *)(v29 + 4 * ((2 * v27) | 1)));
          int v30 = (2 * v16) | 1;
          uint64_t v31 = *((void *)this + 3);
          uint64_t v32 = (__int32 *)(*((void *)this + 6) + 4 * *(int *)(v31 + 4 * v30));
          size_t v33 = *(int *)(v31 + 8 * v16);
          unsigned int v34 = &v32[v33];
          uint64_t v35 = wmemchr(v32, __c, v33);
          int v36 = v35 ? v35 : v34;
          unint64_t v24 = (unint64_t)((char *)v36 - (char *)v32) >> 2;
          int v37 = *(_DWORD *)(*((void *)this + 9) + 4 * *(int *)(*((void *)this + 3) + 4 * v30) + 4 * (int)v24);
          int v25 = v27;
          if (v27 == v37) {
            break;
          }
        }
        --v7;
      }
      while (v7);
    }
    *a3 = v16;
    *a4 = v25;
    uint64_t v38 = a4 + 1;
    uint64_t v39 = v58 - 1;
    int v40 = 1;
    __int32 v41 = v25;
    LODWORD(v42) = v24;
    int v43 = v60;
    while (1)
    {
      __int32 v44 = v41;
      uint64_t v45 = *((void *)this + 3);
      int v46 = *(_DWORD *)(v45 + 8 * (int)v16);
      uint64_t v47 = *((void *)this + 9);
      if (v42) {
        int v46 = v42;
      }
      __int32 v41 = *(_DWORD *)(v47 + 4 * *(int *)(v45 + 8 * v16 + 4) + 4 * (v46 - 1));
      if (v41 == v44 || v41 == v25) {
        break;
      }
      *uint64_t v38 = v41;
      if (v40 < v43)
      {
        uint64_t v49 = *((void *)this + 18);
        BOOL v50 = (int *)(*((void *)this + 21) + 4 * *(int *)(v49 + 4 * ((2 * v41) | 1)));
        int v51 = *(_DWORD *)(v49 + 8 * v41);
        if (v51 == 1)
        {
          int v52 = *v50;
          if (*v50 == v16) {
            return 0;
          }
        }
        else
        {
          if (!v51) {
            return 0;
          }
          int v52 = *v50;
        }
        uint64_t v16 = v50[v52 == v16];
        uint64_t v53 = (__int32 *)(v47 + 4 * *(int *)(v45 + 4 * (int)((2 * v16) | 1)));
        size_t v54 = *(int *)(v45 + 8 * v16);
        uint64_t v55 = &v53[v54];
        uint64_t v56 = wmemchr(v53, v41, v54);
        int v43 = v60;
        if (v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = v55;
        }
        unint64_t v42 = (unint64_t)((char *)v57 - (char *)v53) >> 2;
        a3[v40++] = v16;
      }
      ++v38;
      if (!--v39) {
        return 1;
      }
    }
  }
  return 0;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceVTags(void *result, int a2, _WORD *a3, unsigned int a4)
{
  uint64_t v4 = (2 * a2) | 1;
  uint64_t v5 = result[3];
  uint64_t v6 = (int *)(result[6] + 4 * *(int *)(v5 + 4 * v4));
  uint64_t v7 = *(unsigned int *)(v5 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v7 >= 1)
    {
      do
      {
        uint64_t v21 = *v6++;
        *a3++ = *(_WORD *)(result[54] + 2 * v21);
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = *(void **)(result[57] + 8 * a4);
    uint64_t v10 = v9[3] + 4 * *(int *)(*(void *)(*v9 + 24) + 4 * v4);
    do
    {
      uint64_t v11 = v6[v8];
      int v12 = *(_DWORD *)(v10 + 4 * v8);
      if (*(int *)(*v9 + 12) <= 0)
      {
        uint64_t v13 = *(int *)(v9[12] + 4 * v11);
        int v12 = v13 - 1;
        uint64_t v14 = (int *)(v9[18] + 4 * v13);
        do
        {
          int v15 = *v14++;
          ++v12;
        }
        while (v15 != *(_DWORD *)(v10 + 4 * v8));
      }
      unsigned int v16 = *(unsigned __int8 *)(v9[21] + v12);
      LOWORD(v11) = *(_WORD *)(result[54] + 2 * v11);
      if (v16)
      {
        __int16 v17 = v11 & 0xD867;
        __int16 v18 = v17 | 0x2200;
        if ((v16 & 0x80u) == 0) {
          int v19 = ~(v16 >> 3) & 8;
        }
        else {
          LOWORD(v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
        }
        __int16 v20 = v17 | 0x410 | v19;
        if ((v16 & 8) != 0) {
          __int16 v20 = v18;
        }
        LODWORD(v11) = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      a3[v8++] = v11;
    }
    while (v8 != v7);
  }
  return result;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceETags(void *result, int a2, unsigned char *a3, unsigned int a4)
{
  uint64_t v4 = result[3];
  uint64_t v5 = (int *)(result[9] + 4 * *(int *)(v4 + 8 * a2 + 4));
  uint64_t v6 = *(unsigned int *)(v4 + 8 * a2);
  if ((a4 & 0x80000000) != 0)
  {
    if ((int)v6 >= 1)
    {
      do
      {
        uint64_t v10 = *v5++;
        *a3++ = *(unsigned char *)(result[30] + v10);
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v7 = *(void *)(result[57] + 8 * a4);
    do
    {
      uint64_t v8 = *v5++;
      char v9 = *(unsigned char *)(result[30] + v8);
      if (*(unsigned char *)(*(void *)(v7 + 48) + v8)) {
        v9 |= 6u;
      }
      *a3++ = v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceCompositeVTag(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(int *)(v5 + 8 * a2 + 4);
  uint64_t v7 = *((void *)this + 6);
  size_t v8 = *(unsigned int *)(v5 + 8 * a2);
  if ((a3 & 0x80000000) != 0)
  {
    uint64_t v26 = *((void *)this + 54);
    uint64_t v12 = *(unsigned __int16 *)(v26 + 2 * *(int *)(v7 + 4 * v6));
    if ((int)v8 >= 2)
    {
      size_t v27 = v8 - 1;
      uint64_t v28 = (int *)(v7 + 4 * v6 + 4);
      do
      {
        uint64_t v29 = *v28++;
        uint64_t v12 = *(unsigned __int16 *)(v26 + 2 * v29) | v12;
        --v27;
      }
      while (v27);
    }
  }
  else
  {
    char v9 = *(void **)(*((void *)this + 57) + 8 * a3);
    uint64_t v10 = v32;
    uint64_t v31 = v32;
    CMTime __p = 0;
    if (v8 >= 0x41)
    {
      uint64_t v10 = operator new(v8);
      CMTime __p = v10;
      uint64_t v31 = v10;
    }
    OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getFaceValueTags(v9, a2, (uint64_t)v10);
    uint64_t v11 = *((void *)this + 54);
    uint64_t v12 = *(unsigned __int16 *)(v11 + 2 * *(int *)(v7 + 4 * v6));
    unsigned int v13 = *v31;
    if (v13)
    {
      if ((v13 & 0x80u) == 0) {
        int v14 = ~(v13 >> 3) & 8;
      }
      else {
        LOWORD(v14) = 0;
      }
      __int16 v15 = v12 & 0xD867 | v14 | 0x410;
      if ((v13 & 8) != 0) {
        __int16 v15 = v12 & 0xD867 | 0x2200;
      }
      uint64_t v12 = v15 & 0xAFF8 | (((v13 >> 7) & 1) << 14) | v13 & 2 | (v13 >> 2) & 1 | 0x1004;
    }
    if ((int)v8 >= 2)
    {
      size_t v16 = v8 - 1;
      __int16 v17 = (int *)(v7 + 4 * v6 + 4);
      __int16 v18 = v31 + 1;
      do
      {
        uint64_t v19 = *v17++;
        int v20 = *(unsigned __int16 *)(v11 + 2 * v19);
        LODWORD(v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *v18++;
        unsigned int v21 = v19;
        if (v19)
        {
          __int16 v22 = v20 & 0xD867;
          __int16 v23 = v22 | 0x2200;
          if ((v21 & 0x80u) == 0) {
            int v24 = ~(v21 >> 3) & 8;
          }
          else {
            LOWORD(v24) = 0;
          }
          __int16 v25 = v22 | v24 | 0x410;
          if ((v21 & 8) != 0) {
            __int16 v25 = v23;
          }
          int v20 = v25 & 0xAFF8 | (((v21 >> 7) & 1) << 14) | v21 & 2 | (v21 >> 2) & 1 | 0x1004;
        }
        uint64_t v12 = v20 | v12;
        --v16;
      }
      while (v16);
    }
    operator delete(__p);
  }
  return v12;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::getVertexCompositeFVarVTag(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  uint64_t v3 = *(void **)(*((void *)this + 57) + 8 * a3);
  uint64_t v4 = *(int *)(v3[12] + 4 * a2);
  uint64_t v5 = v3[21];
  int v6 = *(unsigned __int16 *)(*((void *)this + 54) + 2 * a2);
  unsigned int v7 = *(unsigned __int8 *)(v5 + v4);
  if ((v7 & 1) == 0) {
    return *(unsigned __int16 *)(*((void *)this + 54) + 2 * a2);
  }
  uint64_t v9 = *(unsigned __int16 *)(v3[9] + 2 * a2);
  __int16 v10 = v6 & 0xD867;
  int v11 = ~(v7 >> 3) & 8;
  if ((v7 & 0x80u) != 0) {
    LOWORD(v11) = 0;
  }
  __int16 v12 = v10 | 0x410 | v11;
  if ((v7 & 8) != 0) {
    __int16 v13 = v6 & 0xD867 | 0x2200;
  }
  else {
    __int16 v13 = v12;
  }
  uint64_t result = v13 & 0xAFF8 | (((v7 >> 7) & 1) << 14) | v7 & 2 | (v7 >> 2) & 1 | 0x1004;
  if (v9 >= 2)
  {
    uint64_t v14 = v9 - 1;
    __int16 v15 = (unsigned __int8 *)(v4 + v5 + 1);
    do
    {
      unsigned int v17 = *v15++;
      unsigned int v16 = v17;
      int v18 = v6;
      if (v17)
      {
        if ((v16 & 0x80u) == 0) {
          int v19 = ~(v16 >> 3) & 8;
        }
        else {
          LOWORD(v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
        }
        __int16 v20 = v10 | v19 | 0x410;
        if ((v16 & 8) != 0) {
          __int16 v20 = v6 & 0xD867 | 0x2200;
        }
        int v18 = v20 & 0xAFF8 | (((v16 >> 7) & 1) << 14) | v16 & 2 | (v16 >> 2) & 1 | 0x1004;
      }
      uint64_t result = v18 | result;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, unsigned int a4)
{
  uint64_t v4 = *((void *)this + 33);
  uint64_t v5 = *(unsigned int *)(v4 + 8 * a2);
  if ((int)v5 < 1) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = *(int *)(v4 + 8 * a2 + 4);
  size_t v8 = (int *)(*((void *)this + 36) + 4 * v7);
  uint64_t v9 = (__int16 *)(*((void *)this + 39) + 2 * v7);
  int v10 = *(_DWORD *)(*((void *)this + 42) + 8 * a2);
  uint64_t v11 = (v5 - 1);
  uint64_t v12 = v5;
  do
  {
    int v14 = *v8++;
    int v13 = v14;
    if ((a4 & 0x80000000) != 0)
    {
      int v18 = (int *)(*((void *)this + 3) + 4 * ((2 * v13) | 1));
      unsigned int v16 = (void *)((char *)this + 48);
    }
    else
    {
      __int16 v15 = *(uint64_t **)(*((void *)this + 57) + 8 * a4);
      uint64_t v17 = *v15;
      unsigned int v16 = v15 + 3;
      int v18 = (int *)(*(void *)(v17 + 24) + 4 * ((2 * v13) | 1));
    }
    uint64_t v19 = *v16 + 4 * *v18;
    __int16 v20 = *v9;
    unsigned int v21 = &a3[v6];
    *unsigned int v21 = *(_DWORD *)(v19 + 4 * ((*v9 + 1) & 3));
    uint64_t v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v10 > (int)v5 && !v11)
    {
      a3[v22] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      uint64_t v22 = (v6 + 3);
    }
    --v11;
    ++v9;
    int v6 = v22;
    --v12;
  }
  while (v12);
  return v22;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex(void *a1, int a2, unsigned __int16 *a3, uint64_t a4, unsigned int a5)
{
  int v5 = *a3;
  if (!*a3) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = a1[33];
  uint64_t v8 = *(int *)(v7 + 8 * a2 + 4);
  uint64_t v9 = a1[36] + 4 * v8;
  int v10 = *(_DWORD *)(v7 + 8 * a2);
  uint64_t v11 = a1[39] + 2 * v8;
  int v12 = a3[1];
  do
  {
    uint64_t v13 = (v12 % v10);
    int v14 = *(_DWORD *)(v9 + 4 * v13);
    if ((a5 & 0x80000000) != 0)
    {
      int v18 = (int *)(a1[3] + 4 * ((2 * v14) | 1));
      unsigned int v16 = a1 + 6;
    }
    else
    {
      __int16 v15 = *(uint64_t **)(a1[57] + 8 * a5);
      uint64_t v17 = *v15;
      unsigned int v16 = v15 + 3;
      int v18 = (int *)(*(void *)(v17 + 24) + 4 * ((2 * v14) | 1));
    }
    uint64_t v19 = *v16 + 4 * *v18;
    __int16 v20 = *(_WORD *)(v11 + 2 * v13);
    unsigned int v21 = (_DWORD *)(a4 + 4 * v6);
    *unsigned int v21 = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 1) & 3));
    uint64_t v22 = v6 + 2;
    v21[1] = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 + 2) & 3));
    if (v5 == 1 && (a3[2] & 1) == 0)
    {
      *(_DWORD *)(a4 + 4 * v22) = *(_DWORD *)(v19 + 4 * (((_BYTE)v20 - 1) & 3));
      uint64_t v22 = (v6 + 3);
    }
    ++v12;
    int v6 = v22;
    --v5;
  }
  while (v5);
  return v22;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, int a4, unsigned int a5)
{
  int v5 = (int *)((char *)&OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularInteriorPatchPoints(int,int *,int,int)const::rotationSequence
             + 4 * a4);
  int v6 = (2 * a2) | 1;
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)this + 6);
  uint64_t v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  if ((a5 & 0x80000000) != 0)
  {
    uint64_t v11 = a5;
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v10 = v6;
    uint64_t v11 = a5;
    int v12 = *(void **)(*((void *)this + 57) + 8 * a5);
    uint64_t v13 = v12[3] + 4 * *(int *)(*(void *)(*v12 + 24) + 4 * v10);
  }
  uint64_t v14 = 0;
  *a3 = *(_DWORD *)(v13 + 4 * *v5);
  a3[1] = *(_DWORD *)(v13 + 4 * v5[1]);
  a3[2] = *(_DWORD *)(v13 + 4 * v5[2]);
  a3[3] = *(_DWORD *)(v13 + 4 * v5[3]);
  uint64_t v15 = *((void *)this + 36);
  uint64_t v16 = *((void *)this + 33);
  uint64_t v17 = *((void *)this + 39);
  int v18 = a3 + 6;
  do
  {
    uint64_t v19 = *(int *)(v16 + 8 * *(int *)(v9 + 4 * v5[v14]) + 4);
    __int16 v20 = (_DWORD *)(v15 + 4 * v19);
    if (*v20 == a2)
    {
      char v21 = 0;
    }
    else if (v20[1] == a2)
    {
      char v21 = 1;
    }
    else if (v20[2] == a2)
    {
      char v21 = 2;
    }
    else if (v20[3] == a2)
    {
      char v21 = 3;
    }
    else
    {
      char v21 = -1;
    }
    uint64_t v22 = (v21 + 2) & 3;
    int v23 = v20[v22];
    if ((a5 & 0x80000000) != 0)
    {
      uint64_t v25 = v8 + 4 * *(int *)(v7 + 4 * ((2 * v23) | 1));
    }
    else
    {
      int v24 = *(void **)(*((void *)this + 57) + 8 * v11);
      uint64_t v25 = v24[3] + 4 * *(int *)(*(void *)(*v24 + 24) + 4 * ((2 * v23) | 1));
    }
    char v26 = *(_WORD *)(v17 + 2 * v19 + 2 * v22);
    *(v18 - 2) = *(_DWORD *)(v25 + 4 * ((v26 + 1) & 3));
    *(v18 - 1) = *(_DWORD *)(v25 + 4 * ((v26 + 2) & 3));
    *int v18 = *(_DWORD *)(v25 + 4 * ((v26 - 1) & 3));
    v18 += 3;
    ++v14;
  }
  while (v14 != 4);
  return 16;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularBoundaryPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, int a4, unsigned int a5)
{
  uint64_t v5 = 0;
  int v6 = (2 * a2) | 1;
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)this + 6);
  uint64_t v9 = v8 + 4 * *(int *)(v7 + 4 * v6);
  uint64_t v10 = v6;
  uint64_t v11 = *((void *)this + 36);
  uint64_t v12 = *((void *)this + 33);
  uint64_t v13 = *(int *)(v12 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 + 2) & 3)) + 4);
  uint64_t v14 = v11 + 4 * v13;
  uint64_t v15 = *(int *)(v12 + 8 * *(int *)(v9 + 4 * (((_BYTE)a4 - 1) & 3)) + 4);
  uint64_t v16 = v11 + 4 * v15;
  uint64_t v17 = *((void *)this + 39);
  char v18 = -1;
  char v19 = -1;
  do
  {
    if (*(_DWORD *)(v14 + 4 * v5) == a2) {
      char v18 = v5;
    }
    if (*(_DWORD *)(v16 + 4 * v5) == a2) {
      char v19 = v5;
    }
    ++v5;
  }
  while (v5 != 4);
  unsigned int v20 = (v18 + 1) & 3;
  unsigned int v21 = (v18 + 2) & 3;
  unsigned int v22 = (v19 + 2) & 3;
  uint64_t v23 = v17 + 2 * v13;
  unsigned int v24 = (v19 - 1) & 3;
  uint64_t v25 = *(int *)(v14 + 4 * ((v18 + 1) & 3));
  uint64_t v26 = *(int *)(v14 + 4 * ((v18 + 2) & 3));
  uint64_t v27 = v17 + 2 * v15;
  uint64_t v28 = *(int *)(v16 + 4 * v22);
  uint64_t v29 = *(int *)(v16 + 4 * v24);
  __int16 v30 = *(_WORD *)(v23 + 2 * v20);
  __int16 v31 = *(_WORD *)(v23 + 2 * v21);
  __int16 v32 = *(_WORD *)(v27 + 2 * v22);
  __int16 v33 = *(_WORD *)(v27 + 2 * v24);
  if ((a5 & 0x80000000) == 0)
  {
    uint64_t v34 = *(void **)(*((void *)this + 57) + 8 * a5);
    uint64_t v7 = *(void *)(*v34 + 24);
    uint64_t v8 = v34[3];
    uint64_t v9 = v8 + 4 * *(int *)(v7 + 4 * v10);
  }
  uint64_t v35 = *(int *)(v7 + 8 * v25 + 4);
  uint64_t v36 = *(int *)(v7 + 8 * v26 + 4);
  uint64_t v37 = *(int *)(v7 + 8 * v28 + 4);
  uint64_t v38 = *(int *)(v7 + 8 * v29 + 4);
  *a3 = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[1] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[2] = *(_DWORD *)(v9 + 4 * (((_BYTE)a4 - 1) & 3));
  a3[3] = *(_DWORD *)(v9 + 4 * a4);
  uint64_t v39 = v8 + 4 * v36;
  a3[4] = *(_DWORD *)(v8 + 4 * v35 + 4 * (((_BYTE)v30 + 2) & 3));
  a3[5] = *(_DWORD *)(v39 + 4 * (((_BYTE)v31 + 1) & 3));
  a3[6] = *(_DWORD *)(v39 + 4 * (((_BYTE)v31 + 2) & 3));
  int v40 = *(_DWORD *)(v39 + 4 * (((_BYTE)v31 - 1) & 3));
  uint64_t v41 = v8 + 4 * v37;
  a3[7] = v40;
  a3[8] = *(_DWORD *)(v41 + 4 * (((_BYTE)v32 + 1) & 3));
  a3[9] = *(_DWORD *)(v41 + 4 * (((_BYTE)v32 + 2) & 3));
  a3[10] = *(_DWORD *)(v41 + 4 * (((_BYTE)v32 - 1) & 3));
  a3[11] = *(_DWORD *)(v8 + 4 * v38 + 4 * (((_BYTE)v33 + 2) & 3));
  return 12;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularCornerPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int *a3, int a4, unsigned int a5)
{
  int v5 = (2 * a2) | 1;
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  uint64_t v9 = *(int *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  int v10 = 2 * v9;
  uint64_t v11 = *((void *)this + 33);
  uint64_t v12 = *(int *)(v11 + 8 * v9 + 4);
  uint64_t v13 = *((void *)this + 36) + 4 * v12;
  uint64_t v14 = *(unsigned int *)(v11 + 4 * v10);
  uint64_t v15 = *((void *)this + 39) + 2 * v12;
  if ((int)v14 < 1)
  {
LABEL_5:
    LOBYTE(v16) = -1;
  }
  else
  {
    uint64_t v16 = 0;
    while (*(_DWORD *)(v13 + 4 * v16) != a2)
    {
      if (v14 == ++v16) {
        goto LABEL_5;
      }
    }
  }
  unsigned int v17 = ((_BYTE)v16 - 1) & 3;
  uint64_t v18 = *(int *)(v13 + 4 * (((_BYTE)v16 + 1) & 3));
  uint64_t v19 = *(int *)(v13 + 4 * (((_BYTE)v16 + 2) & 3));
  uint64_t v20 = *(int *)(v13 + 4 * (((_BYTE)v16 - 1) & 3));
  __int16 v21 = *(_WORD *)(v15 + 2 * (((_BYTE)v16 + 1) & 3));
  __int16 v22 = *(_WORD *)(v15 + 2 * (((_BYTE)v16 + 2) & 3));
  __int16 v23 = *(_WORD *)(v15 + 2 * v17);
  if ((a5 & 0x80000000) == 0)
  {
    unsigned int v24 = *(void **)(*((void *)this + 57) + 8 * a5);
    uint64_t v6 = *(void *)(*v24 + 24);
    uint64_t v7 = v24[3];
    uint64_t v8 = v7 + 4 * *(int *)(v6 + 4 * v5);
  }
  uint64_t v25 = *(int *)(v6 + 8 * v18 + 4);
  uint64_t v26 = *(int *)(v6 + 8 * v19 + 4);
  uint64_t v27 = *(int *)(v6 + 8 * v20 + 4);
  *a3 = *(_DWORD *)(v8 + 4 * a4);
  a3[1] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 1) & 3));
  a3[2] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 + 2) & 3));
  a3[3] = *(_DWORD *)(v8 + 4 * (((_BYTE)a4 - 1) & 3));
  uint64_t v28 = v7 + 4 * v26;
  a3[4] = *(_DWORD *)(v7 + 4 * v25 + 4 * (((_BYTE)v21 + 2) & 3));
  a3[5] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 + 1) & 3));
  a3[6] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 + 2) & 3));
  a3[7] = *(_DWORD *)(v28 + 4 * (((_BYTE)v22 - 1) & 3));
  a3[8] = *(_DWORD *)(v7 + 4 * v27 + 4 * (((_BYTE)v23 + 2) & 3));
  return 9;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, float *a3, int *a4)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(int *)(v4 + 8 * a2 + 4);
  uint64_t v6 = *(unsigned int *)(v4 + 8 * a2);
  uint64_t v7 = (int *)(*((void *)this + 6) + 4 * v5);
  uint64_t v8 = *((void *)this + 54);
  if ((int)v6 < 2)
  {
    __int16 v11 = *(_WORD *)(v8 + 2 * *v7);
  }
  else
  {
    uint64_t v9 = v6 - 1;
    int v10 = v7 + 1;
    __int16 v11 = *(_WORD *)(v8 + 2 * *v7);
    do
    {
      uint64_t v12 = *v10++;
      v11 |= *(_WORD *)(v8 + 2 * v12);
      --v9;
    }
    while (v9);
  }
  if ((v11 & 0x707) != 0x200) {
    return 0;
  }
  uint64_t v13 = ((*(_WORD *)(v8 + 2 * *v7) & 0x780) == 512) | (2 * ((*(_WORD *)(v8 + 2 * v7[1]) & 0x780) == 512)) | (4 * ((*(_WORD *)(v8 + 2 * v7[2]) & 0x780) == 512)) | (8 * ((*(_WORD *)(v8 + 2 * v7[3]) & 0x780) == 512));
  if ((0xEDB7uLL >> v13)) {
    return 0;
  }
  int v14 = OpenSubdiv::v3_1_1::Vtr::internal::Level::isSingleCreasePatch(int,float *,int *)const::sharpEdgeFromCreaseMask[v13];
  uint64_t v15 = *((void *)this + 45);
  uint64_t v16 = *((void *)this + 42);
  unsigned int v17 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[v14] + 4));
  uint64_t v18 = *((void *)this + 27);
  if (*(float *)(v18 + 4 * *v17) != *(float *)(v18 + 4 * v17[2])) {
    return 0;
  }
  if (*(float *)(v18 + 4 * v17[1]) != *(float *)(v18 + 4 * v17[3])) {
    return 0;
  }
  uint64_t v19 = (int *)(v15 + 4 * *(int *)(v16 + 8 * v7[((_BYTE)v14 + 1) & 3] + 4));
  if (*(float *)(v18 + 4 * *v19) != *(float *)(v18 + 4 * v19[2])
    || *(float *)(v18 + 4 * v19[1]) != *(float *)(v18 + 4 * v19[3]))
  {
    return 0;
  }
  if (a3) {
    *a3 = *(float *)(v18 + 4 * *(int *)(*((void *)this + 9) + 4 * v5 + 4 * v14));
  }
  if (a4) {
    *a4 = v14;
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Level::findEdge(OpenSubdiv::v3_1_1::Vtr::internal::Level *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 42);
  uint64_t v4 = (int *)(*((void *)this + 45) + 4 * *(int *)(v3 + 8 * a2 + 4));
  uint64_t v5 = *(unsigned int *)(v3 + 8 * a2);
  if (a2 == a3)
  {
    if ((int)v5 >= 1)
    {
      uint64_t v6 = *((void *)this + 15);
      while (1)
      {
        uint64_t v8 = *v4++;
        uint64_t result = v8;
        if (*(_DWORD *)(v6 + 8 * v8) == *(_DWORD *)(v6 + 8 * v8 + 4)) {
          break;
        }
        if (!--v5) {
          return 0xFFFFFFFFLL;
        }
      }
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if ((int)v5 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = *((void *)this + 15);
  while (1)
  {
    uint64_t v10 = *v4++;
    uint64_t result = v10;
    __int16 v11 = (_DWORD *)(v9 + 8 * v10);
    if (*v11 == a3 || v11[1] == a3) {
      break;
    }
    if (!--v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL OpenSubdiv::v3_1_1::Vtr::internal::Level::completeTopologyFromFaceVertices(OpenSubdiv::v3_1_1::Vtr::internal::Level *this)
{
  uint64_t v256 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)this + 2);
  unint64_t v3 = *(int *)this;
  v217 = (void *)((char *)this + 264);
  std::vector<unsigned int>::resize((std::vector<int> *)this + 11, 2 * v2);
  v213 = (uint64_t *)((char *)this + 336);
  std::vector<unsigned int>::resize((std::vector<int> *)this + 14, 2 * v2);
  std::vector<float>::resize((uint64_t)this + 408, v2);
  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize((uint64_t)this + 432, v2);
  bzero(*((void **)this + 54), 2 * *((int *)this + 2));
  *(_DWORD *)this = v3;
  std::vector<unsigned int>::resize((std::vector<int> *)this + 1, 2 * v3);
  uint64_t v4 = (char *)*((void *)this + 12);
  unint64_t v5 = *((void *)this + 13) - (void)v4;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *((void *)this + 13) = &v4[v3];
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)this + 12, v3 - v5);
    uint64_t v4 = (char *)*((void *)this + 12);
  }
  bzero(v4, *(int *)this);
  *((_DWORD *)this + 1) = 0;
  v215 = (std::vector<int> *)((char *)this + 144);
  std::vector<unsigned int>::resize((std::vector<int> *)this + 6, 0);
  std::vector<float>::resize((uint64_t)this + 216, 0);
  uint64_t v6 = *((void *)this + 30);
  if (*((void *)this + 31) != v6) {
    *((void *)this + 31) = v6;
  }
  std::vector<unsigned int>::resize((std::vector<int> *)this + 3, (int)((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 2));
  std::vector<int>::size_type v7 = 4 * v2;
  v223 = (uint64_t *)((char *)this + 120);
  std::vector<int>::reserve((std::vector<int> *)this + 5, v7);
  std::vector<int>::reserve((std::vector<int> *)this + 7, v7);
  std::vector<int>::reserve(v215, v7);
  int v8 = 2;
  v247 = (char *)this + 144;
  v248 = (std::vector<int> *)((char *)this + 168);
  v214 = (std::vector<int> *)((char *)this + 168);
  v250[0] = 0;
  v250[1] = 0;
  v249 = (uint64_t *)v250;
  uint64_t v9 = *((void *)this + 18);
  unint64_t v10 = (unint64_t)(*((void *)this + 19) - v9) >> 2;
  if ((v10 & 0x80000000) == 0) {
    int v11 = (unint64_t)(*((void *)this + 19) - v9) >> 2;
  }
  else {
    int v11 = v10 + 1;
  }
  int v12 = v11 >> 1;
  int v246 = 2;
  int v245 = v12;
  if ((int)v10 >= 2)
  {
    uint64_t v13 = 0;
    int v14 = (_DWORD *)(v9 + 4);
    do
    {
      *(v14 - 1) = 0;
      *int v14 = v246 * v13;
      v14 += 2;
      ++v13;
      int v12 = v245;
    }
    while (v13 < v245);
    int v8 = v246;
  }
  std::vector<unsigned int>::resize(v214, v12 * v8);
  int v15 = 6;
  v241 = v217;
  v242 = (char *)this + 288;
  v216 = (std::vector<int> *)((char *)this + 288);
  v244[0] = 0;
  v244[1] = 0;
  v243 = v244;
  uint64_t v16 = *((void *)this + 33);
  unint64_t v17 = (unint64_t)(*((void *)this + 34) - v16) >> 2;
  if ((v17 & 0x80000000) == 0) {
    int v18 = (unint64_t)(*((void *)this + 34) - v16) >> 2;
  }
  else {
    int v18 = v17 + 1;
  }
  int v19 = v18 >> 1;
  int v239 = v19;
  int v240 = 6;
  if ((int)v17 < 2)
  {
    int v22 = 6;
  }
  else
  {
    uint64_t v20 = 0;
    __int16 v21 = (_DWORD *)(v16 + 4);
    do
    {
      *(v21 - 1) = 0;
      *__int16 v21 = v240 * v20;
      v21 += 2;
      ++v20;
      int v19 = v239;
    }
    while (v20 < v239);
    int v22 = v240;
  }
  std::vector<unsigned int>::resize(v216, v19 * v22);
  v235 = (void *)((char *)this + 336);
  v236 = (void *)((char *)this + 360);
  v212 = (std::vector<int> *)((char *)this + 360);
  v238[0] = 0;
  v238[1] = 0;
  v237 = (uint64_t *)v238;
  uint64_t v23 = *((void *)this + 42);
  unint64_t v24 = (unint64_t)(*((void *)this + 43) - v23) >> 2;
  if ((v24 & 0x80000000) == 0) {
    int v25 = (unint64_t)(*((void *)this + 43) - v23) >> 2;
  }
  else {
    int v25 = v24 + 1;
  }
  int v26 = v25 >> 1;
  int v233 = v26;
  int v234 = 6;
  if ((int)v24 > 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = (_DWORD *)(v23 + 4);
    do
    {
      *(v28 - 1) = 0;
      *uint64_t v28 = v234 * v27;
      v28 += 2;
      ++v27;
      int v26 = v233;
    }
    while (v27 < v233);
    int v15 = v234;
  }
  std::vector<unsigned int>::resize(v212, v26 * v15);
  CMTime __p = 0;
  v231 = 0;
  v232 = 0;
  if ((int)v3 >= 1)
  {
    uint64_t v29 = 0;
    v220 = (int *)((char *)this + 136);
    uint64_t v218 = v3;
    while (1)
    {
      __int16 v30 = (unsigned int *)(*((void *)this + 3) + 8 * v29);
      uint64_t v31 = *v30;
      __int16 v32 = (void **)((char *)this + 120);
      if ((int)v31 >= 1) {
        break;
      }
LABEL_200:
      if (++v29 == v218) {
        goto LABEL_201;
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = (int)v30[1];
    uint64_t v224 = *((void *)this + 9) + 4 * v34;
    uint64_t v227 = *((void *)this + 6) + 4 * v34;
    uint64_t v221 = v31;
    while (1)
    {
      int v35 = *(_DWORD *)(v227 + 4 * v33);
      uint64_t v36 = v33 + 1;
      if (v33 + 1 == v31) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v33 + 1;
      }
      int v38 = *(_DWORD *)(v227 + 4 * v37);
      if (v35 == v38)
      {
        uint64_t v39 = v231;
        if (v231 < v232)
        {
          *(_DWORD *)v231 = *((_DWORD *)this + 1);
          int v40 = v231 + 4;
LABEL_65:
          v231 = v40;
LABEL_66:
          LODWORD(v5re::VariableStepTimer::setClock((uint64_t)this, 0) = *((_DWORD *)this + 1);
          *((_DWORD *)this + 1) = v50 + 1;
          int v60 = (int *)*((void *)this + 16);
          uint64_t v59 = (int *)*((void *)this + 17);
          if (v60 >= v59)
          {
            uint64_t v62 = (int *)*v32;
            uint64_t v63 = ((char *)v60 - (unsigned char *)*v32) >> 2;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              goto LABEL_269;
            }
            uint64_t v65 = (char *)v59 - (char *)v62;
            if (v65 >> 1 > v64) {
              unint64_t v64 = v65 >> 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              BOOL v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v220, v66);
              uint64_t v62 = (int *)*((void *)this + 15);
              int v60 = (int *)*((void *)this + 16);
            }
            else
            {
              BOOL v67 = 0;
            }
            BOOL v68 = (int *)&v67[4 * v63];
            *BOOL v68 = v35;
            uint64_t v61 = v68 + 1;
            while (v60 != v62)
            {
              int v69 = *--v60;
              *--BOOL v68 = v69;
            }
            uint64_t v59 = (int *)&v67[4 * v66];
            *((void *)this + 15) = v68;
            *((void *)this + 16) = v61;
            *((void *)this + 17) = v59;
            if (v62)
            {
              operator delete(v62);
              uint64_t v59 = *(int **)v220;
            }
          }
          else
          {
            *int v60 = v35;
            uint64_t v61 = v60 + 1;
          }
          *((void *)this + 16) = v61;
          if (v61 >= v59)
          {
            uint64_t v71 = (int *)*v32;
            uint64_t v72 = ((char *)v61 - (unsigned char *)*v32) >> 2;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 62) {
              goto LABEL_269;
            }
            uint64_t v74 = (char *)v59 - (char *)v71;
            if (v74 >> 1 > v73) {
              unint64_t v73 = v74 >> 1;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              uint64_t v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v220, v75);
              uint64_t v71 = (int *)*((void *)this + 15);
              uint64_t v61 = (int *)*((void *)this + 16);
            }
            else
            {
              uint64_t v76 = 0;
            }
            uint64_t v77 = (int *)&v76[4 * v72];
            *uint64_t v77 = v38;
            uint64_t v70 = v77 + 1;
            while (v61 != v71)
            {
              int v78 = *--v61;
              *--uint64_t v77 = v78;
            }
            *((void *)this + 15) = v77;
            *((void *)this + 16) = v70;
            *((void *)this + 17) = &v76[4 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *uint64_t v61 = v38;
            uint64_t v70 = v61 + 1;
          }
          *((void *)this + 16) = v70;
          int v79 = v247;
          int v80 = (_DWORD *)*((void *)v247 + 1);
          unint64_t v81 = *((void *)v247 + 2);
          if ((unint64_t)v80 >= v81)
          {
            int v83 = *(_DWORD **)v247;
            uint64_t v84 = ((uint64_t)v80 - *(void *)v247) >> 2;
            unint64_t v85 = v84 + 1;
            if ((unint64_t)(v84 + 1) >> 62) {
              goto LABEL_269;
            }
            uint64_t v86 = v81 - (void)v83;
            if (v86 >> 1 > v85) {
              unint64_t v85 = v86 >> 1;
            }
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v87 = v85;
            }
            if (v87)
            {
              uint64_t v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v247 + 16), v87);
              int v83 = *(_DWORD **)v79;
              int v80 = (_DWORD *)*((void *)v79 + 1);
            }
            else
            {
              uint64_t v88 = 0;
            }
            unint64_t v89 = &v88[4 * v84];
            *(_DWORD *)unint64_t v89 = 0;
            int v82 = v89 + 4;
            while (v80 != v83)
            {
              int v90 = *--v80;
              *((_DWORD *)v89 - 1) = v90;
              v89 -= 4;
            }
            *(void *)int v79 = v89;
            *((void *)v79 + 1) = v82;
            *((void *)v79 + 2) = &v88[4 * v87];
            if (v83) {
              operator delete(v83);
            }
          }
          else
          {
            *int v80 = 0;
            int v82 = v80 + 1;
          }
          *((void *)v79 + 1) = v82;
          uint64_t v91 = v247;
          int v92 = v246 * v245;
          uint64_t v93 = (int *)*((void *)v247 + 1);
          unint64_t v94 = *((void *)v247 + 2);
          if ((unint64_t)v93 >= v94)
          {
            int v96 = *(int **)v247;
            uint64_t v97 = ((uint64_t)v93 - *(void *)v247) >> 2;
            unint64_t v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62) {
              goto LABEL_269;
            }
            uint64_t v99 = v94 - (void)v96;
            if (v99 >> 1 > v98) {
              unint64_t v98 = v99 >> 1;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v98;
            }
            if (v100)
            {
              unint64_t v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v247 + 16), v100);
              int v96 = *(int **)v91;
              uint64_t v93 = (int *)*((void *)v91 + 1);
            }
            else
            {
              unint64_t v101 = 0;
            }
            unint64_t v102 = (int *)&v101[4 * v97];
            *unint64_t v102 = v92;
            uint64_t v95 = v102 + 1;
            if (v93 == v96)
            {
              __int16 v32 = (void **)((char *)this + 120);
            }
            else
            {
              __int16 v32 = (void **)((char *)this + 120);
              do
              {
                int v103 = *--v93;
                *--unint64_t v102 = v103;
              }
              while (v93 != v96);
            }
            *(void *)uint64_t v91 = v102;
            *((void *)v91 + 1) = v95;
            *((void *)v91 + 2) = &v101[4 * v100];
            if (v96) {
              operator delete(v96);
            }
          }
          else
          {
            *uint64_t v93 = v92;
            uint64_t v95 = v93 + 1;
            __int16 v32 = (void **)((char *)this + 120);
          }
          *((void *)v91 + 1) = v95;
          uint64_t v104 = ++v245;
          std::vector<unsigned int>::resize(v248, v246 * v104);
          uint64_t v31 = v221;
          goto LABEL_133;
        }
        __int32 v44 = __p;
        uint64_t v45 = (v231 - __p) >> 2;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62) {
          goto LABEL_269;
        }
        uint64_t v47 = v232 - __p;
        if ((v232 - __p) >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          uint64_t v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v232, v48);
          __int32 v44 = __p;
          uint64_t v39 = v231;
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v56 = &v49[4 * v45];
        *(_DWORD *)uint64_t v56 = *((_DWORD *)this + 1);
        int v40 = v56 + 4;
        while (v39 != v44)
        {
          int v57 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        uint64_t v58 = &v49[4 * v48];
        CMTime __p = v56;
        goto LABEL_63;
      }
      LODWORD(v251) = *(_DWORD *)(v227 + 4 * v33);
      uint64_t v41 = *(unsigned int *)(*v235 + 8 * v35);
      if ((int)v41 <= v234)
      {
        int v43 = (char *)(*v236 + 4 * *(int *)(*v235 + 4 * ((2 * v35) | 1)));
      }
      else
      {
        unint64_t v42 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v237, v35, &v251);
        int v43 = (char *)v42[5];
        uint64_t v41 = ((unint64_t)((char *)v42[6] - v43) >> 2);
      }
      if ((int)v41 < 1) {
        goto LABEL_66;
      }
      while (1)
      {
        uint64_t v51 = *(int *)v43;
        v43 += 4;
        uint64_t v50 = v51;
        int v52 = (char *)*v32 + 8 * v51;
        if (*v52 == v38 || v52[1] == v38) {
          break;
        }
        if (!--v41) {
          goto LABEL_66;
        }
      }
      if (v50 == -1) {
        goto LABEL_66;
      }
      LODWORD(v251) = v50;
      LODWORD(v53) = *(_DWORD *)(*(void *)v247 + 8 * v50);
      if ((int)v53 <= v246)
      {
        uint64_t v55 = &v248->__begin_[*(int *)(*(void *)v247 + 4 * (int)((2 * v50) | 1))];
      }
      else
      {
        size_t v54 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v249, v50, &v251);
        uint64_t v55 = (int *)v54[5];
        unint64_t v53 = (unint64_t)((char *)v54[6] - (char *)v55) >> 2;
      }
      if (v29 == v55[(int)v53 - 1])
      {
        uint64_t v106 = v231;
        unint64_t v105 = v232;
        if (v231 >= v232)
        {
          uint64_t v115 = __p;
          uint64_t v116 = (v231 - __p) >> 2;
          unint64_t v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62) {
            goto LABEL_269;
          }
          uint64_t v118 = v232 - __p;
          if ((v232 - __p) >> 1 > v117) {
            unint64_t v117 = v118 >> 1;
          }
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v119 = v117;
          }
          if (v119)
          {
            int v120 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v232, v119);
            uint64_t v115 = __p;
            uint64_t v106 = v231;
          }
          else
          {
            int v120 = 0;
          }
          unint64_t v122 = &v120[4 * v116];
          *(_DWORD *)unint64_t v122 = v50;
          unint64_t v107 = v122 + 4;
          while (v106 != v115)
          {
            int v123 = *((_DWORD *)v106 - 1);
            v106 -= 4;
            *((_DWORD *)v122 - 1) = v123;
            v122 -= 4;
          }
          unint64_t v105 = &v120[4 * v119];
          CMTime __p = v122;
          v232 = v105;
          if (v115)
          {
            operator delete(v115);
            unint64_t v105 = v232;
          }
        }
        else
        {
          *(_DWORD *)v231 = v50;
          unint64_t v107 = v231 + 4;
        }
        if (v107 < v105)
        {
          *(_DWORD *)unint64_t v107 = *((_DWORD *)this + 1);
          int v40 = v107 + 4;
          goto LABEL_65;
        }
        __int32 v44 = __p;
        uint64_t v124 = (v107 - __p) >> 2;
        unint64_t v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 62) {
          goto LABEL_269;
        }
        uint64_t v126 = v105 - __p;
        if (v126 >> 1 > v125) {
          unint64_t v125 = v126 >> 1;
        }
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v127 = v125;
        }
        if (v127)
        {
          uint64_t v128 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v232, v127);
          __int32 v44 = __p;
        }
        else
        {
          uint64_t v128 = 0;
        }
        unint64_t v129 = &v128[4 * v124];
        *(_DWORD *)unint64_t v129 = *((_DWORD *)this + 1);
        int v40 = v129 + 4;
        while (v107 != v44)
        {
          int v130 = *((_DWORD *)v107 - 1);
          v107 -= 4;
          *((_DWORD *)v129 - 1) = v130;
          v129 -= 4;
        }
        uint64_t v58 = &v128[4 * v127];
        CMTime __p = v129;
LABEL_63:
        v232 = v58;
        if (v44) {
          operator delete(v44);
        }
        goto LABEL_65;
      }
      if ((int)v53 >= 2) {
        break;
      }
      if (v35 == *((_DWORD *)*v32 + 2 * v50))
      {
        uint64_t v108 = v231;
        if (v231 < v232)
        {
LABEL_159:
          *(_DWORD *)uint64_t v108 = v50;
          uint64_t v121 = v108 + 4;
LABEL_199:
          v231 = v121;
          goto LABEL_133;
        }
        uint64_t v109 = __p;
        uint64_t v131 = (v231 - __p) >> 2;
        unint64_t v132 = v131 + 1;
        if ((unint64_t)(v131 + 1) >> 62) {
LABEL_269:
        }
          abort();
        uint64_t v133 = v232 - __p;
        if ((v232 - __p) >> 1 > v132) {
          unint64_t v132 = v133 >> 1;
        }
        if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v132;
        }
        if (v113)
        {
          int v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v232, v113);
          uint64_t v109 = __p;
          uint64_t v108 = v231;
        }
        else
        {
          int v114 = 0;
        }
        uint64_t v134 = &v114[4 * v131];
        *(_DWORD *)uint64_t v134 = v50;
        uint64_t v121 = v134 + 4;
        while (v108 != v109)
        {
          int v136 = *((_DWORD *)v108 - 1);
          v108 -= 4;
          *((_DWORD *)v134 - 1) = v136;
          v134 -= 4;
        }
LABEL_197:
        CMTime __p = v134;
        v232 = &v114[4 * v113];
        if (v109) {
          operator delete(v109);
        }
        goto LABEL_199;
      }
LABEL_133:
      *(_DWORD *)(v224 + 4 * v33++) = v50;
      if (v36 == v31) {
        goto LABEL_200;
      }
    }
    uint64_t v108 = v231;
    if (v231 < v232) {
      goto LABEL_159;
    }
    uint64_t v109 = __p;
    uint64_t v110 = (v231 - __p) >> 2;
    unint64_t v111 = v110 + 1;
    if ((unint64_t)(v110 + 1) >> 62) {
      goto LABEL_269;
    }
    uint64_t v112 = v232 - __p;
    if ((v232 - __p) >> 1 > v111) {
      unint64_t v111 = v112 >> 1;
    }
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v113 = v111;
    }
    if (v113)
    {
      int v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v232, v113);
      uint64_t v109 = __p;
      uint64_t v108 = v231;
    }
    else
    {
      int v114 = 0;
    }
    uint64_t v134 = &v114[4 * v110];
    *(_DWORD *)uint64_t v134 = v50;
    uint64_t v121 = v134 + 4;
    while (v108 != v109)
    {
      int v135 = *((_DWORD *)v108 - 1);
      v108 -= 4;
      *((_DWORD *)v134 - 1) = v135;
      v134 -= 4;
    }
    goto LABEL_197;
  }
LABEL_201:
  int v140 = *((_DWORD *)this + 5);
  if (v138 > v140) {
    int v140 = v138;
  }
  if (v139 > v140) {
    int v140 = v139;
  }
  *((_DWORD *)this + 4) = v137;
  *((_DWORD *)this + 5) = v140;
  int v219 = v140;
  uint64_t v142 = (void *)((char *)this + 72);
  uint64_t v141 = (void *)((char *)this + 24);
  if (v140 < 0x10000)
  {
    unint64_t v143 = *((int *)this + 1);
    std::vector<unsigned int>::resize(v215, 2 * v143);
    std::vector<float>::resize((uint64_t)this + 216, v143);
    uint64_t v144 = *((void *)this + 30);
    unint64_t v145 = *((void *)this + 31) - v144;
    if (v143 <= v145)
    {
      unint64_t v146 = (void *)((char *)this + 240);
      char v147 = (uint64_t *)((char *)this + 432);
      if (v143 < v145) {
        *((void *)this + 31) = v144 + v143;
      }
    }
    else
    {
      unint64_t v146 = (void *)((char *)this + 240);
      std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)this + 30, v143 - v145);
      char v147 = (uint64_t *)((char *)this + 432);
    }
    if ((int)v143 >= 1) {
      bzero(*((void **)this + 30), *((int *)this + 1));
    }
    int v148 = __p;
    if ((int)((unint64_t)(v231 - __p) >> 2) >= 1)
    {
      uint64_t v149 = 0;
      do
      {
        uint64_t v150 = *(int *)&v148[4 * v149];
        *(unsigned char *)(*v146 + v150) |= 1u;
        unint64_t v151 = (int *)(*v223 + 8 * v150);
        *(_WORD *)(*v147 + 2 * *v151) |= 1u;
        *(_WORD *)(*v147 + 2 * v151[1]) |= 1u;
        ++v149;
        int v148 = __p;
      }
      while (v149 < (int)((unint64_t)(v231 - __p) >> 2));
    }
    uint64_t v152 = *((unsigned int *)this + 2);
    if ((int)v152 >= 1)
    {
      uint64_t v153 = 0;
      __int32 v154 = 0;
      uint64_t v155 = 2 * v152;
      uint64_t v222 = 2 * v152;
      do
      {
        uint64_t v156 = *v147;
        if ((*(_WORD *)(*v147 + v153) & 1) == 0)
        {
          uint64_t v157 = *(int *)(*v217 + 4 * ((int)v153 + 1));
          uint64_t v158 = *(int *)(*v217 + 4 * (int)v153);
          std::vector<int>::pointer begin = v212->__begin_;
          std::vector<int>::pointer v228 = v216->__begin_;
          uint64_t v159 = *(int *)(*v213 + 4 * ((int)v153 + 1));
          uint64_t v160 = *(int *)(*v213 + 4 * (int)v153);
          int v161 = v254;
          v251 = v254;
          int v252 = v160 + v158;
          int v253 = 32;
          v255 = 0;
          if ((v160 + v158) >= 0x21)
          {
            int v161 = operator new(4 * (v160 + v158));
            v255 = v161;
            v251 = v161;
            int v253 = v160 + v158;
          }
          if (OpenSubdiv::v3_1_1::Vtr::internal::Level::orderVertexFacesAndEdges(this, v154, (int *)v161, (int *)&v161[4 * v158]))
          {
            memcpy(&v228[v157], v161, 4 * v158);
            memcpy(&begin[v159], &v161[4 * v158], 4 * v160);
            operator delete(v255);
          }
          else
          {
            operator delete(v255);
            *(_WORD *)(v156 + v153) |= 1u;
          }
          uint64_t v142 = (void *)((char *)this + 72);
          uint64_t v141 = (void *)((char *)this + 24);
          char v147 = (uint64_t *)((char *)this + 432);
          uint64_t v155 = v222;
        }
        ++v154;
        v153 += 2;
      }
      while (v155 != v153);
      LODWORD(v152) = *((_DWORD *)this + 2);
    }
    uint64_t v229 = *((unsigned int *)this + 1);
    std::vector<unsigned short>::resize((uint64_t)this + 312, (uint64_t)(*((void *)this + 37) - *((void *)this + 36)) >> 2);
    std::vector<unsigned short>::resize((uint64_t)this + 384, (uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
    v226 = (void *)((char *)this + 192);
    std::vector<unsigned short>::resize((uint64_t)this + 192, (uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 2);
    if ((int)v152 >= 1)
    {
      uint64_t v162 = 0;
      uint64_t v163 = v152;
      do
      {
        uint64_t v164 = (unsigned int *)(*v217 + 8 * v162);
        uint64_t v165 = *v164;
        if ((int)v165 >= 1)
        {
          uint64_t v166 = (int)v164[1];
          uint64_t v167 = &v216->__begin_[v166];
          unint64_t v168 = (_WORD *)(*((void *)this + 39) + 2 * v166);
          int v169 = -1;
          do
          {
            uint64_t v170 = *v167;
            if (v170 == v169) {
              uint64_t v171 = (unsigned __int16)*(v168 - 1) + 1;
            }
            else {
              uint64_t v171 = 0;
            }
            uint64_t v172 = *((void *)this + 3);
            uint64_t v173 = *((void *)this + 6) + 4 * *(int *)(v172 + 4 * (int)((2 * v170) | 1));
            uint64_t v174 = (__int32 *)(v173 + 4 * v171);
            uint64_t v175 = v173 + 4 * *(int *)(v172 + 8 * v170);
            unint64_t v176 = wmemchr(v174, v162, (v175 - (uint64_t)v174) >> 2);
            if (v176) {
              int v177 = (int)v176;
            }
            else {
              int v177 = v175;
            }
            *v168++ = (v174 + ((v177 - v174) & 0x3FFFC) - v173) >> 2;
            int v178 = *v167++;
            int v169 = v178;
            --v165;
          }
          while (v165);
        }
        ++v162;
      }
      while (v162 != v163);
      uint64_t v179 = 0;
      std::vector<int>::pointer v180 = v212->__begin_;
      uint64_t v181 = *v213;
      uint64_t v182 = *((void *)this + 48);
      uint64_t v142 = (void *)((char *)this + 72);
      uint64_t v141 = (void *)((char *)this + 24);
      while (1)
      {
        int v183 = (unsigned int *)(v181 + 8 * v179);
        uint64_t v184 = *v183;
        if ((int)v184 >= 1) {
          break;
        }
LABEL_251:
        if (*((_DWORD *)this + 5) > (int)v184) {
          LODWORD(v184) = *((_DWORD *)this + 5);
        }
        *((_DWORD *)this + 5) = v184;
        if (++v179 == v163) {
          goto LABEL_254;
        }
      }
      uint64_t v185 = 0;
      uint64_t v186 = (int)v183[1];
      unint64_t v187 = &v180[v186];
      uint64_t v188 = v182 + 2 * v186;
      uint64_t v189 = *v223;
      while (1)
      {
        uint64_t v190 = v187[v185];
        uint64_t v191 = (int *)(v189 + 8 * v190);
        int v193 = *v191;
        uint64_t v192 = v191[1];
        if (v193 != v192) {
          break;
        }
        if (v185)
        {
          BOOL v194 = v190 == v187[v185 - 1];
          goto LABEL_245;
        }
        __int16 v195 = 0;
LABEL_248:
        *(_WORD *)(v188 + 2 * v185++) = v195;
        if (v184 == v185) {
          goto LABEL_251;
        }
      }
      BOOL v194 = v179 == v192;
LABEL_245:
      __int16 v195 = v194;
      goto LABEL_248;
    }
LABEL_254:
    if ((int)v229 >= 1)
    {
      for (uint64_t i = 0; i != v229; ++i)
      {
        uint64_t v197 = &v215->__begin_[2 * i];
        uint64_t v198 = *v197;
        if ((int)v198 >= 1)
        {
          uint64_t v199 = v197[1];
          v200 = &v214->__begin_[v199];
          uint64_t v201 = (_WORD *)(*v226 + 2 * v199);
          int v202 = -1;
          do
          {
            uint64_t v203 = *v200;
            if (v203 == v202) {
              uint64_t v204 = (unsigned __int16)*(v201 - 1) + 1;
            }
            else {
              uint64_t v204 = 0;
            }
            uint64_t v205 = *v142 + 4 * *(int *)(*v141 + 4 * (int)((2 * v203) | 1));
            uint64_t v206 = (__int32 *)(v205 + 4 * v204);
            uint64_t v207 = v205 + 4 * *(int *)(*v141 + 8 * v203);
            int v208 = wmemchr(v206, i, (v207 - (uint64_t)v206) >> 2);
            if (v208) {
              int v209 = (int)v208;
            }
            else {
              int v209 = v207;
            }
            *v201++ = (v206 + ((v209 - v206) & 0x3FFFC) - v205) >> 2;
            int v210 = *v200++;
            int v202 = v210;
            --v198;
          }
          while (v198);
        }
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v238[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v244[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v250[0]);
  return v219 < 0x10000;
}

void OpenSubdiv::v3_1_1::Vtr::internal::anonymous namespace'::DynamicRelation::appendCompMember(OpenSubdiv::v3_1_1::Vtr::internal::_anonymous_namespace_::DynamicRelation *this, int a2, int a3)
{
  int v26 = a2;
  uint64_t v5 = 2 * a2;
  uint64_t v6 = **((void **)this + 1);
  int v7 = *(_DWORD *)(v6 + 4 * v5);
  uint64_t v8 = *(int *)(v6 + 8 * a2 + 4);
  if (v7 >= *((_DWORD *)this + 1))
  {
    uint64_t v9 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v26);
    unint64_t v10 = (void **)(v9 + 5);
    uint64_t v11 = *((int *)this + 1);
    if (v7 <= (int)v11)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)(v9 + 5), v11 + 1);
      memcpy(*v10, (const void *)(**((void **)this + 2) + 4 * v8), 4 * *((int *)this + 1));
      *((_DWORD *)*v10 + *((int *)this + 1)) = a3;
    }
    else
    {
      int v12 = v9;
      uint64_t v13 = (uint64_t)(v9 + 7);
      int v14 = v9[7];
      int v15 = (char *)v9[6];
      if (v15 >= (char *)v14)
      {
        unint64_t v17 = (char *)*v10;
        uint64_t v18 = (v15 - (unsigned char *)*v10) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          abort();
        }
        uint64_t v20 = (char *)v14 - v17;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v13, v21);
          unint64_t v17 = (char *)v12[5];
          int v15 = (char *)v12[6];
        }
        else
        {
          int v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        unint64_t v24 = (uint64_t *)&v22[4 * v21];
        *(_DWORD *)uint64_t v23 = a3;
        uint64_t v16 = (uint64_t *)(v23 + 4);
        while (v15 != v17)
        {
          int v25 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v25;
          v23 -= 4;
        }
        v12[5] = (uint64_t *)v23;
        v12[6] = v16;
        v12[7] = v24;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)int v15 = a3;
        uint64_t v16 = (uint64_t *)(v15 + 4);
      }
      v12[6] = v16;
      uint64_t v5 = 2 * v26;
    }
  }
  else
  {
    *(_DWORD *)(**((void **)this + 2) + 4 * ((int)v8 + v7)) = a3;
  }
  ++*(_DWORD *)(**((void **)this + 1) + 4 * v5);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::anonymous namespace'::DynamicRelation::compressMemberIndices(OpenSubdiv::v3_1_1::Vtr::internal::_anonymous_namespace_::DynamicRelation *this)
{
  int v2 = (int *)**((void **)this + 1);
  int v3 = *v2;
  LODWORD(v4) = *(_DWORD *)this;
  if (*((void *)this + 5))
  {
    if ((int)v4 < 2)
    {
      char v5 = 0;
      uint64_t v8 = *((unsigned int *)this + 1);
    }
    else
    {
      char v5 = 0;
      uint64_t v6 = v2 + 3;
      uint64_t v7 = 1;
      do
      {
        *uint64_t v6 = v3;
        uint64_t v8 = *((unsigned int *)this + 1);
        uint64_t v4 = *(int *)this;
        v5 |= v3 > (int)v8 * (int)v7;
        v3 += *(v6 - 1);
        ++v7;
        v6 += 2;
      }
      while (v7 < v4);
    }
    char v12 = v5 | (v3 > (int)v4 * (int)v8);
    memset(&v28, 0, sizeof(v28));
    if (v5 & 1 | (v3 > (int)v4 * (int)v8))
    {
      uint64_t v13 = &v28;
      std::vector<unsigned int>::resize(&v28, v3);
      LODWORD(v4) = *(_DWORD *)this;
      uint64_t v8 = *((unsigned int *)this + 1);
    }
    else
    {
      uint64_t v13 = (std::vector<int> *)*((void *)this + 2);
    }
    char v26 = v12;
    int v27 = 0;
    if ((int)v4 >= 1)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      do
      {
        uint64_t v16 = (int *)(**((void **)this + 1) + v14);
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        std::vector<int>::pointer begin = v13->__begin_;
        int v20 = *((_DWORD *)this + 1);
        if ((int)v17 <= v20)
        {
          unint64_t v21 = (uint64_t *)(**((void **)this + 2) + 4 * v20 * v15);
        }
        else
        {
          unint64_t v21 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)this + 3, v15, &v27)[5];
          if ((int)v8 <= (int)v17) {
            uint64_t v8 = v17;
          }
          else {
            uint64_t v8 = v8;
          }
        }
        memmove(&begin[v18], v21, 4 * v17);
        int v27 = ++v15;
        v14 += 8;
      }
      while (v15 < *(_DWORD *)this);
    }
    uint64_t v22 = *((void *)this + 2);
    if (v26)
    {
      uint64_t v23 = *(int **)v22;
      *(void *)uint64_t v22 = v28.__begin_;
      *(void *)(v22 + 8) = v28.__end_;
      unint64_t v24 = *(int **)(v22 + 16);
      *(void *)(v22 + 16) = v28.__end_cap_.__value_;
      v28.__begin_ = v23;
      v28.__end_cap_.__value_ = v24;
      if (!v23) {
        return v8;
      }
      goto LABEL_29;
    }
    std::vector<unsigned int>::resize(*((std::vector<int> **)this + 2), v3);
    uint64_t v23 = v28.__begin_;
    if (v28.__begin_)
    {
LABEL_29:
      v28.__end_ = v23;
      operator delete(v23);
    }
  }
  else
  {
    if ((int)v4 < 2)
    {
      uint64_t v8 = *v2;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      LODWORD(v8) = *v2;
      do
      {
        uint64_t v11 = v2[v9 + 2];
        memmove((void *)(**((void **)this + 2) + 4 * v3), (const void *)(**((void **)this + 2) + 4 * v2[v9 + 3]), 4 * v11);
        int v2 = (int *)**((void **)this + 1);
        v2[v9 + 3] = v3;
        v3 += v11;
        if ((int)v8 <= (int)v11) {
          uint64_t v8 = v11;
        }
        else {
          uint64_t v8 = v8;
        }
        ++v10;
        v9 += 2;
      }
      while (v10 < *(int *)this);
    }
    std::vector<unsigned int>::resize(*((std::vector<int> **)this + 2), v3);
  }
  return v8;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Level::createFVarChannel()
{
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  char v5 = a1[2];
  uint64_t v6 = a1[1];
  if (a2 <= (v5 - v6) >> 1)
  {
    a1[1] = &v6[2 * a2];
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v6 - *a1;
    uint64_t v9 = a2 + (v8 >> 1);
    if (v9 < 0) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    unint64_t v11 = v5 - v7;
    if (v11 > v9) {
      uint64_t v9 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v9;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v12);
      uint64_t v7 = *a1;
      uint64_t v6 = a1[1];
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v10];
    int v15 = &v13[2 * v12];
    uint64_t v16 = &v14[2 * a2];
    if (v6 != v7)
    {
      do
      {
        __int16 v17 = *((_WORD *)v6 - 1);
        v6 -= 2;
        *((_WORD *)v14 - 1) = v17;
        v14 -= 2;
      }
      while (v6 != v7);
      uint64_t v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append(void **a1, unint64_t a2)
{
  char v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (v4 - v5 >= a2)
  {
    a1[1] = &v5[a2];
  }
  else
  {
    unint64_t v6 = (unint64_t)*a1;
    uint64_t v7 = (char *)(v5 - (unsigned char *)*a1);
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      abort();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v11[v10];
    uint64_t v13 = &v7[(void)v11 + a2];
    if (v5 == (char *)v6)
    {
      unint64_t v11 = &v7[(void)v11];
    }
    else
    {
      uint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v11] = v15;
      }
      while (v5 != (char *)v6);
      char v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      char v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *unint64_t v6 = (uint64_t *)v7;
    size_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create(uint64_t a1, unsigned __int16 a2)
{
  if (((*(unsigned __int8 *)(a1 + 8) >> 2) & 0xFu) >= ((a2 >> 6) & 0xFu)) {
    int v2 = (a2 >> 6) & 0xF;
  }
  else {
    int v2 = (*(unsigned __int8 *)(a1 + 8) >> 2) & 0xF;
  }
  if (!(a2 & 8 | v2)) {
    operator new();
  }
  operator new();
}

uint64_t OpenSubdiv::v3_1_1::Far::StencilTableFactory::appendLocalPointStencilTable(OpenSubdiv::v3_1_1::Far::StencilTableFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, const OpenSubdiv::v3_1_1::Far::StencilTable *a3, const OpenSubdiv::v3_1_1::Far::StencilTable *a4)
{
  if (a2 && a3 && ((*((void *)a3 + 3) - *((void *)a3 + 2)) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v4 = **((void **)this + 11);
    if ((a4 & 0x80000000) != 0) {
      char v5 = (int *)(v4 + 8);
    }
    else {
      char v5 = (int *)(*(void *)(*(void *)(v4 + 456) + 8 * a4) + 16);
    }
    int v6 = *v5;
    uint64_t v7 = (*((void *)a2 + 3) - *((void *)a2 + 2)) >> 2;
    if ((a4 & 0x80000000) != 0)
    {
      int v10 = *((_DWORD *)this + 5);
    }
    else
    {
      int v8 = (uint64_t *)*((void *)this + 5);
      uint64_t v9 = *((void *)this + 6) - (void)v8;
      if ((int)((unint64_t)v9 >> 3) < 1)
      {
        int v10 = 0;
      }
      else
      {
        int v10 = 0;
        uint64_t v11 = (int)(v9 >> 3);
        if (v11 <= 1) {
          uint64_t v11 = 1;
        }
        do
        {
          uint64_t v12 = *v8++;
          v10 += *(_DWORD *)(*(void *)(*(void *)(v12 + 456) + 8 * a4) + 16);
          --v11;
        }
        while (v11);
      }
    }
    if (v10 == v7 || v10 - v6 == v7) {
      operator new();
    }
  }
  return 0;
}

_WORD *OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(_WORD *result, void *a2, int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (a5 != 1)
  {
    if (a6)
    {
      if (a6 != 4) {
        goto LABEL_14;
      }
    }
    else if (a5 != 4)
    {
      float v33 = *(float *)(a2[27] + 4 * a3);
      if (v33 < 1.0 && ((*(_DWORD *)result & 0x60) == 0 || (float)(v33 + -1.0) <= 0.0))
      {
LABEL_14:
        uint64_t v19 = a2[18];
        uint64_t v20 = *(unsigned int *)(v19 + 8 * a3);
        *(void *)(a4 + 24) = 2;
        *(_DWORD *)(a4 + 32) = v20;
        *(unsigned char *)(a4 + 36) = 1;
        int v21 = *result & 0x180;
        if (v21 == 128)
        {
          if (v20 == 2)
          {
            uint64_t v22 = *(unsigned int *)(v19 + 8 * a3);
            if ((int)v22 <= 0) {
              goto LABEL_51;
            }
            uint64_t v23 = 0;
            uint64_t v24 = a2[21] + 4 * *(int *)(v19 + 4 * ((2 * a3) | 1));
            uint64_t v25 = a2[3];
            uint64_t v26 = 4 * v22;
            do
            {
              *(int *)((char *)&v52 + v23) = *(_DWORD *)(v25 + 8 * *(int *)(v24 + v23));
              v23 += 4;
            }
            while (v26 != v23);
            LOBYTE(v21) = v53 == 3;
            LOBYTE(v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v52 == 3;
            if (v52 == 3 || v53 == 3)
            {
LABEL_51:
              float v47 = 0.47;
              if (v21) {
                float v48 = 0.47;
              }
              else {
                float v48 = 0.25;
              }
              if ((v19 & 1) == 0) {
                float v47 = 0.25;
              }
              float v39 = (float)(v47 + v48) * 0.5;
              float32_t v49 = (float)((float)(v39 * -2.0) + 1.0) * 0.5;
              std::vector<int> v28 = *(float32x2_t **)a4;
              v28->f32[0] = v49;
              v28->f32[1] = v49;
              int v38 = *(float **)(a4 + 16);
              *int v38 = v39;
              goto LABEL_57;
            }
            std::vector<int> v28 = *(float32x2_t **)a4;
            __asm { FMOV            V0.2S, #0.25 }
            **(void **)a4 = _D0;
LABEL_37:
            int v38 = *(float **)(a4 + 16);
            *int v38 = 0.25;
            float v39 = 0.25;
LABEL_57:
            v38[1] = v39;
LABEL_58:
            float v50 = *(float *)(a2[27] + 4 * a3);
            *std::vector<int> v28 = vmla_n_f32(vmul_n_f32(*v28, 1.0 - v50), (float32x2_t)0x3F0000003F000000, v50);
            if ((int)v20 >= 1)
            {
              uint64_t v51 = *(float **)(a4 + 16);
              do
              {
                float *v51 = (float)(1.0 - v50) * *v51;
                ++v51;
                --v20;
              }
              while (v20);
            }
            return result;
          }
          std::vector<int> v28 = *(float32x2_t **)a4;
          __asm { FMOV            V0.2S, #0.25 }
          **(void **)a4 = _D0;
        }
        else
        {
          std::vector<int> v28 = *(float32x2_t **)a4;
          __asm { FMOV            V0.2S, #0.25 }
          **(void **)a4 = _D0;
          if (v20 == 2) {
            goto LABEL_37;
          }
        }
        if ((int)v20 >= 1)
        {
          uint64_t v45 = *(float **)(a4 + 16);
          uint64_t v46 = v20;
          do
          {
            *v45++ = 0.5 / (float)(int)v20;
            --v46;
          }
          while (v46);
        }
        goto LABEL_58;
      }
    }
    *(_DWORD *)(a4 + 24) = 2;
    *(void *)(a4 + 28) = 0;
    *(unsigned char *)(a4 + 36) = 0;
    uint64_t v31 = *(float **)a4;
    **(_DWORD **)a4 = 1056964608;
    float v32 = 0.5;
    goto LABEL_44;
  }
  uint64_t v6 = a2[18];
  uint64_t v7 = *(unsigned int *)(v6 + 8 * a3);
  *(void *)(a4 + 24) = 2;
  *(_DWORD *)(a4 + 32) = v7;
  *(unsigned char *)(a4 + 36) = 1;
  if ((*result & 0x180) == 0x80)
  {
    if (v7 == 2)
    {
      char v8 = 2 * a3;
      uint64_t v9 = *(unsigned int *)(v6 + 8 * a3);
      if ((int)v9 <= 0) {
        goto LABEL_38;
      }
      uint64_t v10 = 0;
      uint64_t v11 = a2[21] + 4 * *(int *)(v6 + ((8 * a3) | 4));
      uint64_t v12 = a2[3];
      uint64_t v13 = 4 * v9;
      do
      {
        *(int *)((char *)&v52 + v1re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v12 + 8 * *(int *)(v11 + v10));
        v10 += 4;
      }
      while (v13 != v10);
      LOBYTE(v6) = v53 == 3;
      char v8 = v52 == 3;
      if (v52 == 3 || v53 == 3)
      {
LABEL_38:
        float v40 = 0.47;
        if (v6) {
          float v41 = 0.47;
        }
        else {
          float v41 = 0.25;
        }
        if ((v8 & 1) == 0) {
          float v40 = 0.25;
        }
        float v32 = (float)(v40 + v41) * 0.5;
        float v42 = (float)((float)(v32 * -2.0) + 1.0) * 0.5;
        int v43 = *(float **)a4;
        float *v43 = v42;
        v43[1] = v42;
        uint64_t v31 = *(float **)(a4 + 16);
        *uint64_t v31 = v32;
        goto LABEL_44;
      }
      __asm { FMOV            V0.2S, #0.25 }
      **(void **)a4 = _D0;
      goto LABEL_25;
    }
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a4 = _D0;
  }
  else
  {
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a4 = _D0;
    if (v7 == 2)
    {
LABEL_25:
      uint64_t v31 = *(float **)(a4 + 16);
      *uint64_t v31 = 0.25;
      float v32 = 0.25;
LABEL_44:
      v31[1] = v32;
      return result;
    }
  }
  if ((int)v7 >= 1)
  {
    float v35 = 0.5 / (float)(int)v7;
    uint64_t v36 = *(float **)(a4 + 16);
    do
    {
      *v36++ = v35;
      --v7;
    }
    while (v7);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v8;
    *(_DWORD *)(a3 + 32) = v8;
    *(unsigned char *)(a3 + 36) = 1;
    **(float **)a3 = (float)(v8 - 2) / (float)(int)v8;
    if ((int)v8 >= 1)
    {
      float v9 = 1.0 / (float)(v8 * v8);
      uint64_t v10 = *(float **)(a3 + 8);
      uint64_t v11 = *(float **)(a3 + 16);
      do
      {
        *v10++ = v9;
        *v11++ = v9;
        --v8;
      }
      while (v8);
    }
    return;
  }
  int v12 = a4;
  if (a5) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a4 == 0;
  }
  if (v14) {
    int v15 = a5;
  }
  else {
    int v15 = a4;
  }
  uint64_t v16 = *(unsigned int *)(a2 + 24);
  size_t v17 = 4 * (int)v16;
  MEMORY[0x270FA5388](a1);
  uint64_t v19 = (float *)&v87[-v18];
  bzero(&v87[-v18], v17);
  if ((v12 | 4) != 4 && v15 == v12)
  {
    uint64_t v19 = 0;
    float v29 = 0.0;
LABEL_37:
    uint64_t v38 = (int)v16;
    if (v12 == 4)
    {
      int v88 = v15;
      uint64_t v39 = 0xFFFFFFFF00000000;
      float v40 = v19;
      do
      {
        float v41 = *v40++;
        v39 += 0x100000000;
      }
      while (v41 <= 0.0);
      uint64_t v42 = (uint64_t)(int)v16 << 32;
      uint64_t v89 = (int)v16;
      int v43 = &v19[(int)v16 - 1];
      do
      {
        float v44 = *v43--;
        v42 -= 0x100000000;
      }
      while (v44 <= 0.0);
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v16;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      uint64_t v45 = *(char **)(a3 + 8);
      **(_DWORD **)a3 = 1061158912;
      if ((int)v16 >= 1) {
        bzero(v45, 4 * v16);
      }
      *(_DWORD *)&v45[v39 >> 30] = 1040187392;
      *(_DWORD *)&v45[v42 >> 30] = 1040187392;
      uint64_t v38 = v89;
      int v15 = v88;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v15 != v12)
    {
      int v90 = *a1;
      MEMORY[0x270FA5388](v20);
      uint64_t v46 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v46, 4 * (int)v16);
      ChildSharpnessPerEdge = OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge((OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *)a2, (const OpenSubdiv::v3_1_1::Sdc::Crease *)&v90, (float *)v46);
      float v48 = *(float *)(*(void *)(*(void *)(a2 + 8) + 408) + 4 * *(int *)(a2 + 20));
      if (v15) {
        goto LABEL_60;
      }
      if (v48 <= 0.0)
      {
        if ((int)v16 < 1)
        {
          int v15 = 1;
        }
        else
        {
          unsigned int v49 = 0;
          float v50 = (float *)&v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v51 = v16;
          do
          {
            float v52 = *v50++;
            if (v52 > 0.0) {
              ++v49;
            }
            --v51;
          }
          while (v51);
          int v15 = v49 <= 2 ? 1 << v49 : 8;
        }
      }
      else
      {
        int v15 = 8;
      }
      if (v15 != v12)
      {
LABEL_60:
        MEMORY[0x270FA5388](ChildSharpnessPerEdge);
        uint64_t v54 = (float *)&v87[-v53];
        bzero(&v87[-v53], v55);
        uint64_t v56 = v54 + 1;
        if ((v15 - 1) > 1)
        {
          if (v15 == 4)
          {
            uint64_t v89 = v38;
            uint64_t v63 = 0xFFFFFFFF00000000;
            unint64_t v64 = (float *)v46;
            do
            {
              float v65 = *v64++;
              v63 += 0x100000000;
            }
            while (v65 <= 0.0);
            uint64_t v66 = v89 << 32;
            BOOL v67 = (float *)&v46[4 * v89 - 4];
            do
            {
              float v68 = *v67--;
              v66 -= 0x100000000;
            }
            while (v68 <= 0.0);
            uint64_t v62 = *(unsigned int *)(a2 + 24);
            *uint64_t v54 = 0.75;
            if ((int)v62 >= 1) {
              bzero(v54 + 1, 4 * v62);
            }
            LODWORD(v57) = 0;
            *(_DWORD *)((char *)v56 + (v63 >> 30)) = 1040187392;
            uint64_t v69 = v66 >> 30;
            char v61 = 0;
            *(_DWORD *)((char *)v56 + v6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 1040187392;
            uint64_t v38 = v89;
          }
          else
          {
            char v61 = 0;
            LODWORD(v57) = 0;
            LODWORD(v62) = 0;
            *uint64_t v54 = 1.0;
          }
        }
        else
        {
          uint64_t v57 = *(unsigned int *)(a2 + 28);
          *uint64_t v54 = (float)(v57 - 2) / (float)(int)v57;
          if ((int)v57 >= 1)
          {
            float v58 = 1.0 / (float)(v57 * v57);
            uint64_t v59 = v54 + 1;
            uint64_t v60 = v57;
            do
            {
              *uint64_t v59 = v58;
              v59[v38] = v58;
              ++v59;
              --v60;
            }
            while (v60);
          }
          char v61 = 1;
          LODWORD(v62) = v57;
        }
        double v70 = OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v90, v29, v48, v16, v19, (const float *)v46);
        float v71 = 1.0 - *(float *)&v70;
        **(float **)a3 = (float)((float)(1.0 - *(float *)&v70) * *v54) + (float)(*(float *)&v70 * **(float **)a3);
        if (v62)
        {
          if (*(_DWORD *)(a3 + 28))
          {
            if ((int)v62 >= 1)
            {
              uint64_t v72 = *(float **)(a3 + 8);
              uint64_t v73 = v62;
              uint64_t v74 = v54 + 1;
              do
              {
                float v75 = *v74++;
                *uint64_t v72 = (float)(v71 * v75) + (float)(*(float *)&v70 * *v72);
                ++v72;
                --v73;
              }
              while (v73);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 28) = v62;
            if ((int)v62 >= 1)
            {
              uint64_t v76 = *(float **)(a3 + 8);
              uint64_t v77 = v62;
              int v78 = v54 + 1;
              do
              {
                float v79 = *v78++;
                *v76++ = v71 * v79;
                --v77;
              }
              while (v77);
            }
          }
        }
        if (v57)
        {
          int v80 = (float *)&v56[v38];
          if (*(_DWORD *)(a3 + 32))
          {
            if ((int)v57 >= 1)
            {
              unint64_t v81 = *(float **)(a3 + 16);
              uint64_t v82 = v57;
              do
              {
                float v83 = *v80++;
                *unint64_t v81 = (float)(v71 * v83) + (float)(*(float *)&v70 * *v81);
                ++v81;
                --v82;
              }
              while (v82);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 32) = v57;
            *(unsigned char *)(a3 + 36) = v61;
            if ((int)v57 >= 1)
            {
              uint64_t v84 = *(float **)(a3 + 16);
              uint64_t v85 = v57;
              do
              {
                float v86 = *v80++;
                *v84++ = v71 * v86;
                --v85;
              }
              while (v85);
            }
          }
        }
      }
    }
    return;
  }
  int v21 = *(void **)a2;
  uint64_t v22 = *(int *)(a2 + 16);
  uint64_t v23 = *(void *)(*(void *)a2 + 408);
  if ((int)v16 >= 1)
  {
    uint64_t v24 = (int *)(v21[45] + 4 * *(int *)(v21[42] + 8 * v22 + 4));
    uint64_t v25 = v21[27];
    uint64_t v26 = v19;
    uint64_t v27 = v16;
    do
    {
      uint64_t v28 = *v24++;
      *v26++ = *(float *)(v25 + 4 * v28);
      --v27;
    }
    while (v27);
  }
  float v29 = *(float *)(v23 + 4 * v22);
  if (!v12)
  {
    if (v29 <= 0.0) {
      int v12 = 1;
    }
    else {
      int v12 = 8;
    }
    if ((int)v16 >= 1 && v29 <= 0.0)
    {
      unsigned int v30 = 0;
      uint64_t v31 = v19;
      uint64_t v32 = v16;
      do
      {
        float v33 = *v31++;
        if (v33 > 0.0) {
          ++v30;
        }
        --v32;
      }
      while (v32);
      if (v30 <= 2) {
        int v12 = 1 << v30;
      }
      else {
        int v12 = 8;
      }
    }
    unsigned int v7 = v12 - 1;
  }
  if (v7 > 1) {
    goto LABEL_37;
  }
  uint64_t v34 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v34;
  *(_DWORD *)(a3 + 32) = v34;
  *(unsigned char *)(a3 + 36) = 1;
  **(float **)a3 = (float)(v34 - 2) / (float)(int)v34;
  if ((int)v34 >= 1)
  {
    float v35 = 1.0 / (float)(v34 * v34);
    uint64_t v36 = *(float **)(a3 + 8);
    uint64_t v37 = *(float **)(a3 + 16);
    do
    {
      *v36++ = v35;
      *v37++ = v35;
      --v34;
    }
    while (v34);
  }
}

float *OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge(OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *this, const OpenSubdiv::v3_1_1::Sdc::Crease *a2, float *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((unsigned int *)this + 6);
  unsigned int v7 = (float *)&v15;
  uint64_t v16 = 0;
  if (v6 < 0x11)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = (float *)operator new(4 * v6);
    uint64_t v16 = v8;
    LODWORD(v6) = *((_DWORD *)this + 6);
    unsigned int v7 = v8;
  }
  if ((int)v6 >= 1)
  {
    float v9 = (int *)(*(void *)(*(void *)this + 360)
               + 4 * *(int *)(*(void *)(*(void *)this + 336) + 8 * *((int *)this + 4) + 4));
    uint64_t v10 = *(void *)(*(void *)this + 216);
    uint64_t v11 = v6;
    int v12 = v7;
    do
    {
      uint64_t v13 = *v9++;
      *v12++ = *(float *)(v10 + 4 * v13);
      --v11;
    }
    while (v11);
  }
  OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(a2, v6, v7, a3);
  operator delete(v8);
  return a3;
}

uint64_t OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  if (a5 != 1)
  {
    if (a6)
    {
      if (a6 != 4)
      {
LABEL_6:
        uint64_t v14 = *(unsigned int *)(*(void *)(a2 + 144) + 8 * a3);
        *(void *)(a4 + 24) = 2;
        *(_DWORD *)(a4 + 32) = v14;
        *(unsigned char *)(a4 + 36) = 0;
        uint64_t v15 = *(float32x2_t **)a4;
        __asm { FMOV            V0.2S, #0.375 }
        **(void **)a4 = _D0;
        if (v14 == 2)
        {
          **(void **)(a4 + 16) = 0x3E0000003E000000;
        }
        else if ((int)v14 >= 1)
        {
          uint64_t v20 = *(float **)(a4 + 16);
          uint64_t v21 = v14;
          do
          {
            *v20++ = (float)(2.0 / (float)(int)v14) * 0.125;
            --v21;
          }
          while (v21);
        }
        float v22 = *(float *)(*(void *)(a2 + 216) + 4 * a3);
        *uint64_t v15 = vmla_n_f32(vmul_n_f32(*v15, 1.0 - v22), (float32x2_t)0x3F0000003F000000, v22);
        if ((int)v14 >= 1)
        {
          uint64_t v23 = *(float **)(a4 + 16);
          do
          {
            *uint64_t v23 = (float)(1.0 - v22) * *v23;
            ++v23;
            --v14;
          }
          while (v14);
        }
        return result;
      }
    }
    else if (a5 != 4)
    {
      float v19 = *(float *)(*(void *)(a2 + 216) + 4 * a3);
      if (v19 < 1.0 && ((result & 0x60) == 0 || (float)(v19 + -1.0) <= 0.0)) {
        goto LABEL_6;
      }
    }
    *(_DWORD *)(a4 + 24) = 2;
    *(void *)(a4 + 28) = 0;
    *(unsigned char *)(a4 + 36) = 0;
    int v12 = *(float32x2_t **)a4;
    **(_DWORD **)a4 = 1056964608;
    float v13 = 0.5;
    goto LABEL_17;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(a2 + 144) + 8 * a3);
  *(void *)(a4 + 24) = 2;
  *(_DWORD *)(a4 + 32) = v6;
  *(unsigned char *)(a4 + 36) = 0;
  __asm { FMOV            V0.2S, #0.375 }
  **(void **)a4 = _D0;
  if (v6 == 2)
  {
    int v12 = *(float32x2_t **)(a4 + 16);
    v12->i32[0] = 1040187392;
    float v13 = 0.125;
LABEL_17:
    v12->f32[1] = v13;
    return result;
  }
  if ((int)v6 >= 1)
  {
    float v17 = (float)(2.0 / (float)(int)v6) * 0.125;
    uint64_t v18 = *(float **)(a4 + 16);
    do
    {
      *v18++ = v17;
      --v6;
    }
    while (v6);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v8;
    *(unsigned char *)(a3 + 36) = 0;
    if (v8 == 6)
    {
      **(_DWORD **)a3 = 1059061760;
      float v9 = 0.0625;
    }
    else
    {
      float v34 = 1.0 / (float)(int)v8;
      float v35 = cosf(v34 * 6.2832);
      float v9 = v34 * (float)(0.625 - (float)((float)((float)(v35 * 0.25) + 0.375) * (float)((float)(v35 * 0.25) + 0.375)));
      **(float **)a3 = 1.0 - (float)(v9 * (float)(int)v8);
      if ((int)v8 < 1) {
        return;
      }
    }
    uint64_t v36 = *(float **)(a3 + 8);
    do
    {
      *v36++ = v9;
      --v8;
    }
    while (v8);
    return;
  }
  int v10 = a4;
  if (a5) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a4 == 0;
  }
  if (v12) {
    int v13 = a5;
  }
  else {
    int v13 = a4;
  }
  uint64_t v14 = *(unsigned int *)(a2 + 24);
  size_t v15 = 4 * (int)v14;
  MEMORY[0x270FA5388](a1);
  float v17 = (float *)((char *)&v81 - v16);
  bzero((char *)&v81 - v16, v15);
  if ((v10 | 4) != 4 && v13 == v10)
  {
    float v17 = 0;
    float v27 = 0.0;
    goto LABEL_37;
  }
  float v19 = *(void **)a2;
  uint64_t v20 = *(int *)(a2 + 16);
  uint64_t v21 = *(void *)(*(void *)a2 + 408);
  if ((int)v14 >= 1)
  {
    float v22 = (int *)(v19[45] + 4 * *(int *)(v19[42] + 8 * v20 + 4));
    uint64_t v23 = v19[27];
    uint64_t v24 = v17;
    uint64_t v25 = v14;
    do
    {
      uint64_t v26 = *v22++;
      *v24++ = *(float *)(v23 + 4 * v26);
      --v25;
    }
    while (v25);
  }
  float v27 = *(float *)(v21 + 4 * v20);
  if (!v10)
  {
    if (v27 <= 0.0) {
      int v10 = 1;
    }
    else {
      int v10 = 8;
    }
    if ((int)v14 >= 1 && v27 <= 0.0)
    {
      unsigned int v28 = 0;
      float v29 = v17;
      uint64_t v30 = v14;
      do
      {
        float v31 = *v29++;
        if (v31 > 0.0) {
          ++v28;
        }
        --v30;
      }
      while (v30);
      if (v28 <= 2) {
        int v10 = 1 << v28;
      }
      else {
        int v10 = 8;
      }
    }
    unsigned int v7 = v10 - 1;
  }
  if (v7 > 1)
  {
LABEL_37:
    uint64_t v37 = (int)v14;
    if (v10 == 4)
    {
      int v83 = v13;
      uint64_t v38 = 0xFFFFFFFF00000000;
      uint64_t v39 = v17;
      do
      {
        float v40 = *v39++;
        v38 += 0x100000000;
      }
      while (v40 <= 0.0);
      uint64_t v41 = (uint64_t)(int)v14 << 32;
      uint64_t v82 = (int)v14;
      uint64_t v42 = &v17[(int)v14 - 1];
      do
      {
        float v43 = *v42--;
        v41 -= 0x100000000;
      }
      while (v43 <= 0.0);
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v14;
      *(_DWORD *)(a3 + 32) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      float v44 = *(char **)(a3 + 8);
      **(_DWORD **)a3 = 1061158912;
      if ((int)v14 >= 1) {
        bzero(v44, 4 * v14);
      }
      *(_DWORD *)&v44[v38 >> 30] = 1040187392;
      *(_DWORD *)&v44[v41 >> 30] = 1040187392;
      int v13 = v83;
      uint64_t v37 = v82;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v13 == v10) {
      return;
    }
    int v84 = *a1;
    MEMORY[0x270FA5388](v18);
    uint64_t v45 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v45, 4 * (int)v14);
    ChildSharpnessPerEdge = OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge((OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *)a2, (const OpenSubdiv::v3_1_1::Sdc::Crease *)&v84, (float *)v45);
    float v47 = *(float *)(*(void *)(*(void *)(a2 + 8) + 408) + 4 * *(int *)(a2 + 20));
    if (!v13)
    {
      if (v47 <= 0.0)
      {
        if ((int)v14 < 1)
        {
          int v13 = 1;
        }
        else
        {
          unsigned int v51 = 0;
          float v52 = (float *)((char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
          uint64_t v53 = v14;
          do
          {
            float v54 = *v52++;
            if (v54 > 0.0) {
              ++v51;
            }
            --v53;
          }
          while (v53);
          int v13 = v51 <= 2 ? 1 << v51 : 8;
        }
      }
      else
      {
        int v13 = 8;
      }
      if (v13 == v10) {
        return;
      }
    }
    MEMORY[0x270FA5388](ChildSharpnessPerEdge);
    uint64_t v56 = (float *)((char *)&v81 - v55);
    bzero((char *)&v81 - v55, v57);
    float v58 = v56 + 1;
    if ((v13 - 1) > 1)
    {
      if (v13 == 4)
      {
        uint64_t v62 = v37;
        uint64_t v63 = 0xFFFFFFFF00000000;
        unint64_t v64 = (float *)v45;
        do
        {
          float v65 = *v64++;
          v63 += 0x100000000;
        }
        while (v65 <= 0.0);
        uint64_t v66 = v62 << 32;
        BOOL v67 = (float *)&v45[4 * v62 - 4];
        do
        {
          float v68 = *v67--;
          v66 -= 0x100000000;
        }
        while (v68 <= 0.0);
        uint64_t v59 = *(unsigned int *)(a2 + 24);
        *uint64_t v56 = 0.75;
        if ((int)v59 >= 1) {
          bzero(v56 + 1, 4 * v59);
        }
        *(float *)((char *)v58 + (v63 >> 30)) = 0.125;
        *(float *)((char *)v58 + (v66 >> 30)) = 0.125;
        float v60 = *v56;
      }
      else
      {
        LODWORD(v5re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
        float v60 = 1.0;
      }
      goto LABEL_80;
    }
    uint64_t v59 = *(unsigned int *)(a2 + 28);
    if (v59 == 6)
    {
      float v60 = 0.625;
      float v61 = 0.0625;
    }
    else
    {
      float v69 = 1.0 / (float)(int)v59;
      float v70 = cosf(v69 * 6.2832);
      float v61 = v69 * (float)(0.625 - (float)((float)((float)(v70 * 0.25) + 0.375) * (float)((float)(v70 * 0.25) + 0.375)));
      float v60 = 1.0 - (float)(v61 * (float)(int)v59);
      if ((int)v59 < 1) {
        goto LABEL_80;
      }
    }
    float v71 = v56 + 1;
    uint64_t v72 = v59;
    do
    {
      *v71++ = v61;
      --v72;
    }
    while (v72);
LABEL_80:
    double v73 = OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v84, v27, v47, v14, v17, (const float *)v45);
    float v74 = 1.0 - *(float *)&v73;
    **(float **)a3 = (float)((float)(1.0 - *(float *)&v73) * v60) + (float)(*(float *)&v73 * **(float **)a3);
    if (v59)
    {
      if (*(_DWORD *)(a3 + 28))
      {
        if ((int)v59 >= 1)
        {
          float v75 = *(float **)(a3 + 8);
          uint64_t v76 = v59;
          do
          {
            float v77 = *v58++;
            *float v75 = (float)(v74 * v77) + (float)(*(float *)&v73 * *v75);
            ++v75;
            --v76;
          }
          while (v76);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v59;
        if ((int)v59 >= 1)
        {
          int v78 = *(float **)(a3 + 8);
          uint64_t v79 = v59;
          do
          {
            float v80 = *v58++;
            *v78++ = v74 * v80;
            --v79;
          }
          while (v79);
        }
      }
    }
    return;
  }
  uint64_t v32 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 28) = v32;
  *(unsigned char *)(a3 + 36) = 0;
  if (v32 == 6)
  {
    **(_DWORD **)a3 = 1059061760;
    float v33 = 0.0625;
  }
  else
  {
    float v48 = 1.0 / (float)(int)v32;
    float v49 = cosf(v48 * 6.2832);
    float v33 = v48 * (float)(0.625 - (float)((float)((float)(v49 * 0.25) + 0.375) * (float)((float)(v49 * 0.25) + 0.375)));
    **(float **)a3 = 1.0 - (float)(v33 * (float)(int)v32);
    if ((int)v32 < 1) {
      return;
    }
  }
  float v50 = *(float **)(a3 + 8);
  do
  {
    *v50++ = v33;
    --v32;
  }
  while (v32);
}

uint64_t OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v182 = v6;
  uint64_t v7 = 0;
  uint64_t v229 = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v8 = v1 + v7;
    *(_DWORD *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = v1 + v7 + 24;
    *(void *)(v8 + 344) = 0;
    *(void *)(v8 + 16) = 0x2800000028;
    v7 += 352;
  }
  while (v7 != 1408);
  do
  {
    uint64_t v9 = v1 + v7;
    *(_DWORD *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = v1 + v7 + 24;
    *(void *)(v9 + 344) = 0;
    *(void *)(v9 + 16) = 0x2800000028;
    v7 += 352;
  }
  while (v9 + 352 != v1 + 2816);
  uint64_t v10 = 2816;
  do
  {
    uint64_t v11 = v1 + v10;
    *(_DWORD *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = v1 + v10 + 24;
    *(void *)(v11 + 344) = 0;
    *(void *)(v11 + 16) = 0x2800000028;
    v10 += 352;
  }
  while (v11 + 352 != v1 + 4224);
  uint64_t v12 = 4224;
  do
  {
    uint64_t v13 = v1 + v12;
    *(_DWORD *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = v1 + v12 + 24;
    *(void *)(v13 + 344) = 0;
    *(void *)(v13 + 16) = 0x2800000028;
    v12 += 352;
  }
  while (v13 + 352 != v1 + 5632);
  int v181 = v4;
  uint64_t v14 = 5632;
  do
  {
    uint64_t v15 = v1 + v14;
    *(_DWORD *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = v1 + v14 + 24;
    *(void *)(v15 + 344) = 0;
    *(void *)(v15 + 16) = 0x2800000028;
    v14 += 352;
  }
  while (v15 + 352 != v1 + 7040);
  int v16 = (2 * v3) | 1;
  uint64_t v17 = *(void *)(v2 + 48) + 4 * *(int *)(*(void *)(v2 + 24) + 4 * v16);
  uint64_t v183 = v17;
  if ((v5 & 0x80000000) == 0)
  {
    uint64_t v18 = *(void **)(*(void *)(v2 + 456) + 8 * v5);
    uint64_t v183 = v18[3] + 4 * *(int *)(*(void *)(*v18 + 24) + 4 * v16);
  }
  uint64_t v19 = 0;
  uint64_t v20 = (OpenSubdiv::v3_1_1::Vtr::internal::Level *)v2;
  uint64_t v21 = *(int *)(v2 + 20);
  do
  {
    float v22 = &(&v209)[v19];
    *float v22 = &v212[v19 * 8];
    v22[1] = 0x2800000000;
    v22[22] = 0;
    v19 += 23;
  }
  while (v19 != 92);
  unsigned int v23 = v5;
  uint64_t v24 = v21 + ((v5 & 0x80000000) == 0);
  unsigned int v25 = 2 * v24;
  uint64_t v184 = v1;
  uint64_t v179 = v24;
  std::vector<int>::pointer v180 = (void **)(v1 + 2816);
  if (v24)
  {
    if (v211 < v25)
    {
      operator delete(v213);
      int v209 = v212;
      unsigned int v211 = 40;
      v213 = operator new(4 * v25);
      int v209 = v213;
      unsigned int v211 = v25;
    }
    unsigned int v210 = v25;
    if (v216 < v25)
    {
      operator delete(v218);
      v214 = v217;
      unsigned int v216 = 40;
      uint64_t v218 = operator new(4 * v25);
      v214 = v218;
      unsigned int v216 = v25;
    }
    unsigned int v215 = v25;
    if (v221 < v25)
    {
      operator delete(v223);
      int v219 = v222;
      unsigned int v221 = 40;
      v223 = operator new(4 * v25);
      int v219 = v223;
      unsigned int v221 = v25;
    }
    unsigned int v220 = v25;
    if (v226 < v25)
    {
      operator delete(v228);
      uint64_t v224 = v227;
      unsigned int v226 = 40;
      std::vector<int>::pointer v228 = operator new(4 * v25);
      uint64_t v224 = v228;
      unsigned int v226 = v25;
    }
  }
  else
  {
    operator delete(v213);
    int v209 = v212;
    unsigned int v210 = v25;
    unsigned int v211 = 40;
    operator delete(v218);
    v214 = v217;
    unsigned int v215 = v25;
    unsigned int v216 = 40;
    operator delete(v223);
    int v219 = v222;
    unsigned int v221 = 40;
    unsigned int v220 = v25;
    operator delete(v228);
    uint64_t v224 = v227;
    unsigned int v226 = 40;
  }
  uint64_t v26 = 0;
  unsigned int v225 = v25;
  unsigned int v186 = 4;
  do
  {
    *(_DWORD *)(v184 + 4 * v26 + 704re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v17 + 4 * v26) + v181;
    float v27 = (unsigned __int16 *)(v182 + 6 * v26);
    int v28 = *(_DWORD *)(v17 + 4 * v26);
    float v29 = (uint64_t *)&(&v209)[23 * v26];
    if (*v27)
    {
      int v30 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularPartialRingAroundVertex(v20, v28, v27, *v29, v23);
      if ((v30 & 1) == 0) {
        goto LABEL_27;
      }
    }
    else
    {
      int v30 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(v20, v28, (int *)*v29, v23);
      if ((v30 & 1) == 0)
      {
LABEL_27:
        char v31 = 0;
        if (v30 >= 0) {
          int v32 = v30;
        }
        else {
          int v32 = v30 + 1;
        }
        int v33 = v32 >> 1;
        float v34 = 6.2832 / (float)v33;
        int v35 = v33;
        goto LABEL_36;
      }
    }
    uint64_t v36 = v30 - 1;
    if ((int)v36 >= 0) {
      int v37 = v30 - 1;
    }
    else {
      int v37 = v30;
    }
    int v33 = v37 >> 1;
    int v35 = v33 + 1;
    float v34 = 3.1416 / (float)v33;
    *(_DWORD *)(*v29 + 4 * v3re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(*v29 + 4 * v36);
    char v31 = 1;
LABEL_36:
    v198[v26] = v31;
    *((_DWORD *)&v208[357] + v26) = v33;
    *((_DWORD *)&v208[359] + v26) = v35;
    *((float *)&v208[353] + v26) = v34;
    uint64_t v38 = v26 + 1;
    int v39 = *(_DWORD *)(v183 + 4 * ((v26 + 1) & 3));
    int v40 = *(_DWORD *)(v183 + 4 * (((_BYTE)v26 - 1) & 3));
    *((_DWORD *)&v208[355] + v26) = -1;
    if (v35 >= 1)
    {
      uint64_t v41 = 0;
      int v42 = 0;
      uint64_t v43 = *v29;
      uint64_t v44 = 2 * v35;
      while (1)
      {
        uint64_t v45 = v41 + 2;
        if (*(_DWORD *)(v43 + 4 * v41) == v39)
        {
          uint64_t v46 = v44 - 2 == v41 ? 0 : v41 + 2;
          if (*(_DWORD *)(v43 + 4 * v46) == v40) {
            break;
          }
        }
        ++v42;
        uint64_t v41 = v45;
        if (v44 == v45) {
          goto LABEL_46;
        }
      }
      *((_DWORD *)&v208[355] + v26) = v42;
    }
LABEL_46:
    unsigned int v186 = v186 + v30 - 3;
    ++v26;
  }
  while (v38 != 4);
  for (uint64_t i = 0; i != 176; i += 44)
  {
    float v48 = &v208[i + 177];
    *(_DWORD *)float v48 = 0;
    v48[1] = &v208[i + 180];
    v48[43] = 0;
    void v48[2] = (void *)0x2800000028;
  }
  for (uint64_t j = 0; j != 176; j += 44)
  {
    float v50 = &v208[j + 1];
    *(_DWORD *)float v50 = 0;
    v50[1] = &v208[j + 4];
    v50[43] = 0;
    v50[2] = (void *)0x2800000028;
  }
  unsigned int v51 = v207;
  uint64_t v204 = v207;
  unsigned int v205 = v179;
  int v206 = 10;
  v208[0] = 0;
  LODWORD(v52) = v179;
  if (v179 >= 0xB)
  {
    unsigned int v51 = operator new(352 * v179);
    v208[0] = v51;
    uint64_t v204 = v51;
    int v206 = v179;
    LODWORD(v52) = v205;
  }
  if (v52)
  {
    uint64_t v52 = v52;
    do
    {
      *(_DWORD *)unsigned int v51 = 0;
      v51[1] = v51 + 3;
      v51[43] = 0;
      v51[2] = 0x2800000028;
      v51 += 44;
      --v52;
    }
    while (v52);
  }
  unsigned int v53 = 4 * v179;
  float v54 = v202;
  uint64_t v199 = v202;
  unsigned int v200 = 4 * v179;
  int v201 = 40;
  uint64_t v203 = 0;
  if ((4 * v179) >= 0x29)
  {
    float v54 = operator new(352 * v53);
    uint64_t v203 = v54;
    uint64_t v199 = v54;
    int v201 = 4 * v179;
    unsigned int v53 = v200;
  }
  if (v53)
  {
    uint64_t v55 = v53;
    do
    {
      *(_DWORD *)float v54 = 0;
      v54[1] = v54 + 3;
      v54[43] = 0;
      v54[2] = 0x2800000028;
      v54 += 44;
      --v55;
    }
    while (v55);
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  do
  {
    uint64_t v191 = v56;
    int v193 = *(_DWORD *)(v183 + 4 * v57);
    uint64_t v185 = v57;
    uint64_t v58 = *((int *)&v208[359] + v57);
    int v59 = *((_DWORD *)&v208[359] + v57);
    uint64_t v195 = v59;
    if ((int)v58 >= 1)
    {
      float v60 = 0;
      float v61 = 1.0 / (float)((float)v59 + 5.0);
      float v62 = v61 * (float)v59;
      unint64_t v187 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(352 * v59);
      uint64_t v189 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&(&v209)[23 * v57];
      int v63 = -1;
      uint64_t v64 = 2;
      uint64_t v65 = 4;
      do
      {
        int v66 = (v59 + v63) % (int)v58;
        uint64_t v67 = *(void *)v189;
        float v68 = (int *)(*(void *)v189 + v65);
        int v69 = *(v68 - 1);
        int v70 = *v68;
        if ((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v187 - 352) == v60) {
          uint64_t v71 = 0;
        }
        else {
          uint64_t v71 = v64;
        }
        int v72 = *(_DWORD *)(v67 + 4 * v71);
        int v73 = *(_DWORD *)(v67 + 8 * v66);
        int v196 = *(_DWORD *)(v67 + 8 * v66 + 4);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)((char *)v60 + (void)v204), 4u);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v60 + (void)v204), v193, v62);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v60 + (void)v204), v72, v61 + v61);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v60 + (void)v204), v69, v61 + v61);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v60 + (void)v204), v70, v61);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)&v199[(unint64_t)v60 + (void)v191], 4u);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[(unint64_t)v60 + (void)v191], v72, 0.33333);
        int v74 = v73;
        int v59 = v195;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[(unint64_t)v60 + (void)v191], v74, -0.33333);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[(unint64_t)v60 + (void)v191], v70, 0.16667);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[(unint64_t)v60 + (void)v191], v196, -0.16667);
        float v60 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v60 + 352);
        v65 += 8;
        v64 += 2;
        ++v63;
      }
      while (v187 != v60);
    }
    if ((*(unsigned char *)(v182 + 6 * v185 + 4) & 2) != 0)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v184 + 352 * v185), v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * v185), v193, 1.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v208[44 * v185 + 177], v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 177], *(_DWORD *)(v183 + 4 * v185), 0.66667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 177], *(_DWORD *)(v183 + 4 * (((_BYTE)v185 + 1) & 3)), 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v208[44 * v185 + 1], v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 1], *(_DWORD *)(v183 + 4 * v185), 0.66667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 1], *(_DWORD *)(v183 + 4 * (((_BYTE)v185 - 1) & 3)), 0.33333);
      uint64_t v93 = v191;
    }
    else if (v198[v185])
    {
      float v75 = (int **)&(&v209)[23 * v185];
      int v76 = **v75;
      int v77 = (*v75)[2 * (int)v58 - 1];
      int v78 = (void **)(v184 + 352 * v185);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v78, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v78, v76, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v78, v77, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v78, v193, 0.66667);
      float v79 = (float)*((int *)&v208[357] + v185);
      float v80 = *((float *)&v208[353] + v185);
      __float2 v81 = __sincosf_stret(v80);
      float v82 = 1.0 / (float)(v81.__cosval + (float)(v79 * 3.0));
      LODWORD(v78) = (*v75)[1];
      float v83 = (float)(v82 * (float)-(float)((float)((float)(v81.__cosval * 2.0) + 1.0) * sqrtf(v81.__cosval + 1.0)))
          / sqrtf(1.0 - v81.__cosval);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v208[44 * v185 + 177], v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 177], v76, 0.16667);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[44 * v185 + 177], v77, -0.16667);
      int v84 = &v208[44 * v185 + 1];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v84, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, v193, (float)(v81.__sinval * -4.0) * v82);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, v76, v83);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, (int)v78, v81.__sinval * v82);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, v77, v83);
      if ((int)v195 >= 3)
      {
        unint64_t v85 = 0;
        int v86 = 2;
        do
        {
          float v87 = sinf(v80 * (float)(v86 - 1));
          float v88 = v82 * (float)(v87 * 4.0);
          float v89 = v82 * (float)(v87 + sinf(v80 * (float)v86));
          int v90 = &(*v75)[v85 / 4];
          int v91 = v90[3];
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, v90[2], v88);
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v84, v91, v89);
          v85 += 8;
          ++v86;
        }
        while (8 * (v195 - 1) - 8 != v85);
      }
      uint64_t v92 = *(unsigned int *)v84;
      uint64_t v93 = v191;
      if ((int)v92 >= 1)
      {
        unint64_t v94 = (float *)((char *)v208[44 * v185 + 2] + 4);
        do
        {
          float *v94 = *v94 * 0.33333;
          v94 += 2;
          --v92;
        }
        while (v92);
      }
    }
    else
    {
      float v95 = *((float *)&v208[353] + v185);
      float v96 = (float)v59;
      if (v59 > 29)
      {
        float v98 = cosf(6.2832 / v96);
        float v97 = 1.0
            / (float)((float)((float)((float)(v98 + 5.0) + sqrtf((float)(v98 + 9.0) * (float)(v98 + 1.0))) * v96)
                    * 0.0625);
      }
      else
      {
        float v97 = OpenSubdiv::v3_1_1::Far::computeCoefficient(int)::efTable[v58];
      }
      uint64_t v93 = v191;
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v184 + 352 * v185), v186);
      uint64_t v99 = &v208[44 * v185 + 177];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v99, v186);
      unint64_t v100 = &v208[44 * v185 + 1];
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v100, v186);
      if (v59 >= 1)
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
        float v103 = v97 * 0.5;
        int v104 = v59 - 1;
        float v105 = 1.0 / v96;
        do
        {
          int v106 = v104 + v102 - (v104 + (int)v102) / v59 * v195;
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * v185), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v204[v101], v105);
          __float2 v107 = __sincosf_stret(v95 * (float)(int)v102);
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v99, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v204[v101], v103 * v107.__cosval);
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v99, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v204[352 * v106], v103 * v107.__cosval);
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v100, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v204[v101], v103 * v107.__sinval);
          uint64_t v108 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v204[352 * v106];
          int v59 = v195;
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v100, v108, v103 * v107.__sinval);
          ++v102;
          v101 += 352;
        }
        while (v195 != v102);
      }
    }
    uint64_t v57 = v185 + 1;
    uint64_t v56 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v93 + 352 * v179);
  }
  while (v185 != 3);
  unint64_t v109 = 0;
  uint64_t v110 = 0;
  unint64_t v111 = (char *)(v182 + 4);
  uint64_t v112 = v184;
  do
  {
    char v113 = *v111;
    v111 += 6;
    if ((v113 & 2) != 0)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v112 + v109 + 1408), (int *)&v208[v109 / 8 + 177]);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)(v112 + v109 + 2816), (int *)&v208[v109 / 8 + 1]);
    }
    else
    {
      int v114 = *((_DWORD *)&v208[355] + v110);
      float v115 = *((float *)&v208[353] + v110);
      float v116 = v115 * (float)v114;
      float v117 = v115 * (float)((v114 + 1) % *((_DWORD *)&v208[359] + v110));
      if (v198[v110] && *((int *)&v208[357] + v110) < 2)
      {
        unint64_t v122 = v112 + v109;
        int v123 = (void **)(v112 + v109 + 1408);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v123, v186);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v123, *(_DWORD *)(v183 + 4 * v110), 0.66667);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v123, *(_DWORD *)(v183 + 4 * (((_BYTE)v110 + 1) & 3)), 0.33333);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)(v122 + 2816), v186);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v122 + 2816), *(_DWORD *)(v183 + 4 * v110), 0.66667);
        uint64_t v112 = v184;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v122 + 2816), *(_DWORD *)(v183 + 4 * (((_BYTE)v110 - 1) & 3)), 0.33333);
      }
      else
      {
        uint64_t v118 = (int *)(v184 + v109 + 1408);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=(v118, (int *)(v184 + v109));
        __float2 v119 = __sincosf_stret(v116);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v118, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[v109 / 8 + 177], v119.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v118, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[v109 / 8 + 1], v119.__sinval);
        int v120 = (int *)(v184 + v109 + 2816);
        uint64_t v112 = v184;
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=(v120, (int *)(v184 + v109));
        __float2 v121 = __sincosf_stret(v117);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[v109 / 8 + 177], v121.__cosval);
        OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v208[v109 / 8 + 1], v121.__sinval);
      }
    }
    ++v110;
    v109 += 352;
  }
  while (v110 != 4);
  uint64_t v124 = 0;
  uint64_t v125 = 0;
  float v126 = -2.0;
  unint64_t v127 = v180;
  while (2)
  {
    *(void *)uint64_t v197 = v125 + 1;
    uint64_t v128 = (v125 + 1) & 3;
    uint64_t v129 = ((_BYTE)v125 - 1) & 3;
    int v130 = *((_DWORD *)&v208[355] + v125);
    uint64_t v131 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[352 * v130 + v124];
    unint64_t v132 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v199[352
                                                                     * ((v130 + 1) % *((_DWORD *)&v208[359] + v125))
                                                                     + v124];
    float v133 = cosf(*((float *)&v208[353] + v125));
    float v134 = cosf(*((float *)&v208[353] + v129));
    float v135 = cosf(*((float *)&v208[353] + v128));
    float v136 = (float)(v133 * v126) + 3.0;
    float v137 = v136 - v135;
    float v138 = v133 + v133;
    float v139 = v136 - v134;
    if (!v198[v125])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v127 + 176, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 352), v135 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 176), v137 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * v128 + 2816), v138 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), v131, 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v127 + 352, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 352), v134 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v127, v139 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 352), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * (((_BYTE)v125 - 1) & 3) + 1408), v138 / 3.0);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 352), v132, -0.33333);
      goto LABEL_101;
    }
    BOOL v194 = v132;
    int v140 = *((_DWORD *)&v208[357] + v125);
    uint64_t v141 = v127 + 176;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v127 + 176, v186);
    if (v140 < 2)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), *(_DWORD *)(v183 + 4 * v125), 0.44444);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), *(_DWORD *)(v183 + 4 * (((_BYTE)v125 + 2) & 3)), 0.11111);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), *(_DWORD *)(v183 + 4 * v128), 0.22222);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), *(_DWORD *)(v183 + 4 * v129), 0.22222);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v127 + 704, (int *)v127 + 352);
LABEL_101:
      uint64_t v152 = (char *)v127;
LABEL_102:
      uint64_t v153 = *(void *)v197;
      goto LABEL_103;
    }
    uint64_t v142 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 352);
    float v143 = v135 / 3.0;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 352), v135 / 3.0);
    float v144 = v137 / 3.0;
    uint64_t v192 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 176);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 - 176), v137 / 3.0);
    uint64_t v145 = ((_BYTE)v125 - 1) & 3;
    float v146 = v138 / 3.0;
    uint64_t v190 = (OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * v128 + 2816);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), v190, v138 / 3.0);
    uint64_t v188 = v131;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v127 + 176), v131, 0.33333);
    char v147 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v127;
    int v148 = v127 + 352;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v148, v186);
    float v149 = v134 / 3.0;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v142, v149);
    float v150 = v139 / 3.0;
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v147, v150);
    unint64_t v151 = (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)(v184 + 352 * v145 + 1408);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v151, v138 / 3.0);
    OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v194, -0.33333);
    if (v198[v145])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v141, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v141, v142, v143);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v141, v192, v144);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v141, v190, v146);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v141, v188, 0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v148, (int *)v141);
      uint64_t v152 = (char *)v147;
      float v126 = -2.0;
      goto LABEL_102;
    }
    __int32 v154 = v142;
    uint64_t v152 = (char *)v147;
    float v126 = -2.0;
    uint64_t v153 = *(void *)v197;
    if (v198[v128])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(v148, v186);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v154, v149);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v147, v150);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v151, v146);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v148, v194, -0.33333);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)v141, (int *)v148);
    }
LABEL_103:
    unint64_t v127 = (void **)(v152 + 352);
    v124 += 352 * v179;
    uint64_t v125 = v153;
    if (v153 != 4) {
      continue;
    }
    break;
  }
  for (uint64_t k = 0; k != 4; ++k)
  {
    uint64_t v156 = *(unsigned int *)(v184 + 352 * k);
    if ((int)v156 >= 1)
    {
      uint64_t v157 = *(_DWORD **)(v184 + 352 * k + 8);
      do
      {
        *v157 += v181;
        v157 += 2;
        --v156;
      }
      while (v156);
    }
    uint64_t v158 = *(unsigned int *)(v184 + 352 * k + 1408);
    if ((int)v158 >= 1)
    {
      uint64_t v159 = *(_DWORD **)(v184 + 352 * k + 1416);
      do
      {
        *v159 += v181;
        v159 += 2;
        --v158;
      }
      while (v158);
    }
    uint64_t v160 = *(unsigned int *)(v184 + 352 * k + 2816);
    if ((int)v160 >= 1)
    {
      int v161 = *(_DWORD **)(v184 + 352 * k + 2824);
      do
      {
        *v161 += v181;
        v161 += 2;
        --v160;
      }
      while (v160);
    }
    uint64_t v162 = *(unsigned int *)(v184 + 352 * k + 4224);
    if ((int)v162 >= 1)
    {
      uint64_t v163 = *(_DWORD **)(v184 + 352 * k + 4232);
      do
      {
        *v163 += v181;
        v163 += 2;
        --v162;
      }
      while (v162);
    }
    uint64_t v164 = *(unsigned int *)(v184 + 352 * k + 5632);
    if ((int)v164 >= 1)
    {
      uint64_t v165 = *(_DWORD **)(v184 + 352 * k + 5640);
      do
      {
        *v165 += v181;
        v165 += 2;
        --v164;
      }
      while (v164);
    }
  }
  if (v200)
  {
    unint64_t v166 = 0;
    uint64_t v167 = 344;
    do
    {
      unint64_t v168 = &v199[v167];
      int v169 = &v199[v167 - 336];
      operator delete(*(void **)&v199[v167]);
      *int v169 = v168 - 320;
      *((_DWORD *)v168 - 81) = 40;
      ++v166;
      v167 += 352;
    }
    while (v166 < v200);
  }
  operator delete(v203);
  if (v205)
  {
    unint64_t v170 = 0;
    uint64_t v171 = 344;
    do
    {
      uint64_t v172 = &v204[v171];
      uint64_t v173 = &v204[v171 - 336];
      operator delete(*(void **)&v204[v171]);
      *uint64_t v173 = v172 - 320;
      *((_DWORD *)v172 - 81) = 40;
      ++v170;
      v171 += 352;
    }
    while (v170 < v205);
  }
  operator delete(v208[0]);
  unint64_t v174 = 1408;
  do
  {
    operator delete(v208[v174 / 8]);
    *(void *)&v207[v174 + 3184] = &v207[v174 + 3200];
    *(_DWORD *)&v207[v174 + 3196] = 40;
    v174 -= 352;
  }
  while (v174);
  uint64_t v175 = 176;
  do
  {
    operator delete(v208[v175 + 176]);
    v208[v175 + 134] = &v208[v175 + 136];
    HIDWORD(v208[v175 + 135]) = 40;
    v175 -= 44;
  }
  while (v175 * 8);
  uint64_t v176 = 92;
  do
  {
    int v177 = (char *)&(&v209)[v176];
    operator delete(v208[v176 + 360]);
    *((void *)v177 - 23) = v177 - 168;
    *((_DWORD *)v177 - 43) = 40;
    v176 -= 23;
  }
  while (v176 * 8);
  return v184;
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(void **this, unsigned int a2)
{
  *(_DWORD *)this = 0;
  if (*((_DWORD *)this + 4) < (signed int)a2)
  {
    if (a2)
    {
      if (*((_DWORD *)this + 5) < a2)
      {
        operator delete(this[43]);
        this[1] = this + 3;
        *((_DWORD *)this + 5) = 40;
        int v4 = operator new(8 * a2);
        this[43] = v4;
        this[1] = v4;
        *((_DWORD *)this + 5) = a2;
      }
    }
    else
    {
      operator delete(this[43]);
      this[1] = this + 3;
      *((_DWORD *)this + 5) = 40;
    }
    *((_DWORD *)this + 4) = a2;
  }
}

float OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, int a2, float result)
{
  int v3 = *(_DWORD *)this;
  uint64_t v4 = *((void *)this + 1);
  if (*(int *)this < 1)
  {
LABEL_5:
    uint64_t v7 = v4 + 8 * v3;
    *(_DWORD *)uint64_t v7 = a2;
    *(float *)(v7 + 4) = result;
    *(_DWORD *)this = v3 + 1;
  }
  else
  {
    unsigned int v5 = (float *)(v4 + 4);
    uint64_t v6 = *(unsigned int *)this;
    while (*((_DWORD *)v5 - 1) != a2)
    {
      v5 += 2;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    uint64_t result = *v5 + result;
    *unsigned int v5 = result;
  }
  return result;
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *a2, float a3)
{
  if (*(int *)a2 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight(this, *(_DWORD *)(*((void *)a2 + 1) + v6), *(float *)(*((void *)a2 + 1) + v6 + 4) * a3);
      ++v7;
      v6 += 8;
    }
    while (v7 < *(int *)a2);
  }
}

int *OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=(int *a1, int *a2)
{
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)a1, a2[4]);
  int v4 = *a2;
  *a1 = *a2;
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      *(void *)(*((void *)a1 + 1) + 8 * v5) = *(void *)(*((void *)a2 + 1) + 8 * v5);
      ++v5;
    }
    while (v5 < *a1);
  }
  return a1;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::~Refinement(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  *(void *)this = &unk_26E721BC8;
  int v4 = (char *)this + 480;
  uint64_t v2 = (void *)*((void *)this + 60);
  uint64_t v3 = *((void *)v4 + 1);
  if ((int)((unint64_t)(v3 - (void)v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        uint64_t v7 = *(void **)(v6 + 40);
        if (v7)
        {
          *(void *)(v6 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v7;
          operator delete(v7);
        }
        MEMORY[0x237DBCBD0](v6, 0x70C4089CF00AFLL);
        uint64_t v2 = (void *)*((void *)this + 60);
        uint64_t v3 = *((void *)this + 61);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (void)v2) >> 3));
  }
  if (v2)
  {
    *((void *)this + 61) = v2;
    operator delete(v2);
  }
  uint64_t v8 = (void *)*((void *)this + 57);
  if (v8)
  {
    *((void *)this + 58) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 54);
  if (v9)
  {
    *((void *)this + 55) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 51);
  if (v10)
  {
    *((void *)this + 52) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 48);
  if (v11)
  {
    *((void *)this + 4re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 45);
  if (v12)
  {
    *((void *)this + 46) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 42);
  if (v13)
  {
    *((void *)this + 43) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 39);
  if (v14)
  {
    *((void *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 36);
  if (v15)
  {
    *((void *)this + 37) = v15;
    operator delete(v15);
  }
  int v16 = (void *)*((void *)this + 33);
  if (v16)
  {
    *((void *)this + 34) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 30);
  if (v17)
  {
    *((void *)this + 31) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 27);
  if (v18)
  {
    *((void *)this + 28) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 24);
  if (v19)
  {
    *((void *)this + 25) = v19;
    operator delete(v19);
  }
  uint64_t v20 = (void *)*((void *)this + 21);
  if (v20)
  {
    *((void *)this + 22) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 18);
  if (v21)
  {
    *((void *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v21;
    operator delete(v21);
  }
  float v22 = (void *)*((void *)this + 15);
  if (v22)
  {
    *((void *)this + 16) = v22;
    operator delete(v22);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::initializeSparseSelectionTags(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2 = (int *)*((void *)this + 1);
  unint64_t v3 = *v2;
  uint64_t v4 = *((void *)this + 51);
  unint64_t v5 = *((void *)this + 52) - v4;
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *((void *)this + 52) = v4 + v3;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((void *)this + 51, v3 - v5);
    uint64_t v2 = (int *)*((void *)this + 1);
  }
  unint64_t v6 = v2[1];
  uint64_t v7 = *((void *)this + 54);
  unint64_t v8 = *((void *)this + 55) - v7;
  if (v6 <= v8)
  {
    if (v6 < v8) {
      *((void *)this + 55) = v7 + v6;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((void *)this + 54, v6 - v8);
    uint64_t v2 = (int *)*((void *)this + 1);
  }
  unint64_t v9 = v2[2];
  uint64_t v10 = *((void *)this + 57);
  unint64_t v11 = *((void *)this + 58) - v10;
  if (v9 <= v11)
  {
    if (v9 < v11) {
      *((void *)this + 58) = v10 + v9;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append((void *)this + 57, v9 - v11);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::refine(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 36) = (a2 & 1) == 0;
  *(unsigned char *)(a1 + 37) = (a2 & 2) != 0;
  uint64_t v4 = (*(void *)(*(void *)(a1 + 8) + 464) - *(void *)(*(void *)(a1 + 8) + 456)) >> 3;
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
  unint64_t v5 = *(_DWORD **)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 52);
  int v7 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 44);
  *unint64_t v5 = *(_DWORD *)(a1 + 40);
  v5[1] = v7;
  void v5[2] = *(_DWORD *)(a1 + 56) + v6 + *(_DWORD *)(a1 + 60);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateChildToParentMapping((std::vector<int> *)a1, v8, v9);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagVectors((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
  if ((a2 & 4) != 0) {
    char v10 = 1;
  }
  else {
    char v10 = -1;
  }
  v12[0] = v10;
  if ((int)v4 < 1)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology(a1, v12);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
    return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices(a1);
  }
  else
  {
    v12[0] = v10 | 0x10;
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology(a1, v12);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness((OpenSubdiv::v3_1_1::Vtr::internal::Refinement *)a1);
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices(a1);
    return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels(a1);
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentToChildMapping(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  (*(void (**)(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *))(*(void *)this + 16))(this);
  if (!*((unsigned char *)this + 36)) {
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseChildComponentIndices(this);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentChildIndices((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateChildToParentMapping(std::vector<int> *this, uint8x8_t a2, uint8x8_t a3)
{
  v7[1] = *MEMORY[0x263EF8340];
  a3.i32[0] = HIDWORD(v7[0]);
  a2.i32[0] = v7[0];
  int16x8_t v4 = (int16x8_t)vmovl_u8(a2);
  *(int8x8_t *)v4.i8 = vorr_s8((int8x8_t)(v4.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x18001000080000);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  int16x8_t v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)(v5.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x19001100090001);
  v4.i32[1] = vmovn_s16(v5).u32[0];
  v7[0] = v4.i64[0];
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentVectors(this, v7);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentVectors(this, v7);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentVectors((uint64_t)this, v7);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideTopology(uint64_t result, char *a2)
{
  uint64_t v3 = result;
  char v4 = *a2;
  if (*a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    char v4 = *a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  char v4 = *a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  char v4 = *a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  char v4 = *a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_18:
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  if ((*a2 & 0x20) != 0) {
LABEL_7:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
LABEL_8:
  if (*(_DWORD *)(v3 + 28)) {
    int v5 = 6;
  }
  else {
    int v5 = 4;
  }
  if (*(_DWORD *)(*(void *)(v3 + 8) + 20) > v5) {
    int v5 = *(_DWORD *)(*(void *)(v3 + 8) + 20);
  }
  *(_DWORD *)(*(void *)(v3 + 16) + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v5;
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideFVarChannels(uint64_t this)
{
  if ((int)((*(void *)(*(void *)(this + 8) + 464) - *(void *)(*(void *)(this + 8) + 456)) >> 3) >= 1) {
    operator new();
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseChildComponentIndices(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 57);
    do
    {
      if (*(unsigned char *)(v5 + v4))
      {
        *(_DWORD *)(*((void *)this + 30) + 4 * v4) = 2;
        int v3 = *(_DWORD *)(v2 + 8);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren(this);
  int v6 = *(uint64_t (**)(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *))(*(void *)this + 24);
  return v6(this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateParentChildIndices(uint64_t this)
{
  int v1 = *(unsigned __int8 *)(this + 36);
  *(_DWORD *)(this + 64) = 0;
  uint64_t v2 = *(int **)(this + 120);
  unint64_t v3 = *(void *)(this + 128) - (void)v2;
  unint64_t v4 = v3 >> 2;
  if (v1)
  {
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        v2[v5] = v5;
        ++v5;
      }
      while ((v3 >> 2) != v5);
    }
    *(_DWORD *)(this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v4;
    *(_DWORD *)(this + 68) = 0;
    uint64_t v6 = *(void *)(this + 144);
    unint64_t v7 = *(void *)(this + 152) - v6;
    unint64_t v8 = v7 >> 2;
    if ((int)(v7 >> 2) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (v7 >> 2);
      do
      {
        *(_DWORD *)(v6 + 4 * vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v9;
        ++v9;
      }
      while (v10 != v9);
    }
    *(_DWORD *)(this + 44) = v8;
    *(_DWORD *)(this + 72) = v8;
    unint64_t v11 = *(_DWORD **)(this + 192);
    unint64_t v12 = *(void *)(this + 200) - (void)v11;
    unint64_t v13 = v12 >> 2;
    if ((int)(v12 >> 2) >= 1)
    {
      uint64_t v14 = (v12 >> 2);
      do
      {
        *v11++ = v8;
        LODWORD(v8) = v8 + 1;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(this + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v13;
    if (*(unsigned char *)(this + 37))
    {
      *(_DWORD *)(this + 76) = 0;
      uint64_t v15 = *(void *)(this + 168);
      unint64_t v16 = *(void *)(this + 176) - v15;
      unint64_t v17 = v16 >> 2;
      if ((int)(v16 >> 2) < 1)
      {
        int v20 = 0;
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = (v16 >> 2);
        do
        {
          *(_DWORD *)(v15 + 4 * v18) = v18;
          ++v18;
        }
        while (v19 != v18);
        int v20 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v17;
      int v30 = v20 + v17;
      *(_DWORD *)(this + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v30;
      char v31 = *(_DWORD **)(this + 216);
      unint64_t v32 = *(void *)(this + 224) - (void)v31;
      unint64_t v33 = v32 >> 2;
      if ((int)(v32 >> 2) >= 1)
      {
        uint64_t v34 = (v32 >> 2);
        do
        {
          *v31++ = v30++;
          --v34;
        }
        while (v34);
        int v30 = *(_DWORD *)(this + 80);
      }
      *(_DWORD *)(this + 56) = v33;
      int v35 = v30 + v33;
      *(_DWORD *)(this + 84) = v30 + v33;
      uint64_t v36 = *(_DWORD **)(this + 240);
      unint64_t v37 = *(void *)(this + 248) - (void)v36;
      unint64_t v38 = v37 >> 2;
      if ((int)(v37 >> 2) >= 1)
      {
        uint64_t v39 = (v37 >> 2);
        do
        {
          *v36++ = v35++;
          --v39;
        }
        while (v39);
      }
      *(_DWORD *)(this + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v38;
    }
    else
    {
      *(_DWORD *)(this + 84) = 0;
      uint64_t v24 = *(void *)(this + 240);
      unint64_t v25 = *(void *)(this + 248) - v24;
      unint64_t v26 = v25 >> 2;
      if ((int)(v25 >> 2) < 1)
      {
        int v29 = 0;
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (v25 >> 2);
        do
        {
          *(_DWORD *)(v24 + 4 * v27) = v27;
          ++v27;
        }
        while (v28 != v27);
        int v29 = *(_DWORD *)(this + 84);
      }
      *(_DWORD *)(this + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v26;
      int v63 = v29 + v26;
      *(_DWORD *)(this + 76) = v63;
      uint64_t v64 = *(_DWORD **)(this + 168);
      unint64_t v65 = *(void *)(this + 176) - (void)v64;
      unint64_t v66 = v65 >> 2;
      if ((int)(v65 >> 2) >= 1)
      {
        uint64_t v67 = (v65 >> 2);
        do
        {
          *v64++ = v63++;
          --v67;
        }
        while (v67);
        int v63 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v66;
      int v68 = v63 + v66;
      *(_DWORD *)(this + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v63 + v66;
      int v69 = *(_DWORD **)(this + 216);
      unint64_t v70 = *(void *)(this + 224) - (void)v69;
      unint64_t v71 = v70 >> 2;
      if ((int)(v70 >> 2) >= 1)
      {
        uint64_t v72 = (v70 >> 2);
        do
        {
          *v69++ = v68++;
          --v72;
        }
        while (v72);
      }
      *(_DWORD *)(this + 56) = v71;
    }
  }
  else
  {
    if ((int)v4 < 1)
    {
      int v23 = 0;
    }
    else
    {
      int v21 = 0;
      uint64_t v22 = (v3 >> 2);
      do
      {
        if (*v2) {
          int v23 = v21 + 1;
        }
        else {
          int v23 = v21;
        }
        if (!*v2) {
          int v21 = -1;
        }
        *v2++ = v21;
        int v21 = v23;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v23;
    *(_DWORD *)(this + 68) = 0;
    int v40 = *(int **)(this + 144);
    unint64_t v41 = *(void *)(this + 152) - (void)v40;
    if ((int)(v41 >> 2) < 1)
    {
      int v44 = 0;
    }
    else
    {
      int v42 = 0;
      uint64_t v43 = (v41 >> 2);
      do
      {
        if (*v40) {
          int v44 = v42 + 1;
        }
        else {
          int v44 = v42;
        }
        if (!*v40) {
          int v42 = -1;
        }
        *v40++ = v42;
        int v42 = v44;
        --v43;
      }
      while (v43);
    }
    *(_DWORD *)(this + 44) = v44;
    *(_DWORD *)(this + 72) = v44;
    uint64_t v45 = *(int **)(this + 192);
    unint64_t v46 = *(void *)(this + 200) - (void)v45;
    if ((int)(v46 >> 2) < 1)
    {
      int v47 = 0;
    }
    else
    {
      int v47 = 0;
      uint64_t v48 = (v46 >> 2);
      do
      {
        int v49 = v47 + v44;
        if (*v45)
        {
          ++v47;
          int v50 = v49;
        }
        else
        {
          int v50 = -1;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
    }
    *(_DWORD *)(this + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v47;
    if (*(unsigned char *)(this + 37))
    {
      *(_DWORD *)(this + 76) = 0;
      unsigned int v51 = *(int **)(this + 168);
      unint64_t v52 = *(void *)(this + 176) - (void)v51;
      if ((int)(v52 >> 2) < 1)
      {
        int v56 = 0;
        int v53 = 0;
      }
      else
      {
        int v53 = 0;
        uint64_t v54 = (v52 >> 2);
        do
        {
          if (*v51) {
            int v55 = v53;
          }
          else {
            int v55 = -1;
          }
          if (*v51) {
            ++v53;
          }
          *v51++ = v55;
          --v54;
        }
        while (v54);
        int v56 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v53;
      int v73 = v53 + v56;
      *(_DWORD *)(this + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v73;
      int v74 = *(int **)(this + 216);
      unint64_t v75 = *(void *)(this + 224) - (void)v74;
      if ((int)(v75 >> 2) < 1)
      {
        int v76 = 0;
      }
      else
      {
        int v76 = 0;
        uint64_t v77 = (v75 >> 2);
        do
        {
          int v78 = v76 + v73;
          if (*v74)
          {
            ++v76;
            int v79 = v78;
          }
          else
          {
            int v79 = -1;
          }
          *v74++ = v79;
          --v77;
        }
        while (v77);
        int v73 = *(_DWORD *)(this + 80);
      }
      *(_DWORD *)(this + 56) = v76;
      int v80 = v76 + v73;
      *(_DWORD *)(this + 84) = v80;
      __float2 v81 = *(int **)(this + 240);
      unint64_t v82 = *(void *)(this + 248) - (void)v81;
      if ((int)(v82 >> 2) < 1)
      {
        int v83 = 0;
      }
      else
      {
        int v83 = 0;
        uint64_t v84 = (v82 >> 2);
        do
        {
          int v85 = v83 + v80;
          if (*v81)
          {
            ++v83;
            int v86 = v85;
          }
          else
          {
            int v86 = -1;
          }
          *v81++ = v86;
          --v84;
        }
        while (v84);
      }
      *(_DWORD *)(this + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v83;
    }
    else
    {
      *(_DWORD *)(this + 84) = 0;
      uint64_t v57 = *(int **)(this + 240);
      unint64_t v58 = *(void *)(this + 248) - (void)v57;
      if ((int)(v58 >> 2) < 1)
      {
        int v62 = 0;
        int v59 = 0;
      }
      else
      {
        int v59 = 0;
        uint64_t v60 = (v58 >> 2);
        do
        {
          if (*v57) {
            int v61 = v59;
          }
          else {
            int v61 = -1;
          }
          if (*v57) {
            ++v59;
          }
          *v57++ = v61;
          --v60;
        }
        while (v60);
        int v62 = *(_DWORD *)(this + 84);
      }
      *(_DWORD *)(this + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v59;
      int v87 = v59 + v62;
      *(_DWORD *)(this + 76) = v87;
      float v88 = *(int **)(this + 168);
      unint64_t v89 = *(void *)(this + 176) - (void)v88;
      if ((int)(v89 >> 2) < 1)
      {
        int v90 = 0;
      }
      else
      {
        int v90 = 0;
        uint64_t v91 = (v89 >> 2);
        do
        {
          int v92 = v90 + v87;
          if (*v88)
          {
            ++v90;
            int v93 = v92;
          }
          else
          {
            int v93 = -1;
          }
          *v88++ = v93;
          --v91;
        }
        while (v91);
        int v87 = *(_DWORD *)(this + 76);
      }
      *(_DWORD *)(this + 52) = v90;
      int v94 = v90 + v87;
      *(_DWORD *)(this + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v94;
      float v95 = *(int **)(this + 216);
      unint64_t v96 = *(void *)(this + 224) - (void)v95;
      if ((int)(v96 >> 2) < 1)
      {
        int v97 = 0;
      }
      else
      {
        int v97 = 0;
        uint64_t v98 = (v96 >> 2);
        do
        {
          int v99 = v97 + v94;
          if (*v95)
          {
            ++v97;
            int v100 = v99;
          }
          else
          {
            int v100 = -1;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
      }
      *(_DWORD *)(this + 56) = v97;
    }
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentVectors(std::vector<int> *a1, unsigned char *a2)
{
  std::vector<int>::size_type v4 = *a1->__end_cap_.__value_;
  std::vector<int>::pointer begin = a1[14].__begin_;
  uint64_t v6 = (char *)((char *)a1[14].__end_ - (char *)begin);
  BOOL v7 = v4 >= (unint64_t)v6;
  unint64_t v8 = v4 - (void)v6;
  if (v8 != 0 && v7)
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&a1[14].__begin_, v8);
    std::vector<int>::size_type v4 = *a1->__end_cap_.__value_;
  }
  else if (!v7)
  {
    a1[14].__end_ = (std::vector<int>::pointer)((char *)begin + v4);
  }
  std::vector<unsigned int>::resize(a1 + 11, v4);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentFromParentFaces((uint64_t)a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentVectors(std::vector<int> *a1, unsigned char *a2)
{
  std::vector<int>::size_type v4 = a1->__end_cap_.__value_[1];
  std::vector<int>::pointer begin = a1[15].__begin_;
  uint64_t v6 = (char *)((char *)a1[15].__end_ - (char *)begin);
  BOOL v7 = v4 >= (unint64_t)v6;
  unint64_t v8 = v4 - (void)v6;
  if (v8 != 0 && v7)
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&a1[15].__begin_, v8);
    std::vector<int>::size_type v4 = a1->__end_cap_.__value_[1];
  }
  else if (!v7)
  {
    a1[15].__end_ = (std::vector<int>::pointer)((char *)begin + v4);
  }
  std::vector<unsigned int>::resize(a1 + 12, v4);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentFaces((uint64_t)a1, a2);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentEdges((uint64_t)a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentVectors(uint64_t a1, unsigned char *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v5 = (void *)(a1 + 384);
  unint64_t v6 = *(int *)(*(void *)(a1 + 16) + 8);
  uint64_t v7 = *(void *)(a1 + 384);
  unint64_t v8 = *(void *)(a1 + 392) - v7;
  if (v4)
  {
    if (v6 > v8)
    {
      uint64_t v9 = a2;
LABEL_6:
      std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::ETag>::__append(v5, v6 - v8, v9);
      goto LABEL_9;
    }
  }
  else if (v6 > v8)
  {
    uint64_t v9 = a2 + 4;
    goto LABEL_6;
  }
  if (v6 < v8) {
    *(void *)(a1 + 392) = v7 + v6;
  }
LABEL_9:
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 312), *(int *)(*(void *)(a1 + 16) + 8));
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentFaces(a1, a2);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentEdges(a1, a2);
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentVertices(a1, a2);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceParentFromParentFaces(uint64_t result, unsigned char *a2)
{
  int v2 = **(_DWORD **)(result + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + 64);
      do
      {
        int v5 = *(_DWORD *)(*(void *)(result + 88) + 8 * v3);
        if (v5 == 4)
        {
          *(unsigned char *)(*(void *)(result + 336) + v4) = *a2;
          uint64_t v6 = v4 + 1;
          *(unsigned char *)(*(void *)(result + 336) + v6) = a2[1];
          uint64_t v7 = v4 + 2;
          *(unsigned char *)(*(void *)(result + 336) + v7) = a2[2];
          uint64_t v8 = v4 + 3;
          *(unsigned char *)(*(void *)(result + 336) + v8) = a2[3];
          uint64_t v9 = *(void *)(result + 264);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          int v10 = 0;
          uint64_t v11 = v4;
          do
          {
            if (v5 <= 4) {
              int v12 = v10;
            }
            else {
              int v12 = 0;
            }
            *(unsigned char *)(*(void *)(result + 336) + v11) = a2[v12];
            *(_DWORD *)(*(void *)(result + 264) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (unsigned int *)(*(void *)(result + 88) + 8 * v13);
      uint64_t v15 = *v14;
      unint64_t v16 = (int *)(*(void *)(result + 120) + 4 * (int)v14[1]);
      if ((*(unsigned char *)(*(void *)(result + 408) + v13) & 1) != 0 && v15 == 4)
      {
        *(unsigned char *)(*(void *)(result + 336) + *v16) = *a2;
        *(unsigned char *)(*(void *)(result + 336) + v16[1]) = a2[1];
        *(unsigned char *)(*(void *)(result + 336) + v16[2]) = a2[2];
        *(unsigned char *)(*(void *)(result + 336) + v16[3]) = a2[3];
        uint64_t v17 = *(void *)(result + 264);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v18 = 0;
        BOOL v19 = (*(unsigned char *)(*(void *)(result + 408) + v13) & 1) == 0;
        do
        {
          uint64_t v20 = v16[v18];
          if (v20 != -1)
          {
            if ((int)v15 <= 4) {
              uint64_t v21 = v18;
            }
            else {
              uint64_t v21 = 0;
            }
            *(unsigned char *)(*(void *)(result + 336) + v2re::VariableStepTimer::setClock((uint64_t)this, 0) = a2[4 * v19 + v21];
            *(_DWORD *)(*(void *)(result + 264) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentFaces(uint64_t result, unsigned char *a2)
{
  int v2 = **(_DWORD **)(result + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      int v4 = *(_DWORD *)(result + 68);
      do
      {
        int v5 = *(_DWORD *)(*(void *)(result + 104) + 8 * v3);
        if (v5 == 4)
        {
          *(unsigned char *)(*(void *)(result + 360) + v4) = *a2;
          uint64_t v6 = v4 + 1;
          *(unsigned char *)(*(void *)(result + 360) + v6) = a2[1];
          uint64_t v7 = v4 + 2;
          *(unsigned char *)(*(void *)(result + 360) + v7) = a2[2];
          uint64_t v8 = v4 + 3;
          *(unsigned char *)(*(void *)(result + 360) + v8) = a2[3];
          uint64_t v9 = *(void *)(result + 288);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          int v10 = 0;
          uint64_t v11 = v4;
          do
          {
            if (v5 <= 4) {
              int v12 = v10;
            }
            else {
              int v12 = 0;
            }
            *(unsigned char *)(*(void *)(result + 360) + v11) = a2[v12];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = (unsigned int *)(*(void *)(result + 104) + 8 * v13);
      uint64_t v15 = *v14;
      unint64_t v16 = (int *)(*(void *)(result + 144) + 4 * (int)v14[1]);
      if ((*(unsigned char *)(*(void *)(result + 408) + v13) & 1) != 0 && v15 == 4)
      {
        *(unsigned char *)(*(void *)(result + 360) + *v16) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v16[1]) = a2[1];
        *(unsigned char *)(*(void *)(result + 360) + v16[2]) = a2[2];
        *(unsigned char *)(*(void *)(result + 360) + v16[3]) = a2[3];
        uint64_t v17 = *(void *)(result + 288);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v18 = 0;
        BOOL v19 = (*(unsigned char *)(*(void *)(result + 408) + v13) & 1) == 0;
        do
        {
          uint64_t v20 = v16[v18];
          if (v20 != -1)
          {
            if ((int)v15 <= 4) {
              uint64_t v21 = v18;
            }
            else {
              uint64_t v21 = 0;
            }
            *(unsigned char *)(*(void *)(result + 360) + v2re::VariableStepTimer::setClock((uint64_t)this, 0) = a2[4 * v19 + v21];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeParentFromParentEdges(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(*(void *)(result + 8) + 4);
  if (*(unsigned char *)(result + 36))
  {
    if (v2 >= 1)
    {
      int v3 = 0;
      uint64_t v4 = *(int *)(result + 72);
      do
      {
        *(unsigned char *)(*(void *)(result + 360) + v4) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v4 + 1) = a2[1];
        int v5 = (_DWORD *)(*(void *)(result + 288) + 4 * v4);
        *int v5 = v3;
        v5[1] = v3++;
        v4 += 2;
      }
      while (v3 < *(_DWORD *)(*(void *)(result + 8) + 4));
    }
  }
  else if (v2 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (int *)(*(void *)(result + 192) + 8 * v6);
      if (*(unsigned char *)(*(void *)(result + 432) + v6))
      {
        *(unsigned char *)(*(void *)(result + 360) + *v7) = *a2;
        *(unsigned char *)(*(void *)(result + 360) + v7[1]) = a2[1];
        uint64_t v12 = *(void *)(result + 288);
        *(_DWORD *)(v12 + 4 * *v7) = v6;
        *(_DWORD *)(v12 + 4 * v7[1]) = v6;
      }
      else
      {
        uint64_t v8 = 0;
        char v9 = 1;
        do
        {
          char v10 = v9;
          uint64_t v11 = v7[v8];
          if (v11 != -1)
          {
            *(unsigned char *)(*(void *)(result + 360) + v11) = a2[v8 + 4];
            *(_DWORD *)(*(void *)(result + 288) + 4 * v7[v8]) = v6;
          }
          char v9 = 0;
          uint64_t v8 = 1;
        }
        while ((v10 & 1) != 0);
      }
      ++v6;
    }
    while (v6 < *(int *)(*(void *)(result + 8) + 4));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentFaces(uint64_t result, unsigned char *a2)
{
  if (*(_DWORD *)(result + 52))
  {
    int v2 = *(int **)(result + 8);
    int v3 = *v2;
    if (*(unsigned char *)(result + 36))
    {
      if (v3 >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 76);
        do
        {
          *(_DWORD *)(v5 + 4 * v4) = v4;
          ++v4;
        }
        while ((int)v4 < *v2);
      }
    }
    else if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        uint64_t v7 = *(int *)(*(void *)(result + 168) + 4 * i);
        if (v7 != -1)
        {
          if (*(unsigned char *)(*(void *)(result + 408) + i))
          {
            *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
            int v2 = *(int **)(result + 8);
          }
          *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = i;
          int v3 = *v2;
        }
      }
    }
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentEdges(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(_DWORD *)(v2 + 4);
  if (*(unsigned char *)(result + 36))
  {
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 80);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 4));
    }
  }
  else if (v3 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(result + 216) + 4 * v6);
      if (v7 != -1)
      {
        if (*(unsigned char *)(*(void *)(result + 432) + v6))
        {
          *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
          uint64_t v2 = *(void *)(result + 8);
        }
        *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 4));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexParentFromParentVertices(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(_DWORD *)(v2 + 8);
  if (*(unsigned char *)(result + 36))
  {
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(result + 312) + 4 * *(int *)(result + 84);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 8));
    }
  }
  else if (v3 >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(result + 240) + 4 * v6);
      if (v7 != -1)
      {
        if (*(unsigned char *)(*(void *)(result + 456) + v6))
        {
          *(unsigned char *)(*(void *)(result + 384) + v7) = *a2;
          uint64_t v2 = *(void *)(result + 8);
        }
        *(_DWORD *)(*(void *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 8));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  uint64_t v3 = *((void *)v2 + 12);
  unint64_t v4 = *v2;
  unint64_t v5 = *((void *)v2 + 13) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *((void *)v2 + 13) = v3 + v4;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)v2 + 12, v4 - v5);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagsFromParentFaces((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(void *)(v2 + 240);
  unint64_t v4 = *(int *)(v2 + 4);
  unint64_t v5 = *(void *)(v2 + 248) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *(void *)(v2 + 2re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v3 + v4;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v2 + 240), v4 - v5);
  }
  uint64_t v6 = *((int *)this + 11);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *((int *)this + 17);
    uint64_t v8 = v7 + v6;
    do
      *(unsigned char *)(*(void *)(*((void *)this + 2) + 240) + v7++) = 0;
    while (v7 < v8);
  }
  return OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagsFromParentEdges((uint64_t)this);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagVectors(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(*((void *)this + 2) + 432, *(int *)(*((void *)this + 2) + 8));
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentFaces((uint64_t)this);
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentEdges(this);
  uint64_t result = OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentVertices((uint64_t)this);
  if (!*((unsigned char *)this + 36))
  {
    uint64_t v3 = *((void *)this + 2);
    if (*(int *)(v3 + 8) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(unsigned char *)(*((void *)this + 48) + v4))
        {
          *(_WORD *)(*(void *)(v3 + 432) + 2 * v4) |= 0x800u;
          uint64_t v3 = *((void *)this + 2);
        }
        ++v4;
      }
      while (v4 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateFaceTagsFromParentFaces(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 40);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(this + 64);
    uint64_t v3 = v2 + v1;
    do
    {
      *(unsigned char *)(*(void *)(*(void *)(this + 16) + 96) + v2) = *(unsigned char *)(*(void *)(*(void *)(this + 8) + 96)
                                                                             + *(int *)(*(void *)(this + 264) + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateEdgeTagsFromParentEdges(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 48);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(this + 72);
    uint64_t v3 = v2 + v1;
    do
    {
      *(unsigned char *)(*(void *)(*(void *)(this + 16) + 240) + v2) = *(unsigned char *)(*(void *)(*(void *)(this + 8) + 240)
                                                                              + *(int *)(*(void *)(this + 288) + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentFaces(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 52);
  if (v1)
  {
    uint64_t v2 = *(int *)(this + 76);
    uint64_t v3 = v2 + v1;
    if (*(int *)(*(void *)(this + 8) + 12) <= 0)
    {
      if ((int)v1 >= 1)
      {
        do
        {
          *(_WORD *)(*(void *)(*(void *)(this + 16) + 432) + 2 * v2) = 128;
          if (*(_DWORD *)(*(void *)(*(void *)(this + 8) + 24) + 8 * *(int *)(*(void *)(this + 312) + 4 * v2)) != *(_DWORD *)(this + 32)) {
            *(_WORD *)(*(void *)(*(void *)(this + 16) + 432) + 2 * v2) |= 2u;
          }
          ++v2;
        }
        while (v2 < v3);
      }
    }
    else if ((int)v1 >= 1)
    {
      do
        *(_WORD *)(*(void *)(*(void *)(this + 16) + 432) + 2 * v2++) = 128;
      while (v2 < (int)v3);
    }
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentEdges(void *this)
{
  uint64_t v1 = this[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 0;
    do
    {
      uint64_t v4 = *(int *)(this[27] + 4 * v2);
      if (v4 != -1)
      {
        unsigned int v5 = *(unsigned __int8 *)(*(void *)(v1 + 240) + v2);
        unsigned int v6 = v3 & 0xFFFF883A;
        if ((v5 & 0xC) != 0) {
          int v7 = 512;
        }
        else {
          int v7 = 128;
        }
        unsigned int v3 = v6 & 0xFFFFCFBA | v5 & 1 | (((v5 >> 3) & 1) << 6) & 0xFFFFCFFF | (((~v5 & 5) == 0) << 14) | (4 * ((v5 >> 1) & 1)) & 0xFFFFCFFF | (((v5 >> 2) & 1) << 12) & 0xFFFFDFFF | (((v5 >> 2) & 1) << 13) | v7;
        *(_WORD *)(*(void *)(this[2] + 432) + 2 * v4) = v3;
        uint64_t v1 = this[1];
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::populateVertexTagsFromParentVertices(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 60);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(this + 84);
    uint64_t v3 = v2 + v1;
    do
    {
      *(_WORD *)(*(void *)(*(void *)(this + 16) + 432) + 2 * v2) = *(_WORD *)(*(void *)(*(void *)(this + 8)
                                                                                              + 432)
                                                                                  + 2
                                                                                  * *(int *)(*(void *)(this + 312)
                                                                                           + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideEdgeSharpness(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v27 = *((_DWORD *)this + 6);
  char v2 = v27;
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v4 = v3[27];
  v3 += 27;
  v3[1] = v4;
  std::vector<float>::resize(v3, *((int *)v3 - 53));
  uint64_t v28 = (float *)&v30;
  uint64_t v29 = 0x1000000000;
  CMTime __p = 0;
  int v5 = v2 & 0x60;
  if (v5 && (uint64_t v6 = *(unsigned int *)(*((void *)this + 1) + 20), v6 >= 0x11))
  {
    operator delete(0);
    int v7 = operator new(4 * v6);
    CMTime __p = v7;
    uint64_t v28 = (float *)v7;
    HIDWORD(v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v6;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = *((int *)this + 12);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = v9 + v8;
    while (1)
    {
      uint64_t v11 = *((void *)this + 2);
      uint64_t v12 = *(void *)(v11 + 216);
      uint64_t v13 = *(void *)(v11 + 240);
      if ((*(unsigned char *)(v13 + v9) & 4) != 0) {
        goto LABEL_20;
      }
      if ((*(unsigned char *)(v13 + v9) & 8) != 0) {
        break;
      }
LABEL_23:
      if (++v9 >= v10)
      {
        int v7 = __p;
        goto LABEL_25;
      }
    }
    uint64_t v14 = *(int *)(*((void *)this + 36) + 4 * v9);
    uint64_t v15 = (void *)*((void *)this + 1);
    uint64_t v16 = v15[27];
    float v17 = *(float *)(v16 + 4 * v14);
    if (v5)
    {
      uint64_t v18 = *(int *)(v15[15]
                   + 8 * v14
                   + 4 * (((unint64_t)*(unsigned __int8 *)(*((void *)this + 45) + v9) >> 3) & 3));
      uint64_t v19 = v15[42];
      uint64_t v20 = *(unsigned int *)(v19 + 8 * v18);
      uint64_t v21 = v28;
      if ((int)v20 >= 1)
      {
        uint64_t v22 = (int *)(v15[45] + 4 * *(int *)(v19 + 8 * v18 + 4));
        int v23 = v28;
        uint64_t v24 = v20;
        do
        {
          uint64_t v25 = *v22++;
          *v23++ = *(float *)(v16 + 4 * v25);
          --v24;
        }
        while (v24);
      }
      float v26 = OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v27, v17, v20, v21);
      goto LABEL_14;
    }
    if (v17 <= 0.0) {
      goto LABEL_21;
    }
    if (v17 < 10.0)
    {
      if (v17 <= 1.0)
      {
LABEL_21:
        *(_DWORD *)(v12 + 4 * vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      }
      else
      {
        float v26 = v17 + -1.0;
LABEL_14:
        *(float *)(v12 + 4 * vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v26;
        if (v26 > 0.0) {
          goto LABEL_23;
        }
      }
      *(unsigned char *)(v13 + v9) &= ~8u;
      goto LABEL_23;
    }
LABEL_20:
    *(_DWORD *)(v12 + 4 * vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 1092616192;
    goto LABEL_23;
  }
LABEL_25:
  operator delete(v7);
}

void OpenSubdiv::v3_1_1::Vtr::internal::Refinement::subdivideVertexSharpness(OpenSubdiv::v3_1_1::Vtr::internal::Refinement *this)
{
  uint64_t v2 = *((void *)this + 2);
  *(void *)(v2 + 416) = *(void *)(v2 + 408);
  std::vector<float>::resize((void *)(v2 + 408), *(int *)(v2 + 8));
  uint64_t v3 = *((int *)this + 15);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *((int *)this + 21);
    uint64_t v5 = v4 + v3;
    while (1)
    {
      uint64_t v6 = *((void *)this + 2);
      uint64_t v7 = *(void *)(v6 + 408);
      uint64_t v8 = *(void *)(v6 + 432);
      __int16 v9 = *(_WORD *)(v8 + 2 * v4);
      if ((v9 & 0x10) != 0) {
        goto LABEL_10;
      }
      if ((v9 & 0x20) != 0) {
        break;
      }
LABEL_13:
      if (++v4 >= v5) {
        return;
      }
    }
    float v10 = *(float *)(*(void *)(*((void *)this + 1) + 408) + 4 * *(int *)(*((void *)this + 39) + 4 * v4));
    if (v10 <= 0.0) {
      goto LABEL_11;
    }
    if (v10 < 10.0)
    {
      if (v10 <= 1.0)
      {
LABEL_11:
        *(_DWORD *)(v7 + 4 * v4) = 0;
      }
      else
      {
        float v11 = v10 + -1.0;
        *(float *)(v7 + 4 * v4) = v11;
        if (v11 > 0.0) {
          goto LABEL_13;
        }
      }
      *(_WORD *)(v8 + 2 * v4) &= ~0x20u;
      goto LABEL_13;
    }
LABEL_10:
    *(_DWORD *)(v7 + 4 * v4) = 1092616192;
    goto LABEL_13;
  }
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::Refinement::reclassifySemisharpVertices(uint64_t this)
{
  uint64_t v1 = *(int *)(this + 56);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(this + 80);
    uint64_t v3 = v2 + v1;
    do
    {
      uint64_t v4 = *(void *)(this + 16);
      uint64_t v5 = *(void *)(v4 + 432);
      int v6 = *(unsigned __int16 *)(v5 + 2 * v2);
      if ((v6 & 0x40) != 0)
      {
        uint64_t v7 = (int *)(*(void *)(this + 192) + 8 * *(int *)(*(void *)(this + 312) + 4 * v2));
        if (*(unsigned char *)(*(void *)(this + 384) + v2))
        {
          uint64_t v10 = *v7;
          if (v10 != -1 && (*(unsigned char *)(*(void *)(v4 + 240) + v10) & 8) != 0)
          {
            __int16 v12 = v6 & 0xF83F | 0x40;
            __int16 v13 = 512;
          }
          else
          {
            uint64_t v11 = v7[1];
            if (v11 == -1)
            {
              __int16 v12 = v6 & 0xF83F;
              __int16 v13 = 128;
            }
            else
            {
              __int16 v12 = v6 & 0xF83F;
              if ((*(unsigned char *)(*(void *)(v4 + 240) + v11) & 8) != 0)
              {
                v12 |= 0x40u;
                __int16 v13 = 512;
              }
              else
              {
                __int16 v13 = 128;
              }
            }
          }
          LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v13 | v12;
        }
        else
        {
          int v8 = ((*(unsigned __int8 *)(*(void *)(v4 + 240) + v7[1]) >> 3) & 1)
             + ((*(unsigned __int8 *)(*(void *)(v4 + 240) + *v7) >> 3) & 1);
          unsigned int v9 = v6 & 0xFFFFF83F | ((v8 != 0) << 6) | (128 << v8);
        }
        *(_WORD *)(v5 + 2 * v2) = v9;
      }
      ++v2;
    }
    while (v2 < v3);
  }
  uint64_t v14 = *(int *)(this + 60);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = *(int *)(this + 84);
    uint64_t v16 = v15 + v14;
    while (1)
    {
      uint64_t v17 = *(int *)(*(void *)(this + 312) + 4 * v15);
      uint64_t v18 = *(void **)(this + 8);
      unsigned int v19 = *(unsigned __int16 *)(v18[54] + 2 * v17);
      if ((v19 & 0x60) != 0)
      {
        uint64_t v20 = *(void **)(this + 16);
        uint64_t v21 = v20[54];
        __int16 v22 = *(_WORD *)(v21 + 2 * v15);
        if ((v19 & 0x40) != 0 || (((v22 & 0x20) == 0) & (v19 >> 5)) != 0) {
          break;
        }
      }
LABEL_37:
      if (++v15 >= v16) {
        return this;
      }
    }
    uint64_t v23 = v20[45];
    if ((int)((unint64_t)(v20[46] - v23) >> 2) < 1)
    {
      uint64_t v30 = v18[42];
      uint64_t v31 = *(unsigned int *)(v30 + 8 * v17);
      if ((int)v31 >= 1)
      {
        uint64_t v32 = *(int *)(v30 + 8 * v17 + 4);
        unint64_t v33 = (int *)(v18[45] + 4 * v32);
        uint64_t v34 = (unsigned __int16 *)(v18[48] + 2 * v32);
        int32x2_t v27 = 0;
        uint64_t v35 = v20[30];
        do
        {
          uint64_t v36 = *v33++;
          uint64_t v37 = *(void *)(this + 192) + 8 * v36;
          LODWORD(v36) = *v34++;
          int32x2_t v27 = vadd_s32(v27, (int32x2_t)(*(void *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v35+ *(int *)(v37 + 4 * v36))), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
          --v31;
        }
        while (v31);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v24 = v20[42];
      uint64_t v25 = *(unsigned int *)(v24 + 8 * (int)v15);
      if ((int)v25 >= 1)
      {
        float v26 = (int *)(v23 + 4 * *(int *)(v24 + 8 * v15 + 4));
        int32x2_t v27 = 0;
        uint64_t v28 = v20[30];
        do
        {
          uint64_t v29 = *v26++;
          int32x2_t v27 = vadd_s32(v27, (int32x2_t)(*(void *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v28 + v29)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFDLL) & 0xFFFFFFC1FFFFFFC1));
          --v25;
        }
        while (v25);
LABEL_30:
        __int32 v38 = v27.i32[0];
        __int16 v39 = (v27.i32[0] > 0) << 6;
        __int32 v40 = v27.i32[1];
        goto LABEL_32;
      }
    }
    __int32 v40 = 0;
    __int32 v38 = 0;
    __int16 v39 = 0;
LABEL_32:
    __int16 v41 = v39 | v22 & 0xFFBF;
    *(_WORD *)(v21 + 2 * v15) = v41;
    if ((v22 & 0x30) == 0)
    {
      int v42 = v38 + v40;
      int v43 = ((1 << (v38 + v40)) & 0xF) << 7;
      if (v42 <= 2) {
        __int16 v44 = v43;
      }
      else {
        __int16 v44 = 1024;
      }
      *(_WORD *)(v21 + 2 * v15) = v44 | v41 & 0xF87F;
    }
    goto LABEL_37;
  }
  return this;
}

void std::vector<float>::resize(void *a1, unint64_t a2)
{
  uint64_t v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = (uint64_t)&v4[-*a1] >> 2;
  if (a2 <= v6)
  {
    if (a2 < v6) {
      a1[1] = &v5[4 * a2];
    }
  }
  else
  {
    unint64_t v7 = a2 - v6;
    uint64_t v8 = (uint64_t)(a1 + 2);
    uint64_t v9 = a1[2];
    if (a2 - v6 <= (v9 - (uint64_t)v4) >> 2)
    {
      uint64_t v20 = &v4[4 * v7];
      bzero(v4, 4 * v7);
      a1[1] = v20;
    }
    else
    {
      if (a2 >> 62) {
        abort();
      }
      unint64_t v10 = v9 - (void)v5;
      unint64_t v11 = (v9 - (uint64_t)v5) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      __int16 v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v8, v12);
      uint64_t v15 = v14;
      uint64_t v16 = (char *)*a1;
      uint64_t v17 = (char *)a1[1];
      uint64_t v18 = &v13[4 * v6];
      bzero(v18, 4 * v7);
      while (v17 != v16)
      {
        int v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      *a1 = v18;
      a1[1] = &v13[4 * a2];
      a1[2] = &v13[4 * v15];
      if (v16)
      {
        operator delete(v16);
      }
    }
  }
}

void *OpenSubdiv::v3_1_1::Vtr::internal::Refinement::markSparseEdgeChildren(void *this)
{
  uint64_t v1 = this[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(v1 + 4); ++i)
    {
      uint64_t v3 = (_DWORD *)(this[24] + 8 * i);
      uint64_t v4 = this[54];
      if (*(unsigned char *)(v4 + i))
      {
        int v7 = 2;
        *uint64_t v3 = 2;
      }
      else
      {
        uint64_t v5 = (int *)(*(void *)(v1 + 120) + 8 * i);
        uint64_t v6 = this[57];
        if (*(unsigned char *)(v6 + *v5))
        {
          *uint64_t v3 = 1;
          *(_DWORD *)(this[27] + 4 * i) = 1;
        }
        if ((*(unsigned char *)(v6 + v5[1]) & 1) == 0) {
          goto LABEL_10;
        }
        int v7 = 1;
      }
      v3[1] = v7;
      *(_DWORD *)(this[27] + 4 * i) = v7;
LABEL_10:
      uint64_t v8 = *(void *)(v1 + 168);
      uint64_t v9 = *(void *)(v1 + 144);
      uint64_t v10 = *(int *)(v9 + ((8 * i) | 4));
      uint64_t v11 = *(unsigned int *)(v9 + 8 * i);
      if (v11 == 2)
      {
        char v12 = *(unsigned char *)(v4 + i) & 0xE1 | (2
                                         * ((*(unsigned char *)(this[51] + *(int *)(v8 + 4 * v10 + 4)) ^ *(unsigned char *)(this[51] + *(int *)(v8 + 4 * v10))) & 1));
      }
      else if ((int)v11 > 1)
      {
        __int16 v13 = (int *)(v8 + 4 * v10);
        uint64_t v15 = *v13;
        uint64_t v14 = v13 + 1;
        int v16 = *(unsigned __int8 *)(this[51] + v15);
        char v17 = *(unsigned char *)(v4 + i) & 0xE1;
        *(unsigned char *)(v4 + i) = v17;
        uint64_t v18 = v11 - 1;
        while (1)
        {
          uint64_t v19 = *v14++;
          if ((*(unsigned __int8 *)(this[51] + v19) ^ v16)) {
            break;
          }
          if (!--v18) {
            goto LABEL_20;
          }
        }
        char v12 = v17 | 2;
      }
      else
      {
        char v12 = *(unsigned char *)(v4 + i) & 0xE1;
      }
      *(unsigned char *)(v4 + i) = v12;
LABEL_20:
      uint64_t v1 = this[1];
    }
  }
  return this;
}

void std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Refinement::SparseTag>::__append(void *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v5 = (unsigned char *)a1[1];
  uint64_t v4 = a1[2];
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[a2];
      do
      {
        *v5++ &= 0xE0u;
        --v2;
      }
      while (v2);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = &v5[-*a1];
    unint64_t v7 = (unint64_t)&v6[a2];
    if ((uint64_t)&v6[a2] < 0) {
      abort();
    }
    unint64_t v8 = v4 - *a1;
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = operator new(v9);
    }
    else {
      uint64_t v10 = 0;
    }
    char v12 = &v6[(void)v10];
    __int16 v13 = &v6[(void)v10 + v2];
    uint64_t v14 = &v6[(void)v10];
    do
    {
      *v14++ &= 0xE0u;
      --v2;
    }
    while (v2);
    uint64_t v15 = (unsigned char *)*a1;
    if (v5 != (unsigned char *)*a1)
    {
      do
      {
        char v16 = *--v5;
        *--char v12 = v16;
      }
      while (v5 != v15);
      uint64_t v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (char *)v10 + v9;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = MEMORY[0x270FA5388](a1);
  uint64_t v13 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x2800uLL, v10, &a9);
  return printf("%s: %s\n", OpenSubdiv::v3_1_1::Far::Error(OpenSubdiv::v3_1_1::Far::ErrorType,char const*,...)::errorTypeLabel[v9], __str);
}

uint64_t OpenSubdiv::v3_1_1::Far::Warning(OpenSubdiv::v3_1_1::Far *this, const char *a2, ...)
{
  va_start(va, a2);
  unint64_t v2 = (const char *)MEMORY[0x270FA5388](this);
  uint64_t v5 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x2800uLL, v2, va);
  return fprintf((FILE *)*MEMORY[0x263EF8358], "Warning: %s\n", __str);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::applyRefinement(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  *(_WORD *)(*((void *)this + 4) + 8) = *(_WORD *)(*((void *)this + 2) + 8);
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 4);
  *(unsigned char *)(v3 + 12) = *(unsigned char *)(v2 + 12);
  *(_WORD *)(v3 + 13) = *(_WORD *)(v2 + 13);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::estimateAndAllocateChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::trimAndFinalizeChildValues(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateEdgeTags(this);
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueTags((int **)this);
  uint64_t v4 = *((void *)this + 4);
  if (!*(unsigned char *)(v4 + 13))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueCreases(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::reclassifySemisharpValues(this);
    uint64_t v4 = *((void *)this + 4);
  }
  if (*(_DWORD *)(v4 + 16) <= *(_DWORD *)(*((void *)this + 3) + 8))
  {
    uint64_t v6 = *(const void **)(*(void *)v4 + 48);
    uint64_t v7 = *(void *)(*(void *)v4 + 56) - (void)v6;
    unint64_t v8 = *(void **)(v4 + 24);
    return memcpy(v8, v6, (v7 << 30 >> 30) & 0xFFFFFFFFFFFFFFFCLL);
  }
  else
  {
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::initializeFaceValuesFromVertexFaceSiblings((void *)v4);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::estimateAndAllocateChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  uint64_t v2 = *(void *)this;
  int v3 = *(_DWORD *)(*(void *)this + 52);
  uint64_t v4 = *(int *)(*(void *)this + 56);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(int *)(v2 + 80);
    uint64_t v6 = v5 + v4;
    do
    {
      uint64_t v7 = *(int *)(*(void *)(v2 + 312) + 4 * v5);
      if (*(unsigned char *)(*(void *)(*((void *)this + 2) + 48) + v7)) {
        int v8 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 144) + 8 * v7);
      }
      else {
        int v8 = 1;
      }
      v3 += v8;
      ++v5;
    }
    while (v5 < v6);
  }
  uint64_t v9 = *(int *)(v2 + 60);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *(int *)(v2 + 84);
    uint64_t v11 = v10 + v9;
    uint64_t v12 = *(void *)(v2 + 312);
    do
      v3 += *(unsigned __int16 *)(*(void *)(*((void *)this + 2) + 72) + 2 * *(int *)(v12 + 4 * v10++));
    while (v10 < v11);
  }
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::resizeComponents(*((std::vector<int> **)this + 4));
  uint64_t v13 = *((void *)this + 4);
  uint64_t v14 = *(void *)(v13 + 168);
  unint64_t v15 = *(void *)(v13 + 176) - v14;
  if (v3 <= v15)
  {
    if (v3 < v15) {
      *(void *)(v13 + 176) = v14 + v3;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v13 + 168), v3 - v15);
  }
  __int16 v16 = 0;
  std::vector<unsigned short>::resize((uint64_t)this + 40, v3, &v16);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  *(_DWORD *)(*((void *)this + 4) + 16) = 0;
  if (*(unsigned char *)(*(void *)this + 37))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromFaceVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromEdgeVertices(this);
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromVertexVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromVertexVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromFaceVertices(this);
    return OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromEdgeVertices(this);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::trimAndFinalizeChildValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *(void *)(v2 + 168);
  unint64_t v4 = *(int *)(v2 + 16);
  unint64_t v5 = *(void *)(v2 + 176) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      *(void *)(v2 + 176) = v3 + v4;
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)(v2 + 168), v4 - v5);
    uint64_t v2 = *((void *)this + 4);
  }
  if (!*(unsigned char *)(v2 + 13))
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::CreaseEndPair>::resize(v2 + 192, *(int *)(v2 + 16));
    uint64_t v2 = *((void *)this + 4);
  }
  std::vector<unsigned short>::resize((uint64_t)this + 40, *(int *)(v2 + 16));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 4) + 144), *(int *)(*((void *)this + 4) + 16));
  uint64_t v6 = *((void *)this + 4);
  if (*(int *)(v6 + 16) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v6 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v7 < *(int *)(v6 + 16));
  }
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateEdgeTags(void *this)
{
  LODWORD(v1) = *(_DWORD *)(*this + 44);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    do
      *(unsigned char *)(*(void *)(this[4] + 48) + v2++) = 0;
    while (v2 < *(int *)(*this + 44));
    LODWORD(v1) = *(_DWORD *)(*this + 44);
  }
  if ((int)v1 < *(_DWORD *)(this[3] + 4))
  {
    uint64_t v1 = (int)v1;
    do
    {
      *(unsigned char *)(*(void *)(this[4] + 48) + v1) = *(unsigned char *)(*(void *)(this[2] + 48)
                                                              + *(int *)(*(void *)(*this + 288) + 4 * v1));
      ++v1;
    }
    while (v1 < *(int *)(this[3] + 4));
  }
  return this;
}

int **OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueTags(int **this)
{
  uint64_t v1 = this;
  uint64_t v2 = *this;
  int v3 = (*this)[13];
  if (v3 >= 1)
  {
    int v4 = v2[19];
    int v5 = v3 + v4;
    uint64_t v6 = *(int *)(*((void *)this[4] + 12) + 4 * v4);
    do
    {
      *(unsigned char *)(*((void *)this[4] + 21) + v6) = 0;
      ++v4;
      ++v6;
    }
    while (v4 < v5);
    uint64_t v2 = *this;
  }
  uint64_t v7 = v2[14];
  if ((int)v7 >= 1)
  {
    uint64_t v8 = v2[20];
    uint64_t v9 = v8 + v7;
    if (*((unsigned char *)this[2] + 13)) {
      int v10 = 1;
    }
    else {
      int v10 = 9;
    }
    do
    {
      uint64_t v11 = v1[4];
      uint64_t v12 = *((void *)v11 + 9);
      if (*(_WORD *)(v12 + 2 * v8))
      {
        if ((*(unsigned char *)(*((void *)v1[2] + 6) + *(int *)(*((void *)*v1 + 39) + 4 * v8)) & 9) != 0) {
          int v13 = v10;
        }
        else {
          int v13 = 0;
        }
        this = (int **)memset((void *)(*((void *)v11 + 21) + *(int *)(*((void *)v11 + 12) + 4 * v8)), v13, *(unsigned __int16 *)(v12 + 2 * v8));
      }
      ++v8;
    }
    while (v8 < v9);
    uint64_t v2 = *v1;
  }
  uint64_t v14 = v2[15];
  if ((int)v14 >= 1)
  {
    uint64_t v15 = v2[21];
    uint64_t v16 = v15 + v14;
    do
    {
      uint64_t v17 = *(int *)(*((void *)*v1 + 39) + 4 * v15);
      this = (int **)memcpy((void *)(*((void *)v1[4] + 21) + *(int *)(*((void *)v1[4] + 12) + 4 * v15++)), (const void *)(*((void *)v1[2] + 21) + *(int *)(*((void *)v1[2] + 12) + 4 * v17)), *(unsigned __int16 *)(*((void *)v1[2] + 9) + 2 * v17));
    }
    while (v15 < v16);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::propagateValueCreases(void *this)
{
  uint64_t v1 = *this;
  if (*(_DWORD *)(*this + 32) == 4) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = 3;
  }
  uint64_t v3 = *(int *)(v1 + 56);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(int *)(v1 + 80);
    uint64_t v5 = v4 + v3;
    uint64_t v6 = (void *)this[4];
    uint64_t v7 = v6[9];
    uint64_t v8 = v6[12];
    uint64_t v9 = v6[21];
    do
    {
      uint64_t v10 = *(int *)(v8 + 4 * v4);
      uint64_t v11 = (char *)(v9 + v10);
      if ((*(unsigned char *)(v9 + v10) & 1) != 0 && (*(unsigned char *)(*(void *)(v1 + 384) + v4) & 1) == 0)
      {
        uint64_t v12 = *(unsigned __int16 *)(v7 + 2 * v4);
        if (*(_WORD *)(v7 + 2 * v4))
        {
          __int16 v13 = 0;
          uint64_t v14 = (_WORD *)(v6[24] + 4 * v10 + 2);
          do
          {
            char v15 = *v11++;
            if ((v15 & 0x18) != 0)
            {
              *(v14 - 1) = v13;
              *uint64_t v14 = v2 - 1 + v13;
            }
            v13 += v2;
            v14 += 2;
            --v12;
          }
          while (v12);
        }
      }
      ++v4;
    }
    while (v4 < v5);
  }
  uint64_t v16 = *(int *)(v1 + 60);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = *(int *)(v1 + 84);
    uint64_t v18 = v17 + v16;
    do
    {
      uint64_t v19 = (void *)this[4];
      uint64_t v20 = *(int *)(v19[12] + 4 * v17);
      uint64_t v21 = (char *)(v19[21] + v20);
      if ((*v21 & 1) != 0 && (*(unsigned char *)(*(void *)(*this + 384) + v17) & 1) == 0)
      {
        uint64_t v22 = *(unsigned __int16 *)(v19[9] + 2 * v17);
        if (*(_WORD *)(v19[9] + 2 * v17))
        {
          uint64_t v23 = (_DWORD *)(*(void *)(this[2] + 192)
                         + 4
                         * *(int *)(*(void *)(this[2] + 96) + 4 * *(int *)(*(void *)(*this + 312) + 4 * v17)));
          uint64_t v24 = (_DWORD *)(v19[24] + 4 * v20);
          do
          {
            char v25 = *v21++;
            if ((v25 & 0x18) != 0) {
              *uint64_t v24 = *v23;
            }
            ++v24;
            ++v23;
            --v22;
          }
          while (v22);
        }
      }
      ++v17;
    }
    while (v17 < v18);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::reclassifySemisharpValues(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this)
{
  __int16 v2 = 0;
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)(*((void *)this + 2) + 14);
  uint64_t v4 = *(unsigned int *)(*((void *)this + 3) + 20);
  __int32 v40 = &v41;
  CMTime __p = 0;
  if (v4 >= 0x11)
  {
    __int16 v2 = operator new(4 * v4);
    CMTime __p = v2;
    __int32 v40 = (uint64_t *)v2;
  }
  uint64_t v5 = *(int *)(*(void *)this + 60);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(int *)(*(void *)this + 84);
    uint64_t v7 = v6 + v5;
    while (1)
    {
      uint64_t v8 = (void *)*((void *)this + 4);
      uint64_t v9 = *(int *)(v8[12] + 4 * v6);
      uint64_t v10 = (char *)(v8[21] + v9);
      if ((*v10 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v11 = *(void *)this;
      if (*(unsigned char *)(*(void *)(*(void *)this + 384) + v6)) {
        goto LABEL_9;
      }
      uint64_t v12 = *(int *)(*(void *)(v11 + 312) + 4 * v6);
      __int16 v13 = (void *)*((void *)this + 1);
      if ((*(_WORD *)(v13[54] + 2 * v12) & 0x60) == 0) {
        goto LABEL_9;
      }
      uint64_t v14 = (void *)*((void *)this + 3);
      __int16 v15 = *(_WORD *)(v14[54] + 2 * v6);
      if ((v15 & 0x30) != 0) {
        goto LABEL_9;
      }
      uint64_t v16 = *(unsigned __int16 *)(v8[9] + 2 * v6);
      if ((v15 & 0x40) == 0)
      {
        if (*(_WORD *)(v8[9] + 2 * v6))
        {
          do
          {
            if ((*v10 & 0x10) != 0) {
              *uint64_t v10 = *v10 & 0xC7 | 8;
            }
            ++v10;
            --v16;
          }
          while (v16);
        }
        goto LABEL_9;
      }
      uint64_t v17 = v8[24];
      uint64_t v18 = v14[45];
      if (((v14[46] - v18) & 0x3FFFFFFFCLL) != 0)
      {
        uint64_t v20 = v14[42];
        uint64_t v19 = (uint64_t *)(v18 + 4 * *(int *)(v20 + 8 * v6 + 4));
        LODWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v20 + 8 * (int)v6);
      }
      else
      {
        uint64_t v21 = v13[42];
        uint64_t v20 = *(unsigned int *)(v21 + 8 * v12);
        uint64_t v19 = v40;
        if ((int)v20 >= 1)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(int *)(v21 + 8 * v12 + 4);
          uint64_t v24 = v13[45] + 4 * v23;
          uint64_t v25 = v13[48] + 2 * v23;
          uint64_t v26 = *(void *)(v11 + 192);
          do
          {
            *((_DWORD *)v40 + v22) = *(_DWORD *)(v26
                                               + 8 * *(int *)(v24 + 4 * v22)
                                               + 4 * *(unsigned __int16 *)(v25 + 2 * v22));
            ++v22;
          }
          while (v20 != v22);
        }
      }
      if (v16) {
        break;
      }
LABEL_9:
      if (++v6 >= v7)
      {
        __int16 v2 = __p;
        goto LABEL_49;
      }
    }
    uint64_t v27 = 0;
    uint64_t v28 = v17 + 4 * v9;
    while (1)
    {
      char v29 = v10[v27];
      if ((v29 & 0x30) == 0x10)
      {
        uint64_t v30 = (unsigned __int16 *)(v28 + 4 * v27);
        uint64_t v31 = *v30;
        unint64_t v32 = v30[1];
        if (v32 <= v31)
        {
          if (v31 <= v32) {
            goto LABEL_39;
          }
          uint64_t v35 = *(void *)(*((void *)this + 3) + 240);
          if ((int)v31 + 1 < (int)v20)
          {
            do
            {
              char v36 = *(unsigned char *)(v35 + *((int *)v19 + v31 + 1));
              if ((v36 & 8) != 0) {
                break;
              }
              uint64_t v37 = v31 + 2;
              ++v31;
            }
            while (v37 < (int)v20);
            if ((v36 & 8) != 0) {
              goto LABEL_40;
            }
          }
          unint64_t v38 = 0;
          do
          {
            char v34 = *(unsigned char *)(v35 + *((int *)v19 + v38));
            if (v38 >= v32) {
              break;
            }
            ++v38;
          }
          while ((v34 & 8) == 0);
        }
        else
        {
          unint64_t v33 = v31 + 1;
          do
          {
            char v34 = *(unsigned char *)(*(void *)(*((void *)this + 3) + 240) + *((int *)v19 + v33));
            if (v33 >= v32) {
              break;
            }
            ++v33;
          }
          while ((v34 & 8) == 0);
        }
        if ((v34 & 8) == 0) {
LABEL_39:
        }
          v10[v27] = v29 & 0xC7 | 8;
      }
LABEL_40:
      if (++v27 == v16)
      {
        if (v3 && v16 == 2)
        {
          char v39 = *v10;
          if ((*v10 & 0x20) != 0 && (v10[1] & 0x10) == 0)
          {
LABEL_48:
            *uint64_t v10 = v39 & 0xDF;
          }
          else if ((*v10 & 0x10) == 0 && (v10[1] & 0x20) != 0)
          {
            char v39 = *++v10;
            goto LABEL_48;
          }
        }
        goto LABEL_9;
      }
    }
  }
LABEL_49:
  operator delete(v2);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromFaceVertices(void *this)
{
  uint64_t v1 = *(int *)(*this + 52);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(int *)(*this + 76);
    uint64_t v3 = v2 + v1;
    uint64_t v4 = this[4];
    uint64_t v5 = *(void *)(v4 + 96);
    uint64_t v6 = *(void *)(v4 + 72);
    int v7 = *(_DWORD *)(v4 + 16);
    do
    {
      *(_DWORD *)(v5 + 4 * v2) = v7;
      *(_WORD *)(v6 + 2 * v2) = 1;
      int v7 = *(_DWORD *)(v4 + 16) + 1;
      *(_DWORD *)(v4 + 16) = v7;
      ++v2;
    }
    while (v2 < v3);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromEdgeVertices(void *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = *(int *)(*this + 56);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(int *)(v1 + 80);
    uint64_t v4 = v3 + v2;
    uint64_t v5 = *(void *)(v1 + 312);
    uint64_t v6 = this[4];
    uint64_t v7 = *(void *)(v6 + 96);
    uint64_t v8 = *(void *)(this[2] + 48);
    int v9 = *(_DWORD *)(v6 + 16);
    uint64_t v10 = *(void *)(v6 + 72);
    do
    {
      uint64_t v11 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v9;
      if (*(unsigned char *)(v8 + v11))
      {
        uint64_t v13 = this[1];
        uint64_t v14 = *(void *)(v13 + 144);
        uint64_t v12 = *(unsigned int *)(v14 + 8 * v11);
        if (v12 != 1)
        {
          uint64_t v15 = *(void *)(v13 + 168);
          uint64_t v16 = *(int *)(v14 + 8 * v11 + 4);
          if ((int)v12 >= 1)
          {
            uint64_t v17 = 0;
            uint64_t v18 = this[5] + 2 * v9;
            do
            {
              *(_WORD *)(v18 + 2 * v17) = v17;
              ++v17;
            }
            while (v12 != v17);
          }
          uint64_t v19 = *(void *)(*(void *)v6 + 264);
          uint64_t v20 = *(unsigned int *)(v19 + 8 * (int)v3);
          if ((int)v20 >= 1)
          {
            uint64_t v21 = 0;
            uint64_t v22 = v15 + 4 * v16;
            unint64_t v23 = (8 * ((unint64_t)(2 * (int)v3) >> 1)) | 4;
            uint64_t v24 = *(void *)(this[3] + 288) + 4 * *(int *)(*(void *)(this[3] + 264) + v23);
            uint64_t v25 = *(void *)(v6 + 120) + 2 * *(int *)(v19 + v23);
            uint64_t v26 = *(void *)(v1 + 264);
            do
            {
              int v27 = *(_DWORD *)(v26 + 4 * *(int *)(v24 + 4 * v21));
              if (v12 == 2)
              {
                if (v27 == *(_DWORD *)(v22 + 4)) {
                  *(_WORD *)(v25 + 2 * v21) = 1;
                }
              }
              else if ((int)v12 >= 1)
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  if (v27 == *(_DWORD *)(v22 + 4 * i)) {
                    *(_WORD *)(v25 + 2 * v21) = i;
                  }
                }
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
      }
      else
      {
        LODWORD(v12) = 1;
      }
      *(_WORD *)(v10 + 2 * v3) = v12;
      int v9 = *(_DWORD *)(v6 + 16) + v12;
      *(_DWORD *)(v6 + 16) = v9;
      ++v3;
    }
    while (v3 < v4);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::populateChildValuesFromVertexVertices(void *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = *(int *)(*this + 60);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *(int *)(v1 + 84);
    uint64_t v4 = v3 + v2;
    uint64_t v5 = *(void *)(v1 + 312);
    uint64_t v6 = this[4];
    uint64_t v7 = *(void *)(v6 + 96);
    uint64_t v8 = (void *)this[2];
    uint64_t v9 = v8[12];
    uint64_t v10 = v8[21];
    int v11 = *(_DWORD *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      uint64_t v13 = *(int *)(v5 + 4 * v3);
      *(_DWORD *)(v7 + 4 * v3) = v11;
      if (*(unsigned char *)(v10 + *(int *)(v9 + 4 * v13)))
      {
        unint64_t v14 = *(unsigned __int16 *)(v8[9] + 2 * v13);
        if (v14 >= 2)
        {
          uint64_t v15 = this[5] + 2 * v11;
          for (uint64_t i = 1; i != v14; ++i)
            *(_WORD *)(v15 + 2 * i) = i;
          uint64_t v17 = *(void *)(*(void *)v6 + 264);
          uint64_t v18 = *(unsigned int *)(v17 + 8 * v3);
          if ((int)v18 >= 1)
          {
            uint64_t v19 = (__int16 *)(v8[15] + 2 * *(int *)(*(void *)(*v8 + 264) + 4 * (int)((2 * v13) | 1)));
            uint64_t v20 = (_WORD *)(*(void *)(v6 + 120) + 2 * *(int *)(v17 + 8 * (int)v3 + 4));
            do
            {
              __int16 v21 = *v19++;
              *v20++ = v21;
              --v18;
            }
            while (v18);
          }
        }
      }
      else
      {
        LODWORD(v14) = 1;
      }
      *(_WORD *)(v12 + 2 * v3) = v14;
      int v11 = *(_DWORD *)(v6 + 16) + v14;
      *(_DWORD *)(v6 + 16) = v11;
      ++v3;
    }
    while (v3 < v4);
  }
  return this;
}

float OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *this, int a2, unsigned int a3, int a4)
{
  int v4 = a4;
  unsigned int v5 = a3;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v7 = (int *)v70;
  int v68 = v70;
  uint64_t v69 = 0x1000000000;
  unint64_t v71 = 0;
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = v8[45];
  uint64_t v10 = a2;
  uint64_t v11 = (2 * a2) | 1;
  uint64_t v12 = v8[42];
  uint64_t v13 = *(int *)(v12 + 4 * v11);
  unint64_t v14 = (int *)(v9 + 4 * v13);
  uint64_t v15 = *(unsigned int *)(v12 + 8 * a2);
  uint64_t v16 = (void *)*((void *)this + 3);
  uint64_t v17 = v16[45];
  if (((v16[46] - v17) & 0x3FFFFFFFCLL) != 0)
  {
    int v62 = a4;
    uint64_t v7 = (int *)(v17 + 4 * *(int *)(v16[42] + 8 * a4 + 4));
    goto LABEL_11;
  }
  if (v15)
  {
    int v62 = a4;
    if (v15 <= 0x10)
    {
      LODWORD(v6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_DWORD *)(v12 + 8 * a2);
      uint64_t v18 = v8[48] + 2 * *(int *)(v12 + 4 * v11);
    }
    else
    {
      uint64_t v61 = a2;
      operator delete(0);
      uint64_t v7 = (int *)operator new(4 * v15);
      unint64_t v71 = v7;
      int v68 = v7;
      LODWORD(v6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v15;
      HIDWORD(v6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v15;
      if ((int)v15 < 1)
      {
        uint64_t v10 = v61;
        unsigned int v5 = a3;
        goto LABEL_11;
      }
      uint64_t v18 = *(void *)(*((void *)this + 1) + 384)
          + 2 * *(int *)(*(void *)(*((void *)this + 1) + 336) + 4 * v11);
      uint64_t v10 = v61;
      unsigned int v5 = a3;
    }
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(*(void *)this + 192);
    do
    {
      v7[v23] = *(_DWORD *)(v24 + 8 * v14[v23] + 4 * *(unsigned __int16 *)(v18 + 2 * v23));
      ++v23;
    }
    while (v15 != v23);
LABEL_11:
    uint64_t v22 = (float *)v66;
    uint64_t v64 = v66;
    LODWORD(v65) = 2 * v15;
    HIDWORD(v65) = 32;
    uint64_t v67 = 0;
    if ((2 * v15) < 0x21)
    {
      __int16 v21 = 0;
    }
    else
    {
      uint64_t v25 = v10;
      uint64_t v26 = v13;
      uint64_t v27 = v9;
      unsigned int v28 = v5;
      char v29 = operator new(4 * (2 * v15));
      unsigned int v5 = v28;
      uint64_t v9 = v27;
      uint64_t v13 = v26;
      uint64_t v10 = v25;
      __int16 v21 = v29;
      uint64_t v67 = v29;
      uint64_t v64 = v29;
      HIDWORD(v65) = 2 * v15;
      uint64_t v22 = (float *)v29;
    }
    int v4 = v62;
    goto LABEL_15;
  }
  uint64_t v19 = a2;
  operator delete(0);
  unsigned int v5 = a3;
  uint64_t v10 = v19;
  __int16 v21 = 0;
  uint64_t v69 = 0x1000000000;
  uint64_t v22 = (float *)v66;
  uint64_t v64 = v66;
  uint64_t v65 = 0x2000000000;
  uint64_t v67 = 0;
  int v68 = v70;
LABEL_15:
  uint64_t v30 = (unsigned __int16 *)(*(void *)(*((void *)this + 2) + 192)
                           + 4 * *(int *)(*(void *)(*((void *)this + 2) + 96) + 4 * v10)
                           + 4 * v5);
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  uint64_t v33 = (v32 - v31);
  if (v32 <= v31)
  {
    uint64_t v34 = *((void *)this + 1);
    if (v31 <= v32)
    {
      LODWORD(v33) = 0;
      uint64_t v36 = *((void *)this + 3);
    }
    else
    {
      uint64_t v44 = *(void *)(v34 + 216);
      uint64_t v36 = *((void *)this + 3);
      uint64_t v45 = *(void *)(v36 + 216);
      if ((int)v31 + 1 >= (int)v15)
      {
        uint64_t v46 = 0;
      }
      else
      {
        uint64_t v46 = (v15 + ~v31);
        int v47 = &v7[v31 + 1];
        uint64_t v48 = (int *)(4 * v13 + 4 * v31 + v9 + 4);
        int v49 = v22;
        uint64_t v50 = v46;
        do
        {
          uint64_t v51 = *v48++;
          float *v49 = *(float *)(v44 + 4 * v51);
          uint64_t v52 = *v47++;
          v49[(int)v15] = *(float *)(v45 + 4 * v52);
          ++v49;
          --v50;
        }
        while (v50);
      }
      uint64_t v53 = v32 + 1;
      uint64_t v54 = &v22[v46];
      LODWORD(v33) = v32 + v46 + 1;
      do
      {
        uint64_t v55 = *v14++;
        *uint64_t v54 = *(float *)(v44 + 4 * v55);
        uint64_t v56 = *v7++;
        v54[(int)v15] = *(float *)(v45 + 4 * v56);
        ++v54;
        --v53;
      }
      while (v53);
    }
  }
  else
  {
    uint64_t v34 = *((void *)this + 1);
    uint64_t v35 = *(void *)(v34 + 216);
    uint64_t v36 = *((void *)this + 3);
    uint64_t v37 = *(void *)(v36 + 216);
    unint64_t v38 = &v7[v31 + 1];
    char v39 = (int *)(4 * v13 + 4 * v31 + v9 + 4);
    __int32 v40 = v22;
    uint64_t v41 = v33;
    do
    {
      uint64_t v42 = *v39++;
      *__int32 v40 = *(float *)(v35 + 4 * v42);
      uint64_t v43 = *v38++;
      v40[(int)v15] = *(float *)(v37 + 4 * v43);
      ++v40;
      --v41;
    }
    while (v41);
  }
  int v63 = *(_DWORD *)(*(void *)this + 24);
  double v57 = OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v63, *(float *)(*(void *)(v34 + 408) + 4 * v10), *(float *)(*(void *)(v36 + 408) + 4 * v4), v33, v22, &v22[(int)v15]);
  float v58 = *(float *)&v57;
  operator delete(v21);
  operator delete(v71);
  return v58;
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::~TriRefinement(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  *(void *)this = &unk_26E721C38;
  uint64_t v2 = (void *)*((void *)this + 63);
  if (v2)
  {
    *((void *)this + 64) = v2;
    operator delete(v2);
  }
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::~Refinement(this);
}

{
  uint64_t vars8;

  OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::~TriRefinement(this);
  JUMPOUT(0x237DBCBD0);
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::allocateParentChildIndices(std::vector<int> *this)
{
  std::vector<int>::pointer end = this->__end_;
  uint64_t v4 = *((void *)end + 9);
  uint64_t v3 = *((void *)end + 10);
  uint64_t v6 = *((void *)end + 15);
  uint64_t v5 = *((void *)end + 16);
  uint64_t v8 = *end;
  std::vector<int>::size_type v7 = end[1];
  std::vector<int>::size_type v9 = end[2];
  std::vector<int>::value_type __x = 4;
  std::vector<unsigned int>::resize(this + 21, 2 * v8, &__x);
  std::vector<int>::pointer v10 = this->__end_;
  std::vector<int>::pointer begin = this[21].__begin_;
  if (*v10 >= 1)
  {
    int v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = begin + 1;
    do
    {
      *unint64_t v14 = v12;
      v14 += 2;
      ++v13;
      v12 += 4;
    }
    while (v13 < *v10);
  }
  unint64_t v15 = (unint64_t)((char *)this[21].__end_ - (char *)begin) >> 2;
  this[3].__end_cap_.__value_ = begin;
  LODWORD(this[4].__begin_) = v15;
  uint64_t v16 = (int *)*((void *)v10 + 3);
  uint64_t v17 = (*((void *)v10 + 4) - (void)v16) >> 2;
  this[4].__end_ = v16;
  LODWORD(this[4].__end_cap_.__value_) = v17;
  std::vector<int>::value_type v18 = 0;
  std::vector<unsigned int>::resize(this + 5, 4 * v8, &v18);
  std::vector<unsigned int>::resize(this + 6, (int)((v3 - v4) >> 2), &v18);
  std::vector<unsigned int>::resize(this + 8, (int)((v5 - v6) >> 2), &v18);
  std::vector<unsigned int>::resize(this + 7, 0, &v18);
  std::vector<unsigned int>::resize(this + 9, v7, &v18);
  std::vector<unsigned int>::resize(this + 10, v9, &v18);
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateFaceVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  uint64_t v2 = (std::vector<int> *)*((void *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateFaceVertexCountsAndOffsets(this);
    uint64_t v2 = (std::vector<int> *)*((void *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 2, 3 * SLODWORD(v2->__begin_));
  uint64_t v3 = (int *)*((void *)this + 1);
  if (*v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)v3 + 6);
    uint64_t v6 = *((void *)v3 + 9);
    uint64_t v7 = *((void *)this + 15);
    uint64_t v8 = *((void *)this + 27);
    std::vector<int>::size_type v9 = (int *)(*((void *)this + 11) + 4);
    std::vector<int>::pointer v10 = (int *)(*((void *)v3 + 3) + 4);
    do
    {
      uint64_t v11 = *v10;
      v10 += 2;
      int v12 = (int *)(v5 + 4 * v11);
      uint64_t v13 = (int *)(v6 + 4 * v11);
      uint64_t v14 = *v9;
      v9 += 2;
      int v15 = *(_DWORD *)(v8 + 4 * *v13);
      int v16 = *(_DWORD *)(v8 + 4 * v13[1]);
      uint64_t v17 = (_DWORD *)(v7 + 4 * v14);
      int v18 = *(_DWORD *)(v8 + 4 * v13[2]);
      if (*v17 != -1)
      {
        uint64_t v19 = (_DWORD *)(*(void *)(*((void *)this + 2) + 48)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * *v17) | 1)));
        *uint64_t v19 = *(_DWORD *)(*((void *)this + 30) + 4 * *v12);
        v19[1] = v15;
        unsigned char v19[2] = v18;
      }
      int v20 = v17[1];
      if (v20 != -1)
      {
        __int16 v21 = (_DWORD *)(*(void *)(*((void *)this + 2) + 48)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v20) | 1)));
        *__int16 v21 = v15;
        v21[1] = *(_DWORD *)(*((void *)this + 30) + 4 * v12[1]);
        _DWORD v21[2] = v16;
      }
      int v22 = v17[2];
      if (v22 != -1)
      {
        uint64_t v23 = (_DWORD *)(*(void *)(*((void *)this + 2) + 48)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v22) | 1)));
        *uint64_t v23 = v18;
        v23[1] = v16;
        v23[2] = *(_DWORD *)(*((void *)this + 30) + 4 * v12[2]);
      }
      int v24 = v17[3];
      if (v24 != -1)
      {
        uint64_t v25 = (_DWORD *)(*(void *)(*((void *)this + 2) + 48)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v24) | 1)));
        *uint64_t v25 = v16;
        v25[1] = v18;
        _OWORD v25[2] = v15;
      }
      ++v4;
    }
    while (v4 < *v3);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateFaceVertexCountsAndOffsets(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  uint64_t v2 = (std::vector<int> *)*((void *)this + 2);
  uint64_t begin_low = SLODWORD(v2->__begin_);
  std::vector<int>::value_type __x = 3;
  std::vector<unsigned int>::resize(v2 + 1, 2 * begin_low, &__x);
  uint64_t v4 = (int *)*((void *)this + 2);
  if (*v4 >= 1)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = (_DWORD *)(*((void *)v4 + 3) + 4);
    do
    {
      *uint64_t v7 = v5;
      v7 += 2;
      ++v6;
      v5 += 3;
    }
    while (v6 < *v4);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateFaceEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::vector<int> *)*((void *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateFaceVertexCountsAndOffsets(this);
    uint64_t v2 = (std::vector<int> *)*((void *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 3, 3 * SLODWORD(v2->__begin_));
  uint64_t v3 = (int *)*((void *)this + 1);
  if (*v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)v3 + 3);
    uint64_t v6 = *((void *)v3 + 6);
    uint64_t v7 = *((void *)v3 + 9);
    uint64_t v8 = *((void *)this + 11);
    uint64_t v9 = *((void *)this + 15);
    uint64_t v10 = *((void *)this + 13);
    uint64_t v11 = *((void *)this + 18);
    uint64_t v12 = *((void *)this + 24);
    uint64_t v13 = *((void *)v3 + 15);
    do
    {
      uint64_t v14 = 0;
      uint64_t v15 = (8 * v4) | 4;
      uint64_t v16 = *(int *)(v5 + v15);
      uint64_t v17 = (_DWORD *)(v6 + 4 * v16);
      int v18 = (int *)(v7 + 4 * v16);
      uint64_t v19 = *(int *)(v8 + v15);
      uint64_t v20 = *(int *)(v10 + v15);
      do
      {
        uint64_t v22 = *v18++;
        uint64_t v21 = v22;
        uint64_t v23 = (_DWORD *)(v13 + 8 * v22);
        BOOL v24 = *v23 != v23[1] && *v17 != *v23;
        uint64_t v25 = v12 + 8 * v21;
        int v26 = *(_DWORD *)(v25 + 4 * v24);
        LODWORD(v25) = *(_DWORD *)(v25 + 4 * !v24);
        uint64_t v27 = (int *)((char *)&v38 + v14);
        _DWORD *v27 = v26;
        v27[1] = v25;
        v14 += 8;
        ++v17;
      }
      while (v14 != 24);
      unsigned int v28 = (_DWORD *)(v9 + 4 * v19);
      char v29 = (_DWORD *)(v11 + 4 * v20);
      if (*v28 != -1)
      {
        uint64_t v30 = (_DWORD *)(*(void *)(*((void *)this + 2) + 72)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * *v28) | 1)));
        int v31 = v41;
        *uint64_t v30 = v38;
        v30[1] = *v29;
        v30[2] = v31;
      }
      int v32 = v28[1];
      if (v32 != -1)
      {
        uint64_t v33 = *(void *)(*((void *)this + 2) + 72)
            + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v32) | 1));
        *(void *)uint64_t v33 = v39;
        *(_DWORD *)(v33 + 8) = v29[1];
      }
      int v34 = v28[2];
      if (v34 != -1)
      {
        uint64_t v35 = *(void *)(*((void *)this + 2) + 72)
            + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v34) | 1));
        *(_DWORD *)uint64_t v35 = v29[2];
        *(void *)(v35 + 4) = v40;
      }
      int v36 = v28[3];
      if (v36 != -1)
      {
        uint64_t v37 = (_DWORD *)(*(void *)(*((void *)this + 2) + 72)
                       + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v36) | 1)));
        *uint64_t v37 = v29[2];
        v37[1] = *v29;
        v37[2] = v29[1];
      }
      ++v4;
    }
    while (v4 < *v3);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateEdgeVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 120), 2 * *(int *)(*((void *)this + 2) + 4));
  uint64_t v2 = (int *)*((void *)this + 1);
  if (*v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)v2 + 9);
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = *((void *)this + 27);
    uint64_t v7 = (int *)(*((void *)this + 13) + 4);
    uint64_t v8 = (int *)(*((void *)v2 + 3) + 4);
    do
    {
      uint64_t v9 = *v8;
      v8 += 2;
      uint64_t v10 = (int *)(v4 + 4 * v9);
      uint64_t v11 = *v7;
      v7 += 2;
      int v12 = *(_DWORD *)(v6 + 4 * *v10);
      int v13 = *(_DWORD *)(v6 + 4 * v10[1]);
      uint64_t v14 = (int *)(v5 + 4 * v11);
      int v15 = *(_DWORD *)(v6 + 4 * v10[2]);
      uint64_t v16 = *v14;
      if (v16 != -1)
      {
        uint64_t v17 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v16);
        *uint64_t v17 = v12;
        v17[1] = v15;
      }
      uint64_t v18 = v14[1];
      if (v18 != -1)
      {
        uint64_t v19 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v18);
        *uint64_t v19 = v13;
        v19[1] = v12;
      }
      uint64_t v20 = v14[2];
      if (v20 != -1)
      {
        uint64_t v21 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v20);
        *uint64_t v21 = v15;
        v21[1] = v13;
      }
      ++v3;
    }
    while (v3 < *v2);
  }
  if (v2[1] >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (int *)(*((void *)this + 24) + 4);
    BOOL v24 = (int *)(*((void *)v2 + 15) + 4);
    do
    {
      uint64_t v25 = *(v23 - 1);
      if (v25 != -1)
      {
        int v26 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v25);
        *int v26 = *(_DWORD *)(*((void *)this + 27) + 4 * v22);
        v26[1] = *(_DWORD *)(*((void *)this + 30) + 4 * *(v24 - 1));
      }
      uint64_t v27 = *v23;
      if (v27 != -1)
      {
        unsigned int v28 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v27);
        *unsigned int v28 = *(_DWORD *)(*((void *)this + 27) + 4 * v22);
        v28[1] = *(_DWORD *)(*((void *)this + 30) + 4 * *v24);
      }
      ++v22;
      v23 += 2;
      v24 += 2;
    }
    while (v22 < v2[1]);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateEdgeFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  int v2 = 2
     * (((*(void *)(*((void *)this + 1) + 176) - *(void *)(*((void *)this + 1) + 168)) >> 2)
      + ((*((void *)this + 19) - *((void *)this + 18)) >> 2));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 144), 2 * *(int *)(*((void *)this + 2) + 4));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 168), v2);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 192, v2);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v4 + 16);
  int v5 = *(_DWORD *)v4;
  if (*(int *)v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 11);
    uint64_t v8 = *((void *)this + 15);
    uint64_t v9 = *((void *)this + 13);
    uint64_t v10 = *((void *)this + 18);
    do
    {
      uint64_t v11 = *(unsigned int *)(v9 + 8 * v6);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = (8 * v6) | 4;
        int v13 = (_DWORD *)(v8 + 4 * *(int *)(v7 + v12));
        uint64_t v14 = (int *)(v10 + 4 * *(int *)(v9 + v12));
        int v15 = v13[3];
        unsigned int v16 = 1;
        do
        {
          uint64_t v18 = *v14++;
          uint64_t v17 = v18;
          if (v18 != -1)
          {
            uint64_t v19 = *(void *)(v3 + 144);
            uint64_t v20 = (_DWORD *)(v19 + 8 * v17);
            *uint64_t v20 = 2;
            if (v17) {
              int v21 = *(v20 - 1) + *(v20 - 2);
            }
            else {
              int v21 = 0;
            }
            unsigned int v22 = v16 % 3;
            int v23 = 2 * v17;
            v20[1] = v21;
            int v24 = *(_DWORD *)(v3 + 16);
            if (v24 <= 2) {
              int v24 = 2;
            }
            *(_DWORD *)(v3 + 16) = v24;
            uint64_t v25 = *(int *)(v19 + 4 * (v23 | 1));
            int v26 = (_DWORD *)(*(void *)(v3 + 168) + 4 * v25);
            uint64_t v27 = (_WORD *)(*(void *)(v3 + 192) + 2 * v25);
            if (*v13 == -1)
            {
              uint64_t v28 = 0;
            }
            else
            {
              *int v26 = *v13;
              _WORD *v27 = v22;
              uint64_t v28 = 1;
            }
            if (v15 != -1)
            {
              v26[v28] = v15;
              v27[v28] = v22;
              LODWORD(v28) = v28 + 1;
            }
            *uint64_t v20 = v28;
          }
          ++v16;
          ++v13;
          --v11;
        }
        while (v11);
        int v5 = *(_DWORD *)v4;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v29 = *(_DWORD *)(v4 + 4);
  if (v29 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = *((void *)this + 24);
    do
    {
      int v32 = (_DWORD *)(v31 + 8 * v30);
      if (*v32 != -1 || v32[1] != -1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(void *)(v4 + 144);
        uint64_t v35 = *(int *)(v34 + ((8 * v30) | 4));
        uint64_t v36 = *(unsigned int *)(v34 + 8 * v30);
        uint64_t v37 = *(void *)(v4 + 168) + 4 * v35;
        uint64_t v38 = *(void *)(v4 + 192) + 2 * v35;
        uint64_t v39 = (_DWORD *)(*(void *)(v4 + 120) + 8 * v30);
        char v40 = 1;
        do
        {
          char v41 = v40;
          uint64_t v42 = (int)v32[v33];
          if (v42 != -1)
          {
            uint64_t v43 = *(void *)(v3 + 144);
            uint64_t v44 = (_DWORD *)(v43 + 8 * v42);
            *uint64_t v44 = v36;
            if (v42) {
              int v45 = *(v44 - 1) + *(v44 - 2);
            }
            else {
              int v45 = 0;
            }
            v44[1] = v45;
            int v46 = *(_DWORD *)(v3 + 16);
            if (v46 <= (int)v36) {
              int v46 = v36;
            }
            *(_DWORD *)(v3 + 16) = v46;
            if ((int)v36 < 1)
            {
              int v47 = 0;
            }
            else
            {
              int v47 = 0;
              uint64_t v48 = *(int *)(v43 + 4 * (int)((2 * v42) | 1));
              uint64_t v49 = *(void *)(v3 + 168) + 4 * v48;
              uint64_t v50 = *(void *)(v3 + 192) + 2 * v48;
              uint64_t v51 = *(void *)(v4 + 24);
              uint64_t v52 = *((void *)this + 11);
              uint64_t v53 = *((void *)this + 15);
              uint64_t v54 = (int *)v37;
              uint64_t v55 = (unsigned __int16 *)v38;
              uint64_t v56 = v36;
              do
              {
                uint64_t v58 = *v54++;
                uint64_t v57 = v58;
                LODWORD(v58) = *v55++;
                uint64_t v59 = v58;
                uint64_t v60 = (2 * v57) | 1;
                BOOL v61 = v33;
                if (*v39 != v39[1]) {
                  BOOL v61 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * *(int *)(v51 + 4 * v60) + 4 * v59) != v39[v33];
                }
                uint64_t v62 = v53 + 4 * *(int *)(v52 + 4 * v60);
                unsigned int v63 = v61 + v59;
                if (v63 == *(_DWORD *)(v51 + 8 * v57)) {
                  unsigned int v64 = 0;
                }
                else {
                  unsigned int v64 = v63;
                }
                int v65 = *(_DWORD *)(v62 + 4 * v64);
                if (v65 != -1)
                {
                  *(_DWORD *)(v49 + 4 * v47) = v65;
                  *(_WORD *)(v50 + 2 * v47++) = v59;
                }
                --v56;
              }
              while (v56);
            }
            *uint64_t v44 = v47;
          }
          char v40 = 0;
          uint64_t v33 = 1;
        }
        while ((v41 & 1) != 0);
        int v29 = *(_DWORD *)(v4 + 4);
      }
      ++v30;
    }
    while (v30 < v29);
  }
  unint64_t v66 = (int *)(*(void *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  std::vector<int>::size_type v67 = v66[1] + (uint64_t)*v66;
  std::vector<unsigned int>::resize((std::vector<int> *)(v3 + 168), v67);
  uint64_t v68 = *((void *)this + 2) + 192;
  std::vector<unsigned short>::resize(v68, v67);
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  int v2 = ((*(void *)(*((void *)this + 1) + 296) - *(void *)(*((void *)this + 1) + 288)) >> 2)
     + 3 * ((*(void *)(*((void *)this + 1) + 176) - *(void *)(*((void *)this + 1) + 168)) >> 2);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 264), 2 * *(int *)(*((void *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 288), v2);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 312, v2);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentEdges(this);
  }
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = (int *)(*(void *)(v3 + 264) + 4 * (2 * *(_DWORD *)(v3 + 8) - 2));
  std::vector<int>::size_type v5 = v4[1] + (uint64_t)*v4;
  std::vector<unsigned int>::resize((std::vector<int> *)(v3 + 288), v5);
  uint64_t v6 = *((void *)this + 2) + 312;
  std::vector<unsigned short>::resize(v6, v5);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentVertices(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 288);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 312);
        uint64_t v11 = (void *)this[2];
        uint64_t v12 = (_DWORD *)(v11[33] + 8 * v5);
        *uint64_t v12 = v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          int v15 = (int *)(v6 + 4 * v9);
          unsigned int v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = this[11];
          uint64_t v20 = this[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            __int16 v23 = v22;
            int v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v24;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *uint64_t v12 = v14;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexFacesFromParentEdges(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 192);
        uint64_t v11 = (void *)this[2];
        uint64_t v12 = (_DWORD *)(v11[33] + 8 * v5);
        *uint64_t v12 = 2 * v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          int v15 = (int *)(v6 + 4 * v9);
          unsigned int v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = this[11];
          uint64_t v20 = this[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            uint64_t v23 = v22;
            unsigned int v24 = v22 + 1 - 3 * ((1431655766 * (unint64_t)(v22 + 1)) >> 32);
            uint64_t v25 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            int v26 = *(_DWORD *)(v25 + 4 * v24);
            if (v26 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v26;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            int v27 = *(_DWORD *)(v25 + 12);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              *(_WORD *)(v18 + 2 * v14++) = v23
                                            + 2
                                            - 3 * ((1431655766 * (unint64_t)(v23 + 2)) >> 32);
            }
            int v28 = *(_DWORD *)(v25 + 4 * v23);
            if (v28 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v28;
              *(_WORD *)(v18 + 2 * v14++) = v24;
            }
            --v8;
          }
          while (v8);
        }
        *uint64_t v12 = v14;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = ((*(void *)(v2 + 368) - *(void *)(v2 + 360)) >> 2)
     + 2 * (*(_DWORD *)(v2 + 4) + ((*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 336), 2 * *(int *)(*((void *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 360), v3);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 384, v3);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentEdges(this);
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = (int *)(*(void *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  std::vector<int>::size_type v6 = v5[1] + (uint64_t)*v5;
  std::vector<unsigned int>::resize((std::vector<int> *)(v4 + 360), v6);
  uint64_t v7 = *((void *)this + 2) + 384;
  std::vector<unsigned short>::resize(v7, v6);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentVertices(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 360);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 336) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 384);
        uint64_t v11 = this[2];
        uint64_t v12 = *(void *)(v11 + 336);
        int v13 = (_DWORD *)(v12 + 8 * v5);
        *int v13 = v8;
        if (v5) {
          int v14 = *(v13 - 1) + *(v13 - 2);
        }
        else {
          int v14 = 0;
        }
        v13[1] = v14;
        int v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8) {
          int v15 = v8;
        }
        *(_DWORD *)(v11 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v15;
        if ((int)v8 < 1)
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (int *)(v6 + 4 * v9);
          uint64_t v18 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          uint64_t v20 = *(void *)(v11 + 360) + 4 * v19;
          uint64_t v21 = *(void *)(v11 + 384) + 2 * v19;
          uint64_t v22 = this[24];
          do
          {
            uint64_t v23 = *v17++;
            uint64_t v24 = v22 + 8 * v23;
            LODWORD(v23) = *v18++;
            int v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *int v13 = v16;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::populateVertexEdgesFromParentEdges(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = *(unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *(int *)(*(void *)(v1 + 144) + 8 * v3 + 4);
        uint64_t v9 = *(void *)(v1 + 192);
        uint64_t v10 = *(void *)(v1 + 120);
        uint64_t v11 = this[24];
        uint64_t v12 = this[2];
        int v13 = v7 + 2;
        uint64_t v14 = *(void *)(v12 + 336);
        int v15 = (_DWORD *)(v14 + 8 * v5);
        *int v15 = v7 + 2;
        if (v5) {
          int v16 = *(v15 - 1) + *(v15 - 2);
        }
        else {
          int v16 = 0;
        }
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13) {
          int v13 = *(_DWORD *)(v12 + 20);
        }
        *(_DWORD *)(v12 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v13;
        if ((int)v7 < 1)
        {
          int v19 = 0;
        }
        else
        {
          uint64_t v17 = 0;
          BOOL v18 = 0;
          int v19 = 0;
          uint64_t v20 = v6 + 4 * v8;
          uint64_t v21 = v9 + 2 * v8;
          uint64_t v22 = (_DWORD *)(v10 + 8 * v3);
          uint64_t v23 = v11 + 8 * v3;
          uint64_t v24 = *(int *)(v14 + 4 * (int)((2 * v5) | 1));
          uint64_t v25 = *(void *)(v12 + 360) + 4 * v24;
          uint64_t v26 = *(void *)(v12 + 384) + 2 * v24;
          uint64_t v27 = this[13];
          uint64_t v28 = this[18];
          int v29 = -1;
          do
          {
            uint64_t v30 = *(unsigned __int16 *)(v21 + 2 * v17);
            uint64_t v31 = (2 * *(int *)(v20 + 4 * v17)) | 1;
            uint64_t v32 = v28 + 4 * *(int *)(v27 + 4 * v31);
            if (v17)
            {
              int v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              int v34 = *(_DWORD *)(v32 + 4 * *(unsigned __int16 *)(v21 + 2 * v17));
            }
            else
            {
              if (*v22 != v22[1]) {
                BOOL v18 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(*(void *)(v1 + 24) + 4 * v31) + 4 * v30) != *v22;
              }
              int v35 = *(_DWORD *)(v23 + 4 * !v18);
              int v29 = *(_DWORD *)(v23 + 4 * v18);
              int v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              int v34 = *(_DWORD *)(v32 + 4 * v30);
              if (v35 != -1)
              {
                *(_DWORD *)(v25 + 4 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v35;
                *(_WORD *)(v26 + 2 * v19++) = 0;
              }
            }
            if (v33 != -1)
            {
              *(_DWORD *)(v25 + 4 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v33;
              *(_WORD *)(v26 + 2 * v19++) = 1;
            }
            if (v34 != -1)
            {
              *(_DWORD *)(v25 + 4 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v34;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            if (!v17 && v29 != -1)
            {
              *(_DWORD *)(v25 + 4 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v29;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            ++v17;
          }
          while (v7 != v17);
        }
        *int v15 = v19;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::TriRefinement::markSparseFaceChildren(void *this)
{
  uint64_t v1 = (int *)this[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 4;
    *(void *)&long long v4 = 0x200000002;
    *((void *)&v4 + 1) = 0x200000002;
    do
    {
      uint64_t v5 = this[15] + 4 * *(int *)(this[11] + v3);
      uint64_t v6 = this[18] + 4 * *(int *)(this[13] + v3);
      uint64_t v7 = this[51];
      if (*(unsigned char *)(v7 + v2))
      {
        *(_OWORD *)uint64_t v5 = v4;
        *(_DWORD *)uint64_t v6 = 2;
        *(void *)(v6 + 4) = 0x200000002;
        *(unsigned char *)(v7 + v2) &= 0xE1u;
      }
      else
      {
        uint64_t v8 = *(int *)(*((void *)v1 + 3) + v3);
        uint64_t v9 = (int *)(*((void *)v1 + 6) + 4 * v8);
        if ((*(unsigned char *)(this[57] + v9[1]) & 1) + (*(unsigned char *)(this[57] + *v9) & 1) + (*(unsigned char *)(this[57] + v9[2]) & 1))
        {
          int v10 = *(unsigned char *)(this[54] + *(int *)(*((void *)v1 + 9) + 4 * v8 + 4)) & 0xE | (*(unsigned __int8 *)(this[54] + *(int *)(*((void *)v1 + 9) + 4 * v8)) >> 1) & 0xF | (2 * *(unsigned __int8 *)(this[54] + *(int *)(*((void *)v1 + 9) + 4 * v8 + 8))) & 0xC;
          *(unsigned char *)(v7 + v2) = *(unsigned char *)(v7 + v2) & 0xE1 | (2 * v10);
          if (v10)
          {
            *(_DWORD *)(v5 + 12) = 1;
            *(_DWORD *)uint64_t v6 = 1;
            *(void *)(v6 + 4) = 0x100000001;
          }
          uint64_t v11 = this[57];
          if (*(unsigned char *)(v11 + *v9))
          {
            *(_DWORD *)uint64_t v5 = 1;
            *(_DWORD *)uint64_t v6 = 1;
          }
          if (*(unsigned char *)(v11 + v9[1]))
          {
            *(_DWORD *)(v5 + 4) = 1;
            *(_DWORD *)(v6 + 4) = 1;
          }
          if (*(unsigned char *)(v11 + v9[2]))
          {
            *(_DWORD *)(v5 + 8) = 1;
            *(_DWORD *)(v6 + 8) = 1;
          }
        }
      }
      ++v2;
      uint64_t v1 = (int *)this[1];
      v3 += 8;
    }
    while (v2 < *v1);
  }
  return this;
}

OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::EndCapBSplineBasisPatchFactory(OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3, OpenSubdiv::v3_1_1::Far::StencilTable *a4)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  uint64_t v6 = **(int **)(*((void *)a2 + 11) + 24 * (((unint64_t)*((unsigned __int8 *)a2 + 8) >> 2) & 0xF));
  std::vector<int>::size_type v7 = 7 * v6;
  int v8 = 112 * v6;
  if (v8 >= 104857600) {
    int v9 = 104857600;
  }
  else {
    int v9 = v8;
  }
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 16), v7);
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 64), v9);
  std::vector<float>::reserve((void **)a3 + 11, v9);
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    std::vector<int>::reserve((std::vector<int> *)(v10 + 16), v7);
    std::vector<int>::reserve((std::vector<int> *)(v10 + 64), v7);
    std::vector<float>::reserve((void **)(v10 + 88), v7);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::GetPatchPoints(uint64_t a1, uint64_t a2, int a3, __int16 *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = (int32x4_t *)(*(void *)(a2 + 48) + 4 * *(int *)(v8 + 8 * a3 + 4));
  uint64_t v10 = *(unsigned int *)(v8 + 8 * a3);
  if ((a6 & 0x80000000) == 0) {
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(a1);
  }
  unint64_t v11 = 0;
  int v12 = -1;
  do
  {
    __int16 v14 = *(_WORD *)(*(void *)(a2 + 432) + 2 * v9->i32[v11]);
    if ((v14 & 0x780) != 0x80 || (__int16 v15 = *a4) != 0) {
      LOBYTE(v15) = 1;
    }
    if ((v14 & 2) != 0)
    {
      if (v12 < 0) {
        int v12 = v11;
      }
      else {
        LOBYTE(v15) = 1;
      }
    }
    if (v11 > 2) {
      break;
    }
    ++v11;
    a4 += 3;
  }
  while ((v15 & 1) == 0);
  if ((v15 & 1) == 0) {
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(a1, (_DWORD *)a2, a3, v12, v9, v10, a5, a6);
  }
  else {
    return OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(a1);
  }
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPointsFromGregoryBasis(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  int v102 = v3;
  uint64_t v100 = v4;
  uint64_t v5 = v1;
  v126[16] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(v1 + 16);
  if ((v2 & 0x80000000) != 0)
  {
    int v10 = *(_DWORD *)(v6 + 20);
  }
  else
  {
    uint64_t v8 = v6 + 40;
    std::vector<int>::size_type v7 = *(uint64_t **)(v6 + 40);
    uint64_t v9 = *(void *)(v8 + 8) - (void)v7;
    if ((int)((unint64_t)v9 >> 3) < 1)
    {
      int v10 = 0;
    }
    else
    {
      int v10 = 0;
      uint64_t v11 = (int)(v9 >> 3);
      if (v11 <= 1) {
        uint64_t v11 = 1;
      }
      do
      {
        uint64_t v12 = *v7++;
        v10 += *(_DWORD *)(*(void *)(*(void *)(v12 + 456) + 8 * v2) + 16);
        --v11;
      }
      while (v11);
    }
  }
  int v13 = 0;
  __int16 v14 = (void *)(v1 + 48);
  int v15 = *(_DWORD *)(v1 + 24);
  int v16 = *(char **)(v1 + 40);
  do
  {
    int v17 = v15 + v10;
    if ((unint64_t)v16 >= *v14)
    {
      int v19 = *(char **)(v5 + 32);
      uint64_t v20 = (v16 - v19) >> 2;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62) {
LABEL_110:
      }
        abort();
      uint64_t v22 = *v14 - (void)v19;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5 + 48, v23);
        int v19 = *(char **)(v5 + 32);
        int v16 = *(char **)(v5 + 40);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[4 * v20];
      *(_DWORD *)uint64_t v25 = v17;
      BOOL v18 = v25 + 4;
      while (v16 != v19)
      {
        int v26 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      *(void *)(v5 + 32) = v25;
      *(void *)(v5 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v18;
      *(void *)(v5 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = &v24[4 * v23];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)int v16 = v17;
      BOOL v18 = v16 + 4;
    }
    *(void *)(v5 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v18;
    int v15 = *(_DWORD *)(v5 + 24) + 1;
    *(_DWORD *)(v5 + 24) = v15;
    ++v13;
    int v16 = v18;
  }
  while (v13 != 16);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis((uint64_t)v103);
  v126[0] = v103;
  v126[1] = &v108;
  v126[2] = &v113;
  v126[3] = &v105;
  v126[4] = &v112;
  v126[5] = &v116;
  v126[6] = &v117;
  v126[7] = &v109;
  v126[8] = &v111;
  v126[9] = v119;
  v126[10] = &v118;
  v126[11] = &v114;
  v126[12] = v107;
  v126[13] = v115;
  v126[14] = &v110;
  v126[15] = &v106;
  unsigned int v27 = v104;
  uint64_t v28 = &v122;
  unint64_t v122 = &v124;
  uint64_t v123 = 0x1000000010;
  uint64_t v29 = 16;
  uint64_t v125 = 0;
  do
  {
    *((_DWORD *)v28 + 4) = 0;
    v28[3] = (uint64_t *)(v28 + 5);
    v28[45] = 0;
    v28[4] = (uint64_t *)0x2800000028;
    v28 += 44;
    --v29;
  }
  while (v29);
  uint64_t v30 = 0;
  uint64_t v31 = (char *)&unk_234416194;
  do
  {
    uint64_t v32 = 0;
    uint64_t v33 = 4 * v30;
    int v34 = v126;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear((void **)&v122[44 * v32 + 44 * v33], v27);
      for (uint64_t i = 0; i != 16; i += 4)
      {
        float v36 = *(float *)&v31[i];
        if (v36 != 0.0) {
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v122[44 * v32 + 44 * v33], (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v34[i], v36);
        }
      }
      ++v32;
      ++v34;
    }
    while (v32 != 4);
    ++v30;
    v31 += 16;
  }
  while (v30 != 4);
  uint64_t v37 = 0;
  for (uint64_t j = 0; j != 4; ++j)
  {
    uint64_t v39 = 0;
    char v40 = (char *)&unk_234416194;
    do
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, v27);
      uint64_t v42 = 0;
      uint64_t v43 = v37;
      do
      {
        float v44 = *(float *)&v40[v42];
        if (v44 != 0.0) {
          OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)v120, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)((char *)v122 + v43), v44);
        }
        v42 += 4;
        v43 += 352;
      }
      while (v42 != 16);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)v120, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v5, v41);
      operator delete(__p);
      ++v39;
      v40 += 16;
    }
    while (v39 != 4);
    v37 += 1408;
  }
  if (*(void *)(v5 + 8))
  {
    for (uint64_t k = 0; k != 16; ++k)
    {
      int v46 = *(_DWORD *)(v100 + 4 * dword_2344161D4[k]);
      int v47 = *(void **)(v5 + 8);
      uint64_t v48 = (char *)v47[3];
      unint64_t v49 = v47[4];
      if ((unint64_t)v48 >= v49)
      {
        uint64_t v51 = (char *)v47[2];
        uint64_t v52 = (v48 - v51) >> 2;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62) {
          goto LABEL_110;
        }
        uint64_t v54 = v49 - (void)v51;
        if (v54 >> 1 > v53) {
          unint64_t v53 = v54 >> 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          uint64_t v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 4), v55);
          uint64_t v51 = (char *)v47[2];
          uint64_t v48 = (char *)v47[3];
        }
        else
        {
          uint64_t v56 = 0;
        }
        uint64_t v57 = &v56[4 * v52];
        *(_DWORD *)uint64_t v57 = 1;
        uint64_t v50 = v57 + 4;
        while (v48 != v51)
        {
          int v58 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        void v47[2] = v57;
        v47[3] = v50;
        v47[4] = &v56[4 * v55];
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v48 = 1;
        uint64_t v50 = v48 + 4;
      }
      int v59 = v46 + v102;
      v47[3] = v50;
      uint64_t v60 = *(void **)(v5 + 8);
      BOOL v61 = (char *)v60[9];
      unint64_t v62 = v60[10];
      if ((unint64_t)v61 >= v62)
      {
        unsigned int v64 = (char *)v60[8];
        uint64_t v65 = (v61 - v64) >> 2;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62) {
          goto LABEL_110;
        }
        uint64_t v67 = v62 - (void)v64;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          uint64_t v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 10), v68);
          unsigned int v64 = (char *)v60[8];
          BOOL v61 = (char *)v60[9];
        }
        else
        {
          uint64_t v69 = 0;
        }
        unint64_t v70 = &v69[4 * v65];
        *(_DWORD *)unint64_t v70 = v59;
        unsigned int v63 = v70 + 4;
        while (v61 != v64)
        {
          int v71 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        v60[8] = v70;
        v60[9] = v63;
        v60[10] = &v69[4 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *(_DWORD *)BOOL v61 = v59;
        unsigned int v63 = v61 + 4;
      }
      v60[9] = v63;
      uint64_t v72 = *(void **)(v5 + 8);
      int v73 = (char *)v72[12];
      unint64_t v74 = v72[13];
      if ((unint64_t)v73 >= v74)
      {
        int v76 = (char *)v72[11];
        uint64_t v77 = (v73 - v76) >> 2;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62) {
          goto LABEL_110;
        }
        uint64_t v79 = v74 - (void)v76;
        if (v79 >> 1 > v78) {
          unint64_t v78 = v79 >> 1;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          __float2 v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v72 + 13), v80);
          int v76 = (char *)v72[11];
          int v73 = (char *)v72[12];
        }
        else
        {
          __float2 v81 = 0;
        }
        unint64_t v82 = &v81[4 * v77];
        *(_DWORD *)unint64_t v82 = 1065353216;
        unint64_t v75 = v82 + 4;
        while (v73 != v76)
        {
          int v83 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v82 - 1) = v83;
          v82 -= 4;
        }
        v72[11] = v82;
        v72[12] = v75;
        v72[13] = &v81[4 * v80];
        if (v76) {
          operator delete(v76);
        }
      }
      else
      {
        *(_DWORD *)int v73 = 1065353216;
        unint64_t v75 = v73 + 4;
      }
      v72[12] = v75;
    }
  }
  uint64_t v84 = *(int *)(v5 + 28);
  *(_DWORD *)(v5 + 28) = v84 + 1;
  uint64_t v85 = *(void *)(v5 + 32);
  if (v123)
  {
    unint64_t v86 = 0;
    uint64_t v87 = 43;
    do
    {
      float v88 = &v122[v87];
      unint64_t v89 = &v122[v87 - 42];
      operator delete((void *)v122[v87]);
      *unint64_t v89 = (uint64_t)(v88 - 40);
      *((_DWORD *)v88 - 81) = 40;
      ++v86;
      v87 += 44;
    }
    while (v86 < v123);
  }
  operator delete(v125);
  for (uint64_t m = 0; m != -1408; m -= 352)
  {
    uint64_t v91 = &v103[m];
    operator delete(*(void **)&v119[m + 1752]);
    *((void *)v91 + 837) = &v119[m + 1432];
    *((_DWORD *)v91 + 1677) = 40;
  }
  for (uint64_t n = 0; n != -1408; n -= 352)
  {
    int v93 = &v103[n];
    operator delete(*(void **)&v119[n + 344]);
    *((void *)v93 + 661) = &v119[n + 24];
    *((_DWORD *)v93 + 1325) = 40;
  }
  for (iuint64_t i = 0; ii != -1408; ii -= 352)
  {
    float v95 = &v103[ii];
    operator delete(*(void **)&v115[ii + 344]);
    *((void *)v95 + 485) = v95 + 3896;
    *((_DWORD *)v95 + 973) = 40;
  }
  uint64_t v96 = 1408;
  do
  {
    int v97 = &v103[v96];
    operator delete(*(void **)&v107[v96 + 344]);
    *((void *)v97 + 133) = v97 + 1080;
    *((_DWORD *)v97 + 26re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 40;
    v96 -= 352;
  }
  while (v96);
  uint64_t v98 = 1408;
  do
  {
    operator delete(*(void **)&v101[v98]);
    *(void *)&v103[v98 - 344] = &v103[v98 - 328];
    *(_DWORD *)&v103[v98 - 332] = 40;
    v98 -= 352;
  }
  while (v98);
  return v85 + (v84 << 6);
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(uint64_t a1, _DWORD *a2, int a3, int a4, int32x4_t *a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v315 = *MEMORY[0x263EF8340];
  unsigned int v15 = 2 * a2[5] + 16;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, v15);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, v15);
  unsigned int v268 = v15;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, v15);
  int v16 = a2[5];
  int v17 = v286;
  v284 = (int *)v286;
  uint64_t v285 = 0x2800000000;
  v287 = 0;
  unsigned int v18 = 2 * v16;
  if (v16)
  {
    if (v18 < 0x29) {
      goto LABEL_6;
    }
    operator delete(0);
    v284 = (int *)v286;
    HIDWORD(v285) = 40;
    int v17 = operator new(4 * v18);
    v287 = v17;
    int v19 = v18;
  }
  else
  {
    operator delete(0);
    int v19 = 40;
  }
  v284 = (int *)v17;
  HIDWORD(v285) = v19;
LABEL_6:
  LODWORD(v285) = v18;
  uint64_t v274 = a4;
  v267 = a2;
  unsigned int v269 = a8;
  int v20 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex((OpenSubdiv::v3_1_1::Vtr::internal::Level *)a2, a5->i32[a4], (int *)v17, a8);
  int v21 = v20;
  if (v20 >= 0) {
    int v22 = v20;
  }
  else {
    int v22 = v20 + 1;
  }
  uint64_t v23 = (v22 >> 1);
  unsigned int v24 = v20 + 1;
  int v270 = a4;
  if (v20 < 2)
  {
    int v35 = a5;
    float v265 = -6.2832;
    float v266 = -6.2832;
  }
  else
  {
    uint64_t v25 = 0;
    if (a4 + 3 <= 0) {
      int v26 = -(-(a4 + 3) & 3);
    }
    else {
      int v26 = (a4 + 3) & 3;
    }
    if (a4 + 1 <= 0) {
      int v27 = -(-(a4 + 1) & 3);
    }
    else {
      int v27 = (a4 + 1) & 3;
    }
    uint64_t v28 = v284;
    __int32 v29 = a5->i32[v27];
    __int32 v30 = a5->i32[v26];
    int v31 = -1;
    int v32 = -1;
    do
    {
      int v34 = *v28;
      v28 += 2;
      int v33 = v34;
      if (v34 == v29) {
        int v31 = v25;
      }
      if (v33 == v30) {
        int v32 = v25;
      }
      ++v25;
    }
    while (v23 != v25);
    int v35 = a5;
    float v265 = (float)v31 * 6.2832;
    float v266 = (float)v32 * 6.2832;
  }
  LODWORD(v31re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  v311 = &v313;
  v314 = 0;
  uint64_t v312 = 0x2800000028;
  LODWORD(v305) = 0;
  v306 = &v308;
  v309 = 0;
  uint64_t v307 = 0x2800000028;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v310, v24);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Clear(&v305, v24);
  float v36 = (float)(int)v23;
  float v37 = cosf(6.2832 / (float)(int)v23);
  if (v21 > 1)
  {
    uint64_t v38 = 0;
    float v39 = 1.0
        / (float)((float)((float)((float)(v37 + 5.0) + sqrtf((float)(v37 + 9.0) * (float)(v37 + 1.0))) * v36) * 0.0625);
    float v40 = 2.0 / (float)(v36 + 5.0);
    float v271 = 1.0 / (float)(v36 + 5.0);
    do
    {
      uint64_t v41 = v38 + 1;
      if (v38 + 1 == v23) {
        int v42 = 0;
      }
      else {
        int v42 = v38 + 1;
      }
      uint64_t v43 = &v284[2 * v38];
      int v45 = *v43;
      int v44 = v43[1];
      float v46 = *(float *)&v284[2 * v42];
      v300 = &v302;
      CMTime __p = 0;
      uint64_t v301 = 0x2800000004;
      __int32 v47 = v35->i32[v274];
      v303[0] = v36 / (float)(v36 + 5.0);
      __int32 v302 = v47;
      int v299 = 1;
      if (v47 == LODWORD(v46))
      {
        v303[0] = v40 + (float)(v36 / (float)(v36 + 5.0));
        uint64_t v48 = 1;
      }
      else
      {
        v303[2] = 2.0 / (float)(v36 + 5.0);
        uint64_t v48 = 2;
        v303[1] = v46;
        int v299 = 2;
      }
      uint64_t v49 = 0;
      while (SLODWORD(v303[v49 - 1]) != v45)
      {
        v49 += 2;
        if (2 * v48 == v49)
        {
          uint64_t v50 = &v303[2 * v48 - 1];
          *(_DWORD *)uint64_t v50 = v45;
          v50[1] = v40;
          int v299 = ++v48;
          goto LABEL_37;
        }
      }
      v303[v49] = v40 + v303[v49];
LABEL_37:
      uint64_t v51 = 0;
      while (SLODWORD(v303[v51 - 1]) != v44)
      {
        v51 += 2;
        if (2 * v48 == v51)
        {
          uint64_t v52 = &v303[2 * v48 - 1];
          *(_DWORD *)uint64_t v52 = v44;
          v52[1] = v271;
          int v299 = v48 + 1;
          goto LABEL_42;
        }
      }
      v303[v51] = v271 + v303[v51];
LABEL_42:
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, 1.0 / v36);
      __float2 v53 = __sincosf_stret((float)((float)(int)v38 * 6.2832) / v36);
      __float2 v54 = __sincosf_stret((float)((float)v42 * 6.2832) / v36);
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v39 * (float)((float)(v54.__cosval * 0.5) + (float)(v53.__cosval * 0.5)));
      OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v39 * (float)((float)(v54.__sinval * 0.5) + (float)(v53.__sinval * 0.5)));
      operator delete(__p);
      ++v38;
    }
    while (v41 != v23);
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v293, (int *)&v296);
  __float2 v55 = __sincosf_stret(v265 / v36);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v55.__cosval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v55.__sinval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v290, (int *)&v296);
  __float2 v56 = __sincosf_stret(v266 / v36);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v56.__cosval);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v56.__sinval);
  operator delete(v309);
  operator delete(v314);
  operator delete(v287);
  uint64_t v57 = v296;
  if ((int)v296 >= 1)
  {
    int v58 = v297;
    do
    {
      *v58 += a7;
      v58 += 2;
      --v57;
    }
    while (v57);
  }
  uint64_t v59 = v293;
  uint64_t v60 = v35;
  if ((int)v293 >= 1)
  {
    BOOL v61 = v294;
    do
    {
      *v61 += a7;
      v61 += 2;
      --v59;
    }
    while (v59);
  }
  uint64_t v62 = v290;
  if ((int)v290 >= 1)
  {
    unsigned int v63 = v291;
    do
    {
      *v63 += a7;
      v63 += 2;
      --v62;
    }
    while (v62);
  }
  uint64_t v64 = 0;
  v289[0] = vaddq_s32(*v35, vdupq_n_s32(a7));
  uint64_t v65 = v267[3];
  uint64_t v66 = v267[6];
  uint64_t v67 = v66 + 4 * *(int *)(v65 + 4 * ((2 * a3) | 1));
  uint64_t v68 = v267[36];
  uint64_t v69 = v267[33];
  uint64_t v70 = v267[39];
  uint64_t v71 = 4;
  do
  {
    uint64_t v72 = *(int *)(v67 + 4 * v64);
    uint64_t v73 = *(int *)(v69 + 8 * v72 + 4);
    unint64_t v74 = (_DWORD *)(v68 + 4 * v73);
    uint64_t v75 = v70 + 2 * v73;
    if (v64 == v270)
    {
      uint64_t v76 = *(unsigned int *)(v69 + 8 * v72);
      if ((int)v76 < 1)
      {
LABEL_58:
        LODWORD(v77) = -1;
      }
      else
      {
        uint64_t v77 = 0;
        while (v74[v77] != a3)
        {
          if (v76 == ++v77) {
            goto LABEL_58;
          }
        }
      }
      *((_DWORD *)v289 + v71) = *(_DWORD *)(v66
                                          + 4 * *(int *)(v65 + 8 * (int)v74[((int)v77 + 1) % (int)v76] + 4)
                                          + 4
                                          * ((*(_WORD *)(v75 + 2 * (((int)v77 + 1) % (int)v76)) - 1) & 3))
                              + a7;
      unint64_t v78 = (_DWORD *)(v66
                     + 4 * *(int *)(v65 + 8 * (int)v74[((int)v76 + (int)v77 - 1) % (int)v76] + 4)
                     + 4 * ((*(_WORD *)(v75 + 2 * (((int)v76 + (int)v77 - 1) % (int)v76)) + 1) & 3));
    }
    else
    {
      if (*v74 == a3)
      {
        char v79 = 0;
      }
      else if (v74[1] == a3)
      {
        char v79 = 1;
      }
      else if (v74[2] == a3)
      {
        char v79 = 2;
      }
      else if (v74[3] == a3)
      {
        char v79 = 3;
      }
      else
      {
        char v79 = -1;
      }
      uint64_t v80 = (v79 + 2) & 3;
      char v81 = *(_WORD *)(v75 + 2 * v80);
      uint64_t v82 = v66 + 4 * *(int *)(v65 + 8 * (int)v74[v80] + 4);
      int v83 = (_DWORD *)v289 + v71;
      unsigned int v84 = *(_DWORD *)(v82 + 4 * ((v81 + 2) & 3)) + a7;
      *int v83 = *(_DWORD *)(v82 + 4 * ((v81 + 1) & 3)) + a7;
      v83[1] = v84;
      unint64_t v78 = (_DWORD *)(v82 + 4 * ((v81 - 1) & 3));
    }
    *((_DWORD *)v289 + v71 + 2) = *v78 + a7;
    v71 += 3;
    ++v64;
  }
  while (v64 != 4);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v284, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v275, v268);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, 12.0);
  int v85 = *((_DWORD *)v289
        + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274]);
  int v86 = (int)v305;
  uint64_t v87 = v306;
  if ((int)v305 < 1)
  {
LABEL_75:
    int v90 = &v306[(int)v305];
    *(_DWORD *)int v90 = v85;
    *((_DWORD *)v90 + 1) = -1062557013;
    LODWORD(v305) = ++v86;
  }
  else
  {
    float v88 = (float *)v306 + 1;
    uint64_t v89 = v305;
    while (*((_DWORD *)v88 - 1) != v85)
    {
      v88 += 2;
      if (!--v89) {
        goto LABEL_75;
      }
    }
    *float v88 = *v88 + -5.3333;
  }
  int v91 = *((_DWORD *)v289
        + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 1]);
  if (v86 < 1)
  {
LABEL_81:
    int v94 = &v87[v86];
    *(_DWORD *)int v94 = v91;
    *((_DWORD *)v94 + 1) = -1070945621;
    LODWORD(v305) = ++v86;
  }
  else
  {
    uint64_t v92 = v86;
    int v93 = (float *)v87 + 1;
    while (*((_DWORD *)v93 - 1) != v91)
    {
      v93 += 2;
      if (!--v92) {
        goto LABEL_81;
      }
    }
    *int v93 = *v93 + -2.6667;
  }
  uint64_t v95 = OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 2];
  int v96 = *((_DWORD *)v289 + v95);
  if (v86 < 1)
  {
LABEL_87:
    int v99 = &v87[v86];
    *(_DWORD *)int v99 = v96;
    *((_DWORD *)v99 + 1) = -1087722837;
    LODWORD(v305) = ++v86;
  }
  else
  {
    uint64_t v97 = v86;
    uint64_t v98 = (float *)v87 + 1;
    while (*((_DWORD *)v98 - 1) != v96)
    {
      v98 += 2;
      if (!--v97) {
        goto LABEL_87;
      }
    }
    *uint64_t v98 = *v98 + -0.66667;
  }
  int v100 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 3]);
  if (v86 < 1)
  {
LABEL_93:
    float v103 = &v87[v86];
    *(_DWORD *)float v103 = v100;
    *((_DWORD *)v103 + 1) = -1079334229;
    LODWORD(v305) = ++v86;
  }
  else
  {
    uint64_t v101 = v86;
    int v102 = (float *)v87 + 1;
    while (*((_DWORD *)v102 - 1) != v100)
    {
      v102 += 2;
      if (!--v101) {
        goto LABEL_93;
      }
    }
    *int v102 = *v102 + -1.3333;
  }
  int v104 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 6]);
  if (v86 < 1)
  {
LABEL_99:
    __float2 v107 = &v87[v86];
    *(_DWORD *)__float2 v107 = v104;
    *((_DWORD *)v107 + 1) = -1096111445;
    LODWORD(v305) = ++v86;
  }
  else
  {
    uint64_t v105 = v86;
    uint64_t v106 = (float *)v87 + 1;
    while (*((_DWORD *)v106 - 1) != v104)
    {
      v106 += 2;
      if (!--v105) {
        goto LABEL_99;
      }
    }
    *uint64_t v106 = *v106 + -0.33333;
  }
  int v108 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 7]);
  uint64_t v272 = v95;
  if (v86 < 1)
  {
LABEL_105:
    uint64_t v111 = &v87[v86];
    *(_DWORD *)uint64_t v111 = v108;
    *((_DWORD *)v111 + 1) = -1087722837;
    LODWORD(v305) = v86 + 1;
  }
  else
  {
    uint64_t v109 = v86;
    uint64_t v110 = (float *)v87 + 1;
    while (*((_DWORD *)v110 - 1) != v108)
    {
      v110 += 2;
      if (!--v109) {
        goto LABEL_105;
      }
    }
    *uint64_t v110 = *v110 + -0.66667;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v293, -6.0);
  int v112 = v299;
  uint64_t v113 = v300;
  if (v299 < 1)
  {
LABEL_111:
    uint64_t v116 = &v300[2 * v299];
    *uint64_t v116 = v85;
    v116[1] = 1076538027;
    int v299 = ++v112;
  }
  else
  {
    uint64_t v114 = (float *)(v300 + 1);
    uint64_t v115 = v299;
    while (*((_DWORD *)v114 - 1) != v85)
    {
      v114 += 2;
      if (!--v115) {
        goto LABEL_111;
      }
    }
    *uint64_t v114 = *v114 + 2.6667;
  }
  if (v112 < 1)
  {
LABEL_117:
    __float2 v119 = &v113[2 * v112];
    *__float2 v119 = v91;
    v119[1] = 1068149419;
    int v299 = ++v112;
  }
  else
  {
    uint64_t v117 = v112;
    uint64_t v118 = (float *)(v113 + 1);
    while (*((_DWORD *)v118 - 1) != v91)
    {
      v118 += 2;
      if (!--v117) {
        goto LABEL_117;
      }
    }
    *uint64_t v118 = *v118 + 1.3333;
  }
  if (v112 < 1)
  {
LABEL_123:
    unint64_t v122 = &v113[2 * v112];
    *unint64_t v122 = v96;
    v122[1] = 1051372203;
    int v299 = ++v112;
  }
  else
  {
    uint64_t v120 = v112;
    __float2 v121 = (float *)(v113 + 1);
    while (*((_DWORD *)v121 - 1) != v96)
    {
      v121 += 2;
      if (!--v120) {
        goto LABEL_123;
      }
    }
    *__float2 v121 = *v121 + 0.33333;
  }
  if (v112 < 1)
  {
LABEL_129:
    uint64_t v125 = &v113[2 * v112];
    *uint64_t v125 = v100;
    v125[1] = 1059760811;
    int v299 = ++v112;
  }
  else
  {
    uint64_t v123 = v112;
    uint64_t v124 = (float *)(v113 + 1);
    while (*((_DWORD *)v124 - 1) != v100)
    {
      v124 += 2;
      if (!--v123) {
        goto LABEL_129;
      }
    }
    *uint64_t v124 = *v124 + 0.66667;
  }
  if (v112 < 1)
  {
LABEL_135:
    uint64_t v128 = &v113[2 * v112];
    *uint64_t v128 = v104;
    v128[1] = 1059760811;
    int v299 = ++v112;
  }
  else
  {
    uint64_t v126 = v112;
    unint64_t v127 = (float *)(v113 + 1);
    while (*((_DWORD *)v127 - 1) != v104)
    {
      v127 += 2;
      if (!--v126) {
        goto LABEL_135;
      }
    }
    *unint64_t v127 = *v127 + 0.66667;
  }
  if (v112 < 1)
  {
LABEL_141:
    uint64_t v131 = &v113[2 * v112];
    *uint64_t v131 = v108;
    v131[1] = 1068149419;
    int v299 = v112 + 1;
  }
  else
  {
    uint64_t v129 = v112;
    int v130 = (float *)(v113 + 1);
    while (*((_DWORD *)v130 - 1) != v108)
    {
      v130 += 2;
      if (!--v129) {
        goto LABEL_141;
      }
    }
    *int v130 = *v130 + 1.3333;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v284, (int *)&v305);
  int v132 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 8]);
  int v133 = (int)v284;
  uint64_t v134 = v285;
  if ((int)v284 < 1)
  {
LABEL_147:
    float v137 = (_DWORD *)(v285 + 8 * (int)v284);
    _DWORD *v137 = v132;
    v137[1] = 1065353216;
    LODWORD(v284) = ++v133;
  }
  else
  {
    float v135 = (float *)(v285 + 4);
    uint64_t v136 = v284;
    while (*((_DWORD *)v135 - 1) != v132)
    {
      v135 += 2;
      if (!--v136) {
        goto LABEL_147;
      }
    }
    *float v135 = *v135 + 1.0;
  }
  if (v133 < 1)
  {
LABEL_153:
    int v140 = (_DWORD *)(v134 + 8 * v133);
    _DWORD *v140 = v104;
    v140[1] = -1082130432;
    LODWORD(v284) = v133 + 1;
  }
  else
  {
    uint64_t v138 = v133;
    float v139 = (float *)(v134 + 4);
    while (*((_DWORD *)v139 - 1) != v104)
    {
      v139 += 2;
      if (!--v138) {
        goto LABEL_153;
      }
    }
    float *v139 = *v139 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, 12.0);
  int v141 = v281;
  uint64_t v142 = v282;
  if ((int)v281 < 1)
  {
LABEL_159:
    uint64_t v145 = (_DWORD *)(v282 + 8 * (int)v281);
    _DWORD *v145 = v85;
    v145[1] = -1062557013;
    unsigned int v281 = ++v141;
  }
  else
  {
    float v143 = (float *)(v282 + 4);
    uint64_t v144 = v281;
    while (*((_DWORD *)v143 - 1) != v85)
    {
      v143 += 2;
      if (!--v144) {
        goto LABEL_159;
      }
    }
    float *v143 = *v143 + -5.3333;
  }
  if (v141 < 1)
  {
LABEL_165:
    int v148 = (_DWORD *)(v142 + 8 * v141);
    _DWORD *v148 = v91;
    v148[1] = -1079334229;
    unsigned int v281 = ++v141;
  }
  else
  {
    uint64_t v146 = v141;
    char v147 = (float *)(v142 + 4);
    while (*((_DWORD *)v147 - 1) != v91)
    {
      v147 += 2;
      if (!--v146) {
        goto LABEL_165;
      }
    }
    float *v147 = *v147 + -1.3333;
  }
  if (v141 < 1)
  {
LABEL_171:
    unint64_t v151 = (_DWORD *)(v142 + 8 * v141);
    *unint64_t v151 = v96;
    v151[1] = -1087722837;
    unsigned int v281 = ++v141;
  }
  else
  {
    uint64_t v149 = v141;
    float v150 = (float *)(v142 + 4);
    while (*((_DWORD *)v150 - 1) != v96)
    {
      v150 += 2;
      if (!--v149) {
        goto LABEL_171;
      }
    }
    *float v150 = *v150 + -0.66667;
  }
  if (v141 < 1)
  {
LABEL_177:
    __int32 v154 = (_DWORD *)(v142 + 8 * v141);
    *__int32 v154 = v100;
    v154[1] = -1070945621;
    unsigned int v281 = ++v141;
  }
  else
  {
    uint64_t v152 = v141;
    uint64_t v153 = (float *)(v142 + 4);
    while (*((_DWORD *)v153 - 1) != v100)
    {
      v153 += 2;
      if (!--v152) {
        goto LABEL_177;
      }
    }
    *uint64_t v153 = *v153 + -2.6667;
  }
  int v155 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 4]);
  if (v141 < 1)
  {
LABEL_183:
    uint64_t v158 = (_DWORD *)(v142 + 8 * v141);
    *uint64_t v158 = v155;
    v158[1] = -1096111445;
    unsigned int v281 = ++v141;
  }
  else
  {
    uint64_t v156 = v141;
    uint64_t v157 = (float *)(v142 + 4);
    while (*((_DWORD *)v157 - 1) != v155)
    {
      v157 += 2;
      if (!--v156) {
        goto LABEL_183;
      }
    }
    *uint64_t v157 = *v157 + -0.33333;
  }
  int v159 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 15]);
  if (v141 < 1)
  {
LABEL_189:
    uint64_t v162 = (_DWORD *)(v142 + 8 * v141);
    *uint64_t v162 = v159;
    v162[1] = -1087722837;
    unsigned int v281 = v141 + 1;
  }
  else
  {
    uint64_t v160 = v141;
    int v161 = (float *)(v142 + 4);
    while (*((_DWORD *)v161 - 1) != v159)
    {
      v161 += 2;
      if (!--v160) {
        goto LABEL_189;
      }
    }
    *int v161 = *v161 + -0.66667;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v290, -6.0);
  int v163 = v278;
  uint64_t v164 = v279;
  if (v278 < 1)
  {
LABEL_195:
    uint64_t v167 = (_DWORD *)(v279 + 8 * v278);
    *uint64_t v167 = v85;
    v167[1] = 1076538027;
    int v278 = ++v163;
  }
  else
  {
    uint64_t v165 = (float *)(v279 + 4);
    uint64_t v166 = v278;
    while (*((_DWORD *)v165 - 1) != v85)
    {
      v165 += 2;
      if (!--v166) {
        goto LABEL_195;
      }
    }
    *uint64_t v165 = *v165 + 2.6667;
  }
  if (v163 < 1)
  {
LABEL_201:
    unint64_t v170 = (_DWORD *)(v164 + 8 * v163);
    _DWORD *v170 = v91;
    v170[1] = 1059760811;
    int v278 = ++v163;
  }
  else
  {
    uint64_t v168 = v163;
    int v169 = (float *)(v164 + 4);
    while (*((_DWORD *)v169 - 1) != v91)
    {
      v169 += 2;
      if (!--v168) {
        goto LABEL_201;
      }
    }
    *int v169 = *v169 + 0.66667;
  }
  if (v163 < 1)
  {
LABEL_207:
    uint64_t v173 = (_DWORD *)(v164 + 8 * v163);
    *uint64_t v173 = v96;
    v173[1] = 1051372203;
    int v278 = ++v163;
  }
  else
  {
    uint64_t v171 = v163;
    uint64_t v172 = (float *)(v164 + 4);
    while (*((_DWORD *)v172 - 1) != v96)
    {
      v172 += 2;
      if (!--v171) {
        goto LABEL_207;
      }
    }
    *uint64_t v172 = *v172 + 0.33333;
  }
  if (v163 < 1)
  {
LABEL_213:
    uint64_t v176 = (_DWORD *)(v164 + 8 * v163);
    *uint64_t v176 = v100;
    v176[1] = 1068149419;
    int v278 = ++v163;
  }
  else
  {
    uint64_t v174 = v163;
    uint64_t v175 = (float *)(v164 + 4);
    while (*((_DWORD *)v175 - 1) != v100)
    {
      v175 += 2;
      if (!--v174) {
        goto LABEL_213;
      }
    }
    *uint64_t v175 = *v175 + 1.3333;
  }
  if (v163 < 1)
  {
LABEL_219:
    uint64_t v179 = (_DWORD *)(v164 + 8 * v163);
    *uint64_t v179 = v155;
    v179[1] = 1059760811;
    int v278 = ++v163;
  }
  else
  {
    uint64_t v177 = v163;
    int v178 = (float *)(v164 + 4);
    while (*((_DWORD *)v178 - 1) != v155)
    {
      v178 += 2;
      if (!--v177) {
        goto LABEL_219;
      }
    }
    *int v178 = *v178 + 0.66667;
  }
  if (v163 < 1)
  {
LABEL_225:
    uint64_t v182 = (_DWORD *)(v164 + 8 * v163);
    *uint64_t v182 = v159;
    v182[1] = 1068149419;
    int v278 = v163 + 1;
  }
  else
  {
    uint64_t v180 = v163;
    int v181 = (float *)(v164 + 4);
    while (*((_DWORD *)v181 - 1) != v159)
    {
      v181 += 2;
      if (!--v180) {
        goto LABEL_225;
      }
    }
    float *v181 = *v181 + 1.3333;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::operator=((int *)&v275, (int *)&v281);
  int v183 = *((_DWORD *)v289
         + OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::rotation[16 * v274 + 14]);
  int v184 = v275;
  uint64_t v185 = v276;
  if ((int)v275 < 1)
  {
LABEL_231:
    uint64_t v188 = (_DWORD *)(v276 + 8 * (int)v275);
    *uint64_t v188 = v183;
    v188[1] = 1065353216;
    unsigned int v275 = ++v184;
  }
  else
  {
    unsigned int v186 = (float *)(v276 + 4);
    uint64_t v187 = v275;
    while (*((_DWORD *)v186 - 1) != v183)
    {
      v186 += 2;
      if (!--v187) {
        goto LABEL_231;
      }
    }
    *unsigned int v186 = *v186 + 1.0;
  }
  if (v184 < 1)
  {
LABEL_237:
    uint64_t v191 = (_DWORD *)(v185 + 8 * v184);
    *uint64_t v191 = v155;
    v191[1] = -1082130432;
    unsigned int v275 = v184 + 1;
  }
  else
  {
    uint64_t v189 = v184;
    uint64_t v190 = (float *)(v185 + 4);
    while (*((_DWORD *)v190 - 1) != v155)
    {
      v190 += 2;
      if (!--v189) {
        goto LABEL_237;
      }
    }
    *uint64_t v190 = *v190 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v296, 36.0);
  int v192 = (int)v310;
  int v193 = v311;
  if ((int)v310 < 1)
  {
LABEL_243:
    int v196 = &v311[(int)v310];
    *(_DWORD *)int v196 = v85;
    *((_DWORD *)v196 + 1) = -1048576000;
    LODWORD(v31re::VariableStepTimer::setClock((uint64_t)this, 0) = ++v192;
  }
  else
  {
    BOOL v194 = (float *)v311 + 1;
    uint64_t v195 = v310;
    while (*((_DWORD *)v194 - 1) != v85)
    {
      v194 += 2;
      if (!--v195) {
        goto LABEL_243;
      }
    }
    *BOOL v194 = *v194 + -16.0;
  }
  if (v192 < 1)
  {
LABEL_249:
    uint64_t v199 = &v193[v192];
    *(_DWORD *)uint64_t v199 = v91;
    *((_DWORD *)v199 + 1) = -1065353216;
    LODWORD(v31re::VariableStepTimer::setClock((uint64_t)this, 0) = ++v192;
  }
  else
  {
    uint64_t v197 = v192;
    uint64_t v198 = (float *)v193 + 1;
    while (*((_DWORD *)v198 - 1) != v91)
    {
      v198 += 2;
      if (!--v197) {
        goto LABEL_249;
      }
    }
    *uint64_t v198 = *v198 + -4.0;
  }
  if (v192 < 1)
  {
LABEL_255:
    int v202 = &v193[v192];
    *(_DWORD *)int v202 = v100;
    *((_DWORD *)v202 + 1) = -1065353216;
    LODWORD(v31re::VariableStepTimer::setClock((uint64_t)this, 0) = v192 + 1;
  }
  else
  {
    uint64_t v200 = v192;
    int v201 = (float *)v193 + 1;
    while (*((_DWORD *)v201 - 1) != v100)
    {
      v201 += 2;
      if (!--v200) {
        goto LABEL_255;
      }
    }
    *int v201 = *v201 + -4.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v281, -4.0);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v305, -4.0);
  int v203 = *((_DWORD *)v289 + v272);
  int v204 = (int)v310;
  if ((int)v310 < 1)
  {
LABEL_261:
    uint64_t v207 = &v311[(int)v310];
    *(_DWORD *)uint64_t v207 = v203;
    *((_DWORD *)v207 + 1) = -1082130432;
    LODWORD(v31re::VariableStepTimer::setClock((uint64_t)this, 0) = v204 + 1;
  }
  else
  {
    unsigned int v205 = (float *)v311 + 1;
    uint64_t v206 = v310;
    while (*((_DWORD *)v205 - 1) != v203)
    {
      v205 += 2;
      if (!--v206) {
        goto LABEL_261;
      }
    }
    *unsigned int v205 = *v205 + -1.0;
  }
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v299, -1.0);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::AddWithWeight((OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v310, (const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *)&v278, -1.0);
  uint64_t v209 = *(void *)(a1 + 16);
  if ((v269 & 0x80000000) != 0)
  {
    int v213 = *(_DWORD *)(v209 + 20);
  }
  else
  {
    uint64_t v211 = v209 + 40;
    unsigned int v210 = *(uint64_t **)(v209 + 40);
    uint64_t v212 = *(void *)(v211 + 8) - (void)v210;
    if ((int)((unint64_t)v212 >> 3) < 1)
    {
      int v213 = 0;
    }
    else
    {
      int v213 = 0;
      uint64_t v214 = (int)(v212 >> 3);
      if (v214 <= 1) {
        uint64_t v214 = 1;
      }
      do
      {
        uint64_t v215 = *v210++;
        v213 += *(_DWORD *)(*(void *)(*(void *)(v215 + 456) + 8 * v269) + 16);
        --v214;
      }
      while (v214);
    }
  }
  unsigned int v216 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v35->i32[v274] + a7);
  int v217 = v270 + 1;
  uint64_t v218 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v35->i32[(v270 + 1) & 3] + a7);
  int v219 = v270 + 3;
  __int32 v273 = v60->i32[(v270 + 3) & 3];
  int v220 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v220 + 1;
  int v221 = 3 * v274;
  *((_DWORD *)&v289[1] + 3 * v274 + 2) = v220 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v305, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v208);
  v223 = *(void **)(a1 + 8);
  if (v223) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v223, v222);
  }
  int v224 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v224 + 1;
  int v225 = v224 + v213;
  if (v217 <= 0) {
    int v226 = -(-v217 & 3);
  }
  else {
    int v226 = (v270 + 1) & 3;
  }
  int v227 = 3 * v226;
  *((_DWORD *)&v289[1] + 3 * v226) = v225;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v299, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v222);
  uint64_t v229 = *(void **)(a1 + 8);
  if (v229) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v218, v229, v228);
  }
  int v230 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v230 + 1;
  *((_DWORD *)&v289[1] + v227 + 1) = v230 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v284, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v228);
  v232 = *(void **)(a1 + 8);
  if (v232) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v218, v232, v231);
  }
  int v233 = (OpenSubdiv::v3_1_1::Far::GregoryBasis *)(v273 + a7);
  int v234 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v234 + 1;
  *((_DWORD *)&v289[1] + v221) = v234 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v281, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v231);
  v236 = *(void **)(a1 + 8);
  if (v236) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v236, v235);
  }
  int v237 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v237 + 1;
  int v238 = v237 + v213;
  if (v219 <= 0) {
    int v239 = -(-v219 & 3);
  }
  else {
    int v239 = v219 & 3;
  }
  int v240 = 3 * v239;
  *((_DWORD *)&v289[1] + 3 * v239 + 2) = v238;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v278, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v235);
  v242 = *(void **)(a1 + 8);
  if (v242) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v233, v242, v241);
  }
  int v243 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v243 + 1;
  *((_DWORD *)&v289[1] + v240 + 1) = v243 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v275, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v241);
  int v245 = *(void **)(a1 + 8);
  if (v245) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v233, v245, v244);
  }
  int v246 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v246 + 1;
  *((_DWORD *)&v289[1] + v221 + 1) = v246 + v213;
  OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v310, *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)a1, v244);
  v248 = *(void **)(a1 + 8);
  if (v248) {
    OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(v216, v248, v247);
  }
  uint64_t v249 = 0;
  v250 = (void *)(a1 + 48);
  v251 = *(char **)(a1 + 40);
  do
  {
    uint64_t v252 = OpenSubdiv::v3_1_1::Far::EndCapBSplineBasisPatchFactory::getPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,int,OpenSubdiv::v3_1_1::Vtr::ConstArray<int>,int,int)::permuteRegular[v249];
    if ((unint64_t)v251 >= *v250)
    {
      v254 = *(char **)(a1 + 32);
      uint64_t v255 = (v251 - v254) >> 2;
      unint64_t v256 = v255 + 1;
      if ((unint64_t)(v255 + 1) >> 62) {
        abort();
      }
      uint64_t v257 = *v250 - (void)v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 48, v258);
        v254 = *(char **)(a1 + 32);
        v251 = *(char **)(a1 + 40);
      }
      else
      {
        v259 = 0;
      }
      v260 = &v259[4 * v255];
      *(_DWORD *)v260 = *((_DWORD *)v289 + v252);
      int v253 = v260 + 4;
      while (v251 != v254)
      {
        int v261 = *((_DWORD *)v251 - 1);
        v251 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *(void *)(a1 + 32) = v260;
      *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v253;
      *(void *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = &v259[4 * v258];
      if (v254) {
        operator delete(v254);
      }
    }
    else
    {
      *(_DWORD *)v251 = *((_DWORD *)v289 + v252);
      int v253 = v251 + 4;
    }
    *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v253;
    ++v249;
    v251 = v253;
  }
  while (v249 != 16);
  uint64_t v262 = *(int *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v262 + 1;
  uint64_t v263 = *(void *)(a1 + 32);
  operator delete(v277);
  operator delete(v280);
  operator delete(v283);
  operator delete(v288);
  operator delete(__p);
  operator delete(v309);
  operator delete(v314);
  operator delete(v292);
  operator delete(v295);
  operator delete(v298);
  return v263 + (v262 << 6);
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(OpenSubdiv::v3_1_1::Far::GregoryBasis *this, const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3)
{
  uint64_t v5 = *(unsigned int *)this;
  uint64_t v6 = (char *)a2 + 32;
  unint64_t v7 = *((void *)a2 + 4);
  uint64_t v8 = (char *)*((void *)a2 + 3);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = (char *)*((void *)a2 + 2);
    uint64_t v11 = (v8 - v10) >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
LABEL_53:
    }
      abort();
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      unsigned int v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v14);
      int v10 = (char *)*((void *)a2 + 2);
      uint64_t v8 = (char *)*((void *)a2 + 3);
    }
    else
    {
      unsigned int v15 = 0;
    }
    int v16 = &v15[4 * v11];
    int v17 = &v15[4 * v14];
    *(_DWORD *)int v16 = v5;
    uint64_t v9 = v16 + 4;
    while (v8 != v10)
    {
      int v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((void *)a2 + 2) = v16;
    *((void *)a2 + 3) = v9;
    *((void *)a2 + 4) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = v5;
    uint64_t v9 = v8 + 4;
  }
  *((void *)a2 + 3) = v9;
  if ((int)v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      int v20 = *(_DWORD *)(*((void *)this + 1) + 8 * i);
      int v22 = (char *)*((void *)a2 + 9);
      unint64_t v21 = *((void *)a2 + 10);
      if ((unint64_t)v22 >= v21)
      {
        unsigned int v24 = (char *)*((void *)a2 + 8);
        uint64_t v25 = (v22 - v24) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          goto LABEL_53;
        }
        uint64_t v27 = v21 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          __int32 v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)a2 + 80, v28);
          unsigned int v24 = (char *)*((void *)a2 + 8);
          int v22 = (char *)*((void *)a2 + 9);
        }
        else
        {
          __int32 v29 = 0;
        }
        __int32 v30 = &v29[4 * v25];
        *(_DWORD *)__int32 v30 = v20;
        uint64_t v23 = v30 + 4;
        while (v22 != v24)
        {
          int v31 = *((_DWORD *)v22 - 1);
          v22 -= 4;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *((void *)a2 + 8) = v30;
        *((void *)a2 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v23;
        *((void *)a2 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(_DWORD *)int v22 = v20;
        uint64_t v23 = v22 + 4;
      }
      *((void *)a2 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v23;
      int v32 = *(_DWORD *)(*((void *)this + 1) + 8 * i + 4);
      int v34 = (char *)*((void *)a2 + 12);
      unint64_t v33 = *((void *)a2 + 13);
      if ((unint64_t)v34 >= v33)
      {
        float v36 = (char *)*((void *)a2 + 11);
        uint64_t v37 = (v34 - v36) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          goto LABEL_53;
        }
        uint64_t v39 = v33 - (void)v36;
        if (v39 >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)a2 + 104, v40);
          float v36 = (char *)*((void *)a2 + 11);
          int v34 = (char *)*((void *)a2 + 12);
        }
        else
        {
          uint64_t v41 = 0;
        }
        int v42 = &v41[4 * v37];
        *(_DWORD *)int v42 = v32;
        int v35 = v42 + 4;
        while (v34 != v36)
        {
          int v43 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v42 - 1) = v43;
          v42 -= 4;
        }
        *((void *)a2 + 11) = v42;
        *((void *)a2 + 12) = v35;
        *((void *)a2 + 13) = &v41[4 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *(_DWORD *)int v34 = v32;
        int v35 = v34 + 4;
      }
      *((void *)a2 + 12) = v35;
    }
  }
}

void OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable(OpenSubdiv::v3_1_1::Far::GregoryBasis *this, void *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3)
{
  int v4 = (int)this;
  uint64_t v5 = (uint64_t)(a2 + 4);
  unint64_t v6 = a2[4];
  unint64_t v7 = (char *)a2[3];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (char *)a2[2];
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      goto LABEL_50;
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5, v13);
      uint64_t v9 = (char *)a2[2];
      unint64_t v7 = (char *)a2[3];
    }
    else
    {
      unint64_t v14 = 0;
    }
    unsigned int v15 = &v14[4 * v10];
    int v16 = &v14[4 * v13];
    *(_DWORD *)unsigned int v15 = 1;
    uint64_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    a2[2] = v15;
    a2[3] = v8;
    a2[4] = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v7 = 1;
    uint64_t v8 = v7 + 4;
  }
  unint64_t v18 = a2[10];
  a2[3] = v8;
  int v19 = (char *)a2[9];
  if ((unint64_t)v19 >= v18)
  {
    unint64_t v21 = (char *)a2[8];
    uint64_t v22 = (v19 - v21) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_50;
    }
    uint64_t v24 = v18 - (void)v21;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      unint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 10), v25);
      unint64_t v21 = (char *)a2[8];
      int v19 = (char *)a2[9];
    }
    else
    {
      unint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    unint64_t v28 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = v4;
    int v20 = v27 + 4;
    while (v19 != v21)
    {
      int v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    a2[8] = v27;
    a2[9] = v20;
    a2[10] = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)int v19 = v4;
    int v20 = v19 + 4;
  }
  unint64_t v30 = a2[13];
  a2[9] = v20;
  int v31 = (char *)a2[12];
  if ((unint64_t)v31 < v30)
  {
    *(_DWORD *)int v31 = 1065353216;
    int v32 = v31 + 4;
    goto LABEL_49;
  }
  unint64_t v33 = (char *)a2[11];
  uint64_t v34 = (v31 - v33) >> 2;
  unint64_t v35 = v34 + 1;
  if ((unint64_t)(v34 + 1) >> 62) {
LABEL_50:
  }
    abort();
  uint64_t v36 = v30 - (void)v33;
  if (v36 >> 1 > v35) {
    unint64_t v35 = v36 >> 1;
  }
  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v37 = v35;
  }
  if (v37)
  {
    unint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 13), v37);
    unint64_t v33 = (char *)a2[11];
    int v31 = (char *)a2[12];
  }
  else
  {
    unint64_t v38 = 0;
  }
  uint64_t v39 = &v38[4 * v34];
  unint64_t v40 = &v38[4 * v37];
  *(_DWORD *)uint64_t v39 = 1065353216;
  int v32 = v39 + 4;
  while (v31 != v33)
  {
    int v41 = *((_DWORD *)v31 - 1);
    v31 -= 4;
    *((_DWORD *)v39 - 1) = v41;
    v39 -= 4;
  }
  a2[11] = v39;
  a2[12] = v32;
  a2[13] = v40;
  if (v33) {
    operator delete(v33);
  }
LABEL_49:
  a2[12] = v32;
}

OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *OpenSubdiv::v3_1_1::Far::GregoryBasis::Point::Point(OpenSubdiv::v3_1_1::Far::GregoryBasis::Point *this, unsigned int a2)
{
  *(_DWORD *)this = 0;
  int v4 = (char *)this + 24;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 0x2800000000;
  *((void *)this + 43) = 0;
  if (!a2)
  {
    operator delete(0);
    int v5 = 40;
    goto LABEL_5;
  }
  if (a2 >= 0x29)
  {
    operator delete(0);
    *((void *)this + 1) = v4;
    *((_DWORD *)this + 5) = 40;
    int v4 = (char *)operator new(8 * a2);
    *((void *)this + 43) = v4;
    int v5 = a2;
LABEL_5:
    *((void *)this + 1) = v4;
    *((_DWORD *)this + 5) = v5;
  }
  *((_DWORD *)this + 4) = a2;
  return this;
}

OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::EndCapGregoryBasisPatchFactory(OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory *this, const OpenSubdiv::v3_1_1::Far::TopologyRefiner *a2, OpenSubdiv::v3_1_1::Far::StencilTable *a3, OpenSubdiv::v3_1_1::Far::StencilTable *a4, char a5)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = a2;
  *((unsigned char *)this + 24) = a5;
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v7 = **(int **)(*((void *)a2 + 11) + 24 * (((unint64_t)*((unsigned __int8 *)a2 + 8) >> 2) & 0xF));
  std::vector<int>::size_type v8 = 20 * v7;
  int v9 = 320 * v7;
  if (v9 >= 104857600) {
    int v10 = 104857600;
  }
  else {
    int v10 = v9;
  }
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 16), v8);
  std::vector<int>::reserve((std::vector<int> *)((char *)a3 + 64), v10);
  std::vector<float>::reserve((void **)a3 + 11, v10);
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    std::vector<int>::reserve((std::vector<int> *)(v11 + 16), v8);
    std::vector<int>::reserve((std::vector<int> *)(v11 + 64), v8);
    std::vector<float>::reserve((void **)(v11 + 88), v8);
  }
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  unsigned int v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  int v9 = 0;
  uint64_t v91 = *MEMORY[0x263EF8340];
  int v10 = (void *)(v1 + 56);
  uint64_t v11 = *(char **)(v1 + 48);
  do
  {
    if ((unint64_t)v11 >= *v10)
    {
      unint64_t v13 = *(char **)(v8 + 40);
      uint64_t v14 = (v11 - v13) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        goto LABEL_104;
      }
      uint64_t v16 = *v10 - (void)v13;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v10, v17);
        unint64_t v13 = *(char **)(v8 + 40);
        uint64_t v11 = *(char **)(v8 + 48);
      }
      else
      {
        unint64_t v18 = 0;
      }
      int v19 = &v18[4 * v14];
      *(_DWORD *)int v19 = -1;
      uint64_t v12 = v19 + 4;
      while (v11 != v13)
      {
        int v20 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v19 - 1) = v20;
        v19 -= 4;
      }
      *(void *)(v8 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v19;
      *(void *)(v8 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v12;
      *(void *)(v8 + 56) = &v18[4 * v17];
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v11 = -1;
      uint64_t v12 = v11 + 4;
    }
    *(void *)(v8 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v12;
    ++v9;
    uint64_t v11 = v12;
  }
  while (v9 != 20);
  uint64_t v21 = *(void *)(v8 + 40) + 80 * *(int *)(v8 + 32);
  uint64_t v22 = *(void *)(v8 + 16);
  if ((v3 & 0x80000000) != 0)
  {
    int v26 = *(_DWORD *)(v22 + 20);
  }
  else
  {
    uint64_t v24 = v22 + 40;
    unint64_t v23 = *(uint64_t **)(v22 + 40);
    uint64_t v25 = *(void *)(v24 + 8) - (void)v23;
    if ((int)((unint64_t)v25 >> 3) < 1)
    {
      int v26 = 0;
    }
    else
    {
      int v26 = 0;
      uint64_t v27 = (int)(v25 >> 3);
      if (v27 <= 1) {
        uint64_t v27 = 1;
      }
      do
      {
        uint64_t v28 = *v23++;
        v26 += *(_DWORD *)(*(void *)(*(void *)(v28 + 456) + 8 * v3) + 16);
        --v27;
      }
      while (v27);
    }
  }
  if (!*(unsigned char *)(v8 + 24)) {
    goto LABEL_69;
  }
  int v29 = *(_DWORD *)(v7 + 12);
  unsigned int v30 = v3;
  uint64_t v31 = *(void *)(v7 + 72) + 4 * *(int *)(*(void *)(v7 + 24) + 4 * ((2 * v5) | 1));
  OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceETags((void *)v7, v5, v89, v30);
  uint64_t v32 = 0;
  int v88 = v29 << 28;
  unint64_t v33 = OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::gregoryEdgeVerts;
  do
  {
    if ((v89[v32] & 2) != 0) {
      goto LABEL_51;
    }
    uint64_t v34 = *(int *)(v31 + 4 * v32);
    uint64_t v35 = *(void *)(v7 + 144);
    uint64_t v36 = *(unsigned int *)(v35 + 8 * v34);
    if ((int)v36 < 1)
    {
LABEL_34:
      int v39 = 0;
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = *(void *)(v7 + 168) + 4 * *(int *)(v35 + 4 * (int)((2 * v34) | 1));
      while (*(_DWORD *)(v38 + 4 * v37) != v5)
      {
        if (v36 == ++v37) {
          goto LABEL_34;
        }
      }
      int v39 = *(_DWORD *)(v38 + 4 * (((int)v37 + 1) % (int)v36));
    }
    if (v39 == -1 || v39 >= v5) {
      goto LABEL_51;
    }
    unint64_t v40 = *(unsigned char **)(v8 + 64);
    int v41 = *(unsigned char **)(v8 + 72);
    if (v40 == v41) {
      break;
    }
    int v42 = (_DWORD *)(*(void *)(v7 + 72) + 4 * *(int *)(*(void *)(v7 + 24) + 4 * ((2 * v39) | 1)));
    if (*v42 == v34)
    {
      uint64_t v43 = 0;
    }
    else if (v42[1] == v34)
    {
      uint64_t v43 = 1;
    }
    else if (v42[2] == v34)
    {
      uint64_t v43 = 2;
    }
    else
    {
      uint64_t v43 = v42[3] == v34 ? 3 : -1;
    }
    __key[0] = v39 | v88;
    int v44 = bsearch(__key, v40, (v41 - v40) >> 2, 4uLL, (int (__cdecl *)(const void *, const void *))OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::LevelAndFaceIndex::compare);
    if (!v44) {
      break;
    }
    uint64_t v45 = *(void *)(v8 + 40)
        + ((uint64_t)((unint64_t)(5 * (((unint64_t)v44 - *(void *)(v8 + 64)) >> 2)) << 34) >> 30);
    float v46 = &OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::gregoryEdgeVerts[4 * v43];
    for (uint64_t i = 3; i != -1; --i)
    {
      uint64_t v48 = *v46++;
      *(_DWORD *)(v21 + 4 * v33[i]) = *(_DWORD *)(v45 + 4 * v48);
    }
LABEL_51:
    ++v32;
    v33 += 4;
  }
  while (v32 != 4);
  int v49 = v88 | v5;
  unint64_t v50 = *(void *)(v8 + 80);
  uint64_t v51 = *(int **)(v8 + 72);
  if ((unint64_t)v51 < v50)
  {
    int *v51 = v49;
    uint64_t v52 = v51 + 1;
    goto LABEL_68;
  }
  __float2 v53 = *(int **)(v8 + 64);
  uint64_t v54 = v51 - v53;
  unint64_t v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 62) {
LABEL_104:
  }
    abort();
  uint64_t v56 = v50 - (void)v53;
  if (v56 >> 1 > v55) {
    unint64_t v55 = v56 >> 1;
  }
  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v57 = v55;
  }
  if (v57)
  {
    int v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v8 + 80, v57);
    __float2 v53 = *(int **)(v8 + 64);
    uint64_t v51 = *(int **)(v8 + 72);
  }
  else
  {
    int v58 = 0;
  }
  uint64_t v59 = (int *)&v58[4 * v54];
  uint64_t v60 = &v58[4 * v57];
  *uint64_t v59 = v49;
  uint64_t v52 = v59 + 1;
  while (v51 != v53)
  {
    int v61 = *--v51;
    *--uint64_t v59 = v61;
  }
  *(void *)(v8 + 64) = v59;
  *(void *)(v8 + 72) = v52;
  *(void *)(v8 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v60;
  if (v53) {
    operator delete(v53);
  }
LABEL_68:
  *(void *)(v8 + 72) = v52;
LABEL_69:
  uint64_t v62 = 0;
  unsigned int v63 = __key;
  uint64_t v64 = v21;
  do
  {
    for (uint64_t j = 0; j != 5; ++j)
    {
      if (*(_DWORD *)(v64 + 4 * j) == -1)
      {
        *(_DWORD *)(v64 + 4 * j) = *(_DWORD *)(v8 + 28) + v26;
        ++*(_DWORD *)(v8 + 28);
        char v66 = 1;
      }
      else
      {
        char v66 = 0;
      }
      *((unsigned char *)v63 + j) = v66;
    }
    ++v62;
    unsigned int v63 = (_DWORD *)((char *)v63 + 5);
    v64 += 20;
  }
  while (v62 != 4);
  OpenSubdiv::v3_1_1::Far::GregoryBasis::ProtoBasis::ProtoBasis((uint64_t)v89);
  uint64_t v68 = 0;
  uint64_t v69 = (char *)__key + 2;
  uint64_t v70 = 7040;
  uint64_t v71 = 5632;
  uint64_t v72 = 4224;
  do
  {
    if (*(v69 - 2))
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v89[v68], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v67);
      uint64_t v73 = *(void **)(v8 + 8);
      if (v73) {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v89[v70], v73, v67);
      }
    }
    if (*(v69 - 1))
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v89[v68 + 1408], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v67);
      unint64_t v74 = *(void **)(v8 + 8);
      if (v74) {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v89[v70], v74, v67);
      }
    }
    if (*v69)
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v89[v68 + 2816], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v67);
      uint64_t v75 = *(void **)(v8 + 8);
      if (v75) {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v89[v70], v75, v67);
      }
    }
    if (v69[1])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v89[v72], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v67);
      uint64_t v76 = *(void **)(v8 + 8);
      if (v76) {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v89[v70], v76, v67);
      }
    }
    if (v69[2])
    {
      OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)&v89[v71], *(const OpenSubdiv::v3_1_1::Far::GregoryBasis::Point **)v8, v67);
      uint64_t v77 = *(void **)(v8 + 8);
      if (v77) {
        OpenSubdiv::v3_1_1::Far::GregoryBasis::AppendToStencilTable((OpenSubdiv::v3_1_1::Far::GregoryBasis *)*(unsigned int *)&v89[v70], v77, v67);
      }
    }
    v69 += 5;
    v68 += 352;
    v70 += 4;
    v71 += 352;
    v72 += 352;
  }
  while (v68 != 1408);
  for (uint64_t k = 0; k != -1408; k -= 352)
  {
    char v79 = &v89[k];
    operator delete(*(void **)&v89[k + 7032]);
    *((void *)v79 + 837) = &v89[k + 6712];
    *((_DWORD *)v79 + 1677) = 40;
  }
  for (uint64_t m = 0; m != -1408; m -= 352)
  {
    char v81 = &v89[m];
    operator delete(*(void **)&v89[m + 5624]);
    *((void *)v81 + 661) = &v89[m + 5304];
    *((_DWORD *)v81 + 1325) = 40;
  }
  for (uint64_t n = 0; n != -1408; n -= 352)
  {
    int v83 = &v89[n];
    operator delete(*(void **)&v89[n + 4216]);
    *((void *)v83 + 485) = v83 + 3896;
    *((_DWORD *)v83 + 973) = 40;
  }
  uint64_t v84 = 1408;
  do
  {
    int v85 = &v89[v84];
    operator delete(*(void **)&v89[v84 + 1400]);
    *((void *)v85 + 133) = v85 + 1080;
    *((_DWORD *)v85 + 26re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 40;
    v84 -= 352;
  }
  while (v84);
  uint64_t v86 = 1408;
  do
  {
    operator delete(*(void **)&v89[v86 - 8]);
    *(void *)&v89[v86 - 344] = &v89[v86 - 328];
    *(_DWORD *)&v89[v86 - 332] = 40;
    v86 -= 352;
  }
  while (v86);
  ++*(_DWORD *)(v8 + 32);
  return v21;
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapGregoryBasisPatchFactory::GetPatchPoints(OpenSubdiv::v3_1_1::Vtr::internal::Level const*,int,OpenSubdiv::v3_1_1::Vtr::internal::Level::VSpan const*,int,int)::LevelAndFaceIndex::compare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void OpenSubdiv::v3_1_1::Vtr::internal::SparseSelector::selectFace(OpenSubdiv::v3_1_1::Vtr::internal::Refinement **this, int a2)
{
  if (!*((unsigned char *)this + 8))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::Refinement::initializeSparseSelectionTags(*this);
    *((unsigned char *)this + 8) = 1;
  }
  uint64_t v4 = *((void *)*this + 51);
  if ((*(unsigned char *)(v4 + a2) & 1) == 0)
  {
    *(unsigned char *)(v4 + a2) |= 1u;
    int v5 = (void *)*((void *)*this + 1);
    uint64_t v6 = v5[3];
    uint64_t v7 = *(unsigned int *)(v6 + 8 * a2);
    if ((int)v7 >= 1)
    {
      uint64_t v8 = *(int *)(v6 + 8 * a2 + 4);
      int v9 = (int *)(v5[9] + 4 * v8);
      int v10 = (int *)(v5[6] + 4 * v8);
      do
      {
        uint64_t v11 = *v9++;
        *(unsigned char *)(*((void *)*this + 54) + v11) |= 1u;
        uint64_t v12 = *v10++;
        *(unsigned char *)(*((void *)*this + 57) + v12) |= 1u;
        --v7;
      }
      while (v7);
    }
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::~QuadRefinement(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Refinement::~Refinement(this);
  JUMPOUT(0x237DBCBD0);
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::allocateParentChildIndices(std::vector<int> *this)
{
  std::vector<int>::pointer end = this->__end_;
  uint64_t v3 = *((void *)end + 7) - *((void *)end + 6);
  uint64_t v4 = *((void *)end + 10) - *((void *)end + 9);
  uint64_t v5 = *((void *)end + 16) - *((void *)end + 15);
  std::vector<int>::size_type v6 = *end;
  std::vector<int>::size_type v7 = end[1];
  std::vector<int>::size_type v8 = end[2];
  std::vector<int>::value_type __x = 0;
  int v9 = (int *)*((void *)end + 3);
  uint64_t v10 = (*((void *)end + 4) - (void)v9) >> 2;
  this[3].__end_cap_.__value_ = v9;
  LODWORD(this[4].__begin_) = v10;
  uint64_t v11 = (int *)*((void *)end + 3);
  uint64_t v12 = (*((void *)end + 4) - (void)v11) >> 2;
  this[4].__end_ = v11;
  LODWORD(this[4].__end_cap_.__value_) = v12;
  std::vector<unsigned int>::resize(this + 5, (int)(v3 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 6, (int)(v4 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 8, (int)(v5 >> 2), &__x);
  std::vector<unsigned int>::resize(this + 7, v6, &__x);
  std::vector<unsigned int>::resize(this + 9, v7, &__x);
  std::vector<unsigned int>::resize(this + 10, v8, &__x);
}

uint64_t OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  unsigned int v2 = (std::vector<int> *)*((void *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(this);
    unsigned int v2 = (std::vector<int> *)*((void *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 2, 4 * SLODWORD(v2->__begin_));
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t result = *(unsigned int *)v3;
  if ((int)result >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3[3];
    uint64_t v7 = v3[6];
    uint64_t v8 = v3[9];
    uint64_t v9 = *((void *)this + 11);
    uint64_t v10 = *((void *)this + 15);
    do
    {
      uint64_t v11 = *(unsigned int *)(v6 + 8 * v5);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (8 * v5) | 4;
        uint64_t v14 = *(int *)(v6 + v13);
        uint64_t v15 = v7 + 4 * v14;
        uint64_t v16 = v8 + 4 * v14;
        uint64_t v17 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          int v18 = *(_DWORD *)(v17 + 4 * v12);
          if (v18 != -1)
          {
            if (v12) {
              int v19 = v12;
            }
            else {
              int v19 = v11;
            }
            int v20 = *(_DWORD *)(*((void *)this + 21) + 4 * v5);
            LODWORD(v21) = v19 - 1;
            uint64_t v22 = *((void *)this + 27);
            int v23 = *(_DWORD *)(v22 + 4 * *(int *)(v16 + 4 * (v19 - 1)));
            int v24 = *(_DWORD *)(*((void *)this + 30) + 4 * *(int *)(v15 + 4 * v12));
            int v25 = *(_DWORD *)(v22 + 4 * *(int *)(v16 + 4 * v12));
            int v26 = (_DWORD *)(*(void *)(*((void *)this + 2) + 48)
                           + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v18) | 1)));
            if (v11 == 4)
            {
              uint64_t v21 = (int)v21;
              LODWORD(v27) = v19 - 2;
              if (!v21) {
                LODWORD(v27) = 3;
              }
              v26[v12] = v24;
              if (v27) {
                int v28 = v27 - 1;
              }
              else {
                int v28 = 3;
              }
              v26[v28] = v25;
              uint64_t v27 = (int)v27;
            }
            else
            {
              *int v26 = v24;
              v26[1] = v25;
              uint64_t v27 = 2;
              uint64_t v21 = 3;
            }
            v26[v27] = v20;
            v26[v21] = v23;
          }
          ++v12;
        }
        while (v11 != v12);
        uint64_t result = *(unsigned int *)v3;
      }
      ++v5;
    }
    while (v5 < (int)result);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 24), 2 * **((int **)this + 2));
  unsigned int v2 = (int *)*((void *)this + 2);
  if (*v2 >= 1)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (_DWORD *)(*((void *)v2 + 3) + 4);
    do
    {
      *(v5 - 1) = 4;
      *uint64_t v5 = v3;
      ++v4;
      v3 += 4;
      v5 += 2;
    }
    while (v4 < *v2);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  unsigned int v2 = (std::vector<int> *)*((void *)this + 2);
  if (v2[1].__end_ == v2[1].__begin_)
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateFaceVertexCountsAndOffsets(this);
    unsigned int v2 = (std::vector<int> *)*((void *)this + 2);
  }
  std::vector<unsigned int>::resize(v2 + 3, 4 * SLODWORD(v2->__begin_));
  uint64_t v3 = *((void *)this + 1);
  int v4 = *(_DWORD *)v3;
  if (*(int *)v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v3 + 24);
    uint64_t v7 = *(void *)(v3 + 48);
    uint64_t v8 = *(void *)(v3 + 72);
    uint64_t v9 = *((void *)this + 11);
    uint64_t v10 = *((void *)this + 15);
    uint64_t v11 = *((void *)this + 13);
    uint64_t v12 = *((void *)this + 18);
    do
    {
      uint64_t v13 = *(unsigned int *)(v6 + 8 * v5);
      if ((int)v13 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = (8 * v5) | 4;
        uint64_t v16 = *(int *)(v6 + v15);
        uint64_t v17 = v7 + 4 * v16;
        uint64_t v18 = v8 + 4 * v16;
        uint64_t v19 = v10 + 4 * *(int *)(v9 + v15);
        uint64_t v20 = v12 + 4 * *(int *)(v11 + v15);
        do
        {
          int v21 = *(_DWORD *)(v19 + 4 * v14);
          if (v21 != -1)
          {
            if (v14) {
              int v22 = v14;
            }
            else {
              int v22 = v13;
            }
            LODWORD(v23) = v22 - 1;
            uint64_t v24 = *(int *)(v18 + 4 * (v22 - 1));
            uint64_t v25 = *(void *)(v3 + 120);
            int v26 = (_DWORD *)(v25 + 8 * v24);
            uint64_t v27 = *(int *)(v18 + 4 * v14);
            int v28 = *(_DWORD *)(v17 + 4 * v14);
            int v29 = (_DWORD *)(v25 + 8 * v27);
            BOOL v31 = *v26 == v26[1] || *v26 != v28;
            BOOL v33 = *v29 != v29[1] && *v29 != v28;
            uint64_t v34 = *((void *)this + 24);
            int v35 = *(_DWORD *)(v34 + 8 * v24 + 4 * v31);
            int v36 = *(_DWORD *)(v34 + 8 * v27 + 4 * v33);
            int v37 = *(_DWORD *)(v20 + 4 * (int)v23);
            int v38 = *(_DWORD *)(v20 + 4 * v14);
            int v39 = (_DWORD *)(*(void *)(*((void *)this + 2) + 72)
                           + 4 * *(int *)(*(void *)(*((void *)this + 2) + 24) + 4 * ((2 * v21) | 1)));
            if (v13 == 4)
            {
              uint64_t v23 = (int)v23;
              LODWORD(v4re::VariableStepTimer::setClock((uint64_t)this, 0) = v22 - 2;
              if (!v23) {
                LODWORD(v4re::VariableStepTimer::setClock((uint64_t)this, 0) = 3;
              }
              v39[v14] = v36;
              if (v40) {
                int v41 = v40 - 1;
              }
              else {
                int v41 = 3;
              }
              v39[v41] = v38;
              uint64_t v40 = (int)v40;
            }
            else
            {
              *int v39 = v36;
              v39[1] = v38;
              uint64_t v40 = 2;
              uint64_t v23 = 3;
            }
            v39[v40] = v37;
            v39[v23] = v35;
          }
          ++v14;
        }
        while (v13 != v14);
        int v4 = *(_DWORD *)v3;
      }
      ++v5;
    }
    while (v5 < v4);
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateEdgeVertexRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 120), 2 * *(int *)(*((void *)this + 2) + 4));
  uint64_t v2 = *((void *)this + 1);
  int v3 = *(_DWORD *)v2;
  if (*(int *)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v6 = *(void *)(v2 + 72);
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = *((void *)this + 18);
    do
    {
      uint64_t v9 = *(unsigned int *)(v5 + 8 * v4);
      if ((int)v9 >= 1)
      {
        uint64_t v10 = (8 * v4) | 4;
        uint64_t v11 = (int *)(v6 + 4 * *(int *)(v5 + v10));
        uint64_t v12 = (int *)(v8 + 4 * *(int *)(v7 + v10));
        do
        {
          uint64_t v14 = *v12++;
          uint64_t v13 = v14;
          if (v14 != -1)
          {
            uint64_t v15 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v13);
            *uint64_t v15 = *(_DWORD *)(*((void *)this + 21) + 4 * v4);
            v15[1] = *(_DWORD *)(*((void *)this + 27) + 4 * *v11);
          }
          ++v11;
          --v9;
        }
        while (v9);
        int v3 = *(_DWORD *)v2;
      }
      ++v4;
    }
    while (v4 < v3);
  }
  if (*(int *)(v2 + 4) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(v2 + 120);
    uint64_t v18 = *((void *)this + 24);
    do
    {
      uint64_t v19 = 0;
      char v20 = 1;
      do
      {
        char v21 = v20;
        uint64_t v22 = *(int *)(v18 + 8 * v16 + 4 * v19);
        if (v22 != -1)
        {
          uint64_t v23 = (_DWORD *)(*(void *)(*((void *)this + 2) + 120) + 8 * v22);
          *uint64_t v23 = *(_DWORD *)(*((void *)this + 27) + 4 * v16);
          v23[1] = *(_DWORD *)(*((void *)this + 30) + 4 * *(int *)(v17 + 8 * v16 + 4 * v19));
        }
        char v20 = 0;
        uint64_t v19 = 1;
      }
      while ((v21 & 1) != 0);
      ++v16;
    }
    while (v16 < *(int *)(v2 + 4));
  }
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateEdgeFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  int v2 = 2
     * (((*(void *)(*((void *)this + 1) + 176) - *(void *)(*((void *)this + 1) + 168)) >> 2)
      + ((*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 2));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 144), 2 * *(int *)(*((void *)this + 2) + 4));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 168), v2);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 192, v2);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v4 + 16);
  int v5 = *(_DWORD *)v4;
  if (*(int *)v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 11);
    uint64_t v8 = *((void *)this + 15);
    uint64_t v9 = *((void *)this + 13);
    uint64_t v10 = *((void *)this + 18);
    do
    {
      uint64_t v11 = *(unsigned int *)(v7 + 8 * v6);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (8 * v6) | 4;
        uint64_t v14 = v8 + 4 * *(int *)(v7 + v13);
        uint64_t v15 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          uint64_t v16 = *(int *)(v15 + 4 * v12);
          if (v16 == -1)
          {
            ++v12;
          }
          else
          {
            uint64_t v17 = *(void *)(v3 + 144);
            uint64_t v18 = (_DWORD *)(v17 + 8 * v16);
            *uint64_t v18 = 2;
            if (v16) {
              int v19 = *(v18 - 1) + *(v18 - 2);
            }
            else {
              int v19 = 0;
            }
            int v20 = 2 * v16;
            v18[1] = v19;
            int v21 = *(_DWORD *)(v3 + 16);
            if (v21 <= 2) {
              int v21 = 2;
            }
            *(_DWORD *)(v3 + 16) = v21;
            uint64_t v22 = *(int *)(v17 + 4 * (v20 | 1));
            uint64_t v23 = (_DWORD *)(*(void *)(v3 + 168) + 4 * v22);
            uint64_t v24 = (__int16 *)(*(void *)(v3 + 192) + 2 * v22);
            uint64_t v25 = v12 + 1;
            if (v12 + 1 >= v11) {
              unsigned int v26 = 0;
            }
            else {
              unsigned int v26 = v12 + 1;
            }
            int v27 = *(_DWORD *)(v14 + 4 * v12);
            if (v27 == -1)
            {
              uint64_t v29 = 0;
            }
            else
            {
              *uint64_t v23 = v27;
              if (v11 == 4) {
                __int16 v28 = v26;
              }
              else {
                __int16 v28 = 1;
              }
              *uint64_t v24 = v28;
              uint64_t v29 = 1;
            }
            int v30 = *(_DWORD *)(v14 + 4 * v26);
            if (v30 != -1)
            {
              v23[v29] = v30;
              __int16 v31 = ((_BYTE)v26 + 2) & 3;
              if (v11 != 4) {
                __int16 v31 = 2;
              }
              v24[v29] = v31;
              LODWORD(v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v29 + 1;
            }
            *uint64_t v18 = v29;
            uint64_t v12 = v25;
          }
        }
        while (v12 != v11);
        int v5 = *(_DWORD *)v4;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  int v32 = *(_DWORD *)(v4 + 4);
  if (v32 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = *((void *)this + 24);
    do
    {
      int v35 = (_DWORD *)(v34 + 8 * v33);
      if (*v35 != -1 || v35[1] != -1)
      {
        uint64_t v36 = 0;
        uint64_t v37 = *(void *)(v4 + 144);
        uint64_t v38 = *(int *)(v37 + ((8 * v33) | 4));
        uint64_t v39 = *(unsigned int *)(v37 + 8 * v33);
        uint64_t v40 = *(void *)(v4 + 168) + 4 * v38;
        uint64_t v41 = *(void *)(v4 + 192) + 2 * v38;
        int v42 = (_DWORD *)(*(void *)(v4 + 120) + 8 * v33);
        char v43 = 1;
        do
        {
          char v44 = v43;
          uint64_t v45 = (int)v35[v36];
          if (v45 != -1)
          {
            uint64_t v46 = *(void *)(v3 + 144);
            __int32 v47 = (_DWORD *)(v46 + 8 * v45);
            _DWORD *v47 = v39;
            if (v45) {
              int v48 = *(v47 - 1) + *(v47 - 2);
            }
            else {
              int v48 = 0;
            }
            v47[1] = v48;
            int v49 = *(_DWORD *)(v3 + 16);
            if (v49 <= (int)v39) {
              int v49 = v39;
            }
            *(_DWORD *)(v3 + 16) = v49;
            if ((int)v39 < 1)
            {
              int v50 = 0;
            }
            else
            {
              int v50 = 0;
              uint64_t v51 = *(int *)(v46 + 4 * (int)((2 * v45) | 1));
              uint64_t v52 = *(void *)(v3 + 168) + 4 * v51;
              uint64_t v53 = *(void *)(v3 + 192) + 2 * v51;
              uint64_t v54 = *(void *)(v4 + 24);
              uint64_t v55 = *((void *)this + 11);
              uint64_t v56 = *((void *)this + 15);
              unint64_t v57 = (int *)v40;
              int v58 = (unsigned __int16 *)v41;
              uint64_t v59 = v39;
              do
              {
                uint64_t v61 = *v57++;
                uint64_t v60 = v61;
                LODWORD(v61) = *v58++;
                uint64_t v62 = v61;
                uint64_t v63 = (2 * v60) | 1;
                BOOL v64 = v36;
                if (*v42 != v42[1]) {
                  BOOL v64 = *(_DWORD *)(*(void *)(v4 + 48) + 4 * *(int *)(v54 + 4 * v63) + 4 * v62) != v42[v36];
                }
                int v65 = 2 * v60;
                uint64_t v66 = v56 + 4 * *(int *)(v55 + 4 * v63);
                if (v64 + v62 == *(_DWORD *)(v55 + 4 * v65)) {
                  unsigned int v67 = 0;
                }
                else {
                  unsigned int v67 = v64 + v62;
                }
                int v68 = *(_DWORD *)(v66 + 4 * v67);
                if (v68 != -1)
                {
                  int v69 = *(_DWORD *)(v54 + 4 * v65);
                  *(_DWORD *)(v52 + 4 * v5re::VariableStepTimer::setClock((uint64_t)this, 0) = v68;
                  if (v64) {
                    __int16 v70 = 3;
                  }
                  else {
                    __int16 v70 = 0;
                  }
                  if (v69 != 4) {
                    LOWORD(v62) = v70;
                  }
                  *(_WORD *)(v53 + 2 * v50++) = v62;
                }
                --v59;
              }
              while (v59);
            }
            _DWORD *v47 = v50;
          }
          char v43 = 0;
          uint64_t v36 = 1;
        }
        while ((v44 & 1) != 0);
        int v32 = *(_DWORD *)(v4 + 4);
      }
      ++v33;
    }
    while (v33 < v32);
  }
  uint64_t v71 = (int *)(*(void *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  std::vector<int>::size_type v72 = v71[1] + (uint64_t)*v71;
  std::vector<unsigned int>::resize((std::vector<int> *)(v3 + 168), v72);
  uint64_t v73 = *((void *)this + 2) + 192;
  std::vector<unsigned short>::resize(v73, v72);
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFaceRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  int v2 = (void *)*((void *)this + 1);
  int v3 = (((v2[22] - v2[21]) >> 1) & 0xFFFFFFFE) + ((v2[7] - v2[6]) >> 2) + ((v2[37] - v2[36]) >> 2);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 264), 2 * *(int *)(*((void *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 288), v3);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 312, v3);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(this);
  }
  uint64_t v4 = *((void *)this + 2);
  int v5 = (int *)(*(void *)(v4 + 264) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  std::vector<int>::size_type v6 = v5[1] + (uint64_t)*v5;
  std::vector<unsigned int>::resize((std::vector<int> *)(v4 + 288), v6);
  uint64_t v7 = *((void *)this + 2) + 312;
  std::vector<unsigned short>::resize(v7, v6);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentVertices(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 288);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 264) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 312);
        uint64_t v11 = (void *)this[2];
        uint64_t v12 = (_DWORD *)(v11[33] + 8 * v5);
        *uint64_t v12 = v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = this[11];
          uint64_t v20 = this[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            __int16 v23 = v22;
            int v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              int v25 = *(_DWORD *)(v19 + 8 * v21);
              *(_DWORD *)(v17 + 4 * v14) = v24;
              if (v25 != 4) {
                __int16 v23 = 0;
              }
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *uint64_t v12 = v14;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentFaces(void *this)
{
  uint64_t v1 = (int *)this[1];
  int v2 = *v1;
  if (*v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[21];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = (unsigned int *)(this[11] + 8 * v3);
        uint64_t v7 = this[15];
        uint64_t v8 = *v6;
        uint64_t v9 = (int)v6[1];
        uint64_t v10 = (void *)this[2];
        uint64_t v11 = (_DWORD *)(v10[33] + 8 * v5);
        _DWORD *v11 = v8;
        if (v5) {
          int v12 = *(v11 - 1) + *(v11 - 2);
        }
        else {
          int v12 = 0;
        }
        v11[1] = v12;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          uint64_t v13 = 0;
          int v14 = 0;
          uint64_t v15 = v7 + 4 * v9;
          uint64_t v16 = v10[36] + 4 * v12;
          uint64_t v17 = v10[39] + 2 * v12;
          do
          {
            int v18 = *(_DWORD *)(v15 + 4 * v13);
            if (v18 != -1)
            {
              *(_DWORD *)(v16 + 4 * v14) = v18;
              __int16 v19 = ((_BYTE)v13 + 2) & 3;
              if (v8 != 4) {
                __int16 v19 = 2;
              }
              *(_WORD *)(v17 + 2 * v14++) = v19;
            }
            ++v13;
          }
          while (v8 != v13);
        }
        _DWORD *v11 = v14;
        int v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexFacesFromParentEdges(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 192);
        uint64_t v11 = (void *)this[2];
        int v12 = (_DWORD *)(v11[33] + 8 * v5);
        *int v12 = 2 * v8;
        if (v5) {
          int v13 = *(v12 - 1) + *(v12 - 2);
        }
        else {
          int v13 = 0;
        }
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          int v14 = 0;
        }
        else
        {
          int v14 = 0;
          uint64_t v15 = (int *)(v6 + 4 * v9);
          uint64_t v16 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v17 = v11[36] + 4 * v13;
          uint64_t v18 = v11[39] + 2 * v13;
          uint64_t v19 = this[11];
          uint64_t v20 = this[15];
          do
          {
            uint64_t v22 = *v15++;
            uint64_t v21 = v22;
            LODWORD(v22) = *v16++;
            uint64_t v23 = v22;
            uint64_t v24 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            int v25 = *(_DWORD *)(v19 + 8 * v21);
            if (v22 + 1 == v25) {
              unsigned int v26 = 0;
            }
            else {
              unsigned int v26 = v23 + 1;
            }
            int v27 = *(_DWORD *)(v24 + 4 * v26);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              if (v25 == 4) {
                __int16 v28 = v23;
              }
              else {
                __int16 v28 = 3;
              }
              *(_WORD *)(v18 + 2 * v14++) = v28;
            }
            int v29 = *(_DWORD *)(v24 + 4 * v23);
            if (v29 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v29;
              if (v25 == 4) {
                __int16 v30 = v26;
              }
              else {
                __int16 v30 = 1;
              }
              *(_WORD *)(v18 + 2 * v14++) = v30;
            }
            --v8;
          }
          while (v8);
        }
        *int v12 = v14;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgeRelation(OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = ((*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 2)
     + 2 * *(_DWORD *)(v2 + 4)
     + ((*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 2)
     + ((*(void *)(v2 + 368) - *(void *)(v2 + 360)) >> 2);
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 336), 2 * *(int *)(*((void *)this + 2) + 8));
  std::vector<unsigned int>::resize((std::vector<int> *)(*((void *)this + 2) + 360), v3);
  std::vector<unsigned short>::resize(*((void *)this + 2) + 384, v3);
  if (*((_DWORD *)this + 21))
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(this);
  }
  else
  {
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(this);
    OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(this);
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v5 = (int *)(*(void *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  std::vector<int>::size_type v6 = v5[1] + (uint64_t)*v5;
  std::vector<unsigned int>::resize((std::vector<int> *)(v4 + 360), v6);
  uint64_t v7 = *((void *)this + 2) + 384;
  std::vector<unsigned short>::resize(v7, v6);
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentVertices(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[30];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 360);
        uint64_t v7 = (unsigned int *)(*(void *)(v1 + 336) + 8 * v3);
        uint64_t v8 = *v7;
        uint64_t v9 = (int)v7[1];
        uint64_t v10 = *(void *)(v1 + 384);
        uint64_t v11 = this[2];
        uint64_t v12 = *(void *)(v11 + 336);
        int v13 = (_DWORD *)(v12 + 8 * v5);
        *int v13 = v8;
        if (v5) {
          int v14 = *(v13 - 1) + *(v13 - 2);
        }
        else {
          int v14 = 0;
        }
        v13[1] = v14;
        int v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8) {
          int v15 = v8;
        }
        *(_DWORD *)(v11 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v15;
        if ((int)v8 < 1)
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = (int *)(v6 + 4 * v9);
          uint64_t v18 = (unsigned __int16 *)(v10 + 2 * v9);
          uint64_t v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          uint64_t v20 = *(void *)(v11 + 360) + 4 * v19;
          uint64_t v21 = *(void *)(v11 + 384) + 2 * v19;
          uint64_t v22 = this[24];
          do
          {
            uint64_t v24 = *v17++;
            uint64_t v23 = v24;
            LODWORD(v24) = *v18++;
            int v25 = *(_DWORD *)(v22 + 8 * v23 + 4 * v24);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *int v13 = v16;
        int v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentFaces(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[21];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        int v6 = *(_DWORD *)(*(void *)(v1 + 24) + 8 * v3);
        uint64_t v7 = *(int *)(this[13] + 8 * v3 + 4);
        uint64_t v8 = this[18];
        uint64_t v9 = this[2];
        uint64_t v10 = *(void *)(v9 + 336);
        uint64_t v11 = (int *)(v10 + 8 * v5);
        int *v11 = v6;
        if (v5) {
          int v12 = *(v11 - 1) + *(v11 - 2);
        }
        else {
          int v12 = 0;
        }
        v11[1] = v12;
        int v13 = *(_DWORD *)(v9 + 20);
        if (v13 <= v6) {
          int v13 = v6;
        }
        *(_DWORD *)(v9 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v13;
        if (v6 < 1)
        {
          int v15 = 0;
        }
        else
        {
          int v14 = 0;
          int v15 = 0;
          uint64_t v16 = v8 + 4 * v7;
          uint64_t v17 = *(int *)(v10 + 4 * (int)((2 * v5) | 1));
          uint64_t v18 = *(void *)(v9 + 360) + 4 * v17;
          uint64_t v19 = *(void *)(v9 + 384) + 2 * v17;
          do
          {
            if (v14) {
              int v20 = v14;
            }
            else {
              int v20 = v6;
            }
            int v21 = *(_DWORD *)(v16 + 4 * (v20 - 1));
            if (v21 != -1)
            {
              *(_DWORD *)(v18 + 4 * v15) = v21;
              *(_WORD *)(v19 + 2 * v15++) = 0;
            }
            ++v14;
          }
          while (v6 != v14);
        }
        int *v11 = v15;
        int v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::populateVertexEdgesFromParentEdges(void *this)
{
  uint64_t v1 = this[1];
  int v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = this[27];
    do
    {
      uint64_t v5 = *(int *)(v4 + 4 * v3);
      if (v5 != -1)
      {
        uint64_t v6 = *(void *)(v1 + 168);
        uint64_t v7 = *(unsigned int *)(*(void *)(v1 + 144) + 8 * v3);
        uint64_t v8 = *(int *)(*(void *)(v1 + 144) + 8 * v3 + 4);
        uint64_t v9 = *(void *)(v1 + 192);
        uint64_t v10 = *(void *)(v1 + 120);
        uint64_t v11 = this[24];
        uint64_t v12 = this[2];
        int v13 = v7 + 2;
        uint64_t v14 = *(void *)(v12 + 336);
        int v15 = (int *)(v14 + 8 * v5);
        *int v15 = v7 + 2;
        if (v5) {
          int v16 = *(v15 - 1) + *(v15 - 2);
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = (int *)(v11 + 8 * v3);
        int v18 = 2 * v5;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13) {
          int v13 = *(_DWORD *)(v12 + 20);
        }
        *(_DWORD *)(v12 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v13;
        uint64_t v19 = *(int *)(v14 + 4 * (v18 | 1));
        int v20 = (int *)(*(void *)(v12 + 360) + 4 * v19);
        int v21 = (__int16 *)(*(void *)(v12 + 384) + 2 * v19);
        if (*v17 == -1)
        {
          int v22 = 0;
        }
        else
        {
          *int v20 = *v17;
          *int v21 = 0;
          int v22 = 1;
        }
        int v23 = v17[1];
        if (v23 != -1)
        {
          v20[v22] = v23;
          v21[v22++] = 0;
        }
        if ((int)v7 >= 1)
        {
          uint64_t v24 = 0;
          uint64_t v25 = v6 + 4 * v8;
          uint64_t v26 = v9 + 2 * v8;
          uint64_t v27 = this[13];
          uint64_t v28 = this[18];
          int v29 = (_DWORD *)(v10 + 8 * v3);
          do
          {
            uint64_t v30 = *(unsigned __int16 *)(v26 + 2 * v24);
            uint64_t v31 = (2 * *(int *)(v25 + 4 * v24)) | 1;
            int v32 = *(_DWORD *)(v28 + 4 * *(int *)(v27 + 4 * v31) + 4 * v30);
            if (v32 != -1)
            {
              v20[v22] = v32;
              v21[v22++] = 1;
              if (!v24 && v22 == 3)
              {
                if (*v29 == v29[1])
                {
                  int v33 = v20[1];
                  __int16 v34 = v21[1];
                }
                else
                {
                  int v35 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * *(int *)(*(void *)(v1 + 24) + 4 * v31) + 4 * v30);
                  int v33 = v20[1];
                  __int16 v34 = v21[1];
                  if (v35 == *v29)
                  {
                    int v36 = *v20;
                    *int v20 = v33;
                    __int16 v37 = *v21;
                    *int v21 = v34;
                    __int16 v34 = v37;
                    int v33 = v36;
                  }
                }
                v20[1] = v20[2];
                v20[2] = v33;
                v21[1] = v21[2];
                _DWORD v21[2] = v34;
                int v22 = 3;
              }
            }
            ++v24;
          }
          while (v7 != v24);
        }
        *int v15 = v22;
        int v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return this;
}

void *OpenSubdiv::v3_1_1::Vtr::internal::QuadRefinement::markSparseFaceChildren(void *this)
{
  uint64_t v1 = (int *)this[1];
  if (*v1 >= 1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = (2 * v2) | 1;
      uint64_t v4 = (_DWORD *)(this[15] + 4 * *(int *)(this[11] + 4 * v3));
      uint64_t v5 = (_DWORD *)(this[18] + 4 * *(int *)(this[13] + 4 * v3));
      uint64_t v6 = *((void *)v1 + 3);
      uint64_t v7 = *(unsigned int *)(v6 + 8 * v2);
      uint64_t v8 = this[51];
      if (*(unsigned char *)(v8 + v2)) {
        break;
      }
      if ((int)v7 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *((void *)v1 + 6) + 4 * *(int *)(v6 + 4 * v3);
        uint64_t v11 = this[57];
        char v12 = 1;
        do
        {
          while ((*(unsigned char *)(v11 + *(int *)(v10 + 4 * v9)) & 1) != 0)
          {
            char v12 = 0;
            if (v9) {
              int v13 = v9;
            }
            else {
              int v13 = v7;
            }
            v4[v9] = 1;
            v5[v9] = 1;
            v5[v13 - 1] = 1;
            if (v7 - 1 == v9++) {
              goto LABEL_22;
            }
          }
          ++v9;
        }
        while (v7 != v9);
        if (v12) {
          goto LABEL_19;
        }
LABEL_22:
        *(_DWORD *)(this[21] + 4 * v2) = 1;
        int v16 = (int *)(*((void *)v1 + 9) + 4 * *(int *)(v6 + 4 * v3));
        uint64_t v17 = *(unsigned int *)(v6 + 8 * v2);
        if (v17 == 3)
        {
          int v23 = *(unsigned char *)(this[54] + v16[1]) & 0xE | (*(unsigned __int8 *)(this[54] + *v16) >> 1) & 0xF | (2 * *(unsigned __int8 *)(this[54] + v16[2])) & 0xC;
          char v22 = *(unsigned char *)(v8 + v2);
        }
        else
        {
          if (v17 != 4)
          {
            int v24 = *(unsigned char *)(v8 + v2) & 0xE1;
            *(unsigned char *)(v8 + v2) &= 0xE1u;
            if ((int)v17 >= 1)
            {
              do
              {
                uint64_t v25 = *v16++;
                v24 |= *(unsigned char *)(this[54] + v25) & 0x1E;
                *(unsigned char *)(v8 + v2) = v24;
                --v17;
              }
              while (v17);
            }
            goto LABEL_19;
          }
          uint64_t v18 = this[54];
          unsigned int v19 = *(unsigned __int8 *)(v18 + *v16);
          int v20 = *(unsigned char *)(v18 + v16[1]) & 0xE;
          int v21 = (2 * *(unsigned __int8 *)(v18 + v16[2])) & 0xC;
          LOBYTE(v18) = 4 * *(unsigned char *)(v18 + v16[3]);
          char v22 = *(unsigned char *)(v8 + v2);
          int v23 = v20 | (v19 >> 1) & 0xF | v21 | v18 & 8;
        }
        char v15 = v22 & 0xE1 | (2 * (v23 & 0xF));
        goto LABEL_18;
      }
LABEL_19:
      ++v2;
      uint64_t v1 = (int *)this[1];
      if (v2 >= *v1) {
        return this;
      }
    }
    if ((int)v7 >= 1)
    {
      do
      {
        *v4++ = 2;
        *v5++ = 2;
        --v7;
      }
      while (v7);
    }
    *(_DWORD *)(this[21] + 4 * v2) = 2;
    char v15 = *(unsigned char *)(v8 + v2) & 0xE1;
LABEL_18:
    *(unsigned char *)(v8 + v2) = v15;
    goto LABEL_19;
  }
  return this;
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::TopologyRefiner(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xC0 | 1;
  *(unsigned char *)(a1 + 12) &= 0xC0u;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF000 | 0xF0;
  *(_OWORD *)(a1 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v4 = (char *)operator new(0x50uLL);
  *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v4;
  *(void *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v4;
  *(void *)(a1 + 56) = v4 + 80;
  operator new();
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::assembleFarLevels(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  uint64_t v3 = *((void *)this + 6) - (void)v2;
  unint64_t v4 = v3 >> 3;
  uint64_t v6 = (char *)*((void *)this + 11);
  uint64_t v5 = (unsigned char *)*((void *)this + 12);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
  unint64_t v8 = (v3 >> 3) - v7;
  if (v3 >> 3 <= v7)
  {
    if (v3 >> 3 >= v7) {
      goto LABEL_18;
    }
    uint64_t v17 = &v6[24 * v4];
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)this + 13);
  if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v5) >> 3) >= v8)
  {
    uint64_t v17 = &v5[24 * (24 * v8 / 0x18)];
LABEL_17:
    *((void *)this + 12) = v17;
    goto LABEL_18;
  }
  if ((unint64_t)v3 >= 0x5555555555555551) {
    abort();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v6) >> 3);
  unint64_t v11 = 0x5555555555555556 * ((v9 - (uint64_t)v6) >> 3);
  if (v11 > v4) {
    unint64_t v4 = v11;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v4 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v4 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 3 * v4;
  int v13 = (char *)operator new(24 * v4);
  uint64_t v14 = &v13[8 * ((v5 - v6) >> 3)];
  char v15 = &v14[24 * (24 * v8 / 0x18)];
  if (v5 != v6)
  {
    do
    {
      long long v16 = *(_OWORD *)(v5 - 24);
      *((void *)v14 - 1) = *((void *)v5 - 1);
      *(_OWORD *)(v14 - 24) = v16;
      v14 -= 24;
      v5 -= 24;
    }
    while (v5 != v6);
    uint64_t v5 = v6;
  }
  *((void *)this + 11) = v14;
  *((void *)this + 12) = v15;
  uint64_t v6 = v14;
  *((void *)this + 13) = &v13[8 * v12];
  if (v5)
  {
    operator delete(v5);
    uint64_t v6 = (char *)*((void *)this + 11);
    uint64_t v2 = (void *)*((void *)this + 5);
  }
LABEL_18:
  *((void *)v6 + 1) = 0;
  *(void *)uint64_t v6 = *v2;
  *((void *)v6 + 2) = 0;
  uint64_t v18 = (void *)*((void *)this + 8);
  unint64_t v19 = *((void *)this + 9) - (void)v18;
  unint64_t v20 = v19 >> 3;
  if ((v19 >> 3))
  {
    *((void *)v6 + 2) = *v18;
    if ((int)v20 >= 2)
    {
      uint64_t v21 = (v19 >> 3) - 1;
      char v22 = v6 + 40;
      int v23 = v18 + 1;
      int v24 = v2 + 1;
      do
      {
        *(v22 - 1) = *(v23 - 1);
        uint64_t v25 = *v24++;
        *(v22 - 2) = v25;
        uint64_t v26 = *v23++;
        *char v22 = v26;
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    uint64_t v27 = &v6[24 * (int)v20];
    *((void *)v27 + 1) = *(void *)((char *)v18 + ((uint64_t)((v19 << 29) - 0x100000000) >> 29));
    *(void *)uint64_t v27 = *(void *)((char *)v2 + ((uint64_t)(v19 << 29) >> 29));
    *((void *)v27 + 2) = 0;
  }
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  uint64_t v3 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  if ((int)((unint64_t)(v2 - v3) >> 3) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(v3 + 8 * v4);
      if (v5)
      {
        OpenSubdiv::v3_1_1::Vtr::internal::Level::~Level(v5);
        MEMORY[0x237DBCBD0]();
        uint64_t v3 = *((void *)this + 5);
        uint64_t v2 = *((void *)this + 6);
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v2 - v3) >> 3));
  }
  uint64_t v6 = (void *)*((void *)this + 8);
  uint64_t v7 = *((void *)this + 9);
  if ((int)((unint64_t)(v7 - (void)v6) >> 3) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = v6[v8];
      if (v9)
      {
        (*(void (**)(void))(*(void *)v9 + 8))(v6[v8]);
        uint64_t v6 = (void *)*((void *)this + 8);
        uint64_t v7 = *((void *)this + 9);
      }
      ++v8;
    }
    while (v8 < (int)((unint64_t)(v7 - (void)v6) >> 3));
  }
  unint64_t v10 = (void *)*((void *)this + 11);
  if (v10)
  {
    *((void *)this + 12) = v10;
    operator delete(v10);
    uint64_t v6 = (void *)*((void *)this + 8);
  }
  if (v6)
  {
    *((void *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v6;
    operator delete(v6);
  }
  unint64_t v11 = (void *)*((void *)this + 5);
  if (v11)
  {
    *((void *)this + 6) = v11;
    operator delete(v11);
  }
}

int32x2_t OpenSubdiv::v3_1_1::Far::TopologyRefiner::initializeInventory(OpenSubdiv::v3_1_1::Far::TopologyRefiner *this)
{
  uint64_t v1 = (int **)*((void *)this + 5);
  if (*((int ***)this + 6) == v1)
  {
    int v4 = 0;
    LODWORD(v5) = 0;
    int v6 = 0;
    int32x2_t v3 = 0;
  }
  else
  {
    uint64_t v2 = *v1;
    int32x2_t v3 = *(int32x2_t *)(*v1 + 1);
    int v4 = **v1;
    uint64_t v5 = (*((void *)v2 + 7) - *((void *)v2 + 6)) >> 2;
    int v6 = v2[5];
  }
  int32x2_t result = vrev64_s32(v3);
  *(int32x2_t *)((char *)this + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = result;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v5;
  *((_DWORD *)this + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v6;
  return result;
}

void OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineAdaptive(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!*(_DWORD *)(**(void **)(a1 + 40) + 8))
  {
    unint64_t v10 = "Failure in TopologyRefiner::RefineAdaptive() -- base level is uninitialized.";
    goto LABEL_9;
  }
  if (*(void *)(a1 + 72) != *(void *)(a1 + 64))
  {
    unint64_t v10 = "Failure in TopologyRefiner::RefineAdaptive() -- previous refinements already applied.";
LABEL_9:
    OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)v10, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (*(_DWORD *)a1 != 1)
  {
    unint64_t v10 = "Failure in TopologyRefiner::RefineAdaptive() -- currently only supported for Catmark scheme.";
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 8) &= ~1u;
  *(_WORD *)(a1 + 16) = a2;
  __int16 v12 = a2 >> 4;
  int v13 = a2 & 0xF;
  __int16 v14 = 15;
  if ((a2 & 0x100) != 0)
  {
    OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
    BOOL v15 = DWORD1(xmmword_2687A1968) == 4;
    if (DWORD1(xmmword_2687A1968) == 4) {
      __int16 v14 = 11;
    }
    else {
      __int16 v14 = 15;
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  if (v15 | ((unsigned __int16)(a2 & 0x200) >> 9)) {
    __int16 v16 = 0;
  }
  else {
    __int16 v16 = 16;
  }
  if ((((v12 & 0x20 | a2 & 0x400 | (unsigned __int16)v14 | (unsigned __int16)v16) ^ 0x3E0) & 0x400) != 0)
  {
    uint64_t v17 = *(uint64_t **)(**(void **)(a1 + 40) + 456);
    unint64_t v18 = *(void *)(**(void **)(a1 + 40) + 464) - (void)v17;
    if ((int)(v18 >> 3) >= 1)
    {
      char v19 = 0;
      uint64_t v20 = (v18 >> 3);
      do
      {
        uint64_t v21 = *v17++;
        v19 |= *(unsigned char *)(v21 + 12) == 0;
        --v20;
      }
      while (v20);
    }
  }
  OpenSubdiv::v3_1_1::Sdc::staticTraitsTable((OpenSubdiv::v3_1_1::Sdc *)a1);
  if (v13) {
    operator new();
  }
  *(unsigned char *)(a1 + 8) = ((*(_DWORD *)(a1 + 72) - *(_DWORD *)(a1 + 64)) >> 1) & 0x3C | *(unsigned char *)(a1 + 8) & 0xC3;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner::assembleFarLevels((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a1);
}

uint64_t OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::GetPatchPoints(void *a1, void *a2, int a3, uint64_t a4, int a5, unsigned int a6)
{
  if ((a6 & 0x80000000) != 0)
  {
    uint64_t v11 = a2[3];
    unint64_t v10 = (int *)(a2[6] + 4 * *(int *)(v11 + 8 * a3 + 4));
    uint64_t v9 = (unsigned int *)(v11 + 8 * a3);
  }
  else
  {
    uint64_t v7 = *(void **)(a2[57] + 8 * a6);
    uint64_t v8 = *(void *)(*v7 + 24);
    uint64_t v9 = (unsigned int *)(v8 + 8 * a3);
    unint64_t v10 = (int *)(v7[3] + 4 * *(int *)(v8 + 4 * ((2 * a3) | 1)));
  }
  uint64_t v12 = *v9;
  uint64_t v13 = a2[54];
  __int16 v14 = *(_WORD *)(v13 + 2 * *v10);
  if ((int)v12 >= 2)
  {
    uint64_t v15 = v12 - 1;
    __int16 v16 = v10 + 1;
    do
    {
      uint64_t v17 = *v16++;
      v14 |= *(_WORD *)(v13 + 2 * v17);
      --v15;
    }
    while (v15);
  }
  uint64_t v18 = 0;
  if ((v14 & 4) != 0)
  {
    uint64_t v20 = (char **)(a1 + 5);
    int v36 = (char *)a1[5];
    __int16 v37 = (void **)(a1 + 4);
    uint64_t v38 = a1 + 6;
    do
    {
      int v39 = v10[v18] + a5;
      if ((unint64_t)v36 >= *v38)
      {
        uint64_t v41 = (char *)*v37;
        uint64_t v42 = (v36 - (unsigned char *)*v37) >> 2;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62) {
          goto LABEL_79;
        }
        uint64_t v44 = *v38 - (void)v41;
        if (v44 >> 1 > v43) {
          unint64_t v43 = v44 >> 1;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          uint64_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v20 + 1), v45);
          int v36 = *v20;
          uint64_t v41 = (char *)*v37;
        }
        else
        {
          uint64_t v46 = 0;
        }
        __int32 v47 = &v46[4 * v42];
        *(_DWORD *)__int32 v47 = v39;
        uint64_t v40 = v47 + 4;
        while (v36 != v41)
        {
          int v48 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *__int16 v37 = v47;
        *uint64_t v20 = v40;
        *uint64_t v38 = &v46[4 * v45];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *(_DWORD *)int v36 = v39;
        uint64_t v40 = v36 + 4;
      }
      *uint64_t v20 = v40;
      ++v18;
      int v36 = v40;
    }
    while (v18 != 4);
    unint64_t v49 = a1[12];
    int v50 = (char *)a1[11];
    if ((unint64_t)v50 >= v49)
    {
      int v58 = (char *)a1[10];
      uint64_t v59 = (v50 - v58) >> 2;
      unint64_t v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62) {
        goto LABEL_79;
      }
      uint64_t v61 = v49 - (void)v58;
      if (v61 >> 1 > v60) {
        unint64_t v60 = v61 >> 1;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62)
      {
        uint64_t v63 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 12), v62);
        int v58 = (char *)a1[10];
        int v50 = (char *)a1[11];
      }
      else
      {
        uint64_t v63 = 0;
      }
      unsigned int v67 = &v63[4 * v59];
      int v68 = &v63[4 * v62];
      *(_DWORD *)unsigned int v67 = a3;
      uint64_t v51 = v67 + 4;
      while (v50 != v58)
      {
        int v69 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v67 - 1) = v69;
        v67 -= 4;
      }
      a1[10] = v67;
      a1[11] = v51;
      a1[12] = v68;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *(_DWORD *)int v50 = a3;
      uint64_t v51 = v50 + 4;
    }
    a1[11] = v51;
    return (uint64_t)(*v20 - 16);
  }
  uint64_t v20 = (char **)(a1 + 2);
  char v19 = (char *)a1[2];
  uint64_t v21 = (void **)(a1 + 1);
  char v22 = a1 + 3;
  do
  {
    int v23 = v10[v18] + a5;
    if ((unint64_t)v19 >= *v22)
    {
      uint64_t v25 = (char *)*v21;
      uint64_t v26 = (v19 - (unsigned char *)*v21) >> 2;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62) {
        goto LABEL_79;
      }
      uint64_t v28 = *v22 - (void)v25;
      if (v28 >> 1 > v27) {
        unint64_t v27 = v28 >> 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v20 + 1), v29);
        char v19 = *v20;
        uint64_t v25 = (char *)*v21;
      }
      else
      {
        uint64_t v30 = 0;
      }
      uint64_t v31 = &v30[4 * v26];
      *(_DWORD *)uint64_t v31 = v23;
      int v24 = v31 + 4;
      while (v19 != v25)
      {
        int v32 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v31 - 1) = v32;
        v31 -= 4;
      }
      *uint64_t v21 = v31;
      *uint64_t v20 = v24;
      *char v22 = &v30[4 * v29];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_DWORD *)char v19 = v23;
      int v24 = v19 + 4;
    }
    *uint64_t v20 = v24;
    ++v18;
    char v19 = v24;
  }
  while (v18 != 4);
  unint64_t v33 = a1[9];
  __int16 v34 = (char *)a1[8];
  if ((unint64_t)v34 >= v33)
  {
    uint64_t v52 = (char *)a1[7];
    uint64_t v53 = (v34 - v52) >> 2;
    unint64_t v54 = v53 + 1;
    if (!((unint64_t)(v53 + 1) >> 62))
    {
      uint64_t v55 = v33 - (void)v52;
      if (v55 >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        unint64_t v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 9), v56);
        uint64_t v52 = (char *)a1[7];
        __int16 v34 = (char *)a1[8];
      }
      else
      {
        unint64_t v57 = 0;
      }
      BOOL v64 = &v57[4 * v53];
      int v65 = &v57[4 * v56];
      *(_DWORD *)BOOL v64 = a3;
      int v35 = v64 + 4;
      while (v34 != v52)
      {
        int v66 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v64 - 1) = v66;
        v64 -= 4;
      }
      a1[7] = v64;
      a1[8] = v35;
      a1[9] = v65;
      if (v52) {
        operator delete(v52);
      }
      goto LABEL_70;
    }
LABEL_79:
    abort();
  }
  *(_DWORD *)__int16 v34 = a3;
  int v35 = v34 + 4;
LABEL_70:
  a1[8] = v35;
  return (uint64_t)(*v20 - 16);
}

void OpenSubdiv::v3_1_1::Far::EndCapLegacyGregoryPatchFactory::Finalize(void *a1, int a2, std::vector<int> *this, std::vector<int> *a4, unsigned int *a5)
{
  uint64_t v8 = a1;
  uint64_t v10 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v11 = v9 - v10;
  uint64_t v37 = a1[10];
  uint64_t v39 = a1[11];
  unint64_t v12 = (v39 - v37) >> 2;
  unint64_t v13 = v12 + ((v9 - v10) >> 2);
  __int16 v14 = *(void **)(*(void *)(*a1 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(*a1 + 8) >> 2) & 0xF));
  std::vector<unsigned int>::resize(this, 4 * v13);
  if (v13)
  {
    std::vector<int>::pointer begin = this->__begin_;
    if (v9 != v10)
    {
      uint64_t v16 = 0;
      if ((unint64_t)(v11 >> 2) <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v11 >> 2;
      }
      do
      {
        OpenSubdiv::v3_1_1::Far::getQuadOffsets(v14, (const OpenSubdiv::v3_1_1::Vtr::internal::Level *)*(unsigned int *)(v8[7] + 4 * v16), (uint64_t)begin, a5);
        begin += 4;
        ++v16;
      }
      while (v17 != v16);
    }
    if (v39 != v37)
    {
      uint64_t v18 = 0;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        OpenSubdiv::v3_1_1::Far::getQuadOffsets(v14, (const OpenSubdiv::v3_1_1::Vtr::internal::Level *)*(unsigned int *)(v8[10] + 4 * v18), (uint64_t)begin, a5);
        begin += 4;
        ++v18;
      }
      while (v12 != v18);
    }
  }
  uint64_t v19 = (2 * a2) | 1;
  std::vector<unsigned int>::resize(a4, *(int *)(*v8 + 20) * v19);
  uint64_t v20 = 0;
  int v21 = 0;
  unint64_t v22 = ((unint64_t)*(unsigned __int8 *)(*v8 + 8) >> 2) & 0xF;
  uint64_t v23 = (int)v19;
  uint64_t v24 = (v22 + 1);
  unint64_t v25 = (8 * ((unint64_t)(2 * a2) >> 1)) | 4;
  unint64_t v40 = v22;
  uint64_t v41 = v8;
  uint64_t v38 = v24;
  do
  {
    uint64_t v26 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(void *)(*v8 + 40) + 8 * v20);
    int v27 = *((_DWORD *)v26 + 2);
    if (v20 == v22 && v27 >= 1)
    {
      uint64_t v43 = v20;
      int v28 = 0;
      uint64_t v29 = v21 * (int)v23;
      uint64_t v30 = 4 * v29 + 4;
      do
      {
        std::vector<int>::pointer v31 = a4->__begin_;
        int v32 = &a4->__begin_[v29];
        *int v32 = 0;
        int v33 = OpenSubdiv::v3_1_1::Vtr::internal::Level::gatherQuadRegularRingAroundVertex(v26, v28, v32 + 1, 0xFFFFFFFF);
        if (v33 >= 1)
        {
          uint64_t v34 = v33;
          std::vector<int>::pointer v35 = (std::vector<int>::pointer)((char *)v31 + v30);
          do
          {
            *v35++ += v21;
            --v34;
          }
          while (v34);
        }
        if (v33)
        {
          v32[v33 + 1] = v32[v33];
          int v33 = ~v33;
        }
        if (v33 >= 0) {
          int v36 = v33;
        }
        else {
          int v36 = v33 + 1;
        }
        *int v32 = v36 >> 1;
        v29 += v23;
        ++v28;
        int v27 = *((_DWORD *)v26 + 2);
        v30 += v25;
      }
      while (v28 < v27);
      uint64_t v8 = v41;
      uint64_t v20 = v43;
      uint64_t v24 = v38;
      unint64_t v22 = v40;
    }
    v21 += v27;
    ++v20;
  }
  while (v20 != v24);
}

void *OpenSubdiv::v3_1_1::Far::getQuadOffsets(void *this, const OpenSubdiv::v3_1_1::Vtr::internal::Level *a2, uint64_t a3, unsigned int *a4)
{
  if ((a4 & 0x80000000) != 0)
  {
    uint64_t v5 = this + 6;
    uint64_t v7 = this[3];
  }
  else
  {
    int v4 = *(uint64_t **)(this[57] + 8 * a4);
    uint64_t v6 = *v4;
    uint64_t v5 = v4 + 3;
    uint64_t v7 = *(void *)(v6 + 24);
  }
  uint64_t v8 = (int *)(v7 + 8 * (int)a2 + 4);
  uint64_t v9 = 0;
  uint64_t v10 = *v5 + 4 * *v8;
  uint64_t v11 = this[36];
  uint64_t v12 = this[33];
  uint64_t v13 = this[42];
  do
  {
    uint64_t v14 = *(int *)(v10 + 4 * v9);
    int v15 = 2 * v14;
    uint64_t v16 = *(unsigned int *)(v12 + 8 * v14);
    if ((int)v16 < 1)
    {
LABEL_9:
      LODWORD(v17) = -1;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = v11 + 4 * *(int *)(v12 + 8 * v14 + 4);
      while (*(_DWORD *)(v18 + 4 * v17) != a2)
      {
        if (v16 == ++v17) {
          goto LABEL_9;
        }
      }
    }
    *(_DWORD *)(a3 + 4 * v9++) = v17 | ((((int)v17 + 1) % *(_DWORD *)(v13 + 4 * v15)) << 8);
  }
  while (v9 != 4);
  return this;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::resizeComponentTopology(uint64_t a1, int *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = **(void **)(a1 + 40);
  *(_DWORD *)(v5 + 8) = v4;
  std::vector<unsigned int>::resize((std::vector<int> *)(v5 + 264), 2 * v4);
  std::vector<unsigned int>::resize((std::vector<int> *)(v5 + 336), 2 * v4);
  std::vector<float>::resize(v5 + 408, v4);
  std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::VTag>::resize(v5 + 432, v4);
  bzero(*(void **)(v5 + 432), 2 * *(int *)(v5 + 8));
  unint64_t v6 = a2[1];
  uint64_t v7 = **(std::vector<int> ***)(a1 + 40);
  LODWORD(v7->__begin_) = v6;
  std::vector<unsigned int>::resize(v7 + 1, 2 * v6);
  std::vector<int>::pointer begin = (char *)v7[4].__begin_;
  unint64_t v9 = (char *)v7[4].__end_ - begin;
  if (v6 <= v9)
  {
    if (v6 < v9) {
      v7[4].__end_ = (std::vector<int>::pointer)&begin[v6];
    }
  }
  else
  {
    std::vector<OpenSubdiv::v3_1_1::Vtr::internal::Level::FTag>::__append((void **)&v7[4].__begin_, v6 - v9);
    std::vector<int>::pointer begin = (char *)v7[4].__begin_;
  }
  bzero(begin, SLODWORD(v7->__begin_));
  if (a2[1] >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *((void *)a2 + 1);
    uint64_t v12 = **(void **)(a1 + 40);
    uint64_t v13 = *(_DWORD **)(v12 + 24);
    do
    {
      int v14 = *(_DWORD *)(v11 + 4 * v10);
      *uint64_t v13 = v14;
      if (v10) {
        int v15 = *(v13 - 1) + *(v13 - 2);
      }
      else {
        int v15 = 0;
      }
      v13[1] = v15;
      if (*(_DWORD *)(v12 + 20) > v14) {
        int v14 = *(_DWORD *)(v12 + 20);
      }
      *(_DWORD *)(v12 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v14;
      ++v10;
      v13 += 2;
    }
    while (v10 < a2[1]);
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTopology(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v4 = **(void **)(a1 + 40);
    uint64_t v5 = *(void *)(v4 + 24);
    uint64_t v6 = *(void *)(v4 + 48);
    int v7 = *(unsigned __int8 *)(a2 + 88);
    uint64_t v8 = *(void *)(a2 + 16);
    do
    {
      unint64_t v9 = (unsigned int *)(v5 + 8 * v2);
      uint64_t v10 = *v9;
      uint64_t v11 = (_DWORD *)(v6 + 4 * (int)v9[1]);
      if (v7)
      {
        _DWORD *v11 = *(_DWORD *)(v8 + 4 * v3++);
        if ((int)v10 >= 2)
        {
          unint64_t v12 = v10 + 1;
          uint64_t v13 = (int *)(v8 + 4 * v3);
          do
          {
            int v14 = *v13++;
            v11[(v12-- - 2)] = v14;
            ++v3;
          }
          while (v12 > 2);
        }
      }
      else if ((int)v10 >= 1)
      {
        int v15 = (int *)(v8 + 4 * v3);
        v3 += v10;
        do
        {
          int v16 = *v15++;
          *v11++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v2;
    }
    while (v2 < *(int *)(a2 + 4));
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTags(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 24);
  if (v4 >= 1)
  {
    uint64_t v5 = *(int **)(a2 + 32);
    if (v5)
    {
      if (*(void *)(a2 + 40))
      {
        for (uint64_t i = 0; i < v4; ++i)
        {
          int v7 = *v5;
          int v8 = v5[1];
          unint64_t v9 = **(OpenSubdiv::v3_1_1::Vtr::internal::Level ***)(a1 + 40);
          int Edge = OpenSubdiv::v3_1_1::Vtr::internal::Level::findEdge(v9, *v5, v8);
          if (Edge == -1)
          {
            snprintf(__str, 0x400uLL, "Edge %d specified to be sharp does not exist (%d, %d)", i, v7, v8);
            OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", v11, __str);
            int v4 = *(_DWORD *)(a2 + 24);
          }
          else
          {
            *(_DWORD *)(*((void *)v9 + 27) + 4 * Edge) = *(_DWORD *)(*(void *)(a2 + 40) + 4 * i);
          }
          v5 += 2;
        }
      }
    }
  }
  if (*(int *)(a2 + 48) >= 1 && *(void *)(a2 + 56) && *(void *)(a2 + 64))
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v12);
      if ((v13 & 0x80000000) != 0 || (uint64_t v14 = **(void **)(a1 + 40), (int)v13 >= *(_DWORD *)(v14 + 8)))
      {
        snprintf(__str, 0x400uLL, "Vertex %d specified to be sharp does not exist", *(_DWORD *)(*(void *)(a2 + 56) + 4 * v12));
        OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", v15, __str);
      }
      else
      {
        *(_DWORD *)(*(void *)(v14 + 408) + 4 * v13) = *(_DWORD *)(*(void *)(a2 + 64) + 4 * v12);
      }
      ++v12;
    }
    while (v12 < *(int *)(a2 + 48));
  }
  if (*(int *)(a2 + 72) >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(int *)(*(void *)(a2 + 80) + 4 * v16);
      uint64_t v18 = *(void *)(**(void **)(a1 + 40) + 96);
      *(unsigned char *)(v18 + v17) |= 1u;
      *(unsigned char *)(a1 + 8) |= 2u;
      ++v16;
    }
    while (v16 < *(int *)(a2 + 72));
  }
  return 1;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::reportInvalidTopology(uint64_t a1, const char *a2)
{
  return OpenSubdiv::v3_1_1::Far::Warning((OpenSubdiv::v3_1_1::Far *)"%s", a2, a2);
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignFaceVaryingTopology(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a2 + 92) >= 1) {
    OpenSubdiv::v3_1_1::Vtr::internal::Level::createFVarChannel();
  }
  return 1;
}

void OpenSubdiv::v3_1_1::Osd::CpuEvalStencils(uint64_t a1, int *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, int *a7, const float *a8, int a9, int a10)
{
  uint64_t v10 = a8;
  uint64_t v11 = a7;
  uint64_t v12 = a5;
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (a9 >= 1)
  {
    uint64_t v12 = &a5[a9];
    uint64_t v15 = *(int *)(a6 + 4 * a9);
    uint64_t v11 = &a7[v15];
    uint64_t v10 = &a8[v15];
  }
  uint64_t v16 = a1 + 4 * *a2;
  uint64_t v17 = a3 + 4 * *a4;
  v18.i64[0] = *(void *)(a4 + 1);
  *(int32x2_t *)v19.i8 = vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)(a2 + 1));
  HIDWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = v18.i32[1];
  LODWORD(v2re::VariableStepTimer::setClock((uint64_t)this, 0) = HIDWORD(*(void *)(a2 + 1));
  v19.i64[1] = v20;
  v21.i64[0] = 0x400000004;
  v21.i64[1] = 0x400000004;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v19, v21)))))
  {
    v18.i64[1] = *(void *)(a2 + 1);
    v22.i64[0] = 0x800000008;
    v22.i64[1] = 0x800000008;
    if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18, v22)))))
    {
      MEMORY[0x270FA5388](a1);
      uint64_t v24 = &v54[-v23];
      bzero(&v54[-v23], v25);
      int v55 = a10 - a9;
      if (a10 - a9 >= 1)
      {
        int v26 = 0;
        do
        {
          uint64_t v27 = v17;
          uint64_t v28 = a2[1];
          bzero(v24, 4 * v28);
          int v29 = *v12;
          if (*v12 < 1)
          {
            uint64_t v17 = v27;
          }
          else
          {
            int v30 = 0;
            uint64_t v31 = v28;
            int v32 = a2[2];
            uint64_t v17 = v27;
            do
            {
              int v34 = *v11++;
              int v33 = v34;
              float v35 = *v10++;
              float v36 = v35;
              if ((int)v31 >= 1)
              {
                uint64_t v37 = (float *)(v16 + 4 * v33 * v32);
                uint64_t v38 = (float *)v24;
                uint64_t v39 = v31;
                do
                {
                  float v40 = *v37++;
                  *uint64_t v38 = *v38 + (float)(v40 * v36);
                  ++v38;
                  --v39;
                }
                while (v39);
              }
              ++v30;
            }
            while (v30 != v29);
          }
          memcpy((void *)(v17 + 4 * a4[2] * v26++), v24, 4 * a4[1]);
          ++v12;
        }
        while (v26 != v55);
      }
    }
    else if (a10 > a9)
    {
      uint64_t v46 = a9;
      do
      {
        long long v56 = 0uLL;
        long long v57 = 0uLL;
        int v47 = v12[v46];
        if (v47 >= 1)
        {
          for (int i = 0; i != v47; ++i)
          {
            uint64_t v49 = 0;
            uint64_t v50 = v16 + 32 * *v11;
            float32x4_t v51 = vld1q_dup_f32(v10);
            do
            {
              *(long long *)((char *)&v56 + v4re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = (__int128)vmlaq_f32(*(float32x4_t *)((char *)&v56 + v49), v51, *(float32x4_t *)(v50 + v49));
              v49 += 16;
            }
            while (v49 != 32);
            ++v11;
            ++v10;
          }
        }
        uint64_t v52 = (_OWORD *)(v17 + 32 * v46);
        long long v53 = v57;
        *uint64_t v52 = v56;
        v52[1] = v53;
        ++v46;
      }
      while (v46 != a10);
    }
  }
  else if (a10 > a9)
  {
    uint64_t v41 = a9;
    do
    {
      int v42 = v12[v41];
      float32x4_t v43 = 0uLL;
      if (v42 >= 1)
      {
        do
        {
          uint64_t v45 = *v11++;
          uint64_t v44 = v45;
          *(float *)&uint64_t v45 = *v10++;
          float32x4_t v43 = vmlaq_n_f32(v43, *(float32x4_t *)(v16 + 16 * v44), *(float *)&v45);
          --v42;
        }
        while (v42);
      }
      *(float32x4_t *)(v17 + 16 * v41++) = v43;
    }
    while (v41 != a10);
  }
}

int8x16_t *re::pathprocessing::ContinuousEdge::getIndex(int8x16_t *result, void *a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v4 = a3
       + 24
       * *(void *)(*(void *)(a2[1] + (((unint64_t)(a2[4] + a2[5] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((a2[4] + a2[5] - 1) & 0x1FF));
    *int32x2_t result = vextq_s8(*(int8x16_t *)(v4 + 8), *(int8x16_t *)(v4 + 8), 8uLL);
    uint64_t v5 = *(void *)v4;
  }
  else
  {
    uint64_t v6 = (int8x16_t *)(a3
                     + 24
                     * *(void *)(*(void *)(a2[1] + ((a2[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a2[4] & 0x1FFLL)));
    *int32x2_t result = *v6;
    uint64_t v5 = v6[1].i64[0];
  }
  result[1].i64[0] = v5;
  return result;
}

void re::pathprocessing::ContinuousEdge::appendBezier(re::pathprocessing::ContinuousEdge *this, uint64_t a2, uint64_t a3)
{
  if (a3 == 2)
  {
    unint64_t v10 = *((void *)this + 4);
    if (!v10)
    {
      uint64_t v11 = *((void *)this + 1);
      uint64_t v12 = *((void *)this + 2);
      uint64_t v13 = ((v12 - v11) << 6) - 1;
      unint64_t v14 = v12 - v11;
      if (v12 == v11) {
        uint64_t v13 = 0;
      }
      if ((unint64_t)(v13 - *((void *)this + 5)) < 0x200)
      {
        uint64_t v15 = (char *)this + 24;
        uint64_t v16 = *((void *)this + 3);
        uint64_t v17 = *(void *)this;
        uint64_t v18 = v16 - *(void *)this;
        if (v14 >= v18)
        {
          if (v16 == v17) {
            unint64_t v19 = 1;
          }
          else {
            unint64_t v19 = v18 >> 2;
          }
          uint64_t v57 = (uint64_t)this + 24;
          CMTime __p = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v15, v19);
          unint64_t v54 = (char *)__p;
          int v55 = (char *)__p;
          long long v56 = (char *)__p + 8 * v20;
          uint64_t v52 = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(&__p, &v52);
          int32x4_t v21 = (char *)*((void *)this + 1);
          int32x4_t v22 = v55;
          if (v21 == *((char **)this + 2))
          {
            uint64_t v41 = (char *)*((void *)this + 1);
          }
          else
          {
            do
            {
              if (v22 == v56)
              {
                int64_t v23 = v54 - (unsigned char *)__p;
                if (v54 <= __p)
                {
                  if (v22 == __p) {
                    unint64_t v31 = 1;
                  }
                  else {
                    unint64_t v31 = (v22 - (unsigned char *)__p) >> 2;
                  }
                  int v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v57, v31);
                  int v34 = v54;
                  int32x4_t v22 = &v32[8 * (v31 >> 2)];
                  uint64_t v35 = v55 - v54;
                  if (v55 != v54)
                  {
                    int32x4_t v22 = &v32[8 * (v31 >> 2) + (v35 & 0xFFFFFFFFFFFFFFF8)];
                    uint64_t v36 = 8 * (v35 >> 3);
                    uint64_t v37 = &v32[8 * (v31 >> 2)];
                    do
                    {
                      uint64_t v38 = *(void *)v34;
                      v34 += 8;
                      *(void *)uint64_t v37 = v38;
                      v37 += 8;
                      v36 -= 8;
                    }
                    while (v36);
                  }
                  uint64_t v39 = __p;
                  CMTime __p = v32;
                  unint64_t v54 = &v32[8 * (v31 >> 2)];
                  int v55 = v22;
                  long long v56 = &v32[8 * v33];
                  if (v39)
                  {
                    operator delete(v39);
                    int32x4_t v22 = v55;
                  }
                }
                else
                {
                  uint64_t v24 = v23 >> 3;
                  BOOL v25 = v23 >> 3 < -1;
                  uint64_t v26 = (v23 >> 3) + 2;
                  if (v25) {
                    uint64_t v27 = v26;
                  }
                  else {
                    uint64_t v27 = v24 + 1;
                  }
                  uint64_t v28 = &v54[-8 * (v27 >> 1)];
                  int64_t v29 = v22 - v54;
                  if (v22 != v54)
                  {
                    memmove(&v54[-8 * (v27 >> 1)], v54, v22 - v54);
                    int32x4_t v22 = v54;
                  }
                  int v30 = &v22[-8 * (v27 >> 1)];
                  int32x4_t v22 = &v28[v29];
                  unint64_t v54 = v30;
                  int v55 = &v28[v29];
                }
              }
              uint64_t v40 = *(void *)v21;
              v21 += 8;
              *(void *)int32x4_t v22 = v40;
              int32x4_t v22 = v55 + 8;
              v55 += 8;
            }
            while (v21 != *((char **)this + 2));
            uint64_t v41 = (char *)*((void *)this + 1);
          }
          uint64_t v44 = *(void **)this;
          uint64_t v45 = v54;
          *(void *)this = __p;
          *((void *)this + 1) = v45;
          CMTime __p = v44;
          unint64_t v54 = v41;
          uint64_t v46 = (char *)*((void *)this + 3);
          int v47 = v56;
          *((void *)this + 2) = v22;
          *((void *)this + 3) = v47;
          int v55 = v21;
          long long v56 = v46;
          if (v22 - v45 == 8) {
            uint64_t v48 = 256;
          }
          else {
            uint64_t v48 = *((void *)this + 4) + 512;
          }
          *((void *)this + 4) = v48;
          if (v21 != v41) {
            int v55 = &v21[(v41 - v21 + 7) & 0xFFFFFFFFFFFFFFF8];
          }
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          if (v11 == v17)
          {
            CMTime __p = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_back(this, &__p);
            uint64_t v42 = *((void *)this + 2);
            CMTime __p = *(void **)(v42 - 8);
            *((void *)this + 2) = v42 - 8;
          }
          else
          {
            CMTime __p = operator new(0x1000uLL);
          }
          std::__split_buffer<unsigned long *>::push_front((uint64_t)this, &__p);
          if (*((void *)this + 2) - *((void *)this + 1) == 8) {
            uint64_t v43 = 256;
          }
          else {
            uint64_t v43 = *((void *)this + 4) + 512;
          }
          *((void *)this + 4) = v43;
        }
      }
      else
      {
        *((void *)this + 4) = 512;
        CMTime __p = *(void **)(v12 - 8);
        *((void *)this + 2) = v12 - 8;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)this, &__p);
      }
      unint64_t v10 = *((void *)this + 4);
    }
    uint64_t v49 = *((void *)this + 1);
    uint64_t v50 = (void *)(v49 + 8 * (v10 >> 9));
    uint64_t v51 = *v50 + 8 * (v10 & 0x1FF);
    if (*((void *)this + 2) == v49) {
      uint64_t v51 = 0;
    }
    if (v51 == *v50) {
      uint64_t v51 = *(v50 - 1) + 4096;
    }
    *(void *)(v51 - 8) = a2;
    --*((void *)this + 4);
    uint64_t v5 = (void *)((char *)this + 40);
  }
  else
  {
    if (a3) {
      return;
    }
    uint64_t v5 = (void *)((char *)this + 40);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 1);
    if (v6 == v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = ((v6 - v7) << 6) - 1;
    }
    unint64_t v9 = *((void *)this + 5) + *((void *)this + 4);
    if (v8 == v9)
    {
      std::deque<unsigned long>::__add_back_capacity(this);
      uint64_t v7 = *((void *)this + 1);
      unint64_t v9 = *((void *)this + 5) + *((void *)this + 4);
    }
    *(void *)(*(void *)(v7 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = a2;
  }
  ++*v5;
}

void re::pathprocessing::ContinuousVertex::addEdgeFromEnd(void **a1, uint64_t a2, int a3)
{
  uint64_t v7 = (char *)a1[1];
  uint64_t v6 = (char *)a1[2];
  if (v7 >= v6)
  {
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v6 - (unsigned char *)*a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v12);
    unint64_t v14 = &v13[16 * v9];
    uint64_t v16 = &v13[16 * v15];
    *(void *)unint64_t v14 = a2;
    *((_DWORD *)v14 + 2) = a3;
    uint64_t v8 = v14 + 16;
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(void *)uint64_t v7 = a2;
    *((_DWORD *)v7 + 2) = a3;
    uint64_t v8 = v7 + 16;
  }
  a1[1] = v8;
}

uint64_t re::pathprocessing::ContinuousVertex::compareAngle(float32x2_t *a1, float32x2_t *a2)
{
  float32x2_t v3 = *a1;
  float32x2_t v2 = a1[1];
  float32x2_t v4 = vsub_f32(v2, *a1);
  int32x2_t v5 = (int32x2_t)vmul_f32(v4, v4);
  float32x2_t v6 = a2[1];
  float32x2_t v7 = vsub_f32(v6, *a2);
  int32x2_t v8 = (int32x2_t)vmul_f32(v7, v7);
  float32x2_t v9 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v5, v8), (float32x2_t)vzip2_s32(v5, v8)));
  __asm { FMOV            V7.2S, #1.0 }
  float32x2_t v15 = vdiv_f32(_D7, v9);
  float32x2_t v16 = vmul_n_f32(v4, v15.f32[0]);
  float32x2_t v17 = vmul_lane_f32(v7, v15, 1);
  if (fabsf(vmlas_n_f32((float)-v16.f32[1] * v17.f32[0], v17.f32[1], v16.f32[0])) >= 0.0001
    || vaddv_f32(vmul_f32(v16, v17)) <= 0.0001)
  {
    if (v16.f32[1] < 0.0) {
      v16.f32[0] = -2.0 - v16.f32[0];
    }
    if (v17.f32[1] < 0.0) {
      v17.f32[0] = -2.0 - v17.f32[0];
    }
    if (v16.f32[0] <= v17.f32[0]) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t result = 0;
    float32x2_t v20 = vadd_f32(vsub_f32(v3, vadd_f32(v2, v2)), a1[2]);
    int32x2_t v21 = (int32x2_t)vadd_f32(v20, v20);
    float32x2_t v22 = vmul_f32(v15, v15);
    float32x2_t v23 = vadd_f32(vsub_f32(*a2, vadd_f32(v6, v6)), a2[2]);
    int32x2_t v24 = (int32x2_t)vadd_f32(v23, v23);
    float32x2_t v25 = vneg_f32(v17);
    v25.f32[0] = -v16.f32[1];
    float32x2_t v26 = vmul_f32(v22, vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v21, v24), v25), (float32x2_t)vzip2_s32(v21, v24), (float32x2_t)vzip1_s32((int32x2_t)v16, (int32x2_t)v17)));
    if (v26.f32[0] != v26.f32[1] && vabds_f32(v26.f32[0], v26.f32[1]) > 0.0001)
    {
      if (v26.f32[0] >= v26.f32[1]) {
        return 1;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t re::pathprocessing::HDSMesh::HDSMesh(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2[3] != a2[4] && *a2 != a2[1] && a2[6] != a2[7]) {
    re::pathprocessing::HDSMesh::generateTopology((char **)a1, a2);
  }
  return a1;
}

void re::pathprocessing::HDSMesh::generateTopology(char **a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v4 - *a2) >> 3);
  uint64_t v8 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v9 = 0x1C71C71C71C71C72 * ((v4 - *a2) >> 3);
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a1) >> 4);
  unint64_t v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12) {
      a1[1] = &v11[0x5555555555555560 * ((v4 - *a2) >> 3)];
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)(a1 + 2);
    float32x2_t v15 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v10) >> 4) >= v13)
    {
      unint64_t v31 = &v10[48 * v13];
      uint64_t v32 = 0x5555555555555560 * ((v4 - *a2) >> 3) - 48 * v12;
      *(void *)&long long v33 = -1;
      *((void *)&v33 + 1) = -1;
      do
      {
        *(_OWORD *)unint64_t v10 = v33;
        *((_OWORD *)v10 + 1) = v33;
        *((void *)v10 + 4) = -1;
        *((void *)v10 + 5) = 0;
        v10 += 48;
        v32 -= 48;
      }
      while (v32);
      a1[1] = v31;
    }
    else
    {
      if (v9 > 0x555555555555555) {
        goto LABEL_71;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v9) {
        uint64_t v17 = 0x1C71C71C71C71C72 * ((v4 - *a2) >> 3);
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>(v14, v18);
      int32x2_t v21 = &v19[48 * v12];
      float32x2_t v22 = &v19[48 * v9];
      uint64_t v23 = 96 * v6 - 48 * v12;
      *(void *)&long long v24 = -1;
      *((void *)&v24 + 1) = -1;
      float32x2_t v25 = v21;
      do
      {
        *(_OWORD *)float32x2_t v25 = v24;
        *((_OWORD *)v25 + 1) = v24;
        *((void *)v25 + 4) = -1;
        *((void *)v25 + 5) = 0;
        v25 += 48;
        v23 -= 48;
      }
      while (v23);
      float32x2_t v26 = &v19[48 * v20];
      uint64_t v28 = *a1;
      uint64_t v27 = a1[1];
      if (v27 != *a1)
      {
        do
        {
          long long v29 = *((_OWORD *)v27 - 3);
          long long v30 = *((_OWORD *)v27 - 2);
          *(_OWORD *)(v21 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(v27 - 20);
          *((_OWORD *)v21 - 3) = v29;
          *((_OWORD *)v21 - 2) = v30;
          v21 -= 48;
          v27 -= 48;
        }
        while (v27 != v28);
        uint64_t v27 = *a1;
      }
      *a1 = v21;
      a1[1] = v22;
      a1[2] = v26;
      if (v27) {
        operator delete(v27);
      }
    }
  }
  unint64_t v34 = (v7 - v8) / 24;
  unint64_t v35 = v6 + 2 - v34;
  if (v6 + 2 < v34) {
    return;
  }
  uint64_t v36 = a1[3];
  if (v35 > (a1[5] - v36) >> 4)
  {
    if (!(v35 >> 60))
    {
      uint64_t v37 = (char *)(a1[4] - v36);
      uint64_t v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v35);
      uint64_t v39 = &v38[(unint64_t)v37 & 0xFFFFFFFFFFFFFFF0];
      uint64_t v41 = &v38[16 * v40];
      uint64_t v43 = a1[3];
      uint64_t v42 = a1[4];
      uint64_t v44 = v39;
      if (v42 != v43)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
          v44 -= 16;
          v42 -= 16;
        }
        while (v42 != v43);
        uint64_t v42 = a1[3];
      }
      a1[3] = v44;
      a1[4] = v39;
      a1[5] = v41;
      if (v42) {
        operator delete(v42);
      }
      goto LABEL_29;
    }
LABEL_71:
    abort();
  }
LABEL_29:
  if (v4 != v5)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    if (v6 <= 1) {
      uint64_t v47 = 1;
    }
    else {
      uint64_t v47 = v6;
    }
    uint64_t v48 = *a1 + 88;
    do
    {
      *(v48 - 12) = 0;
      *uint64_t v48 = 1;
      *((void *)v48 - 8) = v45 + 1;
      *((void *)v48 - 7) = v46;
      *((void *)v48 - 2) = v45;
      *((void *)v48 - 1) = v46++;
      v48 += 24;
      v45 += 2;
    }
    while (v47 != v46);
  }
  if (v7 != v8)
  {
    uint64_t v49 = 0;
    uint64_t v50 = a2[3];
    if (v34 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = (v7 - v8) / 24;
    }
    do
    {
      uint64_t v52 = (uint64_t *)(v50 + 24 * v49);
      uint64_t v53 = *v52;
      uint64_t v54 = v52[1] - *v52;
      if (v54)
      {
        unint64_t v55 = v54 >> 4;
        unint64_t v56 = v54 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v57 = *a1;
        if (v55 <= 1) {
          unint64_t v55 = 1;
        }
        uint64_t v58 = v56 + v53;
        int v59 = *(_DWORD *)(v58 - 8);
        uint64_t v60 = *(void *)(v58 - 16);
        uint64_t v61 = (_DWORD *)(v53 + 8);
        do
        {
          int v62 = *v61;
          unint64_t v63 = (v59 != 0) | (unint64_t)(2 * v60);
          uint64_t v64 = *((void *)v61 - 1);
          unint64_t v65 = (*v61 == 0) | (unint64_t)(2 * v64);
          *(void *)&v57[48 * v65 + 8] = v63;
          *(void *)&v57[48 * v63 + 16] = v65;
          v61 += 4;
          uint64_t v60 = v64;
          int v59 = v62;
          --v55;
        }
        while (v55);
      }
      ++v49;
    }
    while (v49 != v51);
  }
  unsigned int v67 = *a1;
  int v66 = a1[1];
  unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((v66 - *a1) >> 4);
  unsigned __int8 v87 = 0;
  std::vector<BOOL>::vector(&__p, v68, &v87);
  int v69 = __p;
  if (v66 != v67)
  {
    unint64_t v70 = 0;
    if (v68 <= 1) {
      unint64_t v68 = 1;
    }
    do
    {
      if (((1 << v70) & v69[v70 >> 6]) == 0)
      {
        uint64_t v71 = a1[3];
        std::vector<int>::size_type v72 = a1[4];
        uint64_t v73 = (v72 - v71) >> 4;
        unint64_t v74 = (unint64_t)a1[5];
        if ((unint64_t)v72 >= v74)
        {
          if ((unint64_t)(v73 + 1) >> 60) {
            goto LABEL_71;
          }
          uint64_t v76 = v74 - (void)v71;
          uint64_t v77 = v76 >> 3;
          if (v76 >> 3 <= (unint64_t)(v73 + 1)) {
            uint64_t v77 = v73 + 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          char v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v78);
          char v81 = &v79[16 * v73];
          *(_OWORD *)char v81 = xmmword_234378E20;
          uint64_t v75 = v81 + 16;
          int v83 = a1[3];
          uint64_t v82 = a1[4];
          if (v82 != v83)
          {
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
              v81 -= 16;
              v82 -= 16;
            }
            while (v82 != v83);
            uint64_t v82 = a1[3];
          }
          a1[3] = v81;
          a1[4] = v75;
          a1[5] = &v79[16 * v80];
          if (v82) {
            operator delete(v82);
          }
        }
        else
        {
          *(_OWORD *)std::vector<int>::size_type v72 = xmmword_234378E20;
          uint64_t v75 = v72 + 16;
        }
        a1[4] = v75;
        *((void *)v75 - 2) = v70;
        uint64_t v84 = *a1;
        int v69 = __p;
        unint64_t v85 = v70;
        do
        {
          uint64_t v86 = (uint64_t *)&v84[48 * v85];
          *uint64_t v86 = v73;
          *(void *)((char *)v69 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
          unint64_t v85 = v86[1];
        }
        while (v85 != v70);
        v69[v70 >> 6] |= 1 << v70;
      }
      ++v70;
    }
    while (v70 != v68);
    goto LABEL_68;
  }
  if (__p) {
LABEL_68:
  }
    operator delete(v69);
  *((unsigned char *)a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 1;
}

uint64_t *re::pathprocessing::BezierGraphInfo::BezierGraphInfo(uint64_t *a1, uint64_t *a2)
{
  float32x2_t v2 = a2;
  *((_OWORD *)a1 + 3) = 0u;
  unsigned int v269 = a1 + 6;
  a1[8] = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v5 == *a2)
  {
    a1[7] = 0x5555555555555558 * ((v5 - *a2) >> 3);
  }
  else
  {
    if (v6 >> 61) {
      goto LABEL_299;
    }
    std::vector<unsigned long>::__vallocate[abi:nn180100](v269, 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3));
    uint64_t v7 = (char *)a1[7];
    memset(v7, 255, 8 * v6);
    a1[7] = (uint64_t)&v7[8 * v6];
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
  }
  uint64_t v274 = (uint64_t *)v275;
  v275[0] = 0;
  v275[1] = 0;
  uint64_t v276 = v2;
  v260 = v2;
  if (v5 == v4)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    CMTime __p = 0;
    goto LABEL_244;
  }
  unint64_t v8 = 0;
  int v261 = a1 + 3;
  do
  {
    uint64_t v9 = v4 + 24 * v8;
    unint64_t v10 = std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(&v274, (void *)v9, *(float *)v9, *(float *)(v9 + 4));
    uint64_t v11 = v10;
    unint64_t v13 = (unint64_t *)*((void *)v10 + 7);
    unint64_t v12 = *((void *)v10 + 8);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = *((void *)v10 + 6);
      uint64_t v16 = ((uint64_t)v13 - v15) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        goto LABEL_299;
      }
      uint64_t v18 = v12 - v15;
      if (v18 >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v19);
      float32x2_t v22 = (unint64_t *)&v20[16 * v16];
      *float32x2_t v22 = v8;
      v22[1] = 0;
      long long v24 = (char *)*((void *)v11 + 6);
      uint64_t v23 = (char *)*((void *)v11 + 7);
      float32x2_t v25 = v22;
      if (v23 != v24)
      {
        do
        {
          *((_OWORD *)v25 - 1) = *((_OWORD *)v23 - 1);
          v25 -= 2;
          v23 -= 16;
        }
        while (v23 != v24);
        uint64_t v23 = (char *)*((void *)v11 + 6);
      }
      uint64_t v14 = v22 + 2;
      *((void *)v11 + 6) = v25;
      *((void *)v11 + 7) = v22 + 2;
      *((void *)v11 + 8) = &v20[16 * v21];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *unint64_t v13 = v8;
      v13[1] = 0;
      uint64_t v14 = v13 + 2;
    }
    *((void *)v11 + 7) = v14;
    float32x2_t v26 = std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(&v274, (void *)(v9 + 16), *(float *)(v9 + 16), *(float *)(v9 + 20));
    uint64_t v27 = v26;
    long long v29 = (unint64_t *)*((void *)v26 + 7);
    unint64_t v28 = *((void *)v26 + 8);
    if ((unint64_t)v29 >= v28)
    {
      uint64_t v31 = *((void *)v26 + 6);
      uint64_t v32 = ((uint64_t)v29 - v31) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        goto LABEL_299;
      }
      uint64_t v34 = v28 - v31;
      if (v34 >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      uint64_t v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v35);
      uint64_t v38 = (unint64_t *)&v36[16 * v32];
      *uint64_t v38 = v8;
      v38[1] = 2;
      uint64_t v40 = (char *)*((void *)v27 + 6);
      uint64_t v39 = (char *)*((void *)v27 + 7);
      uint64_t v41 = v38;
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
          v41 -= 2;
          v39 -= 16;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)*((void *)v27 + 6);
      }
      long long v30 = v38 + 2;
      *((void *)v27 + 6) = v41;
      *((void *)v27 + 7) = v38 + 2;
      *((void *)v27 + 8) = &v36[16 * v37];
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *long long v29 = v8;
      v29[1] = 2;
      long long v30 = v29 + 2;
    }
    *((void *)v27 + 7) = v30;
    ++v8;
    uint64_t v4 = *v276;
  }
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v276[1] - *v276) >> 3));
  uint64_t v42 = v274;
  if (v274 == (uint64_t *)v275)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    CMTime __p = 0;
    goto LABEL_243;
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v262 = 0;
  CMTime __p = 0;
  unint64_t v267 = 0;
  do
  {
    uint64_t v45 = (uint64_t *)v42[6];
    uint64_t v46 = v42[7] - (void)v45;
    if (v46 == 16)
    {
      uint64_t v48 = *a1;
      for (uint64_t i = a1[1]; i != v48; uint64_t i = std::deque<unsigned long>::~deque[abi:nn180100]((void *)(i - 72)))
        ;
      a1[1] = v48;
      _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(v261);
      a1[7] = a1[6];
      goto LABEL_49;
    }
    if (v46 != 32)
    {
      uint64_t v56 = (((char *)v44 - (char *)v43) << 6) - 1;
      uint64_t v57 = (char *)v44 - (char *)v43;
      if (v44 == v43) {
        uint64_t v56 = 0;
      }
      if (v56 != v267) {
        goto LABEL_157;
      }
      uint64_t v58 = v57 >> 3;
      if (v57 >> 3 < (unint64_t)(v262 - __p))
      {
        int v59 = operator new(0x1000uLL);
        uint64_t v60 = v59;
        if (v262 != v44)
        {
          *v44++ = v59;
LABEL_157:
          uint64_t v117 = v44;
LABEL_158:
          (*(void **)((char *)v43 + ((v267 >> 6) & 0x3FFFFFFFFFFFFF8)))[v267 & 0x1FF] = v42 + 5;
          ++v267;
          uint64_t v44 = v117;
          goto LABEL_170;
        }
        if (v43 == __p)
        {
          if (v44 == v43) {
            unint64_t v143 = 1;
          }
          else {
            unint64_t v143 = ((char *)v262 - (char *)v43) >> 2;
          }
          uint64_t v144 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v143);
          uint64_t v146 = v145;
          CMTime __p = v144;
          uint64_t v92 = (void **)((char *)v144 + ((2 * v143 + 6) & 0xFFFFFFFFFFFFFFF8));
          BOOL v55 = v44 == v43;
          uint64_t v44 = v92;
          if (!v55)
          {
            uint64_t v147 = 8 * v58;
            int v148 = v92;
            uint64_t v149 = v43;
            uint64_t v44 = &v92[v58];
            do
            {
              float v150 = *v149++;
              *v148++ = v150;
              v147 -= 8;
            }
            while (v147);
          }
          if (v43) {
            operator delete(v43);
          }
          *(v92 - 1) = v60;
          uint64_t v262 = &__p[v146];
          if (v44 != v262) {
            goto LABEL_156;
          }
        }
        else
        {
          *(v43 - 1) = v59;
          uint64_t v92 = v43;
        }
        if (v92 <= __p)
        {
          if (v44 == __p) {
            unint64_t v133 = 1;
          }
          else {
            unint64_t v133 = ((char *)v44 - (char *)__p) >> 2;
          }
          uint64_t v134 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v133);
          uint64_t v136 = v134;
          float v137 = &v134[v133 >> 2];
          uint64_t v138 = v44;
          uint64_t v44 = v137;
          uint64_t v139 = (char *)v138 - (char *)v92;
          if (v139)
          {
            uint64_t v44 = (void **)((char *)v137 + (v139 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v140 = 8 * (v139 >> 3);
            int v141 = (char *)&v134[v133 >> 2];
            do
            {
              uint64_t v142 = (uint64_t)*v92++;
              *(void *)int v141 = v142;
              v141 += 8;
              v140 -= 8;
            }
            while (v140);
          }
          uint64_t v262 = &v134[v135];
          if (__p) {
            operator delete(__p);
          }
          uint64_t v92 = v137;
          CMTime __p = v136;
        }
        else
        {
          uint64_t v93 = v92 - __p;
          if (v93 >= -1) {
            unint64_t v94 = v93 + 1;
          }
          else {
            unint64_t v94 = v93 + 2;
          }
          unint64_t v95 = v94 >> 1;
          int v96 = &v92[-v95];
          uint64_t v262 = v44;
          if (v44 != v92) {
            memmove(&v92[-v95], v92, (char *)v44 - (char *)v92);
          }
          uint64_t v44 = (void **)((char *)v96 + (char *)v44 - (char *)v92);
          uint64_t v92 = v96;
        }
LABEL_156:
        *v44++ = v60;
        uint64_t v43 = v92;
        goto LABEL_157;
      }
      unint64_t v65 = v44;
      if (v262 == __p) {
        unint64_t v66 = 1;
      }
      else {
        unint64_t v66 = ((char *)v262 - (char *)__p) >> 2;
      }
      unsigned int v67 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v66);
      uint64_t v69 = v68;
      unint64_t v70 = &v67[v58];
      uint64_t v263 = (char *)&v67[v68];
      uint64_t v71 = operator new(0x1000uLL);
      if (v58 == v69)
      {
        uint64_t v72 = 8 * v58;
        uint64_t v73 = v65;
        if (v57 < 1)
        {
          int v112 = v71;
          uint64_t v113 = v72 >> 2;
          if (v65 == v43) {
            unint64_t v114 = 1;
          }
          else {
            unint64_t v114 = v113;
          }
          uint64_t v115 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v114);
          unint64_t v70 = &v115[v114 >> 2];
          uint64_t v263 = (char *)&v115[v116];
          if (v67) {
            operator delete(v67);
          }
          unsigned int v67 = v115;
          uint64_t v73 = v65;
          uint64_t v71 = v112;
        }
        else
        {
          uint64_t v74 = v72 >> 3;
          if (v74 >= -1) {
            unint64_t v75 = v74 + 1;
          }
          else {
            unint64_t v75 = v74 + 2;
          }
          v70 -= v75 >> 1;
        }
      }
      else
      {
        uint64_t v73 = v65;
      }
      char *v70 = v71;
      uint64_t v117 = v70 + 1;
      uint64_t v118 = (void **)v263;
      if (v73 == v43)
      {
LABEL_135:
        uint64_t v262 = v118;
        if (__p) {
          operator delete(__p);
        }
        uint64_t v43 = v70;
        CMTime __p = v67;
        goto LABEL_158;
      }
      while (1)
      {
        if (v70 == v67)
        {
          if (v117 < v118)
          {
            uint64_t v121 = v118 - v117;
            if (v121 >= -1) {
              unint64_t v122 = v121 + 1;
            }
            else {
              unint64_t v122 = v121 + 2;
            }
            __float2 v119 = &v117[v122 >> 1];
            uint64_t v120 = &v70[v122 >> 1];
            if (v117 == v70) {
              unint64_t v70 = v117;
            }
            else {
              memmove(&v70[v122 >> 1], v70, (char *)v117 - (char *)v70);
            }
            goto LABEL_134;
          }
          if (v118 == v70) {
            unint64_t v123 = 1;
          }
          else {
            unint64_t v123 = ((char *)v118 - (char *)v70) >> 2;
          }
          uint64_t v124 = 2 * v123;
          uint64_t v125 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v123);
          unsigned int v67 = v125;
          uint64_t v120 = (void **)((char *)v125 + ((v124 + 6) & 0xFFFFFFFFFFFFFFF8));
          __float2 v119 = v120;
          uint64_t v127 = (char *)v117 - (char *)v70;
          if (v117 != v70)
          {
            __float2 v119 = (void **)((char *)v120 + (v127 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v128 = 8 * (v127 >> 3);
            uint64_t v129 = v120;
            int v130 = v70;
            do
            {
              uint64_t v131 = *v130++;
              *v129++ = v131;
              v128 -= 8;
            }
            while (v128);
          }
          uint64_t v118 = &v125[v126];
          operator delete(v70);
        }
        else
        {
          __float2 v119 = v117;
          uint64_t v120 = v70;
        }
        unint64_t v70 = v67;
LABEL_134:
        int v132 = *--v73;
        *(v120 - 1) = v132;
        unsigned int v67 = v70;
        unint64_t v70 = v120 - 1;
        uint64_t v117 = v119;
        if (v73 == v43) {
          goto LABEL_135;
        }
      }
    }
    uint64_t v49 = v44;
    uint64_t v50 = *v45;
    uint64_t v51 = *v269;
    uint64_t v52 = v45[2];
    uint64_t v53 = *(void *)(*v269 + 8 * *v45);
    uint64_t v54 = *(void *)(*v269 + 8 * v52);
    BOOL v55 = v53 == -1 && v54 == -1;
    if (v55)
    {
      unint64_t v61 = a1[1];
      unint64_t v62 = 0x8E38E38E38E38E39 * ((uint64_t)(v61 - *a1) >> 3);
      unint64_t v63 = a1[2];
      if (v61 >= v63)
      {
        unint64_t v76 = v62 + 1;
        if (v62 + 1 > 0x38E38E38E38E38ELL) {
          goto LABEL_299;
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v63 - *a1) >> 3) > v76) {
          unint64_t v76 = 0x1C71C71C71C71C72 * ((uint64_t)(v63 - *a1) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a1) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v77 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v77 = v76;
        }
        v283 = a1 + 2;
        unint64_t v78 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v77);
        char v79 = &v78[9 * v62];
        uint64_t v279 = v78;
        v280 = v79;
        uint64_t v282 = &v78[9 * v80];
        v79[8] = 0;
        *(_OWORD *)char v79 = 0u;
        *((_OWORD *)v79 + 1) = 0u;
        *((_OWORD *)v79 + 2) = 0u;
        *((_OWORD *)v79 + 3) = 0u;
        *((unsigned char *)v79 + 64) = 1;
        unsigned int v281 = v79 + 9;
        std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(a1, &v279);
        unint64_t v64 = a1[1];
        std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
      }
      else
      {
        *(void *)(v61 + 64) = 0;
        *(_OWORD *)(v61 + 32) = 0u;
        *(_OWORD *)(v61 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
        *(_OWORD *)unint64_t v61 = 0u;
        *(_OWORD *)(v61 + 16) = 0u;
        unint64_t v64 = v61 + 72;
        *(unsigned char *)(v61 + 64) = 1;
      }
      a1[1] = v64;
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v64 - 72), *(void *)v42[6], *(void *)(v42[6] + 8));
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v64 - 72), *(void *)(v42[6] + 16), *(void *)(v42[6] + 24));
      *(void *)(v51 + 8 * v5re::VariableStepTimer::setClock((uint64_t)this, 0) = v62;
      *(void *)(v51 + 8 * v52) = v62;
      goto LABEL_169;
    }
    if (v53 == -1)
    {
      if (v54 != -1)
      {
        re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(*a1 + 72 * v54), *v45, v45[1]);
        *(void *)(v51 + 8 * v5re::VariableStepTimer::setClock((uint64_t)this, 0) = *(void *)(v51 + 8 * v52);
        goto LABEL_169;
      }
    }
    else if (v54 == -1)
    {
      re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(*a1 + 72 * v53), v45[2], v45[3]);
      *(void *)(v51 + 8 * v52) = *(void *)(v51 + 8 * v50);
LABEL_169:
      uint64_t v44 = v49;
      goto LABEL_170;
    }
    if (v53 == v54)
    {
      uint64_t v82 = (void *)a1[4];
      unint64_t v81 = a1[5];
      if ((unint64_t)v82 >= v81)
      {
        unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v82 - *v261) >> 3);
        unint64_t v98 = v97 + 1;
        if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_299;
        }
        unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v81 - *v261) >> 3);
        if (2 * v99 > v98) {
          unint64_t v98 = 2 * v99;
        }
        if (v99 >= 0x555555555555555) {
          unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v100 = v98;
        }
        v283 = a1 + 5;
        if (v100) {
          unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v100);
        }
        else {
          uint64_t v101 = 0;
        }
        uint64_t v158 = (uint64_t *)(v100 + 24 * v97);
        uint64_t v279 = (uint64_t *)v100;
        v280 = v158;
        uint64_t v282 = (uint64_t *)(v100 + 24 * v101);
        *uint64_t v158 = 0;
        v158[1] = 0;
        v158[2] = 0;
        unsigned int v281 = v158 + 3;
        std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v261, &v279);
        int v83 = (void **)a1[4];
        std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer((uint64_t)&v279);
      }
      else
      {
        *uint64_t v82 = 0;
        v82[1] = 0;
        int v83 = (void **)(v82 + 3);
        v82[2] = 0;
      }
      a1[4] = (uint64_t)v83;
      re::pathprocessing::ContinuousVertex::addEdgeFromEnd(v83 - 3, *(void *)(v51 + 8 * v50), 0);
      re::pathprocessing::ContinuousVertex::addEdgeFromEnd(v83 - 3, *(void *)(v51 + 8 * v52), 1);
      goto LABEL_169;
    }
    uint64_t v84 = *a1;
    unint64_t v85 = (void *)(*a1 + 72 * v54);
    uint64_t v86 = (int64x2_t *)(*a1 + 72 * v53);
    unint64_t v87 = v86[2].u64[0];
    unint64_t v88 = v87 + v86[2].i64[1];
    uint64_t v89 = v86->i64[1];
    if (*(void *)(*(void *)(v89 + (((v88 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v88 - 1) & 0x1FF)) != v50)
    {
      int v90 = (char *)(v89 + 8 * (v87 >> 9));
      if (*(void *)(*(void *)v90 + 8 * (v86[2].i64[0] & 0x1FF)) != v50) {
        goto LABEL_188;
      }
      unint64_t v102 = v85[4];
      unint64_t v103 = v102 + v85[5];
      uint64_t v104 = v85[1];
      uint64_t v105 = v85[2];
      if (v86[1].i64[0] == v89) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = *(void *)v90 + 8 * (v86[2].i64[0] & 0x1FF);
      }
      if (*(void *)(*(void *)(v104 + (((v103 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v103 - 1) & 0x1FF)) == v52)
      {
        uint64_t v106 = (uint64_t *)(v104 + 8 * (v102 >> 9));
        uint64_t v107 = *a1;
        if (v105 == v104)
        {
          int v108 = 0;
          __int32 v154 = 0;
          uint64_t v109 = (uint64_t *)(v104 + 8 * (v103 >> 9));
          goto LABEL_183;
        }
        int v108 = (char *)(*v106 + 8 * (v85[4] & 0x1FFLL));
        uint64_t v109 = (uint64_t *)(v104 + 8 * (v103 >> 9));
        uint64_t v110 = *v109;
        uint64_t v111 = v103 & 0x1FF;
        goto LABEL_163;
      }
      int v161 = (void *)(v104 + 8 * (v103 >> 9));
      uint64_t v107 = *a1;
      if (v105 == v104)
      {
        uint64_t v162 = 0;
        uint64_t v164 = 0;
        int v163 = (void *)(v104 + 8 * (v102 >> 9));
      }
      else
      {
        uint64_t v162 = *v161 + 8 * (v103 & 0x1FF);
        int v163 = (void *)(v104 + 8 * (v102 >> 9));
        uint64_t v164 = *v163 + 8 * (v85[4] & 0x1FFLL);
      }
      v271[0] = v161;
      v271[1] = v162;
      v271[2] = v161;
      v271[3] = v162;
      v270[0] = v163;
      v270[1] = v164;
      v270[2] = v163;
      v270[3] = v164;
      uint64_t v165 = v271;
      uint64_t v166 = (long long *)v270;
LABEL_186:
      std::deque<unsigned long>::insert<std::reverse_iterator<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>,0>(v86, v90, v91, (uint64_t)v165, v166);
      goto LABEL_187;
    }
    int v90 = (char *)(v89 + 8 * (v88 >> 9));
    if (v86[1].i64[0] == v89) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = *(void *)v90 + 8 * (v88 & 0x1FF);
    }
    uint64_t v151 = v85[1];
    unint64_t v152 = v85[4];
    uint64_t v106 = (uint64_t *)(v151 + 8 * (v152 >> 9));
    int v108 = (char *)(*v106 + 8 * (v152 & 0x1FF));
    if (*(void *)v108 != v52)
    {
      unint64_t v155 = v85[5] + v152;
      uint64_t v156 = (void *)(v151 + 8 * (v155 >> 9));
      uint64_t v107 = *a1;
      if (v85[2] == v151)
      {
        uint64_t v157 = 0;
        int v108 = 0;
      }
      else
      {
        uint64_t v157 = *v156 + 8 * (v155 & 0x1FF);
      }
      v273[0] = v156;
      v273[1] = v157;
      v273[2] = v156;
      v273[3] = v157;
      v272[0] = v106;
      v272[1] = v108;
      v272[2] = v106;
      v272[3] = v108;
      uint64_t v165 = v273;
      uint64_t v166 = (long long *)v272;
      goto LABEL_186;
    }
    uint64_t v107 = *a1;
    if (v85[2] == v151)
    {
      int v108 = 0;
      __int32 v154 = 0;
      uint64_t v109 = (uint64_t *)(v151 + 8 * ((v85[5] + v152) >> 9));
      goto LABEL_183;
    }
    unint64_t v153 = v85[5] + v152;
    uint64_t v109 = (uint64_t *)(v151 + 8 * (v153 >> 9));
    uint64_t v110 = *v109;
    uint64_t v111 = v153 & 0x1FF;
LABEL_163:
    __int32 v154 = (char *)(v110 + 8 * v111);
LABEL_183:
    std::deque<unsigned long>::insert<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>((uint64_t)v86, v90, v91, v106, v108, v109, v154);
LABEL_187:
    uint64_t v84 = v107;
LABEL_188:
    uint64_t v167 = v85[1];
    if (v85[2] != v167)
    {
      unint64_t v168 = v85[4];
      int v169 = (char **)(v167 + 8 * (v168 >> 9));
      unint64_t v170 = *v169;
      uint64_t v171 = &(*v169)[8 * (v168 & 0x1FF)];
      uint64_t v172 = *(void *)(v167 + (((v85[5] + v168) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v85[5] + v168) & 0x1FF);
      if (v171 != (char *)v172)
      {
        uint64_t v173 = *v269;
        do
        {
          uint64_t v174 = *(void *)v171;
          v171 += 8;
          *(void *)(v173 + 8 * v174) = *(void *)(v51 + 8 * v50);
          if (v171 - v170 == 4096)
          {
            uint64_t v175 = v169[1];
            ++v169;
            unint64_t v170 = v175;
            uint64_t v171 = v175;
          }
        }
        while (v171 != (char *)v172);
      }
    }
    *(unsigned char *)(v84 + 72 * v54 + 64) = 0;
    uint64_t v44 = v49;
LABEL_49:
    if (v46 == 16) {
      goto LABEL_291;
    }
LABEL_170:
    int v159 = (uint64_t *)v42[1];
    if (v159)
    {
      do
      {
        uint64_t v160 = v159;
        int v159 = (uint64_t *)*v159;
      }
      while (v159);
    }
    else
    {
      do
      {
        uint64_t v160 = (uint64_t *)v42[2];
        BOOL v55 = *v160 == (void)v42;
        uint64_t v42 = v160;
      }
      while (!v55);
    }
    uint64_t v42 = v160;
  }
  while (v160 != (uint64_t *)v275);
  unint64_t v176 = v267;
  if (!v267)
  {
LABEL_243:
    float32x2_t v2 = v260;
    goto LABEL_244;
  }
  do
  {
    float v265 = v44;
    unint64_t v268 = v176;
    unint64_t v177 = v176 - 1;
    uint64_t v178 = (*(void **)((char *)v43 + (((v176 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v176 - 1) & 0x1FF];
    uint64_t v180 = (void *)a1[4];
    unint64_t v179 = a1[5];
    unint64_t v264 = v177;
    if ((unint64_t)v180 >= v179)
    {
      unint64_t v182 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v180 - *v261) >> 3);
      unint64_t v183 = v182 + 1;
      if (v182 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_299;
      }
      unint64_t v184 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - *v261) >> 3);
      if (2 * v184 > v183) {
        unint64_t v183 = 2 * v184;
      }
      if (v184 >= 0x555555555555555) {
        unint64_t v185 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v185 = v183;
      }
      v283 = a1 + 5;
      if (v185) {
        unint64_t v185 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v185);
      }
      else {
        uint64_t v186 = 0;
      }
      uint64_t v187 = (uint64_t *)(v185 + 24 * v182);
      uint64_t v279 = (uint64_t *)v185;
      v280 = v187;
      uint64_t v282 = (uint64_t *)(v185 + 24 * v186);
      *uint64_t v187 = 0;
      v187[1] = 0;
      v187[2] = 0;
      unsigned int v281 = v187 + 3;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v261, &v279);
      int v181 = (void *)a1[4];
      std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer((uint64_t)&v279);
    }
    else
    {
      *uint64_t v180 = 0;
      v180[1] = 0;
      int v181 = v180 + 3;
      v180[2] = 0;
    }
    a1[4] = (uint64_t)v181;
    uint64_t v189 = *(uint64_t **)(v178 + 8);
    uint64_t v188 = *(uint64_t **)(v178 + 16);
    while (v189 != v188)
    {
      uint64_t v190 = *v269;
      uint64_t v191 = *v189;
      BOOL v192 = v189[1] != 0;
      if (*(void *)(*v269 + 8 * *v189) == -1)
      {
        uint64_t v194 = *a1;
        unint64_t v193 = a1[1];
        unint64_t v195 = 0x8E38E38E38E38E39 * ((uint64_t)(v193 - *a1) >> 3);
        *(void *)(v190 + 8 * v191) = v195;
        unint64_t v196 = a1[2];
        if (v193 >= v196)
        {
          unint64_t v198 = v195 + 1;
          if (v195 + 1 > 0x38E38E38E38E38ELL) {
            goto LABEL_299;
          }
          unint64_t v199 = 0x8E38E38E38E38E39 * ((uint64_t)(v196 - v194) >> 3);
          if (2 * v199 > v198) {
            unint64_t v198 = 2 * v199;
          }
          if (v199 >= 0x1C71C71C71C71C7) {
            unint64_t v200 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v200 = v198;
          }
          v283 = a1 + 2;
          int v201 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v200);
          int v202 = &v201[9 * v195];
          uint64_t v279 = v201;
          v280 = v202;
          uint64_t v282 = &v201[9 * v203];
          v202[8] = 0;
          *(_OWORD *)int v202 = 0u;
          *((_OWORD *)v202 + 1) = 0u;
          *((_OWORD *)v202 + 2) = 0u;
          *((_OWORD *)v202 + 3) = 0u;
          *((unsigned char *)v202 + 64) = 1;
          unsigned int v281 = v202 + 9;
          std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(a1, &v279);
          unint64_t v197 = a1[1];
          std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
        }
        else
        {
          *(void *)(v193 + 64) = 0;
          *(_OWORD *)(v193 + 32) = 0u;
          *(_OWORD *)(v193 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
          *(_OWORD *)unint64_t v193 = 0u;
          *(_OWORD *)(v193 + 16) = 0u;
          unint64_t v197 = v193 + 72;
          *(unsigned char *)(v193 + 64) = 1;
        }
        a1[1] = v197;
        re::pathprocessing::ContinuousEdge::appendBezier((re::pathprocessing::ContinuousEdge *)(v197 - 72), *v189, v189[1]);
      }
      unint64_t v205 = *(v181 - 2);
      unint64_t v204 = *(v181 - 1);
      if (v205 >= v204)
      {
        uint64_t v207 = *(v181 - 3);
        uint64_t v208 = (uint64_t)(v205 - v207) >> 4;
        unint64_t v209 = v208 + 1;
        if ((unint64_t)(v208 + 1) >> 60) {
          goto LABEL_299;
        }
        uint64_t v210 = v204 - v207;
        if (v210 >> 3 > v209) {
          unint64_t v209 = v210 >> 3;
        }
        if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v211 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v211 = v209;
        }
        uint64_t v212 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v211);
        uint64_t v214 = &v212[16 * v208];
        *(void *)uint64_t v214 = *(void *)(v190 + 8 * v191);
        *((_DWORD *)v214 + 2) = v192;
        unsigned int v216 = (char *)*(v181 - 3);
        uint64_t v215 = (char *)*(v181 - 2);
        int v217 = v214;
        if (v215 != v216)
        {
          do
          {
            *((_OWORD *)v217 - 1) = *((_OWORD *)v215 - 1);
            v217 -= 16;
            v215 -= 16;
          }
          while (v215 != v216);
          uint64_t v215 = (char *)*(v181 - 3);
        }
        uint64_t v206 = v214 + 16;
        *(v181 - 3) = v217;
        *(v181 - 2) = v214 + 16;
        *(v181 - 1) = &v212[16 * v213];
        if (v215) {
          operator delete(v215);
        }
      }
      else
      {
        *(void *)unint64_t v205 = *(void *)(v190 + 8 * v191);
        *(_DWORD *)(v205 + 8) = v192;
        uint64_t v206 = (char *)(v205 + 16);
      }
      *(v181 - 2) = v206;
      v189 += 2;
    }
    uint64_t v44 = v265;
    uint64_t v218 = (((char *)v265 - (char *)v43) << 6) - 1;
    if (v265 == v43) {
      uint64_t v218 = 0;
    }
    if (v218 - v268 - 1023 <= 0xFFFFFFFFFFFFFBFFLL)
    {
      uint64_t v44 = v265 - 1;
      operator delete(*(v265 - 1));
    }
    float32x2_t v2 = v260;
    unint64_t v176 = v264;
  }
  while (v264);
LABEL_244:
  int v219 = (void *)a1[1];
  if (v219 != (void *)*a1)
  {
    unint64_t v220 = 0x8E38E38E38E38E39 * (((uint64_t)v219 - *a1) >> 3);
    if (!(v220 >> 61))
    {
      int v221 = operator new(0x71C71C71C71C71C8 * (((uint64_t)v219 - *a1) >> 3));
      bzero(v221, 8 * v220);
      long long v277 = 0uLL;
      v278[0] = 0;
      v283 = v278;
      uint64_t v279 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v220);
      v280 = v279;
      unsigned int v281 = v279;
      uint64_t v282 = &v279[9 * v222];
      std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer((uint64_t *)&v277, &v279);
      std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
      uint64_t v223 = *a1;
      int v219 = (void *)a1[1];
      if (v219 == (void *)*a1)
      {
        int v219 = (void *)*a1;
      }
      else
      {
        float v266 = v44;
        uint64_t v224 = 0;
        unint64_t v225 = 0;
        uint64_t v226 = 32;
        do
        {
          if (*(unsigned char *)(v223 + v226 + 32))
          {
            int v227 = (void *)(v223 + v226 - 32);
            long long v228 = v277;
            uint64_t v229 = (*((void *)&v277 + 1) - (void)v277) / 72;
            *((void *)v221 + v225) = v224 + v229;
            if (*((void *)&v228 + 1) >= v278[0])
            {
              uint64_t v233 = v229 + 1;
              if ((unint64_t)(v229 + 1) > 0x38E38E38E38E38ELL) {
                goto LABEL_299;
              }
              if ((unint64_t)(0x1C71C71C71C71C72 * ((uint64_t)(v278[0] - v228) >> 3)) > *((void *)&v228 + 1)) {
                uint64_t v233 = 0x1C71C71C71C71C72 * ((uint64_t)(v278[0] - v228) >> 3);
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v278[0] - v228) >> 3) >= 0x1C71C71C71C71C7) {
                unint64_t v234 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v234 = v233;
              }
              v283 = v278;
              if (v234) {
                unint64_t v234 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(v234);
              }
              else {
                uint64_t v235 = 0;
              }
              unint64_t v236 = v234 + 72 * v229;
              uint64_t v279 = (uint64_t *)v234;
              v280 = (uint64_t *)v236;
              uint64_t v282 = (uint64_t *)(v234 + 72 * v235);
              *(void *)unint64_t v236 = *v227;
              int v237 = (void *)(v223 + v226);
              *(void *)(v236 + 8) = *(void *)(v223 + v226 - 24);
              *(void *)(v236 + 16) = *(void *)(v223 + v226 - 16);
              *(void *)(v236 + 24) = *(void *)(v223 + v226 - 8);
              *(_OWORD *)int v227 = 0u;
              *(_OWORD *)(v223 + v226 - 16) = 0u;
              *(void *)(v236 + 32) = *(void *)(v223 + v226);
              *(void *)(v236 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *(void *)(v223 + v226 + 8);
              void *v237 = 0;
              v237[1] = 0;
              long long v238 = *(_OWORD *)(v223 + v226 + 16);
              *(unsigned char *)(v236 + 64) = *(unsigned char *)(v223 + v226 + 32);
              *(_OWORD *)(v236 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v238;
              unsigned int v281 = (uint64_t *)(v236 + 72);
              std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer((uint64_t *)&v277, &v279);
              uint64_t v232 = *((void *)&v277 + 1);
              std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer((uint64_t)&v279);
            }
            else
            {
              **((void **)&v228 + 1) = *v227;
              int v230 = (void *)(v223 + v226);
              *(_OWORD *)(*((void *)&v228 + 1) + 8) = *(_OWORD *)(v223 + v226 - 24);
              *(void *)(*((void *)&v228 + 1) + 24) = *(void *)(v223 + v226 - 8);
              *(_OWORD *)int v227 = 0u;
              *(_OWORD *)(v223 + v226 - 16) = 0u;
              *(_OWORD *)(*((void *)&v228 + 1) + 32) = *(_OWORD *)(v223 + v226);
              *int v230 = 0;
              v230[1] = 0;
              long long v231 = *(_OWORD *)(v223 + v226 + 16);
              *(unsigned char *)(*((void *)&v228 + 1) + 64) = *(unsigned char *)(v223 + v226 + 32);
              *(_OWORD *)(*((void *)&v228 + 1) + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v231;
              uint64_t v232 = *((void *)&v228 + 1) + 72;
            }
            *((void *)&v277 + 1) = v232;
            uint64_t v223 = *a1;
            int v219 = (void *)a1[1];
          }
          ++v225;
          v226 += 72;
          --v224;
        }
        while (v225 < 0x8E38E38E38E38E39 * (((uint64_t)v219 - v223) >> 3));
        float32x2_t v2 = v260;
        uint64_t v44 = v266;
      }
      goto LABEL_266;
    }
LABEL_299:
    abort();
  }
  int v221 = 0;
  long long v277 = 0uLL;
  uint64_t v223 = (uint64_t)v219;
  v278[0] = 0;
LABEL_266:
  uint64_t v239 = a1[3];
  uint64_t v240 = a1[4];
  while (v239 != v240)
  {
    v241 = *(void **)v239;
    v242 = *(void **)(v239 + 8);
    while (v241 != v242)
    {
      *v241 += *((void *)v221 + *v241);
      v241 += 2;
    }
    v239 += 24;
  }
  int v243 = (void *)a1[6];
  v244 = (void *)a1[7];
  while (v243 != v244)
  {
    *v243 += *((void *)v221 + *v243);
    ++v243;
  }
  if (v223)
  {
    if (v219 != (void *)v223)
    {
      do
        int v219 = (void *)std::deque<unsigned long>::~deque[abi:nn180100](v219 - 9);
      while (v219 != (void *)v223);
      int v219 = (void *)*a1;
    }
    a1[1] = v223;
    operator delete(v219);
  }
  *(_OWORD *)a1 = v277;
  a1[2] = v278[0];
  v278[0] = 0;
  long long v277 = 0uLL;
  uint64_t v279 = (uint64_t *)&v277;
  std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100]((void ***)&v279);
  if (v221) {
    operator delete(v221);
  }
  uint64_t v245 = a1[3];
  if (a1[4] != v245)
  {
    unint64_t v246 = 0;
    do
    {
      v247 = (uint64_t *)(v245 + 24 * v246);
      uint64_t v248 = *v247;
      unint64_t v249 = v247[1];
      unint64_t v250 = 126 - 2 * __clz((uint64_t)(v249 - *v247) >> 4);
      BOOL v55 = v249 == *v247;
      uint64_t v279 = a1;
      v280 = v2;
      if (v55) {
        uint64_t v251 = 0;
      }
      else {
        uint64_t v251 = v250;
      }
      std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(v248, v249, &v279, v251, 1);
      uint64_t v252 = *v247;
      uint64_t v253 = v247[1];
      if (*v247 != v253)
      {
        uint64_t v254 = *a1;
        do
        {
          *(void *)(v254 + 72 * *(void *)v252 + 8 * *(unsigned int *)(v252 + 8) + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v246;
          v252 += 16;
        }
        while (v252 != v253);
      }
      ++v246;
      uint64_t v245 = a1[3];
    }
    while (v246 < 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v245) >> 3));
  }
LABEL_291:
  unint64_t v255 = (char *)v44 - (char *)v43;
  if ((unint64_t)((char *)v44 - (char *)v43) >= 0x11)
  {
    do
    {
      unint64_t v256 = *v43++;
      operator delete(v256);
      v255 -= 8;
    }
    while (v255 > 0x10);
  }
  while (v43 != v44)
  {
    uint64_t v257 = *v43++;
    operator delete(v257);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(v275[0]);
  return a1;
}

void *std::deque<unsigned long>::insert<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>,0>(uint64_t a1, char *a2, uint64_t a3, uint64_t *a4, char *a5, uint64_t *a6, char *a7)
{
  unint64_t v8 = a6;
  unint64_t v10 = a4;
  if (a7 == a5) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = ((uint64_t)&a7[-*a6] >> 3) + (((char *)a6 - (char *)a4) << 6) - ((uint64_t)&a5[-*a4] >> 3);
  }
  unint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = v13 >> 9;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 16);
  unint64_t v17 = (char *)(v15 + 8 * (v13 >> 9));
  if (v16 == v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)v17 + 8 * (*(void *)(a1 + 32) & 0x1FFLL);
  }
  if (a3 == v18) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = ((a3 - *(void *)a2) >> 3) + ((a2 - v17) << 6) - ((v18 - *(void *)v17) >> 3);
  }
  uint64_t v20 = *(void *)(a1 + 40);
  unint64_t v111 = v19;
  if (v19 < v20 - v19)
  {
    if (v12 > v13)
    {
      std::deque<unsigned long>::__add_front_capacity((void **)a1, v12 - v13);
      unint64_t v19 = v111;
      unint64_t v13 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      unint64_t v14 = v13 >> 9;
    }
    uint64_t v21 = (void **)(v15 + 8 * v14);
    if (v16 == v15) {
      float32x2_t v22 = 0;
    }
    else {
      float32x2_t v22 = (char *)*v21 + 8 * (v13 & 0x1FF);
    }
    __dst[0] = (void *)(v15 + 8 * v14);
    __dst[1] = v22;
    if (v12 <= v19)
    {
      long long v29 = a5;
      if (!v12)
      {
LABEL_129:
        unint64_t v19 = v111;
        goto LABEL_130;
      }
LABEL_57:
      uint64_t v46 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)__dst, v12);
      uint64_t v48 = v46;
      uint64_t v49 = v47;
      uint64_t v50 = (char *)__dst[1];
      if (__dst[1] != v47)
      {
        uint64_t v51 = (char *)*v21;
        uint64_t v52 = v46;
        uint64_t v53 = v47;
        do
        {
          if (v22 == v51)
          {
            uint64_t v54 = (char *)*--v21;
            uint64_t v51 = v54;
            float32x2_t v22 = v54 + 4096;
          }
          if (v53 == (char *)*v52)
          {
            uint64_t v55 = *--v52;
            uint64_t v53 = (char *)(v55 + 4096);
          }
          uint64_t v56 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v22 - 1) = v56;
          v22 -= 8;
          *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_2343A9950);
        }
        while (v53 != v50);
      }
      if (v12 >= v111)
      {
        int v59 = (void **)__dst[0];
      }
      else
      {
        uint64_t v57 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)__dst, v111);
        __n128 v113 = *(__n128 *)__dst;
        std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(v48, v49, v57, v58, (uint64_t)&v113);
        uint64_t v50 = (char *)v113.n128_u64[1];
        int v59 = (void **)v113.n128_u64[0];
        *(__n128 *)__dst = v113;
      }
      if (v10 == v8)
      {
        unint64_t v70 = v29;
        uint64_t v71 = a7;
      }
      else
      {
        unint64_t v61 = (char *)*v10;
        uint64_t v60 = v10 + 1;
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v29, v61 + 4096, v59, v50);
        unint64_t v62 = (void **)v113.n128_u64[1];
        unint64_t v63 = v114;
        if (v60 != v8)
        {
          unint64_t v64 = *(char **)v113.n128_u64[1];
          do
          {
            uint64_t v65 = 0;
            uint64_t v66 = *v60;
            for (++v62; ; ++v62)
            {
              uint64_t v67 = v64 - v63 + 4096;
              if ((4096 - 8 * v65) >> 3 >= v67 >> 3) {
                uint64_t v68 = v67 >> 3;
              }
              else {
                uint64_t v68 = (4096 - 8 * v65) >> 3;
              }
              if (v68) {
                memmove(v63, (const void *)(v66 + 8 * v65), 8 * v68);
              }
              v65 += v68;
              if (v65 == 512) {
                break;
              }
              uint64_t v69 = (char *)*v62;
              unint64_t v64 = v69;
              unint64_t v63 = v69;
            }
            v63 += 8 * v68;
            unint64_t v64 = (char *)*(v62 - 1);
            if (v64 + 4096 == v63)
            {
              unint64_t v64 = (char *)*v62;
              unint64_t v63 = (char *)*v62;
            }
            else
            {
              --v62;
            }
            ++v60;
          }
          while (v60 != v8);
        }
        unint64_t v70 = (char *)*v8;
        uint64_t v71 = a7;
        int v59 = v62;
        uint64_t v50 = v63;
      }
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v70, v71, v59, v50);
      goto LABEL_129;
    }
    if (v19 >= v12 >> 1)
    {
      uint64_t v28 = v12 - v19 + ((uint64_t)&a5[-*v10] >> 3);
      if (v28 >= 1)
      {
        v10 += (unint64_t)v28 >> 9;
        goto LABEL_39;
      }
      unint64_t v35 = 511 - v28;
      __int16 v36 = ~(_WORD)v35;
      v10 -= v35 >> 9;
    }
    else
    {
      if (!v19)
      {
        unint64_t v10 = v8;
        long long v29 = a7;
        goto LABEL_49;
      }
      uint64_t v28 = ((uint64_t)&a7[-*v8] >> 3) - v19;
      if (v28 >= 1)
      {
        unint64_t v10 = &v8[(unint64_t)v28 >> 9];
LABEL_39:
        long long v29 = (char *)(*v10 + 8 * (v28 & 0x1FF));
        goto LABEL_49;
      }
      unint64_t v39 = 511 - v28;
      __int16 v36 = ~(_WORD)v39;
      unint64_t v10 = &v8[-(v39 >> 9)];
    }
    long long v29 = (char *)(*v10 + 8 * (v36 & 0x1FF));
LABEL_49:
    if (v29 != a5)
    {
      uint64_t v40 = (char *)*v21;
      uint64_t v41 = (char **)v10;
      uint64_t v42 = v29;
      do
      {
        if (v22 == v40)
        {
          uint64_t v43 = (char *)*--v21;
          uint64_t v40 = v43;
          float32x2_t v22 = v43 + 4096;
        }
        if (v42 == *v41)
        {
          uint64_t v44 = (uint64_t)*--v41;
          uint64_t v42 = (char *)(v44 + 4096);
        }
        uint64_t v45 = *((void *)v42 - 1);
        v42 -= 8;
        *((void *)v22 - 1) = v45;
        v22 -= 8;
        *(int64x2_t *)(a1 + 32) = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_2343A9950);
      }
      while (v42 != a5);
    }
    unint64_t v12 = v19;
    if (!v19) {
      goto LABEL_129;
    }
    goto LABEL_57;
  }
  uint64_t v23 = ((v16 - v15) << 6) - 1;
  if (v16 == v15) {
    uint64_t v23 = 0;
  }
  unint64_t v24 = v20 + v13;
  unint64_t v25 = v23 - v24;
  if (v12 > v25)
  {
    std::deque<unsigned long>::__add_back_capacity((void *)a1, v12 - v25);
    unint64_t v19 = v111;
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    unint64_t v24 = *(void *)(a1 + 32) + v20;
  }
  float32x2_t v26 = (char *)(v15 + 8 * (v24 >> 9));
  if (v16 == v15) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = (char *)(*(void *)v26 + 8 * (v24 & 0x1FF));
  }
  unint64_t v30 = v20 - v19;
  if (v20 - v19 < v12)
  {
    if (v30 >= v12 >> 1)
    {
      uint64_t v31 = v20 - v19 - v12 + ((uint64_t)&a7[-*v8] >> 3);
      if (v31 >= 1)
      {
        v8 += (unint64_t)v31 >> 9;
        goto LABEL_42;
      }
      unint64_t v37 = 511 - v31;
      __int16 v38 = ~(_WORD)v37;
      v8 -= v37 >> 9;
    }
    else
    {
      if (!v30)
      {
        unint64_t v8 = v10;
        uint64_t v34 = a5;
        goto LABEL_87;
      }
      uint64_t v31 = v30 + ((uint64_t)&a5[-*v10] >> 3);
      if (v31 >= 1)
      {
        unint64_t v8 = &v10[(unint64_t)v31 >> 9];
LABEL_42:
        uint64_t v34 = (char *)(*v8 + 8 * (v31 & 0x1FF));
        goto LABEL_87;
      }
      unint64_t v72 = 511 - v31;
      __int16 v38 = ~(_WORD)v72;
      unint64_t v8 = &v10[-(v72 >> 9)];
    }
    uint64_t v34 = (char *)(*v8 + 8 * (v38 & 0x1FF));
LABEL_87:
    if (v34 == a7)
    {
      uint64_t v32 = v27;
      unint64_t v33 = (char **)v26;
    }
    else
    {
      uint64_t v73 = *(char **)v26;
      uint64_t v74 = v8;
      unint64_t v75 = v34;
      unint64_t v33 = (char **)v26;
      uint64_t v32 = v27;
      do
      {
        *(void *)uint64_t v32 = *(void *)v75;
        v32 += 8;
        if (v32 - v73 == 4096)
        {
          unint64_t v76 = v33[1];
          ++v33;
          uint64_t v73 = v76;
          uint64_t v32 = v76;
        }
        v75 += 8;
        if (&v75[-*v74] == (char *)4096)
        {
          unint64_t v77 = (char *)v74[1];
          ++v74;
          unint64_t v75 = v77;
        }
        ++*(void *)(a1 + 40);
      }
      while (v75 != a7);
    }
    unint64_t v12 = v30;
    if (v30) {
      goto LABEL_97;
    }
    goto LABEL_130;
  }
  uint64_t v32 = v27;
  unint64_t v33 = (char **)v26;
  uint64_t v34 = a7;
  if (v12)
  {
LABEL_97:
    uint64_t v78 = (uint64_t)&v27[-*(void *)v26] >> 3;
    unint64_t v79 = v78 - v12;
    if ((uint64_t)(v78 - v12) < 1)
    {
      unint64_t v81 = 511 - v79;
      LOWORD(v7re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = ~(511 - v79);
      uint64_t v80 = (char **)&v26[-8 * (v81 >> 9)];
    }
    else
    {
      uint64_t v80 = (char **)&v26[8 * (v79 >> 9)];
    }
    uint64_t v82 = *v80;
    int v83 = &(*v80)[8 * (v79 & 0x1FF)];
    if (v83 != v27)
    {
      uint64_t v84 = *v33;
      unint64_t v85 = v80;
      uint64_t v86 = v83;
      do
      {
        *(void *)uint64_t v32 = *(void *)v86;
        v32 += 8;
        if (v32 - v84 == 4096)
        {
          unint64_t v87 = v33[1];
          ++v33;
          uint64_t v84 = v87;
          uint64_t v32 = v87;
        }
        v86 += 8;
        if (v86 - v82 == 4096)
        {
          unint64_t v88 = v85[1];
          ++v85;
          uint64_t v82 = v88;
          uint64_t v86 = v88;
        }
        ++*(void *)(a1 + 40);
      }
      while (v86 != v27);
    }
    if (v12 < v30)
    {
      uint64_t v89 = v78 - v30;
      if (v89 < 1)
      {
        unint64_t v92 = 511 - v89;
        int v90 = (char **)&v26[-8 * (v92 >> 9)];
        uint64_t v91 = &(*v90)[8 * (~(_WORD)v92 & 0x1FF)];
      }
      else
      {
        int v90 = (char **)&v26[8 * ((unint64_t)v89 >> 9)];
        uint64_t v91 = &(*v90)[8 * (v89 & 0x1FF)];
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v90, v91, v80, v83, v26, v27);
      float32x2_t v26 = v114;
      uint64_t v27 = v115;
    }
    if (v10 == v8)
    {
      uint64_t v105 = a5;
      uint64_t v104 = v34;
      uint64_t v106 = v26;
      uint64_t v107 = v27;
    }
    else
    {
      unint64_t v94 = (char *)*v8;
      uint64_t v93 = v8 - 1;
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v94, v34, v26, v27);
      unint64_t v95 = (char *)v113.n128_u64[1];
      int v96 = v114;
      if (v93 != v10)
      {
        unint64_t v97 = *(char **)v113.n128_u64[1];
        do
        {
          unint64_t v98 = (unsigned char *)*v93;
          unint64_t v99 = (char *)(*v93 + 4096);
          while (1)
          {
            uint64_t v100 = v96 - v97;
            if ((v99 - v98) >> 3 >= v100 >> 3) {
              uint64_t v101 = v100 >> 3;
            }
            else {
              uint64_t v101 = (v99 - v98) >> 3;
            }
            v99 -= 8 * v101;
            v96 -= 8 * v101;
            if (v101) {
              memmove(v96, v99, 8 * v101);
            }
            if (v99 == v98) {
              break;
            }
            unint64_t v102 = (char *)*((void *)v95 - 1);
            v95 -= 8;
            unint64_t v97 = v102;
            int v96 = v102 + 4096;
          }
          unint64_t v97 = *(char **)v95;
          if ((char *)(*(void *)v95 + 4096) == v96)
          {
            unint64_t v103 = (char *)*((void *)v95 + 1);
            v95 += 8;
            unint64_t v97 = v103;
            int v96 = v103;
          }
          --v93;
        }
        while (v93 != v10);
      }
      uint64_t v104 = (char *)(*v10 + 4096);
      uint64_t v105 = a5;
      uint64_t v106 = v95;
      uint64_t v107 = v96;
    }
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v113, v105, v104, v106, v107);
    goto LABEL_129;
  }
LABEL_130:
  uint64_t v108 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v108) {
    uint64_t v109 = 0;
  }
  else {
    uint64_t v109 = *(void *)(v108 + 8 * (*(void *)(a1 + 32) >> 9)) + 8 * (*(void *)(a1 + 32) & 0x1FFLL);
  }
  v113.n128_u64[0] = v108 + 8 * (*(void *)(a1 + 32) >> 9);
  v113.n128_u64[1] = v109;
  return std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v113, v19);
}

void *std::deque<unsigned long>::insert<std::reverse_iterator<std::__deque_iterator<unsigned long,unsigned long const*,unsigned long const&,unsigned long const* const*,long,512l>>,0>(int64x2_t *a1, char *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  long long v6 = *(_OWORD *)(a4 + 16);
  __n128 v119 = *(__n128 *)a4;
  long long v120 = v6;
  long long v7 = a5[1];
  long long v117 = *a5;
  long long v118 = v7;
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *((void *)a5 + 3);
  if (v8 == v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((v8 - **(void **)(a4 + 16)) >> 3)
  }
        + ((*(void *)(a4 + 16) - *((void *)a5 + 2)) << 6)
        - ((v9 - **((void **)a5 + 2)) >> 3);
  unint64_t v11 = a1[2].u64[0];
  unint64_t v12 = v11 >> 9;
  uint64_t v13 = a1->i64[1];
  uint64_t v14 = a1[1].i64[0];
  uint64_t v15 = (char *)(v13 + 8 * (v11 >> 9));
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)v15 + 8 * (a1[2].i64[0] & 0x1FF);
  }
  if (a3 == v16) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = ((a3 - *(void *)a2) >> 3) + ((a2 - v15) << 6) - ((v16 - *(void *)v15) >> 3);
  }
  uint64_t v18 = a1[2].i64[1];
  if (v17 >= v18 - v17)
  {
    uint64_t v21 = ((v14 - v13) << 6) - 1;
    if (v14 == v13) {
      uint64_t v21 = 0;
    }
    unint64_t v22 = v18 + v11;
    unint64_t v23 = v21 - v22;
    if (v10 > v23)
    {
      std::deque<unsigned long>::__add_back_capacity(a1, v10 - v23);
      uint64_t v18 = a1[2].i64[1];
      uint64_t v13 = a1->i64[1];
      uint64_t v14 = a1[1].i64[0];
      unint64_t v22 = a1[2].i64[0] + v18;
    }
    unint64_t v24 = (void *)(v13 + 8 * (v22 >> 9));
    if (v14 == v13) {
      unint64_t v25 = 0;
    }
    else {
      unint64_t v25 = (char *)(*v24 + 8 * (v22 & 0x1FF));
    }
    uint64_t v31 = *((void *)&v118 + 1);
    unint64_t v30 = (void *)v118;
    unint64_t v32 = v18 - v17;
    if (v10 <= v18 - v17)
    {
      unint64_t v35 = v25;
      __int16 v36 = (char **)v24;
      if (!v10) {
        goto LABEL_132;
      }
LABEL_52:
      uint64_t v45 = (uint64_t)&v25[-*v24] >> 3;
      unint64_t v46 = v45 - v10;
      if ((uint64_t)(v45 - v10) < 1)
      {
        unint64_t v48 = 511 - v46;
        LOWORD(v46) = ~(511 - v46);
        uint64_t v47 = (char **)&v24[-(v48 >> 9)];
      }
      else
      {
        uint64_t v47 = (char **)&v24[v46 >> 9];
      }
      uint64_t v49 = *v47;
      uint64_t v50 = &(*v47)[8 * (v46 & 0x1FF)];
      if (v50 != v25)
      {
        uint64_t v51 = *v36;
        uint64_t v52 = v47;
        uint64_t v53 = v50;
        do
        {
          *(void *)unint64_t v35 = *(void *)v53;
          v35 += 8;
          if (v35 - v51 == 4096)
          {
            uint64_t v54 = v36[1];
            ++v36;
            uint64_t v51 = v54;
            unint64_t v35 = v54;
          }
          v53 += 8;
          if (v53 - v49 == 4096)
          {
            uint64_t v55 = v52[1];
            ++v52;
            uint64_t v49 = v55;
            uint64_t v53 = v55;
          }
          ++a1[2].i64[1];
        }
        while (v53 != v25);
      }
      if (v10 < v32)
      {
        uint64_t v56 = v45 - v32;
        if (v56 < 1)
        {
          unint64_t v59 = 511 - v56;
          uint64_t v57 = (char **)&v24[-(v59 >> 9)];
          uint64_t v58 = &(*v57)[8 * (~(_WORD)v59 & 0x1FF)];
        }
        else
        {
          uint64_t v57 = (char **)&v24[(unint64_t)v56 >> 9];
          uint64_t v58 = &(*v57)[8 * (v56 & 0x1FF)];
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v124, v57, v58, v47, v50, v24, v25);
        unint64_t v24 = v125;
        unint64_t v25 = v126;
      }
      uint64_t v60 = *((void *)&v120 + 1);
      if (v31 == *((void *)&v120 + 1)) {
        goto LABEL_132;
      }
      uint64_t v61 = v120;
      unint64_t v62 = (char *)*v24;
      uint64_t v63 = (uint64_t)(*((void *)&v120 + 1) - *(void *)v120) >> 3;
      uint64_t v64 = *v30;
      while (1)
      {
        uint64_t v65 = v25 - v62;
        uint64_t v66 = (v25 - v62) >> 3;
        uint64_t v67 = (v31 - v64) >> 3;
        if (v63 + ((v61 - (uint64_t)v30) << 6) - v67 >= v65 >> 3) {
          uint64_t v68 = v66;
        }
        else {
          uint64_t v68 = v63 + ((v61 - (void)v30) << 6) - ((v31 - v64) >> 3);
        }
        uint64_t v69 = v31;
        if (v68)
        {
          unint64_t v70 = v68 + v67;
          if (v68 + v67 < 1) {
            uint64_t v69 = v30[-((511 - v70) >> 9)] + 8 * (~(511 - (_WORD)v70) & 0x1FF);
          }
          else {
            uint64_t v69 = *(void *)((char *)v30 + ((v70 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v70 & 0x1FF);
          }
        }
        if (v31 != v69) {
          break;
        }
LABEL_83:
        if (v68)
        {
          uint64_t v77 = v68 + v67;
          if (v77 < 1)
          {
            unint64_t v78 = 511 - v77;
            LOWORD(v77) = ~(511 - v77);
            v30 -= v78 >> 9;
          }
          else
          {
            v30 += (unint64_t)v77 >> 9;
          }
          uint64_t v64 = *v30;
          uint64_t v31 = *v30 + 8 * (v77 & 0x1FF);
        }
        if (v31 == v60) {
          goto LABEL_132;
        }
        unint64_t v79 = (char *)*--v24;
        unint64_t v62 = v79;
        unint64_t v25 = v79 + 4096;
      }
      uint64_t v71 = v25 - 8;
      uint64_t v72 = v64;
      uint64_t v73 = v30;
      uint64_t v74 = v31;
      while (1)
      {
        v74 += 8;
        if (v74 - v72 == 4096) {
          break;
        }
        uint64_t v76 = v74;
        if (v74 == v72) {
          goto LABEL_81;
        }
LABEL_82:
        *(void *)uint64_t v71 = *(void *)(v76 - 8);
        v71 -= 8;
        if (v74 == v69) {
          goto LABEL_83;
        }
      }
      uint64_t v75 = v73[1];
      ++v73;
      uint64_t v72 = v75;
LABEL_81:
      uint64_t v76 = *(v73 - 1) + 4096;
      uint64_t v74 = v72;
      goto LABEL_82;
    }
    if (v32 >= v10 >> 1)
    {
      uint64_t v34 = v10 - (v18 - v17) + ((uint64_t)(*((void *)&v118 + 1) - *(void *)v118) >> 3);
    }
    else
    {
      uint64_t v33 = *((void *)&v120 + 1);
      unint64_t v30 = (void *)v120;
      if (!v32) {
        goto LABEL_40;
      }
      uint64_t v34 = ((uint64_t)(*((void *)&v120 + 1) - *(void *)v120) >> 3) - v32;
    }
    if (v34 < 1)
    {
      unint64_t v38 = 511 - v34;
      v30 -= v38 >> 9;
      uint64_t v33 = *v30 + 8 * (~(_WORD)v38 & 0x1FF);
    }
    else
    {
      v30 += (unint64_t)v34 >> 9;
      uint64_t v33 = *v30 + 8 * (v34 & 0x1FF);
    }
LABEL_40:
    if (v33 == *((void *)&v118 + 1))
    {
      unint64_t v35 = v25;
      __int16 v36 = (char **)v24;
    }
    else
    {
      uint64_t v39 = *v30;
      uint64_t v40 = v30;
      uint64_t v41 = v33;
      __int16 v36 = (char **)v24;
      unint64_t v35 = v25;
      do
      {
        uint64_t v42 = v41;
        if (v41 == v39) {
          uint64_t v42 = *(v40 - 1) + 4096;
        }
        *(void *)unint64_t v35 = *(void *)(v42 - 8);
        v35 += 8;
        if (v35 - *v36 == 4096)
        {
          uint64_t v43 = v36[1];
          ++v36;
          unint64_t v35 = v43;
        }
        if (v41 == v39)
        {
          uint64_t v44 = *--v40;
          uint64_t v39 = v44;
          uint64_t v41 = v44 + 4096;
        }
        v41 -= 8;
        ++a1[2].i64[1];
      }
      while (v41 != v31);
      uint64_t v31 = v33;
    }
    unint64_t v10 = v32;
    if (!v32) {
      goto LABEL_132;
    }
    goto LABEL_52;
  }
  if (v10 > v11)
  {
    std::deque<unsigned long>::__add_front_capacity((void **)a1, v10 - v11);
    unint64_t v11 = a1[2].u64[0];
    uint64_t v13 = a1->i64[1];
    uint64_t v14 = a1[1].i64[0];
    unint64_t v12 = v11 >> 9;
  }
  unint64_t v19 = (uint64_t *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *v19 + 8 * (v11 & 0x1FF);
  }
  v122.n128_u64[0] = v13 + 8 * v12;
  v122.n128_u64[1] = v20;
  __n128 v121 = v119;
  uint64_t v27 = *((void *)&v120 + 1);
  float32x2_t v26 = (void *)v120;
  if (v17 < v10)
  {
    if (v17 >= v10 >> 1)
    {
      uint64_t v37 = v17 - v10 + ((uint64_t)(*((void *)&v120 + 1) - *(void *)v120) >> 3);
      if (v37 < 1)
      {
        unint64_t v80 = 511 - v37;
        float32x2_t v26 = (void *)(v120 - 8 * (v80 >> 9));
        uint64_t v28 = *v26 + 8 * (~(_WORD)v80 & 0x1FF);
      }
      else
      {
        float32x2_t v26 = (void *)(v120 + 8 * ((unint64_t)v37 >> 9));
        uint64_t v28 = *v26 + 8 * (v37 & 0x1FF);
      }
      unint64_t v81 = &v119;
    }
    else
    {
      uint64_t v28 = *((void *)&v118 + 1);
      float32x2_t v26 = (void *)v118;
      if (v17)
      {
        uint64_t v29 = v17 + ((uint64_t)(*((void *)&v118 + 1) - *(void *)v118) >> 3);
        if (v29 < 1)
        {
          unint64_t v82 = 511 - v29;
          float32x2_t v26 = (void *)(v118 - 8 * (v82 >> 9));
          uint64_t v28 = *v26 + 8 * (~(_WORD)v82 & 0x1FF);
        }
        else
        {
          float32x2_t v26 = (void *)(v118 + 8 * ((unint64_t)v29 >> 9));
          uint64_t v28 = *v26 + 8 * (v29 & 0x1FF);
        }
      }
      unint64_t v81 = (__n128 *)&v117;
    }
    __n128 v121 = *v81;
    if (v28 != *((void *)&v120 + 1))
    {
      uint64_t v83 = *v19;
      uint64_t v84 = v26;
      uint64_t v85 = v28;
      while (1)
      {
        if (v20 == v83)
        {
          uint64_t v86 = *--v19;
          uint64_t v83 = v86;
          uint64_t v20 = v86 + 4096;
        }
        v85 += 8;
        if (v85 - *v84 == 4096) {
          break;
        }
        uint64_t v88 = v85;
        if (v85 == *v84) {
          goto LABEL_101;
        }
LABEL_102:
        *(void *)(v20 - 8) = *(void *)(v88 - 8);
        v20 -= 8;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2343A9950);
        if (v85 == v27)
        {
          uint64_t v27 = v28;
          goto LABEL_104;
        }
      }
      uint64_t v87 = v84[1];
      ++v84;
      uint64_t v85 = v87;
LABEL_101:
      uint64_t v88 = *(v84 - 1) + 4096;
      goto LABEL_102;
    }
LABEL_104:
    unint64_t v10 = v17;
  }
  if (v10)
  {
    uint64_t v89 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v122, v10);
    uint64_t v91 = v89;
    unint64_t v92 = v90;
    uint64_t v93 = (char *)v122.n128_u64[1];
    if ((unsigned char *)v122.n128_u64[1] != v90)
    {
      uint64_t v94 = *v19;
      unint64_t v95 = v89;
      int v96 = v90;
      do
      {
        if (v20 == v94)
        {
          uint64_t v97 = *--v19;
          uint64_t v94 = v97;
          uint64_t v20 = v97 + 4096;
        }
        if (v96 == (char *)*v95)
        {
          uint64_t v98 = *--v95;
          int v96 = (char *)(v98 + 4096);
        }
        uint64_t v99 = *((void *)v96 - 1);
        v96 -= 8;
        *(void *)(v20 - 8) = v99;
        v20 -= 8;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2343A9950);
      }
      while (v96 != v93);
    }
    if (v10 >= v17)
    {
      unint64_t v102 = (char **)v122.n128_u64[0];
    }
    else
    {
      uint64_t v100 = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v122, v17);
      __n128 v124 = v122;
      std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(v91, v92, v100, v101, (uint64_t)&v124);
      uint64_t v93 = (char *)v124.n128_u64[1];
      unint64_t v102 = (char **)v124.n128_u64[0];
      __n128 v122 = v124;
    }
    __n128 v123 = v121;
    uint64_t v103 = *((void *)&v118 + 1);
    if (v27 != *((void *)&v118 + 1))
    {
      uint64_t v104 = (char *)v118;
      uint64_t v105 = *v102;
      uint64_t v106 = v27;
      while (1)
      {
        uint64_t v107 = v105 - v93 + 4096;
        uint64_t v108 = v103 - *(void *)v104;
        if (((v27 - *v26) >> 3) + (((char *)v26 - v104) << 6) - (v108 >> 3) >= v107 >> 3) {
          uint64_t v109 = v107 >> 3;
        }
        else {
          uint64_t v109 = ((v27 - *v26) >> 3) + (((char *)v26 - v104) << 6) - (v108 >> 3);
        }
        __n128 v124 = v123;
        if (v109)
        {
          uint64_t v110 = ((v27 - *v26) >> 3) - v109;
          if (v110 < 1) {
            uint64_t v106 = v26[-((unint64_t)(511 - v110) >> 9)] + 8 * (~(511 - (_WORD)v110) & 0x1FF);
          }
          else {
            uint64_t v106 = *(void *)((char *)v26 + (((unint64_t)v110 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v110 & 0x1FF);
          }
        }
        while (v27 != v106)
        {
          if (v27 == *v26)
          {
            uint64_t v112 = *--v26;
            unint64_t v111 = (void *)(v112 + 4088);
            uint64_t v27 = v112 + 4096;
          }
          else
          {
            unint64_t v111 = (void *)(v27 - 8);
          }
          *(void *)uint64_t v93 = *v111;
          v93 += 8;
          v27 -= 8;
        }
        __n128 v123 = v124;
        if (v106 == v103) {
          break;
        }
        __n128 v113 = v102[1];
        ++v102;
        uint64_t v105 = v113;
        uint64_t v27 = v106;
        uint64_t v93 = v113;
      }
    }
  }
LABEL_132:
  uint64_t v114 = a1->i64[1];
  if (a1[1].i64[0] == v114) {
    uint64_t v115 = 0;
  }
  else {
    uint64_t v115 = *(void *)(v114 + 8 * ((unint64_t)a1[2].i64[0] >> 9)) + 8 * (a1[2].i64[0] & 0x1FF);
  }
  v124.n128_u64[0] = v114 + 8 * ((unint64_t)a1[2].i64[0] >> 9);
  v124.n128_u64[1] = v115;
  return std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)&v124, v17);
}

void std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(*a1);
    std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::destroy(a1[1]);
    float32x2_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

char *std::__tree<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,std::__map_value_compare<re::Vector2<float>,std::__value_type<re::Vector2<float>,re::pathprocessing::Node>,re::pathprocessing::MathUtils::LexCompare,true>,std::allocator<std::__value_type<re::Vector2<float>,re::pathprocessing::Node>>>::__emplace_unique_key_args<re::Vector2<float>,std::piecewise_construct_t const&,std::tuple<re::Vector2<float> const&>,std::tuple<>>(uint64_t **a1, void *a2, float a3, float a4)
{
  long long v7 = a1 + 1;
  long long v6 = (float *)a1[1];
  if (!v6)
  {
    uint64_t v8 = (char *)(a1 + 1);
    goto LABEL_17;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = (char *)v6;
      float v9 = v6[8];
      if (v9 <= a3) {
        break;
      }
LABEL_5:
      long long v6 = *(float **)v6;
      long long v7 = (uint64_t **)v8;
      if (!*(void *)v8) {
        goto LABEL_17;
      }
    }
    if (v9 == a3)
    {
      float v10 = v6[9];
      if (v10 > a4) {
        goto LABEL_5;
      }
      if (v9 >= a3 && v10 >= a4) {
        return v8;
      }
    }
    else if (v9 >= a3)
    {
      return v8;
    }
    long long v6 = (float *)*((void *)v6 + 1);
  }
  while (v6);
  long long v7 = (uint64_t **)(v8 + 8);
LABEL_17:
  unint64_t v12 = v8;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *((void *)v8 + 4) = *a2;
  *(_OWORD *)(v8 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = v12;
  *long long v7 = (uint64_t *)v8;
  uint64_t v13 = (uint64_t *)**a1;
  uint64_t v14 = (uint64_t *)v8;
  if (v13)
  {
    *a1 = v13;
    uint64_t v14 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void std::deque<unsigned long>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v5, v29);
      uint64_t v31 = &v30[8 * (v29 >> 2)];
      uint64_t v33 = &v30[8 * v32];
      uint64_t v34 = (uint64_t *)a1[1];
      uint64_t v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        uint64_t v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        uint64_t v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)uint64_t v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      float v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v40 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    float v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      uint64_t v31 = &v30[8 * (v46 >> 2)];
      uint64_t v33 = &v30[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  uint64_t v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    uint64_t v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    uint64_t v28 = (char *)a1[2];
  }
  uint64_t v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

void std::__split_buffer<unsigned long *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  long long v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    long long v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      long long v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        long long v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        long long v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        long long v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      long long v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)long long v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    long long v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(a1[4], v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      long long v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    long long v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    long long v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v8 = a3;
  unint64_t v10 = result;
LABEL_2:
  uint64_t v186 = (unint64_t *)(a2 - 16);
  unint64_t v170 = (unint64_t *)(a2 - 48);
  uint64_t v173 = (unint64_t *)(a2 - 32);
  unint64_t v182 = a2;
  while (1)
  {
    uint64_t v11 = a2 - v10;
    uint64_t v12 = (uint64_t)(a2 - v10) >> 4;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unint64_t v62 = v8[1];
          uint64_t v63 = **v8;
          uint64_t v64 = (void *)(v63 + 72 * *(void *)v10);
          uint64_t v65 = *v62;
          re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v63 + 72 * *(void *)(a2 - 16)), *v62, *(_DWORD *)(a2 - 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v64, v65, *(_DWORD *)(v10 + 8));
          uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (result)
          {
            if (result != -1) {
              return result;
            }
          }
          else
          {
            int v165 = *(_DWORD *)(a2 - 8);
            if (v165 == *(_DWORD *)(v10 + 8))
            {
              unint64_t v166 = *(void *)(a2 - 16);
              if (v165)
              {
                if (v166 <= *(void *)v10) {
                  return result;
                }
              }
              else if (v166 >= *(void *)v10)
              {
                return result;
              }
            }
            else if (v165)
            {
              return result;
            }
          }
          unint64_t v167 = *(void *)v10;
          *(void *)unint64_t v10 = *(void *)(a2 - 16);
          *(void *)(a2 - 16) = v167;
          LODWORD(v167) = *(_DWORD *)(v10 + 8);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v167;
          return result;
        case 3:
          uint64_t v66 = v8[1];
          uint64_t v67 = **v8;
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)v10, (unint64_t *)(v10 + 16), v186, v67, v66);
        case 4:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v10, v10 + 16, v10 + 32, (uint64_t)v186, v8);
        case 5:
          return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(v10, v10 + 16, v10 + 32, v10 + 48, v186, v8);
        default:
          JUMPOUT(0);
      }
    }
    unint64_t v184 = v10;
    if (v11 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v89 = (unint64_t)(v12 - 2) >> 1;
      unint64_t v168 = a2 - v10;
      int v169 = *v8;
      uint64_t v188 = v8[1];
      int64_t v90 = v89;
      while (1)
      {
        int64_t v91 = v90;
        if (v89 < v90) {
          goto LABEL_269;
        }
        uint64_t v92 = (2 * v90) | 1;
        unint64_t v93 = v10 + 16 * v92;
        uint64_t v94 = 2 * v90 + 2;
        uint64_t v95 = *v169;
        uint64_t v96 = *v188;
        int64_t v176 = v90;
        uint64_t v193 = *v169;
        if (v94 >= v12) {
          goto LABEL_222;
        }
        uint64_t v97 = (void *)(v95 + 72 * *(void *)(v93 + 16));
        re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v95 + 72 * *(void *)v93), v96, *(_DWORD *)(v93 + 8));
        re::pathprocessing::ContinuousEdge::getIndex(&v196, v97, v96, *(_DWORD *)(v93 + 24));
        int v98 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
        if (!v98) {
          break;
        }
        int64_t v89 = (unint64_t)(v12 - 2) >> 1;
        int64_t v91 = v176;
        uint64_t v95 = v193;
        if (v98 == -1) {
          goto LABEL_221;
        }
LABEL_222:
        uint64_t v99 = (unint64_t *)(v10 + 16 * v91);
        int64_t v100 = v91;
        uint64_t v101 = (void *)(v95 + 72 * *v99);
        re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v95 + 72 * *(void *)v93), v96, *(_DWORD *)(v93 + 8));
        unint64_t v102 = v10 + 16 * v100;
        int v104 = *(_DWORD *)(v102 + 8);
        uint64_t v103 = (int *)(v102 + 8);
        re::pathprocessing::ContinuousEdge::getIndex(&v196, v101, v96, v104);
        uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
        if (result)
        {
          int64_t v91 = v176;
          uint64_t v105 = v193;
          if (result == -1) {
            goto LABEL_269;
          }
          int v106 = *v103;
          int v107 = *(_DWORD *)(v93 + 8);
        }
        else
        {
          int v107 = *(_DWORD *)(v93 + 8);
          int v106 = *v103;
          if (v107 == *v103)
          {
            unint64_t v108 = *(void *)v93;
            unint64_t v109 = *v99;
            uint64_t v105 = v193;
            if (v107)
            {
              int v106 = *(_DWORD *)(v93 + 8);
              BOOL v110 = v108 > v109;
              int64_t v91 = v176;
              if (v110) {
                goto LABEL_269;
              }
            }
            else
            {
              BOOL v5 = v108 >= v109;
              int64_t v91 = v176;
              if (!v5) {
                goto LABEL_269;
              }
              int v107 = 0;
              int v106 = 0;
            }
          }
          else
          {
            int64_t v91 = v176;
            uint64_t v105 = v193;
            if (!v107) {
              goto LABEL_269;
            }
          }
        }
        unint64_t v113 = *v99;
        *uint64_t v99 = *(void *)v93;
        *uint64_t v103 = v107;
        unint64_t v171 = v113;
        if (v89 < v92) {
          goto LABEL_268;
        }
        uint64_t v180 = (void *)(v105 + 72 * v113);
        while (1)
        {
          unint64_t v114 = v93;
          uint64_t v115 = 2 * v92;
          uint64_t v92 = (2 * v92) | 1;
          unint64_t v93 = v10 + 16 * v92;
          uint64_t v116 = v115 + 2;
          uint64_t v117 = *v188;
          if (v115 + 2 >= v12) {
            goto LABEL_247;
          }
          long long v118 = (void *)(v105 + 72 * *(void *)(v93 + 16));
          re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v105 + 72 * *(void *)v93), *v188, *(_DWORD *)(v93 + 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v118, v117, *(_DWORD *)(v93 + 24));
          int v119 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (v119)
          {
            unint64_t v10 = v184;
            int64_t v89 = (unint64_t)(v12 - 2) >> 1;
            uint64_t v105 = v193;
            if (v119 != -1) {
              goto LABEL_247;
            }
LABEL_246:
            v93 += 16;
            uint64_t v92 = v116;
            goto LABEL_247;
          }
          int v122 = *(_DWORD *)(v93 + 8);
          if (v122 == *(_DWORD *)(v93 + 24))
          {
            unint64_t v123 = *(void *)(v93 + 16);
            unint64_t v10 = v184;
            int64_t v89 = (unint64_t)(v12 - 2) >> 1;
            uint64_t v105 = v193;
            if (v122)
            {
              if (*(void *)v93 > v123) {
                goto LABEL_246;
              }
            }
            else if (*(void *)v93 < v123)
            {
              goto LABEL_246;
            }
          }
          else
          {
            unint64_t v10 = v184;
            int64_t v89 = (unint64_t)(v12 - 2) >> 1;
            uint64_t v105 = v193;
            if (!v122) {
              goto LABEL_246;
            }
          }
LABEL_247:
          re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v105 + 72 * *(void *)v93), v117, *(_DWORD *)(v93 + 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v180, v117, v106);
          uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (result)
          {
            if (result == -1) {
              break;
            }
            int v120 = *(_DWORD *)(v93 + 8);
            uint64_t v105 = v193;
            goto LABEL_263;
          }
          int v120 = *(_DWORD *)(v93 + 8);
          if (v120 != v106)
          {
            uint64_t v105 = v193;
            if (!v120) {
              break;
            }
            goto LABEL_263;
          }
          unint64_t v121 = *(void *)v93;
          uint64_t v105 = v193;
          if (v120)
          {
            int v120 = v106;
            if (v121 > v171) {
              break;
            }
            goto LABEL_263;
          }
          int v120 = v106;
          if (v121 < v171) {
            break;
          }
LABEL_263:
          *(void *)unint64_t v114 = *(void *)v93;
          *(_DWORD *)(v114 + 8) = v120;
          if (v89 < v92) {
            goto LABEL_268;
          }
        }
        unint64_t v93 = v114;
LABEL_268:
        *(void *)unint64_t v93 = v171;
        *(_DWORD *)(v93 + 8) = v106;
        int64_t v91 = v176;
LABEL_269:
        int64_t v90 = v91 - 1;
        if (!v91)
        {
          uint64_t v124 = v168 >> 4;
          uint64_t v125 = a3;
          uint64_t v172 = *a3;
          uint64_t v174 = a3[1];
          unint64_t v126 = v182;
          while (1)
          {
            uint64_t v127 = 0;
            unint64_t v181 = *(void *)v10;
            unint64_t v183 = v126;
            int v177 = *(_DWORD *)(v10 + 8);
            uint64_t v189 = v125[1];
            uint64_t v194 = *v125;
            unint64_t v128 = v10;
            do
            {
              unint64_t v129 = v128;
              v128 += 16 * (v127 + 1);
              uint64_t v130 = 2 * v127;
              uint64_t v127 = (2 * v127) | 1;
              uint64_t v131 = v130 + 2;
              if (v130 + 2 >= v124) {
                goto LABEL_278;
              }
              int v132 = (void *)(*v194 + 72 * *(void *)(v128 + 16));
              uint64_t v133 = *v189;
              re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(*v194 + 72 * *(void *)v128), *v189, *(_DWORD *)(v128 + 8));
              re::pathprocessing::ContinuousEdge::getIndex(&v196, v132, v133, *(_DWORD *)(v128 + 24));
              uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
              if (result)
              {
                if (result != -1) {
                  goto LABEL_278;
                }
LABEL_277:
                v128 += 16;
                uint64_t v127 = v131;
                goto LABEL_278;
              }
              int v134 = *(_DWORD *)(v128 + 8);
              if (v134 == *(_DWORD *)(v128 + 24))
              {
                unint64_t v135 = *(void *)(v128 + 16);
                if (v134)
                {
                  if (*(void *)v128 > v135) {
                    goto LABEL_277;
                  }
                }
                else if (*(void *)v128 < v135)
                {
                  goto LABEL_277;
                }
              }
              else if (!v134)
              {
                goto LABEL_277;
              }
LABEL_278:
              *(void *)unint64_t v129 = *(void *)v128;
              *(_DWORD *)(v129 + 8) = *(_DWORD *)(v128 + 8);
            }
            while (v127 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
            if (v128 == v183 - 16)
            {
              *(void *)unint64_t v128 = v181;
              *(_DWORD *)(v128 + 8) = v177;
              goto LABEL_317;
            }
            *(void *)unint64_t v128 = *(void *)(v183 - 16);
            *(_DWORD *)(v128 + 8) = *(_DWORD *)(v183 - 8);
            *(void *)(v183 - 16) = v181;
            *(_DWORD *)(v183 - 8) = v177;
            uint64_t v136 = v128 - v184 + 16;
            if (v136 < 17) {
              goto LABEL_317;
            }
            unint64_t v137 = ((unint64_t)v136 >> 4) - 2;
            unint64_t v138 = v137 >> 1;
            unint64_t v139 = v184 + 16 * (v137 >> 1);
            uint64_t v190 = v124;
            uint64_t v195 = *v172;
            uint64_t v140 = (void *)(*v172 + 72 * *(void *)v128);
            int v141 = (int *)(v139 + 8);
            uint64_t v142 = *v174;
            re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(*v172 + 72 * *(void *)v139), *v174, *(_DWORD *)(v139 + 8));
            re::pathprocessing::ContinuousEdge::getIndex(&v196, v140, v142, *(_DWORD *)(v128 + 8));
            uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
            if (result)
            {
              uint64_t v124 = v190;
              if (result != -1) {
                goto LABEL_317;
              }
              int v143 = *(_DWORD *)(v128 + 8);
              int v144 = *v141;
            }
            else
            {
              int v144 = *v141;
              int v143 = *(_DWORD *)(v128 + 8);
              if (*v141 == v143)
              {
                unint64_t v145 = *(void *)v139;
                unint64_t v146 = *(void *)v128;
                uint64_t v124 = v190;
                if (v144)
                {
                  int v143 = *v141;
                  if (v145 <= v146) {
                    goto LABEL_317;
                  }
                }
                else
                {
                  if (v145 >= v146) {
                    goto LABEL_317;
                  }
                  int v144 = 0;
                  int v143 = 0;
                }
              }
              else
              {
                uint64_t v124 = v190;
                if (v144) {
                  goto LABEL_317;
                }
              }
            }
            unint64_t v147 = *(void *)v128;
            *(void *)unint64_t v128 = *(void *)v139;
            *(_DWORD *)(v128 + 8) = v144;
            if (v137 < 2) {
              goto LABEL_316;
            }
            while (2)
            {
              unint64_t v148 = v139;
              unint64_t v149 = v138 - 1;
              unint64_t v138 = (v138 - 1) >> 1;
              unint64_t v139 = v184 + 16 * v138;
              float v150 = (int *)(v139 + 8);
              uint64_t v151 = *v174;
              re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v195 + 72 * *(void *)v139), *v174, *(_DWORD *)(v139 + 8));
              re::pathprocessing::ContinuousEdge::getIndex(&v196, (void *)(v195 + 72 * v147), v151, v143);
              uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
              if (result)
              {
                if (result != -1) {
                  break;
                }
                int v152 = *v150;
                goto LABEL_313;
              }
              int v152 = *v150;
              if (*v150 != v143)
              {
                if (v152) {
                  break;
                }
                goto LABEL_313;
              }
              unint64_t v153 = *(void *)v139;
              if (v152)
              {
                int v152 = v143;
                if (v153 <= v147) {
                  break;
                }
                goto LABEL_313;
              }
              int v152 = v143;
              if (v153 < v147)
              {
LABEL_313:
                *(void *)unint64_t v148 = *(void *)v139;
                *(_DWORD *)(v148 + 8) = v152;
                if (v149 <= 1) {
                  goto LABEL_316;
                }
                continue;
              }
              break;
            }
            unint64_t v139 = v148;
LABEL_316:
            *(void *)unint64_t v139 = v147;
            *(_DWORD *)(v139 + 8) = v143;
            uint64_t v124 = v190;
LABEL_317:
            unint64_t v126 = v183 - 16;
            BOOL v110 = v124-- <= 2;
            unint64_t v10 = v184;
            uint64_t v125 = a3;
            if (v110) {
              return result;
            }
          }
        }
      }
      int v111 = *(_DWORD *)(v93 + 8);
      if (v111 == *(_DWORD *)(v93 + 24))
      {
        unint64_t v112 = *(void *)(v93 + 16);
        int64_t v89 = (unint64_t)(v12 - 2) >> 1;
        uint64_t v95 = v193;
        if (v111)
        {
          int64_t v91 = v176;
          if (*(void *)v93 <= v112) {
            goto LABEL_222;
          }
        }
        else
        {
          int64_t v91 = v176;
          if (*(void *)v93 >= v112) {
            goto LABEL_222;
          }
        }
      }
      else
      {
        int64_t v89 = (unint64_t)(v12 - 2) >> 1;
        int64_t v91 = v176;
        uint64_t v95 = v193;
        if (v111) {
          goto LABEL_222;
        }
      }
LABEL_221:
      v93 += 16;
      uint64_t v92 = v94;
      goto LABEL_222;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
    uint64_t v15 = v8[1];
    uint64_t v16 = **v8;
    if ((unint64_t)v11 < 0x801)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)v14, (unint64_t *)v10, v186, v16, v15);
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)v10, (unint64_t *)v14, v186, v16, v15);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v10 + 16), (unint64_t *)(v14 - 16), v173, **v8, v8[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v10 + 32), (unint64_t *)(v10 + 16 + 16 * v13), v170, **v8, v8[1]);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)(v14 - 16), (unint64_t *)v14, (unint64_t *)(v10 + 16 + 16 * v13), **v8, v8[1]);
      unint64_t v17 = *(void *)v10;
      *(void *)unint64_t v10 = *(void *)v14;
      *(void *)unint64_t v14 = v17;
      LODWORD(v17) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v17;
    }
    uint64_t v18 = **v8;
    uint64_t v191 = v8[1];
    uint64_t v19 = *v191;
    uint64_t v179 = a4 - 1;
    if (a5) {
      goto LABEL_13;
    }
    uint64_t v20 = (void *)(v18 + 72 * *(void *)v10);
    re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * *(void *)(v10 - 16)), v19, *(_DWORD *)(v10 - 8));
    re::pathprocessing::ContinuousEdge::getIndex(&v196, v20, v19, *(_DWORD *)(v10 + 8));
    int v21 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
    if (v21)
    {
      if (v21 != -1) {
        goto LABEL_90;
      }
LABEL_13:
      uint64_t v22 = 0;
      unint64_t v23 = *(void *)v10;
      int v24 = *(_DWORD *)(v10 + 8);
      unint64_t v25 = (void *)(v18 + 72 * *(void *)v10);
      while (1)
      {
        uint64_t v26 = v10 + v22;
        re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * *(void *)(v10 + v22 + 16)), v19, *(_DWORD *)(v10 + v22 + 24));
        re::pathprocessing::ContinuousEdge::getIndex(&v196, v25, v19, v24);
        int v27 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
        if (v27)
        {
          if (v27 != -1) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        int v28 = *(_DWORD *)(v26 + 24);
        if (v28 == v24) {
          break;
        }
        if (v28) {
          goto LABEL_25;
        }
LABEL_24:
        v22 += 16;
      }
      unint64_t v29 = *(void *)(v26 + 16);
      if (v28)
      {
        if (v29 <= v23) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      if (v29 < v23) {
        goto LABEL_24;
      }
LABEL_25:
      unint64_t v30 = v10 + v22 + 16;
      unint64_t i = (unint64_t)v186;
      if (v22)
      {
        while (1)
        {
          re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * *(void *)i), v19, *(_DWORD *)(i + 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v25, v19, v24);
          int v32 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (v32)
          {
            if (v32 == -1) {
              goto LABEL_54;
            }
          }
          else
          {
            int v33 = *(_DWORD *)(i + 8);
            if (v33 == v24)
            {
              if (v33)
              {
                if (*(void *)i > v23) {
                  goto LABEL_54;
                }
              }
              else if (*(void *)i < v23)
              {
                goto LABEL_54;
              }
            }
            else if (!v33)
            {
              goto LABEL_54;
            }
          }
          i -= 16;
        }
      }
      unint64_t i = v182;
      if (v30 < v182)
      {
        for (unint64_t i = (unint64_t)v186; ; i -= 16)
        {
          re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * *(void *)i), v19, *(_DWORD *)(i + 8));
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v25, v19, v24);
          int v34 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (v34)
          {
            if (v30 >= i || v34 == -1) {
              break;
            }
          }
          else
          {
            int v35 = *(_DWORD *)(i + 8);
            if (v35 == v24)
            {
              unint64_t v36 = *(void *)i;
              if (v35)
              {
                if (v30 >= i || v36 > v23) {
                  break;
                }
              }
              else if (v30 >= i || v36 < v23)
              {
                break;
              }
            }
            else if (v30 >= i || !v35)
            {
              break;
            }
          }
        }
      }
LABEL_54:
      v10 += v22 + 16;
      if (v30 < i)
      {
        unint64_t v37 = i;
        do
        {
          unint64_t v38 = *(void *)v10;
          *(void *)unint64_t v10 = *(void *)v37;
          *(void *)unint64_t v37 = v38;
          LODWORD(v38) = *(_DWORD *)(v10 + 8);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)(v37 + 8);
          *(_DWORD *)(v37 + 8) = v38;
          uint64_t v39 = *v191;
          do
          {
            while (1)
            {
              while (1)
              {
                uint64_t v40 = *(void *)(v10 + 16);
                v10 += 16;
                re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * v40), v39, *(_DWORD *)(v10 + 8));
                re::pathprocessing::ContinuousEdge::getIndex(&v196, v25, v39, v24);
                int v41 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
                if (!v41) {
                  break;
                }
                if (v41 != -1) {
                  goto LABEL_67;
                }
              }
              int v42 = *(_DWORD *)(v10 + 8);
              if (v42 != v24) {
                break;
              }
              if (v42)
              {
                if (*(void *)v10 <= v23) {
                  goto LABEL_67;
                }
              }
              else if (*(void *)v10 >= v23)
              {
                goto LABEL_67;
              }
            }
          }
          while (!v42);
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_67:
                while (1)
                {
                  uint64_t v43 = *(void *)(v37 - 16);
                  v37 -= 16;
                  re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v18 + 72 * v43), v39, *(_DWORD *)(v37 + 8));
                  re::pathprocessing::ContinuousEdge::getIndex(&v196, v25, v39, v24);
                  int v44 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
                  if (!v44) {
                    break;
                  }
                  if (v44 == -1) {
                    goto LABEL_77;
                  }
                }
                int v45 = *(_DWORD *)(v37 + 8);
                if (v45 == v24) {
                  break;
                }
                if (!v45) {
                  goto LABEL_77;
                }
              }
              if (!v45) {
                break;
              }
              if (*(void *)v37 > v23) {
                goto LABEL_77;
              }
            }
          }
          while (*(void *)v37 >= v23);
LABEL_77:
          ;
        }
        while (v10 < v37);
      }
      if (v10 - 16 != v184)
      {
        *(void *)unint64_t v184 = *(void *)(v10 - 16);
        *(_DWORD *)(v184 + 8) = *(_DWORD *)(v10 - 8);
      }
      *(void *)(v10 - 16) = v23;
      *(_DWORD *)(v10 - 8) = v24;
      BOOL v5 = v30 >= i;
      a4 = v179;
      a2 = v182;
      uint64_t v8 = a3;
      if (v5)
      {
        BOOL v46 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v184, v10 - 16, a3);
        uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(v10, v182, a3);
        if (result)
        {
          a2 = v10 - 16;
          unint64_t v10 = v184;
          if (v46) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v46) {
          goto LABEL_84;
        }
      }
      else
      {
LABEL_84:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,false>(v184, v10 - 16, a3, v179, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      int v47 = *(_DWORD *)(v10 - 8);
      if (v47 == *(_DWORD *)(v10 + 8))
      {
        unint64_t v48 = *(void *)(v10 - 16);
        if (v47)
        {
          if (v48 > *(void *)v10) {
            goto LABEL_13;
          }
        }
        else if (v48 < *(void *)v10)
        {
          goto LABEL_13;
        }
      }
      else if (!v47)
      {
        goto LABEL_13;
      }
LABEL_90:
      unint64_t v49 = *(void *)v10;
      int v50 = *(_DWORD *)(v10 + 8);
      uint64_t v51 = (void *)(v18 + 72 * *(void *)v10);
      uint64_t v52 = (void *)(v18 + 72 * *(void *)(v182 - 16));
      re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v19, v50);
      re::pathprocessing::ContinuousEdge::getIndex(&v196, v52, v19, *(_DWORD *)(v182 - 8));
      uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
      if (result)
      {
        if (result != -1) {
          goto LABEL_92;
        }
        do
        {
          while (1)
          {
            while (1)
            {
LABEL_111:
              while (1)
              {
                uint64_t v54 = *(void *)(v10 + 16);
                v10 += 16;
                re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v19, v50);
                re::pathprocessing::ContinuousEdge::getIndex(&v196, (void *)(v18 + 72 * v54), v19, *(_DWORD *)(v10 + 8));
                uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
                if (!result) {
                  break;
                }
                if (result == -1) {
                  goto LABEL_121;
                }
              }
              if (v50 == *(_DWORD *)(v10 + 8)) {
                break;
              }
              if (!v50) {
                goto LABEL_121;
              }
            }
            if (!v50) {
              break;
            }
            if (v49 > *(void *)v10) {
              goto LABEL_121;
            }
          }
        }
        while (v49 >= *(void *)v10);
      }
      else
      {
        if (v50 == *(_DWORD *)(v182 - 8))
        {
          if (v50)
          {
            if (v49 > *v186) {
              goto LABEL_111;
            }
          }
          else if (v49 < *v186)
          {
            goto LABEL_111;
          }
        }
        else if (!v50)
        {
          goto LABEL_111;
        }
LABEL_92:
        while (1)
        {
          v10 += 16;
          if (v10 >= v182) {
            break;
          }
          uint64_t v53 = (void *)(v18 + 72 * *(void *)v10);
          re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v19, v50);
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v53, v19, *(_DWORD *)(v10 + 8));
          uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (result)
          {
            if (result == -1) {
              break;
            }
          }
          else if (v50 == *(_DWORD *)(v10 + 8))
          {
            if (v50)
            {
              if (v49 > *(void *)v10) {
                break;
              }
            }
            else if (v49 < *(void *)v10)
            {
              break;
            }
          }
          else if (!v50)
          {
            break;
          }
        }
      }
LABEL_121:
      unint64_t j = v182;
      if (v10 < v182)
      {
        for (unint64_t j = (unint64_t)v186; ; j -= 16)
        {
          uint64_t v56 = (void *)(v18 + 72 * *(void *)j);
          re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v19, v50);
          re::pathprocessing::ContinuousEdge::getIndex(&v196, v56, v19, *(_DWORD *)(j + 8));
          uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
          if (result)
          {
            if (result != -1) {
              break;
            }
          }
          else if (v50 == *(_DWORD *)(j + 8))
          {
            if (v50)
            {
              if (v49 <= *(void *)j) {
                break;
              }
            }
            else if (v49 >= *(void *)j)
            {
              break;
            }
          }
          else if (v50)
          {
            break;
          }
        }
      }
LABEL_155:
      while (v10 < j)
      {
        unint64_t v57 = *(void *)v10;
        *(void *)unint64_t v10 = *(void *)j;
        *(void *)unint64_t j = v57;
        LODWORD(v57) = *(_DWORD *)(v10 + 8);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(j + 8);
        *(_DWORD *)(j + 8) = v57;
        uint64_t v58 = *v191;
        do
        {
          while (1)
          {
            while (1)
            {
              uint64_t v59 = *(void *)(v10 + 16);
              v10 += 16;
              re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v58, v50);
              re::pathprocessing::ContinuousEdge::getIndex(&v196, (void *)(v18 + 72 * v59), v58, *(_DWORD *)(v10 + 8));
              int v60 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
              if (!v60) {
                break;
              }
              if (v60 == -1) {
                goto LABEL_145;
              }
            }
            if (v50 != *(_DWORD *)(v10 + 8)) {
              break;
            }
            if (v50)
            {
              if (v49 > *(void *)v10) {
                goto LABEL_145;
              }
            }
            else if (v49 < *(void *)v10)
            {
              goto LABEL_145;
            }
          }
        }
        while (v50);
        do
        {
          while (1)
          {
            while (1)
            {
LABEL_145:
              while (1)
              {
                uint64_t v61 = *(void *)(j - 16);
                j -= 16;
                re::pathprocessing::ContinuousEdge::getIndex(&v197, v51, v58, v50);
                re::pathprocessing::ContinuousEdge::getIndex(&v196, (void *)(v18 + 72 * v61), v58, *(_DWORD *)(j + 8));
                uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
                if (!result) {
                  break;
                }
                if (result != -1) {
                  goto LABEL_155;
                }
              }
              if (v50 == *(_DWORD *)(j + 8)) {
                break;
              }
              if (v50) {
                goto LABEL_155;
              }
            }
            if (!v50) {
              break;
            }
            if (v49 <= *(void *)j) {
              goto LABEL_155;
            }
          }
        }
        while (v49 < *(void *)j);
      }
      BOOL v5 = v10 - 16 >= v184;
      BOOL v6 = v10 - 16 == v184;
      if (v10 - 16 != v184)
      {
        *(void *)unint64_t v184 = *(void *)(v10 - 16);
        *(_DWORD *)(v184 + 8) = *(_DWORD *)(v10 - 8);
      }
      a5 = 0;
      *(void *)(v10 - 16) = v49;
      *(_DWORD *)(v10 - 8) = v50;
      a4 = v179;
      a2 = v182;
      uint64_t v8 = a3;
    }
  }
  unint64_t v68 = v10 + 16;
  BOOL v70 = v10 == a2 || v68 == a2;
  if ((a5 & 1) == 0)
  {
    if (v70) {
      return result;
    }
    __int32 v154 = v8[1];
    uint64_t v155 = **v8;
    while (1)
    {
      unint64_t v156 = v10;
      unint64_t v10 = v68;
      uint64_t v157 = (void *)(v155 + 72 * *(void *)v156);
      uint64_t v158 = *v154;
      re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v155 + 72 * *(void *)(v156 + 16)), *v154, *(_DWORD *)(v156 + 24));
      re::pathprocessing::ContinuousEdge::getIndex(&v196, v157, v158, *(_DWORD *)(v156 + 8));
      uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
      if (result)
      {
        if (result != -1) {
          goto LABEL_345;
        }
        int v159 = *(_DWORD *)(v156 + 24);
      }
      else
      {
        int v159 = *(_DWORD *)(v156 + 24);
        if (v159 == *(_DWORD *)(v156 + 8))
        {
          if (v159)
          {
            if (*(void *)v10 <= *(void *)v156) {
              goto LABEL_345;
            }
          }
          else
          {
            if (*(void *)v10 >= *(void *)v156) {
              goto LABEL_345;
            }
            int v159 = 0;
          }
        }
        else if (v159)
        {
          goto LABEL_345;
        }
      }
      unint64_t v185 = v10;
      unint64_t v160 = *(void *)v10;
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v161 = v156;
              *(void *)(v156 + 16) = *(void *)v156;
              *(_DWORD *)(v156 + 24) = *(_DWORD *)(v156 + 8);
              uint64_t v162 = *(void *)(v156 - 16);
              v156 -= 16;
              uint64_t v163 = *v154;
              re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v155 + 72 * v160), *v154, v159);
              re::pathprocessing::ContinuousEdge::getIndex(&v196, (void *)(v155 + 72 * v162), v163, *(_DWORD *)(v161 - 8));
              uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
              if (!result) {
                break;
              }
              if (result != -1) {
                goto LABEL_344;
              }
            }
            if (v159 == *(_DWORD *)(v161 - 8)) {
              break;
            }
            if (v159) {
              goto LABEL_344;
            }
          }
          unint64_t v164 = *(void *)(v161 - 16);
          if (!v159) {
            break;
          }
          if (v160 <= v164) {
            goto LABEL_344;
          }
        }
      }
      while (v160 < v164);
LABEL_344:
      *(void *)unint64_t v161 = v160;
      *(_DWORD *)(v161 + 8) = v159;
      a2 = v182;
      unint64_t v10 = v185;
LABEL_345:
      unint64_t v68 = v10 + 16;
      if (v10 + 16 == a2) {
        return result;
      }
    }
  }
  if (v70) {
    return result;
  }
  uint64_t v71 = 0;
  uint64_t v72 = v8[1];
  uint64_t v73 = **v8;
  unint64_t v74 = v10;
  while (2)
  {
    unint64_t v75 = v74;
    unint64_t v74 = v68;
    uint64_t v76 = (void *)(v73 + 72 * *(void *)v75);
    uint64_t v77 = *v72;
    re::pathprocessing::ContinuousEdge::getIndex(&v197, (void *)(v73 + 72 * *(void *)(v75 + 16)), *v72, *(_DWORD *)(v75 + 24));
    re::pathprocessing::ContinuousEdge::getIndex(&v196, v76, v77, *(_DWORD *)(v75 + 8));
    uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
    if (result)
    {
      if (result != -1) {
        goto LABEL_213;
      }
      int v78 = *(_DWORD *)(v75 + 24);
    }
    else
    {
      int v78 = *(_DWORD *)(v75 + 24);
      if (v78 == *(_DWORD *)(v75 + 8))
      {
        if (v78)
        {
          if (*(void *)v74 <= *(void *)v75) {
            goto LABEL_213;
          }
        }
        else
        {
          if (*(void *)v74 >= *(void *)v75) {
            goto LABEL_213;
          }
          int v78 = 0;
        }
      }
      else if (v78)
      {
        goto LABEL_213;
      }
    }
    unint64_t v79 = *(void *)(v75 + 16);
    *(void *)(v75 + 16) = *(void *)v75;
    *(_DWORD *)(v74 + 8) = *(_DWORD *)(v75 + 8);
    unint64_t v80 = v10;
    if (v75 == v10) {
      goto LABEL_212;
    }
    unint64_t v187 = v74;
    unint64_t v192 = v79;
    unint64_t v81 = (void *)(v73 + 72 * v79);
    uint64_t v82 = v71;
    while (2)
    {
      uint64_t v83 = v10 + v82;
      uint64_t v84 = (void *)(v73 + 72 * *(void *)(v83 - 16));
      uint64_t v85 = *v72;
      re::pathprocessing::ContinuousEdge::getIndex(&v197, v81, *v72, v78);
      re::pathprocessing::ContinuousEdge::getIndex(&v196, v84, v85, *(_DWORD *)(v83 - 8));
      uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v197, (float32x2_t *)&v196);
      if (result)
      {
        if (result != -1) {
          break;
        }
        goto LABEL_208;
      }
      if (v78 != *(_DWORD *)(v83 - 8))
      {
        if (v78)
        {
          unint64_t v10 = v184;
          unint64_t v80 = v184 + v82;
          goto LABEL_211;
        }
        goto LABEL_208;
      }
      unint64_t v86 = *(void *)(v83 - 16);
      if (v78)
      {
        if (v192 <= v86) {
          break;
        }
        goto LABEL_208;
      }
      if (v192 < v86)
      {
LABEL_208:
        v75 -= 16;
        uint64_t v87 = v184 + v82;
        *(void *)uint64_t v87 = *(void *)(v83 - 16);
        int v88 = *(_DWORD *)(v83 - 8);
        unint64_t v10 = v184;
        *(_DWORD *)(v87 + 8) = v88;
        v82 -= 16;
        if (!v82)
        {
          unint64_t v80 = v184;
          goto LABEL_211;
        }
        continue;
      }
      break;
    }
    unint64_t v80 = v75;
    unint64_t v10 = v184;
LABEL_211:
    unint64_t v74 = v187;
    unint64_t v79 = v192;
LABEL_212:
    *(void *)unint64_t v80 = v79;
    *(_DWORD *)(v80 + 8) = v78;
LABEL_213:
    unint64_t v68 = v74 + 16;
    v71 += 16;
    if (v74 + 16 != v182) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t **a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(a1, a2, a3, a4, a6);
  unint64_t v10 = *a5;
  uint64_t v11 = a6[1];
  uint64_t v12 = **a6;
  unint64_t v13 = *(void *)a4;
  unint64_t v14 = (void *)(v12 + 72 * *(void *)a4);
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v39 = v11;
  uint64_t v16 = *v11;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (void *)(v12 + 72 * *a5), *v11, v15);
  int v17 = *(_DWORD *)(a4 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v14, v16, v17);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v15 == v17)
  {
    if (v15)
    {
      int v17 = v15;
      if (v10 <= v13) {
        return result;
      }
    }
    else
    {
      if (v10 >= v13) {
        return result;
      }
      int v17 = 0;
    }
  }
  else if (v15)
  {
    return result;
  }
  *(void *)a4 = v10;
  *a5 = v13;
  *(_DWORD *)(a4 + 8) = v15;
  *((_DWORD *)a5 + 2) = v17;
  unint64_t v19 = *(void *)a4;
  unint64_t v20 = *(void *)a3;
  int v21 = (void *)(v12 + 72 * *(void *)a3);
  int v22 = *(_DWORD *)(a4 + 8);
  uint64_t v23 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (void *)(v12 + 72 * *(void *)a4), *v39, v22);
  int v24 = *(_DWORD *)(a3 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v21, v23, v24);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v22 == v24)
  {
    if (v22)
    {
      int v24 = v22;
      if (v19 <= v20) {
        return result;
      }
    }
    else
    {
      if (v19 >= v20) {
        return result;
      }
      int v24 = 0;
    }
  }
  else if (v22)
  {
    return result;
  }
  *(void *)a3 = v19;
  *(void *)a4 = v20;
  *(_DWORD *)(a3 + 8) = v22;
  *(_DWORD *)(a4 + 8) = v24;
  unint64_t v25 = *(void *)a3;
  unint64_t v26 = *(void *)a2;
  int v27 = (void *)(v12 + 72 * *(void *)a2);
  int v28 = *(_DWORD *)(a3 + 8);
  uint64_t v29 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (void *)(v12 + 72 * *(void *)a3), *v39, v28);
  int v30 = *(_DWORD *)(a2 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v27, v29, v30);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v28 == v30)
  {
    if (v28)
    {
      int v30 = v28;
      if (v25 <= v26) {
        return result;
      }
    }
    else
    {
      if (v25 >= v26) {
        return result;
      }
      int v30 = 0;
    }
  }
  else if (v28)
  {
    return result;
  }
  *(void *)a2 = v25;
  *(void *)a3 = v26;
  *(_DWORD *)(a2 + 8) = v28;
  *(_DWORD *)(a3 + 8) = v30;
  unint64_t v31 = *(void *)a2;
  unint64_t v32 = *(void *)a1;
  int v33 = (void *)(v12 + 72 * *(void *)a1);
  int v34 = *(_DWORD *)(a2 + 8);
  uint64_t v35 = *v39;
  re::pathprocessing::ContinuousEdge::getIndex(&v41, (void *)(v12 + 72 * *(void *)a2), *v39, v34);
  int v36 = *(_DWORD *)(a1 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v40, v33, v35, v36);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v41, (float32x2_t *)&v40);
  if (result)
  {
    if (result != -1) {
      return result;
    }
    goto LABEL_45;
  }
  if (v34 != v36)
  {
    if (v34) {
      return result;
    }
    goto LABEL_45;
  }
  if (!v34)
  {
    if (v31 >= v32) {
      return result;
    }
    int v36 = 0;
    goto LABEL_45;
  }
  int v36 = v34;
  if (v31 > v32)
  {
LABEL_45:
    *(void *)a1 = v31;
    *(void *)a2 = v32;
    *(_DWORD *)(a1 + 8) = v34;
    *(_DWORD *)(a2 + 8) = v36;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v33 = *a2;
  unint64_t v10 = (void *)(a4 + 72 * *a2);
  unint64_t v32 = *a1;
  uint64_t v11 = (void *)(a4 + 72 * *a1);
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = *a5;
  re::pathprocessing::ContinuousEdge::getIndex(&v35, v10, *a5, v12);
  int v14 = *((_DWORD *)a1 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v11, v13, v14);
  int v15 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  unint64_t v31 = a5;
  if (!v15)
  {
    if (v12 == v14)
    {
      if (v12)
      {
        if (v33 <= v32) {
          goto LABEL_3;
        }
      }
      else if (v33 >= v32)
      {
        goto LABEL_3;
      }
    }
    else if (v12)
    {
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v30 = *a3;
    int v19 = *((_DWORD *)a3 + 2);
    re::pathprocessing::ContinuousEdge::getIndex(&v35, (void *)(a4 + 72 * *a3), v13, v19);
    re::pathprocessing::ContinuousEdge::getIndex(&v34, v10, v13, v12);
    uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
    if (result)
    {
      if (result == -1) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v19 == v12)
      {
        if (v19)
        {
          if (v30 <= v33) {
            goto LABEL_45;
          }
        }
        else if (v30 >= v33)
        {
          int v12 = 0;
          goto LABEL_45;
        }
LABEL_40:
        *a1 = v30;
        *a3 = v32;
        *((_DWORD *)a1 + 2) = v19;
        goto LABEL_57;
      }
      if (!v19) {
        goto LABEL_40;
      }
    }
LABEL_45:
    *a1 = v33;
    *a2 = v32;
    *((_DWORD *)a1 + 2) = v12;
    *((_DWORD *)a2 + 2) = v14;
    unint64_t v27 = *a3;
    int v28 = *((_DWORD *)a3 + 2);
    uint64_t v29 = *v31;
    re::pathprocessing::ContinuousEdge::getIndex(&v35, (void *)(a4 + 72 * *a3), *v31, v28);
    re::pathprocessing::ContinuousEdge::getIndex(&v34, v11, v29, v14);
    uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
    if (result)
    {
      if (result != -1) {
        return result;
      }
    }
    else if (v28 == v14)
    {
      if (v28)
      {
        if (v27 <= v32) {
          return result;
        }
      }
      else
      {
        if (v27 >= v32) {
          return result;
        }
        int v14 = 0;
      }
    }
    else if (v28)
    {
      return result;
    }
    *a2 = v27;
    *a3 = v32;
    *((_DWORD *)a2 + 2) = v28;
LABEL_57:
    *((_DWORD *)a3 + 2) = v14;
    return result;
  }
  if (v15 == -1) {
    goto LABEL_15;
  }
LABEL_3:
  unint64_t v16 = *a3;
  int v17 = *((_DWORD *)a3 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v35, (void *)(a4 + 72 * *a3), v13, v17);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v10, v13, v12);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v17 == v12)
  {
    if (v17)
    {
      if (v16 <= v33) {
        return result;
      }
    }
    else
    {
      if (v16 >= v33) {
        return result;
      }
      int v12 = 0;
    }
  }
  else if (v17)
  {
    return result;
  }
  *a2 = v16;
  *a3 = v33;
  *((_DWORD *)a2 + 2) = v17;
  *((_DWORD *)a3 + 2) = v12;
  unint64_t v20 = *a2;
  int v21 = (void *)(a4 + 72 * *a2);
  unint64_t v22 = *a1;
  uint64_t v23 = (void *)(a4 + 72 * *a1);
  int v24 = *((_DWORD *)a2 + 2);
  uint64_t v25 = *v31;
  re::pathprocessing::ContinuousEdge::getIndex(&v35, v21, *v31, v24);
  int v26 = *((_DWORD *)a1 + 2);
  re::pathprocessing::ContinuousEdge::getIndex(&v34, v23, v25, v26);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v35, (float32x2_t *)&v34);
  if (result)
  {
    if (result != -1) {
      return result;
    }
    goto LABEL_43;
  }
  if (v24 != v26)
  {
    if (v24) {
      return result;
    }
    goto LABEL_43;
  }
  if (!v24)
  {
    if (v20 >= v22) {
      return result;
    }
    int v26 = 0;
    goto LABEL_43;
  }
  int v26 = v24;
  if (v20 > v22)
  {
LABEL_43:
    *a1 = v20;
    *a2 = v22;
    *((_DWORD *)a1 + 2) = v24;
    *((_DWORD *)a2 + 2) = v26;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v8 = *(void *)(a2 - 16);
      uint64_t v9 = **a3;
      unint64_t v10 = *(void *)a1;
      uint64_t v11 = (void *)(v9 + 72 * *(void *)a1);
      int v12 = *(_DWORD *)(a2 - 8);
      uint64_t v13 = *a3[1];
      re::pathprocessing::ContinuousEdge::getIndex(&v39, (void *)(v9 + 72 * v8), v13, v12);
      int v14 = *(_DWORD *)(a1 + 8);
      re::pathprocessing::ContinuousEdge::getIndex(&v38, v11, v13, v14);
      int v15 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
      if (v15)
      {
        if (v15 != -1) {
          return 1;
        }
      }
      else if (v12 == v14)
      {
        if (v12)
        {
          int v14 = v12;
          if (v8 <= v10) {
            return 1;
          }
        }
        else
        {
          if (v8 >= v10) {
            return 1;
          }
          int v14 = 0;
        }
      }
      else if (v12)
      {
        return 1;
      }
      *(void *)a1 = v8;
      *(void *)(v4 - 16) = v10;
      *(_DWORD *)(a1 + 8) = v12;
      BOOL result = 1;
      *(_DWORD *)(v4 - 8) = v14;
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16), **a3, a3[1]);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16), a3);
      return 1;
    default:
      uint64_t v16 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), **a3, a3[1]);
      uint64_t v17 = a1 + 48;
      if (a1 + 48 == v4) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      uint64_t v36 = **a3;
      unint64_t v37 = a3[1];
      uint64_t v33 = v4;
      break;
  }
  while (2)
  {
    unint64_t v20 = *(void *)v17;
    int v21 = (void *)(v36 + 72 * *(void *)v17);
    unint64_t v22 = (void *)(v36 + 72 * *(void *)v16);
    uint64_t v23 = *v37;
    re::pathprocessing::ContinuousEdge::getIndex(&v39, v21, *v37, *(_DWORD *)(v17 + 8));
    re::pathprocessing::ContinuousEdge::getIndex(&v38, v22, v23, *(_DWORD *)(v16 + 8));
    int v24 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
    if (v24)
    {
      if (v24 != -1) {
        goto LABEL_35;
      }
      int v25 = *(_DWORD *)(v17 + 8);
    }
    else
    {
      int v25 = *(_DWORD *)(v17 + 8);
      if (v25 == *(_DWORD *)(v16 + 8))
      {
        if (v25)
        {
          if (v20 <= *(void *)v16) {
            goto LABEL_35;
          }
        }
        else
        {
          if (v20 >= *(void *)v16) {
            goto LABEL_35;
          }
          int v25 = 0;
        }
      }
      else if (v25)
      {
        goto LABEL_35;
      }
    }
    *(void *)uint64_t v17 = *(void *)v16;
    *(_DWORD *)(v17 + 8) = *(_DWORD *)(v16 + 8);
    uint64_t v26 = a1;
    if (v16 == a1) {
      goto LABEL_34;
    }
    unint64_t v35 = v20;
    int v34 = v19;
    uint64_t v27 = v18;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      uint64_t v29 = (void *)(v36 + 72 * *(void *)(a1 + v27 + 16));
      uint64_t v30 = *v37;
      re::pathprocessing::ContinuousEdge::getIndex(&v39, v21, *v37, v25);
      re::pathprocessing::ContinuousEdge::getIndex(&v38, v29, v30, *(_DWORD *)(a1 + v27 + 24));
      int v31 = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v39, (float32x2_t *)&v38);
      if (v31)
      {
        if (v31 != -1) {
          break;
        }
        goto LABEL_30;
      }
      if (v25 != *(_DWORD *)(v28 + 24))
      {
        if (v25) {
          break;
        }
        goto LABEL_30;
      }
      unint64_t v32 = *(void *)(v28 + 16);
      if (v25)
      {
        if (v35 <= v32)
        {
          uint64_t v26 = a1 + v27 + 32;
          goto LABEL_33;
        }
        goto LABEL_30;
      }
      if (v35 >= v32) {
        break;
      }
LABEL_30:
      v16 -= 16;
      *(void *)(v28 + 32) = *(void *)(v28 + 16);
      *(_DWORD *)(a1 + v27 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_DWORD *)(v28 + 24);
      v27 -= 16;
      if (v27 == -32)
      {
        uint64_t v26 = a1;
        goto LABEL_33;
      }
    }
    uint64_t v26 = v16;
LABEL_33:
    uint64_t v4 = v33;
    int v19 = v34;
    unint64_t v20 = v35;
LABEL_34:
    *(void *)uint64_t v26 = v20;
    *(_DWORD *)(v26 + 8) = v25;
    if (++v19 != 8)
    {
LABEL_35:
      uint64_t v16 = v17;
      v18 += 16;
      v17 += 16;
      if (v17 == v4) {
        return 1;
      }
      continue;
    }
    return v17 + 16 == v4;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::ContinuousVertex::sort(std::vector<re::pathprocessing::Bezier2> const&,std::vector<re::pathprocessing::ContinuousEdge> const&)::$_0 &,std::pair<unsigned long,re::pathprocessing::ContinuousEdge::EdgeEnd> *>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3, **a5, a5[1]);
  unint64_t v8 = *(void *)a4;
  uint64_t v9 = a5[1];
  uint64_t v10 = **a5;
  unint64_t v11 = *(void *)a3;
  int v12 = (void *)(v10 + 72 * *(void *)a3);
  int v13 = *(_DWORD *)(a4 + 8);
  uint64_t v14 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (void *)(v10 + 72 * *(void *)a4), *v9, v13);
  int v15 = *(_DWORD *)(a3 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v12, v14, v15);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v13 == v15)
  {
    if (v13)
    {
      int v15 = v13;
      if (v8 <= v11) {
        return result;
      }
    }
    else
    {
      if (v8 >= v11) {
        return result;
      }
      int v15 = 0;
    }
  }
  else if (v13)
  {
    return result;
  }
  *(void *)a3 = v8;
  *(void *)a4 = v11;
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a4 + 8) = v15;
  unint64_t v17 = *(void *)a3;
  unint64_t v18 = *(void *)a2;
  int v19 = (void *)(v10 + 72 * *(void *)a2);
  int v20 = *(_DWORD *)(a3 + 8);
  uint64_t v21 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (void *)(v10 + 72 * *(void *)a3), *v9, v20);
  int v22 = *(_DWORD *)(a2 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v19, v21, v22);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if (result)
  {
    if (result != -1) {
      return result;
    }
  }
  else if (v20 == v22)
  {
    if (v20)
    {
      int v22 = v20;
      if (v17 <= v18) {
        return result;
      }
    }
    else
    {
      if (v17 >= v18) {
        return result;
      }
      int v22 = 0;
    }
  }
  else if (v20)
  {
    return result;
  }
  *(void *)a2 = v17;
  *(void *)a3 = v18;
  *(_DWORD *)(a2 + 8) = v20;
  *(_DWORD *)(a3 + 8) = v22;
  unint64_t v23 = *(void *)a2;
  unint64_t v24 = *(void *)a1;
  int v25 = (void *)(v10 + 72 * *(void *)a1);
  int v26 = *(_DWORD *)(a2 + 8);
  uint64_t v27 = *v9;
  re::pathprocessing::ContinuousEdge::getIndex(&v32, (void *)(v10 + 72 * *(void *)a2), *v9, v26);
  int v28 = *(_DWORD *)(a1 + 8);
  re::pathprocessing::ContinuousEdge::getIndex(&v31, v25, v27, v28);
  uint64_t result = re::pathprocessing::ContinuousVertex::compareAngle((float32x2_t *)&v32, (float32x2_t *)&v31);
  if (result)
  {
    if (result != -1) {
      return result;
    }
    goto LABEL_34;
  }
  if (v26 != v28)
  {
    if (v26) {
      return result;
    }
    goto LABEL_34;
  }
  if (!v26)
  {
    if (v23 >= v24) {
      return result;
    }
    int v28 = 0;
    goto LABEL_34;
  }
  int v28 = v26;
  if (v23 > v24)
  {
LABEL_34:
    *(void *)a1 = v23;
    *(void *)a2 = v24;
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a2 + 8) = v28;
  }
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

void std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::deque<unsigned long>::~deque[abi:nn180100]((void *)(v4 - 72));
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<unsigned long>::~deque[abi:nn180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::vector<re::pathprocessing::ContinuousEdge>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(void *)(v6 - 56) = *(void *)(v2 + v5 - 56);
      *(void *)(v6 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v7 - 56) = 0uLL;
      uint64_t v8 = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v7 - 72) = 0uLL;
      *(void *)(v6 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v8;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 24);
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 24) = v9;
      v5 -= 72;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *uint64_t result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::ContinuousEdge>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<re::pathprocessing::ContinuousEdge>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::deque<unsigned long>::~deque[abi:nn180100]((void *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<re::pathprocessing::ContinuousVertex>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<unsigned long>::__add_front_capacity(void **a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 6) - 1;
  }
  if ((v6 & 0x1FF) != 0) {
    unint64_t v8 = (v6 >> 9) + 1;
  }
  else {
    unint64_t v8 = v6 >> 9;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 9) {
    unint64_t v11 = v10 >> 9;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 9)
  {
    for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
    {
      int v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
            int v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 511 : 512;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 9)); v11; --v11)
      {
        unint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 9;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      BOOL v70 = a1 + 3;
      if (v17) {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v12, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      unint64_t v68 = v18;
      uint64_t v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      int v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v70, v35);
            int8x16_t v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              int8x16_t v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)int8x16_t v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            uint64_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            unint64_t v68 = i;
            uint64_t v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            int8x16_t v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            int v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            unint64_t v68 = &v32[v33];
          }
        }
        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        int v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      int v44 = (char *)a1[1];
      if (v44 == v25)
      {
        int v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              uint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v70, v52);
              long long v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              int v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              unint64_t v68 = i;
              uint64_t v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              unint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              uint64_t v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              unint64_t v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        int v25 = (char *)a1[1];
      }
      unint64_t v62 = v69;
      uint64_t v63 = (char *)a1[3];
      uint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      uint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      unint64_t v68 = v44;
      uint64_t v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        unint64_t v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void *std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = a2 + ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3);
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

void std::deque<unsigned long>::__add_back_capacity(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          int8x16_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          int v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_76;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 511;
          }
          else {
            uint64_t v64 = 512;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_76:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              unint64_t v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v78);
              unint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              unint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int64_t v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      uint64_t v39 = (void *)a1[1];
      if (v8)
      {
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              unint64_t v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = v39;
      if ((void *)a1[2] != v39)
      {
        uint64_t v57 = (void *)a1[2];
        do
          std::__split_buffer<unsigned long *>::push_front((uint64_t)__p, --v57);
        while (v57 != (void *)a1[1]);
        uint64_t v39 = (void *)a1[2];
      }
      uint64_t v58 = (char *)*a1;
      long long v59 = *(_OWORD *)__p;
      long long v60 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      uint64_t v61 = a1[3];
      uint64_t v62 = a1[4];
      *(_OWORD *)a1 = v59;
      *((_OWORD *)a1 + 1) = v60;
      *(void *)&long long v90 = v39;
      *((void *)&v90 + 1) = v61;
      a1[4] = v62 - v38;
      if (v39 != v57) {
        *(void *)&long long v90 = (char *)v39 + (((char *)v57 - (char *)v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v58) {
        operator delete(v58);
      }
    }
  }
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>>>(uint64_t *a1, unsigned char *a2, uint64_t *a3, unsigned char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v19 = *(void ***)a5;
    uint64_t v20 = *(char **)(a5 + 8);
    uint64_t v18 = a4;
  }
  else
  {
    unint64_t v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v22, a2, (unsigned char *)(*a1 + 4096), *(void ***)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    unint64_t v9 = *(void ***)a5;
    for (uint64_t i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *v8;
      unint64_t v14 = (char *)*v9++;
      unint64_t v13 = v14;
      while (1)
      {
        uint64_t v15 = v13 - i + 4096;
        if ((4096 - 8 * v11) >> 3 >= v15 >> 3) {
          uint64_t v16 = v15 >> 3;
        }
        else {
          uint64_t v16 = (4096 - 8 * v11) >> 3;
        }
        if (v16) {
          memmove(i, (const void *)(v12 + 8 * v11), 8 * v16);
        }
        v11 += v16;
        if (v11 == 512) {
          break;
        }
        unint64_t v17 = (char *)*v9++;
        unint64_t v13 = v17;
        uint64_t i = v17;
      }
      i += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == i) {
        uint64_t i = (char *)*v9;
      }
      else {
        --v9;
      }
      *(void *)a5 = v9;
      *(void *)(a5 + 8) = i;
    }
    a2 = (unsigned char *)*a3;
    uint64_t v18 = a4;
    uint64_t v19 = v9;
    uint64_t v20 = i;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v22, a2, v18, v19, v20);
  double result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,unsigned long *,unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(void *result, unsigned char *__src, unsigned char *a3, void **a4, char *__dst)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (__src != a3)
  {
    unint64_t v9 = __src;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12) {
        double result = memmove(__dst, v9, 8 * v12);
      }
      v9 += 8 * v12;
      if (v9 == a3) {
        break;
      }
      unint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *unint64_t v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(__n128 *a1, char **a2, char *a3, char **a4, char *a5, void *a6, char *a7)
{
  if (a2 == a4)
  {
    long long v23 = a3;
    uint64_t v22 = a5;
    uint64_t v24 = a6;
    int v25 = a7;
  }
  else
  {
    uint64_t v12 = a4 - 1;
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v27, *a4, a5, a6, a7);
    unint64_t v14 = (char *)v28.n128_u64[1];
    unint64_t v13 = (void *)v28.n128_u64[0];
    if (v12 != a2)
    {
      uint64_t v15 = *(char **)v28.n128_u64[0];
      do
      {
        uint64_t v16 = *v12;
        unint64_t v17 = *v12 + 4096;
        while (1)
        {
          uint64_t v18 = v14 - v15;
          if ((v17 - v16) >> 3 >= v18 >> 3) {
            uint64_t v19 = v18 >> 3;
          }
          else {
            uint64_t v19 = (v17 - v16) >> 3;
          }
          v17 -= 8 * v19;
          v14 -= 8 * v19;
          if (v19) {
            memmove(v14, v17, 8 * v19);
          }
          if (v17 == v16) {
            break;
          }
          uint64_t v20 = (char *)*--v13;
          uint64_t v15 = v20;
          unint64_t v14 = v20 + 4096;
        }
        uint64_t v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          uint64_t v21 = (char *)v13[1];
          ++v13;
          uint64_t v15 = v21;
          unint64_t v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    uint64_t v22 = *a2 + 4096;
    long long v23 = a3;
    uint64_t v24 = v13;
    int v25 = v14;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(&v27, v23, v22, v24, v25);
  __n128 result = v28;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = (unint64_t)a5;
  a1[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<unsigned long *,std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>,0>(void *result, char *a2, char *a3, void *a4, char *a5)
{
  unint64_t v6 = a4;
  unint64_t v8 = result;
  if (a2 == a3)
  {
    unint64_t v9 = a2;
  }
  else
  {
    unint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 3;
      }
      v11 -= 8 * v13;
      a5 -= 8 * v13;
      if (v13) {
        __n128 result = memmove(a5, v11, 8 * v13);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *unint64_t v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

BOOL re::pathprocessing::BezierUtils::lineCrossBezierHull(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v4 = a1 + 1;
  if (result)
  {
    if (result) {
  }
    }
  return result;
}

BOOL re::pathprocessing::anonymous namespace'::rightToOrOnLine(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v4 = vsub_f32(*a2, *a1);
  float32x2_t v5 = vsub_f32(*a3, *a1);
  float v6 = vmlas_n_f32((float)-v4.f32[1] * v5.f32[0], v5.f32[1], v4.f32[0]);
  float32x2_t v7 = vsub_f32(*a4, *a1);
  float v8 = vmlas_n_f32((float)-v4.f32[1] * v7.f32[0], v7.f32[1], v4.f32[0]);
  BOOL v9 = v6 > 0.0001;
  if (v6 < -0.0001) {
    BOOL v9 = 0;
  }
  if (v9 && v8 > 0.0001 && v8 >= -0.0001) {
    return 0;
  }
  BOOL v10 = v8 < -0.0001;
  BOOL v11 = v6 < -0.0001;
  if (v6 > 0.0001) {
    BOOL v11 = 1;
  }
  if (v8 > 0.0001) {
    BOOL v10 = 1;
  }
  if (!v11 && !v10) {
    return 0;
  }
  if (v6 < -0.0001 && v8 < -0.0001) {
    return 1;
  }
  float32x2_t v13 = vabs_f32(v4);
  unsigned __int8 v14 = vmvn_s8((int8x8_t)vcge_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1))).u8[0];
  float32x2_t v15 = vadd_f32(vmul_n_f32(*a4, v6 / (float)(v6 - v8)), vmul_n_f32(*a3, 1.0 - (float)(v6 / (float)(v6 - v8))));
  float32x2_t v25 = v15;
  if (!v11)
  {
    if (v8 >= -0.0001) {
      goto LABEL_33;
    }
    return 1;
  }
  if (v10)
  {
    float v16 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v14 & 1)));
    float v17 = a1->f32[v14 & 1];
    float v18 = a2->f32[v14 & 1];
    if (v17 <= v18) {
      float v19 = a1->f32[v14 & 1];
    }
    else {
      float v19 = a2->f32[v14 & 1];
    }
    if (v17 <= v18) {
      float v17 = a2->f32[v14 & 1];
    }
    if ((float)(v19 + -0.0001) >= v16 || (float)(v17 + 0.0001) <= v16)
    {
      if (v9) {
        *a3 = v15;
      }
      else {
        *a4 = v15;
      }
    }
    return 1;
  }
  if (v6 < -0.0001) {
    return 1;
  }
LABEL_33:
  float v21 = a1->f32[v14 & 1];
  float v22 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v14 & 1)));
  float v23 = a2->f32[v14 & 1];
  if (v21 <= v23) {
    float v24 = a1->f32[v14 & 1];
  }
  else {
    float v24 = a2->f32[v14 & 1];
  }
  if (v21 <= v23) {
    float v21 = a2->f32[v14 & 1];
  }
  return (float)(v21 + -0.0001) > v22 && (float)(v24 + 0.0001) < v22;
}

BOOL re::pathprocessing::BezierUtils::bezierHullOverlap(float32x2_t *a1, float32x2_t *a2)
{
  uint64_t v2 = (uint64_t)a1[1];
  uint64_t v3 = (uint64_t)a1[2];
  int32x2_t v4 = (int32x2_t)vsub_f32((float32x2_t)v3, *a1);
  int32x2_t v5 = (int32x2_t)vsub_f32((float32x2_t)v2, *a1);
  uint64_t v6 = (uint64_t)a2[1];
  uint64_t v7 = (uint64_t)a2[2];
  int32x2_t v8 = (int32x2_t)vsub_f32((float32x2_t)v7, *a2);
  int32x2_t v9 = (int32x2_t)vsub_f32((float32x2_t)v6, *a2);
  float32x2_t v10 = vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v5, v9), vneg_f32((float32x2_t)vzip2_s32(v4, v8))), (float32x2_t)vzip2_s32(v5, v9), (float32x2_t)vzip1_s32(v4, v8));
  if ((vcgt_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)).u8[0] & 1) == 0)
  {
    float32x2_t v18 = *a1;
    uint64_t v19 = (uint64_t)a1[1];
    if (!re::pathprocessing::BezierUtils::lineCrossBezierHull(a2, (uint64_t)*a1, v2)
      && !re::pathprocessing::BezierUtils::lineCrossBezierHull(a2, v19, v3))
    {
      unsigned __int8 v14 = a2;
      uint64_t v15 = v3;
      uint64_t v16 = (uint64_t)v18;
      goto LABEL_9;
    }
    return 1;
  }
  float32x2_t v12 = *a2;
  uint64_t v13 = (uint64_t)a2[1];
  if (re::pathprocessing::BezierUtils::lineCrossBezierHull(a1, (uint64_t)*a2, v6)
    || re::pathprocessing::BezierUtils::lineCrossBezierHull(a1, v13, v7))
  {
    return 1;
  }
  unsigned __int8 v14 = a1;
  uint64_t v15 = v7;
  uint64_t v16 = (uint64_t)v12;
LABEL_9:
  return re::pathprocessing::BezierUtils::lineCrossBezierHull(v14, v15, v16);
}

re::pathprocessing::IndexedMesh *re::pathprocessing::IndexedMesh::IndexedMesh(uint64_t a1, float32x2_t **a2, int a3)
{
  int32x2_t v4 = (re::pathprocessing::IndexedMesh *)a1;
  uint64_t v378 = *MEMORY[0x263EF8340];
  float32x2_t v5 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v6 = (float32x2_t)0x7F0000007FLL;
  *(float32x2_t *)a1 = v5;
  *(void *)(a1 + 8) = 0x7F0000007FLL;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v7 = (void **)(a1 + 16);
  *(void *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
  *(void *)(a1 + 64) = a1 + 72;
  collection_2f = (void *)geom_create_collection_2f();
  int32x2_t v9 = *a2;
  float32x2_t v10 = a2[1];
  if (*a2 != v10)
  {
    float32x2_t v5 = (float32x2_t)vdup_n_s32(0x7F800000u);
    do
    {
      int v11 = v9->i8[0];
      if ((v11 - 76) < 2)
      {
        float32x2_t v14 = v9[3];
        float32x2_t v5 = vminnm_f32(v5, v14);
        float32x2_t v6 = vmaxnm_f32(v6, v14);
      }
      else if (v11 == 67)
      {
        float32x2_t v15 = v9[1];
        float32x2_t v16 = v9[2];
        float32x2_t v17 = vminnm_f32(vminnm_f32(v5, v15), v16);
        float32x2_t v18 = vmaxnm_f32(vmaxnm_f32(v6, v15), v16);
        float32x2_t v19 = v9[3];
        float32x2_t v5 = vminnm_f32(v17, v19);
        float32x2_t v6 = vmaxnm_f32(v18, v19);
      }
      else if (v11 == 81)
      {
        float32x2_t v12 = v9[1];
        float32x2_t v13 = v9[3];
        float32x2_t v5 = vminnm_f32(vminnm_f32(v5, v12), v13);
        float32x2_t v6 = vmaxnm_f32(vmaxnm_f32(v6, v12), v13);
      }
      v9 += 4;
    }
    while (v9 != v10);
  }
  *(float32x2_t *)int32x2_t v4 = v5;
  *((float32x2_t *)v4 + 1) = v6;
  uint64_t v20 = *a2;
  float v21 = a2[1];
  v359 = v4;
  v355 = v7;
  if (*a2 != v21)
  {
    uint64_t v22 = -1;
    uint64_t v23 = -1;
    v356 = v21;
    do
    {
      int v24 = v20->i8[0];
      if (v24 <= 76)
      {
        if (v24 == 67)
        {
          uint64_t v360 = v22;
          memset(v376, 0, 24);
          unsigned int monotonic_intervals_2f = geom_cubic_bezier_find_monotonic_intervals_2f();
          uint64_t v34 = monotonic_intervals_2f - 1;
          if (monotonic_intervals_2f != 1)
          {
            uint64_t v35 = 0;
            do
            {
              ++v35;
              geom_cubic_bezier_extract_2f();
              geom_cubic_bezier_fit_with_quadratic_beziers_2f();
              unint64_t v36 = geom_collection_size_2f();
              uint64_t v37 = geom_collection_data_2f();
              if (v36)
              {
                uint64_t v38 = v37;
                for (unint64_t i = 0; i < v36; i += 3)
                {
                  unint64_t v40 = v38 + 8 * i;
                  __p[0] = *(void **)(v40 + 8);
                  v369[0] = *(void **)(v40 + 16);
                  uint64_t v23 = re::pathprocessing::IndexedMesh::addBezierTo(v4, v23, (uint64_t *)__p, (float *)v369);
                }
              }
            }
            while (v35 != v34);
          }
          uint64_t v7 = v355;
          float v21 = v356;
          uint64_t v22 = v360;
        }
        else if (v24 == 76)
        {
          *(float32x2_t *)v376 = vsub_f32(v20[3], *(float32x2_t *)v4);
          uint64_t v28 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
          re::pathprocessing::IndexedMesh::addLineTo(v4, v23, v28);
          uint64_t v23 = v28;
        }
      }
      else
      {
        switch(v24)
        {
          case 'Z':
            if (v23 != v22)
            {
              uint64_t v30 = (uint64_t *)*((void *)v4 + 6);
              unint64_t v29 = *((void *)v4 + 7);
              if ((unint64_t)v30 >= v29)
              {
                uint64_t v47 = (uint64_t *)*((void *)v4 + 5);
                unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (v30 - v47);
                unint64_t v49 = v48 + 1;
                if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_515;
                }
                unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v47) >> 3);
                if (2 * v50 > v49) {
                  unint64_t v49 = 2 * v50;
                }
                if (v50 >= 0x555555555555555) {
                  unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v51 = v49;
                }
                if (v51)
                {
                  unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v51);
                  uint64_t v47 = (uint64_t *)*((void *)v4 + 5);
                  uint64_t v30 = (uint64_t *)*((void *)v4 + 6);
                }
                else
                {
                  uint64_t v52 = 0;
                }
                uint64_t v57 = (uint64_t *)(v51 + 24 * v48);
                *uint64_t v57 = v23;
                v57[1] = -1;
                v57[2] = v22;
                uint64_t v58 = v57;
                if (v30 == v47)
                {
                  long long v60 = v4;
                }
                else
                {
                  do
                  {
                    long long v59 = *(_OWORD *)(v30 - 3);
                    *(v58 - 1) = *(v30 - 1);
                    *(_OWORD *)(v58 - 3) = v59;
                    v58 -= 3;
                    v30 -= 3;
                  }
                  while (v30 != v47);
                  long long v60 = v4;
                  uint64_t v47 = (uint64_t *)*((void *)v4 + 5);
                }
                uint64_t v31 = v57 + 3;
                *((void *)v60 + 5) = v58;
                *((void *)v60 + 6) = v57 + 3;
                *((void *)v60 + 7) = v51 + 24 * v52;
                if (v47) {
                  operator delete(v47);
                }
              }
              else
              {
                *uint64_t v30 = v23;
                v30[1] = -1;
                uint64_t v31 = v30 + 3;
                v30[2] = v22;
              }
              *((void *)v4 + 6) = v31;
            }
            uint64_t v23 = v22;
            break;
          case 'Q':
            float32x2_t v32 = *(float32x2_t *)v4;
            *(float32x2_t *)v376 = vsub_f32(v20[1], *(float32x2_t *)v4);
            __p[0] = (void *)vsub_f32(v20[3], v32);
            uint64_t v23 = re::pathprocessing::IndexedMesh::addBezierTo(v4, v23, (uint64_t *)v376, (float *)__p);
            break;
          case 'M':
            if (v22 != v23)
            {
              int64_t v26 = (uint64_t *)*((void *)v4 + 6);
              unint64_t v25 = *((void *)v4 + 7);
              if ((unint64_t)v26 >= v25)
              {
                int64_t v41 = (uint64_t *)*((void *)v4 + 5);
                unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (v26 - v41);
                unint64_t v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_515;
                }
                unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)v41) >> 3);
                if (2 * v44 > v43) {
                  unint64_t v43 = 2 * v44;
                }
                if (v44 >= 0x555555555555555) {
                  unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v45);
                  int64_t v41 = (uint64_t *)*((void *)v4 + 5);
                  int64_t v26 = (uint64_t *)*((void *)v4 + 6);
                }
                else
                {
                  uint64_t v46 = 0;
                }
                uint64_t v53 = (uint64_t *)(v45 + 24 * v42);
                *uint64_t v53 = v23;
                v53[1] = -1;
                v53[2] = v22;
                uint64_t v54 = v53;
                if (v26 == v41)
                {
                  uint64_t v56 = v4;
                }
                else
                {
                  do
                  {
                    long long v55 = *(_OWORD *)(v26 - 3);
                    *(v54 - 1) = *(v26 - 1);
                    *(_OWORD *)(v54 - 3) = v55;
                    v54 -= 3;
                    v26 -= 3;
                  }
                  while (v26 != v41);
                  uint64_t v56 = v4;
                  int64_t v41 = (uint64_t *)*((void *)v4 + 5);
                }
                uint64_t v27 = v53 + 3;
                *((void *)v56 + 5) = v54;
                *((void *)v56 + 6) = v53 + 3;
                *((void *)v56 + 7) = v45 + 24 * v46;
                if (v41) {
                  operator delete(v41);
                }
              }
              else
              {
                *int64_t v26 = v23;
                v26[1] = -1;
                uint64_t v27 = v26 + 3;
                unsigned int v26[2] = v22;
              }
              *((void *)v4 + 6) = v27;
            }
            *(float32x2_t *)v376 = vsub_f32(v20[3], *(float32x2_t *)v4);
            uint64_t v23 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
            uint64_t v22 = v23;
            break;
        }
      }
      v20 += 4;
    }
    while (v20 != v21);
    if (v22 != v23)
    {
      uint64_t v62 = (uint64_t *)*((void *)v4 + 6);
      unint64_t v61 = *((void *)v4 + 7);
      if ((unint64_t)v62 >= v61)
      {
        uint64_t v64 = (uint64_t *)*((void *)v4 + 5);
        unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (v62 - v64);
        unint64_t v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_515;
        }
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)v64) >> 3);
        if (2 * v67 > v66) {
          unint64_t v66 = 2 * v67;
        }
        if (v67 >= 0x555555555555555) {
          unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v68);
          uint64_t v64 = (uint64_t *)*((void *)v4 + 5);
          uint64_t v62 = (uint64_t *)*((void *)v4 + 6);
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = (uint64_t *)(v68 + 24 * v65);
        unint64_t v71 = v68 + 24 * v69;
        uint64_t *v70 = v23;
        v70[1] = -1;
        v70[2] = v22;
        uint64_t v63 = v70 + 3;
        if (v62 != v64)
        {
          do
          {
            long long v72 = *(_OWORD *)(v62 - 3);
            *(v70 - 1) = *(v62 - 1);
            *(_OWORD *)(v70 - 3) = v72;
            v70 -= 3;
            v62 -= 3;
          }
          while (v62 != v64);
          uint64_t v64 = (uint64_t *)*((void *)v4 + 5);
        }
        *((void *)v4 + 5) = v70;
        *((void *)v4 + 6) = v63;
        *((void *)v4 + 7) = v71;
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *uint64_t v62 = v23;
        v62[1] = -1;
        v62[2] = v22;
        uint64_t v63 = v62 + 3;
      }
      *((void *)v4 + 6) = v63;
    }
  }
  os_release(collection_2f);
  if (!a3) {
    return v4;
  }
  uint64_t v74 = *((void *)v4 + 5);
  uint64_t v73 = *((void *)v4 + 6);
  int64_t v75 = v73 - v74;
  if (v73 == v74)
  {
    v343 = 0;
    uint64_t n = 0;
    long long v168 = 0uLL;
    long long v363 = 0u;
    long long v364 = 0u;
    int v365 = 1065353216;
LABEL_504:
    int64x2_t v372 = 0uLL;
    unint64_t v373 = 0;
    *(_OWORD *)v369 = v168;
    *(_OWORD *)v370 = v168;
    float v371 = 1.0;
    goto LABEL_505;
  }
  unint64_t v76 = v75 / 24;
  if ((unint64_t)(v75 / 24) > 0xAAAAAAAAAAAAAAALL) {
LABEL_515:
  }
    abort();
  uint64_t v77 = (char *)operator new(v75);
  uint64_t v78 = 0;
  v348 = &v77[24 * v76];
  do
  {
    unint64_t v79 = &v77[v78];
    *((void *)v79 + 2) = 0;
    *(void *)&v77[v78 + 8] = 0;
    *(void *)unint64_t v79 = &v77[v78 + 8];
    v78 += 24;
  }
  while (24 * v76 != v78);
  v351 = v77;
  unint64_t v352 = v76;
  uint64_t v80 = 0;
  if (v76 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v76;
  }
  uint64_t v349 = v81;
  do
  {
    uint64_t v82 = (uint64_t *)(*((void *)v4 + 5) + 24 * v80);
    uint64_t v83 = *v82;
    uint64_t v84 = v82[1];
    BOOL v85 = *v82 != -1 && v84 == -1;
    if (v85)
    {
      uint64_t v84 = v82[2];
      uint64_t v86 = (char *)*v7;
      if (v84 != -1)
      {
        float32x2_t v88 = *(float32x2_t *)&v86[8 * v83];
        float32x2_t v89 = *(float32x2_t *)&v86[8 * v84];
        float32x2_t v90 = vadd_f32(vmul_f32(v88, (float32x2_t)0x3F0000003F000000), vmul_f32(v89, (float32x2_t)0x3F0000003F000000));
        goto LABEL_104;
      }
      uint64_t v87 = -1;
    }
    else
    {
      uint64_t v86 = (char *)*v7;
      uint64_t v87 = v82[2];
    }
    float32x2_t v88 = *(float32x2_t *)&v86[8 * v83];
    float32x2_t v90 = *(float32x2_t *)&v86[8 * v84];
    float32x2_t v89 = *(float32x2_t *)&v86[8 * v87];
LABEL_104:
    uint64_t v350 = v80 + 1;
    if (v80 + 1 < v76)
    {
      uint64_t v91 = v80 + 1;
      v361 = (uint64_t **)&v351[24 * v80];
      uint64_t v92 = v361 + 1;
      uint64_t v354 = *((void *)v4 + 5) + 24 * v80;
      do
      {
        unint64_t v93 = (uint64_t *)(*((void *)v4 + 5) + 24 * v91);
        if (*v93 != -1 && v93[1] == -1)
        {
          uint64_t v96 = v93[2];
          uint64_t v95 = *v7;
        }
        else
        {
          uint64_t v95 = *v7;
          uint64_t v96 = v93[2];
        }
        float32x2_t v97 = (float32x2_t)v95[*v93];
        float32x2_t v98 = (float32x2_t)v95[v96];
        v369[1] = 0;
        *((void *)&v363 + 1) = 0;
        uint64_t v100 = *v82;
        uint64_t v99 = v82[1];
        uint64_t v101 = v82[2];
        uint64_t v103 = *v93;
        uint64_t v102 = v93[1];
        uint64_t v104 = v93[2];
        uint64_t v357 = v91;
        if (*v82 == -1
          || v99 != -1
          || v101 == -1
          || (v103 != -1 ? (v105 = v102 == -1) : (v105 = 0), v105 ? (BOOL v106 = v104 == -1) : (BOOL v106 = 1), v106))
        {
          float32x2_t v117 = (float32x2_t)v95[v100];
          long long v118 = (void *)v95[v101];
          *(float32x2_t *)v119.f32 = vminnm_f32(v117, (float32x2_t)v118);
          float32x2_t v120 = vmaxnm_f32(v117, (float32x2_t)v118);
          if (v101 != -1 && v100 != -1 && v99 != -1)
          {
            float32x2_t v121 = (float32x2_t)v95[v99];
            *(float32x2_t *)v119.f32 = vminnm_f32(*(float32x2_t *)v119.f32, v121);
            float32x2_t v120 = vmaxnm_f32(v120, v121);
          }
          int v122 = (void *)v95[v103];
          unint64_t v123 = (void *)v95[v104];
          float32x2_t v124 = vminnm_f32((float32x2_t)v122, (float32x2_t)v123);
          *(float32x2_t *)v125.f32 = vmaxnm_f32((float32x2_t)v122, (float32x2_t)v123);
          if (v104 != -1 && v103 != -1 && v102 != -1)
          {
            float32x2_t v128 = (float32x2_t)v95[v102];
            float32x2_t v124 = vminnm_f32(v124, v128);
            *(float32x2_t *)v125.f32 = vmaxnm_f32(*(float32x2_t *)v125.f32, v128);
          }
          *(float32x2_t *)&v119.u32[2] = v124;
          *(float32x2_t *)&v125.u32[2] = v120;
          if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v125, v119)), 0xFuLL))))
          {
            if (v100 != -1)
            {
              if (v99 == -1)
              {
                if (v103 != -1 && v101 != -1 && v102 != -1 && v104 != -1)
                {
                  __p[0] = (void *)v95[v100];
                  __p[1] = v118;
                  *(void *)v376 = v122;
                  *(void *)&v376[8] = v95[v102];
                  *(void *)&v376[16] = v123;
                  uint64_t v131 = (void **)&v363;
                  int v132 = v369;
                  goto LABEL_165;
                }
              }
              else if (v101 != -1)
              {
                BOOL v129 = v103 != -1 && v102 == -1;
                if (v129 && v104 != -1)
                {
                  *(void *)v376 = v95[v100];
                  *(void *)&v376[8] = v95[v99];
                  *(void *)&v376[16] = v118;
                  __p[0] = v122;
                  __p[1] = v123;
                  uint64_t v131 = v369;
                  int v132 = (void **)&v363;
LABEL_165:
                  re::pathprocessing::Bezier2::intersectLineSegment((uint64_t)v376, (uint64_t)__p, v131, v132);
                  goto LABEL_166;
                }
              }
            }
            *(void *)v376 = v95[v100];
            *(void *)&v376[8] = v95[v99];
            *(void *)&v376[16] = v118;
            __p[0] = v122;
            __p[1] = (void *)v95[v102];
            *(void *)&long long v367 = v123;
            int32x2_t v136 = (int32x2_t)vsub_f32(*(float32x2_t *)&v376[8], v117);
            int32x2_t v137 = (int32x2_t)vsub_f32((float32x2_t)v118, v117);
            int32x2_t v138 = (int32x2_t)vsub_f32((float32x2_t)__p[1], (float32x2_t)v122);
            int32x2_t v139 = (int32x2_t)vsub_f32((float32x2_t)v123, (float32x2_t)v122);
            float32x2_t v140 = vabs_f32(vmul_f32(vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v137, v139), vneg_f32((float32x2_t)vzip2_s32(v136, v138))), (float32x2_t)vzip2_s32(v137, v139), (float32x2_t)vzip1_s32(v136, v138)), (float32x2_t)0x3F0000003F000000));
            if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v140, 1), v140).u8[0])
            {
              int v141 = (float32x2_t *)v376;
              uint64_t v142 = (float32x2_t *)__p;
              int v143 = v369;
              int v144 = (void **)&v363;
            }
            else
            {
              int v141 = (float32x2_t *)__p;
              uint64_t v142 = (float32x2_t *)v376;
              int v143 = (void **)&v363;
              int v144 = v369;
            }
            re::pathprocessing::Bezier2::intersectCurveWithCurve(v141, v142, (uint64_t)v143, (uint64_t)v144, 0);
          }
        }
        else
        {
          float32x2_t v107 = (float32x2_t)v95[v101];
          *(void *)v376 = v95[v100];
          *(float32x2_t *)&v376[8] = v107;
          unint64_t v108 = (void *)v95[v103];
          unint64_t v109 = (void *)v95[v104];
          __p[0] = v108;
          __p[1] = v109;
          int32x2_t v110 = (int32x2_t)vabd_f32(v107, *(float32x2_t *)v376);
          int32x2_t v111 = (int32x2_t)vabd_f32((float32x2_t)v109, (float32x2_t)v108);
          float32x2_t v112 = vmaxnm_f32((float32x2_t)vzip1_s32(v110, v111), (float32x2_t)vzip2_s32(v110, v111));
          if (vcgt_f32(v112, (float32x2_t)vdup_lane_s32((int32x2_t)v112, 1)).u8[0])
          {
            unint64_t v113 = (float32x2_t *)v376;
            unint64_t v114 = (float32x2_t *)__p;
            uint64_t v115 = v369;
            uint64_t v116 = (void **)&v363;
          }
          else
          {
            unint64_t v113 = (float32x2_t *)__p;
            unint64_t v114 = (float32x2_t *)v376;
            uint64_t v115 = (void **)&v363;
            uint64_t v116 = v369;
          }
          re::pathprocessing::LineSegment::intersect(v113, v114, (uint64_t)v115, (uint64_t)v116);
        }
LABEL_166:
        if (v369[1])
        {
          uint64_t v145 = 0;
          uint32x2_t v146 = (uint32x2_t)vceq_f32(v88, v97);
          unsigned __int32 v147 = vpmin_u32(v146, v146).u32[0];
          uint32x2_t v148 = (uint32x2_t)vceq_f32(v88, v98);
          uint32x2_t v149 = (uint32x2_t)vceq_f32(v97, v89);
          uint32x2_t v150 = (uint32x2_t)vceq_f32(v98, v89);
          uint64_t v151 = (uint64_t **)&v351[24 * v357];
          int v152 = v151 + 1;
          while (1)
          {
            float v153 = 0.0;
            if ((v147 & 0x80000000) == 0 && (vpmin_u32(v148, v148).u32[0] & 0x80000000) == 0)
            {
              float v153 = 1.0;
              if ((vpmin_u32(v149, v149).u32[0] & 0x80000000) == 0 && (vpmin_u32(v150, v150).u32[0] & 0x80000000) == 0) {
                break;
              }
            }
            float v154 = *((float *)v369 + v145);
            if (v153 != v154 && vabds_f32(v153, v154) > 0.0001) {
              goto LABEL_175;
            }
LABEL_196:
            if ((void *)++v145 >= v369[1]) {
              goto LABEL_197;
            }
          }
          float v154 = *((float *)v369 + v145);
LABEL_175:
          uint64_t v155 = *v92;
          if (!*v92) {
            goto LABEL_182;
          }
          unint64_t v156 = v361 + 1;
          do
          {
            uint64_t v157 = v155 + 1;
            if ((float)(*((float *)v155 + 8) + 0.0001) >= v154)
            {
              uint64_t v157 = v155;
              unint64_t v156 = (uint64_t **)v155;
            }
            uint64_t v155 = (uint64_t *)*v157;
          }
          while (*v157);
          if (v156 == v92 || (float)(v154 + 0.0001) < *((float *)v156 + 8)) {
LABEL_182:
          }
            unint64_t v156 = v361 + 1;
          if (v92 == v156)
          {
            int v159 = (float *)&v363 + v145;
            unint64_t v160 = *v152;
            if (!*v152) {
              goto LABEL_192;
            }
            float v161 = *v159;
            uint64_t v162 = v151 + 1;
            do
            {
              uint64_t v163 = v160 + 1;
              if ((float)(*((float *)v160 + 8) + 0.0001) >= v161)
              {
                uint64_t v163 = v160;
                uint64_t v162 = (uint64_t **)v160;
              }
              unint64_t v160 = (uint64_t *)*v163;
            }
            while (*v163);
            if (v162 == v152 || (float)(v161 + 0.0001) < *((float *)v162 + 8)) {
LABEL_192:
            }
              uint64_t v162 = v151 + 1;
            if (v152 == v162)
            {
              *(float32x2_t *)v376 = vadd_f32(vmul_n_f32(v89, v154 * v154), vadd_f32(vmul_n_f32(v88, (float)(1.0 - v154) * (float)(1.0 - v154)), vmul_n_f32(v90, (float)(v154 + v154) * (float)(1.0 - v154))));
              int v165 = (uint64_t *)re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)v4, (float *)v376);
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v361, (_DWORD *)v369 + v145, *((float *)v369 + v145))[5] = v165;
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v151, (_DWORD *)&v363 + v145, *v159)[5] = v165;
              int32x2_t v4 = v359;
            }
            else
            {
              unint64_t v164 = v162[5];
              std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v361, (_DWORD *)v369 + v145, v154)[5] = v164;
            }
          }
          else
          {
            uint64_t v158 = v156[5];
            std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v151, (_DWORD *)&v363 + v145, *((float *)&v363 + v145))[5] = v158;
          }
          goto LABEL_196;
        }
LABEL_197:
        uint64_t v7 = v355;
        uint64_t v91 = v357 + 1;
        unint64_t v76 = v352;
        uint64_t v82 = (uint64_t *)v354;
      }
      while (v357 + 1 != v352);
    }
    uint64_t v80 = v350;
  }
  while (v350 != v349);
  uint64_t v167 = *((void *)v4 + 5);
  uint64_t v166 = *((void *)v4 + 6);
  long long v168 = 0uLL;
  long long v363 = 0u;
  long long v364 = 0u;
  int v365 = 1065353216;
  uint64_t v169 = v166 - v167;
  if (!v169)
  {
    v343 = v351;
    uint64_t n = v348;
    goto LABEL_504;
  }
  uint64_t v170 = 0;
  unint64_t v171 = v169 / 24;
  if (v171 <= 1) {
    unint64_t v171 = 1;
  }
  unint64_t v358 = v171;
  uint64_t v362 = (uint64_t)v4 + 32;
  while (2)
  {
    unint64_t v172 = (unint64_t)&v351[24 * v170];
    unint64_t v173 = *(void *)(v172 + 16);
    if (v173)
    {
      uint64_t v174 = (uint64_t *)(*((void *)v4 + 5) + 24 * v170);
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v367 = 0;
      std::vector<float>::reserve(__p, v173);
      v369[0] = 0;
      v369[1] = 0;
      v370[0] = 0;
      std::vector<unsigned long>::reserve(v369, *(void *)(v172 + 16));
      int64_t v176 = *(float **)v172;
      v172 += 8;
      uint64_t v175 = v176;
      if (v176 != (float *)v172)
      {
        do
        {
          float v177 = v175[8];
          if (fabsf(v177) >= 0.0001)
          {
            if (v177 != 1.0 && fabsf(v177 + -1.0) > 0.0001)
            {
              uint64_t v189 = (char *)__p[1];
              if (__p[1] >= (void *)v367)
              {
                uint64_t v195 = (char *)__p[0];
                int64_t v196 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                unint64_t v197 = v196 + 1;
                if ((unint64_t)(v196 + 1) >> 62) {
                  goto LABEL_515;
                }
                uint64_t v198 = v367 - (unint64_t)__p[0];
                if ((uint64_t)(v367 - (unint64_t)__p[0]) >> 1 > v197) {
                  unint64_t v197 = v198 >> 1;
                }
                if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v199 = v197;
                }
                if (v199)
                {
                  unint64_t v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v367, v199);
                  uint64_t v195 = (char *)__p[0];
                  uint64_t v189 = (char *)__p[1];
                  float v177 = v175[8];
                }
                else
                {
                  unint64_t v200 = 0;
                }
                uint64_t v206 = (float *)&v200[4 * v196];
                *uint64_t v206 = v177;
                uint64_t v190 = v206 + 1;
                while (v189 != v195)
                {
                  int v207 = *((_DWORD *)v189 - 1);
                  v189 -= 4;
                  *((_DWORD *)v206-- - 1) = v207;
                }
                __p[0] = v206;
                __p[1] = v190;
                *(void *)&long long v367 = &v200[4 * v199];
                if (v195) {
                  operator delete(v195);
                }
              }
              else
              {
                *(float *)__p[1] = v177;
                uint64_t v190 = v189 + 4;
              }
              __p[1] = v190;
              uint64_t v208 = (char *)v369[1];
              if (v369[1] >= v370[0])
              {
                uint64_t v210 = (char *)v369[0];
                int64_t v211 = ((char *)v369[1] - (char *)v369[0]) >> 3;
                unint64_t v212 = v211 + 1;
                if ((unint64_t)(v211 + 1) >> 61) {
                  goto LABEL_515;
                }
                int64_t v213 = (char *)v370[0] - (char *)v369[0];
                if (((char *)v370[0] - (char *)v369[0]) >> 2 > v212) {
                  unint64_t v212 = v213 >> 2;
                }
                if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v214 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v214 = v212;
                }
                if (v214)
                {
                  uint64_t v215 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v370, v214);
                  uint64_t v210 = (char *)v369[0];
                  uint64_t v208 = (char *)v369[1];
                }
                else
                {
                  uint64_t v215 = 0;
                }
                int v217 = &v215[8 * v211];
                *(void *)int v217 = *((void *)v175 + 5);
                unint64_t v209 = v217 + 8;
                while (v208 != v210)
                {
                  uint64_t v218 = *((void *)v208 - 1);
                  v208 -= 8;
                  *((void *)v217 - 1) = v218;
                  v217 -= 8;
                }
                v369[0] = v217;
                v369[1] = v209;
                v370[0] = &v215[8 * v214];
                if (v210) {
                  operator delete(v210);
                }
              }
              else
              {
                *(void *)v369[1] = *((void *)v175 + 5);
                unint64_t v209 = v208 + 8;
              }
              v369[1] = v209;
              goto LABEL_271;
            }
            *(void *)v376 = v174[2];
            uint64_t v191 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v363, *(unint64_t *)v376, v376);
            uint64_t v179 = v191;
            uint64_t v180 = (char *)v191[4];
            uint64_t v192 = (uint64_t)(v191 + 5);
            unint64_t v193 = v191[5];
            if ((unint64_t)v180 >= v193)
            {
              unint64_t v183 = (char *)v191[3];
              uint64_t v201 = (v180 - v183) >> 3;
              unint64_t v202 = v201 + 1;
              if ((unint64_t)(v201 + 1) >> 61) {
                goto LABEL_515;
              }
              uint64_t v203 = v193 - (void)v183;
              if (v203 >> 2 > v202) {
                unint64_t v202 = v203 >> 2;
              }
              if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v202;
              }
              if (v187)
              {
                uint64_t v188 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v192, v187);
                unint64_t v183 = (char *)v179[3];
                uint64_t v180 = (char *)v179[4];
              }
              else
              {
                uint64_t v188 = 0;
              }
              unint64_t v204 = &v188[8 * v201];
              *(void *)unint64_t v204 = *((void *)v175 + 5);
              uint64_t v194 = v204 + 8;
              while (v180 != v183)
              {
                uint64_t v216 = *((void *)v180 - 1);
                v180 -= 8;
                *((void *)v204 - 1) = v216;
                v204 -= 8;
              }
              goto LABEL_261;
            }
          }
          else
          {
            *(void *)v376 = *v174;
            uint64_t v178 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v363, *(unint64_t *)v376, v376);
            uint64_t v179 = v178;
            uint64_t v180 = (char *)v178[4];
            uint64_t v181 = (uint64_t)(v178 + 5);
            unint64_t v182 = v178[5];
            if ((unint64_t)v180 >= v182)
            {
              unint64_t v183 = (char *)v178[3];
              uint64_t v184 = (v180 - v183) >> 3;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61) {
                goto LABEL_515;
              }
              uint64_t v186 = v182 - (void)v183;
              if (v186 >> 2 > v185) {
                unint64_t v185 = v186 >> 2;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v187 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                uint64_t v188 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v181, v187);
                unint64_t v183 = (char *)v179[3];
                uint64_t v180 = (char *)v179[4];
              }
              else
              {
                uint64_t v188 = 0;
              }
              unint64_t v204 = &v188[8 * v184];
              *(void *)unint64_t v204 = *((void *)v175 + 5);
              uint64_t v194 = v204 + 8;
              while (v180 != v183)
              {
                uint64_t v205 = *((void *)v180 - 1);
                v180 -= 8;
                *((void *)v204 - 1) = v205;
                v204 -= 8;
              }
LABEL_261:
              v179[3] = v204;
              v179[4] = v194;
              v179[5] = &v188[8 * v187];
              if (v183) {
                operator delete(v183);
              }
              goto LABEL_263;
            }
          }
          *(void *)uint64_t v180 = *((void *)v175 + 5);
          uint64_t v194 = v180 + 8;
LABEL_263:
          v179[4] = v194;
LABEL_271:
          int v219 = (float *)*((void *)v175 + 1);
          if (v219)
          {
            do
            {
              unint64_t v220 = v219;
              int v219 = *(float **)v219;
            }
            while (v219);
          }
          else
          {
            do
            {
              unint64_t v220 = (float *)*((void *)v175 + 2);
              BOOL v85 = *(void *)v220 == (void)v175;
              uint64_t v175 = v220;
            }
            while (!v85);
          }
          uint64_t v175 = v220;
        }
        while (v220 != (float *)v172);
      }
      uint64_t v221 = *v174;
      if (*v174 == -1 || v174[1] != -1 || v174[2] == -1)
      {
        uint64_t v222 = (uint64_t *)(*((void *)v359 + 5) + 24 * v170);
        uint64_t v223 = *((void *)v359 + 2);
        uint64_t v224 = *v222;
        uint64_t v225 = v222[1];
        uint64_t v226 = v222[2];
        v372.i64[0] = *(void *)(v223 + 8 * v224);
        v372.i64[1] = *(void *)(v223 + 8 * v225);
        unint64_t v373 = *(void *)(v223 + 8 * v226);
        re::pathprocessing::Bezier2::split((__n128 *)&v372, (uint64_t *)__p, &v374);
        uint64_t v227 = *v174;
        if (__p[1] == __p[0])
        {
          uint64_t v229 = *v174;
          uint64_t v7 = v355;
        }
        else
        {
          unint64_t v172 = 0;
          uint64_t v7 = v355;
          do
          {
            long long v228 = (char *)v374 + 24 * v172;
            uint64_t v229 = *((void *)v369[0] + v172);
            int v230 = *v7;
            *(void *)v376 = *((void *)*v7 + v227);
            uint64_t v232 = *((void *)v228 + 1);
            long long v231 = v228 + 8;
            *(void *)&v376[8] = v232;
            *(void *)&v376[16] = v230[v229];
            int v233 = re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)v376);
            if (v233 == 1)
            {
              uint64_t v229 = v227;
            }
            else if (v233 == 2)
            {
              re::pathprocessing::IndexedMesh::addLineTo(v359, v227, v229);
            }
            else
            {
              uint64_t v234 = *((void *)v359 + 2);
              uint64_t v235 = (void *)*((void *)v359 + 3);
              uint64_t v236 = ((uint64_t)v235 - v234) >> 3;
              unint64_t v237 = *((void *)v359 + 4);
              if ((unint64_t)v235 >= v237)
              {
                if ((unint64_t)(v236 + 1) >> 61) {
                  goto LABEL_515;
                }
                uint64_t v239 = v237 - v234;
                uint64_t v240 = v239 >> 2;
                if (v239 >> 2 <= (unint64_t)(v236 + 1)) {
                  uint64_t v240 = v236 + 1;
                }
                if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v241 = v240;
                }
                if (v241) {
                  v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v362, v241);
                }
                else {
                  v242 = 0;
                }
                int v243 = &v242[8 * v236];
                *(void *)int v243 = *v231;
                long long v238 = v243 + 8;
                uint64_t v245 = (char *)*((void *)v359 + 2);
                v244 = (char *)*((void *)v359 + 3);
                if (v244 != v245)
                {
                  do
                  {
                    uint64_t v246 = *((void *)v244 - 1);
                    v244 -= 8;
                    *((void *)v243 - 1) = v246;
                    v243 -= 8;
                  }
                  while (v244 != v245);
                  v244 = (char *)*v355;
                }
                *((void *)v359 + 2) = v243;
                *((void *)v359 + 3) = v238;
                *((void *)v359 + 4) = &v242[8 * v241];
                if (v244) {
                  operator delete(v244);
                }
              }
              else
              {
                void *v235 = *v231;
                long long v238 = v235 + 1;
              }
              *((void *)v359 + 3) = v238;
              uint64_t v248 = (uint64_t *)*((void *)v359 + 6);
              unint64_t v247 = *((void *)v359 + 7);
              if ((unint64_t)v248 >= v247)
              {
                uint64_t v251 = (uint64_t *)*((void *)v359 + 5);
                unint64_t v252 = 0xAAAAAAAAAAAAAAABLL * (v248 - v251);
                unint64_t v253 = v252 + 1;
                if (v252 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_515;
                }
                unint64_t v254 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - (void)v251) >> 3);
                if (2 * v254 > v253) {
                  unint64_t v253 = 2 * v254;
                }
                if (v254 >= 0x555555555555555) {
                  unint64_t v255 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v255 = v253;
                }
                if (v255)
                {
                  unint64_t v255 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v255);
                  uint64_t v251 = (uint64_t *)*((void *)v359 + 5);
                  uint64_t v248 = (uint64_t *)*((void *)v359 + 6);
                }
                else
                {
                  uint64_t v256 = 0;
                }
                uint64_t v257 = (uint64_t *)(v255 + 24 * v252);
                *uint64_t v257 = v227;
                v257[1] = v236;
                v257[2] = v229;
                unint64_t v258 = v257;
                if (v248 == v251)
                {
                  unint64_t v250 = v359;
                }
                else
                {
                  unint64_t v250 = v359;
                  do
                  {
                    long long v259 = *(_OWORD *)(v248 - 3);
                    *(v258 - 1) = *(v248 - 1);
                    *(_OWORD *)(v258 - 3) = v259;
                    v258 -= 3;
                    v248 -= 3;
                  }
                  while (v248 != v251);
                  uint64_t v251 = (uint64_t *)*((void *)v359 + 5);
                }
                unint64_t v249 = v257 + 3;
                *((void *)v250 + 5) = v258;
                *((void *)v250 + 6) = v257 + 3;
                *((void *)v250 + 7) = v255 + 24 * v256;
                if (v251) {
                  operator delete(v251);
                }
              }
              else
              {
                uint64_t *v248 = v227;
                v248[1] = v236;
                unint64_t v249 = v248 + 3;
                v248[2] = v229;
                unint64_t v250 = v359;
              }
              *((void *)v250 + 6) = v249;
              uint64_t v7 = v355;
            }
            ++v172;
            uint64_t v227 = v229;
          }
          while (v172 < ((char *)__p[1] - (char *)__p[0]) >> 2);
        }
        int32x2_t v4 = v359;
        v260 = (uint64_t *)(*((void *)v359 + 5) + 24 * v170);
        uint64_t *v260 = v229;
        *(void *)(*((void *)v359 + 2) + 8 * v260[1]) = v375[-1].n128_u64[0];
        if (v374)
        {
          v375 = v374;
          operator delete(v374);
        }
      }
      else
      {
        if (__p[1] == __p[0])
        {
          uint64_t v262 = v359;
        }
        else
        {
          unint64_t v172 = 0;
          int v261 = v369[0];
          uint64_t v262 = v359;
          uint64_t v263 = (char *)*((void *)v359 + 6);
          do
          {
            unint64_t v264 = *((void *)v262 + 7);
            if ((unint64_t)v263 >= v264)
            {
              unint64_t v267 = (char *)*((void *)v262 + 5);
              unint64_t v268 = 0xAAAAAAAAAAAAAAABLL * ((v263 - v267) >> 3);
              unint64_t v269 = v268 + 1;
              if (v268 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_515;
              }
              unint64_t v270 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v264 - (void)v267) >> 3);
              if (2 * v270 > v269) {
                unint64_t v269 = 2 * v270;
              }
              if (v270 >= 0x555555555555555) {
                unint64_t v271 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v271 = v269;
              }
              if (v271)
              {
                unint64_t v271 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v271);
                unint64_t v267 = (char *)*((void *)v359 + 5);
                uint64_t v263 = (char *)*((void *)v359 + 6);
              }
              else
              {
                uint64_t v272 = 0;
              }
              uint64_t v273 = v261[v172];
              uint64_t v274 = (uint64_t *)(v271 + 24 * v268);
              *uint64_t v274 = v221;
              v274[1] = -1;
              v274[2] = v273;
              unsigned int v275 = v274;
              if (v263 == v267)
              {
                float v266 = v359;
              }
              else
              {
                float v266 = v359;
                do
                {
                  long long v276 = *(_OWORD *)(v263 - 24);
                  *(v275 - 1) = *((void *)v263 - 1);
                  *(_OWORD *)(v275 - 3) = v276;
                  v275 -= 3;
                  v263 -= 24;
                }
                while (v263 != v267);
                unint64_t v267 = (char *)*((void *)v359 + 5);
              }
              uint64_t v263 = (char *)(v274 + 3);
              *((void *)v266 + 5) = v275;
              *((void *)v266 + 6) = v274 + 3;
              *((void *)v266 + 7) = v271 + 24 * v272;
              if (v267) {
                operator delete(v267);
              }
            }
            else
            {
              uint64_t v265 = v261[v172];
              *(void *)uint64_t v263 = v221;
              *((void *)v263 + 1) = -1;
              *((void *)v263 + 2) = v265;
              v263 += 24;
              float v266 = v262;
            }
            *((void *)v266 + 6) = v263;
            uint64_t v262 = v266;
            int v261 = v369[0];
            uint64_t v221 = *((void *)v369[0] + v172++);
          }
          while (v172 < ((char *)__p[1] - (char *)__p[0]) >> 2);
        }
        *(void *)(*((void *)v262 + 5) + 24 * v17re::VariableStepTimer::setClock((uint64_t)this, 0) = v221;
        int32x2_t v4 = v262;
        uint64_t v7 = v355;
      }
      if (v369[0])
      {
        v369[1] = v369[0];
        operator delete(v369[0]);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (++v170 != v358) {
      continue;
    }
    break;
  }
  long long v277 = (void *)v364;
  int64x2_t v372 = 0uLL;
  unint64_t v373 = 0;
  *(_OWORD *)v369 = 0u;
  *(_OWORD *)v370 = 0u;
  float v371 = 1.0;
  if ((void)v364)
  {
    while (2)
    {
      if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], v277[2]))
      {
        unint64_t v278 = v372.u64[1];
        if (v372.i64[1] >= v373)
        {
          unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((v372.i64[1] - v372.i64[0]) >> 3);
          unint64_t v280 = v172 + 1;
          if (v172 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_515;
          }
          if (0x5555555555555556 * ((uint64_t)(v373 - v372.i64[0]) >> 3) > v280) {
            unint64_t v280 = 0x5555555555555556 * ((uint64_t)(v373 - v372.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v373 - v372.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v281 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v281 = v280;
          }
          *(void *)&long long v377 = &v373;
          if (v281) {
            uint64_t v282 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v373, v281);
          }
          else {
            uint64_t v282 = 0;
          }
          v283 = &v282[24 * v172];
          *(void *)v376 = v282;
          *(void *)&v376[8] = v283;
          *(void *)&v376[24] = &v282[24 * v281];
          *(void *)v283 = 0;
          *((void *)v283 + 1) = 0;
          *((void *)v283 + 2) = 0;
          unint64_t v279 = (unint64_t)(v283 + 24);
          *(void *)&v376[16] = v283 + 24;
          v284 = (void *)v372.i64[1];
          unint64_t v285 = v372.i64[0];
          unint64_t v286 = *(void *)&v376[8];
          if (v372.i64[1] == v372.i64[0])
          {
            int64x2_t v288 = vdupq_n_s64(v372.u64[1]);
          }
          else
          {
            do
            {
              *(void *)(v286 - 24) = 0;
              *(void *)(v286 - 16) = 0;
              v286 -= 24;
              *(void *)(v286 + 16) = 0;
              long long v287 = *(_OWORD *)(v284 - 3);
              v284 -= 3;
              *(_OWORD *)unint64_t v286 = v287;
              *(void *)(v286 + 16) = v284[2];
              void *v284 = 0;
              v284[1] = 0;
              v284[2] = 0;
            }
            while (v284 != (void *)v285);
            int64x2_t v288 = v372;
            unint64_t v279 = *(void *)&v376[16];
          }
          v372.i64[0] = v286;
          v372.i64[1] = v279;
          *(int64x2_t *)&v376[8] = v288;
          unint64_t v289 = v373;
          unint64_t v373 = *(void *)&v376[24];
          *(void *)&v376[24] = v289;
          *(void *)v376 = v288.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v376);
        }
        else
        {
          *(void *)v372.i64[1] = 0;
          *(void *)(v278 + 8) = 0;
          unint64_t v279 = v278 + 24;
          *(void *)(v278 + 16) = 0;
        }
        v372.i64[1] = v279;
        v374 = (__n128 *)v277[2];
        *(_OWORD *)CMTime __p = 0u;
        long long v367 = 0u;
        long long v368 = 0u;
        std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(__p, (uint64_t *)&v374, 1uLL);
        *(_OWORD *)v376 = *(_OWORD *)__p;
        *(_OWORD *)&v376[16] = v367;
        *(_OWORD *)CMTime __p = 0u;
        long long v367 = 0u;
        long long v377 = v368;
        long long v368 = 0uLL;
        std::deque<unsigned long>::~deque[abi:nn180100](__p);
        uint64_t v290 = *((void *)&v377 + 1);
        while (2)
        {
          uint64_t v291 = v290 - 1;
          unint64_t v292 = *(void *)(*(void *)(*(void *)&v376[8]
                                       + (((unint64_t)(v291 + v377) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v291 + v377) & 0x1FF));
          *((void *)&v377 + 1) = v291;
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v376, 1);
          unsigned int v293 = v369[0];
          unint64_t v294 = (unint64_t)v369[1];
          if (std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], v292))
          {
            goto LABEL_375;
          }
          if (v294)
          {
            uint8x8_t v295 = (uint8x8_t)vcnt_s8((int8x8_t)v294);
            v295.i16[0] = vaddlv_u8(v295);
            if (v295.u32[0] > 1uLL)
            {
              unint64_t v172 = v292;
              if (v294 <= v292) {
                unint64_t v172 = v292 % v294;
              }
            }
            else
            {
              unint64_t v172 = (v294 - 1) & v292;
            }
            unsigned int v296 = (void *)v293[v172];
            if (v296)
            {
              for (unint64_t j = (void *)*v296; j; unint64_t j = (void *)*j)
              {
                unint64_t v298 = j[1];
                if (v298 == v292)
                {
                  if (j[2] == v292) {
                    goto LABEL_449;
                  }
                }
                else
                {
                  if (v295.u32[0] > 1uLL)
                  {
                    if (v298 >= v294) {
                      v298 %= v294;
                    }
                  }
                  else
                  {
                    v298 &= v294 - 1;
                  }
                  if (v298 != v172) {
                    break;
                  }
                }
              }
            }
          }
          int v299 = operator new(0x18uLL);
          *int v299 = 0;
          v299[1] = v292;
          v299[2] = v292;
          float v300 = (float)((unint64_t)v370[1] + 1);
          if (!v294 || (float)(v371 * (float)v294) < v300)
          {
            BOOL v301 = (v294 & (v294 - 1)) != 0;
            if (v294 < 3) {
              BOOL v301 = 1;
            }
            unint64_t v302 = v301 | (2 * v294);
            unint64_t v303 = vcvtps_u32_f32(v300 / v371);
            if (v302 <= v303) {
              int8x8_t prime = (int8x8_t)v303;
            }
            else {
              int8x8_t prime = (int8x8_t)v302;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
              unint64_t v294 = (unint64_t)v369[1];
            }
            if (*(void *)&prime <= v294)
            {
              if (*(void *)&prime < v294)
              {
                unint64_t v311 = vcvtps_u32_f32((float)(unint64_t)v370[1] / v371);
                if (v294 < 3
                  || (uint8x8_t v312 = (uint8x8_t)vcnt_s8((int8x8_t)v294), v312.i16[0] = vaddlv_u8(v312), v312.u32[0] > 1uLL))
                {
                  unint64_t v311 = std::__next_prime(v311);
                }
                else
                {
                  uint64_t v313 = 1 << -(char)__clz(v311 - 1);
                  if (v311 >= 2) {
                    unint64_t v311 = v313;
                  }
                }
                if (*(void *)&prime <= v311) {
                  int8x8_t prime = (int8x8_t)v311;
                }
                if (*(void *)&prime >= v294)
                {
                  unint64_t v294 = (unint64_t)v369[1];
                }
                else
                {
                  if (prime) {
                    goto LABEL_405;
                  }
                  v335 = v369[0];
                  v369[0] = 0;
                  if (v335) {
                    operator delete(v335);
                  }
                  unint64_t v294 = 0;
                  v369[1] = 0;
                }
              }
            }
            else
            {
LABEL_405:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              v305 = operator new(8 * *(void *)&prime);
              v306 = v369[0];
              v369[0] = v305;
              if (v306) {
                operator delete(v306);
              }
              uint64_t v307 = 0;
              v369[1] = (void *)prime;
              do
                *((void *)v369[0] + v307++) = 0;
              while (*(void *)&prime != v307);
              uint64_t v308 = (void **)v370[0];
              if (v370[0])
              {
                unint64_t v309 = *((void *)v370[0] + 1);
                uint8x8_t v310 = (uint8x8_t)vcnt_s8(prime);
                v310.i16[0] = vaddlv_u8(v310);
                if (v310.u32[0] > 1uLL)
                {
                  if (v309 >= *(void *)&prime) {
                    v309 %= *(void *)&prime;
                  }
                }
                else
                {
                  v309 &= *(void *)&prime - 1;
                }
                *((void *)v369[0] + v30re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v370;
                for (uint64_t k = *v308; k; v309 = v315)
                {
                  unint64_t v315 = k[1];
                  if (v310.u32[0] > 1uLL)
                  {
                    if (v315 >= *(void *)&prime) {
                      v315 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v315 &= *(void *)&prime - 1;
                  }
                  if (v315 != v309)
                  {
                    if (!*((void *)v369[0] + v315))
                    {
                      *((void *)v369[0] + v315) = v308;
                      goto LABEL_430;
                    }
                    *uint64_t v308 = (void *)*k;
                    *uint64_t k = **((void **)v369[0] + v315);
                    **((void **)v369[0] + v315) = k;
                    uint64_t k = v308;
                  }
                  unint64_t v315 = v309;
LABEL_430:
                  uint64_t v308 = (void **)k;
                  uint64_t k = (void *)*k;
                }
              }
              unint64_t v294 = (unint64_t)prime;
            }
            if ((v294 & (v294 - 1)) != 0)
            {
              if (v294 <= v292) {
                unint64_t v172 = v292 % v294;
              }
              else {
                unint64_t v172 = v292;
              }
            }
            else
            {
              unint64_t v172 = (v294 - 1) & v292;
            }
          }
          v316 = v369[0];
          v317 = (void *)*((void *)v369[0] + v172);
          if (v317)
          {
            *int v299 = *v317;
            goto LABEL_447;
          }
          *int v299 = v370[0];
          v370[0] = v299;
          v316[v172] = v370;
          if (*v299)
          {
            unint64_t v318 = *(void *)(*v299 + 8);
            if ((v294 & (v294 - 1)) != 0)
            {
              if (v318 >= v294) {
                v318 %= v294;
              }
            }
            else
            {
              v318 &= v294 - 1;
            }
            v317 = (char *)v369[0] + 8 * v318;
LABEL_447:
            void *v317 = v299;
          }
          ++v370[1];
LABEL_449:
          v320 = *(unint64_t **)(v279 - 16);
          unint64_t v319 = *(void *)(v279 - 8);
          if ((unint64_t)v320 >= v319)
          {
            v321 = *(unint64_t **)(v279 - 24);
            uint64_t v322 = v320 - v321;
            unint64_t v323 = v322 + 1;
            if ((unint64_t)(v322 + 1) >> 61) {
              goto LABEL_515;
            }
            uint64_t v324 = v319 - (void)v321;
            if (v324 >> 2 > v323) {
              unint64_t v323 = v324 >> 2;
            }
            if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v325 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v325 = v323;
            }
            if (v325)
            {
              v326 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v279 - 8, v325);
              v321 = *(unint64_t **)(v279 - 24);
              v320 = *(unint64_t **)(v279 - 16);
            }
            else
            {
              v326 = 0;
            }
            v327 = (unint64_t *)&v326[8 * v322];
            unint64_t *v327 = v292;
            unint64_t v172 = (unint64_t)(v327 + 1);
            while (v320 != v321)
            {
              unint64_t v328 = *--v320;
              *--v327 = v328;
            }
            *(void *)(v279 - 24) = v327;
            *(void *)(v279 - 16) = v172;
            *(void *)(v279 - 8) = &v326[8 * v325];
            if (v321) {
              operator delete(v321);
            }
          }
          else
          {
            unint64_t *v320 = v292;
            unint64_t v172 = (unint64_t)(v320 + 1);
          }
          *(void *)(v279 - 16) = v172;
          if (*((void *)&v363 + 1))
          {
            uint8x8_t v329 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v363 + 8));
            v329.i16[0] = vaddlv_u8(v329);
            if (v329.u32[0] > 1uLL)
            {
              unint64_t v330 = v292;
              if (v292 >= *((void *)&v363 + 1)) {
                unint64_t v330 = v292 % *((void *)&v363 + 1);
              }
            }
            else
            {
              unint64_t v330 = (*((void *)&v363 + 1) - 1) & v292;
            }
            v331 = *(void **)(v363 + 8 * v330);
            if (v331)
            {
              for (uint64_t m = (void *)*v331; m; uint64_t m = (void *)*m)
              {
                unint64_t v333 = m[1];
                if (v333 == v292)
                {
                  if (m[2] == v292)
                  {
                    unint64_t v172 = m[3];
                    uint64_t v334 = m[4];
                    while (v172 != v334)
                    {
                      __p[0] = 0;
                      __p[0] = *(void **)v172;
                      if (!std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>((uint64_t)v369[0], (unint64_t)v369[1], (unint64_t)__p[0]))std::deque<unsigned long>::push_back(v376, __p); {
                      v172 += 8;
                      }
                    }
                    break;
                  }
                }
                else
                {
                  if (v329.u32[0] > 1uLL)
                  {
                    if (v333 >= *((void *)&v363 + 1)) {
                      v333 %= *((void *)&v363 + 1);
                    }
                  }
                  else
                  {
                    v333 &= *((void *)&v363 + 1) - 1;
                  }
                  if (v333 != v330) {
                    break;
                  }
                }
              }
            }
          }
LABEL_375:
          uint64_t v290 = *((void *)&v377 + 1);
          if (*((void *)&v377 + 1)) {
            continue;
          }
          break;
        }
        std::deque<unsigned long>::~deque[abi:nn180100](v376);
        int32x2_t v4 = v359;
        uint64_t v7 = v355;
      }
      long long v277 = (void *)*v277;
      if (v277) {
        continue;
      }
      break;
    }
    unint64_t v337 = v372.u64[1];
    unint64_t v336 = v372.i64[0];
    for (uint64_t n = v348; v336 != v337; v336 += 24)
    {
      v339 = *(uint64_t **)v336;
      if (*(void *)(v336 + 8) - *(void *)v336 >= 9uLL)
      {
        uint64_t v340 = *v339;
        v341 = *v7;
        unint64_t v342 = 1;
        do
        {
          *((void *)*v7 + v339[v342++]) = v341[v340];
          v339 = *(uint64_t **)v336;
        }
        while (v342 < (uint64_t)(*(void *)(v336 + 8) - *(void *)v336) >> 3);
      }
    }
    v343 = v351;
  }
  else
  {
    v343 = v351;
    uint64_t n = v348;
  }
LABEL_505:
  v344 = v370[0];
  if (v370[0])
  {
    do
    {
      v345 = (void *)*v344;
      operator delete(v344);
      v344 = v345;
    }
    while (v345);
  }
  v346 = v369[0];
  v369[0] = 0;
  if (v346) {
    operator delete(v346);
  }
  *(void *)v376 = &v372;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v376);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v363);
  if (v343)
  {
    for (; n != v343; n -= 24)
      std::__tree<re::ecs2::Scene *>::destroy(*((void **)n - 2));
    operator delete(v343);
  }
  return v4;
}

uint64_t re::pathprocessing::IndexedMesh::getOrAddIndex(uint64_t a1, float *a2)
{
  float32x2_t v5 = (void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 72);
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v6 = a1 + 72;
  do
  {
    BOOL v7 = re::pathprocessing::MathUtils::lexicographicalApproxLess((float *)(v4 + 32), a2);
    int32x2_t v8 = (uint64_t *)(v4 + 8);
    if (!v7)
    {
      int32x2_t v8 = (uint64_t *)v4;
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if ((void **)v6 == v5 || re::pathprocessing::MathUtils::lexicographicalApproxLess(a2, (float *)(v6 + 32)))
  {
LABEL_8:
    unint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(void **)(a1 + 24);
    uint64_t v12 = ((uint64_t)v11 - v10) >> 3;
    if ((unint64_t)v11 >= v9)
    {
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v14 = v9 - v10;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v15 = v12 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        float32x2_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(a1 + 32, v16);
      }
      else {
        float32x2_t v17 = 0;
      }
      float32x2_t v18 = &v17[8 * v12];
      float32x2_t v19 = &v17[8 * v16];
      *(void *)float32x2_t v18 = *(void *)a2;
      float32x2_t v13 = v18 + 8;
      float v21 = *(char **)(a1 + 16);
      uint64_t v20 = *(char **)(a1 + 24);
      if (v20 != v21)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *((void *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        uint64_t v20 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      void *v11 = *(void *)a2;
      float32x2_t v13 = v11 + 1;
    }
    *(void *)(a1 + 24) = v13;
    uint64_t v23 = *(void **)(a1 + 72);
    if (v23)
    {
      while (1)
      {
        while (1)
        {
          int v24 = v23;
          unint64_t v25 = (float *)(v23 + 4);
          if (!re::pathprocessing::MathUtils::lexicographicalApproxLess(a2, (float *)v23 + 8)) {
            break;
          }
          uint64_t v23 = (void *)*v24;
          float32x2_t v5 = (void **)v24;
          if (!*v24) {
            goto LABEL_33;
          }
        }
        if (!re::pathprocessing::MathUtils::lexicographicalApproxLess(v25, a2)) {
          break;
        }
        float32x2_t v5 = (void **)(v24 + 1);
        uint64_t v23 = (void *)v24[1];
        if (!v23) {
          goto LABEL_33;
        }
      }
      int64_t v26 = *v5;
      if (*v5) {
        goto LABEL_36;
      }
    }
    else
    {
      int v24 = v5;
    }
LABEL_33:
    int64_t v26 = operator new(0x30uLL);
    v26[4] = *(void *)a2;
    v26[5] = 0;
    *int64_t v26 = 0;
    v26[1] = 0;
    unsigned int v26[2] = v24;
    *float32x2_t v5 = v26;
    uint64_t v27 = **(void **)(a1 + 64);
    uint64_t v28 = v26;
    if (v27)
    {
      *(void *)(a1 + 64) = v27;
      uint64_t v28 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 72), v28);
    ++*(void *)(a1 + 80);
LABEL_36:
    v26[5] = v12;
    return v12;
  }
  return *(void *)(v6 + 40);
}

uint64_t re::pathprocessing::IndexedMesh::addBezierTo(re::pathprocessing::IndexedMesh *a1, uint64_t a2, uint64_t *a3, float *a4)
{
  uint64_t v8 = *a3;
  v39[0] = *(void *)(*((void *)a1 + 2) + 8 * a2);
  v39[1] = v8;
  void v39[2] = *(void *)a4;
  int v9 = re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)v39);
  if (v9 == 1) {
    return a2;
  }
  if (v9 != 2)
  {
    unint64_t v11 = *((void *)a1 + 4);
    uint64_t v12 = *((void *)a1 + 2);
    float32x2_t v13 = (uint64_t *)*((void *)a1 + 3);
    uint64_t v14 = ((uint64_t)v13 - v12) >> 3;
    if ((unint64_t)v13 >= v11)
    {
      if ((unint64_t)(v14 + 1) >> 61) {
        goto LABEL_38;
      }
      uint64_t v16 = v11 - v12;
      uint64_t v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v17 = v14 + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        float32x2_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)a1 + 32, v18);
      }
      else {
        float32x2_t v19 = 0;
      }
      uint64_t v20 = &v19[8 * v14];
      float v21 = &v19[8 * v18];
      *(void *)uint64_t v20 = *a3;
      uint64_t v15 = v20 + 8;
      uint64_t v23 = (char *)*((void *)a1 + 2);
      uint64_t v22 = (char *)*((void *)a1 + 3);
      if (v22 != v23)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v22 != v23);
        uint64_t v22 = (char *)*((void *)a1 + 2);
      }
      *((void *)a1 + 2) = v20;
      *((void *)a1 + 3) = v15;
      *((void *)a1 + 4) = v21;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *float32x2_t v13 = *a3;
      uint64_t v15 = v13 + 1;
    }
    *((void *)a1 + 3) = v15;
    uint64_t v25 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)a1, a4);
    uint64_t v10 = v25;
    int64_t v26 = (uint64_t *)*((void *)a1 + 6);
    unint64_t v27 = *((void *)a1 + 7);
    if ((unint64_t)v26 < v27)
    {
      *int64_t v26 = a2;
      v26[1] = v14;
      uint64_t v28 = v26 + 3;
      unsigned int v26[2] = v25;
LABEL_36:
      *((void *)a1 + 6) = v28;
      return v10;
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
    uint64_t v30 = (uint64_t *)*((void *)a1 + 5);
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v26 - v30);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)v30) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 < 0x555555555555555) {
        unint64_t v29 = v32;
      }
      if (v29)
      {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v29);
        uint64_t v30 = (uint64_t *)*((void *)a1 + 5);
        int64_t v26 = (uint64_t *)*((void *)a1 + 6);
      }
      else
      {
        uint64_t v34 = 0;
      }
      uint64_t v35 = (uint64_t *)(v29 + 24 * v31);
      unint64_t v36 = v29 + 24 * v34;
      *uint64_t v35 = a2;
      v35[1] = v14;
      v35[2] = v10;
      uint64_t v28 = v35 + 3;
      if (v26 != v30)
      {
        do
        {
          long long v37 = *(_OWORD *)(v26 - 3);
          *(v35 - 1) = *(v26 - 1);
          *(_OWORD *)(v35 - 3) = v37;
          v35 -= 3;
          v26 -= 3;
        }
        while (v26 != v30);
        uint64_t v30 = (uint64_t *)*((void *)a1 + 5);
      }
      *((void *)a1 + 5) = v35;
      *((void *)a1 + 6) = v28;
      *((void *)a1 + 7) = v36;
      if (v30) {
        operator delete(v30);
      }
      goto LABEL_36;
    }
LABEL_38:
    abort();
  }
  uint64_t v10 = re::pathprocessing::IndexedMesh::getOrAddIndex((uint64_t)a1, a4);
  re::pathprocessing::IndexedMesh::addLineTo(a1, a2, v10);
  return v10;
}

uint64_t re::pathprocessing::IndexedMesh::addLineTo(re::pathprocessing::IndexedMesh *this, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
  {
    uint64_t v6 = (char *)*((void *)this + 6);
    unint64_t v7 = *((void *)this + 7);
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      uint64_t v10 = (char *)*((void *)this + 5);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v10) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 < 0x555555555555555) {
        unint64_t v9 = v12;
      }
      if (v9)
      {
        unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::sub_match<char const*>>>(v9);
        uint64_t v10 = (char *)*((void *)this + 5);
        uint64_t v6 = (char *)*((void *)this + 6);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v15 = (void *)(v9 + 24 * v11);
      unint64_t v16 = v9 + 24 * v14;
      *uint64_t v15 = a2;
      v15[1] = -1;
      v15[2] = a3;
      uint64_t v8 = v15 + 3;
      if (v6 != v10)
      {
        do
        {
          long long v17 = *(_OWORD *)(v6 - 24);
          *(v15 - 1) = *((void *)v6 - 1);
          *(_OWORD *)(v15 - 3) = v17;
          v15 -= 3;
          v6 -= 24;
        }
        while (v6 != v10);
        uint64_t v10 = (char *)*((void *)this + 5);
      }
      *((void *)this + 5) = v15;
      *((void *)this + 6) = v8;
      *((void *)this + 7) = v16;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)uint64_t v6 = a2;
      *((void *)v6 + 1) = -1;
      *((void *)v6 + 2) = a3;
      uint64_t v8 = v6 + 24;
    }
    *((void *)this + 6) = v8;
  }
  return a3;
}

void re::pathprocessing::IndexedMesh::flatten(void *a1, uint64_t *a2, std::vector<int> *a3)
{
  uint64_t v7 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  std::vector<re::pathprocessing::Bezier2>::resize((uint64_t)a2, v8);
  std::vector<unsigned int>::resize(a3, v8);
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (v8 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    }
    while (1)
    {
      unint64_t v12 = (uint64_t *)(a1[5] + v9);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = v12[2];
      if (v13 == -1 || v14 != -1) {
        goto LABEL_13;
      }
      if (v15 == -1) {
        break;
      }
      uint64_t v17 = a1[2];
      float32x2_t v18 = *(float32x2_t *)(v17 + 8 * v13);
      float32x2_t v19 = *(float32x2_t *)(v17 + 8 * v15);
      uint64_t v20 = *a2;
      float v21 = (float32x2_t *)(*a2 + v9);
      *float v21 = v18;
      v21[1] = vadd_f32(vmul_f32(v18, (float32x2_t)0x3F0000003F000000), vmul_f32(v19, (float32x2_t)0x3F0000003F000000));
      int v22 = 2;
LABEL_14:
      *(float32x2_t *)(v20 + v9 + 16) = v19;
      a3->__begin_[v10++] = v22;
      v9 += 24;
      if (v11 == v10) {
        return;
      }
    }
    uint64_t v14 = -1;
LABEL_13:
    uint64_t v23 = a1[2];
    uint64_t v24 = *(void *)(v23 + 8 * v13);
    uint64_t v25 = *(void *)(v23 + 8 * v14);
    float32x2_t v19 = *(float32x2_t *)(v23 + 8 * v15);
    uint64_t v20 = *a2;
    int64_t v26 = (void *)(*a2 + v9);
    *int64_t v26 = v24;
    v26[1] = v25;
    int v22 = 3;
    goto LABEL_14;
  }
}

void std::vector<re::pathprocessing::Bezier2>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<re::pathprocessing::Bezier2>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<re::pathprocessing::Bezier2>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float32x2_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[24 * v8];
    uint64_t v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    float32x2_t v19 = (char *)*a1;
    float32x2_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      float32x2_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t **std::__tree<std::__value_type<float,unsigned long>,std::__map_value_compare<float,std::__value_type<float,unsigned long>,re::pathprocessing::MathUtils::LexApproxCompare,true>,std::allocator<std::__value_type<float,unsigned long>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t **a1, _DWORD *a2, float a3)
{
  uint64_t v6 = a1 + 1;
  float32x2_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        float v8 = *((float *)v5 + 8);
        if ((float)(a3 + 0.0001) >= v8) {
          break;
        }
        float32x2_t v5 = (uint64_t *)*v5;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((float)(v8 + 0.0001) >= a3) {
        break;
      }
      float32x2_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a2;
    v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  float32x2_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *float32x2_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    float32x2_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  float32x2_t v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  BOOL result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(void *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = ((v7 - v6) << 6) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<unsigned long>::__add_back_capacity(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  unint64_t v11 = (void *)(v6 + 8 * (v9 >> 9));
  if (v7 == v6) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *v11 + 8 * (v9 & 0x1FF);
  }
  v19[0] = v6 + 8 * (v9 >> 9);
  v19[1] = v12;
  BOOL result = std::__deque_iterator<unsigned long,unsigned long *,unsigned long &,unsigned long **,long,512l>::operator+[abi:nn180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    unint64_t v15 = (void *)(v11 == result ? v14 : *v11 + 4096);
    if ((void *)v12 == v15)
    {
      unint64_t v15 = (void *)v12;
    }
    else
    {
      unint64_t v16 = (void *)v12;
      do
      {
        uint64_t v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 3;
    if (v11 == result) {
      break;
    }
    uint64_t v18 = v11[1];
    ++v11;
    uint64_t v12 = v18;
  }
  return result;
}

uint64_t std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<unsigned long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

float32x2_t re::pathprocessing::Bezier2::curveBetween@<D0>(float32x2_t *this@<X0>, float a2@<S0>, float a3@<S1>, float32x2_t *a4@<X8>)
{
  float32x2_t v4 = *this;
  float32x2_t v5 = this[1];
  float32x2_t v6 = this[2];
  float32x2_t v7 = vadd_f32(vadd_f32(vmul_n_f32(*this, (float)(1.0 - a2) * (float)(1.0 - a2)), vmul_n_f32(v5, (float)(a2 + a2) * (float)(1.0 - a2))), vmul_n_f32(v6, a2 * a2));
  *a4 = v7;
  a4[1] = vadd_f32(vmul_n_f32(v7, 1.0 - (float)((float)(a3 - a2) / (float)(1.0 - a2))), vmul_n_f32(vadd_f32(vmul_n_f32(v5, 1.0 - a2), vmul_n_f32(v6, a2)), (float)(a3 - a2) / (float)(1.0 - a2)));
  float32x2_t result = vadd_f32(vadd_f32(vmul_n_f32(v4, (float)(1.0 - a3) * (float)(1.0 - a3)), vmul_n_f32(v5, (float)(a3 + a3) * (float)(1.0 - a3))), vmul_n_f32(v6, a3 * a3));
  a4[2] = result;
  return result;
}

uint64_t re::pathprocessing::Bezier2::geometryType(re::pathprocessing::Bezier2 *this)
{
  uint64_t result = re::pathprocessing::Bezier2::isfinite(this);
  if (result)
  {
    if (re::pathprocessing::Bezier2::isPoint(this))
    {
      return 1;
    }
    else if (re::pathprocessing::Bezier2::isLine((float32x2_t *)this))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

BOOL re::pathprocessing::Bezier2::isfinite(re::pathprocessing::Bezier2 *this)
{
  if ((*(_DWORD *)this & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*((_DWORD *)this + 1) & 0x7FFFFFFFu) < 0x7F800000
    || (*((_DWORD *)this + 2) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (*((_DWORD *)this + 3) & 0x7FFFFFFFu) < 0x7F800000)
  {
    return 1;
  }
  if ((*((_DWORD *)this + 4) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  return (*((_DWORD *)this + 5) & 0x7FFFFFFFu) < 0x7F800000;
}

BOOL re::pathprocessing::Bezier2::isPoint(re::pathprocessing::Bezier2 *this)
{
  float v1 = *(float *)this;
  float v2 = *((float *)this + 2);
  if (*(float *)this != v2 && vabds_f32(v1, v2) > 0.0001) {
    return 0;
  }
  float v3 = *((float *)this + 1);
  float v4 = *((float *)this + 3);
  if (v3 != v4 && vabds_f32(v3, v4) > 0.0001) {
    return 0;
  }
  float v5 = *((float *)this + 4);
  if (v2 != v5 && vabds_f32(v2, v5) > 0.0001) {
    return 0;
  }
  float v6 = *((float *)this + 5);
  if (v4 != v6 && vabds_f32(v4, v6) > 0.0001) {
    return 0;
  }
  if (v1 != v5 && vabds_f32(v1, v5) > 0.0001) {
    return 0;
  }
  if (vabds_f32(v3, v6) <= 0.0001) {
    return 1;
  }
  return v3 == v6;
}

BOOL re::pathprocessing::Bezier2::isLine(float32x2_t *this)
{
  if (re::pathprocessing::Bezier2::isPoint((re::pathprocessing::Bezier2 *)this)) {
    return 0;
  }
  float32x2_t v3 = this[1];
  float32x2_t v4 = vsub_f32(v3, *this);
  int32x2_t v5 = (int32x2_t)vmul_f32(v4, v4);
  float32x2_t v6 = this[2];
  float32x2_t v7 = vsub_f32(v6, v3);
  int32x2_t v8 = (int32x2_t)vmul_f32(v7, v7);
  float32x2_t v9 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v5, v8), (float32x2_t)vzip2_s32(v5, v8)));
  float32x2_t v10 = vsub_f32(*this, v6);
  float v11 = sqrtf(vaddv_f32(vmul_f32(v10, v10)));
  if (v9.f32[0] <= v9.f32[1]) {
    float v12 = v9.f32[1];
  }
  else {
    float v12 = v9.f32[0];
  }
  if (v9.f32[0] > v9.f32[1]) {
    v9.f32[0] = v9.f32[1];
  }
  if (v12 <= v11) {
    float v13 = v11;
  }
  else {
    float v13 = v12;
  }
  if (v12 <= v11) {
    float v11 = v12;
  }
  return fabsf((float)((float)(v9.f32[0] + v11) / v13) + -1.0) < 0.0001;
}

BOOL re::pathprocessing::Bezier2::enclosingTriangleOverlaps(float32x2_t *this, float32x2_t *a2)
{
  float32x2_t v2 = *this;
  float32x2_t v3 = this[1];
  float32x2_t v4 = this[2];
  *(float32x2_t *)v5.f32 = vminnm_f32(vminnm_f32(*this, v3), v4);
  float32x2_t v6 = *a2;
  float32x2_t v7 = a2[1];
  float32x2_t v8 = a2[2];
  *(float32x2_t *)v9.f32 = vmaxnm_f32(vmaxnm_f32(*a2, v7), v8);
  *(float32x2_t *)&v5.u32[2] = vminnm_f32(vminnm_f32(*a2, v7), v8);
  *(float32x2_t *)&v9.u32[2] = vmaxnm_f32(vmaxnm_f32(*this, v3), v4);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v9, v5)), 0xFuLL))) & 1) == 0) {
    return 0;
  }
  BOOL isLine = re::pathprocessing::Bezier2::isLine(this);
  BOOL v13 = re::pathprocessing::Bezier2::isLine(a2);
  int v14 = !v13;
  if (isLine && !v14) {
    return 0;
  }
  if (isLine && !v13)
  {
    uint64_t v19 = (uint64_t)v2;
    uint64_t v20 = (uint64_t)v4;
    float32x2_t v21 = vsub_f32(v7, v6);
    float32x2_t v22 = vsub_f32(v8, v7);
    if (vmlas_n_f32((float)-v21.f32[1] * v22.f32[0], v22.f32[1], v21.f32[0]) >= 0.0)
    {
      *(float32x2_t *)&long long v28 = v8;
      *((float32x2_t *)&v28 + 1) = v7;
      float32x2_t v29 = v6;
      return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
    }
    long long v28 = *(_OWORD *)a2->f32;
    float32x2_t v23 = a2[2];
LABEL_13:
    float32x2_t v29 = v23;
    return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
  }
  float32x2_t v16 = vsub_f32(v3, v2);
  float32x2_t v17 = vsub_f32(v4, v3);
  float v18 = vmlas_n_f32((float)-v16.f32[1] * v17.f32[0], v17.f32[1], v16.f32[0]);
  if (((isLine | v14) & 1) == 0)
  {
    uint64_t v19 = (uint64_t)v6;
    uint64_t v20 = (uint64_t)v8;
    if (v18 >= 0.0)
    {
      *(float32x2_t *)&long long v28 = v4;
      *((float32x2_t *)&v28 + 1) = v3;
      float32x2_t v29 = v2;
      return re::pathprocessing::BezierUtils::lineCrossBezierHull((float32x2_t *)&v28, v19, v20);
    }
    long long v28 = *(_OWORD *)this->f32;
    float32x2_t v23 = this[2];
    goto LABEL_13;
  }
  if (v18 >= 0.0)
  {
    *(float32x2_t *)&long long v28 = v4;
    *((float32x2_t *)&v28 + 1) = v3;
    float32x2_t v29 = v2;
  }
  else
  {
    long long v28 = *(_OWORD *)this->f32;
    float32x2_t v29 = this[2];
  }
  float32x2_t v24 = vsub_f32(v7, v6);
  float32x2_t v25 = vsub_f32(v8, v7);
  if (vmlas_n_f32((float)-v24.f32[1] * v25.f32[0], v25.f32[1], v24.f32[0]) >= 0.0)
  {
    *(float32x2_t *)&long long v26 = v8;
    *((float32x2_t *)&v26 + 1) = v7;
    float32x2_t v27 = v6;
  }
  else
  {
    long long v26 = *(_OWORD *)a2->f32;
    float32x2_t v27 = a2[2];
  }
  return re::pathprocessing::BezierUtils::bezierHullOverlap((float32x2_t *)&v28, (float32x2_t *)&v26);
}

void re::pathprocessing::Bezier2::removeOverlaps(long long *a1, long long *a2, void *a3, char **a4)
{
  uint64_t v222 = *MEMORY[0x263EF8340];
  re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, a1, 0.0, 1.0);
  re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)v221, a2, 0.0, 1.0);
  float32x2_t v6 = (char *)operator new(0x80uLL);
  float32x2_t v7 = 0;
  float32x2_t v8 = 0;
  __src = 0;
  float32x4_t v9 = 0;
  long long v10 = v221[1];
  long long v11 = v221[2];
  long long v12 = v220;
  BOOL v13 = v6 + 128;
  *((_OWORD *)v6 + 4) = v221[0];
  *((_OWORD *)v6 + 5) = v10;
  long long v14 = v221[3];
  *((_OWORD *)v6 + 6) = v11;
  *((_OWORD *)v6 + 7) = v14;
  long long v15 = v218;
  *(_OWORD *)float32x2_t v6 = v217;
  *((_OWORD *)v6 + 1) = v15;
  unint64_t v202 = 0;
  *((_OWORD *)v6 + 2) = v219;
  *((_OWORD *)v6 + 3) = v12;
  uint64_t v205 = v6 + 128;
  CMTime __p = 0;
  do
  {
    std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((unint64_t)v6, (float *)v13, 126 - 2 * __clz((v13 - v6) >> 6), 1);
    float32x2_t v16 = v13 - 64;
    uint64_t v211 = v13 - 64 - v6;
    if (v13 - 64 == v6)
    {
LABEL_11:
      uint64_t v23 = 0;
      do
      {
        uint32x2_t v24 = (uint32x2_t)vceq_f32(*(float32x2_t *)&v13[v23 - 24], *(float32x2_t *)((char *)a1 + v23));
        unsigned __int32 v25 = vpmin_u32(v24, v24).u32[0];
        if ((v25 & 0x80000000) == 0) {
          break;
        }
        BOOL v22 = v23 == 16;
        v23 += 8;
      }
      while (!v22);
      if ((v25 & 0x80000000) == 0)
      {
        if (v9 >= __p)
        {
          uint64_t v60 = (v9 - __src) >> 6;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 58) {
            goto LABEL_230;
          }
          if ((__p - __src) >> 5 > v61) {
            unint64_t v61 = (__p - __src) >> 5;
          }
          if ((unint64_t)(__p - __src) >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62) {
            unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v62);
          }
          else {
            uint64_t v63 = 0;
          }
          int64_t v75 = (_OWORD *)(v62 + (v60 << 6));
          long long v76 = *(_OWORD *)v16;
          long long v77 = *((_OWORD *)v13 - 3);
          long long v78 = *((_OWORD *)v13 - 1);
          v75[2] = *((_OWORD *)v13 - 2);
          v75[3] = v78;
          *int64_t v75 = v76;
          v75[1] = v77;
          if (v9 == __src)
          {
            uint64_t v83 = (unsigned char *)(v62 + (v60 << 6));
          }
          else
          {
            unint64_t v79 = v62 + (v60 << 6);
            do
            {
              long long v80 = *((_OWORD *)v9 - 4);
              long long v81 = *((_OWORD *)v9 - 3);
              long long v82 = *((_OWORD *)v9 - 1);
              uint64_t v83 = (unsigned char *)(v79 - 64);
              *(_OWORD *)(v79 - 32) = *((_OWORD *)v9 - 2);
              *(_OWORD *)(v79 - 16) = v82;
              *(_OWORD *)(v79 - 64) = v80;
              *(_OWORD *)(v79 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v81;
              v9 -= 64;
              v79 -= 64;
            }
            while (v9 != __src);
          }
          CMTime __p = (char *)(v62 + (v63 << 6));
          float32x4_t v9 = (char *)(v75 + 4);
          if (__src) {
            operator delete(__src);
          }
          v13 -= 64;
          __src = v83;
          continue;
        }
        long long v26 = *(_OWORD *)v16;
        long long v27 = *((_OWORD *)v13 - 3);
        long long v28 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v9 + 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v9 + 3) = v28;
        *(_OWORD *)float32x4_t v9 = v26;
        *((_OWORD *)v9 + 1) = v27;
        v9 += 64;
LABEL_20:
        v13 -= 64;
        continue;
      }
      if ((unint64_t)v8 < v202)
      {
        long long v29 = *(_OWORD *)v16;
        long long v30 = *((_OWORD *)v13 - 3);
        long long v31 = *((_OWORD *)v13 - 1);
        *((_OWORD *)v8 + 2) = *((_OWORD *)v13 - 2);
        *((_OWORD *)v8 + 3) = v31;
        *(_OWORD *)float32x2_t v8 = v29;
        *((_OWORD *)v8 + 1) = v30;
        v8 += 64;
        goto LABEL_20;
      }
      uint64_t v68 = (v8 - v7) >> 6;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 58) {
        goto LABEL_230;
      }
      if ((uint64_t)(v202 - (void)v7) >> 5 > v69) {
        unint64_t v69 = (uint64_t)(v202 - (void)v7) >> 5;
      }
      if (v202 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70) {
        unint64_t v70 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v70);
      }
      else {
        uint64_t v71 = 0;
      }
      uint64_t v84 = (_OWORD *)(v70 + (v68 << 6));
      long long v85 = *(_OWORD *)v16;
      long long v86 = *((_OWORD *)v13 - 3);
      long long v87 = *((_OWORD *)v13 - 1);
      v84[2] = *((_OWORD *)v13 - 2);
      v84[3] = v87;
      *uint64_t v84 = v85;
      v84[1] = v86;
      if (v8 == v7)
      {
        uint64_t v92 = (char *)(v70 + (v68 << 6));
      }
      else
      {
        unint64_t v88 = v70 + (v68 << 6);
        do
        {
          long long v89 = *((_OWORD *)v8 - 4);
          long long v90 = *((_OWORD *)v8 - 3);
          long long v91 = *((_OWORD *)v8 - 1);
          uint64_t v92 = (char *)(v88 - 64);
          *(_OWORD *)(v88 - 32) = *((_OWORD *)v8 - 2);
          *(_OWORD *)(v88 - 16) = v91;
          *(_OWORD *)(v88 - 64) = v89;
          *(_OWORD *)(v88 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v90;
          v8 -= 64;
          v88 -= 64;
        }
        while (v8 != v7);
      }
      unint64_t v202 = v70 + (v71 << 6);
      float32x2_t v8 = (char *)(v84 + 4);
      if (v7) {
        operator delete(v7);
      }
      v13 -= 64;
      float32x2_t v7 = v92;
    }
    else
    {
      float32x2_t v17 = v13 - 88;
      float v18 = (float32x2_t *)(v13 - 64);
      while (1)
      {
        uint64_t v19 = 0;
        do
        {
          uint32x2_t v20 = (uint32x2_t)vceq_f32(*(float32x2_t *)&v13[v19 - 24], *(float32x2_t *)&v17[v19]);
          unsigned __int32 v21 = vpmin_u32(v20, v20).u32[0];
          if ((v21 & 0x80000000) == 0) {
            break;
          }
          BOOL v22 = v19 == 16;
          v19 += 8;
        }
        while (!v22);
        if ((v21 & 0x80000000) == 0
          && re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)v13 - 6, v18 - 6))
        {
          break;
        }
        v18 -= 8;
        v17 -= 64;
        if (v18 == (float32x2_t *)v6) {
          goto LABEL_11;
        }
      }
      long long v32 = *((_OWORD *)v13 - 1);
      long long v33 = *(_OWORD *)v16;
      long long v34 = *((_OWORD *)v13 - 3);
      v215[0] = *((_OWORD *)v13 - 2);
      v215[1] = v32;
      uint64_t v214 = v33;
      long long v35 = v32;
      float32x2_t v36 = *(float32x2_t *)((char *)&v34 + 8);
      float32x2_t v37 = *(float32x2_t *)((char *)v215 + 8);
      float32x2_t v38 = vadd_f32(vsub_f32(*(float32x2_t *)((char *)v215 + 8), vadd_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v35)), *(float32x2_t *)((char *)&v32 + 8));
      *(float32x2_t *)&long long v32 = vsub_f32(*(float32x2_t *)&v32, *(float32x2_t *)((char *)v215 + 8));
      *(float *)&long long v33 = vaddv_f32(vmul_f32(v38, v38));
      *(float *)&long long v34 = vaddv_f32(vmul_f32(*(float32x2_t *)&v32, v38));
      int32x2_t v39 = (int32x2_t)vmul_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v32);
      float32x2_t v40 = vsub_f32(*(float32x2_t *)((char *)v215 + 8), *(float32x2_t *)((char *)&v34 + 8));
      int32x2_t v41 = (int32x2_t)vmul_f32(v40, v38);
      float32x2_t v42 = vadd_f32((float32x2_t)vzip1_s32(v39, v41), (float32x2_t)vzip2_s32(v39, v41));
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v217, 0.0, *(float *)&v33, (float)(*(float *)&v34 * 3.0), (float)((float)(v42.f32[0] + v42.f32[0]) + v42.f32[1]), vaddv_f32(vmul_f32(v40, *(float32x2_t *)&v32)));
      if (!HIDWORD(v221[0])) {
        goto LABEL_49;
      }
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 8 * HIDWORD(v221[0]);
      do
      {
        double v47 = *(double *)((char *)&v219 + v43 + 8);
        if (v47 >= 0.0 || v47 <= 1.0)
        {
          float v49 = v47;
          uint64_t v44 = v45 + 1;
          v216[v45++] = v49;
        }
        v43 += 8;
      }
      while (v46 != v43);
      if (v44)
      {
        uint64_t v50 = 4 * v44;
        unint64_t v51 = v216;
        float v52 = NAN;
        float v53 = 3.4028e38;
        do
        {
          float v54 = *v51++;
          float v55 = v54;
          if (v54 <= 1.0) {
            float v56 = v55;
          }
          else {
            float v56 = 1.0;
          }
          if (v55 >= 0.0) {
            float v57 = v56;
          }
          else {
            float v57 = 0.0;
          }
          float32x2_t v58 = vsub_f32(v36, vadd_f32(vmul_n_f32(*(float32x2_t *)((char *)&v35 + 8), v57 * v57), vadd_f32(vmul_n_f32(v37, (float)(1.0 - v57) * (float)(1.0 - v57)), vmul_n_f32(*(float32x2_t *)&v35, (float)(v57 + v57) * (float)(1.0 - v57)))));
          float v59 = vaddv_f32(vmul_f32(v58, v58));
          if (v59 < v53)
          {
            float v52 = v57;
            float v53 = v59;
          }
          v50 -= 4;
        }
        while (v50);
      }
      else
      {
LABEL_49:
        float v52 = NAN;
      }
      if (v52 <= *(float *)&v214 || v52 >= *((float *)&v214 + 1)) {
        goto LABEL_223;
      }
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (_OWORD *)((char *)v215 + 8), *(float *)&v214, v52);
      if (v16 >= v205)
      {
        unint64_t v72 = (v211 >> 6) + 1;
        if (v72 >> 58) {
          goto LABEL_230;
        }
        if ((v205 - v6) >> 5 > v72) {
          unint64_t v72 = (v205 - v6) >> 5;
        }
        if ((unint64_t)(v205 - v6) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v72;
        }
        if (v73) {
          unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v73);
        }
        else {
          uint64_t v74 = 0;
        }
        unint64_t v93 = (char *)(v73 + (v211 >> 6 << 6));
        long long v94 = v217;
        long long v95 = v218;
        long long v96 = v220;
        uint64_t v205 = (char *)(v73 + (v74 << 6));
        *((_OWORD *)v93 + 2) = v219;
        *((_OWORD *)v93 + 3) = v96;
        *(_OWORD *)unint64_t v93 = v94;
        *((_OWORD *)v93 + 1) = v95;
        BOOL v13 = v93 + 64;
        do
        {
          long long v97 = *((_OWORD *)v16 - 4);
          long long v98 = *((_OWORD *)v16 - 3);
          long long v99 = *((_OWORD *)v16 - 1);
          *((_OWORD *)v93 - 2) = *((_OWORD *)v16 - 2);
          *((_OWORD *)v93 - 1) = v99;
          *((_OWORD *)v93 - 4) = v97;
          *((_OWORD *)v93 - 3) = v98;
          v93 -= 64;
          v16 -= 64;
        }
        while (v16 != v6);
        if (v6) {
          operator delete(v6);
        }
        float32x2_t v6 = v93;
      }
      else
      {
        long long v65 = v217;
        long long v66 = v218;
        long long v67 = v220;
        *((_OWORD *)v13 - 2) = v219;
        *((_OWORD *)v13 - 1) = v67;
        *(_OWORD *)float32x2_t v16 = v65;
        *((_OWORD *)v13 - 3) = v66;
      }
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (_OWORD *)((char *)v215 + 8), v52, *((float *)&v214 + 1));
      if (v13 >= v205)
      {
        uint64_t v104 = (v13 - v6) >> 6;
        unint64_t v105 = v104 + 1;
        if ((unint64_t)(v104 + 1) >> 58) {
          goto LABEL_230;
        }
        if ((v205 - v6) >> 5 > v105) {
          unint64_t v105 = (v205 - v6) >> 5;
        }
        if ((unint64_t)(v205 - v6) >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v106 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v105;
        }
        if (v106) {
          unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v106);
        }
        else {
          uint64_t v107 = 0;
        }
        unint64_t v108 = (char *)(v106 + (v104 << 6));
        long long v109 = v217;
        long long v110 = v218;
        long long v111 = v220;
        uint64_t v205 = (char *)(v106 + (v107 << 6));
        *((_OWORD *)v108 + 2) = v219;
        *((_OWORD *)v108 + 3) = v111;
        *(_OWORD *)unint64_t v108 = v109;
        *((_OWORD *)v108 + 1) = v110;
        uint64_t v103 = v108 + 64;
        if (v13 == v6) {
          goto LABEL_111;
        }
        do
        {
          long long v112 = *((_OWORD *)v13 - 4);
          long long v113 = *((_OWORD *)v13 - 3);
          long long v114 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v108 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v108 - 1) = v114;
          *((_OWORD *)v108 - 4) = v112;
          *((_OWORD *)v108 - 3) = v113;
          v108 -= 64;
          v13 -= 64;
        }
        while (v13 != v6);
        if (v6) {
LABEL_111:
        }
          operator delete(v6);
        float32x2_t v6 = v108;
      }
      else
      {
        long long v100 = v217;
        long long v101 = v218;
        long long v102 = v220;
        *((_OWORD *)v13 + 2) = v219;
        *((_OWORD *)v13 + 3) = v102;
        *(_OWORD *)BOOL v13 = v100;
        *((_OWORD *)v13 + 1) = v101;
        uint64_t v103 = v13 + 64;
      }
      BOOL v13 = v103;
    }
  }
  while (v6 != v13);
  unint64_t v206 = (v9 - __src) >> 6;
  unint64_t v115 = 126 - 2 * __clz(v206);
  int64_t v116 = v9 - __src;
  if (v9 == __src) {
    uint64_t v117 = 0;
  }
  else {
    uint64_t v117 = v115;
  }
  unint64_t v118 = (v8 - v7) >> 6;
  unint64_t v119 = 126 - 2 * __clz(v118);
  if (v8 == v7) {
    uint64_t v120 = 0;
  }
  else {
    uint64_t v120 = v119;
  }
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((unint64_t)v7, (float *)v8, v120, 1);
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>((unint64_t)__src, (float *)v9, v117, 1);
  unint64_t v212 = v7;
  if (v118 <= v116 >> 6)
  {
    unint64_t v203 = (v8 - v7) >> 6;
    if (v8 == v7)
    {
      __pb = 0;
      float32x4_t v125 = 0;
      uint64_t v123 = (v9 - __src) >> 6;
    }
    else
    {
      uint64_t v123 = (v9 - __src) >> 6;
      if (v8 - v7 < 0) {
        goto LABEL_230;
      }
      float32x2_t v124 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v203);
      memmove(v124, v7, v8 - v7);
      __pb = v124;
      float32x4_t v125 = &v124[8 * v203];
    }
    for (uint64_t i = v123 - 1; v123 != 1; uint64_t i = v123 - 1)
    {
      int v141 = (float *)&__src[64 * v123];
      uint64_t v123 = i;
      uint64_t v142 = &__src[64 * i];
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (long long *)(v142 + 40), *(v141 - 32), *((float *)v142 + 1));
      int v143 = __pb;
      if (__pb == v125)
      {
LABEL_147:
        long long v144 = v217;
        long long v145 = v218;
        long long v146 = v220;
        *((_OWORD *)v141 - 6) = v219;
        *((_OWORD *)v141 - 5) = v146;
        *((_OWORD *)v141 - 8) = v144;
        *((_OWORD *)v141 - 7) = v145;
        size_t v147 = v9 - (char *)v141;
        if (v147) {
          memmove(v142, v141, v147);
        }
        float32x4_t v9 = &v142[v147];
      }
      else
      {
        while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v143 + 2))
        {
          v143 += 8;
          if (v143 == v125) {
            goto LABEL_147;
          }
        }
      }
    }
    if (__pb) {
      operator delete(__pb);
    }
    float32x2_t v7 = v212;
    size_t v148 = v9 - __src;
    unint64_t v149 = v203;
    if (v9 == __src)
    {
      __pc = 0;
      uint64_t v151 = 0;
    }
    else
    {
      if (v9 - __src < 0) {
        goto LABEL_230;
      }
      uint32x2_t v150 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v148 >> 6);
      memmove(v150, __src, v148);
      __pc = v150;
      uint64_t v151 = (float32x2_t *)((char *)v150 + v148);
    }
    unint64_t v160 = v203 - 1;
    if (v203 != 1)
    {
      do
      {
        float v161 = (float *)&v7[64 * v149];
        unint64_t v149 = v160;
        uint64_t v162 = &v7[64 * v160];
        re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (long long *)(v162 + 40), *(v161 - 32), *((float *)v162 + 1));
        uint64_t v163 = __pc;
        if (__pc == v151)
        {
LABEL_171:
          long long v164 = v217;
          long long v165 = v218;
          long long v166 = v220;
          *((_OWORD *)v161 - 6) = v219;
          *((_OWORD *)v161 - 5) = v166;
          *((_OWORD *)v161 - 8) = v164;
          *((_OWORD *)v161 - 7) = v165;
          size_t v167 = v8 - (char *)v161;
          if (v167) {
            memmove(v162, v161, v167);
          }
          float32x2_t v8 = &v162[v167];
        }
        else
        {
          while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v163 + 2))
          {
            v163 += 8;
            if (v163 == v151) {
              goto LABEL_171;
            }
          }
        }
        float32x2_t v7 = v212;
        unint64_t v160 = v149 - 1;
      }
      while (v149 != 1);
    }
  }
  else
  {
    if (v9 != __src)
    {
      if ((v116 & 0x8000000000000000) == 0)
      {
        float32x2_t v121 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v206);
        memmove(v121, __src, v116);
        __pa = v121;
        int v122 = &v121[8 * v206];
        goto LABEL_129;
      }
LABEL_230:
      abort();
    }
    __pa = 0;
    int v122 = 0;
LABEL_129:
    for (j = v118 - 1; v118 != 1; float32x2_t v7 = v212)
    {
      uint64_t v127 = v7;
      float32x2_t v128 = (float *)&v7[64 * v118];
      unint64_t v118 = j;
      BOOL v129 = &v127[64 * j];
      re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (long long *)(v129 + 40), *(v128 - 32), *((float *)v129 + 1));
      uint64_t v130 = __pa;
      if (__pa == v122)
      {
LABEL_133:
        long long v131 = v217;
        long long v132 = v218;
        long long v133 = v220;
        *((_OWORD *)v128 - 6) = v219;
        *((_OWORD *)v128 - 5) = v133;
        *((_OWORD *)v128 - 8) = v131;
        *((_OWORD *)v128 - 7) = v132;
        size_t v134 = v8 - (char *)v128;
        if (v134) {
          memmove(v129, v128, v134);
        }
        float32x2_t v8 = &v129[v134];
      }
      else
      {
        while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v130 + 2))
        {
          v130 += 8;
          if (v130 == v122) {
            goto LABEL_133;
          }
        }
      }
      unint64_t j = v118 - 1;
    }
    if (__pa) {
      operator delete(__pa);
    }
    size_t v136 = v8 - v7;
    BOOL v22 = v8 == v7;
    BOOL v135 = v8 - v7 < 0;
    uint64_t v137 = (v9 - __src) >> 6;
    if (v22)
    {
      __pc = 0;
      int32x2_t v139 = 0;
    }
    else
    {
      if (v135) {
        goto LABEL_230;
      }
      int32x2_t v138 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v136 >> 6);
      memmove(v138, v212, v136);
      __pc = v138;
      int32x2_t v139 = (float32x2_t *)((char *)v138 + v136);
    }
    uint64_t v152 = v206 - 1;
    if (v206 != 1)
    {
      do
      {
        float v153 = (float *)&__src[64 * v137];
        uint64_t v137 = v152;
        float v154 = &__src[64 * v152];
        re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier((float32x2_t *)&v217, (long long *)(v154 + 40), *(v153 - 32), *((float *)v154 + 1));
        uint64_t v155 = __pc;
        if (__pc == v139)
        {
LABEL_161:
          long long v156 = v217;
          long long v157 = v218;
          long long v158 = v220;
          *((_OWORD *)v153 - 6) = v219;
          *((_OWORD *)v153 - 5) = v158;
          *((_OWORD *)v153 - 8) = v156;
          *((_OWORD *)v153 - 7) = v157;
          size_t v159 = v9 - (char *)v153;
          if (v159) {
            memmove(v154, v153, v159);
          }
          float32x4_t v9 = &v154[v159];
        }
        else
        {
          while (!re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&v218, v155 + 2))
          {
            v155 += 8;
            if (v155 == v139) {
              goto LABEL_161;
            }
          }
        }
        uint64_t v152 = v137 - 1;
      }
      while (v137 != 1);
    }
    float32x2_t v7 = v212;
  }
  if (__pc) {
    operator delete(__pc);
  }
  long long v168 = (char **)a3;
  a3[1] = *a3;
  uint64_t v169 = a4;
  a4[1] = *a4;
  if ((unint64_t)(v8 - v7) >= 0x41)
  {
    unint64_t v170 = (v8 - v7) >> 6;
    unint64_t v171 = a3 + 2;
    if (v170 <= 2) {
      uint64_t v172 = 2;
    }
    else {
      uint64_t v172 = v170;
    }
    unint64_t v173 = (char *)a3[1];
    for (uint64_t k = 1; k != v172; ++k)
    {
      uint64_t v175 = &v7[64 * k];
      if ((unint64_t)v173 >= *v171)
      {
        float v177 = *v168;
        uint64_t v178 = (v173 - *v168) >> 2;
        unint64_t v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 62) {
          goto LABEL_230;
        }
        uint64_t v180 = *v171 - (void)v177;
        if (v180 >> 1 > v179) {
          unint64_t v179 = v180 >> 1;
        }
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v179;
        }
        if (v181)
        {
          unint64_t v182 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v171, v181);
          long long v168 = (char **)a3;
          unint64_t v183 = v182;
          float v177 = (char *)*a3;
          unint64_t v173 = (char *)a3[1];
        }
        else
        {
          unint64_t v183 = 0;
        }
        uint64_t v184 = &v183[4 * v178];
        *(_DWORD *)uint64_t v184 = *(_DWORD *)v175;
        int64_t v176 = v184 + 4;
        while (v173 != v177)
        {
          int v185 = *((_DWORD *)v173 - 1);
          v173 -= 4;
          *((_DWORD *)v184 - 1) = v185;
          v184 -= 4;
        }
        *long long v168 = v184;
        v168[1] = v176;
        v168[2] = &v183[4 * v181];
        if (v177)
        {
          operator delete(v177);
          long long v168 = (char **)a3;
        }
        uint64_t v169 = a4;
      }
      else
      {
        *(_DWORD *)unint64_t v173 = *(_DWORD *)v175;
        int64_t v176 = v173 + 4;
      }
      v168[1] = v176;
      unint64_t v173 = v176;
    }
  }
  if ((unint64_t)(v9 - __src) >= 0x41)
  {
    uint64_t v186 = v169 + 2;
    if ((unint64_t)((v9 - __src) >> 6) <= 2) {
      uint64_t v187 = 2;
    }
    else {
      uint64_t v187 = (v9 - __src) >> 6;
    }
    uint64_t v188 = v169[1];
    uint64_t v189 = 1;
    do
    {
      uint64_t v190 = &__src[64 * v189];
      if ((unint64_t)v188 >= *v186)
      {
        uint64_t v192 = *v169;
        uint64_t v193 = (v188 - *v169) >> 2;
        unint64_t v194 = v193 + 1;
        if ((unint64_t)(v193 + 1) >> 62) {
          goto LABEL_230;
        }
        uint64_t v195 = *v186 - (void)v192;
        if (v195 >> 1 > v194) {
          unint64_t v194 = v195 >> 1;
        }
        if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v196 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v196 = v194;
        }
        if (v196)
        {
          unint64_t v197 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v186, v196);
          uint64_t v169 = a4;
          uint64_t v198 = v197;
          uint64_t v192 = *a4;
          uint64_t v188 = a4[1];
        }
        else
        {
          uint64_t v198 = 0;
        }
        unint64_t v199 = &v198[4 * v193];
        *(_DWORD *)unint64_t v199 = *v190;
        uint64_t v191 = v199 + 4;
        while (v188 != v192)
        {
          int v200 = *((_DWORD *)v188 - 1);
          v188 -= 4;
          *((_DWORD *)v199 - 1) = v200;
          v199 -= 4;
        }
        *uint64_t v169 = v199;
        v169[1] = v191;
        v169[2] = &v198[4 * v196];
        if (v192)
        {
          operator delete(v192);
          uint64_t v169 = a4;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v188 = *v190;
        uint64_t v191 = v188 + 4;
      }
      v169[1] = v191;
      ++v189;
      uint64_t v188 = v191;
    }
    while (v189 != v187);
  }
  float32x2_t v6 = v13;
LABEL_223:
  if (__src) {
    operator delete(__src);
  }
  if (v7) {
    operator delete(v7);
  }
  if (v6) {
    operator delete(v6);
  }
}

float32x2_t *re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)const::SubBezier::SubBezier(float32x2_t *a1, long long *a2, float a3, float a4)
{
  a1->f32[0] = a3;
  a1->f32[1] = a4;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  long long v5 = *a2;
  a1[7] = (float32x2_t)a2[1];
  *(_OWORD *)a1[5].f32 = v5;
  re::pathprocessing::Bezier2::curveBetween(a1 + 5, a3, a4, (float32x2_t *)&v17);
  *(_OWORD *)a1[2].f32 = v17;
  a1[4] = v18;
  float32x2_t v6 = a1[3];
  float32x2_t v7 = vsub_f32(a1[2], v6);
  float32x2_t v8 = vmul_f32(v7, v7);
  v8.i32[0] = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
  v8.i32[0] = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).u32[0];
  float32x2_t v11 = vsub_f32(a1[4], v6);
  float32x2_t v12 = vmul_f32(v11, v11);
  float32x2_t v13 = vmul_n_f32(v7, v8.f32[0]);
  v8.i32[0] = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
  float32x2_t v14 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v14, v14)));
  a1[1].f32[0] = (float)(vaddv_f32(vmul_f32(v13, vmul_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v15, v15))).f32[0])))* 0.5)+ 0.5;
  return a1;
}

float32x2_t re::pathprocessing::Bezier2::tangentAt(float32x2_t *a1, int a2, float a3)
{
  BOOL isLine = re::pathprocessing::Bezier2::isLine(a1);
  float32x2_t v7 = *a1;
  if (isLine)
  {
    float32x2_t result = vsub_f32(a1[2], v7);
    if (a2) {
      return result;
    }
  }
  else
  {
    float32x2_t result = vadd_f32(vmul_n_f32(vsub_f32(a1[1], v7), (float)(1.0 - a3) + (float)(1.0 - a3)), vmul_n_f32(vsub_f32(a1[2], a1[1]), a3 + a3));
    if (a2) {
      return result;
    }
  }
  float32x2_t v9 = vmul_f32(result, result);
  v9.i32[0] = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1)).u32[0];
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v9.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v10, v10)));
  return vmul_n_f32(result, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.u32[0], vmul_f32(v11, v11))).f32[0]);
}

__n128 re::pathprocessing::Bezier2::split@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, __n128 **a3@<X8>)
{
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v23 = (__n128 *)operator new(0x18uLL);
    a3[1] = (__n128 *)((char *)v23 + 24);
    a3[2] = (__n128 *)((char *)v23 + 24);
    __n128 result = *a1;
    *uint64_t v23 = *a1;
    v23[1].n128_u64[0] = a1[1].n128_u64[0];
    *a3 = v23;
  }
  else
  {
    std::vector<std::vector<unsigned long>>::vector(a3, ((v5 - *a2) >> 2) + 1);
    uint64_t v8 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      float32x2_t v11 = *a3;
      float v12 = 0.0;
      result.n128_u32[0] = 1.0;
      do
      {
        float v13 = *(float *)(v8 + 4 * v10);
        float v14 = (float)(v13 - v12) / (float)(1.0 - v12);
        float32x2_t v15 = (float32x2_t)a1->n128_u64[0];
        float32x2_t v16 = (float32x2_t)a1[1].n128_u64[0];
        float32x2_t v17 = *(float32x2_t *)&a1->n128_i8[8];
        float32x2_t v18 = &v11->n128_u64[v9];
        *float32x2_t v18 = a1->n128_u64[0];
        float32x2_t v19 = vadd_f32(vmul_n_f32(v17, v14), vmul_n_f32(v15, 1.0 - v14));
        float32x2_t v20 = vadd_f32(vmul_n_f32(v16, v14), vmul_n_f32(v17, 1.0 - v14));
        float32x2_t v21 = vadd_f32(vmul_n_f32(v20, v14), vmul_n_f32(v19, 1.0 - v14));
        v18[1] = (unint64_t)v19;
        v18[2] = (unint64_t)v21;
        ++v10;
        BOOL v22 = &(*a3)->n128_u64[v9];
        v22[3] = (unint64_t)v21;
        v22[4] = (unint64_t)v20;
        v22[5] = (unint64_t)v16;
        float32x2_t v11 = *a3;
        a1 = (__n128 *)((char *)*a3 + 24 * v10);
        uint64_t v8 = *a2;
        v9 += 3;
        float v12 = v13;
      }
      while (v10 < (a2[1] - *a2) >> 2);
    }
  }
  return result;
}

uint64_t re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic(re::pathprocessing::Bezier2 *this, float a2)
{
  float v2 = *((float *)this + 5);
  float v3 = *((float *)this + 1);
  if (v2 >= v3) {
    float v4 = *((float *)this + 1);
  }
  else {
    float v4 = *((float *)this + 5);
  }
  if (v3 >= v2) {
    float v5 = *((float *)this + 1);
  }
  else {
    float v5 = *((float *)this + 5);
  }
  if (v4 > 0.0)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    if (v5 > 0.0)
    {
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)v14, 0.0, 0.0, v3 + *((float *)this + 3) * -2.0 + v2, *((float *)this + 3) - v3 + *((float *)this + 3) - v3, v3);
      if (v15)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 8 * v15;
        do
        {
          float v9 = *(double *)&v14[v7 + 5];
          uint64_t v10 = v7 + 1;
          v16[v7++] = v9;
          v8 -= 8;
        }
        while (v8);
        *(float *)&uint64_t v6 = v16[0];
        if (v10 == 2)
        {
          float v11 = vabds_f32(0.5, v16[0]);
          if (v11 > 1.0) {
            float v11 = 1.0;
          }
          float v12 = vabds_f32(0.5, v16[1]);
          if (v12 > 1.0) {
            float v12 = 1.0;
          }
          if (v11 >= v12) {
            return HIDWORD(*(void *)v16);
          }
        }
        else if (v10 != 1)
        {
          LODWORD(v6) = 0;
        }
      }
      else
      {
        LODWORD(v6) = 0;
      }
    }
  }
  return v6;
}

uint64_t re::pathprocessing::Bezier2::intersectLineSegment(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t result = geom_intersect_line_segment_quadratic_bezier_2f();
  if (result)
  {
    uint64_t v7 = result;
    *((void *)&__dst + 1) = result;
    size_t v8 = 4 * result;
    memcpy(&__dst, __src, v8);
    *a3 = __dst;
    *((void *)&__dst + 1) = v7;
    memcpy(&__dst, v10, v8);
    *a4 = __dst;
    return 2;
  }
  return result;
}

uint64_t re::pathprocessing::Bezier2::intersectRay(re::pathprocessing::Bezier2 *a1, float32x2_t *a2, float32x2_t *a3)
{
  if (re::pathprocessing::Bezier2::isPoint(a1)) {
    return *(void *)v76;
  }
  if (re::pathprocessing::Bezier2::isLine((float32x2_t *)a1))
  {
    float32x2_t v9 = *(float32x2_t *)((char *)a1 + 16);
    float32x2_t v10 = vsub_f32(v9, *(float32x2_t *)a1);
    float32x2_t v11 = *a3;
    LODWORD(v12) = HIDWORD(*(unint64_t *)a3);
    if (fabsf(vmlas_n_f32((float)-v10.f32[1] * COERCE_FLOAT(*a3), v12, v10.f32[0])) >= 0.0001)
    {
      int32x2_t v13 = (int32x2_t)vsub_f32(*(float32x2_t *)a1, *a2);
      int32x2_t v14 = (int32x2_t)vsub_f32(v9, *a2);
      float32x2_t v15 = vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32(v13, v14), -v12), (float32x2_t)vzip2_s32(v13, v14), v11.f32[0]);
      int32x2_t v16 = vcgt_f32((float32x2_t)vdup_n_s32(0x38D1B717u), vabs_f32(v15));
      if ((v16.i8[4] & 1) != 0
        || (v16.i8[0] & 1) != 0
        || (veor_s8((int8x8_t)vdup_lane_s32((int32x2_t)v15, 1), (int8x8_t)v15).u32[0] & 0x80000000) != 0)
      {
        float v17 = vdiv_f32(v15, vsub_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1))).f32[0];
        uint64_t v18 = *(void *)&vmvn_s8((int8x8_t)vcge_f32((float32x2_t)(*(void *)&v11 & 0x7FFFFFFF7FFFFFFFLL), (float32x2_t)vdup_lane_s32((int32x2_t)(*(void *)&v11 & 0x7FFFFFFF7FFFFFFFLL), 1))) & 1;
        float v19 = 1.0;
        if ((float)((float)((float)((float)(*((float *)a1 + v18 + 4) * v17)
                                   + (float)(*((float *)a1 + v18) * (float)(1.0 - v17)))
                           - a2->f32[v18])
                   / a3->f32[v18]) >= -0.0001)
        {
          if (v17 <= 1.0) {
            float v19 = v17;
          }
          if (v17 < 0.0) {
            float v19 = 0.0;
          }
          v76[0] = v19;
        }
      }
    }
    return *(void *)v76;
  }
  uint64_t v20 = 0;
  *(float32x2_t *)v8.f32 = *a2;
  float32x2_t v21 = *a3;
  float32x2_t v22 = vsub_f32(vadd_f32(*a3, *a2), *a2);
  *(float32x2_t *)v7.i8 = vmul_n_f32(v22, 1.0 / sqrtf(vaddv_f32(vmul_f32(v22, v22))));
  float32x4_t v23 = v8;
  v23.i32[0] = (__int32)*a2;
  float32x4_t v24 = vnegq_f32(v23);
  v24.i32[2] = 1.0;
  v25.i64[1] = 0;
  float32x4_t v27 = (float32x4_t)vtrn1q_s32((int32x4_t)0, v7);
  v25.i32[0] = v7.i32[0];
  v26.i32[3] = 0;
  long long __dst = xmmword_23435FD50;
  long long v81 = xmmword_23435FD60;
  float32x4_t v82 = v24;
  v27.i32[0] = v7.i32[1];
  do
  {
    float32x4_t v28 = *(float32x4_t *)((char *)&__dst + v20);
    v25.f32[1] = -*(float *)&v7.i32[1];
    int32x4_t v29 = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v28.f32[0]), v27, *(float32x2_t *)v28.f32, 1), (float32x4_t)xmmword_23435FD80, v28, 2);
    *(int32x4_t *)((char *)&__src + v2re::VariableStepTimer::setClock((uint64_t)this, 0) = v29;
    v20 += 16;
  }
  while (v20 != 48);
  float32x2_t v72 = *(float32x2_t *)v8.f32;
  uint64_t v30 = 0;
  float32x4_t v31 = (float32x4_t)__src;
  float32x4_t v32 = (float32x4_t)v84;
  v28.i64[0] = *(void *)a1;
  v29.i64[0] = *((void *)a1 + 1);
  v26.i64[0] = *((void *)a1 + 2);
  v28.i32[2] = 1.0;
  v29.i32[2] = 1.0;
  v26.i32[2] = 1.0;
  float32x4_t v33 = (float32x4_t)v85;
  long long __dst = (__int128)v28;
  long long v81 = (__int128)v29;
  float32x4_t v82 = v26;
  do
  {
    *(float32x4_t *)((char *)&__src + v3re::VariableStepTimer::setClock((uint64_t)this, 0) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(long long *)((char *)&__dst + v30))), v32, *(float32x2_t *)((char *)&__dst + v30), 1), v33, *(float32x4_t *)((char *)&__dst + v30), 2);
    v30 += 16;
  }
  while (v30 != 48);
  float32x2_t v77 = vdiv_f32(*(float32x2_t *)__src.i8, (float32x2_t)vdup_laneq_s32(__src, 2));
  float32x2_t v78 = vdiv_f32(*(float32x2_t *)v84.i8, (float32x2_t)vdup_laneq_s32(v84, 2));
  float32x2_t v73 = v78;
  float32x2_t v74 = v77;
  float32x2_t v75 = vdiv_f32(*(float32x2_t *)v85.i8, (float32x2_t)vdup_laneq_s32(v85, 2));
  float32x2_t v79 = v75;
  if (re::pathprocessing::Bezier2::isLine(&v77))
  {
    if (v74.f32[1] == 0.0 && v75.f32[1] == 0.0) {
      return *(void *)v76;
    }
    float32x2_t v36 = vsub_f32(v75, v74);
    float32x2_t v37 = (float32x2_t)vdup_lane_s32((int32x2_t)v36, 0);
    v37.f32[0] = v74.f32[0] + 1.0;
    v36.i32[0] = v74.i32[1];
    float32x2_t v38 = vmla_f32(vmul_f32(v37, (float32x2_t)0x80000000), (float32x2_t)0xC000000040000000, v36);
    float v39 = vdiv_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).f32[0];
    if (v39 <= 0.0 || v39 >= 1.0) {
      return *(void *)v76;
    }
    *(float *)&long long __dst = v39;
    __src.i64[0] = __dst;
    __src.i64[1] = 1;
    int32x2_t v41 = &__src.i8[4];
    float32x2_t v42 = v72;
    goto LABEL_47;
  }
  _V6.S[1] = v73.i32[1];
  _S2 = -2.0;
  __asm { FMLA            S0, S2, V6.S[1] }
  *(float *)v34.i32 = (float)(v74.f32[1] - v73.f32[1]) / (float)(_S0 + v75.f32[1]);
  if (*(float *)v34.i32 > 0.0 && *(float *)v34.i32 < 1.0)
  {
    *(float *)v35.i32 = 1.0 - *(float *)v34.i32;
    float32x2_t v53 = (float32x2_t)vdup_lane_s32(v35, 0);
    float32x2_t v54 = (float32x2_t)vdup_lane_s32(v34, 0);
    float v70 = 1.0 - *(float *)v34.i32;
    float v71 = (float)(v74.f32[1] - v73.f32[1]) / (float)(_S0 + v75.f32[1]);
    float32x2_t v55 = vadd_f32(vmul_n_f32(v75, *(float *)v34.i32 * *(float *)v34.i32), vadd_f32(vmul_n_f32(v74, *(float *)v35.i32 * *(float *)v35.i32), vmul_n_f32(v73, (float)(*(float *)v34.i32 + *(float *)v34.i32) * (float)(1.0 - *(float *)v34.i32))));
    *(float32x2_t *)__src.i8 = v74;
    __src.u64[1] = (unint64_t)vadd_f32(vmul_n_f32(v73, *(float *)v34.i32), vmul_n_f32(v74, 1.0 - *(float *)v34.i32));
    *(float32x2_t *)v84.i8 = v55;
    uint64_t v86 = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&__src, *(float *)&__src.i32[2]);
    uint64_t v87 = v56;
    if (v56)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 4 * v56;
      do
      {
        uint64_t v59 = v57 + 1;
        *((float *)&__dst + v57) = v71 * *((float *)&v86 + v57);
        ++v57;
        v58 -= 4;
      }
      while (v58);
    }
    else
    {
      uint64_t v59 = 0;
    }
    *(float32x2_t *)__src.i8 = v55;
    __src.u64[1] = (unint64_t)vadd_f32(vmul_f32(v75, v54), vmul_f32(v73, v53));
    *(float32x2_t *)v84.i8 = v75;
    uint64_t v86 = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&__src, *(float *)&__src.i32[2]);
    uint64_t v87 = v60;
    if (v60)
    {
      uint64_t v61 = 4 * v60;
      unint64_t v62 = (float *)&v86;
      float32x2_t v42 = v72;
      do
      {
        float v63 = *v62++;
        uint64_t v52 = v59 + 1;
        *((float *)&__dst + v59++) = v71 + (float)(v63 * v70);
        v61 -= 4;
      }
      while (v61);
      goto LABEL_45;
    }
    uint64_t v52 = v59;
  }
  else
  {
    __src.i64[0] = re::pathprocessing::Bezier2::intersectAxisAlignedLineMonotonic((re::pathprocessing::Bezier2 *)&v77, 1.0);
    __src.i64[1] = v50;
    if (v50)
    {
      uint64_t v51 = (v50 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      memcpy(&__dst, &__src, 4 * (v50 - 1) + 4);
      uint64_t v52 = v51 + 1;
    }
    else
    {
      uint64_t v52 = 0;
    }
  }
  float32x2_t v42 = v72;
LABEL_45:
  __src.i64[0] = __dst;
  __src.i64[1] = v52;
  if (!v52) {
    return *(void *)v76;
  }
  int32x2_t v41 = &__src.i8[4 * v52];
LABEL_47:
  uint64_t v64 = 0;
  float32x2_t v65 = *(float32x2_t *)a1;
  float32x2_t v66 = *(float32x2_t *)((char *)a1 + 8);
  p_src = (float *)&__src;
  float32x2_t v68 = *(float32x2_t *)((char *)a1 + 16);
  do
  {
    float v69 = *p_src;
    if (vaddv_f32(vmul_f32(v21, vsub_f32(vadd_f32(vmul_n_f32(v68, v69 * v69), vadd_f32(vmul_n_f32(v65, (float)(1.0 - *p_src) * (float)(1.0 - *p_src)), vmul_n_f32(v66, (float)(v69 + v69) * (float)(1.0 - *p_src)))), v42))) > 0.0)v76[v64++] = v69; {
    ++p_src;
    }
  }
  while (p_src != (float *)v41);
  return *(void *)v76;
}

uint64_t re::pathprocessing::Bezier2::intersectCurveWithCurve(float32x2_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x2_t v10 = vsub_f32(a2[1], *a2);
  float32x2_t v11 = vsub_f32(a2[2], *a2);
  float v12 = 1.0 / vmlas_n_f32((float)-v10.f32[1] * v11.f32[0], v11.f32[1], v10.f32[0]);
  float v13 = 0.5 / vaddv_f32(vmul_f32(v10, v10));
  v11.f32[0] = 1.0 - (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v11, 1), v10.f32[0], v11.f32[0]) * v13);
  float32x2_t v14 = vsub_f32(*a1, *a2);
  float v15 = v12 * vmlas_n_f32((float)-v10.f32[1] * v14.f32[0], v14.f32[1], v10.f32[0]);
  float v16 = (float)(v11.f32[0] * v15)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v14, 1), v10.f32[0], v14.f32[0]) * v13);
  float32x2_t v17 = vsub_f32(a1[1], *a2);
  float v18 = v12 * vmlas_n_f32((float)-v10.f32[1] * v17.f32[0], v17.f32[1], v10.f32[0]);
  float v19 = (float)(v11.f32[0] * v18)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v17, 1), v10.f32[0], v17.f32[0]) * v13);
  float32x2_t v20 = vsub_f32(a1[2], *a2);
  float v21 = v12 * vmlas_n_f32((float)-v10.f32[1] * v20.f32[0], v20.f32[1], v10.f32[0]);
  float v22 = (float)(v11.f32[0] * v21)
      + (float)(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v20, 1), v10.f32[0], v20.f32[0]) * v13);
  double v23 = v16;
  double v24 = v15;
  double v25 = v19;
  double v26 = v18;
  double v27 = v21;
  if (fabs(v16 + v19 * -2.0 + v22) < 0.005
    && ((double v28 = v25 + v25 + v23 * -2.0, v29 = v24 + v26 * -2.0 + v27,
                                       double v30 = v28 * v28,
                                       double v31 = v29 / (v28 * v28),
                                       v31 == 1.0)
     || fabs(v31 + -1.0) <= 0.005)
    && ((double v32 = v26 + v26 + v24 * -2.0, v33 = (v29 + v29) * v23 / v30, v33 - v32 / v28 == 0.0)
     || vabdd_f64(v33, v32 / v28) <= 0.005)
    && ((double v34 = v23 * v23 * v29 / v30 - v32 * v23 / v28 + v24, v34 == 0.0) || fabs(v34) <= 0.005))
  {
    uint64_t v54 = 0;
    uint64_t v58 = 0;
    uint64_t result = re::pathprocessing::LineSegment::rangeOverlaps((uint64_t)&v53, (uint64_t)v57, v16, v22, 0.0, 1.0);
    uint64_t v46 = v54;
    if (v54)
    {
      double v47 = (int *)v57;
      unint64_t v48 = (int *)&v53;
      do
      {
        int v49 = *v48++;
        uint64_t v50 = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v50 + 1;
        *(_DWORD *)(a3 + 4 * v5re::VariableStepTimer::setClock((uint64_t)this, 0) = v49;
        int v51 = *v47++;
        uint64_t v52 = *(void *)(a4 + 8);
        *(void *)(a4 + 8) = v52 + 1;
        *(_DWORD *)(a4 + 4 * v52) = v51;
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v53, v23 * 4.0 * v25 - v23 * v23 + v23 * -2.0 * v22 + v25 * -4.0 * v25 + v25 * 4.0 * v22 - v22 * v22, v23 * -12.0 * v25 + v23 * 4.0 * v23 + v22 * 4.0 * v23 + v25 * 8.0 * v25 + v22 * -4.0 * v25, v23 * 12.0 * v25 + v23 * -6.0 * v23 + v22 * -2.0 * v23 + v25 * -4.0 * v25 + v24 + v26 * -2.0 + v27, v25 * -4.0 * v23 + v23 * 4.0 * v23 + v24 * -2.0 + v26 * 2.0, v24 - v23 * v23);
    if (v56)
    {
      uint64_t result = 0;
      float32x2_t v36 = (double *)&v55;
      uint64_t v37 = 8 * v56;
      do
      {
        float v38 = *v36;
        if (fabsf(v38) >= 0.0001
          || (uint32x2_t v39 = (uint32x2_t)vceq_f32(a2[2], *a1), (vpmin_u32(v39, v39).u32[0] & 0x80000000) == 0))
        {
          if (v38 != 1.0 && fabsf(v38 + -1.0) > 0.0001
            || (uint32x2_t v40 = (uint32x2_t)vceq_f32(a1[2], *a2), (vpmin_u32(v40, v40).u32[0] & 0x80000000) == 0))
          {
            float v41 = (float)(v22 * (float)(v38 * v38))
                + (float)((float)(v16 * (float)((float)(1.0 - v38) * (float)(1.0 - v38)))
                        + (float)(v19 * (float)((float)(v38 + v38) * (float)(1.0 - v38))));
            if (a5 == 1
              || (v38 > 0.0 ? (BOOL v44 = v38 < 1.0) : (BOOL v44 = 0), v44 && (v41 > 0.0 ? (v45 = v41 < 1.0) : (v45 = 0), v45)))
            {
              uint64_t v42 = *(void *)(a3 + 8);
              *(void *)(a3 + 8) = v42 + 1;
              *(float *)(a3 + 4 * v42) = v38;
              uint64_t v43 = *(void *)(a4 + 8);
              *(void *)(a4 + 8) = v43 + 1;
              *(float *)(a4 + 4 * v43) = v41;
              uint64_t result = 2;
            }
          }
        }
        ++v36;
        v37 -= 8;
      }
      while (v37);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::pathprocessing::Polynomial::setCoefficients(re::pathprocessing::Polynomial *this, double a2, double a3, double a4, double a5, double a6)
{
  *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  *(double *)this = a6;
  *((double *)this + 1) = a5;
  *((double *)this + 2) = a4;
  *((double *)this + 3) = a3;
  *((double *)this + 4) = a2;
  uint64_t v7 = 4;
  while (fabs(*((double *)this + v7)) < 0.00001)
  {
    *((void *)this + v7--) = 0;
    if (v7 == -1)
    {
      *((_DWORD *)this + 18) = 0;
      return;
    }
  }
  *((_DWORD *)this + 18) = v7;
  switch((int)v7)
  {
    case 1:
      double v8 = *((double *)this + 1);
      if (v8 != 0.0)
      {
        double v9 = -*(double *)this / v8;
        *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 1;
        *((double *)this + 5) = v9;
      }
      return;
    case 2:
      double v24 = *((double *)this + 2);
      double v25 = *((double *)this + 1) / v24;
      double v26 = *(double *)this / v24 * -4.0 + v25 * v25;
      if (v26 > 0.0)
      {
        double v27 = sqrt(v26);
        *((double *)this + 5) = (v27 - v25) * 0.5;
        double v21 = (-v25 - v27) * 0.5;
        int v22 = 2;
        uint64_t v23 = 1;
        goto LABEL_38;
      }
      if (v26 == 0.0)
      {
        uint64_t v23 = 0;
        double v21 = v25 * -0.5;
        goto LABEL_37;
      }
      return;
    case 3:
      double v10 = *((double *)this + 3);
      double v11 = *((double *)this + 2) / v10;
      double v12 = *((double *)this + 1) / v10;
      double v13 = v12 + v11 * v11 / -3.0;
      double v14 = *(double *)this / v10 + v11 * (v12 * -9.0 + (v11 + v11) * v11) / 27.0;
      double v15 = v13 * (v13 * v13);
      double v16 = v15 * 4.0 / 27.0 + v14 * v14;
      double v17 = v11 / -3.0;
      if (v16 >= 0.0)
      {
        double v48 = sqrt(v16);
        long double v49 = (-v14 - v48) * 0.5;
        double v50 = cbrt((v48 - v14) * 0.5);
        long double v51 = cbrt(v49);
        uint64_t v23 = 0;
        double v21 = v17 + v50 + v51;
LABEL_37:
        int v22 = 1;
      }
      else
      {
        double v18 = sqrt(v13 / -3.0);
        long double v19 = acos(v14 * sqrt(-27.0 / v15) * -0.5);
        __double2 v20 = __sincos_stret(v19 / 3.0);
        *((double *)this + 5) = v17 + v18 * (v20.__cosval + v20.__cosval);
        *((double *)this + 6) = v17 - v18 * (v20.__cosval + v20.__sinval * 1.73205081);
        double v21 = v17 + v18 * (v20.__sinval * 1.73205081 - v20.__cosval);
        int v22 = 3;
        uint64_t v23 = 2;
      }
LABEL_38:
      *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v22;
      *((double *)this + v23 + 5) = v21;
      return;
    case 4:
      double v28 = *((double *)this + 4);
      double v29 = *((double *)this + 3) / v28;
      double v30 = *((double *)this + 2) / v28;
      double v31 = *((double *)this + 1) / v28;
      double v32 = *(double *)this / v28;
      double v33 = v32 * -4.0;
      re::pathprocessing::Polynomial::setCoefficients((re::pathprocessing::Polynomial *)&v59, 0.0, 1.0, -v30, v32 * -4.0 + v29 * v31, v30 * 4.0 * v32 + -(v29 * v29) * v32 - v31 * v31);
      double v34 = v29 * v29 * 0.25 - v30 + v60;
      if (fabs(v34) <= 0.00001 || v34 == 0.0) {
        double v34 = 0.0;
      }
      if (v34 <= 0.0)
      {
        if (v34 >= 0.0)
        {
          double v52 = v33 + v60 * v60;
          if (v52 == 0.0 || fabs(v52) <= 0.00001)
          {
            if (v52 < 0.0) {
              double v52 = 0.0;
            }
            double v53 = sqrt(v52);
            double v54 = v53 + v53;
            double v55 = v29 * (v29 * 3.0) * 0.25 + v30 * -2.0;
            if (v55 + v54 > 0.00001)
            {
              double v56 = sqrt(v55 + v54) * 0.5;
              uint64_t v57 = *((unsigned int *)this + 19);
              *((double *)this + v57 + 5) = v29 * -0.25 + v56;
              *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v57 + 2;
              *((double *)this + (v57 + 1) + 5) = v29 * -0.25 - v56;
            }
            double v58 = v55 - v54;
            if (v58 > 0.00001)
            {
              double v47 = sqrt(v58) * 0.5 + v29 * -0.25;
              uint64_t v46 = *((unsigned int *)this + 19);
              *((double *)this + v46 + 5) = v47;
              goto LABEL_33;
            }
          }
        }
      }
      else
      {
        double v36 = sqrt(v34);
        double v37 = v29 * (v29 * 3.0) * 0.25 - v36 * v36 + v30 * -2.0;
        double v38 = (v31 * -8.0 + v29 * 4.0 * v30 - v29 * v29 * v29) / (v36 * 4.0);
        double v39 = v37 + v38;
        if (fabs(v37 + v38) <= 0.00001 || v39 == 0.0) {
          double v39 = 0.0;
        }
        if (vabdd_f64(v37, v38) <= 0.00001 || v37 - v38 == 0.0) {
          double v42 = 0.0;
        }
        else {
          double v42 = v37 - v38;
        }
        if (v39 >= 0.0)
        {
          double v43 = sqrt(v39);
          uint64_t v44 = *((unsigned int *)this + 19);
          *((double *)this + v44 + 5) = v29 * -0.25 + (v36 + v43) * 0.5;
          *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v44 + 2;
          *((double *)this + (v44 + 1) + 5) = v29 * -0.25 + (v36 - v43) * 0.5;
        }
        if (v42 >= 0.0)
        {
          double v45 = sqrt(v42);
          uint64_t v46 = *((unsigned int *)this + 19);
          *((double *)this + v46 + 5) = v29 * -0.25 + (v45 - v36) * 0.5;
          double v47 = v29 * -0.25 - (v36 + v45) * 0.5;
LABEL_33:
          *((_DWORD *)this + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v46 + 2;
          *((double *)this + (v46 + 1) + 5) = v47;
        }
      }
      return;
    default:
      return;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 6;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(a2 - 14) < *(float *)(v10 + 8))
                {
                  long long v167 = *(_OWORD *)(v10 + 32);
                  long long v176 = *(_OWORD *)(v10 + 48);
                  long long v148 = *(_OWORD *)v10;
                  long long v157 = *(_OWORD *)(v10 + 16);
                  long long v54 = *((_OWORD *)a2 - 4);
                  long long v55 = *((_OWORD *)a2 - 3);
                  long long v56 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)(v10 + 32) = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v56;
                  *(_OWORD *)unint64_t v10 = v54;
                  *(_OWORD *)(v10 + 16) = v55;
                  *((_OWORD *)a2 - 2) = v167;
                  *((_OWORD *)a2 - 1) = v176;
                  *((_OWORD *)a2 - 4) = v148;
                  *((_OWORD *)a2 - 3) = v157;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), a2 - 16);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)a2 - 4);
                break;
              case 5uLL:
                uint64_t v57 = (long long *)(v10 + 64);
                double v58 = (long long *)(v10 + 128);
                uint64_t v59 = (long long *)(v10 + 192);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)(v10 + 192));
                if (*(a2 - 14) < *(float *)(v10 + 200))
                {
                  long long v60 = *v59;
                  long long v158 = *(_OWORD *)(v10 + 208);
                  long long v61 = *(_OWORD *)(v10 + 224);
                  long long v177 = *(_OWORD *)(v10 + 240);
                  long long v63 = *((_OWORD *)a2 - 2);
                  long long v62 = *((_OWORD *)a2 - 1);
                  long long v64 = *((_OWORD *)a2 - 3);
                  *uint64_t v59 = *((_OWORD *)a2 - 4);
                  *(_OWORD *)(v10 + 208) = v64;
                  *(_OWORD *)(v10 + 224) = v63;
                  *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v62;
                  *((_OWORD *)a2 - 2) = v61;
                  *((_OWORD *)a2 - 1) = v177;
                  *((_OWORD *)a2 - 4) = v60;
                  *((_OWORD *)a2 - 3) = v158;
                  if (*(float *)(v10 + 200) < *(float *)(v10 + 136))
                  {
                    long long v66 = *(_OWORD *)(v10 + 160);
                    long long v65 = *(_OWORD *)(v10 + 176);
                    long long v68 = *v58;
                    long long v67 = *(_OWORD *)(v10 + 144);
                    long long v69 = *(_OWORD *)(v10 + 208);
                    *double v58 = *v59;
                    *(_OWORD *)(v10 + 144) = v69;
                    long long v70 = *(_OWORD *)(v10 + 240);
                    *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(v10 + 224);
                    *(_OWORD *)(v10 + 176) = v70;
                    *uint64_t v59 = v68;
                    *(_OWORD *)(v10 + 208) = v67;
                    *(_OWORD *)(v10 + 224) = v66;
                    *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v65;
                    if (*(float *)(v10 + 136) < *(float *)(v10 + 72))
                    {
                      long long v72 = *(_OWORD *)(v10 + 96);
                      long long v71 = *(_OWORD *)(v10 + 112);
                      long long v74 = *v57;
                      long long v73 = *(_OWORD *)(v10 + 80);
                      long long v75 = *(_OWORD *)(v10 + 144);
                      *uint64_t v57 = *v58;
                      *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v75;
                      long long v76 = *(_OWORD *)(v10 + 176);
                      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 160);
                      *(_OWORD *)(v10 + 112) = v76;
                      *double v58 = v74;
                      *(_OWORD *)(v10 + 144) = v73;
                      *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v72;
                      *(_OWORD *)(v10 + 176) = v71;
                      if (*(float *)(v10 + 72) < *(float *)(v10 + 8))
                      {
                        long long v168 = *(_OWORD *)(v10 + 32);
                        long long v178 = *(_OWORD *)(v10 + 48);
                        long long v149 = *(_OWORD *)v10;
                        long long v159 = *(_OWORD *)(v10 + 16);
                        long long v77 = *(_OWORD *)(v10 + 80);
                        *(_OWORD *)unint64_t v10 = *v57;
                        *(_OWORD *)(v10 + 16) = v77;
                        long long v78 = *(_OWORD *)(v10 + 112);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 96);
                        *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v78;
                        *(_OWORD *)(v10 + 96) = v168;
                        *(_OWORD *)(v10 + 112) = v178;
                        *uint64_t v57 = v149;
                        *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v159;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1535)
          {
            float32x2_t v79 = (float *)(v10 + 64);
            BOOL v81 = (float *)v10 == a2 || v79 == a2;
            if (a4)
            {
              if (!v81)
              {
                uint64_t v82 = 0;
                unint64_t v83 = v10;
                do
                {
                  int32x4_t v84 = v79;
                  float v85 = *(float *)(v83 + 72);
                  if (v85 < *(float *)(v83 + 8))
                  {
                    uint64_t v86 = *(void *)v79;
                    long long v150 = *(_OWORD *)(v83 + 76);
                    long long v160 = *(_OWORD *)(v83 + 92);
                    long long v169 = *(_OWORD *)(v83 + 108);
                    int v179 = *(_DWORD *)(v83 + 124);
                    uint64_t v87 = v82;
                    while (1)
                    {
                      unint64_t v88 = (float *)(v10 + v87);
                      long long v89 = *(_OWORD *)(v10 + v87 + 16);
                      *((_OWORD *)v88 + 4) = *(_OWORD *)(v10 + v87);
                      *((_OWORD *)v88 + 5) = v89;
                      long long v90 = *(_OWORD *)(v10 + v87 + 48);
                      *((_OWORD *)v88 + 6) = *(_OWORD *)(v10 + v87 + 32);
                      *((_OWORD *)v88 + 7) = v90;
                      if (!v87) {
                        break;
                      }
                      v87 -= 64;
                      if (v85 >= *(v88 - 14))
                      {
                        uint64_t v91 = v10 + v87 + 64;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v91 = v10;
LABEL_83:
                    *(void *)uint64_t v91 = v86;
                    *(float *)(v91 + 8) = v85;
                    *(_DWORD *)(v91 + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v179;
                    *(_OWORD *)(v91 + 44) = v169;
                    *(_OWORD *)(v91 + 28) = v160;
                    *(_OWORD *)(v91 + 12) = v150;
                  }
                  float32x2_t v79 = v84 + 16;
                  v82 += 64;
                  unint64_t v83 = (unint64_t)v84;
                }
                while (v84 + 16 != a2);
              }
            }
            else if (!v81)
            {
              do
              {
                unint64_t v127 = (unint64_t)v79;
                float v128 = *(float *)(a1 + 72);
                if (v128 < *(float *)(a1 + 8))
                {
                  uint64_t v129 = *(void *)v79;
                  long long v153 = *(_OWORD *)(a1 + 76);
                  long long v163 = *(_OWORD *)(a1 + 92);
                  long long v172 = *(_OWORD *)(a1 + 108);
                  int v182 = *(_DWORD *)(a1 + 124);
                  do
                  {
                    long long v130 = *((_OWORD *)v79 - 3);
                    *(_OWORD *)float32x2_t v79 = *((_OWORD *)v79 - 4);
                    *((_OWORD *)v79 + 1) = v130;
                    long long v131 = *((_OWORD *)v79 - 1);
                    *((_OWORD *)v79 + 2) = *((_OWORD *)v79 - 2);
                    *((_OWORD *)v79 + 3) = v131;
                    float v132 = *(v79 - 30);
                    v79 -= 16;
                  }
                  while (v128 < v132);
                  *(void *)float32x2_t v79 = v129;
                  v79[2] = v128;
                  *((_DWORD *)v79 + 15) = v182;
                  *(_OWORD *)(v79 + 11) = v172;
                  *(_OWORD *)(v79 + 7) = v163;
                  *(_OWORD *)(v79 + 3) = v153;
                }
                float32x2_t v79 = (float *)(v127 + 64);
                a1 = v127;
              }
              while ((float *)(v127 + 64) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v92 = (v12 - 2) >> 1;
              int64_t v93 = v92;
              do
              {
                int64_t v94 = v93;
                if (v92 >= v93)
                {
                  uint64_t v95 = (2 * v93) | 1;
                  unint64_t v96 = v10 + (v95 << 6);
                  if (2 * v94 + 2 < (uint64_t)v12 && *(float *)(v96 + 8) < *(float *)(v96 + 72))
                  {
                    v96 += 64;
                    uint64_t v95 = 2 * v94 + 2;
                  }
                  float v97 = *(float *)(v10 + (v94 << 6) + 8);
                  if (*(float *)(v96 + 8) >= v97)
                  {
                    unint64_t v98 = v10 + (v94 << 6);
                    uint64_t v99 = *(void *)v98;
                    int v180 = *(_DWORD *)(v98 + 60);
                    long long v161 = *(_OWORD *)(v98 + 28);
                    long long v170 = *(_OWORD *)(v98 + 44);
                    long long v151 = *(_OWORD *)(v98 + 12);
                    do
                    {
                      long long v100 = (_OWORD *)v98;
                      unint64_t v98 = v96;
                      long long v101 = *(_OWORD *)v96;
                      long long v102 = *(_OWORD *)(v96 + 16);
                      long long v103 = *(_OWORD *)(v96 + 48);
                      v100[2] = *(_OWORD *)(v96 + 32);
                      v100[3] = v103;
                      *long long v100 = v101;
                      v100[1] = v102;
                      if (v92 < v95) {
                        break;
                      }
                      uint64_t v104 = 2 * v95;
                      uint64_t v95 = (2 * v95) | 1;
                      unint64_t v96 = v10 + (v95 << 6);
                      uint64_t v105 = v104 + 2;
                      if (v105 < (uint64_t)v12 && *(float *)(v96 + 8) < *(float *)(v96 + 72))
                      {
                        v96 += 64;
                        uint64_t v95 = v105;
                      }
                    }
                    while (*(float *)(v96 + 8) >= v97);
                    *(void *)unint64_t v98 = v99;
                    *(float *)(v98 + 8) = v97;
                    *(_DWORD *)(v98 + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v180;
                    *(_OWORD *)(v98 + 44) = v170;
                    *(_OWORD *)(v98 + 28) = v161;
                    *(_OWORD *)(v98 + 12) = v151;
                  }
                }
                int64_t v93 = v94 - 1;
              }
              while (v94);
              uint64_t v106 = (unint64_t)v11 >> 6;
              do
              {
                uint64_t v107 = 0;
                long long v171 = *(_OWORD *)(v10 + 32);
                long long v181 = *(_OWORD *)(v10 + 48);
                long long v152 = *(_OWORD *)v10;
                long long v162 = *(_OWORD *)(v10 + 16);
                unint64_t v108 = v10;
                do
                {
                  long long v109 = (_OWORD *)v108;
                  v108 += (v107 + 1) << 6;
                  uint64_t v110 = 2 * v107;
                  uint64_t v107 = (2 * v107) | 1;
                  uint64_t v111 = v110 + 2;
                  if (v111 < v106 && *(float *)(v108 + 8) < *(float *)(v108 + 72))
                  {
                    v108 += 64;
                    uint64_t v107 = v111;
                  }
                  long long v112 = *(_OWORD *)v108;
                  long long v113 = *(_OWORD *)(v108 + 16);
                  long long v114 = *(_OWORD *)(v108 + 48);
                  v109[2] = *(_OWORD *)(v108 + 32);
                  v109[3] = v114;
                  *long long v109 = v112;
                  v109[1] = v113;
                }
                while (v107 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                a2 -= 16;
                if ((float *)v108 == a2)
                {
                  *(_OWORD *)(v108 + 32) = v171;
                  *(_OWORD *)(v108 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v181;
                  *(_OWORD *)unint64_t v108 = v152;
                  *(_OWORD *)(v108 + 16) = v162;
                }
                else
                {
                  long long v115 = *(_OWORD *)a2;
                  long long v116 = *((_OWORD *)a2 + 1);
                  long long v117 = *((_OWORD *)a2 + 3);
                  *(_OWORD *)(v108 + 32) = *((_OWORD *)a2 + 2);
                  *(_OWORD *)(v108 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v117;
                  *(_OWORD *)unint64_t v108 = v115;
                  *(_OWORD *)(v108 + 16) = v116;
                  *((_OWORD *)a2 + 2) = v171;
                  *((_OWORD *)a2 + 3) = v181;
                  *(_OWORD *)a2 = v152;
                  *((_OWORD *)a2 + 1) = v162;
                  uint64_t v118 = v108 - v10 + 64;
                  if (v118 >= 65)
                  {
                    unint64_t v119 = (((unint64_t)v118 >> 6) - 2) >> 1;
                    float v120 = *(float *)(v108 + 8);
                    if (*(float *)(v10 + (v119 << 6) + 8) < v120)
                    {
                      uint64_t v121 = *(void *)v108;
                      int v144 = *(_DWORD *)(v108 + 60);
                      long long v138 = *(_OWORD *)(v108 + 28);
                      long long v141 = *(_OWORD *)(v108 + 44);
                      long long v135 = *(_OWORD *)(v108 + 12);
                      do
                      {
                        int v122 = (_OWORD *)v108;
                        unint64_t v108 = v10 + (v119 << 6);
                        long long v123 = *(_OWORD *)v108;
                        long long v124 = *(_OWORD *)(v108 + 16);
                        long long v125 = *(_OWORD *)(v108 + 48);
                        v122[2] = *(_OWORD *)(v108 + 32);
                        v122[3] = v125;
                        *int v122 = v123;
                        v122[1] = v124;
                        if (!v119) {
                          break;
                        }
                        unint64_t v119 = (v119 - 1) >> 1;
                      }
                      while (*(float *)(v10 + (v119 << 6) + 8) < v120);
                      *(void *)unint64_t v108 = v121;
                      *(float *)(v108 + 8) = v120;
                      *(_DWORD *)(v108 + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v144;
                      *(_OWORD *)(v108 + 44) = v141;
                      *(_OWORD *)(v108 + 28) = v138;
                      *(_OWORD *)(v108 + 12) = v135;
                    }
                  }
                }
              }
              while (v106-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + (v12 >> 1 << 6);
          if ((unint64_t)v11 > 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v12 >> 1 << 6)), a2 - 16);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v14 - 64), a2 - 32);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v13 << 6)), a2 - 48);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v14 - 64), (float *)v14, (float *)(a1 + 64 + (v13 << 6)));
            long long v164 = *(_OWORD *)(a1 + 32);
            long long v173 = *(_OWORD *)(a1 + 48);
            long long v145 = *(_OWORD *)a1;
            long long v154 = *(_OWORD *)(a1 + 16);
            long long v15 = *(_OWORD *)v14;
            long long v16 = *(_OWORD *)(v14 + 16);
            long long v17 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v14 + 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v17;
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v16;
            *(_OWORD *)(v14 + 32) = v164;
            *(_OWORD *)(v14 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v173;
            *(_OWORD *)unint64_t v14 = v145;
            *(_OWORD *)(v14 + 16) = v154;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v12 >> 1 << 6)), (float *)a1, a2 - 16);
          }
          --a3;
          if (a4) {
            break;
          }
          float v18 = *(float *)(a1 + 8);
          if (*(float *)(a1 - 56) < v18) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          int v143 = *(_DWORD *)(a1 + 60);
          long long v137 = *(_OWORD *)(a1 + 28);
          long long v140 = *(_OWORD *)(a1 + 44);
          long long v134 = *(_OWORD *)(a1 + 12);
          if (v18 >= *(a2 - 14))
          {
            unint64_t v41 = a1 + 64;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              float v42 = *(float *)(v41 + 8);
              v41 += 64;
            }
            while (v18 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 64;
              float v40 = *(float *)(v39 + 72);
              v39 += 64;
            }
            while (v18 >= v40);
          }
          double v43 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v44 = a2;
            do
            {
              double v43 = v44 - 16;
              float v45 = *(v44 - 14);
              v44 -= 16;
            }
            while (v18 < v45);
          }
          while (v10 < (unint64_t)v43)
          {
            long long v166 = *(_OWORD *)(v10 + 32);
            long long v175 = *(_OWORD *)(v10 + 48);
            long long v147 = *(_OWORD *)v10;
            long long v156 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *((_OWORD *)v43 + 1);
            long long v48 = *((_OWORD *)v43 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v43 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v48;
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 16) = v47;
            *((_OWORD *)v43 + 2) = v166;
            *((_OWORD *)v43 + 3) = v175;
            *(_OWORD *)double v43 = v147;
            *((_OWORD *)v43 + 1) = v156;
            do
            {
              float v49 = *(float *)(v10 + 72);
              v10 += 64;
            }
            while (v18 >= v49);
            do
            {
              float v50 = *(v43 - 14);
              v43 -= 16;
            }
            while (v18 < v50);
          }
          BOOL v4 = v10 - 64 >= a1;
          BOOL v5 = v10 - 64 == a1;
          if (v10 - 64 != a1)
          {
            long long v51 = *(_OWORD *)(v10 - 64);
            long long v52 = *(_OWORD *)(v10 - 48);
            long long v53 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v53;
            *(_OWORD *)a1 = v51;
            *(_OWORD *)(a1 + 16) = v52;
          }
          a4 = 0;
          *(void *)(v10 - 64) = v38;
          *(float *)(v10 - 56) = v18;
          *(_DWORD *)(v10 - 4) = v143;
          *(_OWORD *)(v10 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v140;
          *(_OWORD *)(v10 - 36) = v137;
          *(_OWORD *)(v10 - 52) = v134;
        }
        float v18 = *(float *)(a1 + 8);
LABEL_12:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)a1;
        int v142 = *(_DWORD *)(a1 + 60);
        long long v136 = *(_OWORD *)(a1 + 28);
        long long v139 = *(_OWORD *)(a1 + 44);
        long long v133 = *(_OWORD *)(a1 + 12);
        do
        {
          float v21 = *(float *)(a1 + v19 + 72);
          v19 += 64;
        }
        while (v21 < v18);
        unint64_t v22 = a1 + v19;
        uint64_t v23 = a2;
        if (v19 == 64)
        {
          double v26 = a2;
          while (v22 < (unint64_t)v26)
          {
            double v24 = v26 - 16;
            float v27 = *(v26 - 14);
            v26 -= 16;
            if (v27 < v18) {
              goto LABEL_22;
            }
          }
          double v24 = v26;
        }
        else
        {
          do
          {
            double v24 = v23 - 16;
            float v25 = *(v23 - 14);
            v23 -= 16;
          }
          while (v25 >= v18);
        }
LABEL_22:
        unint64_t v10 = v22;
        if (v22 < (unint64_t)v24)
        {
          double v28 = v24;
          do
          {
            long long v165 = *(_OWORD *)(v10 + 32);
            long long v174 = *(_OWORD *)(v10 + 48);
            long long v146 = *(_OWORD *)v10;
            long long v155 = *(_OWORD *)(v10 + 16);
            long long v29 = *(_OWORD *)v28;
            long long v30 = *((_OWORD *)v28 + 1);
            long long v31 = *((_OWORD *)v28 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v28 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v31;
            *(_OWORD *)unint64_t v10 = v29;
            *(_OWORD *)(v10 + 16) = v30;
            *((_OWORD *)v28 + 2) = v165;
            *((_OWORD *)v28 + 3) = v174;
            *(_OWORD *)double v28 = v146;
            *((_OWORD *)v28 + 1) = v155;
            do
            {
              float v32 = *(float *)(v10 + 72);
              v10 += 64;
            }
            while (v32 < v18);
            do
            {
              float v33 = *(v28 - 14);
              v28 -= 16;
            }
            while (v33 >= v18);
          }
          while (v10 < (unint64_t)v28);
        }
        if (v10 - 64 != a1)
        {
          long long v34 = *(_OWORD *)(v10 - 64);
          long long v35 = *(_OWORD *)(v10 - 48);
          long long v36 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v36;
          *(_OWORD *)a1 = v34;
          *(_OWORD *)(a1 + 16) = v35;
        }
        *(void *)(v10 - 64) = v20;
        *(float *)(v10 - 56) = v18;
        *(_DWORD *)(v10 - 4) = v142;
        *(_OWORD *)(v10 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v139;
        *(_OWORD *)(v10 - 36) = v136;
        *(_OWORD *)(v10 - 52) = v133;
        if (v22 >= (unint64_t)v24) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v10 - 64, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v10 - 64);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (float *)(v10 - 64);
    if (!v37) {
      continue;
    }
    break;
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *result, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = a3[2];
  if (v3 >= result[2])
  {
    if (v4 < v3)
    {
      long long v13 = *((_OWORD *)a2 + 2);
      long long v12 = *((_OWORD *)a2 + 3);
      long long v15 = *(_OWORD *)a2;
      long long v14 = *((_OWORD *)a2 + 1);
      long long v16 = *((_OWORD *)a3 + 3);
      long long v18 = *(_OWORD *)a3;
      long long v17 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v16;
      *(_OWORD *)a2 = v18;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      *((_OWORD *)a3 + 2) = v13;
      *((_OWORD *)a3 + 3) = v12;
      if (a2[2] < result[2])
      {
        long long v20 = *((_OWORD *)result + 2);
        long long v19 = *((_OWORD *)result + 3);
        long long v22 = *(_OWORD *)result;
        long long v21 = *((_OWORD *)result + 1);
        long long v23 = *((_OWORD *)a2 + 3);
        long long v25 = *(_OWORD *)a2;
        long long v24 = *((_OWORD *)a2 + 1);
        *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)result + 3) = v23;
        *(_OWORD *)uint64_t result = v25;
        *((_OWORD *)result + 1) = v24;
        *(_OWORD *)a2 = v22;
        *((_OWORD *)a2 + 1) = v21;
        *((_OWORD *)a2 + 2) = v20;
        *((_OWORD *)a2 + 3) = v19;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v27 = *((_OWORD *)result + 2);
      long long v26 = *((_OWORD *)result + 3);
      long long v29 = *(_OWORD *)result;
      long long v28 = *((_OWORD *)result + 1);
      long long v30 = *((_OWORD *)a2 + 3);
      long long v32 = *(_OWORD *)a2;
      long long v31 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)result + 3) = v30;
      *(_OWORD *)uint64_t result = v32;
      *((_OWORD *)result + 1) = v31;
      *(_OWORD *)a2 = v29;
      *((_OWORD *)a2 + 1) = v28;
      *((_OWORD *)a2 + 2) = v27;
      *((_OWORD *)a2 + 3) = v26;
      if (a3[2] >= a2[2]) {
        return result;
      }
      long long v6 = *((_OWORD *)a2 + 2);
      long long v5 = *((_OWORD *)a2 + 3);
      long long v8 = *(_OWORD *)a2;
      long long v7 = *((_OWORD *)a2 + 1);
      long long v33 = *((_OWORD *)a3 + 3);
      long long v35 = *(_OWORD *)a3;
      long long v34 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v33;
      *(_OWORD *)a2 = v35;
      *((_OWORD *)a2 + 1) = v34;
    }
    else
    {
      long long v6 = *((_OWORD *)result + 2);
      long long v5 = *((_OWORD *)result + 3);
      long long v8 = *(_OWORD *)result;
      long long v7 = *((_OWORD *)result + 1);
      long long v9 = *((_OWORD *)a3 + 3);
      long long v11 = *(_OWORD *)a3;
      long long v10 = *((_OWORD *)a3 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)result + 3) = v9;
      *(_OWORD *)uint64_t result = v11;
      *((_OWORD *)result + 1) = v10;
    }
    *(_OWORD *)a3 = v8;
    *((_OWORD *)a3 + 1) = v7;
    *((_OWORD *)a3 + 2) = v6;
    *((_OWORD *)a3 + 3) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 56) < *(float *)(a1 + 8))
      {
        long long v7 = *(_OWORD *)(a1 + 32);
        long long v6 = *(_OWORD *)(a1 + 48);
        long long v9 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        long long v10 = *(_OWORD *)(a2 - 16);
        long long v12 = *(_OWORD *)(a2 - 64);
        long long v11 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v10;
        *(_OWORD *)a1 = v12;
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a2 - 64) = v9;
        *(_OWORD *)(a2 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a2 - 64));
      return 1;
    case 5:
      long long v24 = (long long *)(a1 + 64);
      long long v25 = (long long *)(a1 + 128);
      long long v26 = (long long *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a1 + 192));
      if (*(float *)(a2 - 56) >= *(float *)(a1 + 200)) {
        return 1;
      }
      long long v28 = *(_OWORD *)(a1 + 224);
      long long v27 = *(_OWORD *)(a1 + 240);
      long long v30 = *v26;
      long long v29 = *(_OWORD *)(a1 + 208);
      long long v31 = *(_OWORD *)(a2 - 16);
      long long v33 = *(_OWORD *)(a2 - 64);
      long long v32 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v31;
      *long long v26 = v33;
      *(_OWORD *)(a1 + 208) = v32;
      *(_OWORD *)(a2 - 64) = v30;
      *(_OWORD *)(a2 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v29;
      *(_OWORD *)(a2 - 32) = v28;
      *(_OWORD *)(a2 - 16) = v27;
      if (*(float *)(a1 + 200) >= *(float *)(a1 + 136)) {
        return 1;
      }
      long long v35 = *(_OWORD *)(a1 + 160);
      long long v34 = *(_OWORD *)(a1 + 176);
      long long v37 = *v25;
      long long v36 = *(_OWORD *)(a1 + 144);
      long long v38 = *(_OWORD *)(a1 + 208);
      *long long v25 = *v26;
      *(_OWORD *)(a1 + 144) = v38;
      long long v39 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v39;
      *long long v26 = v37;
      *(_OWORD *)(a1 + 208) = v36;
      *(_OWORD *)(a1 + 224) = v35;
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v34;
      if (*(float *)(a1 + 136) >= *(float *)(a1 + 72)) {
        return 1;
      }
      long long v41 = *(_OWORD *)(a1 + 96);
      long long v40 = *(_OWORD *)(a1 + 112);
      long long v43 = *v24;
      long long v42 = *(_OWORD *)(a1 + 80);
      long long v44 = *(_OWORD *)(a1 + 144);
      *long long v24 = *v25;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v44;
      long long v45 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v45;
      *long long v25 = v43;
      *(_OWORD *)(a1 + 144) = v42;
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v41;
      *(_OWORD *)(a1 + 176) = v40;
      if (*(float *)(a1 + 72) >= *(float *)(a1 + 8)) {
        return 1;
      }
      long long v47 = *(_OWORD *)(a1 + 32);
      long long v46 = *(_OWORD *)(a1 + 48);
      long long v49 = *(_OWORD *)a1;
      long long v48 = *(_OWORD *)(a1 + 16);
      long long v50 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v50;
      long long v51 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v51;
      *long long v24 = v49;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v48;
      BOOL result = 1;
      *(_OWORD *)(a1 + 96) = v47;
      *(_OWORD *)(a1 + 112) = v46;
      return result;
    default:
      uint64_t v13 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      uint64_t v14 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    float v17 = *(float *)(v14 + 8);
    if (v17 < *(float *)(v13 + 8))
    {
      uint64_t v18 = *(void *)v14;
      long long v52 = *(_OWORD *)(v14 + 12);
      long long v53 = *(_OWORD *)(v14 + 28);
      long long v54 = *(_OWORD *)(v14 + 44);
      int v55 = *(_DWORD *)(v14 + 60);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        long long v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v22;
        if (v19 == -128) {
          break;
        }
        v19 -= 64;
        if (v17 >= *(float *)(v20 + 72))
        {
          uint64_t v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      uint64_t v23 = a1;
LABEL_12:
      *(void *)uint64_t v23 = v18;
      *(float *)(v23 + 8) = v17;
      *(_OWORD *)(v23 + 12) = v52;
      *(_OWORD *)(v23 + 28) = v53;
      *(_OWORD *)(v23 + 44) = v54;
      *(_DWORD *)(v23 + 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v55;
      if (++v16 == 8) {
        return v14 + 64 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 64;
    v14 += 64;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *a1, float *a2, float *a3, long long *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *((_DWORD *)a4 + 2);
  if (result.n128_f32[0] < a3[2])
  {
    long long v9 = *((_OWORD *)a3 + 2);
    __n128 result = *(__n128 *)(a3 + 12);
    long long v11 = *(_OWORD *)a3;
    long long v10 = *((_OWORD *)a3 + 1);
    long long v12 = a4[3];
    long long v14 = *a4;
    long long v13 = a4[1];
    *((_OWORD *)a3 + 2) = a4[2];
    *((_OWORD *)a3 + 3) = v12;
    *(_OWORD *)a3 = v14;
    *((_OWORD *)a3 + 1) = v13;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = v9;
    a4[3] = (__int128)result;
    result.n128_f32[0] = a3[2];
    if (result.n128_f32[0] < a2[2])
    {
      long long v15 = *((_OWORD *)a2 + 2);
      __n128 result = *(__n128 *)(a2 + 12);
      long long v17 = *(_OWORD *)a2;
      long long v16 = *((_OWORD *)a2 + 1);
      long long v18 = *((_OWORD *)a3 + 3);
      long long v20 = *(_OWORD *)a3;
      long long v19 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v18;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v16;
      *((_OWORD *)a3 + 2) = v15;
      *((__n128 *)a3 + 3) = result;
      result.n128_f32[0] = a2[2];
      if (result.n128_f32[0] < a1[2])
      {
        long long v21 = *((_OWORD *)a1 + 2);
        __n128 result = *(__n128 *)(a1 + 12);
        long long v23 = *(_OWORD *)a1;
        long long v22 = *((_OWORD *)a1 + 1);
        long long v24 = *((_OWORD *)a2 + 3);
        long long v26 = *(_OWORD *)a2;
        long long v25 = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v24;
        *(_OWORD *)a1 = v26;
        *((_OWORD *)a1 + 1) = v25;
        *(_OWORD *)a2 = v23;
        *((_OWORD *)a2 + 1) = v22;
        *((_OWORD *)a2 + 2) = v21;
        *((__n128 *)a2 + 3) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 6;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v48 = *(a2 - 16);
                long long v47 = a2 - 16;
                if (v48 < *(float *)v10)
                {
                  long long v159 = *(_OWORD *)(v10 + 32);
                  long long v168 = *(_OWORD *)(v10 + 48);
                  long long v140 = *(_OWORD *)v10;
                  long long v149 = *(_OWORD *)(v10 + 16);
                  long long v49 = *(_OWORD *)v47;
                  long long v50 = *((_OWORD *)v47 + 1);
                  long long v51 = *((_OWORD *)v47 + 3);
                  *(_OWORD *)(v10 + 32) = *((_OWORD *)v47 + 2);
                  *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v51;
                  *(_OWORD *)unint64_t v10 = v49;
                  *(_OWORD *)(v10 + 16) = v50;
                  *((_OWORD *)v47 + 2) = v159;
                  *((_OWORD *)v47 + 3) = v168;
                  *(_OWORD *)long long v47 = v140;
                  *((_OWORD *)v47 + 1) = v149;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), a2 - 16);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)a2 - 4);
                break;
              case 5uLL:
                long long v52 = (long long *)(v10 + 64);
                long long v53 = (long long *)(v10 + 128);
                long long v54 = (long long *)(v10 + 192);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)(v10 + 192));
                float v56 = *(a2 - 16);
                int v55 = a2 - 16;
                if (v56 < *(float *)(v10 + 192))
                {
                  long long v57 = *v54;
                  long long v150 = *(_OWORD *)(v10 + 208);
                  long long v58 = *(_OWORD *)(v10 + 224);
                  long long v169 = *(_OWORD *)(v10 + 240);
                  long long v60 = *((_OWORD *)v55 + 2);
                  long long v59 = *((_OWORD *)v55 + 3);
                  long long v61 = *((_OWORD *)v55 + 1);
                  *long long v54 = *(_OWORD *)v55;
                  *(_OWORD *)(v10 + 208) = v61;
                  *(_OWORD *)(v10 + 224) = v60;
                  *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v59;
                  *((_OWORD *)v55 + 2) = v58;
                  *((_OWORD *)v55 + 3) = v169;
                  *(_OWORD *)int v55 = v57;
                  *((_OWORD *)v55 + 1) = v150;
                  if (*(float *)v54 < *(float *)v53)
                  {
                    long long v63 = *(_OWORD *)(v10 + 160);
                    long long v62 = *(_OWORD *)(v10 + 176);
                    long long v65 = *v53;
                    long long v64 = *(_OWORD *)(v10 + 144);
                    long long v66 = *(_OWORD *)(v10 + 208);
                    *long long v53 = *v54;
                    *(_OWORD *)(v10 + 144) = v66;
                    long long v67 = *(_OWORD *)(v10 + 240);
                    *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(v10 + 224);
                    *(_OWORD *)(v10 + 176) = v67;
                    *long long v54 = v65;
                    *(_OWORD *)(v10 + 208) = v64;
                    *(_OWORD *)(v10 + 224) = v63;
                    *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v62;
                    if (*(float *)v53 < *(float *)v52)
                    {
                      long long v69 = *(_OWORD *)(v10 + 96);
                      long long v68 = *(_OWORD *)(v10 + 112);
                      long long v71 = *v52;
                      long long v70 = *(_OWORD *)(v10 + 80);
                      long long v72 = *(_OWORD *)(v10 + 144);
                      *long long v52 = *v53;
                      *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v72;
                      long long v73 = *(_OWORD *)(v10 + 176);
                      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 160);
                      *(_OWORD *)(v10 + 112) = v73;
                      *long long v53 = v71;
                      *(_OWORD *)(v10 + 144) = v70;
                      *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v69;
                      *(_OWORD *)(v10 + 176) = v68;
                      if (*(float *)(v10 + 64) < *(float *)v10)
                      {
                        long long v160 = *(_OWORD *)(v10 + 32);
                        long long v170 = *(_OWORD *)(v10 + 48);
                        long long v141 = *(_OWORD *)v10;
                        long long v151 = *(_OWORD *)(v10 + 16);
                        long long v74 = *(_OWORD *)(v10 + 80);
                        *(_OWORD *)unint64_t v10 = *v52;
                        *(_OWORD *)(v10 + 16) = v74;
                        long long v75 = *(_OWORD *)(v10 + 112);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 96);
                        *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v75;
                        *(_OWORD *)(v10 + 96) = v160;
                        *(_OWORD *)(v10 + 112) = v170;
                        *long long v52 = v141;
                        *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v151;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1535)
          {
            long long v76 = (float *)(v10 + 64);
            BOOL v78 = (float *)v10 == a2 || v76 == a2;
            if (a4)
            {
              if (!v78)
              {
                uint64_t v79 = 0;
                unint64_t v80 = v10;
                do
                {
                  BOOL v81 = v76;
                  float v82 = *(float *)(v80 + 64);
                  if (v82 < *(float *)v80)
                  {
                    long long v142 = *(_OWORD *)(v80 + 68);
                    long long v152 = *(_OWORD *)(v80 + 84);
                    *(_OWORD *)long long v161 = *(_OWORD *)(v80 + 100);
                    *(_OWORD *)&v161[12] = *(_OWORD *)(v80 + 112);
                    uint64_t v83 = v79;
                    while (1)
                    {
                      int32x4_t v84 = (float *)(v10 + v83);
                      long long v85 = *(_OWORD *)(v10 + v83 + 16);
                      *((_OWORD *)v84 + 4) = *(_OWORD *)(v10 + v83);
                      *((_OWORD *)v84 + 5) = v85;
                      long long v86 = *(_OWORD *)(v10 + v83 + 48);
                      *((_OWORD *)v84 + 6) = *(_OWORD *)(v10 + v83 + 32);
                      *((_OWORD *)v84 + 7) = v86;
                      if (!v83) {
                        break;
                      }
                      v83 -= 64;
                      if (v82 >= *(v84 - 16))
                      {
                        uint64_t v87 = v10 + v83 + 64;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v87 = v10;
LABEL_80:
                    *(float *)uint64_t v87 = v82;
                    *(_OWORD *)(v87 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v161[12];
                    *(_OWORD *)(v87 + 36) = *(_OWORD *)v161;
                    *(_OWORD *)(v87 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v152;
                    *(_OWORD *)(v87 + 4) = v142;
                  }
                  long long v76 = v81 + 16;
                  v79 += 64;
                  unint64_t v80 = (unint64_t)v81;
                }
                while (v81 + 16 != a2);
              }
            }
            else if (!v78)
            {
              do
              {
                unint64_t v122 = (unint64_t)v76;
                float v123 = *(float *)(a1 + 64);
                if (v123 < *(float *)a1)
                {
                  long long v145 = *(_OWORD *)(a1 + 68);
                  long long v155 = *(_OWORD *)(a1 + 84);
                  *(_OWORD *)long long v164 = *(_OWORD *)(a1 + 100);
                  *(_OWORD *)&v164[12] = *(_OWORD *)(a1 + 112);
                  long long v124 = v76;
                  do
                  {
                    long long v125 = *((_OWORD *)v124 - 3);
                    *(_OWORD *)long long v124 = *((_OWORD *)v124 - 4);
                    *((_OWORD *)v124 + 1) = v125;
                    long long v126 = *((_OWORD *)v124 - 1);
                    *((_OWORD *)v124 + 2) = *((_OWORD *)v124 - 2);
                    *((_OWORD *)v124 + 3) = v126;
                    float v127 = *(v124 - 32);
                    v124 -= 16;
                  }
                  while (v123 < v127);
                  *long long v124 = v123;
                  *((_OWORD *)v124 + 3) = *(_OWORD *)&v164[12];
                  *(_OWORD *)(v124 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)v164;
                  *(_OWORD *)(v124 + 5) = v155;
                  *(_OWORD *)(v124 + 1) = v145;
                }
                v76 += 16;
                a1 = v122;
              }
              while ((float *)(v122 + 64) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v88 = (v12 - 2) >> 1;
              int64_t v89 = v88;
              do
              {
                int64_t v90 = v89;
                if (v88 >= v89)
                {
                  uint64_t v91 = (2 * v89) | 1;
                  unint64_t v92 = v10 + (v91 << 6);
                  if (2 * v90 + 2 < (uint64_t)v12 && *(float *)v92 < *(float *)(v92 + 64))
                  {
                    v92 += 64;
                    uint64_t v91 = 2 * v90 + 2;
                  }
                  unint64_t v93 = v10 + (v90 << 6);
                  float v94 = *(float *)v93;
                  if (*(float *)v92 >= *(float *)v93)
                  {
                    *(_OWORD *)&v162[12] = *(_OWORD *)(v93 + 48);
                    long long v153 = *(_OWORD *)(v93 + 20);
                    *(_OWORD *)long long v162 = *(_OWORD *)(v93 + 36);
                    long long v143 = *(_OWORD *)(v93 + 4);
                    do
                    {
                      uint64_t v95 = (_OWORD *)v93;
                      unint64_t v93 = v92;
                      long long v96 = *(_OWORD *)v92;
                      long long v97 = *(_OWORD *)(v92 + 16);
                      long long v98 = *(_OWORD *)(v92 + 48);
                      v95[2] = *(_OWORD *)(v92 + 32);
                      v95[3] = v98;
                      *uint64_t v95 = v96;
                      v95[1] = v97;
                      if (v88 < v91) {
                        break;
                      }
                      uint64_t v99 = 2 * v91;
                      uint64_t v91 = (2 * v91) | 1;
                      unint64_t v92 = v10 + (v91 << 6);
                      uint64_t v100 = v99 + 2;
                      if (v100 < (uint64_t)v12 && *(float *)v92 < *(float *)(v92 + 64))
                      {
                        v92 += 64;
                        uint64_t v91 = v100;
                      }
                    }
                    while (*(float *)v92 >= v94);
                    *(float *)unint64_t v93 = v94;
                    *(_OWORD *)(v93 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v162[12];
                    *(_OWORD *)(v93 + 36) = *(_OWORD *)v162;
                    *(_OWORD *)(v93 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v153;
                    *(_OWORD *)(v93 + 4) = v143;
                  }
                }
                int64_t v89 = v90 - 1;
              }
              while (v90);
              uint64_t v101 = (unint64_t)v11 >> 6;
              do
              {
                uint64_t v102 = 0;
                long long v163 = *(_OWORD *)(v10 + 32);
                long long v171 = *(_OWORD *)(v10 + 48);
                long long v144 = *(_OWORD *)v10;
                long long v154 = *(_OWORD *)(v10 + 16);
                long long v103 = (float *)v10;
                do
                {
                  uint64_t v104 = v103;
                  v103 += 16 * v102 + 16;
                  uint64_t v105 = 2 * v102;
                  uint64_t v102 = (2 * v102) | 1;
                  uint64_t v106 = v105 + 2;
                  if (v106 < v101 && *v103 < v103[16])
                  {
                    v103 += 16;
                    uint64_t v102 = v106;
                  }
                  long long v107 = *(_OWORD *)v103;
                  long long v108 = *((_OWORD *)v103 + 1);
                  long long v109 = *((_OWORD *)v103 + 3);
                  *((_OWORD *)v104 + 2) = *((_OWORD *)v103 + 2);
                  *((_OWORD *)v104 + 3) = v109;
                  *(_OWORD *)uint64_t v104 = v107;
                  *((_OWORD *)v104 + 1) = v108;
                }
                while (v102 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
                a2 -= 16;
                if (v103 == a2)
                {
                  *((_OWORD *)v103 + 2) = v163;
                  *((_OWORD *)v103 + 3) = v171;
                  *(_OWORD *)long long v103 = v144;
                  *((_OWORD *)v103 + 1) = v154;
                }
                else
                {
                  long long v110 = *(_OWORD *)a2;
                  long long v111 = *((_OWORD *)a2 + 1);
                  long long v112 = *((_OWORD *)a2 + 3);
                  *((_OWORD *)v103 + 2) = *((_OWORD *)a2 + 2);
                  *((_OWORD *)v103 + 3) = v112;
                  *(_OWORD *)long long v103 = v110;
                  *((_OWORD *)v103 + 1) = v111;
                  *((_OWORD *)a2 + 2) = v163;
                  *((_OWORD *)a2 + 3) = v171;
                  *(_OWORD *)a2 = v144;
                  *((_OWORD *)a2 + 1) = v154;
                  uint64_t v113 = (uint64_t)v103 - v10 + 64;
                  if (v113 >= 65)
                  {
                    unint64_t v114 = (((unint64_t)v113 >> 6) - 2) >> 1;
                    long long v115 = (float *)(v10 + (v114 << 6));
                    float v116 = *v103;
                    if (*v115 < *v103)
                    {
                      *(_OWORD *)&v136[12] = *((_OWORD *)v103 + 3);
                      long long v133 = *(_OWORD *)(v103 + 5);
                      *(_OWORD *)long long v136 = *(_OWORD *)(v103 + 9);
                      long long v130 = *(_OWORD *)(v103 + 1);
                      do
                      {
                        long long v117 = v103;
                        long long v103 = v115;
                        long long v118 = *(_OWORD *)v115;
                        long long v119 = *((_OWORD *)v115 + 1);
                        long long v120 = *((_OWORD *)v115 + 3);
                        *((_OWORD *)v117 + 2) = *((_OWORD *)v115 + 2);
                        *((_OWORD *)v117 + 3) = v120;
                        *(_OWORD *)long long v117 = v118;
                        *((_OWORD *)v117 + 1) = v119;
                        if (!v114) {
                          break;
                        }
                        unint64_t v114 = (v114 - 1) >> 1;
                        long long v115 = (float *)(v10 + (v114 << 6));
                      }
                      while (*v115 < v116);
                      *long long v103 = v116;
                      *((_OWORD *)v103 + 3) = *(_OWORD *)&v136[12];
                      *(_OWORD *)(v103 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)v136;
                      *(_OWORD *)(v103 + 5) = v133;
                      *(_OWORD *)(v103 + 1) = v130;
                    }
                  }
                }
              }
              while (v101-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + (v12 >> 1 << 6);
          if ((unint64_t)v11 > 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v12 >> 1 << 6)), a2 - 16);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v14 - 64), a2 - 32);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v13 << 6)), a2 - 48);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v14 - 64), (float *)v14, (float *)(a1 + 64 + (v13 << 6)));
            long long v156 = *(_OWORD *)(a1 + 32);
            long long v165 = *(_OWORD *)(a1 + 48);
            long long v137 = *(_OWORD *)a1;
            long long v146 = *(_OWORD *)(a1 + 16);
            long long v15 = *(_OWORD *)v14;
            long long v16 = *(_OWORD *)(v14 + 16);
            long long v17 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v14 + 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v17;
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v16;
            *(_OWORD *)(v14 + 32) = v156;
            *(_OWORD *)(v14 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v165;
            *(_OWORD *)unint64_t v14 = v137;
            *(_OWORD *)(v14 + 16) = v146;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v12 >> 1 << 6)), (float *)a1, a2 - 16);
          }
          --a3;
          float v18 = *(float *)a1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 64) < v18) {
            break;
          }
          *(_OWORD *)&v135[12] = *(_OWORD *)(a1 + 48);
          long long v132 = *(_OWORD *)(a1 + 20);
          *(_OWORD *)long long v135 = *(_OWORD *)(a1 + 36);
          long long v129 = *(_OWORD *)(a1 + 4);
          if (v18 >= *(a2 - 16))
          {
            unint64_t v36 = a1 + 64;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= (unint64_t)a2) {
                break;
              }
              v36 += 64;
            }
            while (v18 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              float v35 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v18 >= v35);
          }
          long long v37 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              float v38 = *(v37 - 16);
              v37 -= 16;
            }
            while (v18 < v38);
          }
          while (v10 < (unint64_t)v37)
          {
            long long v158 = *(_OWORD *)(v10 + 32);
            long long v167 = *(_OWORD *)(v10 + 48);
            long long v139 = *(_OWORD *)v10;
            long long v148 = *(_OWORD *)(v10 + 16);
            long long v39 = *(_OWORD *)v37;
            long long v40 = *((_OWORD *)v37 + 1);
            long long v41 = *((_OWORD *)v37 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v37 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v41;
            *(_OWORD *)unint64_t v10 = v39;
            *(_OWORD *)(v10 + 16) = v40;
            *((_OWORD *)v37 + 2) = v158;
            *((_OWORD *)v37 + 3) = v167;
            *(_OWORD *)long long v37 = v139;
            *((_OWORD *)v37 + 1) = v148;
            do
            {
              float v42 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v18 >= v42);
            do
            {
              float v43 = *(v37 - 16);
              v37 -= 16;
            }
            while (v18 < v43);
          }
          BOOL v4 = v10 - 64 >= a1;
          BOOL v5 = v10 - 64 == a1;
          if (v10 - 64 != a1)
          {
            long long v44 = *(_OWORD *)(v10 - 64);
            long long v45 = *(_OWORD *)(v10 - 48);
            long long v46 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v46;
            *(_OWORD *)a1 = v44;
            *(_OWORD *)(a1 + 16) = v45;
          }
          a4 = 0;
          *(float *)(v10 - 64) = v18;
          *(_OWORD *)(v10 - 16) = *(_OWORD *)&v135[12];
          *(_OWORD *)(v10 - 28) = *(_OWORD *)v135;
          *(_OWORD *)(v10 - 44) = v132;
          *(_OWORD *)(v10 - 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v129;
        }
        uint64_t v19 = 0;
        *(_OWORD *)&v134[12] = *(_OWORD *)(a1 + 48);
        long long v131 = *(_OWORD *)(a1 + 20);
        *(_OWORD *)long long v134 = *(_OWORD *)(a1 + 36);
        long long v128 = *(_OWORD *)(a1 + 4);
        do
        {
          float v20 = *(float *)(a1 + v19 + 64);
          v19 += 64;
        }
        while (v20 < v18);
        unint64_t v21 = a1 + v19;
        long long v22 = a2;
        if (v19 == 64)
        {
          long long v22 = a2;
          do
          {
            if (v21 >= (unint64_t)v22) {
              break;
            }
            float v24 = *(v22 - 16);
            v22 -= 16;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            float v23 = *(v22 - 16);
            v22 -= 16;
          }
          while (v23 >= v18);
        }
        unint64_t v10 = a1 + v19;
        if (v21 < (unint64_t)v22)
        {
          long long v25 = v22;
          do
          {
            long long v157 = *(_OWORD *)(v10 + 32);
            long long v166 = *(_OWORD *)(v10 + 48);
            long long v138 = *(_OWORD *)v10;
            long long v147 = *(_OWORD *)(v10 + 16);
            long long v26 = *(_OWORD *)v25;
            long long v27 = *((_OWORD *)v25 + 1);
            long long v28 = *((_OWORD *)v25 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v25 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v28;
            *(_OWORD *)unint64_t v10 = v26;
            *(_OWORD *)(v10 + 16) = v27;
            *((_OWORD *)v25 + 2) = v157;
            *((_OWORD *)v25 + 3) = v166;
            *(_OWORD *)long long v25 = v138;
            *((_OWORD *)v25 + 1) = v147;
            do
            {
              float v29 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v29 < v18);
            do
            {
              float v30 = *(v25 - 16);
              v25 -= 16;
            }
            while (v30 >= v18);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 64 != a1)
        {
          long long v31 = *(_OWORD *)(v10 - 64);
          long long v32 = *(_OWORD *)(v10 - 48);
          long long v33 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v33;
          *(_OWORD *)a1 = v31;
          *(_OWORD *)(a1 + 16) = v32;
        }
        *(float *)(v10 - 64) = v18;
        *(_OWORD *)(v10 - 16) = *(_OWORD *)&v134[12];
        *(_OWORD *)(v10 - 28) = *(_OWORD *)v134;
        *(_OWORD *)(v10 - 44) = v131;
        *(_OWORD *)(v10 - 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v128;
        if (v21 >= (unint64_t)v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v10 - 64, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v10 - 64);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = (float *)(v10 - 64);
    if (!v34) {
      continue;
    }
    break;
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      long long v13 = *((_OWORD *)a2 + 2);
      long long v12 = *((_OWORD *)a2 + 3);
      long long v15 = *(_OWORD *)a2;
      long long v14 = *((_OWORD *)a2 + 1);
      long long v16 = *((_OWORD *)a3 + 3);
      long long v18 = *(_OWORD *)a3;
      long long v17 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v16;
      *(_OWORD *)a2 = v18;
      *((_OWORD *)a2 + 1) = v17;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      *((_OWORD *)a3 + 2) = v13;
      *((_OWORD *)a3 + 3) = v12;
      if (*a2 < *result)
      {
        long long v20 = *((_OWORD *)result + 2);
        long long v19 = *((_OWORD *)result + 3);
        long long v22 = *(_OWORD *)result;
        long long v21 = *((_OWORD *)result + 1);
        long long v23 = *((_OWORD *)a2 + 3);
        long long v25 = *(_OWORD *)a2;
        long long v24 = *((_OWORD *)a2 + 1);
        *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)result + 3) = v23;
        *(_OWORD *)__n128 result = v25;
        *((_OWORD *)result + 1) = v24;
        *(_OWORD *)a2 = v22;
        *((_OWORD *)a2 + 1) = v21;
        *((_OWORD *)a2 + 2) = v20;
        *((_OWORD *)a2 + 3) = v19;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v27 = *((_OWORD *)result + 2);
      long long v26 = *((_OWORD *)result + 3);
      long long v29 = *(_OWORD *)result;
      long long v28 = *((_OWORD *)result + 1);
      long long v30 = *((_OWORD *)a2 + 3);
      long long v32 = *(_OWORD *)a2;
      long long v31 = *((_OWORD *)a2 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)result + 3) = v30;
      *(_OWORD *)__n128 result = v32;
      *((_OWORD *)result + 1) = v31;
      *(_OWORD *)a2 = v29;
      *((_OWORD *)a2 + 1) = v28;
      *((_OWORD *)a2 + 2) = v27;
      *((_OWORD *)a2 + 3) = v26;
      if (*a3 >= *a2) {
        return result;
      }
      long long v6 = *((_OWORD *)a2 + 2);
      long long v5 = *((_OWORD *)a2 + 3);
      long long v8 = *(_OWORD *)a2;
      long long v7 = *((_OWORD *)a2 + 1);
      long long v33 = *((_OWORD *)a3 + 3);
      long long v35 = *(_OWORD *)a3;
      long long v34 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v33;
      *(_OWORD *)a2 = v35;
      *((_OWORD *)a2 + 1) = v34;
    }
    else
    {
      long long v6 = *((_OWORD *)result + 2);
      long long v5 = *((_OWORD *)result + 3);
      long long v8 = *(_OWORD *)result;
      long long v7 = *((_OWORD *)result + 1);
      long long v9 = *((_OWORD *)a3 + 3);
      long long v11 = *(_OWORD *)a3;
      long long v10 = *((_OWORD *)a3 + 1);
      *((_OWORD *)result + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)result + 3) = v9;
      *(_OWORD *)__n128 result = v11;
      *((_OWORD *)result + 1) = v10;
    }
    *(_OWORD *)a3 = v8;
    *((_OWORD *)a3 + 1) = v7;
    *((_OWORD *)a3 + 2) = v6;
    *((_OWORD *)a3 + 3) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 64);
      if (*(float *)(a2 - 64) < *(float *)a1)
      {
        long long v8 = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a1 + 48);
        long long v10 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a2 - 16);
        long long v13 = *v6;
        long long v12 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v11;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a1 + 16) = v12;
        *long long v6 = v10;
        *(_OWORD *)(a2 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v9;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a2 - 64));
      return 1;
    case 5:
      long long v24 = (float *)(a1 + 64);
      long long v25 = (float *)(a1 + 128);
      long long v26 = (float *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a1 + 192));
      float v28 = *(float *)(a2 - 64);
      long long v27 = (long long *)(a2 - 64);
      if (v28 >= *(float *)(a1 + 192)) {
        return 1;
      }
      long long v30 = *(_OWORD *)(a1 + 224);
      long long v29 = *(_OWORD *)(a1 + 240);
      long long v32 = *(_OWORD *)v26;
      long long v31 = *(_OWORD *)(a1 + 208);
      long long v33 = v27[3];
      long long v35 = *v27;
      long long v34 = v27[1];
      *(_OWORD *)(a1 + 224) = v27[2];
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v33;
      *(_OWORD *)long long v26 = v35;
      *(_OWORD *)(a1 + 208) = v34;
      long long *v27 = v32;
      v27[1] = v31;
      void v27[2] = v30;
      v27[3] = v29;
      if (*v26 >= *v25) {
        return 1;
      }
      long long v37 = *(_OWORD *)(a1 + 160);
      long long v36 = *(_OWORD *)(a1 + 176);
      long long v39 = *(_OWORD *)v25;
      long long v38 = *(_OWORD *)(a1 + 144);
      long long v40 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)long long v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 144) = v40;
      long long v41 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v41;
      *(_OWORD *)long long v26 = v39;
      *(_OWORD *)(a1 + 208) = v38;
      *(_OWORD *)(a1 + 224) = v37;
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v36;
      if (*v25 >= *v24) {
        return 1;
      }
      long long v43 = *(_OWORD *)(a1 + 96);
      long long v42 = *(_OWORD *)(a1 + 112);
      long long v45 = *(_OWORD *)v24;
      long long v44 = *(_OWORD *)(a1 + 80);
      long long v46 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)long long v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v46;
      long long v47 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v47;
      *(_OWORD *)long long v25 = v45;
      *(_OWORD *)(a1 + 144) = v44;
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v43;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(float *)(a1 + 64) >= *(float *)a1) {
        return 1;
      }
      long long v49 = *(_OWORD *)(a1 + 32);
      long long v48 = *(_OWORD *)(a1 + 48);
      long long v51 = *(_OWORD *)a1;
      long long v50 = *(_OWORD *)(a1 + 16);
      long long v52 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 16) = v52;
      long long v53 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v53;
      *(_OWORD *)long long v24 = v51;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v50;
      BOOL result = 1;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v48;
      return result;
    default:
      long long v14 = (float *)(a1 + 128);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      uint64_t v15 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    float v18 = *(float *)v15;
    if (*(float *)v15 < *v14)
    {
      long long v54 = *(_OWORD *)(v15 + 4);
      long long v55 = *(_OWORD *)(v15 + 20);
      *(_OWORD *)float v56 = *(_OWORD *)(v15 + 36);
      *(_OWORD *)&v56[12] = *(_OWORD *)(v15 + 48);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        long long v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v22;
        if (v19 == -128) {
          break;
        }
        v19 -= 64;
        if (v18 >= *(float *)(v20 + 64))
        {
          uint64_t v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      uint64_t v23 = a1;
LABEL_12:
      *(float *)uint64_t v23 = v18;
      *(_OWORD *)(v23 + 4) = v54;
      *(_OWORD *)(v23 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v55;
      *(_OWORD *)(v23 + 36) = *(_OWORD *)v56;
      *(_OWORD *)(v23 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v56[12];
      if (++v17 == 8) {
        return v15 + 64 == a2;
      }
    }
    long long v14 = (float *)v15;
    v16 += 64;
    v15 += 64;
    if (v15 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(float *a1, float *a2, float *a3, long long *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 < *a3)
  {
    long long v9 = *((_OWORD *)a3 + 2);
    __n128 result = *(__n128 *)(a3 + 12);
    long long v11 = *(_OWORD *)a3;
    long long v10 = *((_OWORD *)a3 + 1);
    long long v12 = a4[3];
    long long v14 = *a4;
    long long v13 = a4[1];
    *((_OWORD *)a3 + 2) = a4[2];
    *((_OWORD *)a3 + 3) = v12;
    *(_OWORD *)a3 = v14;
    *((_OWORD *)a3 + 1) = v13;
    *a4 = v11;
    a4[1] = v10;
    a4[2] = v9;
    a4[3] = (__int128)result;
    result.n128_f32[0] = *a3;
    if (*a3 < *a2)
    {
      long long v15 = *((_OWORD *)a2 + 2);
      __n128 result = *(__n128 *)(a2 + 12);
      long long v17 = *(_OWORD *)a2;
      long long v16 = *((_OWORD *)a2 + 1);
      long long v18 = *((_OWORD *)a3 + 3);
      long long v20 = *(_OWORD *)a3;
      long long v19 = *((_OWORD *)a3 + 1);
      *((_OWORD *)a2 + 2) = *((_OWORD *)a3 + 2);
      *((_OWORD *)a2 + 3) = v18;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v19;
      *(_OWORD *)a3 = v17;
      *((_OWORD *)a3 + 1) = v16;
      *((_OWORD *)a3 + 2) = v15;
      *((__n128 *)a3 + 3) = result;
      result.n128_f32[0] = *a2;
      if (*a2 < *a1)
      {
        long long v21 = *((_OWORD *)a1 + 2);
        __n128 result = *(__n128 *)(a1 + 12);
        long long v23 = *(_OWORD *)a1;
        long long v22 = *((_OWORD *)a1 + 1);
        long long v24 = *((_OWORD *)a2 + 3);
        long long v26 = *(_OWORD *)a2;
        long long v25 = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 3) = v24;
        *(_OWORD *)a1 = v26;
        *((_OWORD *)a1 + 1) = v25;
        *(_OWORD *)a2 = v23;
        *((_OWORD *)a2 + 1) = v22;
        *((_OWORD *)a2 + 2) = v21;
        *((__n128 *)a2 + 3) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 6;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v48 = *(a2 - 16);
                long long v47 = a2 - 16;
                if (v48 < *(float *)v10)
                {
                  long long v159 = *(_OWORD *)(v10 + 32);
                  long long v168 = *(_OWORD *)(v10 + 48);
                  long long v140 = *(_OWORD *)v10;
                  long long v149 = *(_OWORD *)(v10 + 16);
                  long long v49 = *(_OWORD *)v47;
                  long long v50 = *((_OWORD *)v47 + 1);
                  long long v51 = *((_OWORD *)v47 + 3);
                  *(_OWORD *)(v10 + 32) = *((_OWORD *)v47 + 2);
                  *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v51;
                  *(_OWORD *)unint64_t v10 = v49;
                  *(_OWORD *)(v10 + 16) = v50;
                  *((_OWORD *)v47 + 2) = v159;
                  *((_OWORD *)v47 + 3) = v168;
                  *(_OWORD *)long long v47 = v140;
                  *((_OWORD *)v47 + 1) = v149;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), a2 - 16);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)a2 - 4);
                break;
              case 5uLL:
                long long v52 = (long long *)(v10 + 64);
                long long v53 = (long long *)(v10 + 128);
                long long v54 = (long long *)(v10 + 192);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v10, (float *)(v10 + 64), (float *)(v10 + 128), (long long *)(v10 + 192));
                float v56 = *(a2 - 16);
                long long v55 = a2 - 16;
                if (v56 < *(float *)(v10 + 192))
                {
                  long long v57 = *v54;
                  long long v150 = *(_OWORD *)(v10 + 208);
                  long long v58 = *(_OWORD *)(v10 + 224);
                  long long v169 = *(_OWORD *)(v10 + 240);
                  long long v60 = *((_OWORD *)v55 + 2);
                  long long v59 = *((_OWORD *)v55 + 3);
                  long long v61 = *((_OWORD *)v55 + 1);
                  *long long v54 = *(_OWORD *)v55;
                  *(_OWORD *)(v10 + 208) = v61;
                  *(_OWORD *)(v10 + 224) = v60;
                  *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v59;
                  *((_OWORD *)v55 + 2) = v58;
                  *((_OWORD *)v55 + 3) = v169;
                  *(_OWORD *)long long v55 = v57;
                  *((_OWORD *)v55 + 1) = v150;
                  if (*(float *)v54 < *(float *)v53)
                  {
                    long long v63 = *(_OWORD *)(v10 + 160);
                    long long v62 = *(_OWORD *)(v10 + 176);
                    long long v65 = *v53;
                    long long v64 = *(_OWORD *)(v10 + 144);
                    long long v66 = *(_OWORD *)(v10 + 208);
                    *long long v53 = *v54;
                    *(_OWORD *)(v10 + 144) = v66;
                    long long v67 = *(_OWORD *)(v10 + 240);
                    *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(v10 + 224);
                    *(_OWORD *)(v10 + 176) = v67;
                    *long long v54 = v65;
                    *(_OWORD *)(v10 + 208) = v64;
                    *(_OWORD *)(v10 + 224) = v63;
                    *(_OWORD *)(v10 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v62;
                    if (*(float *)v53 < *(float *)v52)
                    {
                      long long v69 = *(_OWORD *)(v10 + 96);
                      long long v68 = *(_OWORD *)(v10 + 112);
                      long long v71 = *v52;
                      long long v70 = *(_OWORD *)(v10 + 80);
                      long long v72 = *(_OWORD *)(v10 + 144);
                      *long long v52 = *v53;
                      *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v72;
                      long long v73 = *(_OWORD *)(v10 + 176);
                      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 160);
                      *(_OWORD *)(v10 + 112) = v73;
                      *long long v53 = v71;
                      *(_OWORD *)(v10 + 144) = v70;
                      *(_OWORD *)(v10 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v69;
                      *(_OWORD *)(v10 + 176) = v68;
                      if (*(float *)(v10 + 64) < *(float *)v10)
                      {
                        long long v160 = *(_OWORD *)(v10 + 32);
                        long long v170 = *(_OWORD *)(v10 + 48);
                        long long v141 = *(_OWORD *)v10;
                        long long v151 = *(_OWORD *)(v10 + 16);
                        long long v74 = *(_OWORD *)(v10 + 80);
                        *(_OWORD *)unint64_t v10 = *v52;
                        *(_OWORD *)(v10 + 16) = v74;
                        long long v75 = *(_OWORD *)(v10 + 112);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 96);
                        *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v75;
                        *(_OWORD *)(v10 + 96) = v160;
                        *(_OWORD *)(v10 + 112) = v170;
                        *long long v52 = v141;
                        *(_OWORD *)(v10 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v151;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1535)
          {
            long long v76 = (float *)(v10 + 64);
            BOOL v78 = (float *)v10 == a2 || v76 == a2;
            if (a4)
            {
              if (!v78)
              {
                uint64_t v79 = 0;
                unint64_t v80 = v10;
                do
                {
                  BOOL v81 = v76;
                  float v82 = *(float *)(v80 + 64);
                  if (v82 < *(float *)v80)
                  {
                    long long v142 = *(_OWORD *)(v80 + 68);
                    long long v152 = *(_OWORD *)(v80 + 84);
                    *(_OWORD *)long long v161 = *(_OWORD *)(v80 + 100);
                    *(_OWORD *)&v161[12] = *(_OWORD *)(v80 + 112);
                    uint64_t v83 = v79;
                    while (1)
                    {
                      int32x4_t v84 = (float *)(v10 + v83);
                      long long v85 = *(_OWORD *)(v10 + v83 + 16);
                      *((_OWORD *)v84 + 4) = *(_OWORD *)(v10 + v83);
                      *((_OWORD *)v84 + 5) = v85;
                      long long v86 = *(_OWORD *)(v10 + v83 + 48);
                      *((_OWORD *)v84 + 6) = *(_OWORD *)(v10 + v83 + 32);
                      *((_OWORD *)v84 + 7) = v86;
                      if (!v83) {
                        break;
                      }
                      v83 -= 64;
                      if (v82 >= *(v84 - 16))
                      {
                        uint64_t v87 = v10 + v83 + 64;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v87 = v10;
LABEL_80:
                    *(float *)uint64_t v87 = v82;
                    *(_OWORD *)(v87 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v161[12];
                    *(_OWORD *)(v87 + 36) = *(_OWORD *)v161;
                    *(_OWORD *)(v87 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v152;
                    *(_OWORD *)(v87 + 4) = v142;
                  }
                  long long v76 = v81 + 16;
                  v79 += 64;
                  unint64_t v80 = (unint64_t)v81;
                }
                while (v81 + 16 != a2);
              }
            }
            else if (!v78)
            {
              do
              {
                unint64_t v122 = (unint64_t)v76;
                float v123 = *(float *)(a1 + 64);
                if (v123 < *(float *)a1)
                {
                  long long v145 = *(_OWORD *)(a1 + 68);
                  long long v155 = *(_OWORD *)(a1 + 84);
                  *(_OWORD *)long long v164 = *(_OWORD *)(a1 + 100);
                  *(_OWORD *)&v164[12] = *(_OWORD *)(a1 + 112);
                  long long v124 = v76;
                  do
                  {
                    long long v125 = *((_OWORD *)v124 - 3);
                    *(_OWORD *)long long v124 = *((_OWORD *)v124 - 4);
                    *((_OWORD *)v124 + 1) = v125;
                    long long v126 = *((_OWORD *)v124 - 1);
                    *((_OWORD *)v124 + 2) = *((_OWORD *)v124 - 2);
                    *((_OWORD *)v124 + 3) = v126;
                    float v127 = *(v124 - 32);
                    v124 -= 16;
                  }
                  while (v123 < v127);
                  *long long v124 = v123;
                  *((_OWORD *)v124 + 3) = *(_OWORD *)&v164[12];
                  *(_OWORD *)(v124 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)v164;
                  *(_OWORD *)(v124 + 5) = v155;
                  *(_OWORD *)(v124 + 1) = v145;
                }
                v76 += 16;
                a1 = v122;
              }
              while ((float *)(v122 + 64) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v88 = (v12 - 2) >> 1;
              int64_t v89 = v88;
              do
              {
                int64_t v90 = v89;
                if (v88 >= v89)
                {
                  uint64_t v91 = (2 * v89) | 1;
                  unint64_t v92 = v10 + (v91 << 6);
                  if (2 * v90 + 2 < (uint64_t)v12 && *(float *)v92 < *(float *)(v92 + 64))
                  {
                    v92 += 64;
                    uint64_t v91 = 2 * v90 + 2;
                  }
                  unint64_t v93 = v10 + (v90 << 6);
                  float v94 = *(float *)v93;
                  if (*(float *)v92 >= *(float *)v93)
                  {
                    *(_OWORD *)&v162[12] = *(_OWORD *)(v93 + 48);
                    long long v153 = *(_OWORD *)(v93 + 20);
                    *(_OWORD *)long long v162 = *(_OWORD *)(v93 + 36);
                    long long v143 = *(_OWORD *)(v93 + 4);
                    do
                    {
                      uint64_t v95 = (_OWORD *)v93;
                      unint64_t v93 = v92;
                      long long v96 = *(_OWORD *)v92;
                      long long v97 = *(_OWORD *)(v92 + 16);
                      long long v98 = *(_OWORD *)(v92 + 48);
                      v95[2] = *(_OWORD *)(v92 + 32);
                      v95[3] = v98;
                      *uint64_t v95 = v96;
                      v95[1] = v97;
                      if (v88 < v91) {
                        break;
                      }
                      uint64_t v99 = 2 * v91;
                      uint64_t v91 = (2 * v91) | 1;
                      unint64_t v92 = v10 + (v91 << 6);
                      uint64_t v100 = v99 + 2;
                      if (v100 < (uint64_t)v12 && *(float *)v92 < *(float *)(v92 + 64))
                      {
                        v92 += 64;
                        uint64_t v91 = v100;
                      }
                    }
                    while (*(float *)v92 >= v94);
                    *(float *)unint64_t v93 = v94;
                    *(_OWORD *)(v93 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v162[12];
                    *(_OWORD *)(v93 + 36) = *(_OWORD *)v162;
                    *(_OWORD *)(v93 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v153;
                    *(_OWORD *)(v93 + 4) = v143;
                  }
                }
                int64_t v89 = v90 - 1;
              }
              while (v90);
              uint64_t v101 = (unint64_t)v11 >> 6;
              do
              {
                uint64_t v102 = 0;
                long long v163 = *(_OWORD *)(v10 + 32);
                long long v171 = *(_OWORD *)(v10 + 48);
                long long v144 = *(_OWORD *)v10;
                long long v154 = *(_OWORD *)(v10 + 16);
                long long v103 = (float *)v10;
                do
                {
                  uint64_t v104 = v103;
                  v103 += 16 * v102 + 16;
                  uint64_t v105 = 2 * v102;
                  uint64_t v102 = (2 * v102) | 1;
                  uint64_t v106 = v105 + 2;
                  if (v106 < v101 && *v103 < v103[16])
                  {
                    v103 += 16;
                    uint64_t v102 = v106;
                  }
                  long long v107 = *(_OWORD *)v103;
                  long long v108 = *((_OWORD *)v103 + 1);
                  long long v109 = *((_OWORD *)v103 + 3);
                  *((_OWORD *)v104 + 2) = *((_OWORD *)v103 + 2);
                  *((_OWORD *)v104 + 3) = v109;
                  *(_OWORD *)uint64_t v104 = v107;
                  *((_OWORD *)v104 + 1) = v108;
                }
                while (v102 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
                a2 -= 16;
                if (v103 == a2)
                {
                  *((_OWORD *)v103 + 2) = v163;
                  *((_OWORD *)v103 + 3) = v171;
                  *(_OWORD *)long long v103 = v144;
                  *((_OWORD *)v103 + 1) = v154;
                }
                else
                {
                  long long v110 = *(_OWORD *)a2;
                  long long v111 = *((_OWORD *)a2 + 1);
                  long long v112 = *((_OWORD *)a2 + 3);
                  *((_OWORD *)v103 + 2) = *((_OWORD *)a2 + 2);
                  *((_OWORD *)v103 + 3) = v112;
                  *(_OWORD *)long long v103 = v110;
                  *((_OWORD *)v103 + 1) = v111;
                  *((_OWORD *)a2 + 2) = v163;
                  *((_OWORD *)a2 + 3) = v171;
                  *(_OWORD *)a2 = v144;
                  *((_OWORD *)a2 + 1) = v154;
                  uint64_t v113 = (uint64_t)v103 - v10 + 64;
                  if (v113 >= 65)
                  {
                    unint64_t v114 = (((unint64_t)v113 >> 6) - 2) >> 1;
                    long long v115 = (float *)(v10 + (v114 << 6));
                    float v116 = *v103;
                    if (*v115 < *v103)
                    {
                      *(_OWORD *)&v136[12] = *((_OWORD *)v103 + 3);
                      long long v133 = *(_OWORD *)(v103 + 5);
                      *(_OWORD *)long long v136 = *(_OWORD *)(v103 + 9);
                      long long v130 = *(_OWORD *)(v103 + 1);
                      do
                      {
                        long long v117 = v103;
                        long long v103 = v115;
                        long long v118 = *(_OWORD *)v115;
                        long long v119 = *((_OWORD *)v115 + 1);
                        long long v120 = *((_OWORD *)v115 + 3);
                        *((_OWORD *)v117 + 2) = *((_OWORD *)v115 + 2);
                        *((_OWORD *)v117 + 3) = v120;
                        *(_OWORD *)long long v117 = v118;
                        *((_OWORD *)v117 + 1) = v119;
                        if (!v114) {
                          break;
                        }
                        unint64_t v114 = (v114 - 1) >> 1;
                        long long v115 = (float *)(v10 + (v114 << 6));
                      }
                      while (*v115 < v116);
                      *long long v103 = v116;
                      *((_OWORD *)v103 + 3) = *(_OWORD *)&v136[12];
                      *(_OWORD *)(v103 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)v136;
                      *(_OWORD *)(v103 + 5) = v133;
                      *(_OWORD *)(v103 + 1) = v130;
                    }
                  }
                }
              }
              while (v101-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + (v12 >> 1 << 6);
          if ((unint64_t)v11 > 0x2000)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v12 >> 1 << 6)), a2 - 16);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v14 - 64), a2 - 32);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v13 << 6)), a2 - 48);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v14 - 64), (float *)v14, (float *)(a1 + 64 + (v13 << 6)));
            long long v156 = *(_OWORD *)(a1 + 32);
            long long v165 = *(_OWORD *)(a1 + 48);
            long long v137 = *(_OWORD *)a1;
            long long v146 = *(_OWORD *)(a1 + 16);
            long long v15 = *(_OWORD *)v14;
            long long v16 = *(_OWORD *)(v14 + 16);
            long long v17 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v14 + 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v17;
            *(_OWORD *)a1 = v15;
            *(_OWORD *)(a1 + 16) = v16;
            *(_OWORD *)(v14 + 32) = v156;
            *(_OWORD *)(v14 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v165;
            *(_OWORD *)unint64_t v14 = v137;
            *(_OWORD *)(v14 + 16) = v146;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v12 >> 1 << 6)), (float *)a1, a2 - 16);
          }
          --a3;
          float v18 = *(float *)a1;
          if ((a4 & 1) != 0 || *(float *)(a1 - 64) < v18) {
            break;
          }
          *(_OWORD *)&v135[12] = *(_OWORD *)(a1 + 48);
          long long v132 = *(_OWORD *)(a1 + 20);
          *(_OWORD *)long long v135 = *(_OWORD *)(a1 + 36);
          long long v129 = *(_OWORD *)(a1 + 4);
          if (v18 >= *(a2 - 16))
          {
            unint64_t v36 = a1 + 64;
            do
            {
              unint64_t v10 = v36;
              if (v36 >= (unint64_t)a2) {
                break;
              }
              v36 += 64;
            }
            while (v18 >= *(float *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              float v35 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v18 >= v35);
          }
          long long v37 = a2;
          if (v10 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              float v38 = *(v37 - 16);
              v37 -= 16;
            }
            while (v18 < v38);
          }
          while (v10 < (unint64_t)v37)
          {
            long long v158 = *(_OWORD *)(v10 + 32);
            long long v167 = *(_OWORD *)(v10 + 48);
            long long v139 = *(_OWORD *)v10;
            long long v148 = *(_OWORD *)(v10 + 16);
            long long v39 = *(_OWORD *)v37;
            long long v40 = *((_OWORD *)v37 + 1);
            long long v41 = *((_OWORD *)v37 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v37 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v41;
            *(_OWORD *)unint64_t v10 = v39;
            *(_OWORD *)(v10 + 16) = v40;
            *((_OWORD *)v37 + 2) = v158;
            *((_OWORD *)v37 + 3) = v167;
            *(_OWORD *)long long v37 = v139;
            *((_OWORD *)v37 + 1) = v148;
            do
            {
              float v42 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v18 >= v42);
            do
            {
              float v43 = *(v37 - 16);
              v37 -= 16;
            }
            while (v18 < v43);
          }
          BOOL v4 = v10 - 64 >= a1;
          BOOL v5 = v10 - 64 == a1;
          if (v10 - 64 != a1)
          {
            long long v44 = *(_OWORD *)(v10 - 64);
            long long v45 = *(_OWORD *)(v10 - 48);
            long long v46 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v46;
            *(_OWORD *)a1 = v44;
            *(_OWORD *)(a1 + 16) = v45;
          }
          a4 = 0;
          *(float *)(v10 - 64) = v18;
          *(_OWORD *)(v10 - 16) = *(_OWORD *)&v135[12];
          *(_OWORD *)(v10 - 28) = *(_OWORD *)v135;
          *(_OWORD *)(v10 - 44) = v132;
          *(_OWORD *)(v10 - 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v129;
        }
        uint64_t v19 = 0;
        *(_OWORD *)&v134[12] = *(_OWORD *)(a1 + 48);
        long long v131 = *(_OWORD *)(a1 + 20);
        *(_OWORD *)long long v134 = *(_OWORD *)(a1 + 36);
        long long v128 = *(_OWORD *)(a1 + 4);
        do
        {
          float v20 = *(float *)(a1 + v19 + 64);
          v19 += 64;
        }
        while (v20 < v18);
        unint64_t v21 = a1 + v19;
        long long v22 = a2;
        if (v19 == 64)
        {
          long long v22 = a2;
          do
          {
            if (v21 >= (unint64_t)v22) {
              break;
            }
            float v24 = *(v22 - 16);
            v22 -= 16;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            float v23 = *(v22 - 16);
            v22 -= 16;
          }
          while (v23 >= v18);
        }
        unint64_t v10 = a1 + v19;
        if (v21 < (unint64_t)v22)
        {
          long long v25 = v22;
          do
          {
            long long v157 = *(_OWORD *)(v10 + 32);
            long long v166 = *(_OWORD *)(v10 + 48);
            long long v138 = *(_OWORD *)v10;
            long long v147 = *(_OWORD *)(v10 + 16);
            long long v26 = *(_OWORD *)v25;
            long long v27 = *((_OWORD *)v25 + 1);
            long long v28 = *((_OWORD *)v25 + 3);
            *(_OWORD *)(v10 + 32) = *((_OWORD *)v25 + 2);
            *(_OWORD *)(v10 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v28;
            *(_OWORD *)unint64_t v10 = v26;
            *(_OWORD *)(v10 + 16) = v27;
            *((_OWORD *)v25 + 2) = v157;
            *((_OWORD *)v25 + 3) = v166;
            *(_OWORD *)long long v25 = v138;
            *((_OWORD *)v25 + 1) = v147;
            do
            {
              float v29 = *(float *)(v10 + 64);
              v10 += 64;
            }
            while (v29 < v18);
            do
            {
              float v30 = *(v25 - 16);
              v25 -= 16;
            }
            while (v30 >= v18);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 64 != a1)
        {
          long long v31 = *(_OWORD *)(v10 - 64);
          long long v32 = *(_OWORD *)(v10 - 48);
          long long v33 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v33;
          *(_OWORD *)a1 = v31;
          *(_OWORD *)(a1 + 16) = v32;
        }
        *(float *)(v10 - 64) = v18;
        *(_OWORD *)(v10 - 16) = *(_OWORD *)&v134[12];
        *(_OWORD *)(v10 - 28) = *(_OWORD *)v134;
        *(_OWORD *)(v10 - 44) = v131;
        *(_OWORD *)(v10 - 6re::VariableStepTimer::setClock((uint64_t)this, 0) = v128;
        if (v21 >= (unint64_t)v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v10 - 64, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v10 - 64);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v10, (uint64_t)a2))
      {
        break;
      }
      if (!v34) {
        goto LABEL_30;
      }
    }
    a2 = (float *)(v10 - 64);
    if (!v34) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 64);
      if (*(float *)(a2 - 64) < *(float *)a1)
      {
        long long v8 = *(_OWORD *)(a1 + 32);
        long long v7 = *(_OWORD *)(a1 + 48);
        long long v10 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a2 - 16);
        long long v13 = *v6;
        long long v12 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v11;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a1 + 16) = v12;
        *long long v6 = v10;
        *(_OWORD *)(a2 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v9;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 16) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a2 - 64));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a2 - 64));
      return 1;
    case 5:
      float v24 = (float *)(a1 + 64);
      long long v25 = (float *)(a1 + 128);
      long long v26 = (float *)(a1 + 192);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128), (long long *)(a1 + 192));
      float v28 = *(float *)(a2 - 64);
      long long v27 = (long long *)(a2 - 64);
      if (v28 >= *(float *)(a1 + 192)) {
        return 1;
      }
      long long v30 = *(_OWORD *)(a1 + 224);
      long long v29 = *(_OWORD *)(a1 + 240);
      long long v32 = *(_OWORD *)v26;
      long long v31 = *(_OWORD *)(a1 + 208);
      long long v33 = v27[3];
      long long v35 = *v27;
      long long v34 = v27[1];
      *(_OWORD *)(a1 + 224) = v27[2];
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v33;
      *(_OWORD *)long long v26 = v35;
      *(_OWORD *)(a1 + 208) = v34;
      long long *v27 = v32;
      v27[1] = v31;
      void v27[2] = v30;
      v27[3] = v29;
      if (*v26 >= *v25) {
        return 1;
      }
      long long v37 = *(_OWORD *)(a1 + 160);
      long long v36 = *(_OWORD *)(a1 + 176);
      long long v39 = *(_OWORD *)v25;
      long long v38 = *(_OWORD *)(a1 + 144);
      long long v40 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)long long v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 144) = v40;
      long long v41 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 176) = v41;
      *(_OWORD *)long long v26 = v39;
      *(_OWORD *)(a1 + 208) = v38;
      *(_OWORD *)(a1 + 224) = v37;
      *(_OWORD *)(a1 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v36;
      if (*v25 >= *v24) {
        return 1;
      }
      long long v43 = *(_OWORD *)(a1 + 96);
      long long v42 = *(_OWORD *)(a1 + 112);
      long long v45 = *(_OWORD *)v24;
      long long v44 = *(_OWORD *)(a1 + 80);
      long long v46 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)float v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v46;
      long long v47 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 112) = v47;
      *(_OWORD *)long long v25 = v45;
      *(_OWORD *)(a1 + 144) = v44;
      *(_OWORD *)(a1 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = v43;
      *(_OWORD *)(a1 + 176) = v42;
      if (*(float *)(a1 + 64) >= *(float *)a1) {
        return 1;
      }
      long long v49 = *(_OWORD *)(a1 + 32);
      long long v48 = *(_OWORD *)(a1 + 48);
      long long v51 = *(_OWORD *)a1;
      long long v50 = *(_OWORD *)(a1 + 16);
      long long v52 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)a1 = *(_OWORD *)v24;
      *(_OWORD *)(a1 + 16) = v52;
      long long v53 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 96);
      *(_OWORD *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v53;
      *(_OWORD *)float v24 = v51;
      *(_OWORD *)(a1 + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = v50;
      BOOL result = 1;
      *(_OWORD *)(a1 + 96) = v49;
      *(_OWORD *)(a1 + 112) = v48;
      return result;
    default:
      unint64_t v14 = (float *)(a1 + 128);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + 64), (float *)(a1 + 128));
      uint64_t v15 = a1 + 192;
      if (a1 + 192 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    float v18 = *(float *)v15;
    if (*(float *)v15 < *v14)
    {
      long long v54 = *(_OWORD *)(v15 + 4);
      long long v55 = *(_OWORD *)(v15 + 20);
      *(_OWORD *)float v56 = *(_OWORD *)(v15 + 36);
      *(_OWORD *)&v56[12] = *(_OWORD *)(v15 + 48);
      uint64_t v19 = v16;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        long long v21 = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v20 + 192) = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 208) = v21;
        long long v22 = *(_OWORD *)(a1 + v19 + 176);
        *(_OWORD *)(v20 + 224) = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v20 + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = v22;
        if (v19 == -128) {
          break;
        }
        v19 -= 64;
        if (v18 >= *(float *)(v20 + 64))
        {
          uint64_t v23 = a1 + v19 + 192;
          goto LABEL_12;
        }
      }
      uint64_t v23 = a1;
LABEL_12:
      *(float *)uint64_t v23 = v18;
      *(_OWORD *)(v23 + 4) = v54;
      *(_OWORD *)(v23 + 2re::VariableStepTimer::setClock((uint64_t)this, 0) = v55;
      *(_OWORD *)(v23 + 36) = *(_OWORD *)v56;
      *(_OWORD *)(v23 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)&v56[12];
      if (++v17 == 8) {
        return v15 + 64 == a2;
      }
    }
    unint64_t v14 = (float *)v15;
    v16 += 64;
    v15 += 64;
    if (v15 == a2) {
      return 1;
    }
  }
}

float32x2_t re::pathprocessing::QuadraticBezierBVH::build(uint64_t **this)
{
  std::vector<re::pathprocessing::Bounds2<float>>::resize((uint64_t)(this + 2), 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - **this) >> 3));
  uint64_t v3 = **this;
  if ((*this)[1] != v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      long long v7 = (float32x2_t *)(v3 + v4);
      float32x2_t v8 = v7[1];
      float32x2_t v9 = vminnm_f32(*v7, v8);
      float32x2_t v10 = vmaxnm_f32(*v7, v8);
      float32x2_t v11 = v7[2];
      float32x2_t result = vmaxnm_f32(v10, v11);
      long long v12 = (float32x2_t *)&this[2][v5];
      *long long v12 = vminnm_f32(v9, v11);
      v12[1] = result;
      ++v6;
      uint64_t v3 = **this;
      v5 += 2;
      v4 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - v3) >> 3));
  }
  return result;
}

void std::vector<re::pathprocessing::Bounds2<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<re::pathprocessing::Bounds2<float>>::__append((void **)a1, a2 - v2);
  }
}

void re::pathprocessing::QuadraticBezierBVH::buildGroup(uint64_t a1, void *a2)
{
  if (*a2 != a2[1]) {
    re::pathprocessing::QuadraticBezierBVH::buildGroupRange();
  }
}

void re::pathprocessing::QuadraticBezierBVH::buildGroupRange()
{
}

uint64_t re::pathprocessing::QuadraticBezierBVH::intersect(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, float32x2_t *a5)
{
  v106[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 8))
  {
    v106[0] = *(void *)(a1 + 8);
    long long v98 = 0u;
    long long v99 = 0u;
    long long v103 = (char *)&v98 + 8;
    uint64_t v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(1uLL);
    uint64_t v101 = v100;
    *(void *)&long long v102 = v100;
    *((void *)&v102 + 1) = &v100[8 * v10];
    uint64_t v105 = operator new(0x1000uLL);
    std::__split_buffer<zip_entry_t *>::push_back(&v100, &v105);
    float32x2_t v11 = v101;
    __p[0] = v100;
    __p[1] = v101;
    long long v98 = v102;
    uint64_t v13 = v102;
    uint64_t v15 = *((void *)&v99 + 1);
    unint64_t v14 = (char *)v99;
    uint64_t v16 = &v101[8 * (((void)v99 + *((void *)&v99 + 1)) >> 9)];
    uint64_t v17 = *(void *)v16;
    if ((char *)v102 == v101) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = *(void *)v16 + 8 * ((v99 + *((void *)&v99 + 1)) & 0x1FF);
    }
    uint64_t v19 = (v18 - v17) >> 3;
    if (v18 - v17 < -7)
    {
      unint64_t v23 = 510 - v19;
      long long v21 = &v16[-8 * (v23 >> 9)];
      uint64_t v22 = *(void *)v21 + 8 * (~(_WORD)v23 & 0x1FF);
    }
    else
    {
      unint64_t v20 = v19 + 1;
      long long v21 = &v16[8 * (v20 >> 9)];
      uint64_t v22 = *(void *)v21 + 8 * (v20 & 0x1FF);
    }
    if (v18 != v22)
    {
      float v24 = v106;
      do
      {
        long long v25 = (void *)(v17 + 4096);
        if (v16 == v21) {
          long long v25 = (void *)v22;
        }
        if ((void *)v18 == v25)
        {
          long long v25 = (void *)v18;
        }
        else
        {
          long long v26 = (void *)v18;
          do
          {
            uint64_t v27 = *v24++;
            *v26++ = v27;
          }
          while (v26 != v25);
        }
        v15 += ((uint64_t)v25 - v18) >> 3;
        if (v16 == v21) {
          break;
        }
        uint64_t v28 = *((void *)v16 + 1);
        v16 += 8;
        uint64_t v17 = v28;
        uint64_t v18 = v28;
      }
      while (v28 != v22);
      float32x2_t v11 = (char *)__p[1];
      uint64_t v13 = v98;
    }
    uint64_t v100 = (char *)__p[0];
    uint64_t v101 = v11;
    *(void *)&long long v102 = v13;
    *((void *)&v102 + 1) = *((void *)&v98 + 1);
    *(_OWORD *)CMTime __p = 0u;
    long long v98 = 0u;
    long long v103 = v14;
    uint64_t v104 = v15;
    long long v99 = 0uLL;
    std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100]((uint64_t)__p);
    char v12 = 0;
    if (v15)
    {
      do
      {
        uint64_t v29 = (((void)v102 - (void)v101) << 6) - 1;
        if ((char *)v102 == v101) {
          uint64_t v29 = 0;
        }
        unint64_t v30 = (unint64_t)&v103[v15 - 1];
        long long v31 = *(float32x2_t **)(*(void *)&v101[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF));
        uint64_t v104 = v15 - 1;
        if (v29 - v30 >= 0x400)
        {
          operator delete(*(void **)(v102 - 8));
          *(void *)&long long v102 = v102 - 8;
        }
        if (*v31 != a4)
        {
          uint64_t v32 = 0;
          float v33 = fabsf(a3->f32[0]);
          float v34 = 0.0;
          char v35 = 1;
          float v36 = INFINITY;
          while (1)
          {
            char v37 = v35;
            if (v33 >= 0.00001)
            {
              float v38 = 1.0 / a3->f32[v32];
              float v39 = a2->f32[v32];
              float v40 = v38 * (float)(v31[4].f32[v32] - v39);
              float v41 = v38 * (float)(v31[5].f32[v32] - v39);
              if (v40 <= v41) {
                float v42 = v40;
              }
              else {
                float v42 = v41;
              }
              if (v40 <= v41) {
                float v43 = v41;
              }
              else {
                float v43 = v40;
              }
              float v44 = (tgamma(3.0) * 2.0 + 1.0) * v43;
              if (v42 > v34) {
                float v34 = v42;
              }
              if (v36 > v44) {
                float v36 = v44;
              }
              if (v34 > v36) {
                break;
              }
            }
            char v35 = 0;
            uint64_t v32 = 1;
            if ((v37 & 1) == 0)
            {
              if (v31[1])
              {
                __p[0] = (void *)v31[1];
                std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(&v100, __p);
                __p[0] = (void *)v31[2];
                std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(&v100, __p);
              }
              else
              {
                long long v45 = (re::pathprocessing::Bezier2 *)(**(void **)a1 + 24 * *(void *)&v31[3]);
                __p[0] = (void *)re::pathprocessing::Bezier2::intersectRay(v45, a2, a3);
                __p[1] = v46;
                char v47 = 0;
                if (v46)
                {
                  float v48 = a5[5].f32[0];
                  uint64_t v49 = 4 * (void)v46;
                  long long v50 = __p;
                  do
                  {
                    float v51 = *(float *)v50;
                    float32x2_t v52 = *(float32x2_t *)v45;
                    float32x2_t v53 = *(float32x2_t *)((char *)v45 + 8);
                    float32x2_t v54 = *(float32x2_t *)((char *)v45 + 16);
                    float32x2_t v55 = vadd_f32(vmul_n_f32(v54, v51 * v51), vadd_f32(vmul_n_f32(*(float32x2_t *)v45, (float)(1.0 - *(float *)v50) * (float)(1.0 - *(float *)v50)), vmul_n_f32(v53, (float)(v51 + v51) * (float)(1.0 - *(float *)v50))));
                    float32x2_t v56 = vabd_f32(v55, *a2);
                    uint64_t v105 = (void *)vsub_f32(v55, *a2);
                    v56.i8[0] = vmvn_s8((int8x8_t)vcge_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1))).u8[0];
                    float v57 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v56.i8[0] & 1)))
                        / a3->f32[v56.i8[0] & 1];
                    if (v57 <= v48)
                    {
                      float32x2_t v58 = vadd_f32(vmul_n_f32(v54, v51), vsub_f32(vmul_n_f32(v52, v51 + -1.0), vmul_n_f32(v53, (float)(v51 * 2.0) + -1.0)));
                      float32x2_t v59 = vadd_f32(v58, v58);
                      float32x2_t v60 = vadd_f32(v54, vsub_f32(v52, vadd_f32(v53, v53)));
                      float32x2_t v61 = vadd_f32(v60, v60);
                      int v62 = (v51 != 1.0) & (fabsf(v51 + -1.0) > 0.0001);
                      int8x8_t v63 = (int8x8_t)vneg_f32(v59);
                      int8x8_t v64 = (int8x8_t)vneg_f32(v61);
                      unsigned int v65 = v62 ? -1 : 0;
                      int8x8_t v66 = (int8x8_t)vdup_n_s32(v65);
                      float32x2_t v67 = (float32x2_t)vbsl_s8(v66, (int8x8_t)v61, v64);
                      float32x2_t v68 = (float32x2_t)vbsl_s8(v66, (int8x8_t)v59, v63);
                      if (v57 != v48 && vabds_f32(v57, v48) > 0.0001) {
                        goto LABEL_52;
                      }
                      float32x2_t v69 = vmul_f32(v68, v68);
                      v69.i32[0] = vadd_f32(v69, (float32x2_t)vdup_lane_s32((int32x2_t)v69, 1)).u32[0];
                      float32x2_t v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
                      float32x2_t v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
                      float32x2_t v72 = vmul_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
                      float32x2_t v73 = *a3;
                      int32x2_t v74 = (int32x2_t)vmul_f32(*a3, v72);
                      float32x2_t v75 = a5[3];
                      float32x2_t v76 = vmul_f32(v75, v75);
                      v76.i32[0] = vadd_f32(v76, (float32x2_t)vdup_lane_s32((int32x2_t)v76, 1)).u32[0];
                      float32x2_t v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
                      float32x2_t v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
                      int32x2_t v79 = (int32x2_t)vmul_f32(*a3, vmul_n_f32(v75, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]));
                      float32x2_t v80 = vadd_f32((float32x2_t)vzip1_s32(v74, v79), (float32x2_t)vzip2_s32(v74, v79));
                      int8x8_t v81 = (int8x8_t)vneg_f32(v80);
                      int8x8_t v82 = (int8x8_t)vabs_f32(v80);
                      int8x8_t v83 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32((fabsf(v51) >= 0.0001) & v62), 0x1FuLL));
                      int8x8_t v84 = vbsl_s8(v83, v82, v81);
                      if (*(float *)v84.i32 >= *(float *)&v84.i32[1])
                      {
                        if (*(float *)v84.i32 != *(float *)&v84.i32[1]
                          && vabds_f32(*(float *)v84.i32, *(float *)&v84.i32[1]) > 0.0001)
                        {
                          goto LABEL_52;
                        }
                        float32x2_t v85 = vmul_f32(v67, v67);
                        v85.i32[0] = vadd_f32(v85, (float32x2_t)vdup_lane_s32((int32x2_t)v85, 1)).u32[0];
                        float32x2_t v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
                        float32x2_t v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
                        int32x2_t v88 = (int32x2_t)vmul_f32(v73, vmul_n_f32(v67, vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).f32[0]));
                        float32x2_t v89 = a5[4];
                        float32x2_t v90 = vmul_f32(v89, v89);
                        v90.i32[0] = vadd_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).u32[0];
                        float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
                        float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
                        int32x2_t v93 = (int32x2_t)vmul_f32(v73, vmul_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]));
                        float32x2_t v94 = vadd_f32((float32x2_t)vzip1_s32(v88, v93), (float32x2_t)vzip2_s32(v88, v93));
                        float32x2_t v95 = (float32x2_t)vbsl_s8(v83, (int8x8_t)vabs_f32(v94), (int8x8_t)vneg_f32(v94));
                        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v95, 1), v95).u8[0] & 1) == 0)
                        {
LABEL_52:
                          *a5 = *v31;
                          a5[1] = v31[3];
                          a5[2] = v55;
                          a5[3] = v68;
                          a5[4] = v67;
                          a5[5].f32[0] = v57;
                          a5[5].f32[1] = v51;
                          char v47 = 1;
                          float v48 = v57;
                        }
                      }
                    }
                    long long v50 = (void **)((char *)v50 + 4);
                    v49 -= 4;
                  }
                  while (v49);
                }
                v12 |= v47;
              }
              break;
            }
          }
        }
        uint64_t v15 = v104;
      }
      while (v104);
    }
    std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100]((uint64_t)&v100);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t *std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *float32x2_t result = a2;
  if (v2)
  {
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v2 + 16, 0);
    std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100](v2 + 8, 0);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void std::vector<re::pathprocessing::Bounds2<float>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4 = (int32x2_t *)a1[1];
  uint64_t v5 = a1[2];
  if (a2 <= (v5 - (unsigned char *)v4) >> 4)
  {
    if (a2)
    {
      float32x2_t v11 = &v4[2 * a2];
      int32x2_t v12 = vdup_n_s32(0x7F800000u);
      do
      {
        *uint64_t v4 = v12;
        v4[1] = (int32x2_t)0x7F0000007FLL;
        v4 += 2;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = (char *)v4 - (unsigned char *)*a1;
    unint64_t v7 = a2 + (v6 >> 4);
    if (v7 >> 60) {
      abort();
    }
    uint64_t v8 = v5 - (unsigned char *)*a1;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v10 = (char *)operator new(16 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (int32x2_t *)&v10[16 * (v6 >> 4)];
    unint64_t v14 = &v13[2 * a2];
    int32x2_t v15 = vdup_n_s32(0x7F800000u);
    uint64_t v16 = v13;
    do
    {
      *uint64_t v16 = v15;
      v16[1] = (int32x2_t)0x7F0000007FLL;
      v16 += 2;
    }
    while (v16 != v14);
    uint64_t v17 = &v10[16 * v9];
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)v13[-2].i8 = *((_OWORD *)v18 - 1);
        v13 -= 2;
        v18 -= 16;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::~deque[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::deque<re::pathprocessing::QuadraticBezierBVH::Node const*>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = (char *)a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v5 - v4) << 6) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x200)
    {
      unint64_t v23 = (v5 - v4) >> 3;
      float v24 = (char *)a1[3];
      uint64_t v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = v25 >> 2;
        }
        int8x8_t v63 = a1 + 3;
        *(void *)&long long v61 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v26);
        *((void *)&v61 + 1) = v61 + 8 * v23;
        *(void *)&long long v62 = *((void *)&v61 + 1);
        *((void *)&v62 + 1) = v61 + 8 * v27;
        float32x2_t v60 = operator new(0x1000uLL);
        std::__split_buffer<zip_entry_t *>::push_back(&v61, &v60);
        for (uint64_t i = (void *)a1[2]; i != (void *)a1[1]; std::__split_buffer<zip_entry_t *>::push_front((uint64_t)&v61, i))--i;
        uint64_t v29 = (char *)*a1;
        long long v30 = v62;
        *(_OWORD *)a1 = v61;
        *((_OWORD *)a1 + 1) = v30;
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_36;
      }
      if (v24 != v5)
      {
        *(void *)&long long v61 = operator new(0x1000uLL);
        std::__split_buffer<zip_entry_t *>::push_back(a1, &v61);
LABEL_36:
        unint64_t v4 = (char *)a1[1];
        uint64_t v7 = a1[5];
        unint64_t v9 = a1[4] + v7;
        goto LABEL_37;
      }
      *(void *)&long long v61 = operator new(0x1000uLL);
      std::__split_buffer<zip_entry_t *>::push_front((uint64_t)a1, &v61);
      float v42 = (void *)a1[1];
      unint64_t v5 = (char *)a1[2];
      uint64_t v44 = *v42;
      float v43 = (char *)(v42 + 1);
      uint64_t v11 = v44;
      a1[1] = v43;
      if (v5 == (char *)a1[3])
      {
        uint64_t v45 = (uint64_t)&v43[-*a1];
        if ((unint64_t)v43 > *a1)
        {
          uint64_t v46 = v45 >> 3;
          BOOL v15 = v45 >> 3 < -1;
          uint64_t v47 = (v45 >> 3) + 2;
          if (v15) {
            uint64_t v48 = v47;
          }
          else {
            uint64_t v48 = v46 + 1;
          }
          uint64_t v49 = -(v48 >> 1);
          uint64_t v50 = v48 >> 1;
          float v51 = &v43[-8 * v50];
          int64_t v52 = v5 - v43;
          if (v5 != v43)
          {
            memmove(&v43[-8 * v50], v43, v5 - v43);
            float v43 = (char *)a1[1];
          }
          unint64_t v5 = &v51[v52];
          uint64_t v22 = &v43[8 * v49];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v53 = 1;
        }
        else {
          unint64_t v53 = (uint64_t)&v5[-*a1] >> 2;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v53);
        float v33 = &v32[8 * (v53 >> 2)];
        char v35 = &v32[8 * v54];
        float32x2_t v55 = (uint64_t *)a1[1];
        unint64_t v5 = v33;
        uint64_t v56 = a1[2] - (void)v55;
        if (v56)
        {
          unint64_t v5 = &v33[v56 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v57 = 8 * (v56 >> 3);
          float32x2_t v58 = &v32[8 * (v53 >> 2)];
          do
          {
            uint64_t v59 = *v55++;
            *(void *)float32x2_t v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
LABEL_32:
        float v41 = (char *)*a1;
        *a1 = v32;
        a1[1] = v33;
        a1[2] = v5;
        a1[3] = v35;
        if (v41)
        {
          operator delete(v41);
          unint64_t v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 512;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            unint64_t v5 = (char *)a1[1];
          }
          uint64_t v22 = &v5[8 * v18];
          unint64_t v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_35;
        }
        if (v5 == (char *)*a1) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = (uint64_t)&v5[-*a1] >> 2;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v31);
        float v33 = &v32[8 * (v31 >> 2)];
        char v35 = &v32[8 * v34];
        float v36 = (uint64_t *)a1[1];
        unint64_t v5 = v33;
        uint64_t v37 = a1[2] - (void)v36;
        if (v37)
        {
          unint64_t v5 = &v33[v37 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v38 = 8 * (v37 >> 3);
          float v39 = &v32[8 * (v31 >> 2)];
          do
          {
            uint64_t v40 = *v36++;
            *(void *)float v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        goto LABEL_32;
      }
    }
LABEL_35:
    *(void *)unint64_t v5 = v11;
    a1[2] += 8;
    goto LABEL_36;
  }
LABEL_37:
  *(void *)(*(void *)&v4[(v9 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void re::pathprocessing::PathTopologyGenerator::getLoops(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v725 = *MEMORY[0x263EF8340];
  v674 = a1;
  v675 = a2;
  int v676 = a3;
  re::pathprocessing::BezierGraphInfo::BezierGraphInfo(&v677, a1);
  uint64_t v6 = (_anonymous_namespace_ *)re::pathprocessing::HDSMesh::HDSMesh((uint64_t)&v683, &v677);
  v695[0] = 0;
  v695[1] = 0;
  uint64_t v696 = 0;
  long long __p = 0u;
  long long v689 = 0u;
  long long v690 = 0u;
  long long v691 = 0u;
  long long v692 = 0u;
  long long v693 = 0u;
  char v694 = 0;
  uint64_t v7 = v679;
  unint64_t v8 = v680;
  if (v679 == v680) {
    goto LABEL_205;
  }
  if (v677 != v678 && v681 != v682 && v687)
  {
    uint64_t v651 = a4;
    LOBYTE(v704[0]) = 0;
    std::vector<BOOL>::vector(&v719, (v686 - (unsigned char *)v685) >> 4, (unsigned __int8 *)v704);
    uint64_t v10 = v685;
    unint64_t v9 = v686;
    if (v686 != v685)
    {
      unint64_t v11 = 0;
      do
      {
        if ((*(void *)(v719 + 8 * (v11 >> 6)) & (1 << v11)) == 0)
        {
          uint64_t v12 = (void *)v690;
          if ((unint64_t)v690 >= *((void *)&v690 + 1))
          {
            uint64_t v14 = (void *)*((void *)&v689 + 1);
            unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((void *)&v689 + 1)) >> 4);
            unint64_t v16 = v15 + 1;
            if (v15 + 1 > 0x333333333333333) {
              goto LABEL_911;
            }
            if (0x999999999999999ALL * ((uint64_t)(*((void *)&v690 + 1) - *((void *)&v689 + 1)) >> 4) > v16) {
              unint64_t v16 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v690 + 1) - *((void *)&v689 + 1)) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v690 + 1) - *((void *)&v689 + 1)) >> 4) >= 0x199999999999999) {
              unint64_t v17 = 0x333333333333333;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17)
            {
              if (v17 > 0x333333333333333) {
                goto LABEL_912;
              }
              uint64_t v18 = (char *)operator new(80 * v17);
            }
            else
            {
              uint64_t v18 = 0;
            }
            uint64_t v19 = &v18[80 * v15];
            *((void *)v19 + 8) = 0;
            *((void *)v19 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
            *(void *)uint64_t v19 = -1;
            *((void *)v19 + 1) = -1;
            unint64_t v20 = &v18[80 * v17];
            *((_OWORD *)v19 + 1) = 0u;
            *((_OWORD *)v19 + 2) = 0u;
            *((_OWORD *)v19 + 3) = 0u;
            uint64_t v13 = v19 + 80;
            if (v12 == v14)
            {
              *((void *)&v689 + 1) = v19;
              *(void *)&long long v690 = v19 + 80;
              *((void *)&v690 + 1) = &v18[80 * v17];
            }
            else
            {
              do
              {
                *((_OWORD *)v19 - 5) = *((_OWORD *)v12 - 5);
                *((void *)v19 - 7) = 0;
                *((void *)v19 - 6) = 0;
                *((void *)v19 - 8) = 0;
                *((_OWORD *)v19 - 4) = *((_OWORD *)v12 - 4);
                *((void *)v19 - 6) = *(v12 - 6);
                *(v12 - 8) = 0;
                *(v12 - 7) = 0;
                *(v12 - 6) = 0;
                *((void *)v19 - 5) = 0;
                *((void *)v19 - 4) = 0;
                *((void *)v19 - 3) = 0;
                *(_OWORD *)(v19 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(v12 - 5);
                *((void *)v19 - 3) = *(v12 - 3);
                *(v12 - 5) = 0;
                *(v12 - 4) = 0;
                *(v12 - 3) = 0;
                *((_OWORD *)v19 - 1) = *((_OWORD *)v12 - 1);
                v19 -= 80;
                v12 -= 10;
              }
              while (v12 != v14);
              uint64_t v12 = (void *)*((void *)&v689 + 1);
              int64_t v21 = (void *)v690;
              *((void *)&v689 + 1) = v19;
              *(void *)&long long v690 = v13;
              *((void *)&v690 + 1) = v20;
              while (v21 != v12)
              {
                v21 -= 10;
                std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](v21);
              }
            }
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *(void *)(v690 + 64) = 0;
            v12[9] = 0;
            *uint64_t v12 = -1;
            v12[1] = -1;
            *((_OWORD *)v12 + 1) = 0u;
            *((_OWORD *)v12 + 2) = 0u;
            uint64_t v13 = v12 + 10;
            *((_OWORD *)v12 + 3) = 0u;
          }
          *(void *)&long long v690 = v13;
          unint64_t v22 = *(v13 - 6);
          uint64_t v667 = (uint64_t)(v13 - 6);
          unint64_t v23 = (unint64_t *)*(v13 - 7);
          if ((unint64_t)v23 >= v22)
          {
            uint64_t v25 = (unint64_t *)*(v13 - 8);
            uint64_t v26 = v23 - v25;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_911;
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              long long v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v667, v29);
              uint64_t v25 = (unint64_t *)*(v13 - 8);
              unint64_t v23 = (unint64_t *)*(v13 - 7);
            }
            else
            {
              long long v30 = 0;
            }
            unint64_t v31 = (unint64_t *)&v30[8 * v26];
            *unint64_t v31 = v11;
            float v24 = v31 + 1;
            while (v23 != v25)
            {
              unint64_t v32 = *--v23;
              *--unint64_t v31 = v32;
            }
            *(v13 - 8) = v31;
            *(v13 - 7) = v24;
            *(v13 - 6) = &v30[8 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *unint64_t v23 = v11;
            float v24 = v23 + 1;
          }
          *(v13 - 7) = v24;
          *(void *)(v719 + 8 * (v11 >> 6)) |= 1 << v11;
          unint64_t v664 = v11;
          *(void *)&long long v722 = v11;
          memset(v717, 0, sizeof(v717));
          std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
          *(_OWORD *)v704 = v717[0];
          *(_OWORD *)&v704[2] = v717[1];
          memset(v717, 0, sizeof(v717));
          *(_OWORD *)v705 = v717[2];
          std::deque<unsigned long>::~deque[abi:nn180100](v717);
          for (uint64_t i = *(void *)&v705[8]; *(void *)&v705[8]; uint64_t i = *(void *)&v705[8])
          {
            uint64_t v34 = i - 1;
            uint64_t v35 = *(void *)(*(void *)((char *)v704[1]
                                        + (((unint64_t)(*(void *)v705 + v34) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((*(void *)v705 + v34) & 0x1FF));
            *(void *)&v705[8] = v34;
            std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
            float v36 = (uint64_t *)((char *)v685 + 16 * v35);
            uint64_t v37 = *v36;
            do
            {
              uint64_t v38 = v683;
              float v39 = (char *)v683 + 48 * *((void *)v683 + 6 * v37 + 3);
              if (((*(void *)(v719 + ((*v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v39) & 1) == 0)
              {
                std::deque<unsigned long>::push_back(v704, (void *)v683 + 6 * *((void *)v683 + 6 * v37 + 3));
                *(void *)(v719 + ((*v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v39;
                float v41 = (char *)*(v13 - 7);
                unint64_t v40 = *(v13 - 6);
                if ((unint64_t)v41 >= v40)
                {
                  float v43 = (char *)*(v13 - 8);
                  uint64_t v44 = (v41 - v43) >> 3;
                  unint64_t v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 61) {
                    goto LABEL_911;
                  }
                  uint64_t v46 = v40 - (void)v43;
                  if (v46 >> 2 > v45) {
                    unint64_t v45 = v46 >> 2;
                  }
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v45;
                  }
                  if (v47)
                  {
                    uint64_t v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v667, v47);
                    float v43 = (char *)*(v13 - 8);
                    float v41 = (char *)*(v13 - 7);
                  }
                  else
                  {
                    uint64_t v48 = 0;
                  }
                  uint64_t v49 = &v48[8 * v44];
                  *(void *)uint64_t v49 = *v39;
                  float v42 = v49 + 8;
                  while (v41 != v43)
                  {
                    uint64_t v50 = *((void *)v41 - 1);
                    v41 -= 8;
                    *((void *)v49 - 1) = v50;
                    v49 -= 8;
                  }
                  *(v13 - 8) = v49;
                  *(v13 - 7) = v42;
                  *(v13 - 6) = &v48[8 * v47];
                  if (v43) {
                    operator delete(v43);
                  }
                }
                else
                {
                  *(void *)float v41 = *v39;
                  float v42 = v41 + 8;
                }
                *(v13 - 7) = v42;
              }
              int64_t v52 = (char *)*(v13 - 4);
              unint64_t v51 = *(v13 - 3);
              if ((unint64_t)v52 >= v51)
              {
                uint64_t v54 = (char *)*(v13 - 5);
                uint64_t v55 = (v52 - v54) >> 3;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61) {
                  goto LABEL_911;
                }
                uint64_t v57 = v51 - (void)v54;
                if (v57 >> 2 > v56) {
                  unint64_t v56 = v57 >> 2;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  uint64_t v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v13 - 3), v58);
                  uint64_t v54 = (char *)*(v13 - 5);
                  int64_t v52 = (char *)*(v13 - 4);
                }
                else
                {
                  uint64_t v59 = 0;
                }
                float32x2_t v60 = &v59[8 * v55];
                *(void *)float32x2_t v60 = v37;
                unint64_t v53 = v60 + 8;
                while (v52 != v54)
                {
                  uint64_t v61 = *((void *)v52 - 1);
                  v52 -= 8;
                  *((void *)v60 - 1) = v61;
                  v60 -= 8;
                }
                *(v13 - 5) = v60;
                *(v13 - 4) = v53;
                *(v13 - 3) = &v59[8 * v58];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(void *)int64_t v52 = v37;
                unint64_t v53 = v52 + 8;
              }
              *(v13 - 4) = v53;
              uint64_t v37 = v38[6 * v37 + 1];
            }
            while (v37 != *v36);
          }
          std::deque<unsigned long>::~deque[abi:nn180100](v704);
          uint64_t v10 = v685;
          unint64_t v9 = v686;
          unint64_t v11 = v664;
        }
        ++v11;
      }
      while (v11 < (v9 - v10) >> 4);
    }
    if ((void)v719) {
      operator delete((void *)v719);
    }
    unint64_t v62 = 0x8E38E38E38E38E39 * ((v678 - v677) >> 3);
    uint64_t v63 = v689;
    int8x8_t v64 = (char *)__p;
    if (v62 <= (uint64_t)(v689 - __p) >> 2)
    {
      float32x2_t v69 = (char *)*((void *)&__p + 1);
      uint64_t v70 = *((void *)&__p + 1) - __p;
      unint64_t v71 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
      if (v71 >= v62) {
        uint64_t v72 = 0x8E38E38E38E38E39 * ((v678 - v677) >> 3);
      }
      else {
        uint64_t v72 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
      }
      if (v72) {
        bzero((void *)__p, 4 * v72);
      }
      BOOL v73 = v62 >= v71;
      unint64_t v74 = v62 - v71;
      if (v74 != 0 && v73)
      {
        bzero(v69, 4 * v62 - (v70 & 0xFFFFFFFFFFFFFFFCLL));
        float32x2_t v68 = &v69[4 * v74];
      }
      else
      {
        float32x2_t v68 = &v64[4 * v62];
      }
      *((void *)&__p + 1) = v68;
    }
    else
    {
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
        uint64_t v63 = 0;
        long long __p = 0uLL;
        *(void *)&long long v689 = 0;
      }
      if (v62 >> 62) {
        goto LABEL_911;
      }
      uint64_t v65 = v63 >> 1;
      if (v63 >> 1 <= v62) {
        uint64_t v65 = v62;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      std::vector<float>::__vallocate[abi:nn180100](&__p, v66);
      uint64_t v67 = *((void *)&__p + 1);
      bzero(*((void **)&__p + 1), 4 * v62);
      float32x2_t v68 = (char *)(v67 + 4 * v62);
      *((void *)&__p + 1) = v68;
      int8x8_t v64 = (char *)__p;
    }
    uint64_t v75 = v68 - v64;
    if (v68 != v64)
    {
      uint64_t v76 = 0;
      unint64_t v77 = v75 >> 2;
      uint64_t v78 = v677;
      if (v77 <= 1) {
        unint64_t v77 = 1;
      }
      int32x2_t v79 = v674;
      float32x2_t v80 = v675;
      do
      {
        int8x8_t v81 = (void *)(v78 + 72 * v76);
        uint64_t v82 = v81[1];
        if (v81[2] != v82)
        {
          unint64_t v83 = v81[4];
          uint64_t v84 = v81[5];
          float32x2_t v85 = (char **)(v82 + 8 * (v83 >> 9));
          float32x2_t v86 = *v85;
          float32x2_t v87 = &(*v85)[8 * (v83 & 0x1FF)];
          uint64_t v88 = *(void *)(v82 + (((v84 + v83) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v84 + v83) & 0x1FF);
          if (v87 != (char *)v88)
          {
            uint64_t v89 = *v79;
            uint64_t v90 = *v80;
            float v91 = *(float *)&v64[4 * v76];
            do
            {
              float32x2_t v92 = (float32x2_t *)(v89 + 24 * *(void *)v87);
              int v93 = *(_DWORD *)(v90 + 4 * *(void *)v87);
              float v91 = v91
                  + vmlas_n_f32((float)-COERCE_FLOAT(HIDWORD(*(unint64_t *)v92)) * COERCE_FLOAT(*(void *)&v92[2]), COERCE_FLOAT(HIDWORD(*(void *)&v92[2])), COERCE_FLOAT(*v92))* 0.5;
              *(float *)&v64[4 * v76] = v91;
              if (v93 == 3)
              {
                float32x2_t v94 = vsub_f32(v92[1], *v92);
                float32x2_t v95 = vsub_f32(v92[2], *v92);
                float v91 = v91 + (float)(vmlas_n_f32((float)-v94.f32[1] * v95.f32[0], v95.f32[1], v94.f32[0]) * 0.33333);
                *(float *)&v64[4 * v76] = v91;
              }
              v87 += 8;
              if (v87 - v86 == 4096)
              {
                long long v96 = v85[1];
                ++v85;
                float32x2_t v86 = v96;
                float32x2_t v87 = v96;
              }
            }
            while (v87 != (char *)v88);
          }
        }
        ++v76;
      }
      while (v76 != v77);
    }
    uint64_t v97 = *((void *)&v689 + 1);
    long long v98 = v685;
    if ((void)v690 != *((void *)&v689 + 1))
    {
      uint64_t v99 = 0;
      uint64_t v100 = v683;
      uint64_t v101 = v677;
      unint64_t v102 = ((void)v690 - *((void *)&v689 + 1)) / 80;
      if (v102 <= 1) {
        unint64_t v102 = 1;
      }
      do
      {
        long long v103 = (void *)(v97 + 80 * v99);
        uint64_t v104 = v103[2];
        uint64_t v105 = v103[3];
        uint64_t v106 = v105 - v104;
        if (v105 != v104)
        {
          uint64_t v107 = 0;
          unint64_t v108 = v106 >> 3;
          if (v108 <= 1) {
            unint64_t v108 = 1;
          }
          float v109 = INFINITY;
          do
          {
            unint64_t v110 = 0;
            uint64_t v111 = *(void *)(v104 + 8 * v107);
            float v112 = 0.0;
            uint64_t v113 = v98[2 * v111];
            do
            {
              unint64_t v114 = (char *)&v100[6 * v113];
              float v115 = *(float *)&v64[4 * *((void *)v114 + 4)];
              if (*((_DWORD *)v114 + 10)) {
                float v115 = -v115;
              }
              float v112 = v112 + v115;
              uint64_t v113 = *((void *)v114 + 1);
              ++v110;
            }
            while (v113 != v98[2 * v111]);
            if (v112 < v109)
            {
              *long long v103 = v111;
              float v109 = v112;
            }
            if (fabsf(v112) < 0.0001 && v110 <= 2) {
              v98[2 * v111 + 1] |= 8uLL;
            }
            if (v110 == 1) {
              v98[2 * v111 + 1] |= 4uLL;
            }
            ++v107;
          }
          while (v107 != v108);
        }
        v98[2 * *v103 + 1] |= 1uLL;
        uint64_t v117 = v98[2 * *v103];
        uint64_t v118 = v97 + 80 * v99;
        long long v119 = (void *)(v118 + 64);
        long long v120 = (uint64_t *)(v118 + 72);
        float v121 = INFINITY;
        unint64_t v122 = v674;
        uint64_t v123 = v117;
        do
        {
          long long v124 = (void *)(v101 + 72 * v100[6 * v123 + 4]);
          uint64_t v125 = v124[1];
          if (v124[2] != v125)
          {
            unint64_t v126 = v124[4];
            uint64_t v127 = v124[5];
            long long v128 = (char **)(v125 + 8 * (v126 >> 9));
            long long v129 = *v128;
            long long v130 = (uint64_t *)&(*v128)[8 * (v126 & 0x1FF)];
            uint64_t v131 = *(void *)(v125 + (((v127 + v126) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v127 + v126) & 0x1FF);
            if (v130 != (uint64_t *)v131)
            {
              uint64_t v132 = *v122 + 4;
              do
              {
                uint64_t v133 = 0;
                uint64_t v134 = *v130;
                uint64_t v135 = v132 + 24 * *v130;
                char v136 = 1;
                do
                {
                  char v137 = v136;
                  float v138 = *(float *)(v135 + 8 * v133);
                  if (v138 < v121)
                  {
                    *long long v119 = v134;
                    uint64_t *v120 = v133;
                    float v121 = v138;
                  }
                  char v136 = 0;
                  uint64_t v133 = 2;
                }
                while ((v137 & 1) != 0);
                if ((char *)++v130 - v129 == 4096)
                {
                  long long v139 = v128[1];
                  ++v128;
                  long long v129 = v139;
                  long long v130 = (uint64_t *)v139;
                }
              }
              while (v130 != (uint64_t *)v131);
            }
          }
          uint64_t v123 = v100[6 * v123 + 1];
        }
        while (v123 != v117);
        ++v99;
      }
      while (v99 != v102);
    }
    uint64_t v140 = *((void *)&v692 + 1);
    uint64_t v141 = v686 - (unsigned char *)v98;
    unint64_t v142 = (v686 - (unsigned char *)v98) >> 4;
    uint64_t v143 = *((void *)&v693 + 1);
    if (v142 <= (uint64_t)(*((void *)&v693 + 1) - *((void *)&v692 + 1)) >> 2)
    {
      uint64_t v4 = v693;
      uint64_t v147 = v693 - *((void *)&v692 + 1);
      unint64_t v148 = (uint64_t)(v693 - *((void *)&v692 + 1)) >> 2;
      if (v148 >= v142) {
        uint64_t v149 = v142;
      }
      else {
        uint64_t v149 = (uint64_t)(v693 - *((void *)&v692 + 1)) >> 2;
      }
      if (v149) {
        bzero(*((void **)&v692 + 1), 4 * v149);
      }
      BOOL v73 = v142 >= v148;
      unint64_t v150 = v142 - v148;
      if (v150 != 0 && v73)
      {
        bzero((void *)v4, (((v141 >> 2) - (v147 & 0xFFFFFFFFFFFFFFFCLL) - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        uint64_t v151 = v4 + 4 * v150;
      }
      else
      {
        uint64_t v151 = v140 + 4 * v142;
      }
      *(void *)&long long v693 = v151;
    }
    else
    {
      uint64_t v4 = (uint64_t)&v692 + 8;
      if (*((void *)&v692 + 1))
      {
        *(void *)&long long v693 = *((void *)&v692 + 1);
        operator delete(*((void **)&v692 + 1));
        uint64_t v143 = 0;
        *((void *)&v692 + 1) = 0;
        long long v693 = 0uLL;
      }
      if (v141 < 0) {
        goto LABEL_911;
      }
      uint64_t v144 = v143 >> 1;
      if (v143 >> 1 <= v142) {
        uint64_t v144 = v142;
      }
      if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v145 = v144;
      }
      std::vector<float>::__vallocate[abi:nn180100]((void *)&v692 + 1, v145);
      uint64_t v146 = v693;
      bzero((void *)v693, ((unint64_t)v141 >> 2) & 0x3FFFFFFFFFFFFFFCLL);
      *(void *)&long long v693 = v146 + 4 * v142;
      unint64_t v142 = (v686 - (unsigned char *)v685) >> 4;
    }
    LOBYTE(v704[0]) = 0;
    std::vector<BOOL>::vector(&v719, v142, (unsigned __int8 *)v704);
    long long v152 = (void *)*((void *)&v689 + 1);
    v668 = (void *)v690;
    if (*((void *)&v689 + 1) != (void)v690)
    {
      uint64_t v4 = 1;
      do
      {
        *(void *)(v719 + ((*v152 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v152;
        *(void *)&long long v722 = *v152;
        memset(v717, 0, sizeof(v717));
        std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
        *(_OWORD *)v704 = v717[0];
        *(_OWORD *)&v704[2] = v717[1];
        memset(v717, 0, sizeof(v717));
        *(_OWORD *)v705 = v717[2];
        std::deque<unsigned long>::~deque[abi:nn180100](v717);
        while (*(void *)&v705[8])
        {
          uint64_t v153 = *(void *)(*(void *)((char *)v704[1]
                                       + (((unint64_t)(*(void *)v705 + *(void *)&v705[8] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((*(void *)v705 + *(void *)&v705[8] - 1) & 0x1FF));
          --*(void *)&v705[8];
          std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
          long long v154 = (uint64_t *)((char *)v685 + 16 * v153);
          uint64_t v155 = *v154;
          int v156 = *(_DWORD *)(*((void *)&v692 + 1) + 4 * v153);
          uint64_t v157 = v719;
          uint64_t v158 = *v154;
          do
          {
            long long v159 = v683;
            uint64_t v160 = *((void *)v683 + 6 * v158 + 3);
            long long v161 = (char *)v683 + 48 * v160;
            if (((*(void *)(v157 + ((*v161 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v161) & 1) == 0)
            {
              std::deque<unsigned long>::push_back(v704, (void *)v683 + 6 * v160);
              uint64_t v157 = v719;
              *(void *)(v719 + ((*v161 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v161;
              if (v159[12 * v160 + 10]) {
                int v162 = v156 - 1;
              }
              else {
                int v162 = v156 + 1;
              }
              *(_DWORD *)(*((void *)&v692 + 1) + 4 * *v161) = v162;
              uint64_t v155 = *v154;
            }
            uint64_t v158 = *(void *)&v159[12 * v158 + 2];
          }
          while (v158 != v155);
        }
        std::deque<unsigned long>::~deque[abi:nn180100](v704);
        v152 += 10;
      }
      while (v152 != v668);
    }
    uint64_t v6 = (_anonymous_namespace_ *)v719;
    if ((void)v719) {
      operator delete((void *)v719);
    }
    uint64_t v7 = v679;
    unint64_t v8 = v680;
    a4 = v651;
  }
  if (v7 == v8 || v677 == v678 || v681 == v682 || !v687)
  {
LABEL_205:
    long long v172 = *(_OWORD *)v704;
    long long v173 = v704[2];
    long long v174 = v704[3];
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + 8) = 3;
    *(void *)(a4 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v172;
    *(void *)(a4 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v173;
    *(void *)(a4 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v174;
    goto LABEL_206;
  }
  uint64_t v652 = a4;
  unint64_t v163 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((void *)&v689 + 1)) >> 4);
  long long v165 = (char *)*((void *)&v691 + 1);
  long long v164 = (char *)v691;
  unint64_t v166 = (uint64_t)(*((void *)&v691 + 1) - v691) >> 4;
  if (v163 > v166)
  {
    unint64_t v167 = v163 - v166;
    if (v163 - v166 > (uint64_t)(v692 - *((void *)&v691 + 1)) >> 4)
    {
      if (v163 >> 60) {
        goto LABEL_911;
      }
      uint64_t v168 = v692 - v691;
      if ((uint64_t)(v692 - v691) >> 3 > v163) {
        unint64_t v163 = v168 >> 3;
      }
      if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v169 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v169 = v163;
      }
      if (v169 >> 60) {
LABEL_912:
      }
        std::__throw_bad_array_new_length[abi:nn180100]();
      long long v170 = operator new(16 * v169);
      unint64_t v166 = (unint64_t)v170 + 16 * v166;
      uint64_t v4 = (uint64_t)v170 + 16 * v169;
      memset((void *)v166, 255, 16 * v167);
      unint64_t v171 = v166 + 16 * v167;
      if (v165 != v164)
      {
        do
        {
          *(_OWORD *)(v166 - 16) = *((_OWORD *)v165 - 1);
          v166 -= 16;
          v165 -= 16;
        }
        while (v165 != v164);
        long long v165 = v164;
      }
      *(void *)&long long v691 = v166;
      *((void *)&v691 + 1) = v171;
      *(void *)&long long v692 = v4;
      if (v165) {
        operator delete(v165);
      }
      goto LABEL_238;
    }
    memset(*((void **)&v691 + 1), 255, 16 * v167);
    uint64_t v184 = (uint64_t)&v165[16 * v167];
    goto LABEL_237;
  }
  if (v163 < v166)
  {
    uint64_t v184 = v691 - 0x3333333333333330 * ((uint64_t)(v690 - *((void *)&v689 + 1)) >> 4);
LABEL_237:
    *((void *)&v691 + 1) = v184;
  }
LABEL_238:
  *(void *)&v717[0] = v674;
  memset((char *)v717 + 8, 0, 32);
  re::pathprocessing::QuadraticBezierBVH::build((uint64_t **)v717);
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(&v719, 0x8E38E38E38E38E39 * ((v678 - v677) >> 3), (unsigned __int8 *)v704);
  uint64_t v185 = *((void *)&v689 + 1);
  if ((void)v690 != *((void *)&v689 + 1))
  {
    uint64_t v186 = 0;
    unint64_t v166 = (unint64_t)&v704[2];
    do
    {
      memset(v704, 0, 24);
      uint64_t v669 = v186;
      uint64_t v187 = v185 + 80 * v186;
      uint64_t v189 = *(void **)(v187 + 40);
      uint64_t v188 = *(void **)(v187 + 48);
      if (v189 != v188)
      {
        uint64_t v190 = 0;
        do
        {
          unint64_t v191 = *((void *)v683 + 6 * *v189 + 4);
          uint64_t v192 = *(void *)(v719 + 8 * (v191 >> 6));
          if (((1 << v191) & v192) == 0)
          {
            *(void *)(v719 + 8 * (v191 >> 6)) = v192 | (1 << v191);
            uint64_t v193 = (void *)(v677 + 72 * v191);
            uint64_t v194 = v193[1];
            if (v193[2] != v194)
            {
              unint64_t v195 = v193[4];
              uint64_t v4 = v194 + 8 * (v195 >> 9);
              unint64_t v196 = (uint64_t *)(*(void *)v4 + 8 * (v195 & 0x1FF));
              uint64_t v197 = *(void *)(v194 + (((v193[5] + v195) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v193[5] + v195) & 0x1FF);
              while (v196 != (uint64_t *)v197)
              {
                uint64_t v198 = *v196;
                if (v190 >= v704[2])
                {
                  unint64_t v199 = (char *)v704[0];
                  uint64_t v200 = (v190 - (char *)v704[0]) >> 3;
                  unint64_t v201 = v200 + 1;
                  if ((unint64_t)(v200 + 1) >> 61) {
                    goto LABEL_911;
                  }
                  int64_t v202 = (char *)v704[2] - (char *)v704[0];
                  if (((char *)v704[2] - (char *)v704[0]) >> 2 > v201) {
                    unint64_t v201 = v202 >> 2;
                  }
                  if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v203 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v203 = v201;
                  }
                  if (v203)
                  {
                    unint64_t v204 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)&v704[2], v203);
                    unint64_t v199 = (char *)v704[0];
                    uint64_t v190 = (char *)v704[1];
                  }
                  else
                  {
                    unint64_t v204 = 0;
                  }
                  uint64_t v205 = &v204[8 * v200];
                  *(void *)uint64_t v205 = v198;
                  unint64_t v206 = v205 + 8;
                  while (v190 != v199)
                  {
                    uint64_t v207 = *((void *)v190 - 1);
                    v190 -= 8;
                    *((void *)v205 - 1) = v207;
                    v205 -= 8;
                  }
                  v704[0] = v205;
                  v704[1] = v206;
                  v704[2] = &v204[8 * v203];
                  if (v199) {
                    operator delete(v199);
                  }
                  uint64_t v190 = (char *)v206;
                }
                else
                {
                  *(void *)uint64_t v190 = v198;
                  v190 += 8;
                }
                v704[1] = v190;
                if ((uint64_t *)((char *)++v196 - *(void *)v4) == (uint64_t *)4096)
                {
                  uint64_t v208 = *(uint64_t **)(v4 + 8);
                  v4 += 8;
                  unint64_t v196 = v208;
                }
              }
            }
          }
          ++v189;
        }
        while (v189 != v188);
      }
      re::pathprocessing::QuadraticBezierBVH::buildGroup((uint64_t)v717, v704);
      if (v704[0])
      {
        v704[1] = v704[0];
        operator delete(v704[0]);
      }
      uint64_t v186 = v669 + 1;
      uint64_t v185 = *((void *)&v689 + 1);
    }
    while (v669 + 1 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((void *)&v689 + 1)) >> 4));
    if ((void)v690 != *((void *)&v689 + 1))
    {
      uint64_t v209 = 0;
      uint64_t v210 = 0;
      unint64_t v211 = 0;
      unint64_t v166 = (unint64_t)&v704[2];
      uint64_t v4 = -1;
      int32x2_t v212 = vdup_n_s32(0x7F800000u);
      do
      {
        v704[0] = (void *)-1;
        v704[1] = (void *)-1;
        v704[3] = 0;
        *(void *)v705 = 0;
        v704[2] = 0;
        *(int32x2_t *)&v705[8] = v212;
        int64_t v213 = (float32x2_t *)(*v674 + 24 * *(void *)(v185 + v209 + 64) + 8 * *(void *)(v185 + v209 + 72));
        *(void *)&long long v722 = 0xBF80000000000000;
        if (re::pathprocessing::QuadraticBezierBVH::intersect((uint64_t)v717, v213, (float32x2_t *)&v722, v211, (float32x2_t *)v704))
        {
          uint64_t v214 = (float32x2_t *)(*v674 + 24 * (uint64_t)v704[1]);
          float32x2_t v215 = v214[1];
          float32x2_t v216 = v214[2];
          float32x2_t v217 = vadd_f32(vmul_n_f32(v216, *(float *)&v705[12]), vsub_f32(vmul_n_f32(*v214, *(float *)&v705[12] + -1.0), vmul_n_f32(v215, (float)(*(float *)&v705[12] * 2.0) + -1.0)));
          float32x2_t v218 = vadd_f32(v217, v217);
          if (v218.f32[0] == 0.0)
          {
            float32x2_t v219 = vadd_f32(v216, vsub_f32(*v214, vadd_f32(v215, v215)));
            unsigned __int32 v220 = vadd_f32(v219, v219).u32[0];
            if (*(float *)&v705[12] == 1.0 || *(float *)&v705[12] > 0.0 && v218.f32[1] < 0.0) {
              v218.i32[0] = v220 ^ 0x80000000;
            }
            else {
              v218.i32[0] = v220;
            }
          }
          unint64_t v221 = (v218.f32[0] <= 0.0) | (unint64_t)(2 * *((void *)v681 + (uint64_t)v704[1]));
          uint64_t v222 = *((void *)v683 + 6 * v221);
          uint64_t v223 = *((void *)v685 + 2 * v222 + 1);
          if ((v223 & 8) != 0)
          {
            uint64_t v224 = (char *)v683 + 48 * v221;
            if ((v223 & 4) != 0)
            {
              uint64_t v222 = *((void *)v683 + 6 * *((void *)v224 + 3));
            }
            else
            {
              uint64_t v222 = *((void *)v683 + 6 * *((void *)v683 + 6 * *((void *)v224 + 1) + 3));
              if ((*((unsigned char *)v685 + 16 * v222 + 8) & 8) != 0)
              {
                while (1)
                  ;
              }
            }
          }
          uint64_t v225 = v691 + v210;
          *(void **)uint64_t v225 = v704[0];
          *(void *)(v225 + 8) = v222;
        }
        ++v211;
        uint64_t v185 = *((void *)&v689 + 1);
        v210 += 16;
        v209 += 80;
      }
      while (v211 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v690 - *((void *)&v689 + 1)) >> 4));
    }
  }
  if ((void)v719) {
    operator delete((void *)v719);
  }
  if (*(void *)&v717[1])
  {
    *((void *)&v717[1] + 1) = *(void *)&v717[1];
    operator delete(*(void **)&v717[1]);
  }
  std::unique_ptr<re::pathprocessing::QuadraticBezierBVH::Node>::reset[abi:nn180100]((uint64_t *)v717 + 1, 0);
  long long v226 = v691;
  unint64_t v227 = (uint64_t)(*((void *)&v691 + 1) - v691) >> 4;
  std::vector<std::vector<unsigned long>>::vector(v717, v227);
  *(_OWORD *)v705 = 0u;
  memset(v704, 0, sizeof(v704));
  LOBYTE(v722) = 0;
  std::vector<BOOL>::vector(&v719, v227, (unsigned __int8 *)&v722);
  *(void *)&long long v722 = 0;
  if (*((void *)&v226 + 1) != (void)v226)
  {
    unint64_t v228 = 0;
    uint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v229 = *(void *)(v691 + 16 * v228);
      if (v229 == -1)
      {
        std::deque<unsigned long>::push_back(v704, &v722);
      }
      else
      {
        uint64_t v230 = *(void *)&v717[0] + 24 * v229;
        uint64_t v232 = (unint64_t **)(v230 + 8);
        long long v231 = *(unint64_t **)(v230 + 8);
        unint64_t v166 = v230 + 16;
        unint64_t v233 = *(void *)(v230 + 16);
        if ((unint64_t)v231 >= v233)
        {
          uint64_t v235 = *(unint64_t **)v230;
          uint64_t v236 = ((uint64_t)v231 - *(void *)v230) >> 3;
          unint64_t v237 = v236 + 1;
          if ((unint64_t)(v236 + 1) >> 61) {
            goto LABEL_911;
          }
          uint64_t v238 = v233 - (void)v235;
          if (v238 >> 2 > v237) {
            unint64_t v237 = v238 >> 2;
          }
          if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v239 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v239 = v237;
          }
          if (v239)
          {
            uint64_t v240 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v166, v239);
            long long v231 = *v232;
            uint64_t v235 = *(unint64_t **)v230;
            unint64_t v228 = v722;
          }
          else
          {
            uint64_t v240 = 0;
          }
          unint64_t v241 = (unint64_t *)&v240[8 * v236];
          unint64_t *v241 = v228;
          uint64_t v234 = v241 + 1;
          while (v231 != v235)
          {
            unint64_t v242 = *--v231;
            *--unint64_t v241 = v242;
          }
          *(void *)uint64_t v230 = v241;
          void *v232 = v234;
          *(void *)unint64_t v166 = &v240[8 * v239];
          if (v235) {
            operator delete(v235);
          }
        }
        else
        {
          unint64_t *v231 = v228;
          uint64_t v234 = v231 + 1;
        }
        void *v232 = v234;
      }
      unint64_t v228 = v722 + 1;
      *(void *)&long long v722 = v228;
    }
    while (v228 < v227);
  }
  v702 = 0;
  v703 = 0;
  v701 = 0;
  std::vector<unsigned long>::reserve(&v701, v227);
  uint64_t v243 = *(void *)&v705[8];
  if (*(void *)&v705[8])
  {
    unint64_t v166 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v244 = v243 - 1;
      uint64_t v245 = *(void *)(*(void *)((char *)v704[1]
                                   + (((unint64_t)(*(void *)v705 + v244) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*(void *)v705 + v244) & 0x1FF));
      *(void *)&v705[8] = v244;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
      uint64_t v246 = v702;
      if (v702 >= v703)
      {
        uint64_t v248 = (char *)v701;
        uint64_t v249 = (v702 - (unsigned char *)v701) >> 3;
        unint64_t v250 = v249 + 1;
        if ((unint64_t)(v249 + 1) >> 61) {
          goto LABEL_911;
        }
        uint64_t v251 = v703 - (unsigned char *)v701;
        if ((v703 - (unsigned char *)v701) >> 2 > v250) {
          unint64_t v250 = v251 >> 2;
        }
        if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v252 = v250;
        }
        if (v252)
        {
          unint64_t v253 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)&v703, v252);
          uint64_t v248 = (char *)v701;
          uint64_t v246 = v702;
        }
        else
        {
          unint64_t v253 = 0;
        }
        unint64_t v254 = &v253[8 * v249];
        *(void *)unint64_t v254 = v245;
        unint64_t v247 = v254 + 8;
        while (v246 != v248)
        {
          uint64_t v255 = *((void *)v246 - 1);
          v246 -= 8;
          *((void *)v254 - 1) = v255;
          v254 -= 8;
        }
        v701 = v254;
        v702 = v247;
        v703 = &v253[8 * v252];
        if (v248) {
          operator delete(v248);
        }
      }
      else
      {
        *(void *)v702 = v245;
        unint64_t v247 = v246 + 8;
      }
      v702 = v247;
      uint64_t v256 = (uint64_t *)(*(void *)&v717[0] + 24 * v245);
      uint64_t v4 = *v256;
      uint64_t v257 = v256[1];
      while (v4 != v257)
      {
        *(void *)&long long v722 = 0;
        unint64_t v258 = *(void *)v4;
        v4 += 8;
        *(void *)&long long v722 = v258;
        std::deque<unsigned long>::push_back(v704, &v722);
      }
      uint64_t v243 = *(void *)&v705[8];
    }
    while (*(void *)&v705[8]);
  }
  if ((void)v719) {
    operator delete((void *)v719);
  }
  std::deque<unsigned long>::~deque[abi:nn180100](v704);
  v704[0] = v717;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
  long long v259 = v701;
  if (v702 != v701)
  {
    uint64_t v260 = 0;
    unint64_t v261 = (v702 - (unsigned char *)v701) >> 3;
    if (v261 <= 1) {
      unint64_t v261 = 1;
    }
    uint64_t v262 = *((void *)&v692 + 1);
    uint64_t v263 = v691;
    uint64_t v264 = *((void *)&v689 + 1);
    do
    {
      uint64_t v265 = v259[v260];
      if (*(void *)(v263 + 16 * v265) != -1)
      {
        uint64_t v266 = v264 + 80 * v265;
        unint64_t v267 = *(uint64_t **)(v266 + 16);
        unint64_t v268 = *(uint64_t **)(v266 + 24);
        if (v267 != v268)
        {
          int v269 = *(_DWORD *)(v262 + 4 * *(void *)(v263 + 16 * v265 + 8));
          do
          {
            uint64_t v270 = *v267++;
            *(_DWORD *)(v262 + 4 * v270) += v269;
          }
          while (v267 != v268);
        }
      }
      ++v260;
    }
    while (v260 != v261);
  }
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(&v700, (v686 - (unsigned char *)v685) >> 4, (unsigned __int8 *)v704);
  unint64_t v271 = (char *)v685;
  if (v676)
  {
    if (v686 != v685)
    {
      unint64_t v272 = 0;
      unint64_t v273 = (v686 - (unsigned char *)v685) >> 4;
      uint64_t v274 = *((void *)&v692 + 1);
      unsigned int v275 = v700;
      if (v273 <= 1) {
        unint64_t v273 = 1;
      }
      long long v276 = (unint64_t *)((char *)v685 + 8);
      do
      {
        unint64_t v277 = v272 >> 6;
        uint64_t v278 = 1 << v272;
        if (*(_DWORD *)(v274 + 4 * v272))
        {
          v275[v277] |= v278;
          unint64_t v280 = (unint64_t *)&v271[16 * v272 + 8];
          unint64_t v279 = *v276 | 2;
        }
        else
        {
          v275[v277] &= ~v278;
          unint64_t v279 = *v276 & 0xFFFFFFFFFFFFFFFDLL;
          unint64_t v280 = v276;
        }
        unint64_t *v280 = v279;
        ++v272;
        v276 += 2;
      }
      while (v273 != v272);
    }
  }
  else if (v686 != v685)
  {
    unint64_t v281 = 0;
    unint64_t v282 = (v686 - (unsigned char *)v685) >> 4;
    uint64_t v283 = *((void *)&v692 + 1);
    v284 = v700;
    if (v282 <= 1) {
      unint64_t v282 = 1;
    }
    unint64_t v285 = (unint64_t *)((char *)v685 + 8);
    do
    {
      unint64_t v286 = v281 >> 6;
      uint64_t v287 = 1 << v281;
      if (*(_DWORD *)(v283 + 4 * v281))
      {
        v284[v286] |= v287;
        int64x2_t v288 = (unint64_t *)&v271[16 * v281 + 8];
        unint64_t v289 = *v285 | 2;
      }
      else
      {
        v284[v286] &= ~v287;
        unint64_t v289 = *v285 & 0xFFFFFFFFFFFFFFFDLL;
        int64x2_t v288 = v285;
      }
      unint64_t *v288 = v289;
      ++v281;
      v285 += 2;
    }
    while (v282 != v281);
  }
  long long v697 = 0u;
  long long v698 = 0u;
  int v699 = 1065353216;
  uint64_t v290 = v701;
  if (v702 != v701)
  {
    unint64_t v291 = 0;
    uint64_t v4 = 0x1FFFFFFFFFFFFFFFLL;
    do
    {
      unint64_t v292 = v290[v291];
      v704[0] = (void *)v292;
      unint64_t v293 = *(void *)(v691 + 16 * v292 + 8);
      if (v293 == -1 || ((*(void *)((char *)v700 + ((v293 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v293) & 1) == 0)
      {
        std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v697, v292, v704);
      }
      else
      {
        uint8x8_t v294 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v697 + 8));
        v294.i16[0] = vaddlv_u8(v294);
        uint64_t v295 = *((void *)&v697 + 1) - 1;
        unint64_t v296 = v292;
        do
        {
          do
          {
LABEL_370:
            unint64_t v297 = v296;
            unint64_t v296 = *(void *)(v691 + 16 * v296);
          }
          while (!*((void *)&v697 + 1));
          if (v294.u32[0] > 1uLL)
          {
            unint64_t v298 = v296;
            if (v296 >= *((void *)&v697 + 1)) {
              unint64_t v298 = v296 % *((void *)&v697 + 1);
            }
          }
          else
          {
            unint64_t v298 = v296 & v295;
          }
          int v299 = *(void **)(v697 + 8 * v298);
        }
        while (!v299);
        do
        {
          while (1)
          {
            int v299 = (void *)*v299;
            if (!v299) {
              goto LABEL_370;
            }
            unint64_t v300 = v299[1];
            if (v300 == v296) {
              break;
            }
            if (v294.u32[0] > 1uLL)
            {
              if (v300 >= *((void *)&v697 + 1)) {
                v300 %= *((void *)&v697 + 1);
              }
            }
            else
            {
              v300 &= v295;
            }
            if (v300 != v298) {
              goto LABEL_370;
            }
          }
        }
        while (v299[2] != v296);
        unint64_t v301 = *(void *)(v691 + 16 * v297 + 8);
        *(void *)&v717[0] = v296;
        *(void *)&long long v719 = v301;
        unint64_t v302 = std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)&v697, v296, v717);
        unint64_t v303 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v302 + 24), v301, &v719);
        unint64_t v166 = (unint64_t)v303;
        v304 = (unint64_t *)v303[4];
        uint64_t v305 = (uint64_t)(v303 + 5);
        unint64_t v306 = v303[5];
        if ((unint64_t)v304 >= v306)
        {
          uint64_t v308 = (unint64_t *)v303[3];
          uint64_t v309 = v304 - v308;
          unint64_t v310 = v309 + 1;
          if ((unint64_t)(v309 + 1) >> 61) {
            goto LABEL_911;
          }
          uint64_t v311 = v306 - (void)v308;
          if (v311 >> 2 > v310) {
            unint64_t v310 = v311 >> 2;
          }
          if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v312 = v310;
          }
          if (v312)
          {
            uint64_t v313 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v305, v312);
            uint64_t v308 = *(unint64_t **)(v166 + 24);
            v304 = *(unint64_t **)(v166 + 32);
          }
          else
          {
            uint64_t v313 = 0;
          }
          v314 = (unint64_t *)&v313[8 * v309];
          unint64_t *v314 = v292;
          uint64_t v307 = v314 + 1;
          while (v304 != v308)
          {
            unint64_t v315 = *--v304;
            *--v314 = v315;
          }
          *(void *)(v166 + 24) = v314;
          *(void *)(v166 + 32) = v307;
          *(void *)(v166 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = &v313[8 * v312];
          if (v308) {
            operator delete(v308);
          }
        }
        else
        {
          unint64_t *v304 = v292;
          uint64_t v307 = v304 + 1;
        }
        *(void *)(v166 + 32) = v307;
      }
      ++v291;
      uint64_t v290 = v701;
    }
    while (v291 < (v702 - (unsigned char *)v701) >> 3);
  }
  v715 = 0;
  v714 = 0;
  v716 = 0;
  v712 = 0;
  v711 = 0;
  uint64_t v713 = 0;
  v316 = v683;
  uint64_t v317 = v684 - (unsigned char *)v683;
  if (v684 == v683)
  {
    v320 = 0;
    unint64_t v319 = 0;
  }
  else
  {
    unint64_t v166 = 0xAAAAAAAAAAAAAAABLL * (v317 >> 4);
    if (v166 > 0x555555555555555) {
      goto LABEL_911;
    }
    uint64_t v4 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::HalfEdge>>((uint64_t)&v713, 0xAAAAAAAAAAAAAAABLL * (v317 >> 4));
    v711 = (void *)v4;
    uint64_t v713 = v4 + 48 * v318;
    memmove((void *)v4, v316, v317 - 4);
    unint64_t v319 = (unsigned char *)(v4 + 16 * (v317 >> 4));
    v712 = v319;
    v320 = v711;
  }
  long long v719 = 0u;
  long long v720 = 0u;
  int v721 = 1065353216;
  uint64_t v322 = v685;
  v321 = v686;
  if (v686 != v685)
  {
    uint64_t v323 = 0;
    unint64_t v324 = 0;
    v325.n128_u64[0] = -1;
    v325.n128_u64[1] = -1;
    while (1)
    {
      if ((v322[v323 + 8] & 8) == 0) {
        goto LABEL_428;
      }
      uint64_t v326 = *(void *)&v322[v323];
      v327 = (__n128 *)&v320[6 * v326];
      if (v327->n128_u64[0] == -1) {
        goto LABEL_428;
      }
      uint64_t v328 = v320[6 * v326 + 1];
      if (v328 == -1) {
        goto LABEL_428;
      }
      uint64_t v329 = v320[6 * v326 + 2];
      if (v329 == -1) {
        goto LABEL_428;
      }
      unint64_t v330 = (char *)&v320[6 * v326];
      uint64_t v333 = *((void *)v330 + 3);
      v331 = v330 + 24;
      uint64_t v332 = v333;
      if (v333 == -1 || v320[6 * v326 + 4] == -1) {
        goto LABEL_428;
      }
      if (v329 != v328)
      {
        char v694 = 1;
        MEMORY[0x237DBC5F0](v695, "Invalid topology for degenerated face\n", v325);
        long long v722 = 0u;
        long long v723 = 0u;
        float v724 = 1.0;
        goto LABEL_584;
      }
      uint64_t v334 = (__n128 *)&v320[6 * v332];
      if (v328 != v326) {
        break;
      }
      v335 = (char *)&v320[6 * v332];
      uint64_t v336 = *((void *)v335 + 2);
      v320[6 * v336 + 1] = *((void *)v335 + 1);
      v320[6 * *((void *)v335 + 1) + 2] = v336;
LABEL_427:
      v327[2].n128_u64[0] = -1;
      __n128 *v327 = v325;
      v327[1] = v325;
      v334[2].n128_u64[0] = -1;
      *uint64_t v334 = v325;
      v334[1] = v325;
      uint64_t v322 = v685;
      v321 = v686;
LABEL_428:
      ++v324;
      v323 += 16;
      if (v324 >= (v321 - v322) >> 4) {
        goto LABEL_431;
      }
    }
    unint64_t v337 = (__n128 *)&v320[6 * v328];
    uint64_t v338 = v337[1].n128_i64[1];
    v339 = (__n128 *)&v320[6 * v338];
    unint64_t v340 = v339->n128_u64[1];
    if (v332 == v340)
    {
      v341 = (char *)&v320[6 * v332];
      uint64_t v342 = v320[6 * v338 + 2];
      v320[6 * v342 + 1] = *((void *)v341 + 1);
      v320[6 * *((void *)v341 + 1) + 2] = v342;
    }
    else
    {
      if (v332 != v320[6 * v338 + 2])
      {
        v320[6 * v332 + 3] = v338;
        v320[6 * v338 + 3] = *v331;
        goto LABEL_426;
      }
      uint64_t v343 = v320[6 * v332 + 2];
      v320[6 * v343 + 1] = v340;
      v320[6 * v339->n128_u64[1] + 2] = v343;
    }
    v339[2].n128_u64[0] = -1;
    __n128 *v339 = v325;
    v339[1] = v325;
    v334[2].n128_u64[0] = -1;
    *uint64_t v334 = v325;
    v334[1] = v325;
LABEL_426:
    uint64_t v334 = v337;
    goto LABEL_427;
  }
  uint64_t v322 = v686;
LABEL_431:
  if (v319 != (unsigned char *)v320)
  {
    unint64_t v344 = 0;
    do
    {
      unint64_t v166 = (unint64_t)&v320[6 * v344];
      unint64_t v345 = *(void *)v166;
      if (*(void *)v166 != -1)
      {
        v346 = (char *)&v320[6 * v344];
        uint64_t v348 = *((void *)v346 + 1);
        v347 = (uint64_t *)(v346 + 8);
        if (v348 != -1)
        {
          uint64_t v349 = v320[6 * v344 + 2];
          if (v349 != -1)
          {
            uint64_t v350 = v320[6 * v344 + 3];
            if (v350 != -1 && v320[6 * v344 + 4] != -1)
            {
              unint64_t v351 = *((void *)v685 + 2 * v345 + 1);
              if ((v351 & 1) == 0)
              {
                uint64_t v4 = (uint64_t)&v320[6 * v350];
                unint64_t v352 = *((void *)v685 + 2 * *(void *)v4 + 1);
                if ((v352 & 1) == 0 && ((v351 >> 1) & 1) == ((v352 >> 1) & 1))
                {
                  v353 = (char *)&v320[6 * v350];
                  v320[6 * v349 + 1] = *((void *)v353 + 1);
                  v320[6 * *((void *)v353 + 1) + 2] = v349;
                  uint64_t v354 = *v347;
                  v320[6 * v354 + 2] = *((void *)v353 + 2);
                  v320[6 * *((void *)v353 + 2) + 1] = v354;
                  v355 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v719, v345, (void *)v166);
                  v356 = v355;
                  uint64_t v357 = (char *)v355[4];
                  uint64_t v358 = (uint64_t)(v355 + 5);
                  unint64_t v359 = v355[5];
                  if ((unint64_t)v357 >= v359)
                  {
                    v361 = (char *)v355[3];
                    uint64_t v362 = (v357 - v361) >> 3;
                    unint64_t v363 = v362 + 1;
                    if ((unint64_t)(v362 + 1) >> 61) {
                      goto LABEL_911;
                    }
                    uint64_t v364 = v359 - (void)v361;
                    if (v364 >> 2 > v363) {
                      unint64_t v363 = v364 >> 2;
                    }
                    if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v365 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v365 = v363;
                    }
                    if (v365)
                    {
                      v366 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v358, v365);
                      v361 = (char *)v356[3];
                      uint64_t v357 = (char *)v356[4];
                    }
                    else
                    {
                      v366 = 0;
                    }
                    long long v367 = &v366[8 * v362];
                    *(void *)long long v367 = *(void *)v4;
                    uint64_t v360 = v367 + 8;
                    while (v357 != v361)
                    {
                      uint64_t v368 = *((void *)v357 - 1);
                      v357 -= 8;
                      *((void *)v367 - 1) = v368;
                      v367 -= 8;
                    }
                    v356[3] = v367;
                    v356[4] = v360;
                    v356[5] = &v366[8 * v365];
                    if (v361) {
                      operator delete(v361);
                    }
                  }
                  else
                  {
                    *(void *)uint64_t v357 = *(void *)v4;
                    uint64_t v360 = v357 + 8;
                  }
                  v356[4] = v360;
                  v369 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v719, *(void *)v4, (void *)v4);
                  v370 = v369;
                  float v371 = (char *)v369[4];
                  uint64_t v372 = (uint64_t)(v369 + 5);
                  unint64_t v373 = v369[5];
                  if ((unint64_t)v371 >= v373)
                  {
                    v375 = (char *)v369[3];
                    uint64_t v376 = (v371 - v375) >> 3;
                    unint64_t v377 = v376 + 1;
                    if ((unint64_t)(v376 + 1) >> 61) {
                      goto LABEL_911;
                    }
                    uint64_t v378 = v373 - (void)v375;
                    if (v378 >> 2 > v377) {
                      unint64_t v377 = v378 >> 2;
                    }
                    if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v379 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v379 = v377;
                    }
                    if (v379)
                    {
                      v380 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v372, v379);
                      v375 = (char *)v370[3];
                      float v371 = (char *)v370[4];
                    }
                    else
                    {
                      v380 = 0;
                    }
                    v381 = &v380[8 * v376];
                    *(void *)v381 = *(void *)v166;
                    v374 = v381 + 8;
                    while (v371 != v375)
                    {
                      uint64_t v382 = *((void *)v371 - 1);
                      v371 -= 8;
                      *((void *)v381 - 1) = v382;
                      v381 -= 8;
                    }
                    v370[3] = v381;
                    v370[4] = v374;
                    v370[5] = &v380[8 * v379];
                    if (v375) {
                      operator delete(v375);
                    }
                  }
                  else
                  {
                    *(void *)float v371 = *(void *)v166;
                    v374 = v371 + 8;
                  }
                  *(void *)&long long v383 = -1;
                  *((void *)&v383 + 1) = -1;
                  v370[4] = v374;
                  *(void *)(v166 + 32) = -1;
                  *(_OWORD *)unint64_t v166 = v383;
                  *(_OWORD *)(v166 + 16) = v383;
                  *(void *)(v4 + 32) = -1;
                  *(_OWORD *)uint64_t v4 = v383;
                  *(_OWORD *)(v4 + 16) = v383;
                  unint64_t v319 = v712;
                  v320 = v711;
                }
              }
            }
          }
        }
      }
      ++v344;
    }
    while (v344 < 0xAAAAAAAAAAAAAAABLL * ((v319 - (unsigned char *)v320) >> 4));
    uint64_t v322 = v685;
    v321 = v686;
  }
  long long v708 = 0uLL;
  *(void *)&long long v709 = 0;
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(v718, (v321 - v322) >> 4, (unsigned __int8 *)v704);
  v384 = (void *)v720;
  if (!(void)v720) {
    goto LABEL_537;
  }
  unint64_t v166 = (unint64_t)&v709;
  do
  {
    if ((*(void *)((char *)v718[0] + ((v384[2] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v384[2])) {
      goto LABEL_536;
    }
    v385 = (void *)*((void *)&v708 + 1);
    if (*((void *)&v708 + 1) >= (unint64_t)v709)
    {
      unint64_t v387 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v708 + 1) - v708) >> 3);
      unint64_t v388 = v387 + 1;
      if (v387 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_911;
      }
      if (0x5555555555555556 * ((uint64_t)(v709 - v708) >> 3) > v388) {
        unint64_t v388 = 0x5555555555555556 * ((uint64_t)(v709 - v708) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v709 - v708) >> 3) >= 0x555555555555555) {
        unint64_t v389 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v389 = v388;
      }
      *(void *)v705 = &v709;
      if (v389) {
        v390 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v709, v389);
      }
      else {
        v390 = 0;
      }
      v391 = &v390[24 * v387];
      v704[0] = v390;
      v704[1] = v391;
      v704[3] = &v390[24 * v389];
      *(void *)v391 = 0;
      *((void *)v391 + 1) = 0;
      *((void *)v391 + 2) = 0;
      v386 = v391 + 24;
      v704[2] = v391 + 24;
      v392 = (void *)*((void *)&v708 + 1);
      v393 = (void *)v708;
      v394 = (char *)v704[1];
      if (*((void *)&v708 + 1) == (void)v708)
      {
        int64x2_t v396 = vdupq_n_s64(*((unint64_t *)&v708 + 1));
      }
      else
      {
        do
        {
          *((void *)v394 - 3) = 0;
          *((void *)v394 - 2) = 0;
          v394 -= 24;
          *((void *)v394 + 2) = 0;
          long long v395 = *(_OWORD *)(v392 - 3);
          v392 -= 3;
          *(_OWORD *)v394 = v395;
          *((void *)v394 + 2) = v392[2];
          void *v392 = 0;
          v392[1] = 0;
          v392[2] = 0;
        }
        while (v392 != v393);
        int64x2_t v396 = (int64x2_t)v708;
        v386 = v704[2];
      }
      *(void *)&long long v708 = v394;
      *((void *)&v708 + 1) = v386;
      *(int64x2_t *)&v704[1] = v396;
      v397 = (void *)v709;
      *(void **)&long long v709 = v704[3];
      v704[3] = v397;
      v704[0] = (void *)v396.i64[0];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v704);
    }
    else
    {
      **((void **)&v708 + 1) = 0;
      v385[1] = 0;
      v386 = v385 + 3;
      v385[2] = 0;
    }
    *((void *)&v708 + 1) = v386;
    *(void *)&long long v722 = v384[2];
    memset(v717, 0, sizeof(v717));
    std::deque<unsigned long>::__append_with_size[abi:nn180100]<unsigned long const*>(v717, (uint64_t *)&v722, 1uLL);
    *(_OWORD *)v704 = v717[0];
    *(_OWORD *)&v704[2] = v717[1];
    memset(v717, 0, sizeof(v717));
    *(_OWORD *)v705 = v717[2];
    std::deque<unsigned long>::~deque[abi:nn180100](v717);
    uint64_t v4 = (uint64_t)(v386 - 1);
    uint64_t v398 = *(void *)&v705[8];
    do
    {
      uint64_t v399 = v398 - 1;
      unint64_t v400 = *(void *)(*(void *)((char *)v704[1]
                                   + (((unint64_t)(v399 + *(void *)v705) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v399 + *(void *)v705) & 0x1FF));
      *(void *)&v705[8] = v399;
      std::deque<unsigned long>::__maybe_remove_back_spare[abi:nn180100](v704, 1);
      uint64_t v401 = *((void *)v718[0] + (v400 >> 6));
      if ((v401 & (1 << v400)) != 0) {
        goto LABEL_497;
      }
      *((void *)v718[0] + (v400 >> 6)) = v401 | (1 << v400);
      v403 = (char *)*(v386 - 2);
      unint64_t v402 = *(v386 - 1);
      if ((unint64_t)v403 >= v402)
      {
        v405 = (char *)*(v386 - 3);
        uint64_t v406 = (v403 - v405) >> 3;
        unint64_t v407 = v406 + 1;
        if ((unint64_t)(v406 + 1) >> 61) {
          goto LABEL_911;
        }
        uint64_t v408 = v402 - (void)v405;
        if (v408 >> 2 > v407) {
          unint64_t v407 = v408 >> 2;
        }
        if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v409 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v409 = v407;
        }
        if (v409)
        {
          v410 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v386 - 1), v409);
          v405 = (char *)*(v386 - 3);
          v403 = (char *)*(v386 - 2);
        }
        else
        {
          v410 = 0;
        }
        v411 = &v410[8 * v406];
        *(void *)v411 = v400;
        v404 = v411 + 8;
        while (v403 != v405)
        {
          uint64_t v412 = *((void *)v403 - 1);
          v403 -= 8;
          *((void *)v411 - 1) = v412;
          v411 -= 8;
        }
        *(v386 - 3) = v411;
        *(v386 - 2) = v404;
        *(v386 - 1) = &v410[8 * v409];
        if (v405) {
          operator delete(v405);
        }
      }
      else
      {
        *(void *)v403 = v400;
        v404 = v403 + 8;
      }
      *(v386 - 2) = v404;
      if (!*((void *)&v719 + 1)) {
        goto LABEL_911;
      }
      uint8x8_t v413 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v719 + 8));
      v413.i16[0] = vaddlv_u8(v413);
      if (v413.u32[0] > 1uLL)
      {
        unint64_t v414 = v400;
        if (v400 >= *((void *)&v719 + 1)) {
          unint64_t v414 = v400 % *((void *)&v719 + 1);
        }
      }
      else
      {
        unint64_t v414 = (*((void *)&v719 + 1) - 1) & v400;
      }
      v415 = *(void **)(v719 + 8 * v414);
      if (!v415) {
        goto LABEL_911;
      }
      v416 = (void *)*v415;
      if (!v416) {
        goto LABEL_911;
      }
      while (1)
      {
        unint64_t v417 = v416[1];
        if (v417 == v400) {
          break;
        }
        if (v413.u32[0] > 1uLL)
        {
          if (v417 >= *((void *)&v719 + 1)) {
            v417 %= *((void *)&v719 + 1);
          }
        }
        else
        {
          v417 &= *((void *)&v719 + 1) - 1;
        }
        if (v417 != v414) {
          goto LABEL_911;
        }
LABEL_530:
        v416 = (void *)*v416;
        if (!v416) {
          goto LABEL_911;
        }
      }
      if (v416[2] != v400) {
        goto LABEL_530;
      }
      v418 = (void *)v416[3];
      v419 = (void *)v416[4];
      while (v418 != v419)
      {
        *(void *)&v717[0] = 0;
        *(void *)&v717[0] = *v418;
        if (((*(void *)((char *)v718[0] + ((*(void *)&v717[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> SLOBYTE(v717[0])) & 1) == 0) {
          std::deque<unsigned long>::push_back(v704, v717);
        }
        ++v418;
      }
LABEL_497:
      uint64_t v398 = *(void *)&v705[8];
    }
    while (*(void *)&v705[8]);
    std::deque<unsigned long>::~deque[abi:nn180100](v704);
LABEL_536:
    v384 = (void *)*v384;
  }
  while (v384);
LABEL_537:
  long long v722 = 0u;
  long long v723 = 0u;
  float v724 = 1.0;
  uint64_t v420 = *((void *)&v708 + 1);
  uint64_t v421 = v708;
  if (*((void *)&v708 + 1) == (void)v708) {
    goto LABEL_581;
  }
  uint64_t v422 = 0;
  unint64_t v423 = 0;
  uint64_t v424 = 0;
  while (2)
  {
    v425 = (uint64_t **)(v421 + 24 * v424);
    v426 = *v425;
    v427 = v425[1];
    if (*v425 == v427) {
      goto LABEL_580;
    }
    while (2)
    {
      unint64_t v428 = *v426;
      if (v423)
      {
        uint8x8_t v429 = (uint8x8_t)vcnt_s8((int8x8_t)v423);
        v429.i16[0] = vaddlv_u8(v429);
        if (v429.u32[0] > 1uLL)
        {
          uint64_t v4 = *v426;
          if (v423 <= v428) {
            uint64_t v4 = v428 % v423;
          }
        }
        else
        {
          uint64_t v4 = v428 & (v423 - 1);
        }
        v430 = *(void **)(v722 + 8 * v4);
        if (v430)
        {
          for (unint64_t j = (void *)*v430; j; unint64_t j = (void *)*j)
          {
            unint64_t v432 = j[1];
            if (v432 == v428)
            {
              if (j[2] == v428) {
                goto LABEL_578;
              }
            }
            else
            {
              if (v429.u32[0] > 1uLL)
              {
                if (v432 >= v423) {
                  v432 %= v423;
                }
              }
              else
              {
                v432 &= v423 - 1;
              }
              if (v432 != v4) {
                break;
              }
            }
          }
        }
      }
      unint64_t v166 = (unint64_t)operator new(0x20uLL);
      *(void *)unint64_t v166 = 0;
      *(void *)(v166 + 8) = v428;
      *(void *)(v166 + 16) = v428;
      *(void *)(v166 + 24) = v424;
      float v433 = (float)(unint64_t)(v422 + 1);
      if (!v423 || (float)(v724 * (float)v423) < v433)
      {
        BOOL v434 = (v423 & (v423 - 1)) != 0;
        if (v423 < 3) {
          BOOL v434 = 1;
        }
        unint64_t v435 = v434 | (2 * v423);
        unint64_t v436 = vcvtps_u32_f32(v433 / v724);
        if (v435 <= v436) {
          size_t v437 = v436;
        }
        else {
          size_t v437 = v435;
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)&v722, v437);
        unint64_t v423 = *((void *)&v722 + 1);
        if ((v423 & (v423 - 1)) != 0)
        {
          if (*((void *)&v722 + 1) <= v428) {
            uint64_t v4 = v428 % *((void *)&v722 + 1);
          }
          else {
            uint64_t v4 = v428;
          }
        }
        else
        {
          uint64_t v4 = (*((void *)&v722 + 1) - 1) & v428;
        }
      }
      uint64_t v438 = v722;
      v439 = *(unint64_t **)(v722 + 8 * v4);
      if (v439)
      {
        *(void *)unint64_t v166 = *v439;
        goto LABEL_576;
      }
      *(void *)unint64_t v166 = v723;
      *(void *)&long long v723 = v166;
      *(void *)(v438 + 8 * v4) = &v723;
      if (*(void *)v166)
      {
        unint64_t v440 = *(void *)(*(void *)v166 + 8);
        if ((v423 & (v423 - 1)) != 0)
        {
          if (v440 >= v423) {
            v440 %= v423;
          }
        }
        else
        {
          v440 &= v423 - 1;
        }
        v439 = (unint64_t *)(v722 + 8 * v440);
LABEL_576:
        unint64_t *v439 = v166;
      }
      uint64_t v422 = ++*((void *)&v723 + 1);
LABEL_578:
      if (++v426 != v427) {
        continue;
      }
      break;
    }
    uint64_t v420 = *((void *)&v708 + 1);
    uint64_t v421 = v708;
LABEL_580:
    if (++v424 < 0xAAAAAAAAAAAAAAABLL * ((v420 - v421) >> 3)) {
      continue;
    }
    break;
  }
LABEL_581:
  if (v718[0]) {
    operator delete(v718[0]);
  }
  v704[0] = &v708;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
LABEL_584:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v719);
  if (v694)
  {
    v441 = 0;
    v442 = 0;
    v443 = 0;
    memset(v704, 0, 24);
    goto LABEL_849;
  }
  long long v719 = 0u;
  long long v720 = 0u;
  int v721 = 1065353216;
  long long v708 = 0u;
  long long v709 = 0u;
  int v710 = 1065353216;
  LOBYTE(v704[0]) = 0;
  std::vector<BOOL>::vector(v718, 0xAAAAAAAAAAAAAAABLL * ((v712 - (unsigned char *)v711) >> 4), (unsigned __int8 *)v704);
  v444 = (void *)v698;
  if ((void)v698)
  {
LABEL_587:
    v653 = v444;
    v445 = (void *)(*((void *)&v689 + 1) + 80 * v444[2]);
    memset(v704, 0, sizeof(v704));
    *(_OWORD *)&v705[8] = 0u;
    long long v706 = 0u;
    *(_DWORD *)v705 = 1065353216;
    int v707 = 1065353216;
    v447 = v445 + 5;
    uint64_t v446 = v445[5];
    v449 = v445 + 6;
    uint64_t v448 = v445[6];
    if (v448 == v446) {
      goto LABEL_776;
    }
    uint64_t v450 = 0;
    while (1)
    {
      unint64_t v451 = *(void *)(v446 + 8 * v450);
      uint64_t v452 = *((void *)v718[0] + (v451 >> 6));
      if (((1 << v451) & v452) == 0)
      {
        *((void *)v718[0] + (v451 >> 6)) = v452 | (1 << v451);
        v453 = (unint64_t *)((char *)v711 + 48 * v451);
        unint64_t v454 = *v453;
        if (*v453 != -1
          && *((void *)v711 + 6 * v451 + 1) != -1
          && *((void *)v711 + 6 * v451 + 2) != -1
          && *((void *)v711 + 6 * v451 + 3) != -1)
        {
          BOOL v455 = *((void *)v711 + 6 * v451 + 4) == -1 || v454 == *v445;
          if (!v455 && (*((unsigned char *)v685 + 16 * v454 + 8) & 2) != 0) {
            break;
          }
        }
      }
LABEL_590:
      if (++v450 >= (unint64_t)((v448 - v446) >> 3))
      {
        v507 = v704[2];
        if (v704[2])
        {
          do
          {
            v508 = v715;
            uint64_t v509 = 0xAAAAAAAAAAAAAAABLL * (((char *)v715 - v714) >> 4);
            if (v715 >= (_OWORD *)v716)
            {
              unint64_t v511 = v509 + 1;
              if ((unint64_t)(v509 + 1) > 0x555555555555555) {
                goto LABEL_911;
              }
              if (0x5555555555555556 * ((v716 - v714) >> 4) > v511) {
                unint64_t v511 = 0x5555555555555556 * ((v716 - v714) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v716 - v714) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v512 = 0x555555555555555;
              }
              else {
                unint64_t v512 = v511;
              }
              *(void *)&v717[2] = &v716;
              if (v512) {
                unint64_t v512 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(v512);
              }
              else {
                uint64_t v513 = 0;
              }
              v514 = (_OWORD *)(v512 + 48 * v509);
              *(void *)&v717[0] = v512;
              *((void *)&v717[0] + 1) = v514;
              *((void *)&v717[1] + 1) = v512 + 48 * v513;
              _OWORD *v514 = 0u;
              v514[1] = 0u;
              v514[2] = 0u;
              *(void *)&v717[1] = v514 + 3;
              std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer((uint64_t *)&v714, v717);
              v510 = v715;
              std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer((uint64_t)v717);
            }
            else
            {
              v715[1] = 0u;
              v508[2] = 0u;
              v510 = v508 + 3;
              _OWORD *v508 = 0u;
            }
            v715 = v510;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>((uint64_t)&v708, v507[2], v507[2], v509);
            v515 = (__n128 *)v507[3];
            v516 = (__n128 *)v507[4];
            if ((char *)v516 - (char *)v515 == 24)
            {
              std::vector<unsigned long>::__move_assign((uint64_t)(v510 - 3), v515);
            }
            else
            {
              uint64_t v661 = (uint64_t)(v510 - 3);
              v665 = v510;
              if (v516 != v515)
              {
                unint64_t v166 = 0;
                unint64_t v517 = ((char *)v516 - (char *)v515) / 24;
                uint64_t v655 = (uint64_t)v510 - 8;
                v658 = (void *)v510 - 3;
                if (v517 <= 1) {
                  unint64_t v517 = 1;
                }
                unint64_t v671 = v517;
                do
                {
                  uint64_t v518 = v507[3] + 24 * v166;
                  v519 = *(uint64_t **)v518;
                  v521 = (void *)(v518 + 8);
                  v520 = *(uint64_t **)(v518 + 8);
                  if (*(uint64_t **)v518 != v520)
                  {
                    float v522 = 0.0;
                    do
                    {
                      uint64_t v523 = *v519++;
                      v524 = (char *)v683 + 48 * v523;
                      float v525 = *(float *)(__p + 4 * *((void *)v524 + 4));
                      if (*((_DWORD *)v524 + 10)) {
                        float v525 = -v525;
                      }
                      float v522 = v522 + v525;
                    }
                    while (v519 != v520);
                    if (fabsf(v522) >= 0.0001)
                    {
                      if (v522 <= 0.0)
                      {
                        v527 = (void *)*((void *)v665 - 2);
                        unint64_t v526 = *((void *)v665 - 1);
                        if ((unint64_t)v527 >= v526)
                        {
                          unint64_t v529 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v527 - *v658) >> 3);
                          unint64_t v530 = v529 + 1;
                          if (v529 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            goto LABEL_911;
                          }
                          unint64_t v531 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v526 - *v658) >> 3);
                          if (2 * v531 > v530) {
                            unint64_t v530 = 2 * v531;
                          }
                          if (v531 >= 0x555555555555555) {
                            unint64_t v532 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v532 = v530;
                          }
                          *(void *)&v717[2] = v655;
                          if (v532) {
                            v533 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v655, v532);
                          }
                          else {
                            v533 = 0;
                          }
                          v534 = &v533[24 * v529];
                          *(void *)&v717[0] = v533;
                          *((void *)&v717[0] + 1) = v534;
                          *((void *)&v717[1] + 1) = &v533[24 * v532];
                          *(void *)v534 = 0;
                          *((void *)v534 + 1) = 0;
                          *((void *)v534 + 2) = 0;
                          *(void *)&v717[1] = v534 + 24;
                          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v658, v717);
                          v528 = (void *)*((void *)v665 - 2);
                          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
                        }
                        else
                        {
                          void *v527 = 0;
                          v527[1] = 0;
                          v528 = v527 + 3;
                          v527[2] = 0;
                        }
                        *((void *)v665 - 2) = v528;
                        v535 = *(uint64_t **)v518;
                        if (*v521 != *(void *)v518)
                        {
                          unint64_t v536 = 0;
                          v537 = v528 - 1;
                          v538 = (char *)*(v528 - 2);
                          do
                          {
                            v539 = (char *)v683 + 48 * v535[v536] + 24;
                            if ((unint64_t)v538 >= *v537)
                            {
                              v541 = (char *)*(v528 - 3);
                              uint64_t v542 = (v538 - v541) >> 3;
                              unint64_t v543 = v542 + 1;
                              if ((unint64_t)(v542 + 1) >> 61) {
                                goto LABEL_911;
                              }
                              uint64_t v544 = *v537 - (void)v541;
                              if (v544 >> 2 > v543) {
                                unint64_t v543 = v544 >> 2;
                              }
                              if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v545 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v545 = v543;
                              }
                              if (v545)
                              {
                                v546 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v528 - 1), v545);
                                v541 = (char *)*(v528 - 3);
                                v538 = (char *)*(v528 - 2);
                              }
                              else
                              {
                                v546 = 0;
                              }
                              v547 = &v546[8 * v542];
                              *(void *)v547 = *v539;
                              v540 = v547 + 8;
                              while (v538 != v541)
                              {
                                uint64_t v548 = *((void *)v538 - 1);
                                v538 -= 8;
                                *((void *)v547 - 1) = v548;
                                v547 -= 8;
                              }
                              *(v528 - 3) = v547;
                              *(v528 - 2) = v540;
                              *(v528 - 1) = &v546[8 * v545];
                              if (v541) {
                                operator delete(v541);
                              }
                            }
                            else
                            {
                              *(void *)v538 = *v539;
                              v540 = v538 + 8;
                            }
                            *(v528 - 2) = v540;
                            ++v536;
                            v535 = *(uint64_t **)v518;
                            v538 = v540;
                          }
                          while (v536 < (uint64_t)(*v521 - *(void *)v518) >> 3);
                        }
                      }
                      else
                      {
                        std::vector<unsigned long>::__move_assign(v661, (__n128 *)(v507[3] + 24 * v166));
                      }
                    }
                  }
                  ++v166;
                }
                while (v166 != v671);
              }
            }
            v507 = (void *)*v507;
          }
          while (v507);
        }
LABEL_776:
        for (uint64_t k = (uint64_t *)v706; k; uint64_t k = (uint64_t *)*k)
        {
          v550 = v715;
          uint64_t v551 = 0xAAAAAAAAAAAAAAABLL * (((char *)v715 - v714) >> 4);
          if (v715 >= (_OWORD *)v716)
          {
            unint64_t v553 = v551 + 1;
            if ((unint64_t)(v551 + 1) > 0x555555555555555) {
              goto LABEL_911;
            }
            if (0x5555555555555556 * ((v716 - v714) >> 4) > v553) {
              unint64_t v553 = 0x5555555555555556 * ((v716 - v714) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v716 - v714) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v554 = 0x555555555555555;
            }
            else {
              unint64_t v554 = v553;
            }
            *(void *)&v717[2] = &v716;
            if (v554) {
              unint64_t v554 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(v554);
            }
            else {
              uint64_t v555 = 0;
            }
            v556 = (_OWORD *)(v554 + 48 * v551);
            *(void *)&v717[0] = v554;
            *((void *)&v717[0] + 1) = v556;
            *((void *)&v717[1] + 1) = v554 + 48 * v555;
            _OWORD *v556 = 0u;
            v556[1] = 0u;
            v556[2] = 0u;
            *(void *)&v717[1] = v556 + 3;
            std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer((uint64_t *)&v714, v717);
            v552 = v715;
            std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer((uint64_t)v717);
          }
          else
          {
            v715[1] = 0u;
            v550[2] = 0u;
            v552 = v550 + 3;
            _OWORD *v550 = 0u;
          }
          v715 = v552;
          std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>((uint64_t)&v719, k[2], k[2], v551);
          std::vector<unsigned long>::__move_assign((uint64_t)(v552 - 3), (__n128 *)(k + 3));
        }
        v557 = (void *)v653[5];
        if (v557)
        {
          do
          {
            unint64_t v558 = v557[2];
            v559 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v722, *((unint64_t *)&v722 + 1), v558);
            if (v559)
            {
              unint64_t v560 = *((void *)&v708 + 1);
              unint64_t v561 = v559[3];
              uint64_t v562 = v708;
            }
            else
            {
              unint64_t v560 = *((void *)&v719 + 1);
              uint64_t v562 = v719;
              unint64_t v561 = v558;
            }
            v563 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v562, v560, v561);
            v565 = (void *)v557[3];
            v564 = (void *)v557[4];
            v656 = v557;
            if (v565 != v564)
            {
              v566 = &v714[48 * v563[3]];
              v666 = v566 + 24;
              v672 = (void **)(v566 + 32);
              v567 = v566 + 40;
              v659 = v566 + 40;
              v662 = (void *)v557[4];
              do
              {
                v568 = (void *)(*((void *)&v689 + 1) + 80 * *v565);
                unint64_t v166 = (unint64_t)(v568 + 5);
                unint64_t v569 = v568[5];
                uint64_t v570 = v568[6];
                if (v570 != v569)
                {
                  unint64_t v571 = 0;
                  v572 = v718[0];
                  do
                  {
                    unint64_t v573 = *(void *)(v569 + 8 * v571);
                    uint64_t v574 = v572[v573 >> 6];
                    if (((1 << v573) & v574) == 0)
                    {
                      v572[v573 >> 6] = (1 << v573) | v574;
                      uint64_t v575 = *((void *)v711 + 6 * v573);
                      if (v575 != -1
                        && *((void *)v711 + 6 * v573 + 1) != -1
                        && *((void *)v711 + 6 * v573 + 2) != -1
                        && *((void *)v711 + 6 * v573 + 3) != -1
                        && *((void *)v711 + 6 * v573 + 4) != -1
                        && v575 != *v568
                        && (*((unsigned char *)v685 + 16 * v575 + 8) & 2) == 0)
                      {
                        v576 = v672;
                        v577 = *v672;
                        if ((unint64_t)*v672 >= *v567)
                        {
                          unint64_t v579 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v577 - *v666) >> 3);
                          unint64_t v580 = v579 + 1;
                          if (v579 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            goto LABEL_911;
                          }
                          if (0x5555555555555556 * ((uint64_t)(*v567 - *v666) >> 3) > v580) {
                            unint64_t v580 = 0x5555555555555556 * ((uint64_t)(*v567 - *v666) >> 3);
                          }
                          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v567 - *v666) >> 3) >= 0x555555555555555) {
                            unint64_t v581 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v581 = v580;
                          }
                          *(void *)&v717[2] = v567;
                          if (v581) {
                            v582 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v567, v581);
                          }
                          else {
                            v582 = 0;
                          }
                          v583 = &v582[24 * v579];
                          *(void *)&v717[0] = v582;
                          *((void *)&v717[0] + 1) = v583;
                          *((void *)&v717[1] + 1) = &v582[24 * v581];
                          *(void *)v583 = 0;
                          *((void *)v583 + 1) = 0;
                          *((void *)v583 + 2) = 0;
                          *(void *)&v717[1] = v583 + 24;
                          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v666, v717);
                          v576 = v672;
                          v578 = *v672;
                          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
                        }
                        else
                        {
                          void *v577 = 0;
                          v577[1] = 0;
                          v578 = v577 + 3;
                          v577[2] = 0;
                        }
                        void *v576 = v578;
                        v584 = v578 - 1;
                        v585 = (char *)*(v578 - 2);
                        do
                        {
                          if ((unint64_t)v585 >= *v584)
                          {
                            v587 = (char *)*(v578 - 3);
                            uint64_t v588 = (v585 - v587) >> 3;
                            unint64_t v589 = v588 + 1;
                            if ((unint64_t)(v588 + 1) >> 61) {
                              goto LABEL_911;
                            }
                            uint64_t v590 = *v584 - (void)v587;
                            if (v590 >> 2 > v589) {
                              unint64_t v589 = v590 >> 2;
                            }
                            if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFF8) {
                              unint64_t v591 = 0x1FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v591 = v589;
                            }
                            if (v591)
                            {
                              v592 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v578 - 1), v591);
                              v587 = (char *)*(v578 - 3);
                              v585 = (char *)*(v578 - 2);
                            }
                            else
                            {
                              v592 = 0;
                            }
                            v593 = &v592[8 * v588];
                            *(void *)v593 = v573;
                            v586 = v593 + 8;
                            while (v585 != v587)
                            {
                              uint64_t v594 = *((void *)v585 - 1);
                              v585 -= 8;
                              *((void *)v593 - 1) = v594;
                              v593 -= 8;
                            }
                            *(v578 - 3) = v593;
                            *(v578 - 2) = v586;
                            *(v578 - 1) = &v592[8 * v591];
                            if (v587) {
                              operator delete(v587);
                            }
                          }
                          else
                          {
                            *(void *)v585 = v573;
                            v586 = v585 + 8;
                          }
                          *(v578 - 2) = v586;
                          unint64_t v573 = *((void *)v711 + 6 * v573 + 2);
                          v572 = v718[0];
                          *(void *)((char *)v718[0] + ((v573 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v573;
                          unint64_t v569 = *(void *)v166;
                          v585 = v586;
                        }
                        while (v573 != *(void *)(*(void *)v166 + 8 * v571));
                        uint64_t v570 = v568[6];
                        v567 = v659;
                        v564 = v662;
                      }
                    }
                    ++v571;
                  }
                  while (v571 < (uint64_t)(v570 - v569) >> 3);
                }
                ++v565;
              }
              while (v565 != v564);
            }
            v557 = (void *)*v656;
          }
          while (*v656);
        }
        std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)&v705[8]);
        v595 = v704[2];
        if (v704[2])
        {
          do
          {
            v596 = (void *)*v595;
            *(void *)&v717[0] = v595 + 3;
            std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v717);
            operator delete(v595);
            v595 = v596;
          }
          while (v596);
        }
        v597 = v704[0];
        v704[0] = 0;
        if (v597) {
          operator delete(v597);
        }
        v444 = (void *)*v653;
        if (!*v653) {
          goto LABEL_846;
        }
        goto LABEL_587;
      }
    }
    v670 = v449;
    v456 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::find<unsigned long>(v722, *((unint64_t *)&v722 + 1), v454);
    if (v456)
    {
      unint64_t v457 = v456[3];
      unint64_t v458 = (unint64_t)v704[1];
      if (v704[1])
      {
        uint8x8_t v459 = (uint8x8_t)vcnt_s8((int8x8_t)v704[1]);
        v459.i16[0] = vaddlv_u8(v459);
        if (v459.u32[0] > 1uLL)
        {
          unint64_t v166 = v456[3];
          if (v704[1] <= (void *)v457) {
            unint64_t v166 = v457 % (unint64_t)v704[1];
          }
        }
        else
        {
          unint64_t v166 = ((unint64_t)v704[1] - 1) & v457;
        }
        v461 = (void **)*((void *)v704[0] + v166);
        if (v461)
        {
          for (uint64_t m = *v461; m; uint64_t m = (void *)*m)
          {
            unint64_t v463 = m[1];
            if (v463 == v457)
            {
              if (m[2] == v457) {
                goto LABEL_675;
              }
            }
            else
            {
              if (v459.u32[0] > 1uLL)
              {
                if ((void *)v463 >= v704[1]) {
                  v463 %= (unint64_t)v704[1];
                }
              }
              else
              {
                v463 &= (unint64_t)v704[1] - 1;
              }
              if (v463 != v166) {
                break;
              }
            }
          }
        }
      }
      v464 = v456;
      uint64_t m = operator new(0x30uLL);
      void *m = 0;
      m[1] = v457;
      uint64_t v465 = v464[3];
      m[4] = 0;
      m[5] = 0;
      m[2] = v465;
      m[3] = 0;
      float v466 = (float)((unint64_t)v704[3] + 1);
      if (!v458 || (float)(*(float *)v705 * (float)v458) < v466)
      {
        BOOL v467 = (v458 & (v458 - 1)) != 0;
        if (v458 < 3) {
          BOOL v467 = 1;
        }
        unint64_t v468 = v467 | (2 * v458);
        unint64_t v469 = vcvtps_u32_f32(v466 / *(float *)v705);
        if (v468 <= v469) {
          int8x8_t prime = (int8x8_t)v469;
        }
        else {
          int8x8_t prime = (int8x8_t)v468;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v458 = (unint64_t)v704[1];
        }
        if (*(void *)&prime <= v458)
        {
          if (*(void *)&prime < v458)
          {
            unint64_t v477 = vcvtps_u32_f32((float)(unint64_t)v704[3] / *(float *)v705);
            if (v458 < 3
              || (uint8x8_t v478 = (uint8x8_t)vcnt_s8((int8x8_t)v458), v478.i16[0] = vaddlv_u8(v478), v478.u32[0] > 1uLL))
            {
              unint64_t v477 = std::__next_prime(v477);
            }
            else
            {
              uint64_t v479 = 1 << -(char)__clz(v477 - 1);
              if (v477 >= 2) {
                unint64_t v477 = v479;
              }
            }
            if (*(void *)&prime <= v477) {
              int8x8_t prime = (int8x8_t)v477;
            }
            if (*(void *)&prime >= v458)
            {
              unint64_t v458 = (unint64_t)v704[1];
            }
            else
            {
              if (prime) {
                goto LABEL_631;
              }
              v506 = v704[0];
              v704[0] = 0;
              if (v506) {
                operator delete(v506);
              }
              unint64_t v458 = 0;
              v704[1] = 0;
            }
          }
        }
        else
        {
LABEL_631:
          if (*(void *)&prime >> 61) {
            goto LABEL_912;
          }
          v471 = operator new(8 * *(void *)&prime);
          v472 = v704[0];
          v704[0] = v471;
          if (v472) {
            operator delete(v472);
          }
          uint64_t v473 = 0;
          v704[1] = (void *)prime;
          do
            *((void *)v704[0] + v473++) = 0;
          while (*(void *)&prime != v473);
          v474 = (void **)v704[2];
          if (v704[2])
          {
            unint64_t v475 = *((void *)v704[2] + 1);
            uint8x8_t v476 = (uint8x8_t)vcnt_s8(prime);
            v476.i16[0] = vaddlv_u8(v476);
            if (v476.u32[0] > 1uLL)
            {
              if (v475 >= *(void *)&prime) {
                v475 %= *(void *)&prime;
              }
            }
            else
            {
              v475 &= *(void *)&prime - 1;
            }
            *((void *)v704[0] + v475) = &v704[2];
            for (uint64_t n = *v474; n; v475 = v481)
            {
              unint64_t v481 = n[1];
              if (v476.u32[0] > 1uLL)
              {
                if (v481 >= *(void *)&prime) {
                  v481 %= *(void *)&prime;
                }
              }
              else
              {
                v481 &= *(void *)&prime - 1;
              }
              if (v481 != v475)
              {
                if (!*((void *)v704[0] + v481))
                {
                  *((void *)v704[0] + v481) = v474;
                  goto LABEL_656;
                }
                *v474 = (void *)*n;
                *uint64_t n = **((void **)v704[0] + v481);
                **((void **)v704[0] + v481) = n;
                uint64_t n = v474;
              }
              unint64_t v481 = v475;
LABEL_656:
              v474 = (void **)n;
              uint64_t n = (void *)*n;
            }
          }
          unint64_t v458 = (unint64_t)prime;
        }
        if ((v458 & (v458 - 1)) != 0)
        {
          if (v458 <= v457) {
            unint64_t v166 = v457 % v458;
          }
          else {
            unint64_t v166 = v457;
          }
        }
        else
        {
          unint64_t v166 = (v458 - 1) & v457;
        }
      }
      v482 = v704[0];
      v483 = (void *)*((void *)v704[0] + v166);
      if (v483)
      {
        void *m = *v483;
        goto LABEL_673;
      }
      void *m = v704[2];
      v704[2] = m;
      v482[v166] = &v704[2];
      if (*m)
      {
        unint64_t v484 = *(void *)(*m + 8);
        if ((v458 & (v458 - 1)) != 0)
        {
          if (v484 >= v458) {
            v484 %= v458;
          }
        }
        else
        {
          v484 &= v458 - 1;
        }
        v483 = (char *)v704[0] + 8 * v484;
LABEL_673:
        void *v483 = m;
      }
      ++v704[3];
LABEL_675:
      unint64_t v485 = m[5];
      v486 = (void *)m[4];
      if ((unint64_t)v486 >= v485)
      {
        uint64_t v488 = m[3];
        unint64_t v489 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v486 - v488) >> 3);
        unint64_t v490 = v489 + 1;
        if (v489 + 1 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_911;
        }
        unint64_t v491 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v485 - v488) >> 3);
        if (2 * v491 > v490) {
          unint64_t v490 = 2 * v491;
        }
        if (v491 >= 0x555555555555555) {
          unint64_t v492 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v492 = v490;
        }
        *(void *)&v717[2] = m + 5;
        if (v492) {
          v493 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(m + 5), v492);
        }
        else {
          v493 = 0;
        }
        v494 = &v493[24 * v489];
        *(void *)&v717[0] = v493;
        *((void *)&v717[0] + 1) = v494;
        *((void *)&v717[1] + 1) = &v493[24 * v492];
        *(void *)v494 = 0;
        *((void *)v494 + 1) = 0;
        *((void *)v494 + 2) = 0;
        *(void *)&v717[1] = v494 + 24;
        std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(m + 3, v717);
        v487 = (void *)m[4];
        std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v717);
      }
      else
      {
        void *v486 = 0;
        v486[1] = 0;
        v487 = v486 + 3;
        v486[2] = 0;
      }
      m[4] = v487;
      v460 = (char **)(v487 - 3);
    }
    else
    {
      v460 = (char **)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v705[8], v454, v453)+ 3);
    }
    v495 = v460 + 2;
    v496 = v460[1];
    do
    {
      unint64_t v166 = (unint64_t)v711;
      *(void *)((char *)v718[0] + ((v451 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v451;
      if ((unint64_t)v496 >= *v495)
      {
        v498 = *v460;
        uint64_t v499 = (v496 - *v460) >> 3;
        unint64_t v500 = v499 + 1;
        if ((unint64_t)(v499 + 1) >> 61) {
          goto LABEL_911;
        }
        uint64_t v501 = *v495 - (void)v498;
        if (v501 >> 2 > v500) {
          unint64_t v500 = v501 >> 2;
        }
        if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v502 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v502 = v500;
        }
        if (v502)
        {
          v503 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v460 + 2), v502);
          v498 = *v460;
          v496 = v460[1];
        }
        else
        {
          v503 = 0;
        }
        v504 = &v503[8 * v499];
        *(void *)v504 = v451;
        v497 = v504 + 8;
        while (v496 != v498)
        {
          uint64_t v505 = *((void *)v496 - 1);
          v496 -= 8;
          *((void *)v504 - 1) = v505;
          v504 -= 8;
        }
        *v460 = v504;
        v460[1] = v497;
        v460[2] = &v503[8 * v502];
        if (v498) {
          operator delete(v498);
        }
      }
      else
      {
        *(void *)v496 = v451;
        v497 = v496 + 8;
      }
      v460[1] = v497;
      unint64_t v451 = *(void *)(v166 + 48 * v451 + 8);
      uint64_t v446 = *v447;
      v496 = v497;
    }
    while (v451 != *(void *)(*v447 + 8 * v450));
    v449 = v670;
    uint64_t v448 = *v670;
    goto LABEL_590;
  }
LABEL_846:
  v443 = v714;
  v442 = v715;
  v704[0] = v714;
  v704[1] = v715;
  v441 = v716;
  v704[2] = v716;
  v715 = 0;
  v714 = 0;
  v716 = 0;
  if (v718[0]) {
    operator delete(v718[0]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v708);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v719);
LABEL_849:
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v722);
  if (v711)
  {
    v712 = v711;
    operator delete(v711);
  }
  *(void *)&v717[0] = &v714;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)v717);
  if (v694)
  {
    v598 = (void **)v717;
  }
  else
  {
    *(void *)&v717[0] = v443;
    *((void *)&v717[0] + 1) = v442;
    v598 = v704;
    *(void *)&v717[1] = v441;
  }
  uint64_t v599 = v652;
  *v598 = 0;
  v598[1] = 0;
  v598[2] = 0;
  *(void *)&long long v719 = v704;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)&v719);
  v600 = (void *)v698;
  if ((void)v698)
  {
    do
    {
      v601 = (void *)*v600;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<re::ProfilerDeferredStatisticCount>>>>::~__hash_table((uint64_t)(v600 + 3));
      operator delete(v600);
      v600 = v601;
    }
    while (v601);
  }
  v602 = (void *)v697;
  *(void *)&long long v697 = 0;
  if (v602) {
    operator delete(v602);
  }
  if (v700) {
    operator delete(v700);
  }
  v603 = (_anonymous_namespace_ *)v701;
  if (v701)
  {
    v702 = (char *)v701;
    operator delete(v701);
  }
  if (!v694)
  {
    uint64_t v673 = *(void *)&v717[0];
    uint64_t v608 = *((void *)&v717[0] + 1) - *(void *)&v717[0];
    if (*((void *)&v717[0] + 1) == *(void *)&v717[0])
    {
      v649 = 0;
      v650 = 0;
      v610 = 0;
LABEL_908:
      long long v719 = 0uLL;
      *(void *)&long long v720 = 0;
      *(unsigned char *)uint64_t v599 = 1;
      *(void *)(v599 + 8) = v610;
      *(void *)(v599 + 16) = v650;
      *(void *)(v599 + 24) = v649;
      memset(v704, 0, 24);
      *(void *)&long long v722 = v704;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v722);
      *(void *)&long long v722 = &v719;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v722);
      goto LABEL_909;
    }
    unint64_t v609 = 0xAAAAAAAAAAAAAAABLL * (v608 >> 4);
    if (v609 <= 0x555555555555555)
    {
      v610 = (char *)operator new(*((void *)&v717[0] + 1) - *(void *)&v717[0]);
      *(void *)&long long v719 = v610;
      v657 = &v610[16 * (v608 >> 4)];
      *(void *)&long long v720 = v657;
      size_t v611 = 48 * ((v608 - 48) / 0x30uLL) + 48;
      bzero(v610, v611);
      unint64_t v612 = 0;
      v654 = &v610[v611];
      *((void *)&v719 + 1) = &v610[v611];
      v663 = v610;
      unint64_t v660 = v609;
      do
      {
        v613 = &v610[48 * v612];
        v614 = (void **)(v613 + 24);
        uint64_t v615 = v673 + 48 * v612;
        uint64_t v618 = *(void *)(v615 + 24);
        v617 = (void *)(v615 + 24);
        uint64_t v616 = v618;
        uint64_t v619 = v673 + 48 * v612;
        uint64_t v621 = *(void *)(v619 + 32);
        v620 = (void *)(v619 + 32);
        std::vector<unsigned long>::reserve((void **)v613 + 3, 1 - 0x5555555555555555 * ((v621 - v616) >> 3));
        re::pathprocessing::PathTopologyGenerator::extractBoundary((uint64_t)&v674, *(void **)(v673 + 48 * v612), *(void **)(v673 + 48 * v612 + 8), 0, (char **)v613);
        unint64_t v622 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v613 + 1) - *(void *)v613) >> 3);
        v624 = (unint64_t **)(v613 + 32);
        v623 = (unint64_t *)*((void *)v613 + 4);
        v626 = v613 + 40;
        unint64_t v625 = *((void *)v613 + 5);
        if ((unint64_t)v623 >= v625)
        {
          v628 = (unint64_t *)*v614;
          uint64_t v629 = ((char *)v623 - (unsigned char *)*v614) >> 3;
          unint64_t v630 = v629 + 1;
          if ((unint64_t)(v629 + 1) >> 61) {
            goto LABEL_911;
          }
          uint64_t v631 = v625 - (void)v628;
          if (v631 >> 2 > v630) {
            unint64_t v630 = v631 >> 2;
          }
          if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v632 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v632 = v630;
          }
          if (v632)
          {
            v633 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v613 + 40), v632);
            v623 = *v624;
            v628 = (unint64_t *)*v614;
          }
          else
          {
            v633 = 0;
          }
          v634 = (unint64_t *)&v633[8 * v629];
          unint64_t *v634 = v622;
          v627 = v634 + 1;
          while (v623 != v628)
          {
            unint64_t v635 = *--v623;
            *--v634 = v635;
          }
          *v614 = v634;
          *v624 = v627;
          void *v626 = &v633[8 * v632];
          if (v628) {
            operator delete(v628);
          }
        }
        else
        {
          unint64_t *v623 = v622;
          v627 = v623 + 1;
        }
        *v624 = v627;
        v636 = (void **)*v617;
        v637 = (void **)*v620;
        while (v636 != v637)
        {
          re::pathprocessing::PathTopologyGenerator::extractBoundary((uint64_t)&v674, *v636, v636[1], 1, (char **)v613);
          unint64_t v638 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v613 + 1) - *(void *)v613) >> 3);
          v639 = *v624;
          if ((unint64_t)*v624 >= *v626)
          {
            v641 = (unint64_t *)*v614;
            uint64_t v642 = ((char *)v639 - (unsigned char *)*v614) >> 3;
            unint64_t v643 = v642 + 1;
            if ((unint64_t)(v642 + 1) >> 61) {
              goto LABEL_911;
            }
            uint64_t v644 = *v626 - (void)v641;
            if (v644 >> 2 > v643) {
              unint64_t v643 = v644 >> 2;
            }
            if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v645 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v645 = v643;
            }
            if (v645)
            {
              v646 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(v613 + 40), v645);
              v639 = *v624;
              v641 = (unint64_t *)*v614;
            }
            else
            {
              v646 = 0;
            }
            v647 = (unint64_t *)&v646[8 * v642];
            unint64_t *v647 = v638;
            v640 = v647 + 1;
            while (v639 != v641)
            {
              unint64_t v648 = *--v639;
              *--v647 = v648;
            }
            *v614 = v647;
            *v624 = v640;
            void *v626 = &v646[8 * v645];
            if (v641) {
              operator delete(v641);
            }
          }
          else
          {
            unint64_t *v639 = v638;
            v640 = v639 + 1;
          }
          *v624 = v640;
          v636 += 3;
        }
        ++v612;
        v610 = v663;
      }
      while (v612 < v660);
      uint64_t v599 = v652;
      v650 = v654;
      v649 = v657;
      goto LABEL_908;
    }
LABEL_911:
    abort();
  }
  if (v696 >= 0) {
    v604 = v695;
  }
  else {
    v604 = (void **)v695[0];
  }
  long long v605 = *(_OWORD *)v704;
  v606 = v704[2];
  v607 = v704[3];
  *(unsigned char *)uint64_t v652 = 0;
  *(void *)(v652 + 8) = 3;
  *(void *)(v652 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
  *(_OWORD *)(v652 + 24) = v605;
  *(void *)(v652 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v606;
  *(void *)(v652 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v607;
LABEL_909:
  v704[0] = v717;
  std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
LABEL_206:
  if (SHIBYTE(v696) < 0) {
    operator delete(v695[0]);
  }
  if (*((void *)&v692 + 1))
  {
    *(void *)&long long v693 = *((void *)&v692 + 1);
    operator delete(*((void **)&v692 + 1));
  }
  if ((void)v691)
  {
    *((void *)&v691 + 1) = v691;
    operator delete((void *)v691);
  }
  long long v175 = (void *)*((void *)&v689 + 1);
  if (*((void *)&v689 + 1))
  {
    long long v176 = (void *)v690;
    long long v177 = (void *)*((void *)&v689 + 1);
    if ((void)v690 != *((void *)&v689 + 1))
    {
      do
      {
        v176 -= 10;
        std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](v176);
      }
      while (v176 != v175);
      long long v177 = (void *)*((void *)&v689 + 1);
    }
    *(void *)&long long v690 = v175;
    operator delete(v177);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v685)
  {
    v686 = v685;
    operator delete(v685);
  }
  if (v683)
  {
    v684 = v683;
    operator delete(v683);
  }
  if (v681)
  {
    v682 = v681;
    operator delete(v681);
  }
  long long v178 = (char *)v679;
  if (v679)
  {
    int v179 = v680;
    int v180 = v679;
    if (v680 != v679)
    {
      long long v181 = v680;
      do
      {
        unint64_t v183 = (void *)*((void *)v181 - 3);
        v181 -= 24;
        int v182 = v183;
        if (v183)
        {
          *(v179 - 2) = v182;
          operator delete(v182);
        }
        int v179 = v181;
      }
      while (v181 != v178);
      int v180 = v679;
    }
    v680 = v178;
    operator delete(v180);
  }
  v704[0] = &v677;
  std::vector<re::pathprocessing::ContinuousEdge>::__destroy_vector::operator()[abi:nn180100]((void ***)v704);
}

void re::pathprocessing::PathTopologyGenerator::extractBoundary(uint64_t a1, void *a2, void *a3, int a4, char **a5)
{
  if (a2 != a3)
  {
    uint64_t v7 = a5 + 2;
    do
    {
      unint64_t v45 = a2;
      uint64_t v8 = *(void *)(a1 + 96) + 48 * *a2;
      unint64_t v9 = (void *)(*(void *)(a1 + 24) + 72 * *(void *)(v8 + 32));
      std::vector<re::pathprocessing::Bezier2>::reserve((void **)a5, v9[5] - 0x5555555555555555 * ((a5[1] - *a5) >> 3));
      int v10 = *(_DWORD *)(v8 + 40);
      uint64_t v11 = v9[5];
      if (v10 == a4)
      {
        if (v11)
        {
          unint64_t v12 = 0;
          uint64_t v13 = a5[1];
          do
          {
            uint64_t v14 = **(void **)a1
                + 24
                * *(void *)(*(void *)(v9[1] + (((v9[4] + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v9[4] + v12) & 0x1FF));
            if ((unint64_t)v13 >= *v7)
            {
              unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a5) >> 3);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_45;
              }
              if (0x5555555555555556 * ((uint64_t)(*v7 - (void)*a5) >> 3) > v17) {
                unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v7 - (void)*a5) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - (void)*a5) >> 3) >= 0x555555555555555) {
                unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v18 = v17;
              }
              if (v18) {
                uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v18);
              }
              else {
                uint64_t v19 = 0;
              }
              unint64_t v20 = &v19[24 * v16];
              long long v21 = *(_OWORD *)v14;
              *((void *)v20 + 2) = *(void *)(v14 + 16);
              *(_OWORD *)unint64_t v20 = v21;
              unint64_t v23 = *a5;
              unint64_t v22 = a5[1];
              float v24 = v20;
              if (v22 != *a5)
              {
                do
                {
                  long long v25 = *(_OWORD *)(v22 - 24);
                  *((void *)v24 - 1) = *((void *)v22 - 1);
                  *(_OWORD *)(v24 - 24) = v25;
                  v24 -= 24;
                  v22 -= 24;
                }
                while (v22 != v23);
                unint64_t v22 = *a5;
              }
              uint64_t v13 = v20 + 24;
              *a5 = v24;
              a5[1] = v20 + 24;
              a5[2] = &v19[24 * v18];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              long long v15 = *(_OWORD *)v14;
              *((void *)v13 + 2) = *(void *)(v14 + 16);
              *(_OWORD *)uint64_t v13 = v15;
              v13 += 24;
            }
            a5[1] = v13;
            ++v12;
          }
          while (v12 < v9[5]);
        }
      }
      else
      {
        for (; v11; a5[1] = v32)
        {
          if (v9[5] <= (unint64_t)--v11) {
LABEL_45:
          }
            abort();
          uint64_t v26 = (uint64_t *)(**(void **)a1
                          + 24
                          * *(void *)(*(void *)(v9[1]
                                                  + (((unint64_t)(v9[4] + v11) >> 6) & 0x3FFFFFFFFFFFFF8))
                                      + 8 * ((v9[4] + v11) & 0x1FF)));
          uint64_t v27 = v26[1];
          uint64_t v28 = v26[2];
          uint64_t v29 = *v26;
          unint64_t v31 = a5[1];
          unint64_t v30 = (unint64_t)a5[2];
          if ((unint64_t)v31 >= v30)
          {
            unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *a5) >> 3);
            unint64_t v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_45;
            }
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*a5) >> 3);
            if (2 * v35 > v34) {
              unint64_t v34 = 2 * v35;
            }
            if (v35 >= 0x555555555555555) {
              unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36) {
              uint64_t v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v36);
            }
            else {
              uint64_t v37 = 0;
            }
            uint64_t v38 = &v37[24 * v33];
            *(void *)uint64_t v38 = v28;
            *((void *)v38 + 1) = v27;
            *((void *)v38 + 2) = v29;
            unint64_t v40 = *a5;
            float v39 = a5[1];
            float v41 = v38;
            if (v39 != *a5)
            {
              do
              {
                long long v42 = *(_OWORD *)(v39 - 24);
                *((void *)v41 - 1) = *((void *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              float v39 = *a5;
            }
            unint64_t v32 = v38 + 24;
            *a5 = v41;
            a5[1] = v38 + 24;
            a5[2] = &v37[24 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(void *)unint64_t v31 = v28;
            *((void *)v31 + 1) = v27;
            unint64_t v32 = v31 + 24;
            *((void *)v31 + 2) = v29;
          }
        }
      }
      a2 = v45 + 1;
    }
    while (v45 + 1 != a3);
  }
}

void std::vector<re::pathprocessing::Bezier2>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v3, a2);
    uint64_t v7 = &v6[24 * v5];
    unint64_t v9 = &v6[24 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::allocator<re::pathprocessing::FaceGroup>::destroy[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
}

void std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  float v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  float v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<re::pathprocessing::BezierIslandInfo>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<re::pathprocessing::BezierIslandInfo>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

uint64_t *std::vector<re::pathprocessing::IslandHalfEdgeLoop>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v6 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
      *(void *)(v7 - 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *float32x2_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::pathprocessing::IslandHalfEdgeLoop>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a1);
}

uint64_t std::__split_buffer<re::pathprocessing::IslandHalfEdgeLoop>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<re::pathprocessing::IslandHalfEdgeLoop>::destroy[abi:nn180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,unsigned long const&,unsigned long &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = a2;
  long long v14[2] = a3;
  v14[3] = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    *unint64_t v22 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

__n128 std::vector<unsigned long>::__move_assign(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::unordered_map<unsigned long,std::vector<unsigned long>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint8x8_t v10 = (char *)operator new(0x40uLL);
  *(void *)uint8x8_t v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v19 = operator new(8 * *(void *)&prime);
          size_t v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          unint64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            uint64_t v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v22;
                    goto LABEL_55;
                  }
                  *unint64_t v22 = *v28;
                  *uint64_t v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v28;
                  uint64_t v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                unint64_t v22 = v28;
                uint64_t v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v30 = *a1;
  unint64_t v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *(void *)uint8x8_t v10 = *v31;
LABEL_72:
    *unint64_t v31 = v10;
    goto LABEL_73;
  }
  *(void *)uint8x8_t v10 = *v12;
  *unint64_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v32 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void re::pathprocessing::moveTo(void **a1, double a2, float a3)
{
  *((float *)&a2 + 1) = a3;
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    uint64_t v9 = (uint64_t)(v7 - (void)*a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v19 = a2;
      float v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v4, v12);
      a2 = v19;
    }
    else
    {
      float v13 = 0;
    }
    float v14 = &v13[32 * v9];
    BOOL v15 = &v13[32 * v12];
    *float v14 = 77;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *((double *)v14 + 3) = a2;
    uint8x8_t v8 = v14 + 32;
    unint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 32;
        v16 -= 32;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 77;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(double *)(v7 + 24) = a2;
    uint8x8_t v8 = (char *)(v7 + 32);
  }
  a1[1] = v8;
}

void re::pathprocessing::lineTo(void **a1, double a2, float a3)
{
  *((float *)&a2 + 1) = a3;
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    uint64_t v9 = (uint64_t)(v7 - (void)*a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v19 = a2;
      float v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v4, v12);
      a2 = v19;
    }
    else
    {
      float v13 = 0;
    }
    float v14 = &v13[32 * v9];
    BOOL v15 = &v13[32 * v12];
    *float v14 = 76;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *((double *)v14 + 3) = a2;
    uint8x8_t v8 = v14 + 32;
    unint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *((_OWORD *)v16 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v16 - 2);
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 32;
        v16 -= 32;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 76;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(double *)(v7 + 24) = a2;
    uint8x8_t v8 = (char *)(v7 + 32);
  }
  a1[1] = v8;
}

void re::pathprocessing::quadTo(void **a1, double a2, float a3, double a4, float a5)
{
  *((float *)&a2 + 1) = a3;
  *((float *)&a4 + 1) = a5;
  uint8x8_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v7 = v8;
  unint64_t v9 = *(void *)(v6 - 8);
  if (v9 >= (unint64_t)v8)
  {
    uint64_t v11 = (uint64_t)(v9 - (void)*a1) >> 5;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59) {
      abort();
    }
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 4 > v12) {
      unint64_t v12 = v13 >> 4;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      double v21 = a2;
      double v22 = a4;
      BOOL v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v6, v14);
      a2 = v21;
      a4 = v22;
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v16 = (double *)&v15[32 * v11];
    unint64_t v17 = &v15[32 * v14];
    *(unsigned char *)unint64_t v16 = 81;
    v16[1] = a2;
    v16[2] = 0.0;
    v16[3] = a4;
    unint64_t v10 = (char *)(v16 + 4);
    double v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 4;
        v18 -= 32;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v9 = 81;
    *(double *)(v9 + 8) = a2;
    *(void *)(v9 + 16) = 0;
    unint64_t v10 = (char *)(v9 + 32);
    *(double *)(v9 + 24) = a4;
  }
  a1[1] = v10;
}

void re::pathprocessing::cubicTo(void **a1, double a2, float a3, double a4, float a5, double a6, float a7)
{
  *((float *)&a2 + 1) = a3;
  *((float *)&a4 + 1) = a5;
  *((float *)&a6 + 1) = a7;
  unint64_t v10 = a1[2];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = v10;
  unint64_t v11 = *(void *)(v8 - 8);
  if (v11 >= (unint64_t)v10)
  {
    uint64_t v13 = (uint64_t)(v11 - (void)*a1) >> 5;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59) {
      abort();
    }
    uint64_t v15 = v9 - (unsigned char *)*a1;
    if (v15 >> 4 > v14) {
      unint64_t v14 = v15 >> 4;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      double v24 = a4;
      double v25 = a6;
      double v23 = a2;
      unint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v8, v16);
      a2 = v23;
      a4 = v24;
      a6 = v25;
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long v18 = (double *)&v17[32 * v13];
    double v19 = &v17[32 * v16];
    *(unsigned char *)long long v18 = 67;
    v18[1] = a2;
    v18[2] = a4;
    v18[3] = a6;
    unint64_t v12 = (char *)(v18 + 4);
    double v21 = (char *)*a1;
    long long v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *((_OWORD *)v20 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v20 - 2);
        *((_OWORD *)v18 - 1) = v22;
        v18 -= 4;
        v20 -= 32;
      }
      while (v20 != v21);
      long long v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v11 = 67;
    *(double *)(v11 + 8) = a2;
    *(double *)(v11 + 16) = a4;
    *(double *)(v11 + 24) = a6;
    unint64_t v12 = (char *)(v11 + 32);
  }
  a1[1] = v12;
}

void re::pathprocessing::close(void **a1)
{
  uint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 >= (unint64_t)v4)
  {
    uint64_t v7 = (uint64_t)(v5 - (void)*a1) >> 5;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59) {
      abort();
    }
    uint64_t v9 = v3 - (unsigned char *)*a1;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>(v2, v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[32 * v7];
    uint64_t v13 = &v11[32 * v10];
    *unint64_t v12 = 90;
    uint64_t v6 = v12 + 32;
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = 0;
    *((void *)v12 + 1) = 0;
    uint64_t v15 = (char *)*a1;
    unint64_t v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        long long v16 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v12 - 1) = v16;
        v12 -= 32;
        v14 -= 32;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 90;
    uint64_t v6 = (char *)(v5 + 32);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 8) = 0;
  }
  a1[1] = v6;
}

uint64_t re::SpatialCurve<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  float v2 = a2;
  if (*(unsigned char *)a1) {
    float v2 = re::BezierSpline<float>::evaluateAt(a1 + 208, a2);
  }
  unint64_t SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(a1, v2);
  if (*(void *)(a1 + 184) <= SplineIndexForParameter)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v6 = *(uint64_t (**)(__n128))(**(void **)(*(void *)(a1 + 200)
                                                      + 24 * SplineIndexForParameter)
                                        + 120);
  v5.n128_f32[0] = v2;
  return v6(v5);
}

BOOL re::pathprocessing::computeNormal(BOOL result, unint64_t a2, unint64_t a3, void *a4)
{
  if (a2 < a3)
  {
    unint64_t v6 = a2;
    uint64_t v7 = (uint64_t *)result;
    unint64_t v8 = a3 - 1;
    uint64_t v9 = 24 * a2;
    do
    {
      uint64_t v10 = *v7;
      unint64_t v11 = (float32x2_t *)(*v7 + 24 * v8);
      BOOL isLine = re::pathprocessing::Bezier2::isLine(v11);
      float32x2_t v13 = *v11;
      if (isLine)
      {
        float32x2_t v14 = vsub_f32(v11[2], v13);
      }
      else
      {
        float32x2_t v15 = v11[1];
        float32x2_t v16 = vmul_f32(vsub_f32(v15, v13), 0);
        float32x2_t v17 = vsub_f32(v11[2], v15);
        float32x2_t v14 = vadd_f32(v16, vadd_f32(v17, v17));
      }
      __n128 result = re::pathprocessing::Bezier2::isLine((float32x2_t *)(v10 + v9));
      float32x2_t v18 = *(float32x2_t *)(v10 + v9);
      double v19 = (float32x2_t *)(v10 + v9);
      if (result)
      {
        float32x2_t v20 = v19[2];
        float32x2_t v21 = vsub_f32(v20, v18);
      }
      else
      {
        float32x2_t v22 = v19[1];
        float32x2_t v20 = v19[2];
        float32x2_t v23 = vsub_f32(v22, v18);
        float32x2_t v21 = vadd_f32(vadd_f32(v23, v23), vmul_f32(vsub_f32(v20, v22), 0));
      }
      float32x2_t v24 = vmul_f32(v14, v14);
      v24.i32[0] = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
      float32x2_t v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
      int32x2_t v27 = (int32x2_t)vmul_n_f32(v14, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
      v26.f32[0] = -*(float *)&v27.i32[1];
      float32x2_t v28 = vmul_f32(v21, v21);
      v28.i32[0] = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
      float32x2_t v29 = (float32x2_t)vzip1_s32((int32x2_t)v26, v27);
      float32x2_t v30 = vrsqrte_f32((float32x2_t)v28.u32[0]);
      float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30)));
      int32x2_t v32 = (int32x2_t)vmul_f32(v31, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v31, v31)));
      int32x2_t v33 = (int32x2_t)vmul_n_f32(v21, *(float *)v32.i32);
      *(float *)v32.i32 = -*(float *)&v33.i32[1];
      float32x2_t v34 = vmul_f32(vadd_f32(v29, (float32x2_t)vzip1_s32(v32, v33)), (float32x2_t)0x3F0000003F000000);
      float v35 = vaddv_f32(vmul_f32(v34, v34));
      if (fabsf(v35) < 1.0e-10)
      {
        float32x2_t v36 = vadd_f32(vsub_f32(*v11, vadd_f32(v11[1], v11[1])), v11[2]);
        float32x2_t v37 = vadd_f32(v36, v36);
        float32x2_t v38 = vmul_f32(v37, v37);
        v38.i32[0] = vadd_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1)).u32[0];
        float32x2_t v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
        float32x2_t v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
        float32x2_t v41 = vmul_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
        float32x2_t v42 = vadd_f32(v20, vsub_f32(v18, vadd_f32(*(float32x2_t *)(v10 + v9 + 8), *(float32x2_t *)(v10 + v9 + 8))));
        float32x2_t v43 = vadd_f32(v42, v42);
        float32x2_t v44 = vmul_f32(v43, v43);
        v44.i32[0] = vadd_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)).u32[0];
        float32x2_t v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
        float32x2_t v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
        float32x2_t v34 = vadd_f32(vmul_f32(v41, (float32x2_t)0x3F0000003F000000), vmul_f32(vmul_n_f32(v43, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).f32[0]), (float32x2_t)0x3F0000003F000000));
        float v35 = vaddv_f32(vmul_f32(v34, v34));
      }
      float32x2_t v47 = vrsqrte_f32((float32x2_t)LODWORD(v35));
      float32x2_t v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)LODWORD(v35), vmul_f32(v47, v47)));
      *(float32x2_t *)(*a4 + 8 * v6) = vmul_n_f32(v34, vmul_f32(v48, vrsqrts_f32((float32x2_t)LODWORD(v35), vmul_f32(v48, v48))).f32[0]);
      unint64_t v8 = v6;
      v9 += 24;
      ++v6;
    }
    while (a3 != v6);
  }
  return result;
}

uint64_t *re::pathprocessing::offsetBeziers(uint64_t *result, void *a2, unint64_t a3, unint64_t a4, uint64_t *a5, float a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  if (a4 > a3)
  {
    unint64_t v12 = a4 - 1;
    uint64_t v13 = 24 * a4 - 8;
    uint64_t v14 = a3;
    do
    {
      uint64_t v15 = *a5;
      float32x2_t v16 = (float32x2_t *)(*a5 + v13);
      uint64_t v17 = *result;
      int v18 = *(_DWORD *)(*a2 + 4 * v12);
      if (v18 == 3)
      {
        float32x2_t v23 = *v16;
        float32x2_t v24 = v16[-2];
        int32x2_t v25 = (int32x2_t)vsub_f32(*v16, v24);
        *(float *)&a12 = -*(float *)&v25.i32[1];
        float32x2_t v26 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a12, v25);
        float32x2_t v27 = vmul_f32(v26, v26);
        v27.i32[0] = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
        float32x2_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
        float32x2_t v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
        float32x2_t v30 = vmul_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
        a12 = COERCE_DOUBLE(vmul_n_f32(*(float32x2_t *)(v17 + 8 * v12), a6));
        float32x2_t v31 = vadd_f32(v16[-1], vmul_n_f32(v30, a6));
        v16[-2] = vadd_f32(v24, *(float32x2_t *)&a12);
        v16[-1] = v31;
        *float32x2_t v16 = vadd_f32(v23, vmul_n_f32(*(float32x2_t *)(v17 + 8 * v14), a6));
      }
      else if (v18 == 2)
      {
        float32x2_t v19 = vadd_f32(v16[-2], vmul_n_f32(*(float32x2_t *)(v17 + 8 * v12), a6));
        v16[-2] = v19;
        float32x2_t v20 = vmul_n_f32(*(float32x2_t *)(v17 + 8 * v14), a6);
        float32x2_t v21 = (float32x2_t *)(v15 + v13);
        float32x2_t v22 = vadd_f32(*(float32x2_t *)(v15 + v13), v20);
        *float32x2_t v21 = v22;
        v21[-1] = vadd_f32(vmul_f32(v19, (float32x2_t)0x3F0000003F000000), vmul_f32(v22, (float32x2_t)0x3F0000003F000000));
      }
      v13 -= 24;
      uint64_t v14 = --a4;
    }
    while (v12-- > a3);
  }
  return result;
}

void re::pathprocessing::createCapTriangles(uint64_t *a1, void *a2, char **a3, void *a4, int a5)
{
  int64x2_t v307 = 0uLL;
  int64_t value = 0;
  int64x2_t v305 = 0uLL;
  v306[0] = 0;
  __p[0] = 0;
  __p[1] = 0;
  v304[0] = 0;
  unint64_t v6 = a3[1] - *a3;
  unint64_t v7 = v6 >> 4;
  uint64_t v8 = *a1;
  if (a1[1] == *a1)
  {
    unint64_t v12 = 0;
    goto LABEL_410;
  }
  int64_t v291 = a3[1] - *a3;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v292 = v6 >> 4;
  int v298 = -1;
  do
  {
    uint64_t v15 = (float32x2_t *)(v8 + 24 * v11);
    float32x2_t v16 = (float32x2_t *)__p[0];
    if (__p[0] == v10)
    {
      if ((unint64_t)v10 >= v304[0])
      {
        unint64_t v17 = (uint64_t)(v304[0] - (void)v10) >> 2;
        if (v17 <= 1) {
          unint64_t v17 = 1;
        }
        if (v304[0] - (void)v10 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        float32x2_t v20 = (float32x2_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v18);
        *float32x2_t v20 = *v15;
        uint64_t v10 = v20 + 1;
        float32x2_t v22 = (char *)__p[0];
        float32x2_t v21 = (char *)__p[1];
        float32x2_t v23 = v20;
        if (__p[1] != __p[0])
        {
          do
          {
            float32x2_t v24 = *(float32x2_t *)(v21 - 8);
            v21 -= 8;
            v23[-1] = v24;
            --v23;
          }
          while (v21 != v22);
          float32x2_t v21 = (char *)__p[0];
        }
        __p[0] = v23;
        __p[1] = &v20[1];
        v304[0] = &v20[v19];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *v10++ = *v15;
      }
      __p[1] = v10;
      int v298 = v7;
      LODWORD(v7) = v7 + 1;
      float32x2_t v16 = (float32x2_t *)__p[0];
    }
    uint32x2_t v25 = (uint32x2_t)vceq_f32(v15[2], *v16);
    int v26 = vpmin_u32(v25, v25).u32[0];
    if (*(_DWORD *)(*a2 + 4 * v11) == 3)
    {
      if (v13 >= v14)
      {
        uint64_t v27 = ((char *)v13 - (char *)v12) >> 5;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59) {
          goto LABEL_433;
        }
        if (((char *)v14 - (char *)v12) >> 4 > v28) {
          unint64_t v28 = ((char *)v14 - (char *)v12) >> 4;
        }
        if ((unint64_t)((char *)v14 - (char *)v12) >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v29 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v29)
        {
          if (v29 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          float32x2_t v30 = (char *)operator new(32 * v29);
        }
        else
        {
          float32x2_t v30 = 0;
        }
        float32x2_t v31 = (float32x2_t *)&v30[32 * v27];
        *(_OWORD *)v31->f32 = 0u;
        *(_OWORD *)v31[2].f32 = 0u;
        if (v13 == v12)
        {
          float32x2_t v34 = &v30[32 * v27];
        }
        else
        {
          int32x2_t v32 = &v30[32 * v27];
          do
          {
            long long v33 = *(_OWORD *)v13[-2].f32;
            float32x2_t v34 = v32 - 32;
            *((_OWORD *)v32 - 2) = *(_OWORD *)v13[-4].f32;
            *((_OWORD *)v32 - 1) = v33;
            v13 -= 4;
            v32 -= 32;
          }
          while (v13 != v12);
        }
        uint64_t v14 = (float32x2_t *)&v30[32 * v29];
        uint64_t v13 = v31 + 4;
        if (v12) {
          operator delete(v12);
        }
        unint64_t v12 = (float32x2_t *)v34;
      }
      else
      {
        *(_OWORD *)v13->f32 = 0u;
        *(_OWORD *)v13[2].f32 = 0u;
        v13 += 4;
      }
      v13[-1] = (float32x2_t)v11;
      float32x2_t v35 = v15[1];
      float32x2_t v36 = vsub_f32(v35, *v15);
      float32x2_t v37 = vsub_f32(v15[2], v35);
      if (vmlas_n_f32((float)-v36.f32[1] * v37.f32[0], v37.f32[1], v36.f32[0]) >= 0.0)
      {
        v13[-4].i32[0] = v7 - 1;
        v13[-4].i32[1] = -1;
        int v39 = v298;
        if (v26 >= 0) {
          int v39 = v7;
        }
        v13[-3].i32[0] = v39;
        v13[-2] = v15[1];
        uint64_t v10 = (float32x2_t *)__p[1];
      }
      else
      {
        float32x2_t v38 = (float32x2_t *)__p[1];
        if (__p[1] >= (void *)v304[0])
        {
          int64_t v40 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            goto LABEL_433;
          }
          unint64_t v41 = (uint64_t)(v304[0] - (unint64_t)__p[0]) >> 2;
          if (v41 <= v40 + 1) {
            unint64_t v41 = v40 + 1;
          }
          if (v304[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          if (v42) {
            float32x2_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v42);
          }
          else {
            float32x2_t v43 = 0;
          }
          float32x2_t v44 = (float32x2_t *)&v43[8 * v40];
          *float32x2_t v44 = v15[1];
          uint64_t v10 = v44 + 1;
          float32x2_t v46 = (char *)__p[0];
          float32x2_t v45 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              float32x2_t v47 = *(float32x2_t *)(v45 - 8);
              v45 -= 8;
              v44[-1] = v47;
              --v44;
            }
            while (v45 != v46);
            float32x2_t v45 = (char *)__p[0];
          }
          __p[0] = v44;
          __p[1] = v10;
          v304[0] = &v43[8 * v42];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(float32x2_t *)__p[1] = v35;
          uint64_t v10 = v38 + 1;
        }
        __p[1] = v10;
        v13[-4].i32[0] = v7 - 1;
        v13[-4].i32[1] = v7;
        int v48 = v298;
        if (v26 >= 0) {
          int v48 = v7 + 1;
        }
        LODWORD(v7) = v7 + 1;
        v13[-3].i32[0] = v48;
      }
    }
    if ((unint64_t)v10 >= v304[0])
    {
      uint64_t v49 = ((char *)v10 - (char *)__p[0]) >> 3;
      if ((unint64_t)(v49 + 1) >> 61) {
        goto LABEL_433;
      }
      unint64_t v50 = (uint64_t)(v304[0] - (unint64_t)__p[0]) >> 2;
      if (v50 <= v49 + 1) {
        unint64_t v50 = v49 + 1;
      }
      if (v304[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51) {
        int64_t v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v304, v51);
      }
      else {
        int64_t v52 = 0;
      }
      unint64_t v53 = (float32x2_t *)&v52[8 * v49];
      *unint64_t v53 = v15[2];
      uint64_t v10 = v53 + 1;
      uint64_t v55 = (char *)__p[0];
      uint64_t v54 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          float32x2_t v56 = *(float32x2_t *)(v54 - 8);
          v54 -= 8;
          v53[-1] = v56;
          --v53;
        }
        while (v54 != v55);
        uint64_t v54 = (char *)__p[0];
      }
      __p[0] = v53;
      __p[1] = v10;
      v304[0] = &v52[8 * v51];
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      *v10++ = v15[2];
    }
    __p[1] = v10;
    if (v26 < 0)
    {
      uint64_t v57 = v10 - 1;
      __p[1] = &v10[-1];
      unint64_t v58 = (float32x2_t *)__p[0];
      if ((unint64_t)((char *)&v10[-1] - (char *)__p[0]) < 0x11) {
        goto LABEL_86;
      }
      if (__p[0] == v57)
      {
        float v62 = 0.0;
      }
      else
      {
        float32x2_t v59 = v10[-2];
        float v60 = 0.0;
        do
        {
          float32x2_t v61 = *v58++;
          float v60 = v60 + vmlas_n_f32((float)-v61.f32[1] * v59.f32[0], v59.f32[1], v61.f32[0]);
          float32x2_t v59 = v61;
        }
        while (v58 != v57);
        float v62 = v60 * 0.5;
      }
      if (fabsf(v62) >= 0.0001)
      {
        uint64_t v76 = v307.i64[1];
        if (v307.i64[1] >= (unint64_t)value)
        {
          unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v307.i64[1] - v307.i64[0]) >> 3);
          unint64_t v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_433;
          }
          if (0x5555555555555556 * (((uint64_t)value - v307.i64[0]) >> 3) > v80) {
            unint64_t v80 = 0x5555555555555556 * (((uint64_t)value - v307.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)value - v307.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v81 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v81 = v80;
          }
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)&value;
          uint64_t v82 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&value, v81);
          unint64_t v83 = &v82[6 * v79];
          __v.__first_ = v82;
          __v.__begin_ = v83;
          __v.__end_cap_.__value_ = &v82[6 * v84];
          *((void *)v83 + 1) = 0;
          *((void *)v83 + 2) = 0;
          *(void *)unint64_t v83 = 0;
          *(_OWORD *)unint64_t v83 = *(_OWORD *)__p;
          *((void *)v83 + 2) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          std::__split_buffer<unsigned int>::pointer end = v83 + 6;
          __v.__end_ = v83 + 6;
          float32x2_t v85 = (void *)v307.i64[1];
          float32x2_t v86 = (void *)v307.i64[0];
          std::__split_buffer<unsigned int>::pointer begin = __v.__begin_;
          if (v307.i64[1] == v307.i64[0])
          {
            int64x2_t v89 = vdupq_n_s64(v307.u64[1]);
          }
          else
          {
            do
            {
              *((void *)begin - 3) = 0;
              *((void *)begin - 2) = 0;
              begin -= 6;
              *((void *)begin + 2) = 0;
              long long v88 = *(_OWORD *)(v85 - 3);
              v85 -= 3;
              *(_OWORD *)std::__split_buffer<unsigned int>::pointer begin = v88;
              *((void *)begin + 2) = v85[2];
              *float32x2_t v85 = 0;
              v85[1] = 0;
              v85[2] = 0;
            }
            while (v85 != v86);
            int64x2_t v89 = v307;
            std::__split_buffer<unsigned int>::pointer end = __v.__end_;
          }
          v307.i64[0] = (uint64_t)begin;
          v307.i64[1] = (uint64_t)end;
          *(int64x2_t *)&__v.__begin_ = v89;
          uint64_t v90 = value;
          int64_t value = __v.__end_cap_.__value_;
          __v.__end_cap_.__value_ = v90;
          __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v89.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *(void *)v307.i64[1] = 0;
          *(void *)(v76 + 8) = 0;
          *(void *)(v76 + 16) = 0;
          *(_OWORD *)uint64_t v76 = *(_OWORD *)__p;
          *(void *)(v76 + 16) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          std::__split_buffer<unsigned int>::pointer end = (std::__split_buffer<unsigned int>::pointer)(v76 + 24);
        }
        v307.i64[1] = (uint64_t)end;
      }
      else
      {
LABEL_86:
        uint64_t v63 = v305.i64[1];
        if (v305.i64[1] >= v306[0])
        {
          unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((v305.i64[1] - v305.i64[0]) >> 3);
          unint64_t v66 = v65 + 1;
          if (v65 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_433;
          }
          if (0x5555555555555556 * ((v306[0] - v305.i64[0]) >> 3) > v66) {
            unint64_t v66 = 0x5555555555555556 * ((v306[0] - v305.i64[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v306[0] - v305.i64[0]) >> 3) >= 0x555555555555555) {
            unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v67 = v66;
          }
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)v306;
          float32x2_t v68 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v306, v67);
          float32x2_t v69 = &v68[6 * v65];
          __v.__first_ = v68;
          __v.__begin_ = v69;
          __v.__end_cap_.__value_ = &v68[6 * v70];
          *((void *)v69 + 1) = 0;
          *((void *)v69 + 2) = 0;
          *(void *)float32x2_t v69 = 0;
          *(_OWORD *)float32x2_t v69 = *(_OWORD *)__p;
          *((void *)v69 + 2) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          std::__split_buffer<unsigned int>::pointer v64 = v69 + 6;
          __v.__end_ = v69 + 6;
          unint64_t v71 = (void *)v305.i64[1];
          uint64_t v72 = (void *)v305.i64[0];
          std::__split_buffer<unsigned int>::pointer v73 = __v.__begin_;
          if (v305.i64[1] == v305.i64[0])
          {
            int64x2_t v75 = vdupq_n_s64(v305.u64[1]);
          }
          else
          {
            do
            {
              *((void *)v73 - 3) = 0;
              *((void *)v73 - 2) = 0;
              v73 -= 6;
              *((void *)v73 + 2) = 0;
              long long v74 = *(_OWORD *)(v71 - 3);
              v71 -= 3;
              *(_OWORD *)std::__split_buffer<unsigned int>::pointer v73 = v74;
              *((void *)v73 + 2) = v71[2];
              *unint64_t v71 = 0;
              v71[1] = 0;
              v71[2] = 0;
            }
            while (v71 != v72);
            int64x2_t v75 = v305;
            std::__split_buffer<unsigned int>::pointer v64 = __v.__end_;
          }
          v305.i64[0] = (uint64_t)v73;
          v305.i64[1] = (uint64_t)v64;
          *(int64x2_t *)&__v.__begin_ = v75;
          uint64_t v78 = (unsigned int *)v306[0];
          v306[0] = __v.__end_cap_.__value_;
          __v.__end_cap_.__value_ = v78;
          __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v75.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&__v);
        }
        else
        {
          *(void *)v305.i64[1] = 0;
          *(void *)(v63 + 8) = 0;
          *(void *)(v63 + 16) = 0;
          *(_OWORD *)uint64_t v63 = *(_OWORD *)__p;
          *(void *)(v63 + 16) = v304[0];
          __p[0] = 0;
          __p[1] = 0;
          v304[0] = 0;
          std::__split_buffer<unsigned int>::pointer v64 = (std::__split_buffer<unsigned int>::pointer)(v63 + 24);
        }
        v305.i64[1] = (uint64_t)v64;
      }
      uint64_t v10 = (float32x2_t *)__p[0];
      __p[1] = __p[0];
    }
    else
    {
      LODWORD(v7) = v7 + 1;
    }
    ++v11;
    uint64_t v8 = *a1;
  }
  while (v11 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  if (__p[0] == v10)
  {
    int v299 = v12;
    LODWORD(v7) = v292;
    if (v307.i64[0] != v307.i64[1])
    {
      re::pathprocessing::triangulateIndexed((uint64_t)&v307, v302);
      float32x2_t v92 = (unsigned int *)v302[0];
      float v91 = (char *)v302[1];
      if (v302[0] != v302[1])
      {
        int v93 = (char *)v302[0];
        do
        {
          *(_DWORD *)v93 += v292;
          v93 += 4;
        }
        while (v93 != v91);
      }
      if (v91 - (char *)v92 >= 1)
      {
        float32x2_t v94 = a3[6];
        float32x2_t v95 = a3[7];
        uint64_t v96 = (v91 - (char *)v92) >> 2;
        uint64_t v97 = a3[8];
        if (v96 <= (v97 - v95) >> 2)
        {
          if (v96 <= 0)
          {
            uint64_t v104 = a3[7];
            uint64_t v105 = &v95[4 * v96];
            uint64_t v106 = &v104[-4 * v96];
            uint64_t v107 = v104;
            if (v106 < v95)
            {
              uint64_t v107 = a3[7];
              do
              {
                int v108 = *(_DWORD *)v106;
                v106 += 4;
                *(_DWORD *)uint64_t v107 = v108;
                v107 += 4;
              }
              while (v106 < v95);
            }
            a3[7] = v107;
            if (v104 != v105) {
              memmove(&v104[-4 * ((v104 - v105) >> 2)], v95, v104 - v105);
            }
            if (&v92[v96] != v92) {
              memmove(v95, v92, 4 * v96);
            }
          }
          else
          {
            int64_t v103 = v91 - (char *)v92;
            if (v91 != (char *)v92) {
              memmove(a3[7], v92, v91 - (char *)v92);
            }
            a3[7] = &v95[v103];
          }
        }
        else
        {
          uint64_t v98 = (v95 - v94) >> 2;
          unint64_t v99 = v98 + v96;
          if ((unint64_t)(v98 + v96) >> 62) {
            goto LABEL_433;
          }
          uint64_t v100 = v97 - v94;
          if (v100 >> 1 > v99) {
            unint64_t v99 = v100 >> 1;
          }
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v101 = v99;
          }
          __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)(a3 + 8);
          if (v101) {
            unint64_t v102 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 8), v101);
          }
          else {
            unint64_t v102 = 0;
          }
          float v109 = &v102[v98];
          __v.__first_ = v102;
          __v.__begin_ = v109;
          __v.__end_cap_.__value_ = &v102[v101];
          uint64_t v110 = 4 * v96;
          uint64_t v111 = &v109[v96];
          do
          {
            unsigned int v112 = *v92++;
            *v109++ = v112;
            v110 -= 4;
          }
          while (v110);
          __v.__end_ = v111;
          std::vector<unsigned int>::__swap_out_circular_buffer((std::vector<unsigned int> *)a3 + 2, &__v, (std::vector<unsigned int>::pointer)v95);
          if (__v.__end_ != __v.__begin_) {
            __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
          }
                                                                    + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
          if (__v.__first_) {
            operator delete(__v.__first_);
          }
        }
      }
      unint64_t v114 = (void *)v307.i64[1];
      uint64_t v113 = (void *)v307.i64[0];
      if (v307.i64[0] != v307.i64[1])
      {
        float v115 = a3 + 2;
        do
        {
          std::vector<re::Vector3<float>>::reserve((void **)a3, ((uint64_t)(v113[1] - *v113) >> 3) + ((a3[1] - *a3) >> 4));
          uint64_t v117 = (void *)*v113;
          uint64_t v118 = (void *)v113[1];
          if ((void *)*v113 != v118)
          {
            long long v119 = a3[1];
            do
            {
              if ((unint64_t)v119 >= *v115)
              {
                uint64_t v120 = (v119 - *a3) >> 4;
                if ((unint64_t)(v120 + 1) >> 60) {
                  goto LABEL_433;
                }
                uint64_t v121 = *v115 - (void)*a3;
                uint64_t v122 = v121 >> 3;
                if (v121 >> 3 <= (unint64_t)(v120 + 1)) {
                  uint64_t v122 = v120 + 1;
                }
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v123 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v123 = v122;
                }
                if (v123) {
                  long long v124 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v123);
                }
                else {
                  long long v124 = 0;
                }
                uint64_t v125 = &v124[16 * v120];
                *(void *)&long long v116 = *v117;
                DWORD2(v116) = 0;
                *(_OWORD *)uint64_t v125 = v116;
                long long v119 = v125 + 16;
                uint64_t v127 = *a3;
                unint64_t v126 = a3[1];
                if (v126 != *a3)
                {
                  do
                  {
                    long long v116 = *((_OWORD *)v126 - 1);
                    *((_OWORD *)v125 - 1) = v116;
                    v125 -= 16;
                    v126 -= 16;
                  }
                  while (v126 != v127);
                  unint64_t v126 = *a3;
                }
                *a3 = v125;
                a3[1] = v119;
                a3[2] = &v124[16 * v123];
                if (v126) {
                  operator delete(v126);
                }
              }
              else
              {
                *(void *)&long long v116 = *v117;
                DWORD2(v116) = 0;
                *(_OWORD *)long long v119 = v116;
                v119 += 16;
              }
              a3[1] = v119;
              ++v117;
            }
            while (v117 != v118);
          }
          v113 += 3;
        }
        while (v113 != v114);
      }
      if (v302[0])
      {
        v302[1] = v302[0];
        operator delete(v302[0]);
      }
      unint64_t v12 = v299;
      LODWORD(v7) = v292;
    }
    if (v12 == v13)
    {
      unint64_t v6 = v291;
    }
    else
    {
      long long v129 = (void *)v305.i64[1];
      long long v128 = (void *)v305.i64[0];
      if (v305.i64[0] != v305.i64[1])
      {
        long long v130 = a3 + 2;
        do
        {
          std::vector<re::Vector3<float>>::reserve((void **)a3, ((uint64_t)(v128[1] - *v128) >> 3) + ((a3[1] - *a3) >> 4));
          uint64_t v132 = (void *)*v128;
          uint64_t v133 = (void *)v128[1];
          if ((void *)*v128 != v133)
          {
            uint64_t v134 = a3[1];
            do
            {
              if ((unint64_t)v134 >= *v130)
              {
                uint64_t v135 = (v134 - *a3) >> 4;
                if ((unint64_t)(v135 + 1) >> 60) {
                  goto LABEL_433;
                }
                uint64_t v136 = *v130 - (void)*a3;
                uint64_t v137 = v136 >> 3;
                if (v136 >> 3 <= (unint64_t)(v135 + 1)) {
                  uint64_t v137 = v135 + 1;
                }
                if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v138 = v137;
                }
                if (v138) {
                  long long v139 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v138);
                }
                else {
                  long long v139 = 0;
                }
                uint64_t v140 = &v139[16 * v135];
                *(void *)&long long v131 = *v132;
                DWORD2(v131) = 0;
                *(_OWORD *)uint64_t v140 = v131;
                uint64_t v134 = v140 + 16;
                unint64_t v142 = *a3;
                uint64_t v141 = a3[1];
                if (v141 != *a3)
                {
                  do
                  {
                    long long v131 = *((_OWORD *)v141 - 1);
                    *((_OWORD *)v140 - 1) = v131;
                    v140 -= 16;
                    v141 -= 16;
                  }
                  while (v141 != v142);
                  uint64_t v141 = *a3;
                }
                *a3 = v140;
                a3[1] = v134;
                a3[2] = &v139[16 * v138];
                if (v141) {
                  operator delete(v141);
                }
              }
              else
              {
                *(void *)&long long v131 = *v132;
                DWORD2(v131) = 0;
                *(_OWORD *)uint64_t v134 = v131;
                v134 += 16;
              }
              a3[1] = v134;
              ++v132;
            }
            while (v132 != v133);
          }
          v128 += 3;
        }
        while (v128 != v129);
      }
      uint64_t v295 = (uint64_t)(a3 + 2);
      unint64_t v301 = a3 + 8;
      float v143 = (float)a5;
      unint64_t v12 = v299;
      uint64_t v144 = v299;
      do
      {
        unint64_t v145 = (unint64_t)(a3[1] - *a3) >> 4;
        if (v144->i32[1] == -1)
        {
          __int32 v148 = v144->i32[0];
          uint64_t v149 = *(void *)(*a4 + 8 * *(void *)&v144[3]);
          if (*(unsigned char *)v149)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)(v149 + 208) + 40))(v149 + 208)) {
              unsigned int v150 = (*(uint64_t (**)(uint64_t))(*(void *)(v149 + 208) + 40))(v149 + 208);
            }
            else {
              unsigned int v150 = 0xFFFF;
            }
            re::Spline<float>::knotAtIndex(v149 + 208, v150);
            float v208 = v229;
          }
          else
          {
            uint64_t v207 = *(void *)(v149 + 184);
            if (v207) {
              float v208 = *(float *)(*(void *)(v149 + 200) + 24 * v207 - 8);
            }
            else {
              float v208 = 0.0;
            }
          }
          if ((int)(float)(v208 * v143) <= 1) {
            int v230 = 1;
          }
          else {
            int v230 = (int)(float)(v208 * v143);
          }
          if (v230 >= 2)
          {
            int v297 = v145 - 1;
            for (unsigned int i = 1; i != v230; ++i)
            {
              *(void *)&long long v232 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v149, v208 * (float)((float)i / (float)v230));
              uint64_t v234 = a3[1];
              unint64_t v233 = (unint64_t)a3[2];
              if ((unint64_t)v234 >= v233)
              {
                uint64_t v236 = (v234 - *a3) >> 4;
                if ((unint64_t)(v236 + 1) >> 60) {
                  goto LABEL_433;
                }
                uint64_t v237 = v233 - (void)*a3;
                uint64_t v238 = v237 >> 3;
                if (v237 >> 3 <= (unint64_t)(v236 + 1)) {
                  uint64_t v238 = v236 + 1;
                }
                if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v239 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v239 = v238;
                }
                if (v239)
                {
                  long long v294 = v232;
                  uint64_t v240 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v295, v239);
                  long long v232 = v294;
                }
                else
                {
                  uint64_t v240 = 0;
                }
                unint64_t v241 = &v240[16 * v236];
                DWORD2(v232) = 0;
                *(_OWORD *)unint64_t v241 = v232;
                uint64_t v235 = v241 + 16;
                uint64_t v243 = *a3;
                unint64_t v242 = a3[1];
                if (v242 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v241 - 1) = *((_OWORD *)v242 - 1);
                    v241 -= 16;
                    v242 -= 16;
                  }
                  while (v242 != v243);
                  unint64_t v242 = *a3;
                }
                *a3 = v241;
                a3[1] = v235;
                a3[2] = &v240[16 * v239];
                if (v242) {
                  operator delete(v242);
                }
              }
              else
              {
                DWORD2(v232) = 0;
                *(_OWORD *)uint64_t v234 = v232;
                uint64_t v235 = v234 + 16;
              }
              a3[1] = v235;
              uint64_t v245 = a3[7];
              uint64_t v244 = a3[8];
              if (v245 >= v244)
              {
                unint64_t v247 = a3[6];
                uint64_t v248 = (v245 - v247) >> 2;
                unint64_t v249 = v248 + 1;
                if ((unint64_t)(v248 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v250 = v244 - v247;
                if (v250 >> 1 > v249) {
                  unint64_t v249 = v250 >> 1;
                }
                if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v251 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v251 = v249;
                }
                if (v251)
                {
                  unint64_t v252 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v251);
                  unint64_t v247 = a3[6];
                  uint64_t v245 = a3[7];
                }
                else
                {
                  unint64_t v252 = 0;
                }
                unint64_t v253 = &v252[4 * v248];
                *(_DWORD *)unint64_t v253 = v148;
                uint64_t v246 = v253 + 4;
                while (v245 != v247)
                {
                  int v254 = *((_DWORD *)v245 - 1);
                  v245 -= 4;
                  *((_DWORD *)v253 - 1) = v254;
                  v253 -= 4;
                }
                uint64_t v244 = &v252[4 * v251];
                a3[6] = v253;
                a3[7] = v246;
                a3[8] = v244;
                if (v247)
                {
                  operator delete(v247);
                  uint64_t v244 = *v301;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v245 = v148;
                uint64_t v246 = v245 + 4;
              }
              __int32 v148 = v297 + i;
              a3[7] = v246;
              if (v246 >= v244)
              {
                uint64_t v256 = a3[6];
                uint64_t v257 = (v246 - v256) >> 2;
                unint64_t v258 = v257 + 1;
                if ((unint64_t)(v257 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v259 = v244 - v256;
                if (v259 >> 1 > v258) {
                  unint64_t v258 = v259 >> 1;
                }
                if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v260 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v260 = v258;
                }
                if (v260)
                {
                  unint64_t v261 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v260);
                  uint64_t v256 = a3[6];
                  uint64_t v246 = a3[7];
                }
                else
                {
                  unint64_t v261 = 0;
                }
                uint64_t v262 = &v261[4 * v257];
                *(_DWORD *)uint64_t v262 = v148;
                uint64_t v255 = v262 + 4;
                while (v246 != v256)
                {
                  int v263 = *((_DWORD *)v246 - 1);
                  v246 -= 4;
                  *((_DWORD *)v262 - 1) = v263;
                  v262 -= 4;
                }
                uint64_t v244 = &v261[4 * v260];
                a3[6] = v262;
                a3[7] = v255;
                a3[8] = v244;
                if (v256)
                {
                  operator delete(v256);
                  uint64_t v244 = *v301;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v246 = v148;
                uint64_t v255 = v246 + 4;
              }
              unint64_t v12 = v299;
              a3[7] = v255;
              if (v255 >= v244)
              {
                uint64_t v265 = a3[6];
                uint64_t v266 = (v255 - v265) >> 2;
                unint64_t v267 = v266 + 1;
                if ((unint64_t)(v266 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v268 = v244 - v265;
                if (v268 >> 1 > v267) {
                  unint64_t v267 = v268 >> 1;
                }
                if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v269 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v269 = v267;
                }
                if (v269)
                {
                  uint64_t v270 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v269);
                  uint64_t v265 = a3[6];
                  uint64_t v255 = a3[7];
                }
                else
                {
                  uint64_t v270 = 0;
                }
                unint64_t v271 = &v270[4 * v266];
                *(_DWORD *)unint64_t v271 = v144[1].i32[0];
                uint64_t v264 = v271 + 4;
                while (v255 != v265)
                {
                  int v272 = *((_DWORD *)v255 - 1);
                  v255 -= 4;
                  *((_DWORD *)v271 - 1) = v272;
                  v271 -= 4;
                }
                a3[6] = v271;
                a3[7] = v264;
                a3[8] = &v270[4 * v269];
                if (v265) {
                  operator delete(v265);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v255 = v144[1].i32[0];
                uint64_t v264 = v255 + 4;
              }
              a3[7] = v264;
            }
          }
        }
        else
        {
          uint64_t v146 = *(void *)(*a4 + 8 * *(void *)&v144[3]);
          if (*(unsigned char *)v146)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)(v146 + 208) + 40))(v146 + 208)) {
              unsigned int v147 = (*(uint64_t (**)(uint64_t))(*(void *)(v146 + 208) + 40))(v146 + 208);
            }
            else {
              unsigned int v147 = 0xFFFF;
            }
            re::Spline<float>::knotAtIndex(v146 + 208, v147);
            float v152 = v153;
          }
          else
          {
            uint64_t v151 = *(void *)(v146 + 184);
            if (v151) {
              float v152 = *(float *)(*(void *)(v146 + 200) + 24 * v151 - 8);
            }
            else {
              float v152 = 0.0;
            }
          }
          if ((int)(float)(v152 * v143) <= 1) {
            unsigned int v154 = 1;
          }
          else {
            unsigned int v154 = (int)(float)(v152 * v143);
          }
          __int32 v155 = v144->i32[0];
          if (v154 <= 1)
          {
            uint64_t v190 = a3[7];
          }
          else
          {
            int v156 = v145 - 1;
            for (unsigned int j = 1; j != v154; ++j)
            {
              *(void *)&long long v158 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v146, v152 * (float)((float)j / (float)v154));
              uint64_t v160 = a3[1];
              unint64_t v159 = (unint64_t)a3[2];
              if ((unint64_t)v160 >= v159)
              {
                uint64_t v162 = (v160 - *a3) >> 4;
                if ((unint64_t)(v162 + 1) >> 60) {
                  goto LABEL_433;
                }
                uint64_t v163 = v159 - (void)*a3;
                uint64_t v164 = v163 >> 3;
                if (v163 >> 3 <= (unint64_t)(v162 + 1)) {
                  uint64_t v164 = v162 + 1;
                }
                if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v165 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v165 = v164;
                }
                if (v165)
                {
                  long long v296 = v158;
                  unint64_t v166 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v295, v165);
                  long long v158 = v296;
                }
                else
                {
                  unint64_t v166 = 0;
                }
                unint64_t v167 = &v166[16 * v162];
                DWORD2(v158) = 0;
                *(_OWORD *)unint64_t v167 = v158;
                long long v161 = v167 + 16;
                unint64_t v169 = *a3;
                uint64_t v168 = a3[1];
                if (v168 != *a3)
                {
                  do
                  {
                    *((_OWORD *)v167 - 1) = *((_OWORD *)v168 - 1);
                    v167 -= 16;
                    v168 -= 16;
                  }
                  while (v168 != v169);
                  uint64_t v168 = *a3;
                }
                *a3 = v167;
                a3[1] = v161;
                a3[2] = &v166[16 * v165];
                if (v168) {
                  operator delete(v168);
                }
              }
              else
              {
                DWORD2(v158) = 0;
                *(_OWORD *)uint64_t v160 = v158;
                long long v161 = v160 + 16;
              }
              a3[1] = v161;
              unint64_t v171 = a3[7];
              long long v170 = a3[8];
              if (v171 >= v170)
              {
                long long v173 = a3[6];
                uint64_t v174 = (v171 - v173) >> 2;
                unint64_t v175 = v174 + 1;
                if ((unint64_t)(v174 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v176 = v170 - v173;
                if (v176 >> 1 > v175) {
                  unint64_t v175 = v176 >> 1;
                }
                if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v177 = v175;
                }
                if (v177)
                {
                  long long v178 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v177);
                  long long v173 = a3[6];
                  unint64_t v171 = a3[7];
                }
                else
                {
                  long long v178 = 0;
                }
                int v179 = &v178[4 * v174];
                *(_DWORD *)int v179 = v155;
                long long v172 = v179 + 4;
                while (v171 != v173)
                {
                  int v180 = *((_DWORD *)v171 - 1);
                  v171 -= 4;
                  *((_DWORD *)v179 - 1) = v180;
                  v179 -= 4;
                }
                long long v170 = &v178[4 * v177];
                a3[6] = v179;
                a3[7] = v172;
                a3[8] = v170;
                if (v173)
                {
                  operator delete(v173);
                  long long v170 = *v301;
                }
              }
              else
              {
                *(_DWORD *)unint64_t v171 = v155;
                long long v172 = v171 + 4;
              }
              __int32 v155 = v156 + j;
              a3[7] = v172;
              if (v172 >= v170)
              {
                int v182 = a3[6];
                uint64_t v183 = (v172 - v182) >> 2;
                unint64_t v184 = v183 + 1;
                if ((unint64_t)(v183 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v185 = v170 - v182;
                if (v185 >> 1 > v184) {
                  unint64_t v184 = v185 >> 1;
                }
                if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v186 = v184;
                }
                if (v186)
                {
                  uint64_t v187 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v186);
                  int v182 = a3[6];
                  long long v172 = a3[7];
                }
                else
                {
                  uint64_t v187 = 0;
                }
                uint64_t v188 = &v187[4 * v183];
                *(_DWORD *)uint64_t v188 = v155;
                long long v181 = v188 + 4;
                while (v172 != v182)
                {
                  int v189 = *((_DWORD *)v172 - 1);
                  v172 -= 4;
                  *((_DWORD *)v188 - 1) = v189;
                  v188 -= 4;
                }
                long long v170 = &v187[4 * v186];
                a3[6] = v188;
                a3[7] = v181;
                a3[8] = v170;
                if (v182)
                {
                  operator delete(v182);
                  long long v170 = *v301;
                }
              }
              else
              {
                *(_DWORD *)long long v172 = v155;
                long long v181 = v172 + 4;
              }
              a3[7] = v181;
              if (v181 >= v170)
              {
                unint64_t v191 = a3[6];
                uint64_t v192 = (v181 - v191) >> 2;
                unint64_t v193 = v192 + 1;
                if ((unint64_t)(v192 + 1) >> 62) {
                  goto LABEL_433;
                }
                uint64_t v194 = v170 - v191;
                if (v194 >> 1 > v193) {
                  unint64_t v193 = v194 >> 1;
                }
                if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v195 = v193;
                }
                if (v195)
                {
                  unint64_t v196 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v195);
                  unint64_t v191 = a3[6];
                  long long v181 = a3[7];
                }
                else
                {
                  unint64_t v196 = 0;
                }
                uint64_t v197 = &v196[4 * v192];
                *(_DWORD *)uint64_t v197 = v144->i32[1];
                uint64_t v190 = v197 + 4;
                while (v181 != v191)
                {
                  int v198 = *((_DWORD *)v181 - 1);
                  v181 -= 4;
                  *((_DWORD *)v197 - 1) = v198;
                  v197 -= 4;
                }
                a3[6] = v197;
                a3[7] = v190;
                a3[8] = &v196[4 * v195];
                if (v191) {
                  operator delete(v191);
                }
              }
              else
              {
                *(_DWORD *)long long v181 = v144->i32[1];
                uint64_t v190 = v181 + 4;
              }
              a3[7] = v190;
            }
          }
          unint64_t v199 = *v301;
          if (v190 >= *v301)
          {
            unint64_t v201 = a3[6];
            uint64_t v202 = (v190 - v201) >> 2;
            unint64_t v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 62) {
              goto LABEL_433;
            }
            uint64_t v204 = v199 - v201;
            if (v204 >> 1 > v203) {
              unint64_t v203 = v204 >> 1;
            }
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v205 = v203;
            }
            if (v205)
            {
              unint64_t v206 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v205);
              unint64_t v201 = a3[6];
              uint64_t v190 = a3[7];
            }
            else
            {
              unint64_t v206 = 0;
            }
            uint64_t v209 = &v206[4 * v202];
            *(_DWORD *)uint64_t v209 = v155;
            uint64_t v200 = v209 + 4;
            while (v190 != v201)
            {
              int v210 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *((_DWORD *)v209 - 1) = v210;
              v209 -= 4;
            }
            unint64_t v199 = &v206[4 * v205];
            a3[6] = v209;
            a3[7] = v200;
            a3[8] = v199;
            if (v201)
            {
              operator delete(v201);
              unint64_t v199 = *v301;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v190 = v155;
            uint64_t v200 = v190 + 4;
          }
          unint64_t v12 = v299;
          a3[7] = v200;
          if (v200 >= v199)
          {
            int32x2_t v212 = a3[6];
            uint64_t v213 = (v200 - v212) >> 2;
            unint64_t v214 = v213 + 1;
            if ((unint64_t)(v213 + 1) >> 62) {
              goto LABEL_433;
            }
            uint64_t v215 = v199 - v212;
            if (v215 >> 1 > v214) {
              unint64_t v214 = v215 >> 1;
            }
            if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v216 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v216 = v214;
            }
            if (v216)
            {
              float32x2_t v217 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v216);
              int32x2_t v212 = a3[6];
              uint64_t v200 = a3[7];
            }
            else
            {
              float32x2_t v217 = 0;
            }
            float32x2_t v218 = &v217[4 * v213];
            *(_DWORD *)float32x2_t v218 = v144[1].i32[0];
            unint64_t v211 = v218 + 4;
            while (v200 != v212)
            {
              int v219 = *((_DWORD *)v200 - 1);
              v200 -= 4;
              *((_DWORD *)v218 - 1) = v219;
              v218 -= 4;
            }
            unint64_t v199 = &v217[4 * v216];
            a3[6] = v218;
            a3[7] = v211;
            a3[8] = v199;
            if (v212)
            {
              operator delete(v212);
              unint64_t v199 = *v301;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v200 = v144[1].i32[0];
            unint64_t v211 = v200 + 4;
          }
          a3[7] = v211;
          if (v211 >= v199)
          {
            unint64_t v221 = a3[6];
            uint64_t v222 = (v211 - v221) >> 2;
            unint64_t v223 = v222 + 1;
            if ((unint64_t)(v222 + 1) >> 62) {
              goto LABEL_433;
            }
            uint64_t v224 = v199 - v221;
            if (v224 >> 1 > v223) {
              unint64_t v223 = v224 >> 1;
            }
            if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v225 = v223;
            }
            if (v225)
            {
              long long v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v301, v225);
              unint64_t v221 = a3[6];
              unint64_t v211 = a3[7];
            }
            else
            {
              long long v226 = 0;
            }
            unint64_t v227 = &v226[4 * v222];
            *(_DWORD *)unint64_t v227 = v144->i32[1];
            unsigned __int32 v220 = v227 + 4;
            while (v211 != v221)
            {
              int v228 = *((_DWORD *)v211 - 1);
              v211 -= 4;
              *((_DWORD *)v227 - 1) = v228;
              v227 -= 4;
            }
            a3[6] = v227;
            a3[7] = v220;
            a3[8] = &v226[4 * v225];
            if (v221) {
              operator delete(v221);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v211 = v144->i32[1];
            unsigned __int32 v220 = v211 + 4;
          }
          a3[7] = v220;
        }
        v144 += 4;
      }
      while (v144 != v13);
      unint64_t v6 = v291;
      LODWORD(v7) = v292;
    }
LABEL_410:
    unint64_t v273 = a3[4];
    unsigned int v275 = (void **)(a3 + 3);
    uint64_t v274 = a3[3];
    uint64_t v276 = (a3[1] - *a3) >> 4;
    unint64_t v277 = v276 - v7;
    *(_OWORD *)unint64_t v302 = xmmword_23435FD80;
    if (!v277) {
      goto LABEL_428;
    }
    uint64_t v278 = (v6 >> 4);
    unint64_t v279 = (std::allocator<unsigned int> *)(a3 + 5);
    unint64_t v280 = a3[5];
    if (v277 <= (v280 - v273) >> 4)
    {
      uint64_t v286 = 0;
      do
      {
        *(_OWORD *)&v273[v286] = *(_OWORD *)v302;
        v286 += 16;
      }
      while (16 * v276 - 16 * v278 != v286);
      a3[4] = &v273[16 * v277];
      goto LABEL_428;
    }
    uint64_t v281 = (v273 - v274) >> 4;
    if (!((v281 + v277) >> 60))
    {
      uint64_t v282 = v280 - v274;
      uint64_t v283 = v282 >> 3;
      if (v282 >> 3 <= v281 + v277) {
        uint64_t v283 = v281 + v277;
      }
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v284 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v284 = v283;
      }
      __v.__end_cap_.__value_ = v279;
      if (v284) {
        unint64_t v285 = (unsigned int *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v279, v284);
      }
      else {
        unint64_t v285 = 0;
      }
      uint64_t v287 = &v285[4 * v281];
      __v.__first_ = v285;
      __v.__begin_ = v287;
      __v.__end_cap_.__value_ = &v285[4 * v284];
      int64x2_t v288 = &v287[4 * v277];
      uint64_t v289 = 16 * v276 - 16 * v278;
      do
      {
        *(_OWORD *)uint64_t v287 = *(_OWORD *)v302;
        v287 += 4;
        v289 -= 16;
      }
      while (v289);
      __v.__end_ = v288;
      std::vector<re::Vector3<float>>::__swap_out_circular_buffer(v275, (uint64_t)&__v, v273);
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
      goto LABEL_428;
    }
LABEL_433:
    abort();
  }
LABEL_428:
  if (v12) {
    operator delete(v12);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __v.__first_ = (std::__split_buffer<unsigned int>::pointer)&v305;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<unsigned int>::pointer)&v307;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__v);
}

void std::vector<re::Vector3<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void re::pathprocessing::generateCapAndBevel(uint64_t *a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, __n128 a8, float a9)
{
  uint64_t v13 = a1;
  if (!a4)
  {
    std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(v94, a6);
    re::pathprocessing::createCapTriangles(v13, a2, (char **)a5, v94, a7);
    unint64_t v80 = v94[0];
    if (!v94[0]) {
      return;
    }
    v94[1] = v94[0];
    goto LABEL_45;
  }
  uint64_t v17 = *a1;
  uint64_t v16 = a1[1];
  unint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  if (v16 != v17)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v99, v18);
    uint64_t v19 = v100;
    bzero(v100, 8 * v18);
    uint64_t v100 = &v19[8 * v18];
  }
  re::pathprocessing::computeNormal((BOOL)v13, 0, **(void **)a3, &v99);
  int v26 = *(unint64_t **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != 8)
  {
    unint64_t v27 = 0;
    do
    {
      unint64_t v28 = &v26[v27++];
      re::pathprocessing::computeNormal((BOOL)v13, *v28, v28[1], &v99);
      int v26 = *(unint64_t **)a3;
    }
    while (v27 < ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) - 1);
  }
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  float32x2_t v30 = (const void *)*v13;
  uint64_t v29 = v13[1];
  int64_t v31 = v29 - *v13;
  if (v29 != *v13)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](&v96, 0xAAAAAAAAAAAAAAABLL * (v31 >> 3));
    int32x2_t v32 = v97;
    memmove(v97, v30, v31);
    uint64_t v97 = &v32[v31];
    int v26 = *(unint64_t **)a3;
  }
  re::pathprocessing::offsetBeziers((uint64_t *)&v99, a2, 0, *v26, (uint64_t *)&v96, a8.n128_f32[0], v20, v21, v22, v23, v24, v25);
  int v39 = *(unint64_t **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != 8)
  {
    unint64_t v40 = 0;
    do
    {
      unint64_t v41 = &v39[v40++];
      re::pathprocessing::offsetBeziers((uint64_t *)&v99, a2, *v41, v41[1], (uint64_t *)&v96, a8.n128_f32[0], v33, v34, v35, v36, v37, v38);
      int v39 = *(unint64_t **)a3;
    }
    while (v40 < ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) - 1);
  }
  std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(__p, a6);
  re::pathprocessing::createCapTriangles((uint64_t *)&v96, a2, (char **)a5, __p, a7);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v42 = a9;
  unint64_t v102 = 0;
  int64_t v103 = 0;
  uint64_t v104 = 0;
  std::vector<unsigned long>::__vallocate[abi:nn180100](&v102, v42);
  float32x2_t v43 = v103;
  bzero(v103, 8 * v42);
  int64_t v103 = &v43[v42];
  *unint64_t v102 = (__float2)0x3F80000000000000;
  if (v42 >= 2)
  {
    for (unint64_t i = 1; i != v42; ++i)
    {
      float v45 = 1.57079633 / (double)v42;
      __float2 v47 = __sincosf_stret(v45 * (float)i);
      v102[i] = v47;
    }
  }
  int v48 = v97;
  if (v97 != v96)
  {
    uint64_t v49 = 0;
    unint64_t v93 = (v42 + 1);
    uint64_t v86 = 16 * v93;
    *((void *)&v50 + 1) = a8.n128_u64[1];
    float v88 = -a8.n128_f32[0];
    v51.i64[0] = 0;
    v51.i64[1] = a8.n128_u32[0];
    float32x4_t v85 = v51;
    int v48 = v96;
    unint64_t v81 = v13;
    do
    {
      unint64_t v52 = 0;
      uint64_t v82 = *(char **)a5;
      uint64_t v83 = *(void *)(a5 + 8);
      unint64_t v53 = (float32x2_t *)(*v13 + 24 * v49);
      uint64_t v84 = v49;
      if (*(_DWORD *)(*a2 + 4 * v49) == 3) {
        unint64_t v54 = 6;
      }
      else {
        unint64_t v54 = 1;
      }
      float32x2_t v87 = (float32x2_t *)&v48[24 * v49];
      do
      {
        float v55 = (float)v52 / (float)v54;
        float v56 = (float)(1.0 - v55) * (float)(1.0 - v55);
        *(float *)&long long v50 = (float)(v55 + v55) * (float)(1.0 - v55);
        *(float32x2_t *)v44.f32 = vadd_f32(vmul_n_f32(v87[2], v55 * v55), vadd_f32(vmul_n_f32(*v87, v56), vmul_n_f32(v87[1], *(float *)&v50)));
        float32x4_t v92 = v44;
        *(float32x2_t *)&long long v50 = vadd_f32(vmul_n_f32(v53[2], v55 * v55), vadd_f32(vmul_n_f32(*v53, v56), vmul_n_f32(v53[1], *(float *)&v50)));
        long long v90 = v50;
        re::pathprocessing::Bezier2::tangentAt(v53, 0, v55);
        v58.i32[0] = v57 ^ 0x80000000;
        v58.i32[1] = v59;
        float32x4_t v89 = vnegq_f32(v58);
        int32x4_t __src = 0;
        float v109 = 0;
        uint64_t v110 = 0;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__src, v93);
        float v60 = v109;
        bzero(v109, v86);
        float v109 = &v60[v86];
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v105, v93);
        float32x2_t v61 = v106;
        bzero(v106, v86);
        float32x4_t v62 = v92;
        uint64_t v106 = &v61[v86];
        float32x4_t v63 = v92;
        v63.i32[2] = 0;
        *(float32x4_t *)int32x4_t __src = v63;
        long long v64 = v90;
        *((float *)&v64 + 2) = v88;
        *(_OWORD *)&__src[16 * v42] = v64;
        *(_OWORD *)uint64_t v105 = xmmword_23435FD80;
        float32x4_t v65 = v89;
        v65.i32[2] = 0;
        int32x4_t v66 = (int32x4_t)vmulq_f32(v65, v65);
        float32x4_t v67 = v65;
        v66.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
        *(float32x2_t *)v65.f32 = vrsqrte_f32((float32x2_t)v66.u32[0]);
        *(float32x2_t *)v65.f32 = vmul_f32(*(float32x2_t *)v65.f32, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32)));
        float32x4_t v68 = vmulq_n_f32(v67, vmul_f32(*(float32x2_t *)v65.f32, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32))).f32[0]);
        *(float32x4_t *)&v105[16 * v42] = v68;
        if (v42 >= 2)
        {
          uint64_t v69 = 0;
          *(float32x2_t *)v68.f32 = vsub_f32(*(float32x2_t *)&v90, *(float32x2_t *)v92.f32);
          v62.f32[2] = v88;
          uint64_t v70 = 16;
          do
          {
            float32x4_t v71 = vaddq_f32(vmulq_n_f32(v68, v102[v69 + 1].__sinval), vmulq_n_f32(v85, v102[v69 + 1].__cosval));
            int32x4_t v72 = (int32x4_t)vmulq_f32(v71, v71);
            v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
            float32x2_t v73 = vrsqrte_f32((float32x2_t)v72.u32[0]);
            *(float32x4_t *)&__src[v70] = vaddq_f32(v62, v71);
            float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v73, v73)));
            *(float32x4_t *)&v105[v70] = vmulq_n_f32(v71, vmul_f32(v74, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v74, v74))).f32[0]);
            v70 += 16;
            ++v69;
          }
          while (16 * v42 != v70);
        }
        std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(a5, *(char **)(a5 + 8), __src, v109, (v109 - __src) >> 4);
        std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(a5 + 24, *(char **)(a5 + 32), v105, v106, (v106 - v105) >> 4);
        if (v105)
        {
          uint64_t v106 = v105;
          operator delete(v105);
        }
        if (__src)
        {
          float v109 = __src;
          operator delete(__src);
        }
      }
      while (v52++ != v54);
      uint64_t v76 = 0;
      int v77 = ((unint64_t)(v83 - (void)v82) >> 4) + 1;
      do
      {
        int v78 = v77;
        int v79 = v42;
        do
        {
          LODWORD(__src) = v78 - 1;
          HIDWORD(__src) = v78;
          LODWORD(v10re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v42 + v78;
          HIDWORD(v10re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v78;
          LODWORD(v11re::VariableStepTimer::setClock((uint64_t)this, 0) = v42 + v78 + 1;
          HIDWORD(v11re::VariableStepTimer::setClock((uint64_t)this, 0) = v42 + v78;
          std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>((std::vector<unsigned int> *)(a5 + 48), *(unsigned int **)(a5 + 56), (char *)&__src, v111);
          ++v78;
          --v79;
        }
        while (v79);
        ++v76;
        v77 += v93;
      }
      while (v76 != v54);
      uint64_t v49 = v84 + 1;
      int v48 = v96;
      uint64_t v13 = v81;
    }
    while (v84 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
  }
  if (v102)
  {
    int64_t v103 = v102;
    operator delete(v102);
    int v48 = v96;
  }
  if (v48)
  {
    uint64_t v97 = v48;
    operator delete(v48);
  }
  unint64_t v80 = v99;
  if (v99)
  {
    uint64_t v100 = v99;
LABEL_45:
    operator delete(v80);
  }
}

unint64_t re::pathprocessing::convertCapToBottom(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, void *a7, float a8)
{
  unint64_t v8 = a2 - result;
  if (a2 > result)
  {
    float v9 = -a8;
    uint64_t v10 = (16 * result) | 8;
    do
    {
      *(float *)(*a7 + v1re::VariableStepTimer::setClock((uint64_t)this, 0) = v9 - *(float *)(*a7 + v10);
      v10 += 16;
      --v8;
    }
    while (v8);
  }
  unint64_t v11 = a4 - a3;
  if (a4 > a3)
  {
    uint64_t v12 = (16 * a3) | 8;
    do
    {
      *(float *)(a7[3] + v12) = -*(float *)(a7[3] + v12);
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  if (a5 < a6)
  {
    uint64_t v13 = a7[6];
    do
    {
      uint64_t v14 = (int *)(v13 + 4 * a5);
      int v15 = *v14;
      *uint64_t v14 = v14[2];
      long long v14[2] = v15;
      a5 += 3;
    }
    while (a5 < a6);
  }
  return result;
}

void std::vector<re::Vector3<float>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 4)
  {
    bzero(v4, 16 * v6);
    uint64_t v19 = &v4[16 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 60) {
    abort();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 3;
  if (v9 >> 3 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v7, v11);
  uint64_t v13 = &v12[16 * v5];
  int v15 = &v12[16 * v14];
  bzero(v13, 16 * v6);
  uint64_t v16 = &v13[16 * v6];
  unint64_t v18 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v17 - 1);
      v13 -= 16;
      v17 -= 16;
    }
    while (v17 != v18);
    uint64_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

void re::pathprocessing::simpleExtrudeMesh(float32x2_t **a1@<X0>, int a2@<W1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a3;
  uint64_t v340 = *MEMORY[0x263EF8340];
  unint64_t v252 = *(char **)a4;
  uint64_t v253 = *(void *)(a4 + 8);
  BOOL v11 = a3->f32[1] <= 0.0 || a3[1].i32[0] == 0;
  int v12 = !v11;
  uint64_t v13 = re::pathprocessing::IndexedMesh::IndexedMesh((uint64_t)v310, a1, 1);
  if (v314 == v313)
  {
    long long v232 = __src[0];
    long long v233 = __src[1];
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
    *(_OWORD *)(a5 + 24) = v232;
    *(_OWORD *)(a5 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v233;
  }
  else
  {
    uint64_t v255 = (unsigned char *)a5;
    if ((v8[3].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[3].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[4].i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v8[4].i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      float32x2_t v14 = v310[0];
      float32x2_t v15 = v310[1];
      float32x2_t v244 = v310[0];
    }
    else
    {
      float32x2_t v14 = v8[3];
      float32x2_t v15 = v8[4];
      float32x2_t v244 = vsub_f32(v310[0], v14);
    }
    float32x2_t v16 = vsub_f32(v15, v14);
    float v17 = fmaxf(v16.f32[0], v16.f32[1]);
    float v18 = v8->f32[0];
    if (v12) {
      float v19 = v8->f32[1];
    }
    else {
      float v19 = 0.0;
    }
    float v242 = v17;
    if (v8[1].i8[4]) {
      float v20 = v17;
    }
    else {
      float v20 = 1.0;
    }
    float v21 = v18 * v20;
    float v22 = -(float)(v18 * v20);
    float v249 = v21;
    *(float *)&unsigned __int32 v251 = v19 * v20;
    float v23 = (float)(v19 * v20) - v21;
    if ((*(void *)&v8[2] & 4) != 0) {
      float v22 = v23;
    }
    float v271 = v22;
    int v24 = v8[5].i32[0];
    re::pathprocessing::getBezierIslands(v310, a2, (uint64_t)v307);
    if (v307[0])
    {
      double v25 = (uint64_t *)v308;
      int v26 = (unsigned char *)a5;
      if ((void)v308 != *((void *)&v308 + 1))
      {
        float v269 = -(float)(v19 * v20);
        uint64_t v270 = (char **)(a4 + 24);
        int v254 = (std::vector<int> *)(a4 + 48);
        BOOL v27 = *(float *)&v251 >= v249;
        if (!v12) {
          BOOL v27 = v249 <= 0.0;
        }
        char v239 = v27;
        float v243 = (float)v24;
        uint64_t v265 = a4 + 40;
        uint64_t v266 = a4 + 16;
        int32x2_t v28 = (int32x2_t)0x300000001;
        float v29 = 1.0;
        uint64_t v30 = 0x3F80000000000000;
        uint64_t v256 = v8;
        int v236 = v24;
        int v237 = v12;
        uint64_t v238 = (uint64_t *)*((void *)&v308 + 1);
        do
        {
          int64x2_t v305 = 0;
          v304 = 0;
          uint64_t v306 = 0;
          uint64_t v240 = v25;
          re::pathprocessing::subdivideBezierOnSelfIntersection(v25, v25 + 3, &v304, (char **)&v302);
          unint64_t v300 = 0;
          int v299 = 0;
          unint64_t v301 = 0;
          if (v303 != v302)
          {
            unint64_t v33 = (v303 - (unsigned char *)v302) / 24;
            if (!(v33 >> 62))
            {
              double v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v301, (v303 - (unsigned char *)v302) / 24);
              int v299 = v34;
              unint64_t v301 = &v34[4 * v35];
              bzero(v34, 4 * v33);
              double v36 = 0;
              double v37 = 0;
              unint64_t v248 = 0;
              double v38 = &v34[4 * v33];
              uint64_t v39 = 0;
              unint64_t v300 = v38;
              if (v33 <= 1) {
                uint64_t v40 = 1;
              }
              else {
                uint64_t v40 = v33;
              }
              uint64_t v241 = v40;
              uint64_t v245 = v30;
              int32x2_t v246 = v28;
              while (1)
              {
                uint64_t v250 = v37;
                long long __p = v36;
                unint64_t v41 = (re *)re::pathprocessing::Bezier2::geometryType((re::pathprocessing::Bezier2 *)((char *)v302 + 24 * v39));
                uint64_t v247 = v39;
                *((_DWORD *)v299 + v3re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v41;
                unint64_t v42 = (char *)v302 + 24 * v39;
                float32x2_t v43 = *(float32x2_t *)(v42 + 16);
                long long v297 = *(_OWORD *)v42;
                float32x2_t v298 = v43;
                float32x4_t v44 = re::globalAllocators(v41);
                unint64_t SplineIndexForParameter = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v44[2] + 32))(v44[2], 576, 8);
                *(_WORD *)unint64_t SplineIndexForParameter = 256;
                *(_DWORD *)(SplineIndexForParameter + 4) = 4;
                *(void *)(SplineIndexForParameter + 8) = 0;
                *(void *)(SplineIndexForParameter + 16) = 0;
                *(void *)(SplineIndexForParameter + 24) = 0;
                *(_DWORD *)(SplineIndexForParameter + 32) = 0;
                *(void *)(SplineIndexForParameter + 20re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
                *(void *)(SplineIndexForParameter + 224) = 0;
                *(void *)(SplineIndexForParameter + 232) = 0;
                *(_DWORD *)(SplineIndexForParameter + 24re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
                *(void *)(SplineIndexForParameter + 216) = 0;
                *(void *)(SplineIndexForParameter + 328) = 0;
                *(_DWORD *)(SplineIndexForParameter + 28re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
                *(_OWORD *)(SplineIndexForParameter + 264) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 2re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
                uint64_t v278 = (_DWORD **)(SplineIndexForParameter + 248);
                *(_DWORD *)(SplineIndexForParameter + 32re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
                *(_OWORD *)(SplineIndexForParameter + 288) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 304) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
                unint64_t i = SplineIndexForParameter + 80;
                *(_OWORD *)(SplineIndexForParameter + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
                unint64_t v263 = SplineIndexForParameter + 160;
                *(_DWORD *)(SplineIndexForParameter + 72) = 0;
                *(_OWORD *)(SplineIndexForParameter + 56) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 96) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 112) = 0;
                *(_OWORD *)(SplineIndexForParameter + 12re::VariableStepTimer::setClock((uint64_t)this, 0) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 136) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 152) = 0;
                *(_OWORD *)(SplineIndexForParameter + 176) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 192) = 0;
                *(void *)(SplineIndexForParameter + 336) = v30;
                *(unsigned char *)(SplineIndexForParameter + 344) = 1;
                *(void *)(SplineIndexForParameter + 208) = &unk_26E721D28;
                *(void *)(SplineIndexForParameter + 368) = 0;
                *(void *)(SplineIndexForParameter + 376) = 0;
                *(_DWORD *)(SplineIndexForParameter + 384) = 0;
                *(void *)(SplineIndexForParameter + 36re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
                *(void *)(SplineIndexForParameter + 552) = 0;
                *(_DWORD *)(SplineIndexForParameter + 424) = 0;
                *(_OWORD *)(SplineIndexForParameter + 392) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 408) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 464) = 0;
                *(_OWORD *)(SplineIndexForParameter + 432) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 4re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 504) = 0;
                *(_OWORD *)(SplineIndexForParameter + 472) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 488) = 0u;
                *(_DWORD *)(SplineIndexForParameter + 544) = 0;
                *(_OWORD *)(SplineIndexForParameter + 512) = 0u;
                *(_OWORD *)(SplineIndexForParameter + 528) = 0u;
                *(void *)(SplineIndexForParameter + 56re::VariableStepTimer::setClock((uint64_t)this, 0) = 1056964608;
                *(void *)(SplineIndexForParameter + 568) = 0;
                long long v47 = v297;
                float32x2_t v48 = v298;
                BOOL isLine = re::pathprocessing::Bezier2::isLine((float32x2_t *)&v297);
                long long v51 = v297;
                float32x2_t v50 = v298;
                if (isLine)
                {
                  float32x2_t v52 = vsub_f32(v298, *(float32x2_t *)&v297);
                }
                else
                {
                  float32x2_t v53 = vsub_f32(*(float32x2_t *)((char *)&v297 + 8), *(float32x2_t *)&v297);
                  float32x2_t v52 = vadd_f32(vadd_f32(v53, v53), vmul_f32(vsub_f32(v298, *(float32x2_t *)((char *)&v297 + 8)), 0));
                }
                uint64_t v272 = SplineIndexForParameter + 8;
                if (re::pathprocessing::Bezier2::isLine((float32x2_t *)&v297))
                {
                  float32x2_t v54 = vsub_f32(v298, *(float32x2_t *)&v297);
                }
                else
                {
                  float32x2_t v55 = vsub_f32(v298, *(float32x2_t *)((char *)&v297 + 8));
                  float32x2_t v54 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v297 + 8), *(float32x2_t *)&v297), 0), vadd_f32(v55, v55));
                }
                *(void *)&__src[0] = 1;
                *((float32x2_t *)&__src[0] + 1) = vadd_f32(vadd_f32(*(float32x2_t *)&v47, vmul_f32(*(float32x2_t *)((char *)&v47 + 8), 0)), vmul_f32(v48, 0));
                *(float32x2_t *)&__src[1] = v52;
                *((float32x2_t *)&__src[1] + 1) = v52;
                re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(SplineIndexForParameter + 128, (uint64_t)__src);
                *(void *)&__src[0] = 0x3F80000000000001;
                *((float32x2_t *)&__src[0] + 1) = vadd_f32(v50, vadd_f32(vmul_f32(*(float32x2_t *)&v51, 0), vmul_f32(*(float32x2_t *)((char *)&v51 + 8), 0)));
                *(float32x2_t *)&__src[1] = v54;
                *((float32x2_t *)&__src[1] + 1) = v54;
                __n128 v56 = re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(SplineIndexForParameter + 128, (uint64_t)__src);
                int v57 = *(_DWORD *)(SplineIndexForParameter + 144);
                *(unsigned char *)unint64_t SplineIndexForParameter = 0;
                if (*(void *)(SplineIndexForParameter + 184))
                {
                  uint64_t v58 = 0;
                  unint64_t v59 = 0;
                  do
                  {
                    re::internal::destroyPersistent<re::Spline<re::Vector2<float>>>(*(re **)(*(void *)(SplineIndexForParameter + 200)
                                                                                           + v58));
                    ++v59;
                    v58 += 24;
                  }
                  while (*(void *)(SplineIndexForParameter + 184) > v59);
                }
                *(void *)(SplineIndexForParameter + 184) = 0;
                ++*(_DWORD *)(SplineIndexForParameter + 192);
                unint64_t v257 = SplineIndexForParameter + 208;
                (*(void (**)(unint64_t, void, __n128))(*(void *)(SplineIndexForParameter + 208)
                                                                         + 16))(SplineIndexForParameter + 208, 0, v56);
                *(void *)(SplineIndexForParameter + 104) = 0;
                ++*(_DWORD *)(SplineIndexForParameter + 112);
                *(void *)(SplineIndexForParameter + 24) = 0;
                ++*(_DWORD *)(SplineIndexForParameter + 32);
                *(void *)(SplineIndexForParameter + 64) = 0;
                ++*(_DWORD *)(SplineIndexForParameter + 72);
                uint64_t v30 = v245;
                int32x2_t v28 = v246;
                float v29 = 1.0;
                __int16 v60 = 0;
                if ((unsigned __int16)v57 >= 2u)
                {
                  int v61 = 1;
                  __int16 v62 = -1;
                  __int16 v63 = 1;
                  while (1)
                  {
                    unint64_t v64 = v61 - 1;
                    unint64_t v65 = *(void *)(SplineIndexForParameter + 144);
                    if (v65 <= v64) {
                      goto LABEL_317;
                    }
                    unint64_t v5 = v63;
                    if (v65 <= v63) {
                      goto LABEL_318;
                    }
                    unint64_t v6 = v60;
                    if (v65 <= v60) {
                      goto LABEL_319;
                    }
                    if (*(_DWORD *)(*(void *)v263 + 32 * v63) != *(_DWORD *)(*(void *)v263 + 32 * v60))
                    {
                      re::SpatialCurve<re::Vector2<float>>::addSpline((re *)SplineIndexForParameter, (unsigned __int16)v60, (unsigned __int16)(v61 - 1));
                      __int16 v62 = v64;
                      __int16 v60 = v63;
                    }
                    int v61 = ++v63;
                    if ((unsigned __int16)v57 <= v63) {
                      goto LABEL_52;
                    }
                  }
                }
                __int16 v62 = -1;
LABEL_52:
                if ((unsigned __int16)v57 - 1 != v62) {
                  re::SpatialCurve<re::Vector2<float>>::addSpline((re *)SplineIndexForParameter, (unsigned __int16)v60, (unsigned __int16)(v57 - 1));
                }
                unint64_t v65 = *(void *)(SplineIndexForParameter + 184);
                re::DynamicArray<unsigned short>::resize(SplineIndexForParameter + 48, v65);
                if (v65) {
                  break;
                }
                re::DynamicArray<unsigned short>::resize(v272, 0);
LABEL_68:
                uint64_t v74 = *(void *)(SplineIndexForParameter + 144);
                unint64_t v75 = SplineIndexForParameter + 208;
                if (!v74) {
                  goto LABEL_323;
                }
                uint64_t v76 = *(void *)(SplineIndexForParameter + 160);
                *(_DWORD *)(SplineIndexForParameter + 352) = *(_DWORD *)(v76 + 4);
                *(_DWORD *)(SplineIndexForParameter + 356) = *(_DWORD *)(v76 + 32 * v74 - 28);
                *(unsigned char *)(SplineIndexForParameter + 1) = 0;
                memset((char *)__src + 8, 0, 28);
                uint64_t v326 = 0;
                memset((char *)&__src[2] + 8, 0, 36);
                memset(&__src[5], 0, 32);
                int v325 = 0;
                uint64_t v327 = v245;
                char v328 = 1;
                *(void *)&__src[0] = &unk_26E721D28;
                unint64_t v320 = SplineIndexForParameter;
                (*(void (**)(unint64_t, void))(*(void *)(SplineIndexForParameter + 208) + 16))(v257, 0);
                *(unsigned char *)(SplineIndexForParameter + 344) = 0;
                if ((*(unsigned int (**)(unint64_t))(*(void *)(SplineIndexForParameter + 208) + 40))(v257))
                {
                  unsigned int v77 = (*(uint64_t (**)(unint64_t))(*(void *)(SplineIndexForParameter + 208) + 40))(v257);
                  re::DynamicArray<float>::resize(SplineIndexForParameter + 256, v77 + 1);
                }
                else
                {
                  *(void *)(SplineIndexForParameter + 272) = 0;
                  ++*(_DWORD *)(SplineIndexForParameter + 280);
                }
                unint64_t v65 = *(void *)(SplineIndexForParameter + 144);
                if (!v65)
                {
                  *(unsigned char *)unint64_t SplineIndexForParameter = 1;
                  uint64_t v316 = 0;
                  long long v338 = 0u;
                  long long v339 = 0u;
                  memset(v337, 0, sizeof(v337));
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)unint64_t v330 = 136315906;
                  *(void *)&v330[4] = "operator[]";
                  __int16 v331 = 1024;
                  int v332 = 789;
                  __int16 v333 = 2048;
                  unint64_t v334 = 0;
                  __int16 v335 = 2048;
                  unint64_t v336 = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  return;
                }
                uint64_t v78 = *(void *)v263;
                float v79 = *(float *)(*(void *)v263 + 4);
                *(_DWORD *)(*(void *)v263 + 4) = 0;
                if (v65 == 1)
                {
                  int v80 = 0;
                }
                else
                {
                  unint64_t v273 = (_DWORD **)(SplineIndexForParameter + 288);
                  for (unint64_t i = 1; i < v65; unint64_t i = (i + 1))
                  {
                    unint64_t v64 = (i - 1);
                    if (v65 <= v64) {
                      goto LABEL_321;
                    }
                    int v81 = *(_DWORD *)(v78 + 32 * i);
                    if (v81 == *(_DWORD *)(v78 + 32 * v64))
                    {
                      unint64_t v258 = i;
                      float v82 = *(float *)(v78 + 32 * i + 4);
                      LOWORD(v316) = v81 != 0;
                      WORD1(v316) = 2;
                      HIDWORD(v316) = 981668463;
                      char v317 = 1;
                      __int16 v318 = v321;
                      char v319 = v322;
                      (*(void (**)(_OWORD *, void))(*(void *)&__src[0] + 16))(__src, 0);
                      (*(void (**)(_OWORD *))(*(void *)&__src[0] + 88))(__src);
                      float v83 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v320, v79);
                      float v84 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v320, (float)(v82 + (float)(v79 * 2.0)) * 0.33333);
                      float v85 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v320, (float)(v79 + (float)(v82 * 2.0)) * 0.33333);
                      *(float *)v86.i32 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(v320, v82);
                      *(void *)&v337[0] = __PAIR64__(LODWORD(v82), LODWORD(v79));
                      *((void *)&v337[0] + 1) = __PAIR64__(LODWORD(v84), LODWORD(v83));
                      *(void *)&v337[1] = __PAIR64__(v86.u32[0], LODWORD(v85));
                      BYTE8(v337[1]) = 0;
                      re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>((float *)&v316, (uint64_t *)&v320, (uint64_t)v337, (uint64_t)__src, v86, v87, v88, v89, v90);
                      unint64_t v64 = v329;
                      unint64_t i = *(unsigned __int16 *)(SplineIndexForParameter + 232);
                      if ((*(unsigned int (**)(unint64_t))(*(void *)(SplineIndexForParameter + 208)
                                                                            + 40))(v75))
                        unsigned __int16 v91 = (*(uint64_t (**)(unint64_t))(*(void *)v75 + 40))(v75) + 1;
                      else {
                        unsigned __int16 v91 = 0;
                      }
                      unsigned __int16 v92 = *(_WORD *)(SplineIndexForParameter + 346) + v64;
                      if (v92)
                      {
                        re::DynamicArray<float>::resize(SplineIndexForParameter + 216, (unsigned __int16)(3 * v92 + 1));
                        *(_WORD *)(SplineIndexForParameter + 346) = v92;
                        if (!*(unsigned char *)(SplineIndexForParameter + 344)) {
                          re::DynamicArray<float>::resize(SplineIndexForParameter + 256, v92 + 1);
                        }
                      }
                      else
                      {
                        *(void *)(SplineIndexForParameter + 232) = 0;
                        ++*(_DWORD *)(SplineIndexForParameter + 240);
                        *(_WORD *)(SplineIndexForParameter + 346) = 0;
                        if (!*(unsigned char *)(SplineIndexForParameter + 344))
                        {
                          *(void *)(SplineIndexForParameter + 272) = 0;
                          ++*(_DWORD *)(SplineIndexForParameter + 280);
                        }
                      }
                      unsigned int v261 = v64;
                      if (v64)
                      {
                        int v93 = 0;
                        unint64_t v94 = v91;
                        unint64_t v65 = 1;
                        int v267 = 3 * v64;
                        while (1)
                        {
                          if (!i)
                          {
                            re::Spline<float>::knotAtIndex((uint64_t)__src, 0);
                            if (!*(void *)(SplineIndexForParameter + 272)) {
                              goto LABEL_312;
                            }
                            **unint64_t v273 = v95;
                            if (!*((void *)&__src[1] + 1)) {
                              goto LABEL_313;
                            }
                            if (!*(void *)(SplineIndexForParameter + 232)) {
                              goto LABEL_314;
                            }
                            **uint64_t v278 = **((_DWORD **)&__src[2] + 1);
                            unint64_t v94 = (v94 + 1);
                            unint64_t i = 1;
                          }
                          re::Spline<float>::knotAtIndex((uint64_t)__src, (unsigned __int16)v65);
                          int v97 = v94;
                          unint64_t v64 = *(void *)(SplineIndexForParameter + 272);
                          if (v64 <= v94) {
                            break;
                          }
                          (*v273)[v94] = v96;
                          unint64_t v6 = (unsigned __int16)(v93 + 1);
                          unint64_t v5 = *((void *)&__src[1] + 1);
                          if (*((void *)&__src[1] + 1) <= v6) {
                            goto LABEL_304;
                          }
                          unint64_t v64 = (unsigned __int16)i;
                          unint64_t v94 = *(void *)(SplineIndexForParameter + 232);
                          if (v94 <= (unsigned __int16)i) {
                            goto LABEL_305;
                          }
                          uint64_t v98 = *((void *)&__src[2] + 1);
                          unint64_t v99 = *v278;
                          (*v278)[(unsigned __int16)i] = *(_DWORD *)(*((void *)&__src[2] + 1) + 4 * v6);
                          unint64_t v6 = (unsigned __int16)(v93 + 2);
                          if (v5 <= v6) {
                            goto LABEL_306;
                          }
                          unint64_t v64 = (unsigned __int16)(i + 1);
                          if (v94 <= v64) {
                            goto LABEL_307;
                          }
                          v99[v64] = *(_DWORD *)(v98 + 4 * v6);
                          v93 += 3;
                          unint64_t v6 = (unsigned __int16)v93;
                          if (v5 <= (unsigned __int16)v93) {
                            goto LABEL_308;
                          }
                          unint64_t v64 = (unsigned __int16)(i + 2);
                          if (v94 <= v64) {
                            goto LABEL_309;
                          }
                          v99[v64] = *(_DWORD *)(v98 + 4 * (unsigned __int16)v93);
                          unint64_t v94 = (v97 + 1);
                          unint64_t i = (i + 3);
                          unint64_t v65 = (v65 + 1);
                          if (v267 == v93) {
                            goto LABEL_102;
                          }
                        }
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = v94;
                        __int16 v335 = 2048;
                        unint64_t v336 = v64;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_304:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 797;
                        __int16 v333 = 2048;
                        unint64_t v334 = v6;
                        __int16 v335 = 2048;
                        unint64_t v336 = v5;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_305:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = v64;
                        __int16 v335 = 2048;
                        unint64_t v336 = v94;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_306:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 797;
                        __int16 v333 = 2048;
                        unint64_t v334 = v6;
                        __int16 v335 = 2048;
                        unint64_t v336 = v5;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_307:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = v64;
                        __int16 v335 = 2048;
                        unint64_t v336 = v94;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_308:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 797;
                        __int16 v333 = 2048;
                        unint64_t v334 = v6;
                        __int16 v335 = 2048;
                        unint64_t v336 = v5;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_309:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = v64;
                        __int16 v335 = 2048;
                        unint64_t v336 = v94;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_310:
                        *(void *)unint64_t v330 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v337[0]) = 136315906;
                        *(void *)((char *)v337 + 4) = "operator[]";
                        WORD6(v337[0]) = 1024;
                        *(_DWORD *)((char *)v337 + 14) = 797;
                        WORD1(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 4) = SplineIndexForParameter;
                        WORD6(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 14) = v94;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_311:
                        *(void *)unint64_t v330 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v337[0]) = 136315906;
                        *(void *)((char *)v337 + 4) = "operator[]";
                        WORD6(v337[0]) = 1024;
                        *(_DWORD *)((char *)v337 + 14) = 797;
                        WORD1(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 4) = SplineIndexForParameter;
                        WORD6(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 14) = v94;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_312:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = 0;
                        __int16 v335 = 2048;
                        unint64_t v336 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_313:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 797;
                        __int16 v333 = 2048;
                        unint64_t v334 = 0;
                        __int16 v335 = 2048;
                        unint64_t v336 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_314:
                        uint64_t v323 = 0;
                        long long v338 = 0u;
                        long long v339 = 0u;
                        memset(v337, 0, sizeof(v337));
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)unint64_t v330 = 136315906;
                        *(void *)&v330[4] = "operator[]";
                        __int16 v331 = 1024;
                        int v332 = 789;
                        __int16 v333 = 2048;
                        unint64_t v334 = 0;
                        __int16 v335 = 2048;
                        unint64_t v336 = 0;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_315:
                        *(void *)unint64_t v330 = 0;
                        memset(__src, 0, 80);
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        LODWORD(v337[0]) = 136315906;
                        *(void *)((char *)v337 + 4) = "operator[]";
                        WORD6(v337[0]) = 1024;
                        *(_DWORD *)((char *)v337 + 14) = 789;
                        WORD1(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 4) = v64;
                        WORD6(v337[1]) = 2048;
                        *(void *)((char *)&v337[1] + 14) = v5;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                        goto LABEL_316;
                      }
LABEL_102:
                      re::Spline<float>::knotAtIndex((uint64_t)__src, v261);
                      unint64_t v65 = *(void *)(SplineIndexForParameter + 144);
                      unint64_t i = v258;
                      if (v65 <= v258) {
                        goto LABEL_322;
                      }
                      uint64_t v78 = *(void *)v263;
                      *(_DWORD *)(*(void *)v263 + 32 * v258 + 4) = v100;
                      float v79 = v82;
                      unint64_t v75 = SplineIndexForParameter + 208;
                    }
                    else
                    {
                      *(_DWORD *)(v78 + 32 * i + 4) = *(_DWORD *)(v78 + 32 * v64 + 4);
                    }
                  }
                  int v80 = *(_DWORD *)(v78 + 4);
                }
                *(unsigned char *)unint64_t SplineIndexForParameter = 1;
                *(_DWORD *)(SplineIndexForParameter + 352) = v80;
                *(_DWORD *)(SplineIndexForParameter + 356) = *(_DWORD *)(v78 + 32 * v65 - 28);
                uint64_t v31 = (uint64_t)re::Spline<float>::~Spline(__src);
                uint64_t v101 = v250;
                if ((unint64_t)v250 >= v248)
                {
                  uint64_t v104 = v250 - __p;
                  unint64_t v105 = v104 + 1;
                  uint64_t v8 = v256;
                  if ((unint64_t)(v104 + 1) >> 61) {
                    goto LABEL_324;
                  }
                  if ((uint64_t)(v248 - (void)__p) >> 2 > v105) {
                    unint64_t v105 = (uint64_t)(v248 - (void)__p) >> 2;
                  }
                  if (v248 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
                    uint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v31 = v105;
                  }
                  if (v31)
                  {
                    uint64_t v31 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v31);
                    uint64_t v101 = v250;
                  }
                  else
                  {
                    uint64_t v106 = 0;
                  }
                  uint64_t v107 = (unint64_t *)(v31 + 8 * v104);
                  unint64_t *v107 = SplineIndexForParameter;
                  unint64_t v102 = v107 + 1;
                  if (v101 == __p)
                  {
                    uint64_t v103 = v247;
                  }
                  else
                  {
                    uint64_t v103 = v247;
                    do
                    {
                      unint64_t v108 = *--v101;
                      *--uint64_t v107 = v108;
                    }
                    while (v101 != __p);
                  }
                  unint64_t v248 = v31 + 8 * v106;
                  if (__p) {
                    operator delete(__p);
                  }
                  double v36 = v107;
                }
                else
                {
                  unint64_t *v250 = SplineIndexForParameter;
                  unint64_t v102 = v250 + 1;
                  uint64_t v8 = v256;
                  double v36 = __p;
                  uint64_t v103 = v247;
                }
                uint64_t v39 = v103 + 1;
                double v37 = v102;
                if (v39 == v241) {
                  goto LABEL_128;
                }
              }
              uint64_t v66 = 0;
              unint64_t v64 = 0;
              unsigned __int16 v67 = 0;
              while (1)
              {
                unint64_t v5 = *(void *)(SplineIndexForParameter + 184);
                if (v5 <= v64) {
                  goto LABEL_315;
                }
                __int16 v68 = (*(uint64_t (**)(void))(**(void **)(*(void *)(SplineIndexForParameter + 200) + v66)
                                                        + 40))(*(void *)(*(void *)(SplineIndexForParameter + 200)
                                                                           + v66));
                unint64_t v5 = *(void *)(SplineIndexForParameter + 64);
                if (v5 <= v64) {
                  break;
                }
                *(_WORD *)(*(void *)i + 2 * v64) = v67;
                v67 += v68;
                ++v64;
                v66 += 24;
                if (v65 == v64)
                {
                  re::DynamicArray<unsigned short>::resize(v272, v67);
                  unint64_t v64 = 0;
                  unsigned __int16 v69 = 0;
                  while (1)
                  {
                    unint64_t i = *(void *)(SplineIndexForParameter + 184);
                    if (i <= v64) {
                      goto LABEL_320;
                    }
                    uint64_t v70 = *(void *)(*(void *)(SplineIndexForParameter + 200) + 24 * v64);
                    int v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 40))(v70);
                    if (v71) {
                      break;
                    }
LABEL_65:
                    if (++v64 == v65) {
                      goto LABEL_68;
                    }
                  }
                  unint64_t v72 = *(void *)(SplineIndexForParameter + 24);
                  while (1)
                  {
                    uint64_t v73 = v69;
                    if (v72 <= v69) {
                      break;
                    }
                    ++v69;
                    *(_WORD *)(*(void *)(SplineIndexForParameter + 40) + 2 * v73) = v64;
                    if (!--v71) {
                      goto LABEL_65;
                    }
                  }
                  *(void *)unint64_t v330 = 0;
                  memset(__src, 0, 80);
                  int v26 = (unsigned char *)&_os_log_internal;
                  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                  LODWORD(v337[0]) = 136315906;
                  *(void *)((char *)v337 + 4) = "operator[]";
                  WORD6(v337[0]) = 1024;
                  *(_DWORD *)((char *)v337 + 14) = 789;
                  WORD1(v337[1]) = 2048;
                  *(void *)((char *)&v337[1] + 4) = v73;
                  WORD6(v337[1]) = 2048;
                  *(void *)((char *)&v337[1] + 14) = v72;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_293:
                  if (!v230)
                  {
                    uint64_t v235 = 16 * v227;
                    do
                    {
                      *(float32x2_t *)&v228[v235] = vadd_f32(v244, *(float32x2_t *)&v228[v235]);
                      ++v227;
                      int v228 = *(char **)a4;
                      v235 += 16;
                    }
                    while (v227 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
                  }
                  goto LABEL_296;
                }
              }
LABEL_316:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = v64;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_317:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = v64;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_318:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = v5;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_319:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = v6;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_320:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = v64;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = i;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_321:
              uint64_t v316 = 0;
              long long v338 = 0u;
              long long v339 = 0u;
              memset(v337, 0, sizeof(v337));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)unint64_t v330 = 136315906;
              *(void *)&v330[4] = "operator[]";
              __int16 v331 = 1024;
              int v332 = 789;
              __int16 v333 = 2048;
              unint64_t v334 = v64;
              __int16 v335 = 2048;
              unint64_t v336 = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_322:
              uint64_t v323 = 0;
              long long v338 = 0u;
              long long v339 = 0u;
              memset(v337, 0, sizeof(v337));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)unint64_t v330 = 136315906;
              *(void *)&v330[4] = "operator[]";
              __int16 v331 = 1024;
              int v332 = 789;
              __int16 v333 = 2048;
              unint64_t v334 = i;
              __int16 v335 = 2048;
              unint64_t v336 = v65;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_323:
              *(void *)unint64_t v330 = 0;
              memset(__src, 0, 80);
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v337[0]) = 136315906;
              *(void *)((char *)v337 + 4) = "operator[]";
              WORD6(v337[0]) = 1024;
              *(_DWORD *)((char *)v337 + 14) = 789;
              WORD1(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 4) = 0;
              WORD6(v337[1]) = 2048;
              *(void *)((char *)&v337[1] + 14) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
LABEL_324:
            abort();
          }
          double v36 = 0;
          unint64_t v102 = 0;
LABEL_128:
          __pa = v36;
          uint64_t v262 = v102;
          uint64_t v110 = *(char **)a4;
          uint64_t v109 = *(void *)(a4 + 8);
          unint64_t v5 = *(void *)(a4 + 24);
          uint64_t v111 = *(void *)(a4 + 32);
          unint64_t v6 = *(void *)(a4 + 48);
          uint64_t v112 = *(void *)(a4 + 56);
          if (v8[2].i8[0])
          {
            long long v294 = 0;
            long long __dst = 0;
            uint64_t v296 = 0;
            uint64_t v113 = v304;
            int64_t v114 = v305 - (unsigned char *)v304;
            if (v305 != v304)
            {
              std::vector<unsigned long>::__vallocate[abi:nn180100](&v294, v114 >> 3);
              float v115 = (char *)__dst;
              memmove(__dst, v113, v114);
              double v36 = __pa;
              long long v116 = &v115[v114];
              uint64_t v8 = v256;
              long long __dst = v116;
            }
            float v117 = (float)v8[1].u32[0];
            unint64_t v292 = 0;
            unint64_t v293 = 0;
            int64_t v291 = 0;
            size_t v118 = (char *)v262 - (char *)v36;
            if (v262 == v36)
            {
              v32.n128_u32[0] = v251;
              re::pathprocessing::generateCapAndBevel((uint64_t *)&v302, &v299, (uint64_t)&v294, v237, a4, (uint64_t)&v291, v236, v32, v117);
            }
            else
            {
              if ((char *)v262 - (char *)v36 < 0) {
                goto LABEL_324;
              }
              long long v119 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v118 >> 3);
              int64_t v291 = v119;
              unint64_t v292 = v119;
              unint64_t v293 = &v119[8 * v120];
              memmove(v119, __pa, v118);
              unint64_t v292 = &v119[v118];
              v121.n128_u32[0] = v251;
              re::pathprocessing::generateCapAndBevel((uint64_t *)&v302, &v299, (uint64_t)&v294, v237, a4, (uint64_t)&v291, v236, v121, v117);
              if (v119)
              {
                unint64_t v292 = v119;
                operator delete(v119);
              }
            }
            uint64_t v31 = (uint64_t)v294;
            double v36 = __pa;
            if (v294)
            {
              long long __dst = v294;
              operator delete(v294);
              double v36 = __pa;
            }
          }
          float32x2_t v122 = v8[2];
          if ((v122.i8[0] & 4) != 0)
          {
            unint64_t v123 = (v109 - (uint64_t)v110) >> 4;
            unint64_t v124 = (uint64_t)(v111 - v5) >> 4;
            unint64_t v5 = (uint64_t)(v112 - v6) >> 2;
            if (v122.i8[0])
            {
              uint64_t v279 = (uint64_t)(v112 - v6) >> 2;
              unint64_t v133 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4;
              uint64_t v135 = *(void *)(a4 + 24);
              uint64_t v134 = *(void *)(a4 + 32);
              uint64_t v137 = *(void *)(a4 + 48);
              uint64_t v136 = *(void *)(a4 + 56);
              int v138 = v133 - v123;
              uint64_t v139 = (v133 - v123);
              unint64_t v274 = v133 + v139;
              std::vector<re::Vector3<float>>::resize((void *)a4, v133 + v139);
              if (v133 != v123)
              {
                uint64_t v140 = 16 * v133;
                uint64_t v141 = 16 * v123;
                do
                {
                  *(_OWORD *)(*(void *)a4 + v14re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)(*(void *)a4 + v141);
                  v140 += 16;
                  v141 += 16;
                  --v139;
                }
                while (v139);
              }
              unint64_t v142 = (v134 - v135) >> 4;
              unint64_t v143 = v142 - v124;
              unint64_t v144 = v142 - v124 + v142;
              unint64_t v6 = a4 + 24;
              std::vector<re::Vector3<float>>::resize(v270, v144);
              if (v142 != v124)
              {
                uint64_t v145 = 16 * v142;
                uint64_t v146 = 16 * v124;
                do
                {
                  *(_OWORD *)&(*v270)[v145] = *(_OWORD *)&(*v270)[v146];
                  v145 += 16;
                  v146 += 16;
                  --v143;
                }
                while (v143);
              }
              unint64_t v147 = (v136 - v137) >> 2;
              unint64_t v5 = v279;
              unint64_t v148 = v147 - v279;
              std::vector<unsigned int>::resize(v254, v147 - v279 + v147);
              if (v147 != v279)
              {
                uint64_t v149 = &v254->__begin_[v147];
                unsigned int v150 = &v254->__begin_[v279];
                do
                {
                  int v151 = *v150++;
                  *v149++ = v151 + v138;
                  --v148;
                }
                while (v148);
              }
              uint64_t v31 = re::pathprocessing::convertCapToBottom(v133, v274, v142, v144, v147, v147 - v279 + v147, (void *)a4, v249);
              uint64_t v8 = v256;
            }
            else
            {
              int64x2_t v288 = 0;
              uint64_t v289 = 0;
              uint64_t v290 = 0;
              uint64_t v125 = v304;
              int64_t v126 = v305 - (unsigned char *)v304;
              if (v305 != v304)
              {
                std::vector<unsigned long>::__vallocate[abi:nn180100](&v288, v126 >> 3);
                uint64_t v127 = (char *)v289;
                memmove(v289, v125, v126);
                uint64_t v289 = &v127[v126];
              }
              float v128 = (float)v256[1].u32[0];
              uint64_t v286 = 0;
              uint64_t v287 = 0;
              unint64_t v285 = 0;
              size_t v129 = (char *)v262 - (char *)__pa;
              if (v262 == __pa)
              {
                v32.n128_u32[0] = v251;
                re::pathprocessing::generateCapAndBevel((uint64_t *)&v302, &v299, (uint64_t)&v288, v237, a4, (uint64_t)&v285, v236, v32, v128);
              }
              else
              {
                if ((char *)v262 - (char *)__pa < 0) {
                  goto LABEL_324;
                }
                long long v130 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v129 >> 3);
                unint64_t v285 = v130;
                uint64_t v286 = v130;
                uint64_t v287 = &v130[8 * v131];
                memmove(v130, __pa, v129);
                uint64_t v286 = &v130[v129];
                v132.n128_u32[0] = v251;
                re::pathprocessing::generateCapAndBevel((uint64_t *)&v302, &v299, (uint64_t)&v288, v237, a4, (uint64_t)&v285, v236, v132, v128);
                if (v130)
                {
                  uint64_t v286 = v130;
                  operator delete(v130);
                }
              }
              uint64_t v8 = v256;
              if (v288)
              {
                uint64_t v289 = v288;
                operator delete(v288);
              }
              uint64_t v31 = re::pathprocessing::convertCapToBottom(v123, (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4, v124, (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 4, v5, (uint64_t)(*(void *)(a4 + 56) - *(void *)(a4 + 48)) >> 2, (void *)a4, v249);
            }
            double v36 = __pa;
          }
          char v152 = v239;
          if ((v8[2].i8[0] & 2) == 0) {
            char v152 = 1;
          }
          if ((v152 & 1) == 0)
          {
            size_t v153 = (char *)v262 - (char *)v36;
            if (v262 == v36)
            {
              unsigned int v154 = 0;
            }
            else
            {
              if ((char *)v262 - (char *)v36 < 0) {
                goto LABEL_324;
              }
              unsigned int v154 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v153 >> 3);
              uint64_t v31 = (uint64_t)memmove(v154, __pa, v153);
            }
            if (v303 != v302)
            {
              unint64_t i = 0;
              unint64_t v155 = (v303 - (unsigned char *)v302) / 24;
              if (v155 <= 1) {
                unint64_t v155 = 1;
              }
              unint64_t v264 = v155;
              uint64_t v268 = v154;
              do
              {
                uint64_t v157 = *(char **)a4;
                uint64_t v156 = *(void *)(a4 + 8);
                uint64_t v158 = *((void *)v154 + i);
                if (*(unsigned char *)v158)
                {
                  if ((*(unsigned int (**)(uint64_t))(*(void *)(v158 + 208) + 40))(v158 + 208)) {
                    unsigned int v159 = (*(uint64_t (**)(uint64_t))(*(void *)(v158 + 208) + 40))(v158 + 208);
                  }
                  else {
                    unsigned int v159 = 0xFFFF;
                  }
                  re::Spline<float>::knotAtIndex(v158 + 208, v159);
                  float v161 = v162;
                }
                else
                {
                  uint64_t v160 = *(void *)(v158 + 184);
                  if (v160) {
                    float v161 = *(float *)(*(void *)(v158 + 200) + 24 * v160 - 8);
                  }
                  else {
                    float v161 = 0.0;
                  }
                }
                uint64_t v163 = (re::pathprocessing::Bezier2 *)((char *)v302 + 24 * i);
                if (re::pathprocessing::Bezier2::isLine((float32x2_t *)v163))
                {
                  unint64_t v5 = 1;
                }
                else
                {
                  int v164 = (int)(float)(v161 * v243);
                  if (v164 <= 1) {
                    uint64_t v165 = 1;
                  }
                  else {
                    uint64_t v165 = v164;
                  }
                  if (re::pathprocessing::Bezier2::isPoint(v163)) {
                    unint64_t v5 = 1;
                  }
                  else {
                    unint64_t v5 = v165;
                  }
                }
                unint64_t v64 = 0;
                unint64_t v6 = (unint64_t)(v156 - (void)v157) >> 4;
                float v166 = (float)v5;
                do
                {
                  unint64_t v65 = re::SpatialCurve<re::Vector2<float>>::evaluateAt(v158, v161 * (float)((float)v64 / v166));
                  if (*(unsigned char *)v158)
                  {
                    float v167 = re::BezierSpline<float>::evaluateAt(v158 + 208, v161 * (float)((float)v64 / v166));
                    unint64_t SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(v158, v167);
                    unint64_t v94 = *(void *)(v158 + 184);
                    if (v94 <= SplineIndexForParameter) {
                      goto LABEL_310;
                    }
                    uint64_t v168 = *(void *)(*(void *)(v158 + 200) + 24 * SplineIndexForParameter);
                    float32x2_t v169 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v168 + 128))(v168, 1, v167);
                    uint64_t v171 = (uint64_t)v169;
                    float v172 = sqrtf(vaddv_f32(vmul_f32(v169, v169)));
                    if (v172 > 0.0) {
                      uint64_t v171 = (uint64_t)vmul_n_f32(v169, v29 / v172);
                    }
                  }
                  else
                  {
                    unint64_t SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(v158, v161 * (float)((float)v64 / v166));
                    unint64_t v94 = *(void *)(v158 + 184);
                    if (v94 <= SplineIndexForParameter) {
                      goto LABEL_311;
                    }
                    uint64_t v173 = *(void *)(*(void *)(v158 + 200) + 24 * SplineIndexForParameter);
                    uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v173 + 128))(v173, 1, v161 * (float)((float)v64 / v166));
                  }
                  *(void *)&long long v170 = v65;
                  unint64_t v175 = *(_OWORD **)(a4 + 8);
                  unint64_t v174 = *(void *)(a4 + 16);
                  if ((unint64_t)v175 >= v174)
                  {
                    uint64_t v178 = ((uint64_t)v175 - *(void *)a4) >> 4;
                    if ((unint64_t)(v178 + 1) >> 60) {
                      goto LABEL_324;
                    }
                    uint64_t v179 = v174 - *(void *)a4;
                    uint64_t v180 = v179 >> 3;
                    if (v179 >> 3 <= (unint64_t)(v178 + 1)) {
                      uint64_t v180 = v178 + 1;
                    }
                    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v181 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v181 = v180;
                    }
                    long long v280 = v170;
                    if (v181)
                    {
                      int v182 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v266, v181);
                      long long v170 = v280;
                    }
                    else
                    {
                      int v182 = 0;
                    }
                    uint64_t v183 = &v182[16 * v178];
                    long long v184 = v170;
                    *((float *)&v184 + 2) = v269;
                    *(_OWORD *)uint64_t v183 = v184;
                    unint64_t v177 = v183 + 16;
                    unint64_t v186 = *(char **)a4;
                    uint64_t v185 = *(char **)(a4 + 8);
                    if (v185 != *(char **)a4)
                    {
                      do
                      {
                        *((_OWORD *)v183 - 1) = *((_OWORD *)v185 - 1);
                        v183 -= 16;
                        v185 -= 16;
                      }
                      while (v185 != v186);
                      uint64_t v185 = *(char **)a4;
                    }
                    *(void *)a4 = v183;
                    *(void *)(a4 + 8) = v177;
                    *(void *)(a4 + 16) = &v182[16 * v181];
                    if (v185)
                    {
                      operator delete(v185);
                      long long v170 = v280;
                    }
                  }
                  else
                  {
                    long long v176 = v170;
                    *((float *)&v176 + 2) = v269;
                    *unint64_t v175 = v176;
                    unint64_t v177 = v175 + 1;
                  }
                  *(void *)(a4 + 8) = v177;
                  unint64_t v187 = *(void *)(a4 + 16);
                  if ((unint64_t)v177 >= v187)
                  {
                    uint64_t v189 = ((uint64_t)v177 - *(void *)a4) >> 4;
                    if ((unint64_t)(v189 + 1) >> 60) {
                      goto LABEL_324;
                    }
                    uint64_t v190 = v187 - *(void *)a4;
                    uint64_t v191 = v190 >> 3;
                    if (v190 >> 3 <= (unint64_t)(v189 + 1)) {
                      uint64_t v191 = v189 + 1;
                    }
                    if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v192 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v192 = v191;
                    }
                    if (v192)
                    {
                      long long v281 = v170;
                      unint64_t v193 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v266, v192);
                      long long v170 = v281;
                    }
                    else
                    {
                      unint64_t v193 = 0;
                    }
                    uint64_t v194 = &v193[16 * v189];
                    *((float *)&v170 + 2) = v271;
                    *(_OWORD *)uint64_t v194 = v170;
                    uint64_t v188 = v194 + 16;
                    unint64_t v196 = *(char **)a4;
                    unint64_t v195 = *(char **)(a4 + 8);
                    if (v195 != *(char **)a4)
                    {
                      do
                      {
                        *((_OWORD *)v194 - 1) = *((_OWORD *)v195 - 1);
                        v194 -= 16;
                        v195 -= 16;
                      }
                      while (v195 != v196);
                      unint64_t v195 = *(char **)a4;
                    }
                    *(void *)a4 = v194;
                    *(void *)(a4 + 8) = v188;
                    *(void *)(a4 + 16) = &v193[16 * v192];
                    if (v195) {
                      operator delete(v195);
                    }
                  }
                  else
                  {
                    *((float *)&v170 + 2) = v271;
                    *unint64_t v177 = v170;
                    uint64_t v188 = v177 + 1;
                  }
                  unsigned int v197 = HIDWORD(v171) ^ 0x80000000;
                  unsigned int v198 = v171;
                  *(void *)(a4 + 8) = v188;
                  uint64_t v200 = *(_OWORD **)(a4 + 32);
                  unint64_t v199 = *(void *)(a4 + 40);
                  if ((unint64_t)v200 >= v199)
                  {
                    uint64_t v202 = (char **)(a4 + 24);
                    uint64_t v203 = ((char *)v200 - *v270) >> 4;
                    if ((unint64_t)(v203 + 1) >> 60) {
                      goto LABEL_324;
                    }
                    uint64_t v204 = v199 - (void)*v270;
                    uint64_t v205 = v204 >> 3;
                    if (v204 >> 3 <= (unint64_t)(v203 + 1)) {
                      uint64_t v205 = v203 + 1;
                    }
                    if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v206 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v206 = v205;
                    }
                    unsigned int v275 = v197;
                    unsigned int v282 = v198;
                    if (v206)
                    {
                      uint64_t v207 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v265, v206);
                      unsigned int v197 = v275;
                      unsigned int v198 = v282;
                    }
                    else
                    {
                      uint64_t v207 = 0;
                    }
                    float v208 = &v207[16 * v203];
                    *(_OWORD *)float v208 = __PAIR64__(v198, v197);
                    unint64_t v201 = v208 + 16;
                    int v210 = *(char **)(a4 + 24);
                    uint64_t v209 = *(char **)(a4 + 32);
                    if (v209 != v210)
                    {
                      do
                      {
                        *((_OWORD *)v208 - 1) = *((_OWORD *)v209 - 1);
                        v208 -= 16;
                        v209 -= 16;
                      }
                      while (v209 != v210);
                      uint64_t v209 = *v270;
                    }
                    *(void *)(a4 + 24) = v208;
                    *(void *)(a4 + 32) = v201;
                    *(void *)(a4 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = &v207[16 * v206];
                    if (v209)
                    {
                      operator delete(v209);
                      unsigned int v197 = v275;
                      unsigned int v198 = v282;
                    }
                  }
                  else
                  {
                    _OWORD *v200 = __PAIR64__(v198, v197);
                    unint64_t v201 = v200 + 1;
                    uint64_t v202 = (char **)(a4 + 24);
                  }
                  *(void *)(a4 + 32) = v201;
                  unint64_t v211 = *(void *)(a4 + 40);
                  if ((unint64_t)v201 >= v211)
                  {
                    uint64_t v213 = ((char *)v201 - *v202) >> 4;
                    if ((unint64_t)(v213 + 1) >> 60) {
                      goto LABEL_324;
                    }
                    uint64_t v214 = v211 - (void)*v202;
                    uint64_t v215 = v214 >> 3;
                    if (v214 >> 3 <= (unint64_t)(v213 + 1)) {
                      uint64_t v215 = v213 + 1;
                    }
                    if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v216 = v215;
                    }
                    if (v216)
                    {
                      unsigned int v276 = v197;
                      unsigned int v283 = v198;
                      float32x2_t v217 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v265, v216);
                      unsigned int v197 = v276;
                      unsigned int v198 = v283;
                    }
                    else
                    {
                      float32x2_t v217 = 0;
                    }
                    float32x2_t v218 = &v217[16 * v213];
                    *(_OWORD *)float32x2_t v218 = __PAIR64__(v198, v197);
                    int32x2_t v212 = v218 + 16;
                    unsigned __int32 v220 = *(char **)(a4 + 24);
                    int v219 = *(char **)(a4 + 32);
                    if (v219 != v220)
                    {
                      do
                      {
                        *((_OWORD *)v218 - 1) = *((_OWORD *)v219 - 1);
                        v218 -= 16;
                        v219 -= 16;
                      }
                      while (v219 != v220);
                      int v219 = *v202;
                    }
                    *(void *)(a4 + 24) = v218;
                    *(void *)(a4 + 32) = v212;
                    *(void *)(a4 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = &v217[16 * v216];
                    if (v219) {
                      operator delete(v219);
                    }
                  }
                  else
                  {
                    *unint64_t v201 = __PAIR64__(v198, v197);
                    int32x2_t v212 = v201 + 1;
                  }
                  *(void *)(a4 + 32) = v212;
                  BOOL v11 = v64++ == v5;
                }
                while (!v11);
                do
                {
                  LODWORD(__src[0]) = v6;
                  int32x2_t v221 = vadd_s32(vdup_n_s32(v6), v28);
                  DWORD1(__src[0]) = v221.i32[0];
                  *(int32x2_t *)((char *)__src + 12) = v221;
                  DWORD2(__src[0]) = v6 + 2;
                  DWORD1(__src[1]) = v6 + 2;
                  std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>((std::vector<unsigned int> *)v254, *(unsigned int **)(a4 + 56), (char *)__src, (char *)&__src[1] + 8);
                  unint64_t v6 = (v6 + 2);
                  --v5;
                }
                while (v5);
                ++i;
                unsigned int v154 = v268;
              }
              while (i != v264);
            }
            uint64_t v8 = v256;
            double v36 = __pa;
            if (v154)
            {
              operator delete(v154);
              double v36 = __pa;
            }
          }
          if (v262 != v36)
          {
            uint64_t v222 = 0;
            unint64_t v223 = v262 - v36;
            if (v223 <= 1) {
              unint64_t v223 = 1;
            }
            unint64_t v277 = v223;
            do
            {
              unint64_t v224 = v36[v222];
              if (v224)
              {
                uint64_t v284 = re::globalAllocators((re *)v31)[2];
                if (*(void *)(v224 + 184))
                {
                  uint64_t v225 = 0;
                  unint64_t v226 = 0;
                  do
                  {
                    re::internal::destroyPersistent<re::Spline<re::Vector2<float>>>(*(re **)(*(void *)(v224 + 200)
                                                                                           + v225));
                    ++v226;
                    v225 += 24;
                  }
                  while (*(void *)(v224 + 184) > v226);
                }
                *(void *)(v224 + 184) = 0;
                ++*(_DWORD *)(v224 + 192);
                unint64_t v5 = v224 + 208;
                (*(void (**)(unint64_t, void))(*(void *)(v224 + 208) + 16))(v224 + 208, 0);
                unint64_t v6 = v224 + 88;
                *(void *)(v224 + 104) = 0;
                ++*(_DWORD *)(v224 + 112);
                *(void *)(v224 + 24) = 0;
                ++*(_DWORD *)(v224 + 32);
                *(void *)(v224 + 64) = 0;
                ++*(_DWORD *)(v224 + 72);
                re::DynamicArray<unsigned long>::deinit(v224 + 168);
                re::DynamicArray<unsigned long>::deinit(v224 + 128);
                re::DynamicArray<unsigned long>::deinit(v224 + 88);
                re::DynamicArray<unsigned long>::deinit(v224 + 8);
                re::DynamicArray<unsigned long>::deinit(v224 + 48);
                re::DynamicArray<unsigned long>::deinit(v224 + 520);
                re::DynamicArray<unsigned long>::deinit(v224 + 480);
                re::DynamicArray<unsigned long>::deinit(v224 + 440);
                re::DynamicArray<unsigned long>::deinit(v224 + 400);
                re::DynamicArray<unsigned long>::deinit(v224 + 360);
                re::Spline<float>::~Spline((void *)(v224 + 208));
                re::DynamicArray<unsigned long>::deinit(v224 + 168);
                re::DynamicArray<unsigned long>::deinit(v224 + 128);
                re::DynamicArray<unsigned long>::deinit(v224 + 88);
                re::DynamicArray<unsigned long>::deinit(v224 + 48);
                re::DynamicArray<unsigned long>::deinit(v224 + 8);
                uint64_t v31 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v284 + 40))(v284, v224);
                uint64_t v8 = v256;
                double v36 = __pa;
              }
              ++v222;
            }
            while (v222 != v277);
          }
          if (v36) {
            operator delete(v36);
          }
          int v26 = v255;
          if (v299)
          {
            unint64_t v300 = v299;
            operator delete(v299);
          }
          if (v302)
          {
            unint64_t v303 = v302;
            operator delete(v302);
          }
          if (v304)
          {
            int64x2_t v305 = v304;
            operator delete(v304);
          }
          double v25 = v240 + 6;
        }
        while (v240 + 6 != v238);
      }
      unint64_t v227 = (v253 - (uint64_t)v252) >> 4;
      int v228 = *(char **)a4;
      unint64_t v229 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4;
      BOOL v230 = v227 >= v229;
      if (!v8[1].i8[4]) {
        goto LABEL_293;
      }
      if (v227 < v229)
      {
        uint64_t v231 = 16 * v227;
        do
        {
          *(float32x2_t *)&v228[v231] = vadd_f32(v244, *(float32x2_t *)&v228[v231]);
          *(float32x4_t *)&v228[v231] = vmulq_n_f32(*(float32x4_t *)&v228[v231], 1.0 / v242);
          ++v227;
          int v228 = *(char **)a4;
          v231 += 16;
        }
        while (v227 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
      }
LABEL_296:
      *int v26 = 1;
    }
    else
    {
      __src[0] = v308;
      re::DynamicString::DynamicString((re::DynamicString *)&__src[1], (const re::DynamicString *)&v309);
      *(unsigned char *)a5 = 0;
      *(_OWORD *)(a5 + 8) = __src[0];
      uint64_t v234 = *((void *)&__src[2] + 1);
      *(void *)(a5 + 24) = *(void *)&__src[1];
      *(void *)(a5 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v234;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)((char *)&__src[1] + 8);
    }
    re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result((uint64_t)v307);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)v315, v315[1]);
  if (v313)
  {
    v314 = v313;
    operator delete(v313);
  }
  if (v311)
  {
    unint64_t v312 = v311;
    operator delete(v311);
  }
}

void re::BezierSpline<float>::~BezierSpline(void *a1)
{
  re::Spline<float>::~Spline(a1);
  JUMPOUT(0x237DBCBD0);
}

void re::BezierSpline<float>::resizeSpans(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    re::DynamicArray<float>::resize(a1 + 8, (unsigned __int16)(3 * a2 + 1));
    *(_WORD *)(a1 + 138) = a2;
    if (!*(unsigned char *)(a1 + 136))
    {
      re::DynamicArray<float>::resize(a1 + 48, a2 + 1);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(unsigned char *)(a1 + 136))
    {
      *(void *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

void *re::BezierSpline<float>::reserveSpans(void *result, int a2)
{
  if (a2) {
    unsigned __int16 v2 = 3 * a2 + 1;
  }
  else {
    unsigned __int16 v2 = 0;
  }
  if (result[2] < (unint64_t)v2) {
    return re::DynamicArray<int>::setCapacity(result + 1, v2);
  }
  return result;
}

uint64_t re::BezierSpline<float>::degree()
{
  return 3;
}

uint64_t re::BezierSpline<float>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::Spline<float>::knotCount(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    return (unsigned __int16)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 1);
  }
  else {
    return 0;
  }
}

uint64_t re::Spline<float>::knotAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 136))
  {
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    if (result != a2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  else if (*(void *)(result + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::BezierSpline<float>::findSpanIndex(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      unsigned int v3 = *(unsigned __int16 *)(a1 + 138);
      float v4 = *(float *)(a1 + 132);
      if (v4 <= a2) {
        LOWORD(v3) = v3 - 1;
      }
      else {
        unsigned int v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
      }
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

BOOL re::Spline<float>::areKnotsNormalized(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    float v2 = *(float **)(a1 + 80);
    if (fabsf(*v2) < 0.00001)
    {
      float v3 = v2[v1 - 1];
      return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
    }
    return 0;
  }
  if (fabsf(*(float *)(a1 + 128)) >= 0.00001) {
    return 0;
  }
  float v3 = *(float *)(a1 + 132);
  return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
}

uint64_t re::Spline<float>::normalizeKnots(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 64);
  unint64_t v2 = v1 - 2;
  if (v1 >= 2)
  {
    float v3 = *(float **)(result + 80);
    float v4 = *v3;
    unint64_t v5 = v1 - 1;
    float v6 = v3[v5];
    *float v3 = 0.0;
    if (v5 >= 2)
    {
      float v7 = v6 - v4;
      uint64_t v8 = v3 + 1;
      do
      {
        *uint64_t v8 = (float)(*v8 - v4) / v7;
        ++v8;
        --v2;
      }
      while (v2);
    }
    v3[v5] = 1.0;
  }
  return result;
}

uint64_t re::Spline<float>::setNonUniformKnots(uint64_t a1)
{
  *(unsigned char *)(a1 + 136) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::DynamicArray<float>::resize(a1 + 48, v2 + 1);
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  return 1;
}

uint64_t re::Spline<float>::setNonUniformKnots(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 136) = 0;
  re::DynamicArray<float>::operator=(a1 + 48, a2);
  uint64_t v4 = a2[2];
  if (!v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v5 = (_DWORD *)a2[4];
  *(_DWORD *)(a1 + 128) = *v5;
  *(_DWORD *)(a1 + 132) = v5[v4 - 1];
  return 1;
}

uint64_t re::Spline<float>::setNonUniformKnotAtIndex(uint64_t a1, unsigned int a2, float a3)
{
  if (*(void *)(a1 + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(void *)(a1 + 80) + 4 * a2) = a3;
  return 1;
}

uint64_t re::Spline<float>::setUniformKnots(uint64_t result, float a2, float a3)
{
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 64) = 0;
  ++*(_DWORD *)(result + 72);
  *(float *)(result + 128) = a2;
  *(float *)(result + 132) = a3;
  return result;
}

float re::BezierSpline<float>::evaluateAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      unint64_t v7 = 0;
    }
    else
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 138);
      float v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        unint64_t v7 = 0x3F80000000000000;
      }
      else
      {
        float v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        unsigned int v4 = (int)v6;
        unint64_t v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpauint64_t n = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v9 = (unsigned __int16)(3 * NonUniformSpan);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v11 = (v9 + 1);
  if (v10 <= v11)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v12 = (v9 + 2);
  if (v10 <= v12)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v13 = (v9 + 3);
  if (v10 <= v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  return (float)((float)((float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                       * (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                               * 3.0)
                                       * *((float *)&NonUniformSpan + 1))
                               * *(float *)(v14 + 4 * v11))
                       + (float)(*(float *)(v14 + 4 * v9)
                               * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                       * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                               * (float)(1.0 - *((float *)&NonUniformSpan + 1))))))
               + (float)(*(float *)(v14 + 4 * v12)
                       * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                               * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))))
       + (float)(*(float *)(v14 + 4 * v13)
               * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                       * *((float *)&NonUniformSpan + 1)));
}

float re::BezierSpline<float>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
    float v6 = *(float *)(a1 + 128);
    float v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      unint64_t v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v5 - 1;
      unint64_t v10 = 0x3F80000000000000;
    }
    else
    {
      float v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      int v9 = (int)v8;
      unint64_t v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    float v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpauint64_t n = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  switch(a2)
  {
    case 0:
      unint64_t v13 = *(void *)(a1 + 24);
      if (v13 <= (unsigned __int16)(3 * NonUniformSpan))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      int v14 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v15 = (v14 + 1);
      if (v13 <= v15)
      {
LABEL_31:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_32;
      }
      unint64_t v16 = (v14 + 2);
      if (v13 <= v16)
      {
LABEL_32:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v17 = (v14 + 3);
      if (v13 <= v17) {
        goto LABEL_33;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      return (float)((float)((float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                           * (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                                   * 3.0)
                                           * *((float *)&NonUniformSpan + 1))
                                   * *(float *)(v18 + 4 * v15))
                           + (float)(*(float *)(v18 + 4 * (unsigned __int16)(3 * NonUniformSpan))
                                   * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                           * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                                   * (float)(1.0 - *((float *)&NonUniformSpan + 1))))))
                   + (float)(*(float *)(v18 + 4 * v16)
                           * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                                   * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))))
           + (float)(*(float *)(v18 + 4 * v17)
                   * (float)((float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
                           * *((float *)&NonUniformSpan + 1)));
    case 1:
      int v20 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v21 = (v20 + 1);
      unint64_t v22 = *(void *)(a1 + 24);
      if (v22 <= v21) {
        goto LABEL_28;
      }
      unint64_t v23 = (v20 + 2);
      if (v22 <= v23) {
        goto LABEL_34;
      }
      unint64_t v24 = (v20 + 3);
      if (v22 <= v24) {
        goto LABEL_35;
      }
      uint64_t v25 = *(void *)(a1 + 40);
      float v26 = v12 * 3.0;
      float v27 = (float)((float)((float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                          + (float)(1.0 - *((float *)&NonUniformSpan + 1)))
                                  * *((float *)&NonUniformSpan + 1))
                          * (float)(*(float *)(v25 + 4 * v23) - *(float *)(v25 + 4 * v21)))
                  + (float)((float)(*(float *)(v25 + 4 * v21)
                                  - *(float *)(v25 + 4 * (unsigned __int16)(3 * NonUniformSpan)))
                          * (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                                  * (float)(1.0 - *((float *)&NonUniformSpan + 1)))))
          + (float)((float)(*(float *)(v25 + 4 * v24) - *(float *)(v25 + 4 * v23))
                  * (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1)));
      return v26 * v27;
    case 2:
      int v28 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v29 = (v28 + 2);
      unint64_t v30 = *(void *)(a1 + 24);
      if (v30 <= v29) {
        goto LABEL_29;
      }
      unint64_t v31 = (v28 + 3);
      if (v30 <= v31) {
        goto LABEL_36;
      }
      float v26 = (float)(v12 * 6.0) * v12;
      uint64_t v32 = *(void *)(a1 + 40);
      float v33 = *(float *)(v32 + 4 * (v28 + 1));
      float v27 = (float)((float)(v33 + (float)(*(float *)(v32 + 4 * v31) + (float)(*(float *)(v32 + 4 * v29) * -2.0)))
                  * *((float *)&NonUniformSpan + 1))
          + (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))
                  * (float)((float)(*(float *)(v32 + 4 * v29) + (float)(v33 * -2.0))
                          + *(float *)(v32 + 4 * (unsigned __int16)(3 * NonUniformSpan))));
      return v26 * v27;
    case 3:
      unint64_t v34 = (unsigned __int16)(3 * NonUniformSpan) + 3;
      if (*(void *)(a1 + 24) <= v34) {
        goto LABEL_30;
      }
      return (float)((float)((float)(v12 * 6.0) * v12) * v12)
           * (float)((float)((float)(*(float *)(*(void *)(a1 + 40) + 4 * v34)
                                   + (float)(*(float *)(*(void *)(a1 + 40)
                                                      + 4 * ((unsigned __int16)(3 * NonUniformSpan) + 2))
                                           * -3.0))
                           + (float)(*(float *)(*(void *)(a1 + 40)
                                              + 4 * ((unsigned __int16)(3 * NonUniformSpan) + 1))
                                   * 3.0))
                   - *(float *)(*(void *)(a1 + 40) + 4 * (unsigned __int16)(3 * NonUniformSpan)));
    default:
      return 0.0;
  }
}

float re::BezierSpline<float>::evaluateLengthAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v4 = *(float *)(a1 + 128);
    if (v4 >= a2)
    {
      LOWORD(v5) = 0;
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
      float v6 = *(float *)(a1 + 132);
      if (v6 <= a2) {
        LOWORD(v5) = v5 - 1;
      }
      else {
        unsigned int v5 = (int)(float)((float)((float)(a2 - v4) / (float)(v6 - v4)) * (float)v5);
      }
    }
    NonUniformSpauint64_t n = v5;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v8 = *(void *)(a1 + 104);
  if (!v8)
  {
    if (NonUniformSpan)
    {
      uint64_t v11 = 0;
      float v10 = 0.0;
      do
      {
        float v10 = v10 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v11);
        uint64_t v11 = (v11 + 1);
      }
      while (NonUniformSpan != v11);
      goto LABEL_18;
    }
LABEL_17:
    float v10 = 0.0;
    goto LABEL_18;
  }
  if (!NonUniformSpan) {
    goto LABEL_17;
  }
  unint64_t v9 = NonUniformSpan - 1;
  if (v8 <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float v10 = *(float *)(*(void *)(a1 + 120) + 4 * v9);
LABEL_18:
  float v12 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, NonUniformSpan);
  uint64_t v13 = 0;
  uint64_t v14 = qword_2687755F8;
  float v15 = (float)(v12 + a2) * 0.5;
  float v16 = (float)(a2 - v12) * 0.5;
  float v17 = 0.0;
  do
  {
    float v17 = v17
        + (float)(*(float *)(v14 + v13 + 4)
                * fabsf((*(float (**)(uint64_t, uint64_t, float))(*(void *)a1 + 128))(a1, 1, v15 + (float)(v16 * *(float *)(v14 + v13)))));
    v13 += 8;
  }
  while (v13 != 128);
  return v10 + (float)(v16 * v17);
}

uint64_t re::BezierSpline<float>::calculateMonomialBasisForSpan(uint64_t a1, __int16 a2, uint64_t a3)
{
  unint64_t v3 = (unsigned __int16)(3 * a2);
  unint64_t v4 = *(void *)(a1 + 24);
  if (v4 <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  int v5 = (unsigned __int16)(3 * a2);
  uint64_t v6 = *(void *)(a1 + 40);
  *(_DWORD *)a3 = *(_DWORD *)(v6 + 4 * v3);
  unint64_t v7 = (v5 + 1);
  if (v4 <= v7)
  {
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  *(float *)(a3 + 4) = (float)(*(float *)(v6 + 4 * v7) - *(float *)(v6 + 4 * v3)) * 3.0;
  unint64_t v8 = (v5 + 2);
  if (v4 <= v8)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(a3 + 8) = (float)((float)(*(float *)(v6 + 4 * v3) + (float)(*(float *)(v6 + 4 * v7) * -2.0))
                             + *(float *)(v6 + 4 * v8))
                     * 3.0;
  unint64_t v9 = (v5 + 3);
  if (v4 <= v9) {
    goto LABEL_9;
  }
  *(float *)(a3 + 12) = (float)(*(float *)(v6 + 4 * v9)
                              + (float)((float)(*(float *)(v6 + 4 * v7) - *(float *)(v6 + 4 * v8)) * 3.0))
                      - *(float *)(v6 + 4 * v3);
  return 4;
}

float re::BezierSpline<float>::evaluateSpanLength(uint64_t a1, unsigned __int16 a2)
{
  float v4 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, a2);
  float v5 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, (unsigned __int16)(a2 + 1));
  uint64_t v6 = 0;
  uint64_t v7 = qword_2687755F8;
  float v8 = (float)(v4 + v5) * 0.5;
  float v9 = (float)(v5 - v4) * 0.5;
  float v10 = 0.0;
  do
  {
    float v10 = v10
        + (float)(*(float *)(v7 + v6 + 4)
                * fabsf((*(float (**)(uint64_t, uint64_t, float))(*(void *)a1 + 128))(a1, 1, v8 + (float)(v9 * *(float *)(v7 + v6)))));
    v6 += 8;
  }
  while (v6 != 128);
  return v9 * v10;
}

void *re::Spline<float>::~Spline(void *a1)
{
  *a1 = &unk_26E721E00;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 6));
  re::DynamicArray<unsigned long>::deinit(v2);
  return a1;
}

void re::SpatialCurve<re::Vector2<float>>::addSpline(re *a1, uint64_t a2, unsigned int a3)
{
  if (*((void *)a1 + 18) <= (unint64_t)a2)
  {
LABEL_112:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  unint64_t v3 = a1;
  int v5 = a2;
  unint64_t v112 = a2;
  uint64_t v6 = (uint64_t)a1 + 128;
  switch(*(_DWORD *)(*((void *)a1 + 20) + 32 * a2))
  {
    case 0:
      uint64_t v7 = re::globalAllocators(a1);
      float v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 144, 8);
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 13) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((unsigned char *)v8 + 136) = 1;
      *float v8 = &unk_26E721EB0;
      unsigned __int16 v9 = a3 - v5;
      if (a3 == v5)
      {
        *((_DWORD *)v8 + 8) = 1;
        *((_WORD *)v8 + 6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
        unint64_t v10 = (unsigned __int16)(a3 - v5) + 1;
      }
      else
      {
        unint64_t v10 = (unsigned __int16)(a3 - v5) + 1;
        re::DynamicArray<unsigned long>::resize((uint64_t)(v8 + 1), v10);
        *((_WORD *)v8 + 6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v9;
        if (!*((unsigned char *)v8 + 136)) {
          re::DynamicArray<float>::resize((uint64_t)(v8 + 6), (unsigned __int16)(a3 - v5) + 1);
        }
      }
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, v10);
      unsigned __int16 v23 = 0;
      do
      {
        unint64_t v24 = v112 + v23;
        if (*((void *)v3 + 18) <= v24) {
          goto LABEL_92;
        }
        unint64_t v25 = v23;
        if (v8[3] <= (unint64_t)v23) {
          goto LABEL_93;
        }
        uint64_t v26 = *((void *)v3 + 20) + 32 * v24;
        *(void *)(v8[5] + 8 * v25) = *(void *)(v26 + 8);
        if (*((void *)v3 + 13) <= v25) {
          goto LABEL_94;
        }
        *(_DWORD *)(*((void *)v3 + 15) + 4 * v25) = *(_DWORD *)(v26 + 4);
        unsigned __int16 v23 = v25 + 1;
      }
      while ((unsigned __int16)(v25 + 1) <= v9);
      (*(void (**)(void *, uint64_t))(*v8 + 96))(v8, (uint64_t)v3 + 88);
      goto LABEL_70;
    case 1:
      int v20 = re::globalAllocators(a1);
      float v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20[2] + 32))(v20[2], 144, 8);
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 13) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((unsigned char *)v8 + 136) = 1;
      *float v8 = &unk_26E722038;
      __int16 v21 = a3 - v5;
      if (a3 == v5)
      {
        *((_DWORD *)v8 + 8) = 1;
        *((_WORD *)v8 + 6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      }
      else
      {
        re::DynamicArray<unsigned long>::resize((uint64_t)(v8 + 1), (unsigned __int16)(3 * v21 + 1));
        *((_WORD *)v8 + 6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v21;
        if (!*((unsigned char *)v8 + 136)) {
          re::DynamicArray<float>::resize((uint64_t)(v8 + 6), (unsigned __int16)(a3 - v5) + 1);
        }
      }
      uint64_t v27 = (unsigned __int16)(a3 - v5);
      re::DynamicArray<float>::resize((uint64_t)v3 + 88, v27 + 1);
      unint64_t v28 = *((void *)v3 + 18);
      if (v28 <= v112) {
        goto LABEL_116;
      }
      if (!*((void *)v3 + 13)) {
        goto LABEL_118;
      }
      **((_DWORD **)v3 + 15) = *(_DWORD *)(*((void *)v3 + 20) + 32 * v112 + 4);
      if (a3 == v5)
      {
        unint64_t v29 = 0;
      }
      else
      {
        uint64_t v30 = 0;
        unsigned __int16 v31 = 0;
        __asm
        {
          FMOV            V0.2S, #3.0
          FMOV            V1.2S, #-3.0
        }
        do
        {
          unint64_t v38 = (unsigned __int16)(v30 + v5);
          unint64_t v39 = *((void *)v3 + 18);
          if (v39 <= v38) {
            goto LABEL_99;
          }
          unint64_t v40 = v38 + 1;
          if (v39 <= v38 + 1) {
            goto LABEL_100;
          }
          uint64_t v41 = v30 + 1;
          if (*((void *)v3 + 13) <= (unint64_t)(v30 + 1)) {
            goto LABEL_101;
          }
          uint64_t v42 = *((void *)v3 + 20);
          float32x2_t v43 = (float32x2_t *)(v42 + 32 * v40);
          float v44 = v43->f32[1];
          float v45 = (float *)(*((void *)v3 + 15) + 4 * v30);
          v45[1] = v44;
          float v46 = v44 - *v45;
          if (v8[3] <= (unint64_t)v31) {
            goto LABEL_102;
          }
          float32x2_t v47 = v43[2];
          float32x2_t v48 = (float32x2_t *)(v42 + 32 * v38);
          float32x2_t v50 = v48[1];
          uint64_t v49 = v48 + 1;
          float32x2_t v51 = v49[2];
          *(float32x2_t *)(v8[5] + 8 * v31) = v50;
          if (v8[3] <= (unint64_t)(unsigned __int16)(v31 + 1)) {
            goto LABEL_103;
          }
          *(float32x2_t *)(v8[5] + 8 * (unsigned __int16)(v31 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v51, v46), _D0), *v49);
          unint64_t v52 = (unsigned __int16)(v31 + 2);
          if (v8[3] <= v52) {
            goto LABEL_104;
          }
          v31 += 3;
          *(float32x2_t *)(v8[5] + 8 * v52) = vadd_f32(*(float32x2_t *)(v42 + 32 * v40 + 8), vdiv_f32(vmul_n_f32(v47, v46), _D1));
          uint64_t v30 = v41;
        }
        while (v27 != v41);
        unint64_t v28 = *((void *)v3 + 18);
        unint64_t v29 = v31;
      }
      if (v28 <= a3) {
        goto LABEL_129;
      }
      if (v8[3] <= v29) {
        goto LABEL_130;
      }
      *(void *)(v8[5] + 8 * v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(void *)(*((void *)v3 + 20) + 32 * a3 + 8);
      (*(void (**)(void *, uint64_t))(*v8 + 96))(v8, (uint64_t)v3 + 88);
      goto LABEL_70;
    case 2:
      uint64_t v11 = re::globalAllocators(a1);
      float v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 144, 8);
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 13) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 1) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((unsigned char *)v8 + 136) = 1;
      *float v8 = &unk_26E722038;
      *((_WORD *)v3 + 282) = v5;
      uint64_t v12 = (uint64_t)v3 + 520;
      *((void *)v3 + 71) = v6;
      unsigned __int16 v13 = a3 - v5;
      unsigned __int16 v14 = a3 - v5 + 3;
      *((_WORD *)v3 + 283) = a3;
      uint64_t v114 = (uint64_t)v3 + 360;
      re::DynamicArray<unsigned long>::resize((uint64_t)v3 + 360, v14);
      re::DynamicArray<float>::resize((uint64_t)v3 + 520, v14);
      uint64_t v15 = *((void *)v3 + 71);
      unint64_t v16 = *((unsigned __int16 *)v3 + 282);
      unint64_t v17 = *(void *)(v15 + 16);
      if (v17 <= v16) {
        goto LABEL_115;
      }
      if (v17 <= v16 + 1) {
        goto LABEL_117;
      }
      if (!*((void *)v3 + 47)) {
        goto LABEL_119;
      }
      **((float32x2_t **)v3 + 4re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = vsub_f32(vadd_f32(*(float32x2_t *)(*(void *)(v15 + 32) + 32 * v16 + 8), *(float32x2_t *)(*(void *)(v15 + 32) + 32 * v16 + 8)), *(float32x2_t *)(*(void *)(v15 + 32) + 32 * (v16 + 1) + 8));
      if (!*((void *)v3 + 67)) {
        goto LABEL_120;
      }
      **((_DWORD **)v3 + 6re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      float v18 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, 0);
      if (*((void *)v3 + 67) <= 1uLL) {
        goto LABEL_121;
      }
      *(float *)(*((void *)v3 + 69) + 4) = v18;
      if (a3 != v5)
      {
        uint64_t v53 = 0;
        uint64_t v19 = v13;
        while (1)
        {
          uint64_t v54 = *((void *)v3 + 71);
          unint64_t v55 = v53 + *((unsigned __int16 *)v3 + 282);
          if (*(void *)(v54 + 16) <= v55) {
            goto LABEL_95;
          }
          uint64_t v56 = v53 + 1;
          unint64_t v57 = (v53 + 1);
          if (*((void *)v3 + 47) <= v57) {
            goto LABEL_96;
          }
          *(void *)(*((void *)v3 + 49) + 8 * v57) = *(void *)(*(void *)(v54 + 32) + 32 * v55 + 8);
          if (*((void *)v3 + 67) <= v57) {
            goto LABEL_97;
          }
          float v58 = *(float *)(*((void *)v3 + 69) + 4 * v57);
          float v59 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, (unsigned __int16)v53);
          unint64_t v60 = (v53 + 2);
          if (*((void *)v3 + 67) <= v60) {
            goto LABEL_98;
          }
          *(float *)(*((void *)v3 + 69) + 4 * v6re::VariableStepTimer::setClock((uint64_t)this, 0) = v58 + v59;
          ++v53;
          if (v13 == v56) {
            goto LABEL_48;
          }
        }
      }
      uint64_t v19 = 0;
LABEL_48:
      uint64_t v61 = *((void *)v3 + 71);
      unint64_t v62 = v19 + *((unsigned __int16 *)v3 + 282);
      if (*(void *)(v61 + 16) <= v62) {
        goto LABEL_122;
      }
      unint64_t v63 = v14 - 2;
      if (*((void *)v3 + 47) <= v63)
      {
LABEL_123:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_124;
      }
      *(void *)(*((void *)v3 + 49) + 8 * v63) = *(void *)(*(void *)(v61 + 32) + 32 * v62 + 8);
      unint64_t v64 = *((void *)v3 + 47);
      if (v64 <= v63)
      {
LABEL_124:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_125;
      }
      unint64_t v65 = v14 - 3;
      if (v64 <= v65)
      {
LABEL_125:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_126;
      }
      unint64_t v66 = v14 - 1;
      if (v64 <= v66)
      {
LABEL_126:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_127;
      }
      *(float32x2_t *)(*((void *)v3 + 49) + 8 * v66) = vsub_f32(vadd_f32(*(float32x2_t *)(*((void *)v3 + 49) + 8 * v63), *(float32x2_t *)(*((void *)v3 + 49) + 8 * v63)), *(float32x2_t *)(*((void *)v3 + 49) + 8 * v65));
      if (*((void *)v3 + 67) <= v63)
      {
LABEL_127:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_128;
      }
      float v67 = *(float *)(*((void *)v3 + 69) + 4 * v63);
      float v68 = re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(v114, (unsigned __int16)(v13 - 1));
      if (*((void *)v3 + 67) <= v66)
      {
LABEL_128:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_129:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_130:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_131:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(float *)(*((void *)v3 + 69) + 4 * v66) = v67 + v68;
      int v69 = *((unsigned __int16 *)v3 + 283);
      float v117 = v3;
      int v70 = *((unsigned __int16 *)v3 + 282);
      (*(void (**)(void *, void))(*v8 + 16))(v8, (unsigned __int16)(v69 - v70));
      unsigned __int16 v71 = v69 - v70;
      if (v69 == v70)
      {
        unint64_t v72 = 0;
        uint64_t v73 = v71;
      }
      else
      {
        uint64_t v111 = (uint64_t)v3 + 520;
        uint64_t v74 = 0;
        unsigned __int16 v75 = 0;
        uint64_t v73 = (unsigned __int16)(v69 - v70);
        uint64_t v76 = 8;
        __asm
        {
          FMOV            V9.2S, #3.0
          FMOV            V10.2S, #-3.0
        }
        do
        {
          unint64_t v79 = *((void *)v117 + 67);
          if (v79 <= v74 + 1) {
            goto LABEL_105;
          }
          if (v79 <= v74 + 2) {
            goto LABEL_106;
          }
          unint64_t v80 = *((void *)v117 + 47);
          if (v80 <= v74 + 1) {
            goto LABEL_107;
          }
          if (v80 <= v74 + 2) {
            goto LABEL_108;
          }
          uint64_t v115 = v74 + 1;
          uint64_t v81 = *((void *)v117 + 69);
          uint64_t v82 = v81 + 4 * v74;
          float v83 = *(float *)(v82 + 4);
          float v84 = *(float *)(v82 + 8);
          uint64_t v85 = *((void *)v117 + 49);
          float v116 = v84 - v83;
          re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(v79, v81, v80, v85, (unsigned __int16)v74, v83);
          float32x2_t v87 = v86;
          re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(*((void *)v117 + 67), *((void *)v117 + 69), *((void *)v117 + 47), *((void *)v117 + 49), (unsigned __int16)v74, v84);
          if (v8[3] <= (unint64_t)v75) {
            goto LABEL_109;
          }
          *(void *)(v8[5] + 8 * v75) = *(void *)(v85 + v76);
          if (v8[3] <= (unint64_t)(unsigned __int16)(v75 + 1)) {
            goto LABEL_110;
          }
          *(float32x2_t *)(v8[5] + 8 * (unsigned __int16)(v75 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v87, v116), _D9), *(float32x2_t *)(v85 + v76));
          unint64_t v89 = (unsigned __int16)(v75 + 2);
          if (v8[3] <= v89) {
            goto LABEL_111;
          }
          v75 += 3;
          *(float32x2_t *)(v8[5] + 8 * v8re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = vadd_f32(*(float32x2_t *)(v85 + 8 * v74 + 16), vdiv_f32(vmul_n_f32(v88, v116), _D10));
          v76 += 8;
          ++v74;
        }
        while (v73 != v115);
        unint64_t v72 = v75;
        uint64_t v12 = v111;
      }
      uint64_t v90 = *((void *)v117 + 71);
      unint64_t v91 = v73 + *((unsigned __int16 *)v117 + 282);
      if (*(void *)(v90 + 16) <= v91) {
        goto LABEL_131;
      }
      if (v8[3] <= v72) {
        goto LABEL_132;
      }
      *(void *)(v8[5] + 8 * v72) = *(void *)(*(void *)(v90 + 32) + 32 * v91 + 8);
      float v92 = re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(v114, v12);
      (*(void (**)(void *, uint64_t, float))(*v8 + 96))(v8, v12, v92);
      unint64_t v3 = v117;
LABEL_70:
      unsigned int v93 = (*(uint64_t (**)(void *))(*v8 + 40))(v8);
      re::DynamicArray<float>::resize((uint64_t)(v8 + 11), v93);
      if (v93)
      {
        unint64_t v94 = 0;
        float v95 = 0.0;
        while (1)
        {
          (*(void (**)(void *, unint64_t))(*v8 + 152))(v8, v94);
          if (v8[13] <= v94) {
            break;
          }
          float v95 = v95 + v96;
          *(float *)(v8[15] + 4 * v94++) = v95;
          if (v93 == v94) {
            goto LABEL_74;
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_92:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_93:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_94:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_95:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_97:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_98:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_99:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_100:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_101:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_102:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_103:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_104:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_106:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_110:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_111:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_112;
      }
LABEL_74:
      unint64_t v97 = *((void *)v3 + 18);
      if (v97 <= v112)
      {
LABEL_113:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_123;
      }
      if (v97 <= a3) {
        goto LABEL_114;
      }
      uint64_t v98 = *((void *)v3 + 20);
      int v99 = *(_DWORD *)(v98 + 32 * v112 + 4);
      int v100 = *(_DWORD *)(v98 + 32 * a3 + 4);
      __int16 v101 = (*(uint64_t (**)(void *))(*v8 + 48))(v8);
      (*(void (**)(void *, void))(*v8 + 56))(v8, (unsigned __int16)(v101 - 1));
      float v103 = (*(float (**)(void *))(*v8 + 136))(v8);
      unint64_t v104 = *((void *)v3 + 23);
      if (v104) {
        float v105 = *(float *)(*((void *)v3 + 25) + 24 * v104 - 8);
      }
      else {
        float v105 = 0.0;
      }
      unint64_t v106 = *((void *)v3 + 22);
      if (v104 >= v106)
      {
        unint64_t v107 = v104 + 1;
        if (v106 < v104 + 1)
        {
          if (*((void *)v3 + 21))
          {
            unint64_t v108 = 2 * v106;
            if (!v106) {
              unint64_t v108 = 8;
            }
            if (v108 <= v107) {
              unint64_t v109 = v107;
            }
            else {
              unint64_t v109 = v108;
            }
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)v3 + 21, v109);
          }
          else
          {
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((void *)v3 + 21, v107);
            ++*((_DWORD *)v3 + 48);
          }
        }
        unint64_t v104 = *((void *)v3 + 23);
      }
      uint64_t v110 = *((void *)v3 + 25) + 24 * v104;
      *(void *)uint64_t v110 = v8;
      *(_DWORD *)(v110 + 8) = v99;
      *(_DWORD *)(v110 + 12) = v100;
      *(float *)(v110 + 16) = v103 + v105;
      *((void *)v3 + 23) = v104 + 1;
      ++*((_DWORD *)v3 + 48);
      return;
    case 3:
      unint64_t v22 = re::globalAllocators(a1);
      float v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 144, 8);
      *(_OWORD *)(v8 + 15) = 0u;
      v8[17] = 0;
      *(_OWORD *)(v8 + 1) = 0u;
      *(_OWORD *)(v8 + 3) = 0u;
      *(_OWORD *)(v8 + 5) = 0u;
      *(_OWORD *)(v8 + 7) = 0u;
      *(_OWORD *)(v8 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0u;
      *(_OWORD *)(v8 + 11) = 0u;
      *(_OWORD *)(v8 + 13) = 0u;
      *((_DWORD *)v8 + 33) = 1065353216;
      *((unsigned char *)v8 + 136) = 1;
      *float v8 = &unk_26E722038;
      re::internal::CubicInterpolant<re::Vector2<float>>::interpolateNaturalSpline((uint64_t)v3 + 360, v6, v5, a3, v8);
      goto LABEL_70;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unrecognized key type.", "!\"Unreachable code\"", "addSpline", 341);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233F9280CLL);
  }
}

re *re::internal::destroyPersistent<re::Spline<re::Vector2<float>>>(re *result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    (**(void (***)(re *))v1)(v1);
    unint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return result;
}

void re::LinearSpline<re::Vector2<float>>::~LinearSpline(void *a1)
{
  re::Spline<re::Vector2<float>>::~Spline(a1);
  JUMPOUT(0x237DBCBD0);
}

void re::LinearSpline<re::Vector2<float>>::resizeSpans(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    __int16 v3 = a2;
    unint64_t v4 = a2 + 1;
    re::DynamicArray<unsigned long>::resize(a1 + 8, v4);
    *(_WORD *)(a1 + 138) = v3;
    if (!*(unsigned char *)(a1 + 136))
    {
      re::DynamicArray<float>::resize(a1 + 48, v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(unsigned char *)(a1 + 136))
    {
      *(void *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

void *re::LinearSpline<re::Vector2<float>>::reserveSpans(void *result, unsigned int a2)
{
  if (result[2] <= (unint64_t)a2) {
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 1, a2 + 1);
  }
  return result;
}

uint64_t re::LinearSpline<re::Vector2<float>>::degree()
{
  return 1;
}

uint64_t re::LinearSpline<re::Vector2<float>>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::Spline<re::Vector2<float>>::knotCount(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    return (unsigned __int16)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 1);
  }
  else {
    return 0;
  }
}

uint64_t re::Spline<re::Vector2<float>>::knotAtIndex(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 136))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    if (result != a2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  else if (*(void *)(result + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::LinearSpline<re::Vector2<float>>::findSpanIndex(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      unsigned int v3 = *(unsigned __int16 *)(a1 + 138);
      float v4 = *(float *)(a1 + 132);
      if (v4 <= a2) {
        LOWORD(v3) = v3 - 1;
      }
      else {
        unsigned int v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
      }
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

BOOL re::Spline<re::Vector2<float>>::areKnotsNormalized(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    float v2 = *(float **)(a1 + 80);
    if (fabsf(*v2) < 0.00001)
    {
      float v3 = v2[v1 - 1];
      return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
    }
    return 0;
  }
  if (fabsf(*(float *)(a1 + 128)) >= 0.00001) {
    return 0;
  }
  float v3 = *(float *)(a1 + 132);
  return v3 == 1.0 || fabsf(v3 + -1.0) < (float)((float)((float)(fabsf(v3) + 1.0) + 1.0) * 0.00001);
}

uint64_t re::Spline<re::Vector2<float>>::normalizeKnots(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 64);
  unint64_t v2 = v1 - 2;
  if (v1 >= 2)
  {
    float v3 = *(float **)(result + 80);
    float v4 = *v3;
    unint64_t v5 = v1 - 1;
    float v6 = v3[v5];
    *float v3 = 0.0;
    if (v5 >= 2)
    {
      float v7 = v6 - v4;
      float v8 = v3 + 1;
      do
      {
        *float v8 = (float)(*v8 - v4) / v7;
        ++v8;
        --v2;
      }
      while (v2);
    }
    v3[v5] = 1.0;
  }
  return result;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnots(uint64_t a1)
{
  *(unsigned char *)(a1 + 136) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::DynamicArray<float>::resize(a1 + 48, v2 + 1);
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnots(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 136) = 0;
  re::DynamicArray<float>::operator=(a1 + 48, a2);
  uint64_t v4 = a2[2];
  if (!v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v5 = (_DWORD *)a2[4];
  *(_DWORD *)(a1 + 128) = *v5;
  *(_DWORD *)(a1 + 132) = v5[v4 - 1];
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setNonUniformKnotAtIndex(uint64_t a1, unsigned int a2, float a3)
{
  if (*(void *)(a1 + 64) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(void *)(a1 + 80) + 4 * a2) = a3;
  return 1;
}

uint64_t re::Spline<re::Vector2<float>>::setUniformKnots(uint64_t result, float a2, float a3)
{
  *(unsigned char *)(result + 136) = 1;
  *(void *)(result + 64) = 0;
  ++*(_DWORD *)(result + 72);
  *(float *)(result + 128) = a2;
  *(float *)(result + 132) = a3;
  return result;
}

float32x2_t re::LinearSpline<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      unint64_t v7 = 0;
    }
    else
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 138);
      float v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        unint64_t v7 = 0x3F80000000000000;
      }
      else
      {
        float v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        unsigned int v4 = (int)v6;
        unint64_t v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpauint64_t n = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9 <= (unsigned __int16)NonUniformSpan)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v9 <= (unint64_t)(unsigned __int16)NonUniformSpan + 1) {
    goto LABEL_13;
  }
  return vadd_f32(vmul_n_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * (unsigned __int16)NonUniformSpan), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * ((unsigned __int16)NonUniformSpan + 1)), *((float *)&NonUniformSpan + 1)));
}

float32x2_t re::LinearSpline<re::Vector2<float>>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
    float v6 = *(float *)(a1 + 128);
    float v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      unint64_t v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v5 - 1;
      unint64_t v10 = 0x3F80000000000000;
    }
    else
    {
      float v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      int v9 = (int)v8;
      unint64_t v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    float v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpauint64_t n = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  unint64_t v13 = *(void *)(a1 + 24);
  if (v13 <= (unsigned __int16)NonUniformSpan)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v14 = (unsigned __int16)NonUniformSpan + 1;
  if (v13 <= v14) {
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(a1 + 40);
  if (a2 == 1)
  {
    return vmul_n_f32(vsub_f32(*(float32x2_t *)(v15 + 8 * v14), *(float32x2_t *)(v15 + 8 * (unsigned __int16)NonUniformSpan)), v12);
  }
  else
  {
    float32x2_t result = 0;
    if (!a2) {
      return vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 8 * (unsigned __int16)NonUniformSpan), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(*(float32x2_t *)(v15 + 8 * v14), *((float *)&NonUniformSpan + 1)));
    }
  }
  return result;
}

float re::LinearSpline<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      unint64_t v7 = 0;
    }
    else
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 138);
      float v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        unint64_t v7 = 0x3F80000000000000;
      }
      else
      {
        float v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        unsigned int v4 = (int)v6;
        unint64_t v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpauint64_t n = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v9 = *(void *)(a1 + 104);
  if (!v9)
  {
    if ((_WORD)NonUniformSpan)
    {
      uint64_t v12 = 0;
      float v11 = 0.0;
      do
      {
        float v11 = v11 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v12);
        uint64_t v12 = (v12 + 1);
      }
      while ((unsigned __int16)NonUniformSpan != v12);
      goto LABEL_18;
    }
LABEL_17:
    float v11 = 0.0;
    goto LABEL_18;
  }
  if (!(_WORD)NonUniformSpan) {
    goto LABEL_17;
  }
  unint64_t v10 = (unsigned __int16)NonUniformSpan - 1;
  if (v9 <= v10) {
    goto LABEL_21;
  }
  float v11 = *(float *)(*(void *)(a1 + 120) + 4 * v10);
LABEL_18:
  unint64_t v13 = (unsigned __int16)NonUniformSpan + 1;
  if (*(void *)(a1 + 24) <= v13)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x2_t v14 = vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * (unsigned __int16)NonUniformSpan), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v13));
  return v11 + (float)(*((float *)&NonUniformSpan + 1) * sqrtf(vaddv_f32(vmul_f32(v14, v14))));
}

uint64_t re::LinearSpline<re::Vector2<float>>::calculateMonomialBasisForSpan(uint64_t a1, unsigned int a2, float32x2_t *a3)
{
  if (*(void *)(a1 + 24) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x2_t v3 = *(float32x2_t *)(*(void *)(a1 + 40) + 8 * a2);
  *a3 = v3;
  unint64_t v4 = a2 + 1;
  if (*(void *)(a1 + 24) <= v4) {
    goto LABEL_5;
  }
  a3[1] = vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v4), v3);
  a3[2] = 0;
  a3[3] = 0;
  return 2;
}

float re::LinearSpline<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v3 = a2 + 1;
  if (v2 <= v3) {
    goto LABEL_5;
  }
  float32x2_t v4 = vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v3), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * a2));
  return sqrtf(vaddv_f32(vmul_f32(v4, v4)));
}

void *re::Spline<re::Vector2<float>>::~Spline(void *a1)
{
  *a1 = &unk_26E721F88;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 11));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 6));
  re::DynamicArray<unsigned long>::deinit(v2);
  return a1;
}

void re::BezierSpline<re::Vector2<float>>::~BezierSpline(void *a1)
{
  re::Spline<re::Vector2<float>>::~Spline(a1);
  JUMPOUT(0x237DBCBD0);
}

void re::BezierSpline<re::Vector2<float>>::resizeSpans(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    re::DynamicArray<unsigned long>::resize(a1 + 8, (unsigned __int16)(3 * a2 + 1));
    *(_WORD *)(a1 + 138) = a2;
    if (!*(unsigned char *)(a1 + 136))
    {
      re::DynamicArray<float>::resize(a1 + 48, a2 + 1);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    ++*(_DWORD *)(a1 + 32);
    *(_WORD *)(a1 + 138) = 0;
    if (!*(unsigned char *)(a1 + 136))
    {
      *(void *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 72);
    }
  }
}

void *re::BezierSpline<re::Vector2<float>>::reserveSpans(void *result, int a2)
{
  if (a2) {
    unsigned __int16 v2 = 3 * a2 + 1;
  }
  else {
    unsigned __int16 v2 = 0;
  }
  if (result[2] < (unint64_t)v2) {
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 1, v2);
  }
  return result;
}

uint64_t re::BezierSpline<re::Vector2<float>>::degree()
{
  return 3;
}

uint64_t re::BezierSpline<re::Vector2<float>>::spanCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 138);
}

uint64_t re::BezierSpline<re::Vector2<float>>::findSpanIndex(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v2 = *(float *)(a1 + 128);
    if (v2 >= a2)
    {
      LOWORD(v3) = 0;
    }
    else
    {
      unsigned int v3 = *(unsigned __int16 *)(a1 + 138);
      float v4 = *(float *)(a1 + 132);
      if (v4 <= a2) {
        LOWORD(v3) = v3 - 1;
      }
      else {
        unsigned int v3 = (int)(float)((float)((float)(a2 - v2) / (float)(v4 - v2)) * (float)v3);
      }
    }
    LOWORD(result) = v3;
  }
  else
  {
    LOWORD(result) = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  return (unsigned __int16)result;
}

float32x2_t re::BezierSpline<re::Vector2<float>>::evaluateAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v3 = *(float *)(a1 + 128);
    if (v3 >= a2)
    {
      LOWORD(v4) = 0;
      unint64_t v7 = 0;
    }
    else
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 138);
      float v5 = *(float *)(a1 + 132);
      if (v5 <= a2)
      {
        LOWORD(v4) = v4 - 1;
        unint64_t v7 = 0x3F80000000000000;
      }
      else
      {
        float v6 = (float)((float)(a2 - v3) / (float)(v5 - v3)) * (float)v4;
        unsigned int v4 = (int)v6;
        unint64_t v7 = (unint64_t)COERCE_UNSIGNED_INT(v6 - (float)(int)v6) << 32;
      }
    }
    NonUniformSpauint64_t n = v7 | (unsigned __int16)v4;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v9 = (unsigned __int16)(3 * NonUniformSpan);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v11 = (v9 + 1);
  if (v10 <= v11)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v12 = (v9 + 2);
  if (v10 <= v12)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v13 = (v9 + 3);
  if (v10 <= v13) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  return vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v14 + 8 * v9), (float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * (float)(1.0 - *((float *)&NonUniformSpan + 1)))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v11), (float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))* 3.0)* *((float *)&NonUniformSpan + 1))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v12), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))), vmul_n_f32(*(float32x2_t *)(v14 + 8 * v13), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
           * *((float *)&NonUniformSpan + 1)));
}

float32x2_t re::BezierSpline<re::Vector2<float>>::evaluateDerivativeAt(uint64_t a1, int a2, float a3)
{
  if (*(unsigned char *)(a1 + 136))
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
    float v6 = *(float *)(a1 + 128);
    float v7 = *(float *)(a1 + 132);
    if (v6 >= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
      unint64_t v10 = 0;
    }
    else if (v7 <= a3)
    {
      LOWORD(vre::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v5 - 1;
      unint64_t v10 = 0x3F80000000000000;
    }
    else
    {
      float v8 = (float)((float)(a3 - v6) / (float)(v7 - v6)) * (float)v5;
      int v9 = (int)v8;
      unint64_t v10 = (unint64_t)COERCE_UNSIGNED_INT(v8 - (float)(int)v8) << 32;
    }
    float v12 = (float)v5 / (float)(v7 - v6);
    NonUniformSpauint64_t n = v10 | (unsigned __int16)v9;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a3);
  }
  switch(a2)
  {
    case 0:
      unint64_t v13 = *(void *)(a1 + 24);
      if (v13 <= (unsigned __int16)(3 * NonUniformSpan))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_28:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_29:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      int v14 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v15 = (v14 + 1);
      if (v13 <= v15)
      {
LABEL_31:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_32;
      }
      unint64_t v16 = (v14 + 2);
      if (v13 <= v16)
      {
LABEL_32:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v17 = (v14 + 3);
      if (v13 <= v17) {
        goto LABEL_33;
      }
      uint64_t v18 = *(void *)(a1 + 40);
      return vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v18 + 8 * (unsigned __int16)(3 * NonUniformSpan)), (float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v15), (float)((float)((float)(1.0 - *((float *)&NonUniformSpan + 1))* (float)(1.0 - *((float *)&NonUniformSpan + 1)))* 3.0)* *((float *)&NonUniformSpan + 1))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v16), (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))* (float)((float)(1.0 - *((float *)&NonUniformSpan + 1)) * 3.0))), vmul_n_f32(*(float32x2_t *)(v18 + 8 * v17),
                 (float)(*((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1))
               * *((float *)&NonUniformSpan + 1)));
    case 1:
      int v20 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v21 = (v20 + 1);
      unint64_t v22 = *(void *)(a1 + 24);
      if (v22 <= v21) {
        goto LABEL_28;
      }
      unint64_t v23 = (v20 + 2);
      if (v22 <= v23) {
        goto LABEL_34;
      }
      unint64_t v24 = (v20 + 3);
      if (v22 <= v24) {
        goto LABEL_35;
      }
      float v25 = v12 * 3.0;
      uint64_t v26 = *(void *)(a1 + 40);
      float v27 = 1.0 - *((float *)&NonUniformSpan + 1);
      float32x2_t v28 = vadd_f32(vadd_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v21), *(float32x2_t *)(v26 + 8 * (unsigned __int16)(3 * NonUniformSpan))), v27 * v27), vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v23), *(float32x2_t *)(v26 + 8 * v21)), (float)(v27 + v27) * *((float *)&NonUniformSpan + 1))), vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 8 * v24), *(float32x2_t *)(v26 + 8 * v23)), *((float *)&NonUniformSpan + 1) * *((float *)&NonUniformSpan + 1)));
      return vmul_n_f32(v28, v25);
    case 2:
      int v29 = (unsigned __int16)(3 * NonUniformSpan);
      unint64_t v30 = (v29 + 2);
      unint64_t v31 = *(void *)(a1 + 24);
      if (v31 <= v30) {
        goto LABEL_29;
      }
      unint64_t v32 = (v29 + 3);
      if (v31 <= v32) {
        goto LABEL_36;
      }
      float v25 = (float)(v12 * 6.0) * v12;
      uint64_t v33 = *(void *)(a1 + 40);
      float32x2_t v34 = *(float32x2_t *)(v33 + 8 * (v29 + 1));
      float32x2_t v28 = vadd_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v33 + 8 * (unsigned __int16)(3 * NonUniformSpan)), vsub_f32(*(float32x2_t *)(v33 + 8 * v30), vadd_f32(v34, v34))), 1.0 - *((float *)&NonUniformSpan + 1)), vmul_n_f32(vadd_f32(v34, vsub_f32(*(float32x2_t *)(v33 + 8 * v32), vadd_f32(*(float32x2_t *)(v33 + 8 * v30), *(float32x2_t *)(v33 + 8 * v30)))), *((float *)&NonUniformSpan + 1)));
      return vmul_n_f32(v28, v25);
    case 3:
      unint64_t v35 = (unsigned __int16)(3 * NonUniformSpan) + 3;
      if (*(void *)(a1 + 24) <= v35) {
        goto LABEL_30;
      }
      __asm { FMOV            V3.2S, #3.0 }
      return vmul_n_f32(vsub_f32(vadd_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v35), vmul_f32(*(float32x2_t *)(*(void *)(a1 + 40)+ 8 * ((unsigned __int16)(3 * NonUniformSpan) + 2)), _D3)), vmul_f32(*(float32x2_t *)(*(void *)(a1 + 40)+ 8 * ((unsigned __int16)(3 * NonUniformSpan) + 1)), _D3)), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * (unsigned __int16)(3 * NonUniformSpan))), (float)((float)(v12 * 6.0) * v12) * v12);
    default:
      return 0;
  }
}

float re::BezierSpline<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    float v4 = *(float *)(a1 + 128);
    if (v4 >= a2)
    {
      LOWORD(v5) = 0;
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
      float v6 = *(float *)(a1 + 132);
      if (v6 <= a2) {
        LOWORD(v5) = v5 - 1;
      }
      else {
        unsigned int v5 = (int)(float)((float)((float)(a2 - v4) / (float)(v6 - v4)) * (float)v5);
      }
    }
    NonUniformSpauint64_t n = v5;
  }
  else
  {
    NonUniformSpauint64_t n = re::internal::findNonUniformSpan(a1 + 48, 0, (unsigned __int16)(*(_WORD *)(a1 + 64) - 1), a2);
  }
  unint64_t v8 = *(void *)(a1 + 104);
  if (!v8)
  {
    if (NonUniformSpan)
    {
      uint64_t v11 = 0;
      float v10 = 0.0;
      do
      {
        float v10 = v10 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v11);
        uint64_t v11 = (v11 + 1);
      }
      while (NonUniformSpan != v11);
      goto LABEL_18;
    }
LABEL_17:
    float v10 = 0.0;
    goto LABEL_18;
  }
  if (!NonUniformSpan) {
    goto LABEL_17;
  }
  unint64_t v9 = NonUniformSpan - 1;
  if (v8 <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float v10 = *(float *)(*(void *)(a1 + 120) + 4 * v9);
LABEL_18:
  float v12 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, NonUniformSpan);
  uint64_t v13 = 0;
  uint64_t v14 = qword_2687755F8;
  float v15 = (float)(v12 + a2) * 0.5;
  float v16 = (float)(a2 - v12) * 0.5;
  float v17 = 0.0;
  do
  {
    float v18 = *(float *)(v14 + v13 + 4);
    float32x2_t v19 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 128))(a1, 1, v15 + (float)(v16 * *(float *)(v14 + v13)));
    float v17 = v17 + (float)(v18 * sqrtf(vaddv_f32(vmul_f32(v19, v19))));
    v13 += 8;
  }
  while (v13 != 128);
  return v10 + (float)(v16 * v17);
}

uint64_t re::BezierSpline<re::Vector2<float>>::calculateMonomialBasisForSpan(uint64_t a1, __int16 a2, float32x2_t *a3)
{
  unint64_t v3 = (unsigned __int16)(3 * a2);
  if (*(void *)(a1 + 24) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  int v4 = (unsigned __int16)(3 * a2);
  *a3 = *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v3);
  unint64_t v5 = (v4 + 1);
  if (*(void *)(a1 + 24) <= v5)
  {
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  __asm { FMOV            V0.2S, #3.0 }
  a3[1] = vmul_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v3)), _D0);
  unint64_t v11 = *(void *)(a1 + 24);
  if (v11 <= v3)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (v11 <= v5)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v12 = (v4 + 2);
  if (v11 <= v12)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = vmul_f32(vadd_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v12), vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v3), vadd_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v5)))), _D0);
  unint64_t v13 = (v4 + 3);
  if (*(void *)(a1 + 24) <= v13) {
    goto LABEL_13;
  }
  a3[3] = vsub_f32(vadd_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v13), vmul_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 40) + 8 * v5), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v12)), _D0)), *(float32x2_t *)(*(void *)(a1 + 40) + 8 * v3));
  return 4;
}

float re::BezierSpline<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned __int16 a2)
{
  float v4 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, a2);
  float v5 = (*(float (**)(uint64_t, void))(*(void *)a1 + 56))(a1, (unsigned __int16)(a2 + 1));
  uint64_t v6 = 0;
  uint64_t v7 = qword_2687755F8;
  float v8 = (float)(v4 + v5) * 0.5;
  float v9 = (float)(v5 - v4) * 0.5;
  float v10 = 0.0;
  do
  {
    float v11 = *(float *)(v7 + v6 + 4);
    float32x2_t v12 = (float32x2_t)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)a1 + 128))(a1, 1, v8 + (float)(v9 * *(float *)(v7 + v6)));
    float v10 = v10 + (float)(v11 * sqrtf(vaddv_f32(vmul_f32(v12, v12))));
    v6 += 8;
  }
  while (v6 != 128);
  return v9 * v10;
}

float32x2_t re::internal::CubicInterpolant<re::Vector2<float>>::evaluateCatmullRomDerivative(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5, float a6)
{
  if (a5 >= a1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v6 = a5 + 1;
  if (v6 >= a1)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v7 = a5 + 2;
  if (v7 >= a1)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v8 = a5 + 3;
  if (v8 >= a1)
  {
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  if (a5 >= a3)
  {
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  if (v6 >= a3)
  {
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (v7 >= a3)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v8 >= a3) {
    goto LABEL_17;
  }
  float v9 = *(float *)(a2 + 4 * a5);
  float v10 = *(float *)(a2 + 4 * v6);
  float v11 = *(float *)(a2 + 4 * v7);
  float v12 = *(float *)(a2 + 4 * v8);
  float32x2_t v13 = *(float32x2_t *)(a4 + 8 * a5);
  float32x2_t v14 = *(float32x2_t *)(a4 + 8 * v6);
  float32x2_t v15 = *(float32x2_t *)(a4 + 8 * v7);
  float32x2_t v16 = *(float32x2_t *)(a4 + 8 * v8);
  float v17 = v12 - a6;
  float v18 = v11 - a6;
  float v19 = v10 - a6;
  float v20 = v9 - a6;
  float v21 = 1.0 / (float)(v12 - v11);
  float v22 = 1.0 / (float)(v12 - v10);
  float v23 = 1.0 / (float)(v11 - v10);
  float v24 = 1.0 / (float)(v11 - v9);
  float v25 = 1.0 / (float)(v10 - v9);
  float32x2_t v26 = vmul_n_f32(vsub_f32(vmul_n_f32(v13, v19), vmul_n_f32(v14, v20)), v25);
  float32x2_t v27 = vmul_n_f32(vsub_f32(vmul_n_f32(v14, v18), vmul_n_f32(v15, v19)), v23);
  float32x2_t v28 = vmul_n_f32(vsub_f32(vmul_n_f32(v15, v17), vmul_n_f32(v16, v18)), v21);
  float32x2_t v29 = vmul_n_f32(vsub_f32(v14, v13), v25);
  float32x2_t v30 = vmul_n_f32(vsub_f32(v15, v14), v23);
  return vmul_n_f32(vsub_f32(vadd_f32(vsub_f32(vmul_n_f32(vsub_f32(vmul_n_f32(v27, v17), vmul_n_f32(v28, v19)), v22), vmul_n_f32(vsub_f32(vmul_n_f32(v26, v18), vmul_n_f32(v27, v20)), v24)), vmul_n_f32(vmul_n_f32(vsub_f32(vadd_f32(vmul_n_f32(v29, v18), vsub_f32(v27, v26)), vmul_n_f32(v30, v20)), v24), v18)), vmul_n_f32(vmul_n_f32(vsub_f32(vadd_f32(vmul_n_f32(v30, v17), vsub_f32(v28, v27)), vmul_n_f32(vmul_n_f32(vsub_f32(v16, v15), v21), v19)), v22), v19)), v23);
}

float re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int16 *)(a1 + 204);
  unsigned __int16 v5 = *(_WORD *)(a1 + 206) + 1;
  unsigned __int16 v6 = v5 - v4;
  re::DynamicArray<float>::resize(a2, (unsigned __int16)(v5 - v4));
  if (v4 != v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 208);
    unint64_t v10 = *(unsigned __int16 *)(a1 + 204);
    unint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 32);
    unint64_t v14 = v11 - v10;
    if (v11 < v10) {
      unint64_t v14 = 0;
    }
    if ((v6 & 0xFFFE) != 0) {
      uint64_t v15 = v6;
    }
    else {
      uint64_t v15 = 1;
    }
    uint64_t v16 = (32 * v10) | 4;
    do
    {
      if (v14 == v8)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_13:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v12 == v8) {
        goto LABEL_13;
      }
      float result = *(float *)(*(void *)(v9 + 32) + v16);
      *(float *)(v13 + 4 * v8++) = result;
      v16 += 32;
    }
    while (v15 != v8);
  }
  return result;
}

float re::internal::CubicInterpolant<re::Vector2<float>>::evaluateSpanLength(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  uint64_t v3 = *(unsigned __int16 *)(a1 + 204);
  unint64_t v4 = v3 + (unsigned __int16)(a2 + 1);
  unint64_t v5 = *(void *)(v2 + 16);
  if (v5 <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v6 = v3 + a2;
  if (v5 <= v6) {
    goto LABEL_7;
  }
  float v7 = *(float *)(a1 + 200);
  float32x2_t v8 = vsub_f32(*(float32x2_t *)(*(void *)(v2 + 32) + 32 * v4 + 8), *(float32x2_t *)(*(void *)(v2 + 32) + 32 * v6 + 8));
  float v9 = sqrtf(vaddv_f32(vmul_f32(v8, v8)));
  return powf(v9, v7);
}

uint64_t re::internal::CubicInterpolant<re::Vector2<float>>::interpolateNaturalSpline(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, void *a5)
{
  *(_WORD *)(a1 + 204) = a3;
  *(_WORD *)(a1 + 206) = a4;
  *(void *)(a1 + 208) = a2;
  uint64_t v7 = a1 + 160;
  re::internal::CubicInterpolant<re::Vector2<float>>::setKnotsToKeyKnots(a1, a1 + 160);
  unint64_t v8 = (unsigned __int16)(*(_WORD *)(a1 + 206) - *(_WORD *)(a1 + 204) + 1);
  re::DynamicArray<unsigned long>::resize(a1, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 40, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 80, v8);
  re::DynamicArray<unsigned long>::resize(a1 + 120, v8);
  unint64_t v12 = v8 - 1;
  if (*(void *)(a1 + 16) <= v8 - 1)
  {
LABEL_110:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_111;
  }
  *(void *)(*(void *)(a1 + 32) + 8 * v12) = 0;
  if (!*(void *)(a1 + 16))
  {
LABEL_111:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_112;
  }
  **(void **)(a1 + 32) = 0;
  if (*(void *)(a1 + 136) <= v12)
  {
LABEL_112:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_113;
  }
  *(void *)(*(void *)(a1 + 152) + 8 * v12) = 0x3F8000003F800000;
  if (!*(void *)(a1 + 136))
  {
LABEL_113:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_114;
  }
  **(void **)(a1 + 152) = 0x3F8000003F800000;
  if (*(void *)(a1 + 56) <= v12)
  {
LABEL_114:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_115;
  }
  *(void *)(*(void *)(a1 + 72) + 8 * v12) = 0;
  if (!*(void *)(a1 + 56))
  {
LABEL_115:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  **(void **)(a1 + 72) = 0;
  if (*(void *)(a1 + 96) <= v12)
  {
LABEL_116:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_117;
  }
  *(void *)(*(void *)(a1 + 112) + 8 * v12) = 0;
  if (!*(void *)(a1 + 96))
  {
LABEL_117:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_118;
  }
  **(void **)(a1 + 112) = 0;
  if (v12 >= 2)
  {
    unint64_t v13 = 2 - v8;
    unint64_t v14 = 1;
    uint64_t v15 = 8;
    do
    {
      unint64_t v16 = *(void *)(a1 + 176);
      if (v16 <= v14) {
        goto LABEL_86;
      }
      unint64_t v17 = v14 + 1;
      if (v16 <= v14 + 1) {
        goto LABEL_87;
      }
      if (*(void *)(a1 + 16) <= v14) {
        goto LABEL_88;
      }
      uint64_t v18 = *(void *)(a1 + 192);
      float v19 = *(float *)(v18 + 4 * v14);
      *(float *)v9.i32 = v19 - *(float *)(v18 + v15 - 8);
      v11.i32[0] = *(_DWORD *)(v18 + v15);
      *(int32x2_t *)(*(void *)(a1 + 32) + 8 * v14) = vdup_lane_s32(v9, 0);
      if (*(void *)(a1 + 136) <= v14) {
        goto LABEL_89;
      }
      v10.f32[0] = v11.f32[0] - v19;
      v11.f32[0] = (float)(*(float *)v9.i32 + v10.f32[0]) + (float)(*(float *)v9.i32 + v10.f32[0]);
      *(int32x2_t *)(*(void *)(a1 + 152) + 8 * v14) = vdup_lane_s32((int32x2_t)v11, 0);
      if (*(void *)(a1 + 56) <= v14) {
        goto LABEL_90;
      }
      *(int32x2_t *)(*(void *)(a1 + 72) + 8 * v14) = vdup_lane_s32((int32x2_t)v10, 0);
      uint64_t v20 = *(void *)(a1 + 208);
      uint64_t v21 = *(unsigned __int16 *)(a1 + 204);
      unint64_t v22 = v21 + (unsigned __int16)v17;
      unint64_t v23 = *(void *)(v20 + 16);
      if (v23 <= v22) {
        goto LABEL_91;
      }
      unint64_t v24 = v21 + (unsigned __int16)v14;
      if (v23 <= v24) {
        goto LABEL_92;
      }
      unint64_t v25 = v21 + (unsigned __int16)(v14 - 1);
      if (v23 <= v25) {
        goto LABEL_93;
      }
      if (*(void *)(a1 + 96) <= v14) {
        goto LABEL_94;
      }
      uint64_t v26 = *(void *)(v20 + 32);
      float32x2_t v27 = *(float32x2_t *)(v26 + 32 * v24 + 8);
      float32x2_t v10 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v26 + 32 * v22 + 8), v27), 3.0 / v10.f32[0]);
      float32x2_t v11 = vsub_f32(v27, *(float32x2_t *)(v26 + 32 * v25 + 8));
      int32x2_t v9 = (int32x2_t)vsub_f32(v10, vmul_n_f32(v11, 3.0 / *(float *)v9.i32));
      *(int32x2_t *)(*(void *)(a1 + 112) + 8 * v14) = v9;
      v15 += 4;
      ++v14;
    }
    while (v13 + v17 != 1);
  }
  uint64_t v28 = *(void *)(a1 + 136);
  if (!v28)
  {
LABEL_118:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_119;
  }
  if (!*(void *)(a1 + 56))
  {
LABEL_119:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_120;
  }
  **(float32x2_t **)(a1 + 72) = vdiv_f32(**(float32x2_t **)(a1 + 72), **(float32x2_t **)(a1 + 152));
  if (!*(void *)(a1 + 136))
  {
LABEL_120:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_121;
  }
  if (!*(void *)(a1 + 96))
  {
LABEL_121:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_122;
  }
  uint64_t v29 = (v28 - 1);
  **(float32x2_t **)(a1 + 112) = vdiv_f32(**(float32x2_t **)(a1 + 112), **(float32x2_t **)(a1 + 152));
  if ((int)v29 >= 2)
  {
    unint64_t v30 = 1;
    while (*(void *)(a1 + 136) > v30)
    {
      if (*(void *)(a1 + 16) <= v30) {
        goto LABEL_96;
      }
      unint64_t v31 = v30 - 1;
      unint64_t v32 = *(void *)(a1 + 56);
      if (v32 <= v30 - 1) {
        goto LABEL_97;
      }
      if (v32 <= v30) {
        goto LABEL_98;
      }
      *(float32x2_t *)(*(void *)(a1 + 72) + 8 * v3re::VariableStepTimer::setClock((uint64_t)this, 0) = vdiv_f32(*(float32x2_t *)(*(void *)(a1 + 72) + 8 * v30), vsub_f32(*(float32x2_t *)(*(void *)(a1 + 152) + 8 * v30), vmul_f32(*(float32x2_t *)(*(void *)(a1 + 32) + 8 * v30), *(float32x2_t *)(*(void *)(a1 + 72) + 8 * v31))));
      if (*(void *)(a1 + 96) <= v30) {
        goto LABEL_99;
      }
      if (*(void *)(a1 + 16) <= v30) {
        goto LABEL_100;
      }
      if (*(void *)(a1 + 136) <= v30) {
        goto LABEL_101;
      }
      if (*(void *)(a1 + 56) <= v31) {
        goto LABEL_102;
      }
      float32x2_t v33 = *(float32x2_t *)(*(void *)(a1 + 32) + 8 * v30);
      *(float32x2_t *)(*(void *)(a1 + 112) + 8 * v3re::VariableStepTimer::setClock((uint64_t)this, 0) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 112) + 8 * v30), vmul_f32(v33, *(float32x2_t *)(*(void *)(a1 + 112) + 8 * v31))), vsub_f32(*(float32x2_t *)(*(void *)(a1 + 152) + 8 * v30), vmul_f32(v33, *(float32x2_t *)(*(void *)(a1 + 72) + 8 * v31))));
      if (++v30 == v29) {
        goto LABEL_36;
      }
    }
LABEL_95:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_99:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_100:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_101:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_102:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_106:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_107:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_108:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_109:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
LABEL_36:
  unint64_t v34 = *(void *)(a1 + 96);
  if (v34 <= (int)v29)
  {
LABEL_122:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_123;
  }
  if (*(void *)(a1 + 16) <= (unint64_t)(int)v29)
  {
LABEL_123:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_124;
  }
  unint64_t v35 = (int)v28 - 2;
  if (v34 <= v35)
  {
LABEL_124:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_125;
  }
  if (*(void *)(a1 + 136) <= (unint64_t)(int)v29)
  {
LABEL_125:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_126;
  }
  if (*(void *)(a1 + 56) <= v35)
  {
LABEL_126:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_127:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_128:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x2_t v36 = *(float32x2_t *)(*(void *)(a1 + 32) + 8 * (int)v29);
  *(float32x2_t *)(*(void *)(a1 + 112) + 8 * (int)v2re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = vdiv_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 112) + 8 * (int)v29), vmul_f32(v36, *(float32x2_t *)(*(void *)(a1 + 112) + 8 * v35))), vsub_f32(*(float32x2_t *)(*(void *)(a1 + 152) + 8 * (int)v29), vmul_f32(v36, *(float32x2_t *)(*(void *)(a1 + 72) + 8 * v35))));
  if ((int)v29 >= 1)
  {
    LODWORD(v37) = v28;
    while (1)
    {
      unint64_t v38 = (v37 - 2);
      if (*(void *)(a1 + 56) <= v38) {
        break;
      }
      uint64_t v37 = (v37 - 1);
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 <= v37) {
        goto LABEL_76;
      }
      if (v39 <= v38) {
        goto LABEL_77;
      }
      *(float32x2_t *)(*(void *)(a1 + 112) + 8 * v38) = vsub_f32(*(float32x2_t *)(*(void *)(a1 + 112) + 8 * v38), vmul_f32(*(float32x2_t *)(*(void *)(a1 + 72) + 8 * v38), *(float32x2_t *)(*(void *)(a1 + 112) + 8 * v37)));
      if (v37 <= 1) {
        goto LABEL_47;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_76:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_78;
  }
LABEL_47:
  if (v12)
  {
    unint64_t v40 = 0;
    uint64_t v41 = 4;
    uint64_t v42 = 8;
    while (1)
    {
      unint64_t v43 = v40 + 1;
      if (*(void *)(a1 + 176) <= v40 + 1) {
        break;
      }
      uint64_t v44 = *(void *)(a1 + 208);
      uint64_t v45 = *(unsigned __int16 *)(a1 + 204);
      unint64_t v46 = v45 + (unsigned __int16)v43;
      unint64_t v47 = *(void *)(v44 + 16);
      if (v47 <= v46) {
        goto LABEL_79;
      }
      unint64_t v48 = v45 + (unsigned __int16)v40;
      if (v47 <= v48) {
        goto LABEL_80;
      }
      unint64_t v49 = *(void *)(a1 + 96);
      if (v49 <= v40) {
        goto LABEL_81;
      }
      if (v49 <= v43) {
        goto LABEL_82;
      }
      if (*(void *)(a1 + 56) <= v40) {
        goto LABEL_83;
      }
      float v50 = *(float *)(*(void *)(a1 + 192) + v41) - *(float *)(*(void *)(a1 + 192) + v41 - 4);
      *(float32x2_t *)(*(void *)(a1 + 72) + 8 * v4re::VariableStepTimer::setClock((uint64_t)this, 0) = vsub_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)(*(void *)(v44 + 32) + 32 * v46 + 8), *(float32x2_t *)(*(void *)(v44 + 32) + 32 * v48 + 8)), 1.0 / v50), vmul_n_f32(vadd_f32(vadd_f32(*(float32x2_t *)(*(void *)(a1 + 112) + v42 - 8), *(float32x2_t *)(*(void *)(a1 + 112) + v42 - 8)), *(float32x2_t *)(*(void *)(a1 + 112) + v42)), v50 / 3.0));
      if (*(void *)(a1 + 96) <= v43) {
        goto LABEL_84;
      }
      if (*(void *)(a1 + 136) <= v40) {
        goto LABEL_85;
      }
      *(float32x2_t *)(*(void *)(a1 + 152) + 8 * v4re::VariableStepTimer::setClock((uint64_t)this, 0) = vmul_n_f32(vsub_f32(*(float32x2_t *)(*(void *)(a1 + 112) + v42), *(float32x2_t *)(*(void *)(a1 + 112) + v42 - 8)), 1.0 / (float)(v50 * 3.0));
      v41 += 4;
      v42 += 8;
      ++v40;
      if (v12 == v43) {
        goto LABEL_58;
      }
    }
LABEL_78:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_85:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_86:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_90:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_92:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_93:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
LABEL_58:
  int v51 = *(unsigned __int16 *)(a1 + 206);
  int v52 = *(unsigned __int16 *)(a1 + 204);
  (*(void (**)(void *, void))(*a5 + 16))(a5, (unsigned __int16)(v51 - v52));
  unsigned __int16 v53 = v51 - v52;
  if (v51 == v52)
  {
    unint64_t v54 = 0;
  }
  else
  {
    unint64_t v55 = 0;
    unsigned __int16 v56 = 0;
    __asm
    {
      FMOV            V9.2S, #3.0
      FMOV            V10.2S, #-3.0
    }
    do
    {
      unint64_t v63 = *(void *)(a1 + 176);
      if (v63 <= v55) {
        goto LABEL_103;
      }
      if (v63 <= (v55 + 1)) {
        goto LABEL_104;
      }
      uint64_t v64 = *(void *)(a1 + 208);
      uint64_t v65 = *(unsigned __int16 *)(a1 + 204);
      uint64_t v66 = v55 + v65;
      unint64_t v67 = *(void *)(v64 + 16);
      if (v67 <= v55 + v65) {
        goto LABEL_105;
      }
      unint64_t v68 = v65 + (unsigned __int16)(v55 + 1);
      if (v67 <= v68) {
        goto LABEL_106;
      }
      uint64_t v69 = *(void *)(a1 + 192);
      float v70 = *(float *)(v69 + 4 * v55);
      float v71 = *(float *)(v69 + 4 * (v55 + 1));
      uint64_t v72 = *(void *)(v64 + 32);
      float32x2_t v73 = *(float32x2_t *)(v72 + 32 * v66 + 8);
      float32x2_t v74 = *(float32x2_t *)(v72 + 32 * v68 + 8);
      float v83 = v71 - v70;
      re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(v63, v69, *(void *)(a1 + 56), *(void *)(a1 + 72), *(void *)(a1 + 96), *(void *)(a1 + 112), *(void *)(a1 + 136), *(void *)(a1 + 152), v70, v55);
      float32x2_t v76 = v75;
      re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(*(void *)(a1 + 176), *(void *)(a1 + 192), *(void *)(a1 + 56), *(void *)(a1 + 72), *(void *)(a1 + 96), *(void *)(a1 + 112), *(void *)(a1 + 136), *(void *)(a1 + 152), v71, v55);
      if (a5[3] <= (unint64_t)v56) {
        goto LABEL_107;
      }
      *(float32x2_t *)(a5[5] + 8 * v56) = v73;
      if (a5[3] <= (unint64_t)(unsigned __int16)(v56 + 1)) {
        goto LABEL_108;
      }
      *(float32x2_t *)(a5[5] + 8 * (unsigned __int16)(v56 + 1)) = vadd_f32(vdiv_f32(vmul_n_f32(v76, v83), _D9), v73);
      unint64_t v78 = (unsigned __int16)(v56 + 2);
      if (a5[3] <= v78) {
        goto LABEL_109;
      }
      v56 += 3;
      *(float32x2_t *)(a5[5] + 8 * v78) = vadd_f32(v74, vdiv_f32(vmul_n_f32(v77, v83), _D10));
      ++v55;
    }
    while (v53 != (unsigned __int16)v55);
    unint64_t v54 = v56;
  }
  uint64_t v79 = *(void *)(a1 + 208);
  unint64_t v80 = *(unsigned __int16 *)(a1 + 204) + (unint64_t)v53;
  if (*(void *)(v79 + 16) <= v80) {
    goto LABEL_127;
  }
  if (a5[3] <= v54) {
    goto LABEL_128;
  }
  *(void *)(a5[5] + 8 * v54) = *(void *)(*(void *)(v79 + 32) + 32 * v80 + 8);
  uint64_t v81 = *(uint64_t (**)(void *, uint64_t))(*a5 + 96);
  return v81(a5, v7);
}

float32x2_t re::internal::CubicInterpolant<re::Vector2<float>>::evaluateNaturalSplineDerivative(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, float a9, unsigned __int16 a10)
{
  if (a10 >= a1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  if (a10 >= a3)
  {
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  if (a10 >= a5)
  {
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a10 >= a7) {
    goto LABEL_9;
  }
  float v10 = a9 - *(float *)(a2 + 4 * a10);
  return vadd_f32(*(float32x2_t *)(a4 + 8 * a10), vmul_n_f32(vadd_f32(vadd_f32(*(float32x2_t *)(a6 + 8 * a10), *(float32x2_t *)(a6 + 8 * a10)), vmul_n_f32(*(float32x2_t *)(a8 + 8 * a10), v10 * 3.0)), v10));
}

uint64_t re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int32x4_t a5, double a6, double a7, double a8, int32x4_t a9)
{
  v9.i32[0] = *(_DWORD *)(a3 + 8);
  float v13 = *(float *)(a3 + 12);
  float v15 = *(float *)(a3 + 16);
  float v14 = *(float *)(a3 + 20);
  float v17 = *(float *)a3;
  float v16 = *(float *)(a3 + 4);
  if (!*((unsigned char *)a1 + 8))
  {
    *(float32x2_t *)a9.i8 = vmul_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)0x40000000C0A00000, v14), (float32x2_t)0xC0A0000040000000, *(float *)v9.i32), (float32x2_t)0x41900000C1100000, v13), (float32x2_t)0xC110000041900000, v15), (float32x2_t)vdup_n_s32(0x3E2AAAABu));
    unsigned int v29 = *(unsigned __int8 *)(a3 + 24);
    if (*((unsigned __int16 *)a1 + 1) <= v29)
    {
      float v36 = *(float *)(a3 + 20);
      float v37 = *(float *)(a3 + 8);
      goto LABEL_15;
    }
    int v49 = *(_DWORD *)(a3 + 12);
    float v50 = *(float *)(a3 + 16);
    __int32 v54 = *(_DWORD *)(a3 + 8);
    float v55 = *(float *)(a3 + 20);
    float v52 = v55;
    int32x4_t v53 = a9;
    int32x4_t v51 = v9;
LABEL_6:
    float v30 = (float)(v16 + (float)(v17 * 5.0)) * 0.16667;
    float v31 = (float)(v17 + v16) * 0.5;
    float v32 = (float)(v17 + (float)(v16 * 5.0)) * 0.16667;
    float v33 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v30);
    float v34 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v31);
    float v35 = re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(*a2, v32);
    v9.i32[0] = v54;
    float v14 = v55;
    float v36 = v52;
    a9.i64[0] = v53.i64[0];
    float v37 = *(float *)v51.i32;
    if (*(unsigned __int16 *)a1 > v29)
    {
LABEL_7:
      float v58 = v17;
      float v59 = (float)(v17 + v16) * 0.5;
      __int32 v60 = v54;
      float v61 = v33;
      int v62 = v49;
      float v63 = v34;
      char v64 = v29 + 1;
      v56[0] = v59;
      v56[1] = v16;
      v56[2] = v34;
      v56[3] = v50;
      v56[4] = v35;
      v56[5] = v55;
      char v57 = v29 + 1;
      re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(a1, a2, &v58, a4);
      return re::internal::FunctionFitter::build<re::SpatialCurve<re::Vector2<float>>::reparameterizeByLength(void)::{lambda(float)#1}>(a1, a2, v56, a4);
    }
    float32x4_t v42 = (float32x4_t)vuzp1q_s32(v51, v53);
    v42.i32[1] = v53.i32[1];
    v42.f32[3] = v52;
    int8x16_t v43 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_234416420);
    float v44 = vaddv_f32(vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
    int8x16_t v45 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_234416430);
    float v46 = vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
    int8x16_t v47 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_234416440);
    float v48 = vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
    if (*((unsigned char *)a1 + 8))
    {
      if (fabsf(v30) >= 0.00001)
      {
        if (fabsf((float)(v30 - v44) / v30) > a1[1]) {
          goto LABEL_7;
        }
      }
      else if (fabsf(v44) >= 0.00001)
      {
        goto LABEL_7;
      }
      if (fabsf(v31) >= 0.00001)
      {
        if (fabsf((float)(v31 - v46) / v31) > a1[1]) {
          goto LABEL_7;
        }
      }
      else if (fabsf(v46) >= 0.00001)
      {
        goto LABEL_7;
      }
      if (fabsf(v32) >= 0.00001)
      {
        if (fabsf((float)(v32 - v48) / v32) > a1[1]) {
          goto LABEL_7;
        }
      }
      else if (fabsf(v48) >= 0.00001)
      {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    if (fabsf(v33) >= 0.00001)
    {
      if (fabsf((float)(v33 - v44) / v33) > a1[1]) {
        goto LABEL_7;
      }
    }
    else if (fabsf(v44) >= 0.00001)
    {
      goto LABEL_7;
    }
    if (fabsf(v34) >= 0.00001)
    {
      if (fabsf((float)(v34 - v46) / v34) > a1[1]) {
        goto LABEL_7;
      }
    }
    else if (fabsf(v46) >= 0.00001)
    {
      goto LABEL_7;
    }
    if (fabsf(v35) >= 0.00001)
    {
      if (fabsf((float)(v35 - v48) / v35) > a1[1]) {
        goto LABEL_7;
      }
    }
    else if (fabsf(v48) >= 0.00001)
    {
      goto LABEL_7;
    }
LABEL_15:
    float v39 = *(float *)&a9.i32[1];
    float v40 = v17;
    float v41 = v16;
    goto LABEL_16;
  }
  float v18 = (float)(v13 - *(float *)v9.i32) / (float)(v14 - *(float *)v9.i32);
  float v19 = (float)(v15 - *(float *)v9.i32) / (float)(v14 - *(float *)v9.i32);
  float v20 = 1.0 - v18;
  float v21 = 1.0 - v19;
  float v22 = -(float)(v18 * v18);
  v23.f32[0] = (float)((float)((float)(v16 + (float)(v17 * 2.0)) * 0.33333)
                     + (float)((float)-(float)((float)(v20 * v20) * v20) * v17))
             + (float)((float)(v18 * v22) * v16);
  v23.f32[1] = (float)((float)((float)(v17 + (float)(v16 * 2.0)) * 0.33333)
                     + (float)((float)(v21 * (float)-(float)(v21 * v21)) * v17))
             + (float)((float)-(float)((float)(v19 * v19) * v19) * v16);
  v24.f32[0] = (float)(v19 * v19) * (float)(1.0 - v19);
  v24.f32[1] = v22 * (float)(1.0 - v18);
  v25.f32[0] = (float)(1.0 - v19) * (float)-(float)(v19 * (float)(1.0 - v19));
  float v26 = v18 * (float)(1.0 - v18);
  v25.f32[1] = (float)(1.0 - v18) * v26;
  int32x2_t v27 = (int32x2_t)vmul_f32(v24, v23);
  int32x2_t v28 = (int32x2_t)vmul_f32(v25, v23);
  *(float32x2_t *)a5.i8 = vadd_f32((float32x2_t)vzip1_s32(v28, v27), (float32x2_t)vzip2_s32(v28, v27));
  *(float32x2_t *)a9.i8 = vmul_n_f32(*(float32x2_t *)a5.i8, 1.0/ (float)((float)((float)(v18 * 3.0) * v19)* (float)((float)(v21 * (float)-(float)(v26 * v21))+ (float)((float)(v19 * (float)(v20 * v20)) * v21))));
  unsigned int v29 = *(unsigned __int8 *)(a3 + 24);
  if (*((unsigned __int16 *)a1 + 1) > v29)
  {
    int32x4_t v53 = a9;
    __int32 v54 = *(_DWORD *)(a3 + 8);
    int v49 = *(_DWORD *)(a3 + 12);
    float v50 = *(float *)(a3 + 16);
    float v55 = *(float *)(a3 + 20);
    float v52 = *(float *)(a3 + 4);
    a5.i32[0] = *(_DWORD *)a3;
    int32x4_t v51 = a5;
    goto LABEL_6;
  }
  float v36 = *(float *)(a3 + 4);
  float v37 = *(float *)a3;
LABEL_9:
  float v39 = *(float *)&a9.i32[1];
  float v40 = *(float *)v9.i32;
  float v41 = v14;
LABEL_16:
  return re::internal::FunctionFitter::addSpanToBezierSpline(a4, v40, v41, v37, v39, *(float *)a9.i32, v36);
}

float re::SpatialCurve<re::Vector2<float>>::evaluateLengthAt(uint64_t a1, float a2)
{
  float v2 = a2;
  if (!*(unsigned char *)a1)
  {
    unint64_t SplineIndexForParameter = re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(a1, a2);
    if (*(void *)(a1 + 184) <= SplineIndexForParameter)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 200) + 24 * SplineIndexForParameter);
      (*(void (**)(uint64_t, float))(*(void *)v5 + 136))(v5, v2);
      if (!SplineIndexForParameter)
      {
        float v8 = 0.0;
        return v6 + v8;
      }
      unint64_t v7 = (SplineIndexForParameter - 1);
      if (*(void *)(a1 + 184) > v7)
      {
        float v8 = *(float *)(*(void *)(a1 + 200) + 24 * v7 + 16);
        return v6 + v8;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v2;
}

uint64_t re::SpatialCurve<re::Vector2<float>>::findSplineIndexForParameter(uint64_t a1, float a2)
{
  unint64_t v2 = *(void *)(a1 + 184);
  if ((v2 & 0xFFFE) == 0 || *(float *)(a1 + 352) >= a2) {
    return 0;
  }
  unsigned __int16 v3 = v2 - 1;
  if (*(float *)(a1 + 356) > a2)
  {
    unint64_t v4 = v3 >> 1;
    if (v2 > v4)
    {
      unsigned __int16 v5 = 0;
      uint64_t v6 = *(void *)(a1 + 200);
      do
      {
        if (*(float *)(v6 + 24 * v4 + 8) <= a2)
        {
          if (*(float *)(v6 + 24 * v4 + 12) > a2) {
            return (unsigned __int16)v4;
          }
          unsigned __int16 v5 = v4 + 1;
        }
        else
        {
          unsigned __int16 v3 = v4 - 1;
        }
        unint64_t v4 = (v3 + v5) >> 1;
      }
      while (v2 > v4);
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    return 0;
  }
  return v3;
}

uint64_t re::internal::FunctionFitter::addSpanToBezierSpline(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v15 = (v14 + 1);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 16))(a1, (unsigned __int16)(v14 + 1));
  if (!v14)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_13;
    }
    **(float **)(a1 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = a4;
    (*(void (**)(uint64_t, void, float))(*(void *)a1 + 104))(a1, 0, a2);
  }
  __int16 v17 = 3 * v14;
  uint64_t v18 = (unsigned __int16)(3 * v14 + 1);
  unint64_t v19 = *(void *)(a1 + 24);
  if (v19 <= (unsigned __int16)(v17 + 1))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(a1 + 40);
  *(float *)(v20 + 4 * v18) = a5;
  if (v19 <= (unsigned __int16)(v17 + 2))
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  *(float *)(v20 + 4 * (unsigned __int16)(v17 + 2)) = a6;
  unsigned __int16 v21 = v17 + 3;
  if (v19 <= v21)
  {
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(v20 + 4 * v21) = a7;
  float v22 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)a1 + 104);
  v16.n128_f32[0] = a3;
  return v22(a1, v15, v16);
}

void std::vector<unsigned int>::__insert_with_size[abi:nn180100]<unsigned int *,unsigned int *>(std::vector<unsigned int> *a1, unsigned int *__dst, char *__src, char *a4)
{
  int64_t value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  float v8 = value;
  unint64_t end = (unint64_t)a1->__end_;
  if ((uint64_t)((uint64_t)value - end) < 24)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v12 = ((uint64_t)(end - (unint64_t)a1->__begin_) >> 2) + 6;
    if (v12 >> 62) {
      abort();
    }
    uint64_t v13 = __dst - begin;
    uint64_t v14 = (char *)v8 - (char *)begin;
    uint64_t v15 = v14 >> 1;
    if (v14 >> 1 <= v12) {
      uint64_t v15 = ((uint64_t)(end - (unint64_t)a1->__begin_) >> 2) + 6;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16) {
      __int16 v17 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v16);
    }
    else {
      __int16 v17 = 0;
    }
    uint64_t v26 = 0;
    int32x2_t v27 = &v17[v13];
    __v.__first_ = v17;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = &v17[v16];
    do
    {
      v27[v26] = *(_DWORD *)&__src[v26 * 4];
      ++v26;
    }
    while (v26 != 6);
    __v.__end_ = v27 + 6;
    std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return;
  }
  uint64_t v18 = end - (void)__dst;
  if ((uint64_t)(end - (void)__dst) > 23)
  {
    unint64_t v19 = __src + 24;
    std::vector<unsigned int>::pointer v21 = a1->__end_;
LABEL_16:
    float v22 = (char *)(__dst + 6);
    std::vector<unsigned int>::pointer v23 = v21 - 6;
    float32x2_t v24 = v21;
    if ((unint64_t)(v21 - 6) < end)
    {
      float32x2_t v24 = v21;
      do
      {
        unsigned int v25 = *v23++;
        *v24++ = v25;
      }
      while ((unint64_t)v23 < end);
    }
    a1->__end_ = v24;
    if (v21 != (std::vector<unsigned int>::pointer)v22) {
      memmove(&v21[-(((char *)v21 - v22) >> 2)], __dst, (char *)v21 - v22);
    }
    if (v19 != __src)
    {
      memmove(__dst, __src, v19 - __src);
    }
    return;
  }
  unint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(a1->__end_, &__src[v18], a4 - &__src[v18]);
  }
  std::vector<unsigned int>::pointer v21 = (std::vector<unsigned int>::pointer)(end + v20);
  a1->__end_ = (std::vector<unsigned int>::pointer)(end + v20);
  if (v18 >= 1) {
    goto LABEL_16;
  }
}

void std::vector<re::Vector3<float>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<re::Vector3<float>*>,std::__wrap_iter<re::Vector3<float>*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  int32x4_t v9 = (void *)(a1 + 16);
  uint64_t v10 = v11;
  unint64_t v12 = *(v9 - 1);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = (__dst - v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __p[4] = v9;
    if (v17) {
      uint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    int32x2_t v28 = &v18[16 * v15];
    __p[0] = v18;
    __p[1] = v28;
    __p[3] = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    float v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v6;
      v6 += 16;
      *(_OWORD *)int32x2_t v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    __p[2] = v30;
    std::vector<re::Vector3<float>>::__swap_out_circular_buffer((void **)a1, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v19 = v12 - (void)__dst;
  uint64_t v20 = (uint64_t)(v12 - (void)__dst) >> 4;
  if (v20 >= a5)
  {
    std::vector<unsigned int>::pointer v21 = &__src[16 * a5];
    std::vector<unsigned int>::pointer v23 = (char *)*(v9 - 1);
LABEL_17:
    float32x2_t v24 = &__dst[16 * a5];
    unsigned int v25 = &v23[-16 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)uint64_t v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], __dst, v23 - v24);
    }
    if (v21 != v6)
    {
      memmove(__dst, v6, v21 - v6);
    }
    return;
  }
  std::vector<unsigned int>::pointer v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove((void *)*(v9 - 1), &__src[16 * v20], a4 - v21);
  }
  std::vector<unsigned int>::pointer v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
}

void *std::vector<re::Vector3<float>>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unsigned __int16 v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    float v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = (void *)(v9 - 16);
      *(_OWORD *)(v9 - 16) = *((_OWORD *)v8 - 1);
      v8 -= 16;
      v9 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::__vallocate[abi:nn180100](a1, v5 >> 3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<re::SpatialCurve<re::Vector2<float>> *,std::allocator<re::SpatialCurve<re::Vector2<float>> *>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  float result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = (void **)(a1 + 8);
    std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  }
  return a1;
}

void re::pathprocessing::subdivideBezierOnSelfIntersection(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  uint64_t v286 = 0;
  uint64_t v287 = 0;
  int64x2_t v288 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
  if (v6 != *a1)
  {
    if (v7 > 0x555555555555555) {
      goto LABEL_252;
    }
    uint64_t v8 = (v6 - *a1) >> 3;
    uint64_t v9 = (float32x2_t *)operator new(16 * v8);
    unint64_t v10 = 0;
    uint64_t v286 = (void **)v9;
    uint64_t v287 = (void **)v9;
    int64x2_t v288 = &v9[2 * v8];
    do
    {
      uint64_t v11 = (float32x2_t *)(v5 + 24 * v10);
      float32x2_t v12 = v11[1];
      float32x2_t v13 = vmul_f32(v12, 0);
      float32x2_t v14 = v11[2];
      float32x2_t v15 = vmul_f32(v14, 0);
      float32x2_t v16 = vadd_f32(vadd_f32(*v11, v13), v15);
      float32x2_t v17 = vadd_f32(vadd_f32(v12, v15), vmul_f32(v16, 0));
      float32x2_t v18 = vadd_f32(v14, vadd_f32(vmul_f32(*v11, 0), v13));
      float32x2_t v19 = vsub_f32(v16, v17);
      float32x2_t v20 = vmul_f32(v19, v19);
      v20.i32[0] = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
      float32x2_t v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
      float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
      float32x2_t v23 = vmul_n_f32(v19, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).f32[0]);
      float32x2_t v24 = vsub_f32(v18, v17);
      float32x2_t v25 = vmul_f32(v24, v24);
      v25.i32[0] = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)).u32[0];
      float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
      float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
      float v28 = (float)(vaddv_f32(vmul_f32(v23, vmul_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0])))* 0.5)+ 0.5;
      if (v9 >= v288)
      {
        uint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v286) >> 4);
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) > 0x555555555555555) {
          goto LABEL_252;
        }
        if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v30) {
          unint64_t v30 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v31 = 0x555555555555555;
        }
        else {
          unint64_t v31 = v30;
        }
        std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(__p, v31, v29, (uint64_t)&v288);
        uint64_t v32 = v278;
        *(void *)long long v278 = v10;
        *(float32x2_t *)(v32 + 8) = v16;
        *(float32x2_t *)(v32 + 16) = v17;
        *(float32x2_t *)(v32 + 24) = v18;
        *(float *)(v32 + 32) = v28;
        *(void *)(v32 + 36) = 0x3F80000000000000;
        float v33 = v286;
        float v34 = v287;
        float v35 = (char *)__p[1];
        if (v287 == v286)
        {
          float v33 = v287;
        }
        else
        {
          float v36 = v287;
          do
          {
            long long v37 = *((_OWORD *)v36 - 3);
            long long v38 = *((_OWORD *)v36 - 2);
            *(_OWORD *)(v35 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)((char *)v36 - 20);
            *((_OWORD *)v35 - 3) = v37;
            *((_OWORD *)v35 - 2) = v38;
            v35 -= 48;
            v36 -= 6;
          }
          while (v36 != v33);
        }
        uint64_t v9 = (float32x2_t *)(v32 + 48);
        uint64_t v286 = (void **)v35;
        uint64_t v287 = (void **)(v32 + 48);
        float v39 = v288;
        int64x2_t v288 = (float32x2_t *)*((void *)&v278 + 1);
        *(void *)&long long v278 = v34;
        *((void *)&v278 + 1) = v39;
        __p[0] = v33;
        __p[1] = v33;
        if (v34 != v33) {
          *(void *)&long long v278 = (char *)v34 - 48 - 48 * (((char *)v34 - (char *)v33 - 48) / 0x30uLL);
        }
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *uint64_t v9 = (float32x2_t)v10;
        v9[1] = v16;
        _DWORD v9[2] = v17;
        void v9[3] = v18;
        v9[4].f32[0] = v28;
        *(float32x2_t *)((char *)&v9[4] + 4) = (float32x2_t)0x3F80000000000000;
        v9 += 6;
      }
      uint64_t v287 = (void **)v9;
      ++v10;
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    }
    while (v10 < v7);
    if (v7) {
      goto LABEL_23;
    }
LABEL_26:
    float v41 = 0;
    uint64_t v268 = 0;
    goto LABEL_27;
  }
  uint64_t v9 = 0;
  if (!v7) {
    goto LABEL_26;
  }
LABEL_23:
  if (v7 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_252;
  }
  uint64_t v40 = 24 * v7;
  float v41 = (char *)operator new(24 * v7);
  size_t v42 = 24 * ((v40 - 24) / 0x18uLL) + 24;
  bzero(v41, v42);
  uint64_t v268 = &v41[v42];
LABEL_27:
  int8x16_t v43 = a4;
  unsigned int v283 = 0;
  uint64_t v284 = 0;
  uint64_t v285 = 0;
  long long v280 = 0;
  long long v281 = 0;
  uint64_t v282 = 0;
  float v44 = (float32x2_t *)v286;
  if (v286 == (void **)v9)
  {
LABEL_164:
    float32x2_t *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    std::vector<re::pathprocessing::Bezier2>::reserve((void **)v43, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
    if (a1[1] != *a1)
    {
      unint64_t v205 = 0;
      uint64_t v270 = v43 + 2;
      float v271 = v41;
      do
      {
        unint64_t v206 = (uint64_t *)&v41[24 * v205];
        uint64_t v207 = (float **)(v206 + 1);
        std::__sort<std::__less<float,float> &,float *>();
        float v208 = (float *)*v206;
        uint64_t v209 = (float *)v206[1];
        if ((float *)*v206 != v209)
        {
          int v210 = v208 + 1;
          while (v210 != v209)
          {
            float v211 = *(v210 - 1);
            float v212 = *v210++;
            if (v211 == v212)
            {
              uint64_t v213 = v210 - 2;
              while (v210 != v209)
              {
                float v214 = *v210;
                if (v211 != *v210)
                {
                  v213[1] = v214;
                  ++v213;
                  float v211 = v214;
                }
                ++v210;
              }
              uint64_t v215 = v213 + 1;
              goto LABEL_177;
            }
          }
        }
        uint64_t v215 = *v207;
LABEL_177:
        if (v209 != v215)
        {
          uint64_t v209 = v215;
          char *v207 = v215;
        }
        if (v209 != v208)
        {
          if (fabsf(*v208) < 0.0001)
          {
            int64_t v216 = (char *)v209 - (char *)(v208 + 1);
            if (v209 != v208 + 1) {
              memmove(v208, v208 + 1, (char *)v209 - (char *)(v208 + 1));
            }
            uint64_t v209 = (float *)((char *)v208 + v216);
            char *v207 = (float *)((char *)v208 + v216);
          }
          float v218 = *(v209 - 1);
          float32x2_t v217 = v209 - 1;
          float v219 = v218;
          if (v218 == 1.0 || fabsf(v219 + -1.0) <= 0.0001) {
            char *v207 = v217;
          }
        }
        re::pathprocessing::Bezier2::split((__n128 *)(*a1 + 24 * v205), v206, (__n128 **)__p);
        unsigned __int32 v220 = (char *)__p[0];
        int64_t v221 = (char *)__p[1] - (char *)__p[0];
        if ((char *)__p[1] - (char *)__p[0] < 1) {
          goto LABEL_222;
        }
        uint64_t v222 = v221 / 24;
        uint64_t v223 = (uint64_t)v43[1];
        uint64_t v224 = (v223 - (uint64_t)*v43) / 24;
        uint64_t v225 = &(*v43)[24 * v224];
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((*v270 - v223) >> 3)) < v221 / 24)
        {
          unint64_t v226 = v224 + v222;
          if ((unint64_t)(v224 + v222) > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_252;
          }
          if (0x5555555555555556 * ((uint64_t)(*v270 - (void)*v43) >> 3) > v226) {
            unint64_t v226 = 0x5555555555555556 * ((uint64_t)(*v270 - (void)*v43) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v270 - (void)*v43) >> 3) >= 0x555555555555555) {
            unint64_t v227 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v227 = v226;
          }
          if (v227)
          {
            int v228 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v270, v227);
            uint64_t v230 = v229;
          }
          else
          {
            int v228 = 0;
            uint64_t v230 = 0;
          }
          uint64_t v238 = &v228[24 * v224];
          char v239 = &v238[24 * v222];
          uint64_t v240 = 24 * v222;
          uint64_t v241 = v238;
          do
          {
            long long v242 = *(_OWORD *)v220;
            *((void *)v241 + 2) = *((void *)v220 + 2);
            *(_OWORD *)uint64_t v241 = v242;
            v241 += 24;
            v220 += 24;
            v240 -= 24;
          }
          while (v240);
          float v243 = *v43;
          if (*v43 == v225)
          {
            int32x2_t v246 = v238;
          }
          else
          {
            float32x2_t v244 = v225;
            do
            {
              long long v245 = *(_OWORD *)(v244 - 24);
              int32x2_t v246 = v238 - 24;
              *((void *)v238 - 1) = *((void *)v244 - 1);
              *(_OWORD *)(v238 - 24) = v245;
              v244 -= 24;
              v238 -= 24;
            }
            while (v244 != v243);
          }
          uint64_t v247 = v43[1];
          uint64_t v248 = v247 - v225;
          if (v247 != v225) {
            memmove(v239, v225, v247 - v225);
          }
          float v249 = *v43;
          float32x2_t *v43 = v246;
          v43[1] = &v239[v248];
          v43[2] = &v228[24 * v230];
          if (v249) {
            operator delete(v249);
          }
          goto LABEL_222;
        }
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v223 - (uint64_t)v225) >> 3)) >= v222)
        {
          uint64_t v231 = (char *)__p[0] + 24 * v222;
          long long v233 = v43[1];
          int8x16_t v43 = a4;
        }
        else
        {
          uint64_t v231 = (char *)__p[0] + 8 * ((v223 - (uint64_t)v225) >> 3);
          long long v232 = (char *)((char *)__p[1] - (char *)v231);
          if (__p[1] != v231) {
            memmove((void *)v223, (char *)__p[0] + 8 * ((v223 - (uint64_t)v225) >> 3), (char *)__p[1] - (char *)v231);
          }
          long long v233 = &v232[v223];
          a4[1] = &v232[v223];
          int8x16_t v43 = a4;
          if (v223 - (uint64_t)v225 < 1) {
            goto LABEL_222;
          }
        }
        unint64_t v234 = (unint64_t)&v233[-24 * v222];
        uint64_t v235 = v233;
        while (v234 < v223)
        {
          long long v236 = *(_OWORD *)v234;
          *((void *)v235 + 2) = *(void *)(v234 + 16);
          *(_OWORD *)uint64_t v235 = v236;
          v235 += 24;
          v234 += 24;
        }
        int v237 = &v225[24 * v222];
        v43[1] = v235;
        if (v233 != v237) {
          memmove(&v225[24 * v222], v225, v233 - v237);
        }
        if (v231 != v220) {
          memmove(v225, v220, v231 - v220);
        }
LABEL_222:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v205;
        float v41 = v271;
      }
      while (v205 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
    if (!a2) {
      goto LABEL_238;
    }
    uint64_t v251 = *a2;
    uint64_t v250 = a2[1];
    unint64_t v252 = (v250 - *a2) >> 3;
    std::vector<unsigned long>::resize((uint64_t)a3, v252);
    if (v250 == v251) {
      goto LABEL_238;
    }
    unint64_t v253 = 0;
    unint64_t v254 = 0;
    uint64_t v255 = 0;
    uint64_t v256 = *a2;
    uint64_t v257 = (a2[1] - *a2) >> 3;
    if (v252 <= 1) {
      uint64_t v258 = 1;
    }
    else {
      uint64_t v258 = v252;
    }
    while (v253 != v257)
    {
      unint64_t v259 = *(void *)(v256 + 8 * v253);
      unint64_t v260 = v259 - v254;
      if (v259 > v254)
      {
        unsigned int v261 = &v41[24 * v254 + 8];
        do
        {
          v255 += ((uint64_t)(*(void *)v261 - *((void *)v261 - 1)) >> 2) + 1;
          v261 += 24;
          --v260;
        }
        while (v260);
      }
      if (v253 >= (uint64_t)(a3[1] - *a3) >> 3) {
        break;
      }
      *(void *)(*a3 + 8 * v253++) = v255;
      unint64_t v254 = v259;
      if (v253 == v258) {
        goto LABEL_238;
      }
    }
LABEL_252:
    abort();
  }
  while (1)
  {
    std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>((unint64_t)v44, (float *)v9, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v44) >> 4)), 1);
    float v46 = (float32x2_t *)v286;
    int8x16_t v45 = v287;
    float v44 = (float32x2_t *)(v287 - 6);
    long long v48 = *((_OWORD *)v287 - 2);
    long long v47 = *((_OWORD *)v287 - 1);
    *(_OWORD *)long long __p = *((_OWORD *)v287 - 3);
    long long v278 = v48;
    long long v279 = v47;
    if (v287 - 6 != v286) {
      break;
    }
LABEL_83:
    uint64_t v9 = (float32x2_t *)(v45 - 6);
    uint64_t v287 = v45 - 6;
LABEL_162:
    if (v44 == v9)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      int8x16_t v43 = a4;
      goto LABEL_164;
    }
  }
  int v49 = v287 - 6;
  while (1)
  {
    float v50 = *(v49 - 6);
    v49 -= 6;
    if (__p[0] != v50 && re::pathprocessing::Bezier2::enclosingTriangleOverlaps((float32x2_t *)&__p[1], v44 - 5)) {
      break;
    }
    float v44 = (float32x2_t *)v49;
    if (v49 == (void **)v46)
    {
      float v44 = v46;
      break;
    }
  }
  if (v44 == (float32x2_t *)v286)
  {
    int8x16_t v45 = v287;
    goto LABEL_83;
  }
  long long v51 = *(_OWORD *)v44[-6].f32;
  long long v52 = *(_OWORD *)v44[-2].f32;
  v275[1] = *(_OWORD *)v44[-4].f32;
  long long v276 = v52;
  v275[0] = v51;
  re::pathprocessing::Bezier2::removeOverlaps((long long *)&__p[1], (_OWORD *)((char *)v275 + 8), &v283, (char **)&v280);
  int32x4_t v53 = (float *)v283;
  __int32 v54 = v284;
  if (v283 == v284 && v280 == v281) {
    goto LABEL_237;
  }
  if (v280 != v281)
  {
    float v55 = v44 - 6;
    unsigned __int16 v56 = (char *)((char *)v287 - (char *)&v55[6]);
    if (v287 != (void **)&v55[6])
    {
      memmove(v55, &v55[6], (size_t)(v56 - 4));
      int32x4_t v53 = (float *)v283;
      __int32 v54 = v284;
    }
    uint64_t v287 = (void **)&v56[(void)v55];
  }
  if (v53 != v54) {
    v287 -= 6;
  }
  float v58 = (float *)v280;
  char v57 = v281;
  if (v280 != v281)
  {
    do
    {
      float v59 = (float)(*((float *)&v276 + 2) * *v58) + (float)(*((float *)&v276 + 1) * (float)(1.0 - *v58));
      *float v58 = v59;
      __int32 v60 = &v41[24 * *(void *)&v275[0]];
      int v62 = (float **)(v60 + 8);
      float v61 = (float *)*((void *)v60 + 1);
      char v64 = v60 + 16;
      unint64_t v63 = *((void *)v60 + 2);
      if ((unint64_t)v61 >= v63)
      {
        uint64_t v66 = *(float **)v60;
        uint64_t v67 = ((uint64_t)v61 - *(void *)v60) >> 2;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62) {
          goto LABEL_252;
        }
        uint64_t v69 = v63 - (void)v66;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          float v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v64, v70);
          float v61 = *v62;
          uint64_t v66 = *(float **)v60;
          float v59 = *v58;
        }
        else
        {
          float v71 = 0;
        }
        uint64_t v72 = (float *)&v71[4 * v67];
        *uint64_t v72 = v59;
        uint64_t v65 = v72 + 1;
        while (v61 != v66)
        {
          int v73 = *((_DWORD *)v61-- - 1);
          *((_DWORD *)v72-- - 1) = v73;
        }
        *(void *)__int32 v60 = v72;
        *int v62 = v65;
        *char v64 = &v71[4 * v70];
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        *float v61 = v59;
        uint64_t v65 = v61 + 1;
      }
      *int v62 = v65;
      ++v58;
    }
    while (v58 != v57);
    float v74 = *((float *)&v276 + 1);
    float32x2_t v75 = (float *)v280;
    float32x2_t v76 = v281;
    float32x2_t v77 = (char *)v287;
    if (v280 != v281)
    {
      do
      {
        float v78 = v74;
        float v74 = *v75;
        uint64_t v79 = (float32x2_t *)(*a1 + 24 * *(void *)&v275[0]);
        *(void *)&long long v272 = *(void *)&v275[0];
        re::pathprocessing::Bezier2::curveBetween(v79, v78, v74, (float32x2_t *)&v272 + 1);
        float32x2_t v80 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
        float32x2_t v81 = vmul_f32(v80, v80);
        v81.i32[0] = vadd_f32(v81, (float32x2_t)vdup_lane_s32((int32x2_t)v81, 1)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x2_t v84 = vmul_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        float32x2_t v85 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
        float32x2_t v86 = vmul_f32(v85, v85);
        v86.i32[0] = vadd_f32(v86, (float32x2_t)vdup_lane_s32((int32x2_t)v86, 1)).u32[0];
        float32x2_t v87 = vrsqrte_f32((float32x2_t)v86.u32[0]);
        float32x2_t v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v87, v87)));
        *(void *)((char *)&v274 + 4) = __PAIR64__(LODWORD(v74), LODWORD(v78));
        *(float *)&long long v274 = (float)(vaddv_f32(vmul_f32(v84, vmul_n_f32(v85, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v88, v88))).f32[0])))* 0.5)+ 0.5;
        if (v77 >= (char *)v288)
        {
          uint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (char *)v286) >> 4);
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) > 0x555555555555555) {
            goto LABEL_252;
          }
          if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v92) {
            unint64_t v92 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v93 = 0x555555555555555;
          }
          else {
            unint64_t v93 = v92;
          }
          std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v93, v91, (uint64_t)&v288);
          unint64_t v94 = v291;
          *(_OWORD *)int64_t v291 = v272;
          *((_OWORD *)v94 + 1) = v273;
          *((_OWORD *)v94 + 2) = v274;
          float v95 = v286;
          float v96 = v287;
          unint64_t v97 = v290;
          if (v287 == v286)
          {
            float v95 = v287;
          }
          else
          {
            uint64_t v98 = v287;
            do
            {
              long long v99 = *((_OWORD *)v98 - 3);
              long long v100 = *((_OWORD *)v98 - 2);
              *(_OWORD *)((char *)v97 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)((char *)v98 - 20);
              *((_OWORD *)v97 - 3) = v99;
              *((_OWORD *)v97 - 2) = v100;
              v97 -= 6;
              v98 -= 6;
            }
            while (v98 != v95);
          }
          float32x2_t v77 = (char *)(v94 + 6);
          uint64_t v286 = v97;
          uint64_t v287 = v94 + 6;
          __int16 v101 = v288;
          int64x2_t v288 = v292;
          uint64_t v289 = v95;
          int64_t v291 = v96;
          unint64_t v292 = v101;
          uint64_t v290 = v95;
          if (v96 != v95) {
            int64_t v291 = (void **)((char *)v96 - 48 - 48 * (((char *)v96 - (char *)v95 - 48) / 0x30uLL));
          }
          if (v95) {
            operator delete(v95);
          }
        }
        else
        {
          long long v89 = v272;
          long long v90 = v274;
          *((_OWORD *)v77 + 1) = v273;
          *((_OWORD *)v77 + 2) = v90;
          *(_OWORD *)float32x2_t v77 = v89;
          v77 += 48;
        }
        uint64_t v287 = (void **)v77;
        ++v75;
      }
      while (v75 != v76);
    }
    unint64_t v102 = (float32x2_t *)(*a1 + 24 * *(void *)&v275[0]);
    unsigned int v103 = DWORD2(v276);
    *(void *)&long long v272 = *(void *)&v275[0];
    re::pathprocessing::Bezier2::curveBetween(v102, v74, *((float *)&v276 + 2), (float32x2_t *)&v272 + 1);
    float32x2_t v104 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
    float32x2_t v105 = vmul_f32(v104, v104);
    v105.i32[0] = vadd_f32(v105, (float32x2_t)vdup_lane_s32((int32x2_t)v105, 1)).u32[0];
    float32x2_t v106 = vrsqrte_f32((float32x2_t)v105.u32[0]);
    float32x2_t v107 = vmul_f32(v106, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v106, v106)));
    float32x2_t v108 = vmul_n_f32(v104, vmul_f32(v107, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v107, v107))).f32[0]);
    float32x2_t v109 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
    float32x2_t v110 = vmul_f32(v109, v109);
    v110.i32[0] = vadd_f32(v110, (float32x2_t)vdup_lane_s32((int32x2_t)v110, 1)).u32[0];
    float32x2_t v111 = vrsqrte_f32((float32x2_t)v110.u32[0]);
    float32x2_t v112 = vmul_f32(v111, vrsqrts_f32((float32x2_t)v110.u32[0], vmul_f32(v111, v111)));
    *(float *)&long long v274 = (float)(vaddv_f32(vmul_f32(v108, vmul_n_f32(v109, vmul_f32(v112, vrsqrts_f32((float32x2_t)v110.u32[0], vmul_f32(v112, v112))).f32[0])))* 0.5)+ 0.5;
    *(void *)((char *)&v274 + 4) = __PAIR64__(v103, LODWORD(v74));
    if (v77 >= (char *)v288)
    {
      uint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (char *)v286) >> 4);
      unint64_t v117 = v116 + 1;
      if ((unint64_t)(v116 + 1) > 0x555555555555555) {
        goto LABEL_252;
      }
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v117) {
        unint64_t v117 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v118 = 0x555555555555555;
      }
      else {
        unint64_t v118 = v117;
      }
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v118, v116, (uint64_t)&v288);
      long long v119 = v291;
      *(_OWORD *)int64_t v291 = v272;
      *((_OWORD *)v119 + 1) = v273;
      *((_OWORD *)v119 + 2) = v274;
      uint64_t v120 = v286;
      __n128 v121 = v287;
      float32x2_t v122 = v290;
      if (v287 == v286)
      {
        uint64_t v120 = v287;
      }
      else
      {
        unint64_t v123 = v287;
        do
        {
          long long v124 = *((_OWORD *)v123 - 3);
          long long v125 = *((_OWORD *)v123 - 2);
          *(_OWORD *)((char *)v122 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)((char *)v123 - 20);
          *((_OWORD *)v122 - 3) = v124;
          *((_OWORD *)v122 - 2) = v125;
          v122 -= 6;
          v123 -= 6;
        }
        while (v123 != v120);
      }
      uint64_t v115 = v119 + 6;
      uint64_t v286 = v122;
      uint64_t v287 = v119 + 6;
      int64_t v126 = v288;
      int64x2_t v288 = v292;
      uint64_t v289 = v120;
      int64_t v291 = v121;
      unint64_t v292 = v126;
      uint64_t v290 = v120;
      if (v121 != v120) {
        int64_t v291 = (void **)((char *)v121 - 48 - 48 * (((char *)v121 - (char *)v120 - 48) / 0x30uLL));
      }
      if (v120) {
        operator delete(v120);
      }
    }
    else
    {
      long long v113 = v272;
      long long v114 = v274;
      *((_OWORD *)v77 + 1) = v273;
      *((_OWORD *)v77 + 2) = v114;
      *(_OWORD *)float32x2_t v77 = v113;
      uint64_t v115 = (void **)(v77 + 48);
    }
    uint64_t v287 = v115;
    int32x4_t v53 = (float *)v283;
    __int32 v54 = v284;
  }
  if (v53 == v54)
  {
    uint64_t v9 = (float32x2_t *)v287;
LABEL_161:
    float v44 = (float32x2_t *)v286;
    goto LABEL_162;
  }
  do
  {
    float v127 = (float)(*((float *)&v279 + 2) * *v53) + (float)(*((float *)&v279 + 1) * (float)(1.0 - *v53));
    *int32x4_t v53 = v127;
    float v128 = &v41[24 * (uint64_t)__p[0]];
    long long v130 = (float **)(v128 + 8);
    size_t v129 = (float *)*((void *)v128 + 1);
    __n128 v132 = v128 + 16;
    unint64_t v131 = *((void *)v128 + 2);
    if ((unint64_t)v129 >= v131)
    {
      uint64_t v134 = *(float **)v128;
      uint64_t v135 = ((uint64_t)v129 - *(void *)v128) >> 2;
      unint64_t v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 62) {
        goto LABEL_252;
      }
      uint64_t v137 = v131 - (void)v134;
      if (v137 >> 1 > v136) {
        unint64_t v136 = v137 >> 1;
      }
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v138 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v138 = v136;
      }
      if (v138)
      {
        uint64_t v139 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v132, v138);
        size_t v129 = *v130;
        uint64_t v134 = *(float **)v128;
        float v127 = *v53;
      }
      else
      {
        uint64_t v139 = 0;
      }
      uint64_t v140 = (float *)&v139[4 * v135];
      float *v140 = v127;
      unint64_t v133 = v140 + 1;
      while (v129 != v134)
      {
        int v141 = *((_DWORD *)v129-- - 1);
        *((_DWORD *)v140-- - 1) = v141;
      }
      *(void *)float v128 = v140;
      *long long v130 = v133;
      void *v132 = &v139[4 * v138];
      if (v134) {
        operator delete(v134);
      }
    }
    else
    {
      *size_t v129 = v127;
      unint64_t v133 = v129 + 1;
    }
    *long long v130 = v133;
    ++v53;
  }
  while (v53 != v54);
  float v142 = *((float *)&v279 + 1);
  unint64_t v143 = (float *)v283;
  unint64_t v144 = v284;
  if (v283 == v284)
  {
    float v145 = *((float *)&v279 + 1);
LABEL_142:
    float v169 = *((float *)&v279 + 2);
    if (v145 >= *((float *)&v279 + 2)) {
      goto LABEL_237;
    }
    long long v170 = (float32x2_t *)(*a1 + 24 * (uint64_t)__p[0]);
    uint64_t v171 = (float32x2_t *)v287;
    if (v287 >= (void **)v288)
    {
      uint64_t v182 = 0xAAAAAAAAAAAAAAABLL * (((char *)v287 - (char *)v286) >> 4);
      unint64_t v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) > 0x555555555555555) {
        goto LABEL_252;
      }
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v183) {
        unint64_t v183 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v184 = 0x555555555555555;
      }
      else {
        unint64_t v184 = v183;
      }
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v272, v184, v182, (uint64_t)&v288);
      uint64_t v185 = (float32x2_t *)v273;
      float v186 = *((float *)&v279 + 2);
      *(void **)long long v273 = __p[0];
      re::pathprocessing::Bezier2::curveBetween(v170, v145, v186, v185 + 1);
      v185[5].f32[0] = v186;
      float32x2_t v187 = v185[2];
      float32x2_t v188 = vsub_f32(v185[1], v187);
      float32x2_t v189 = vmul_f32(v188, v188);
      v189.i32[0] = vadd_f32(v189, (float32x2_t)vdup_lane_s32((int32x2_t)v189, 1)).u32[0];
      float32x2_t v190 = vrsqrte_f32((float32x2_t)v189.u32[0]);
      float32x2_t v191 = vmul_f32(v190, vrsqrts_f32((float32x2_t)v189.u32[0], vmul_f32(v190, v190)));
      float32x2_t v192 = vmul_n_f32(v188, vmul_f32(v191, vrsqrts_f32((float32x2_t)v189.u32[0], vmul_f32(v191, v191))).f32[0]);
      float32x2_t v193 = vsub_f32(v185[3], v187);
      float32x2_t v194 = vmul_f32(v193, v193);
      v194.i32[0] = vadd_f32(v194, (float32x2_t)vdup_lane_s32((int32x2_t)v194, 1)).u32[0];
      float32x2_t v195 = vrsqrte_f32((float32x2_t)v194.u32[0]);
      float32x2_t v196 = vmul_f32(v195, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v195, v195)));
      v185[4].f32[0] = (float)(vaddv_f32(vmul_f32(v192, vmul_n_f32(v193, vmul_f32(v196, vrsqrts_f32((float32x2_t)v194.u32[0], vmul_f32(v196, v196))).f32[0])))* 0.5)+ 0.5;
      v185[4].f32[1] = v145;
      unsigned int v197 = v286;
      unsigned int v198 = v287;
      uint64_t v200 = (char *)*((void *)&v272 + 1);
      unint64_t v199 = (float32x2_t *)v273;
      if (v287 == v286)
      {
        unsigned int v197 = v287;
      }
      else
      {
        unint64_t v201 = v287;
        do
        {
          long long v202 = *((_OWORD *)v201 - 3);
          long long v203 = *((_OWORD *)v201 - 2);
          *(_OWORD *)(v200 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)((char *)v201 - 20);
          *((_OWORD *)v200 - 3) = v202;
          *((_OWORD *)v200 - 2) = v203;
          v200 -= 48;
          v201 -= 6;
        }
        while (v201 != v197);
      }
      uint64_t v9 = v199 + 6;
      uint64_t v286 = (void **)v200;
      uint64_t v287 = (void **)&v199[6];
      uint64_t v204 = v288;
      int64x2_t v288 = (float32x2_t *)*((void *)&v273 + 1);
      *(void *)&long long v273 = v198;
      *((void *)&v273 + 1) = v204;
      *(void *)&long long v272 = v197;
      *((void *)&v272 + 1) = v197;
      if (v198 != v197) {
        *(void *)&long long v273 = (char *)v198 - 48 - 48 * (((char *)v198 - (char *)v197 - 48) / 0x30uLL);
      }
      if (v197) {
        operator delete(v197);
      }
    }
    else
    {
      char *v287 = __p[0];
      re::pathprocessing::Bezier2::curveBetween(v170, v145, v169, v171 + 1);
      v171[5].f32[0] = v169;
      float32x2_t v172 = v171[2];
      float32x2_t v173 = vsub_f32(v171[1], v172);
      float32x2_t v174 = vmul_f32(v173, v173);
      v174.i32[0] = vadd_f32(v174, (float32x2_t)vdup_lane_s32((int32x2_t)v174, 1)).u32[0];
      float32x2_t v175 = vrsqrte_f32((float32x2_t)v174.u32[0]);
      float32x2_t v176 = vmul_f32(v175, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v175, v175)));
      v174.i32[0] = vmul_f32(v176, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v176, v176))).u32[0];
      float32x2_t v177 = vsub_f32(v171[3], v172);
      float32x2_t v178 = vmul_f32(v177, v177);
      float32x2_t v179 = vmul_n_f32(v173, v174.f32[0]);
      v174.i32[0] = vadd_f32(v178, (float32x2_t)vdup_lane_s32((int32x2_t)v178, 1)).u32[0];
      float32x2_t v180 = vrsqrte_f32((float32x2_t)v174.u32[0]);
      float32x2_t v181 = vmul_f32(v180, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v180, v180)));
      v171[4].f32[0] = (float)(vaddv_f32(vmul_f32(v179, vmul_n_f32(v177, vmul_f32(v181, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v181, v181))).f32[0])))* 0.5)+ 0.5;
      v171[4].f32[1] = v145;
      uint64_t v9 = v171 + 6;
    }
    uint64_t v287 = (void **)v9;
    goto LABEL_161;
  }
  while (1)
  {
    float v145 = *v143;
    if (*v143 <= v142) {
      break;
    }
    uint64_t v146 = (float32x2_t *)(*a1 + 24 * (uint64_t)__p[0]);
    *(void **)&long long v272 = __p[0];
    re::pathprocessing::Bezier2::curveBetween(v146, v142, v145, (float32x2_t *)&v272 + 1);
    float32x2_t v147 = vsub_f32(*(float32x2_t *)((char *)&v272 + 8), *(float32x2_t *)&v273);
    float32x2_t v148 = vmul_f32(v147, v147);
    v148.i32[0] = vadd_f32(v148, (float32x2_t)vdup_lane_s32((int32x2_t)v148, 1)).u32[0];
    float32x2_t v149 = vrsqrte_f32((float32x2_t)v148.u32[0]);
    float32x2_t v150 = vmul_f32(v149, vrsqrts_f32((float32x2_t)v148.u32[0], vmul_f32(v149, v149)));
    v148.i32[0] = vmul_f32(v150, vrsqrts_f32((float32x2_t)v148.u32[0], vmul_f32(v150, v150))).u32[0];
    float32x2_t v151 = vsub_f32(*(float32x2_t *)((char *)&v273 + 8), *(float32x2_t *)&v273);
    float32x2_t v152 = vmul_f32(v151, v151);
    v152.i32[0] = vadd_f32(v152, (float32x2_t)vdup_lane_s32((int32x2_t)v152, 1)).u32[0];
    float32x2_t v153 = vmul_n_f32(v147, v148.f32[0]);
    float32x2_t v154 = vrsqrte_f32((float32x2_t)v152.u32[0]);
    float32x2_t v155 = vmul_f32(v154, vrsqrts_f32((float32x2_t)v152.u32[0], vmul_f32(v154, v154)));
    *(void *)((char *)&v274 + 4) = __PAIR64__(LODWORD(v145), LODWORD(v142));
    *(float *)&long long v274 = (float)(vaddv_f32(vmul_f32(v153, vmul_n_f32(v151, vmul_f32(v155, vrsqrts_f32((float32x2_t)v152.u32[0], vmul_f32(v155, v155))).f32[0])))* 0.5)+ 0.5;
    uint64_t v156 = v287;
    if (v287 >= (void **)v288)
    {
      uint64_t v157 = 0xAAAAAAAAAAAAAAABLL * (((char *)v287 - (char *)v286) >> 4);
      unint64_t v158 = v157 + 1;
      if ((unint64_t)(v157 + 1) > 0x555555555555555) {
        goto LABEL_252;
      }
      if (0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4) > v158) {
        unint64_t v158 = 0x5555555555555556 * (((char *)v288 - (char *)v286) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v288 - (char *)v286) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v159 = 0x555555555555555;
      }
      else {
        unint64_t v159 = v158;
      }
      std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(&v289, v159, v157, (uint64_t)&v288);
      uint64_t v160 = v291;
      *(_OWORD *)int64_t v291 = v272;
      *((_OWORD *)v160 + 1) = v273;
      *((_OWORD *)v160 + 2) = v274;
      float v161 = v286;
      float v162 = v287;
      uint64_t v163 = v290;
      if (v287 == v286)
      {
        float v161 = v287;
      }
      else
      {
        int v164 = v287;
        do
        {
          long long v165 = *((_OWORD *)v164 - 3);
          long long v166 = *((_OWORD *)v164 - 2);
          *(_OWORD *)((char *)v163 - 2re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)((char *)v164 - 20);
          *((_OWORD *)v163 - 3) = v165;
          *((_OWORD *)v163 - 2) = v166;
          v163 -= 6;
          v164 -= 6;
        }
        while (v164 != v161);
      }
      float v167 = v160 + 6;
      uint64_t v286 = v163;
      uint64_t v287 = v160 + 6;
      uint64_t v168 = v288;
      int64x2_t v288 = v292;
      uint64_t v289 = v161;
      int64_t v291 = v162;
      unint64_t v292 = v168;
      uint64_t v290 = v161;
      if (v162 != v161) {
        int64_t v291 = (void **)((char *)v162 - 48 - 48 * (((char *)v162 - (char *)v161 - 48) / 0x30uLL));
      }
      if (v161) {
        operator delete(v161);
      }
      uint64_t v287 = v167;
    }
    else
    {
      *(_OWORD *)uint64_t v287 = v272;
      *((_OWORD *)v156 + 1) = v273;
      *((_OWORD *)v156 + 2) = v274;
      uint64_t v287 = v156 + 6;
    }
    ++v143;
    float v142 = v145;
    if (v143 == v144) {
      goto LABEL_142;
    }
  }
LABEL_237:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_238:
  if (v280)
  {
    long long v281 = (float *)v280;
    operator delete(v280);
  }
  if (v283)
  {
    uint64_t v284 = (float *)v283;
    operator delete(v283);
  }
  if (v41)
  {
    uint64_t v262 = v268;
    if (v268 != v41)
    {
      unint64_t v263 = v268;
      do
      {
        uint64_t v265 = (void *)*((void *)v263 - 3);
        v263 -= 24;
        unint64_t v264 = v265;
        if (v265)
        {
          *((void *)v262 - 2) = v264;
          operator delete(v264);
        }
        uint64_t v262 = v263;
      }
      while (v263 != v41);
    }
    operator delete(v41);
  }
  if (v286)
  {
    uint64_t v287 = v286;
    operator delete(v286);
  }
}

void re::pathprocessing::getBezierIslands(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float32x2_t v20 = 0;
  float32x2_t v21 = 0;
  uint64_t v22 = 0;
  memset(&v19, 0, sizeof(v19));
  re::pathprocessing::IndexedMesh::flatten(a1, (uint64_t *)&v20, &v19);
  re::pathprocessing::PathTopologyGenerator::getLoops((uint64_t *)&v20, (uint64_t *)&v19, a2, (uint64_t)v16);
  if (v16[0])
  {
    long long v6 = v17;
    if ((void)v17 == *((void *)&v17 + 1))
    {
LABEL_6:
      uint64_t v8 = v18[0];
      long long v17 = 0uLL;
      v18[0] = 0;
      *(unsigned char *)a3 = 1;
      *(_OWORD *)(a3 + 8) = v6;
      *(void *)(a3 + 24) = v8;
      uint64_t v13 = 0;
      long long v12 = 0uLL;
      float32x2_t v23 = (void **)&v12;
      std::vector<re::pathprocessing::BezierIslandInfo>::__destroy_vector::operator()[abi:nn180100](&v23);
    }
    else
    {
      unint64_t v7 = (void *)v17;
      while (*v7 != v7[1])
      {
        v7 += 6;
        if (v7 == *((void **)&v17 + 1)) {
          goto LABEL_6;
        }
      }
      long long v9 = v12;
      uint64_t v10 = v13;
      uint64_t v11 = v14;
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 4;
      *(void *)(a3 + 16) = &re::pathprocessing::PathProcessingErrorCategory(void)::instance;
      *(_OWORD *)(a3 + 24) = v9;
      *(void *)(a3 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v10;
      *(void *)(a3 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v11;
    }
  }
  else
  {
    long long v12 = v17;
    re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)v18);
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v12;
    *(void *)(a3 + 24) = v13;
    *(void *)(a3 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = v15;
    *(_OWORD *)(a3 + 32) = v14;
  }
  re::Result<std::vector<re::pathprocessing::BezierIslandInfo>,re::DetailedError>::~Result((uint64_t)v16);
  if (v19.__begin_)
  {
    v19.__end_ = v19.__begin_;
    operator delete(v19.__begin_);
  }
  if (v20)
  {
    float32x2_t v21 = v20;
    operator delete(v20);
  }
}

void *std::__split_buffer<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier,std::allocator<re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier> &>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(48 * a2);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>(unint64_t a1, float *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (float *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 4);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(a2 - 4) < v10[8])
                {
                  *(_OWORD *)uint64_t v134 = *((_OWORD *)v10 + 1);
                  *(_OWORD *)&v134[16] = *((_OWORD *)v10 + 2);
                  long long v125 = *(_OWORD *)v10;
                  long long v54 = *((_OWORD *)a2 - 3);
                  long long v55 = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 7) = *(_OWORD *)(a2 - 5);
                  *(_OWORD *)uint64_t v10 = v54;
                  *((_OWORD *)v10 + 1) = v55;
                  *(_OWORD *)(a2 - 5) = *(_OWORD *)&v134[12];
                  *((_OWORD *)a2 - 3) = v125;
                  *((_OWORD *)a2 - 2) = *(_OWORD *)v134;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v10, (long long *)v10 + 3, (long long *)a2 - 3);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((long long *)v10, (long long *)v10 + 3, (long long *)v10 + 6, (uint64_t)(a2 - 12));
                break;
              case 5uLL:
                unsigned __int16 v56 = (long long *)(v10 + 12);
                char v57 = (long long *)(v10 + 24);
                float v58 = (long long *)(v10 + 36);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((long long *)v10, (long long *)v10 + 3, (long long *)v10 + 6, (uint64_t)(v10 + 36));
                if (*(a2 - 4) < v10[44])
                {
                  *(_OWORD *)uint64_t v135 = *((_OWORD *)v10 + 10);
                  *(_OWORD *)&v135[16] = *((_OWORD *)v10 + 11);
                  long long v59 = *v58;
                  long long v61 = *((_OWORD *)a2 - 3);
                  long long v60 = *((_OWORD *)a2 - 2);
                  *(_OWORD *)(v10 + 43) = *(_OWORD *)(a2 - 5);
                  *float v58 = v61;
                  *((_OWORD *)v10 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v60;
                  *(_OWORD *)(a2 - 5) = *(_OWORD *)&v135[12];
                  *((_OWORD *)a2 - 3) = v59;
                  *((_OWORD *)a2 - 2) = *(_OWORD *)v135;
                  if (v10[44] < v10[32])
                  {
                    long long v62 = *v57;
                    *(_OWORD *)unint64_t v136 = *((_OWORD *)v10 + 7);
                    *(_OWORD *)&v136[16] = *((_OWORD *)v10 + 8);
                    long long v63 = *((_OWORD *)v10 + 10);
                    *char v57 = *v58;
                    *((_OWORD *)v10 + 7) = v63;
                    *(_OWORD *)(v10 + 31) = *(_OWORD *)(v10 + 43);
                    *float v58 = v62;
                    *((_OWORD *)v10 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = *(_OWORD *)v136;
                    *(_OWORD *)(v10 + 43) = *(_OWORD *)&v136[12];
                    if (v10[32] < v10[20])
                    {
                      long long v64 = *v56;
                      *(_OWORD *)uint64_t v137 = *((_OWORD *)v10 + 4);
                      *(_OWORD *)&v137[16] = *((_OWORD *)v10 + 5);
                      long long v65 = *((_OWORD *)v10 + 7);
                      *unsigned __int16 v56 = *v57;
                      *((_OWORD *)v10 + 4) = v65;
                      *(_OWORD *)(v10 + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)(v10 + 31);
                      *char v57 = v64;
                      *((_OWORD *)v10 + 7) = *(_OWORD *)v137;
                      *(_OWORD *)(v10 + 31) = *(_OWORD *)&v137[12];
                      if (v10[20] < v10[8])
                      {
                        *(_OWORD *)unint64_t v138 = *((_OWORD *)v10 + 1);
                        *(_OWORD *)&v138[16] = *((_OWORD *)v10 + 2);
                        long long v126 = *(_OWORD *)v10;
                        long long v66 = *((_OWORD *)v10 + 4);
                        *(_OWORD *)uint64_t v10 = *v56;
                        *((_OWORD *)v10 + 1) = v66;
                        *(_OWORD *)(v10 + 7) = *(_OWORD *)(v10 + 19);
                        *unsigned __int16 v56 = v126;
                        *((_OWORD *)v10 + 4) = *(_OWORD *)v138;
                        *(_OWORD *)(v10 + 1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(_OWORD *)&v138[12];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 1151)
          {
            uint64_t v67 = v10 + 12;
            BOOL v69 = v10 == a2 || v67 == a2;
            if (a4)
            {
              if (!v69)
              {
                uint64_t v70 = 0;
                float v71 = v10;
                do
                {
                  uint64_t v72 = v67;
                  float v73 = v71[20];
                  if (v73 < v71[8])
                  {
                    long long v127 = *(_OWORD *)v67;
                    long long v139 = *((_OWORD *)v67 + 1);
                    uint64_t v74 = *(void *)(v71 + 21);
                    uint64_t v75 = v70;
                    while (1)
                    {
                      float32x2_t v76 = (_OWORD *)((char *)v10 + v75);
                      long long v77 = *(_OWORD *)((char *)v10 + v75 + 16);
                      v76[3] = *(_OWORD *)((char *)v10 + v75);
                      float v76[4] = v77;
                      *(_OWORD *)((char *)v76 + 76) = *(_OWORD *)((char *)v10 + v75 + 28);
                      if (!v75) {
                        break;
                      }
                      v75 -= 48;
                      if (v73 >= *((float *)v76 - 4))
                      {
                        uint64_t v78 = (uint64_t)v10 + v75 + 48;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v78 = (uint64_t)v10;
LABEL_84:
                    *(_OWORD *)uint64_t v78 = v127;
                    *(_OWORD *)(v78 + 16) = v139;
                    *(float *)(v78 + 32) = v73;
                    *(void *)(v78 + 36) = v74;
                  }
                  uint64_t v67 = v72 + 12;
                  v70 += 48;
                  float v71 = v72;
                }
                while (v72 + 12 != a2);
              }
            }
            else if (!v69)
            {
              do
              {
                unint64_t v111 = (unint64_t)v67;
                float v112 = *(float *)(a1 + 80);
                if (v112 < *(float *)(a1 + 32))
                {
                  long long v130 = *(_OWORD *)v67;
                  long long v142 = *((_OWORD *)v67 + 1);
                  uint64_t v113 = *(void *)(a1 + 84);
                  do
                  {
                    long long v114 = *((_OWORD *)v67 - 2);
                    *(_OWORD *)uint64_t v67 = *((_OWORD *)v67 - 3);
                    *((_OWORD *)v67 + 1) = v114;
                    *(_OWORD *)(v67 + 7) = *(_OWORD *)(v67 - 5);
                    float v115 = *(v67 - 16);
                    v67 -= 12;
                  }
                  while (v112 < v115);
                  *(_OWORD *)uint64_t v67 = v130;
                  *((_OWORD *)v67 + 1) = v142;
                  v67[8] = v112;
                  *(void *)(v67 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v113;
                }
                uint64_t v67 = (float *)(v111 + 48);
                a1 = v111;
              }
              while ((float *)(v111 + 48) != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v79 = (v12 - 2) >> 1;
              int64_t v80 = v79;
              do
              {
                int64_t v81 = v80;
                if (v79 >= v80)
                {
                  uint64_t v82 = (2 * v80) | 1;
                  float32x2_t v83 = &v10[12 * v82];
                  if (2 * v81 + 2 < (uint64_t)v12 && v10[12 * v82 + 8] < v83[20])
                  {
                    v83 += 12;
                    uint64_t v82 = 2 * v81 + 2;
                  }
                  float v84 = v10[12 * v81 + 8];
                  if (v83[8] >= v84)
                  {
                    float32x2_t v85 = &v10[12 * v81];
                    long long v128 = *(_OWORD *)v85;
                    long long v140 = *((_OWORD *)v85 + 1);
                    uint64_t v86 = *(void *)(v85 + 9);
                    do
                    {
                      float32x2_t v87 = v85;
                      float32x2_t v85 = v83;
                      long long v88 = *(_OWORD *)v83;
                      long long v89 = *((_OWORD *)v83 + 1);
                      *(_OWORD *)(v87 + 7) = *(_OWORD *)(v83 + 7);
                      *(_OWORD *)float32x2_t v87 = v88;
                      *((_OWORD *)v87 + 1) = v89;
                      if (v79 < v82) {
                        break;
                      }
                      uint64_t v90 = (2 * v82) | 1;
                      float32x2_t v83 = &v10[12 * v90];
                      uint64_t v91 = 2 * v82 + 2;
                      if (v91 < (uint64_t)v12 && v10[12 * v90 + 8] < v83[20])
                      {
                        v83 += 12;
                        uint64_t v90 = v91;
                      }
                      uint64_t v82 = v90;
                    }
                    while (v83[8] >= v84);
                    *(_OWORD *)float32x2_t v85 = v128;
                    *((_OWORD *)v85 + 1) = v140;
                    v85[8] = v84;
                    *(void *)(v85 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v86;
                  }
                }
                int64_t v80 = v81 - 1;
              }
              while (v81);
              int64_t v92 = v11 / 0x30uLL;
              do
              {
                uint64_t v93 = 0;
                *(_OWORD *)int v141 = *((_OWORD *)v10 + 1);
                *(_OWORD *)&v141[16] = *((_OWORD *)v10 + 2);
                long long v129 = *(_OWORD *)v10;
                unint64_t v94 = v10;
                do
                {
                  float v95 = v94;
                  uint64_t v96 = v93 + 1;
                  v94 += 12 * v93 + 12;
                  uint64_t v97 = 2 * v93;
                  uint64_t v93 = (2 * v93) | 1;
                  int64_t v98 = v97 + 2;
                  if (v98 < v92 && v95[12 * v96 + 8] < v94[20])
                  {
                    v94 += 12;
                    uint64_t v93 = v98;
                  }
                  long long v99 = *(_OWORD *)v94;
                  long long v100 = *((_OWORD *)v94 + 1);
                  *(_OWORD *)(v95 + 7) = *(_OWORD *)(v94 + 7);
                  *(_OWORD *)float v95 = v99;
                  *((_OWORD *)v95 + 1) = v100;
                }
                while (v93 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
                a2 -= 12;
                if (v94 == a2)
                {
                  *(_OWORD *)(v94 + 7) = *(_OWORD *)&v141[12];
                  *(_OWORD *)unint64_t v94 = v129;
                  *((_OWORD *)v94 + 1) = *(_OWORD *)v141;
                }
                else
                {
                  long long v101 = *(_OWORD *)a2;
                  long long v102 = *((_OWORD *)a2 + 1);
                  *(_OWORD *)(v94 + 7) = *(_OWORD *)(a2 + 7);
                  *(_OWORD *)unint64_t v94 = v101;
                  *((_OWORD *)v94 + 1) = v102;
                  *(_OWORD *)(a2 + 7) = *(_OWORD *)&v141[12];
                  *(_OWORD *)a2 = v129;
                  *((_OWORD *)a2 + 1) = *(_OWORD *)v141;
                  uint64_t v103 = (char *)v94 - (char *)v10 + 48;
                  if (v103 >= 49)
                  {
                    unint64_t v104 = (v103 / 0x30uLL - 2) >> 1;
                    float v105 = v94[8];
                    if (v10[12 * v104 + 8] < v105)
                    {
                      long long v118 = *(_OWORD *)v94;
                      long long v121 = *((_OWORD *)v94 + 1);
                      uint64_t v106 = *(void *)(v94 + 9);
                      do
                      {
                        float32x2_t v107 = v94;
                        unint64_t v94 = &v10[12 * v104];
                        long long v108 = *(_OWORD *)v94;
                        long long v109 = *((_OWORD *)v94 + 1);
                        *(_OWORD *)(v107 + 7) = *(_OWORD *)(v94 + 7);
                        *(_OWORD *)float32x2_t v107 = v108;
                        *((_OWORD *)v107 + 1) = v109;
                        if (!v104) {
                          break;
                        }
                        unint64_t v104 = (v104 - 1) >> 1;
                      }
                      while (v10[12 * v104 + 8] < v105);
                      *(_OWORD *)unint64_t v94 = v118;
                      *((_OWORD *)v94 + 1) = v121;
                      v94[8] = v105;
                      *(void *)(v94 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v106;
                    }
                  }
                }
              }
              while (v92-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          long long v14 = (long long *)&v10[12 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x1801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((_OWORD *)a1, (long long *)(a1 + 48 * (v12 >> 1)), (long long *)a2 - 3);
            uint64_t v15 = 3 * v13;
            float32x2_t v16 = (long long *)(a1 + 48 * v13 - 48);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((_OWORD *)(a1 + 48), v16, (long long *)a2 - 6);
            long long v17 = (long long *)(a1 + 48 + 16 * v15);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((_OWORD *)(a1 + 96), v17, (long long *)a2 - 9);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v16, v14, v17);
            *(_OWORD *)unint64_t v131 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v131[16] = *(_OWORD *)(a1 + 32);
            long long v122 = *(_OWORD *)a1;
            long long v18 = *(long long *)((char *)v14 + 28);
            long long v19 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 28) = v18;
            *(long long *)((char *)v14 + 28) = *(_OWORD *)&v131[12];
            *long long v14 = v122;
            v14[1] = *(_OWORD *)v131;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((_OWORD *)(a1 + 48 * (v12 >> 1)), (long long *)a1, (long long *)a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          float v20 = *(float *)(a1 + 32);
          if (*(float *)(a1 - 16) < v20) {
            goto LABEL_12;
          }
          long long v117 = *(_OWORD *)a1;
          long long v120 = *(_OWORD *)(a1 + 16);
          if (v20 >= *(a2 - 4))
          {
            unint64_t v41 = a1 + 48;
            do
            {
              uint64_t v10 = (float *)v41;
              if (v41 >= (unint64_t)a2) {
                break;
              }
              float v42 = *(float *)(v41 + 32);
              v41 += 48;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              uint64_t v10 = (float *)(v39 + 48);
              float v40 = *(float *)(v39 + 80);
              v39 += 48;
            }
            while (v20 >= v40);
          }
          int8x16_t v43 = a2;
          if (v10 < a2)
          {
            float v44 = a2;
            do
            {
              int8x16_t v43 = v44 - 12;
              float v45 = *(v44 - 4);
              v44 -= 12;
            }
            while (v20 < v45);
          }
          uint64_t v46 = *(void *)(a1 + 36);
          while (v10 < v43)
          {
            *(_OWORD *)unint64_t v133 = *((_OWORD *)v10 + 1);
            *(_OWORD *)&v133[16] = *((_OWORD *)v10 + 2);
            long long v124 = *(_OWORD *)v10;
            long long v47 = *(_OWORD *)v43;
            long long v48 = *((_OWORD *)v43 + 1);
            *(_OWORD *)(v10 + 7) = *(_OWORD *)(v43 + 7);
            *(_OWORD *)uint64_t v10 = v47;
            *((_OWORD *)v10 + 1) = v48;
            *(_OWORD *)(v43 + 7) = *(_OWORD *)&v133[12];
            *(_OWORD *)int8x16_t v43 = v124;
            *((_OWORD *)v43 + 1) = *(_OWORD *)v133;
            do
            {
              float v49 = v10[20];
              v10 += 12;
            }
            while (v20 >= v49);
            do
            {
              float v50 = *(v43 - 4);
              v43 -= 12;
            }
            while (v20 < v50);
          }
          long long v51 = (long long *)(v10 - 12);
          BOOL v4 = (unint64_t)(v10 - 12) >= a1;
          BOOL v5 = v10 - 12 == (float *)a1;
          if (v10 - 12 != (float *)a1)
          {
            long long v52 = *v51;
            long long v53 = *((_OWORD *)v10 - 2);
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(v10 - 5);
            *(_OWORD *)a1 = v52;
            *(_OWORD *)(a1 + 16) = v53;
          }
          a4 = 0;
          long long *v51 = v117;
          *((_OWORD *)v10 - 2) = v120;
          *(v10 - 4) = v20;
          *(void *)(v10 - 3) = v46;
        }
        float v20 = *(float *)(a1 + 32);
LABEL_12:
        uint64_t v21 = 0;
        long long v116 = *(_OWORD *)a1;
        long long v119 = *(_OWORD *)(a1 + 16);
        uint64_t v22 = *(void *)(a1 + 36);
        do
        {
          float v23 = *(float *)(a1 + v21 + 80);
          v21 += 48;
        }
        while (v23 < v20);
        float32x2_t v24 = (float *)(a1 + v21);
        float32x2_t v25 = a2;
        if (v21 == 48)
        {
          float v28 = a2;
          while (v24 < v28)
          {
            float32x2_t v26 = v28 - 12;
            float v29 = *(v28 - 4);
            v28 -= 12;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          float32x2_t v26 = v28;
        }
        else
        {
          do
          {
            float32x2_t v26 = v25 - 12;
            float v27 = *(v25 - 4);
            v25 -= 12;
          }
          while (v27 >= v20);
        }
LABEL_22:
        uint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            *(_OWORD *)__n128 v132 = *((_OWORD *)v10 + 1);
            *(_OWORD *)&v132[16] = *((_OWORD *)v10 + 2);
            long long v123 = *(_OWORD *)v10;
            long long v31 = *(_OWORD *)v30;
            long long v32 = *((_OWORD *)v30 + 1);
            *(_OWORD *)(v10 + 7) = *(_OWORD *)(v30 + 7);
            *(_OWORD *)uint64_t v10 = v31;
            *((_OWORD *)v10 + 1) = v32;
            *(_OWORD *)(v30 + 7) = *(_OWORD *)&v132[12];
            *(_OWORD *)unint64_t v30 = v123;
            *((_OWORD *)v30 + 1) = *(_OWORD *)v132;
            do
            {
              float v33 = v10[20];
              v10 += 12;
            }
            while (v33 < v20);
            do
            {
              float v34 = *(v30 - 4);
              v30 -= 12;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        float v35 = (long long *)(v10 - 12);
        if (v10 - 12 != (float *)a1)
        {
          long long v36 = *v35;
          long long v37 = *((_OWORD *)v10 - 2);
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(v10 - 5);
          *(_OWORD *)a1 = v36;
          *(_OWORD *)(a1 + 16) = v37;
        }
        *float v35 = v116;
        *((_OWORD *)v10 - 2) = v119;
        *(v10 - 4) = v20;
        *(void *)(v10 - 3) = v22;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>(a1, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v38 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((long long *)a1, v10 - 12);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>((long long *)v10, a2))
      {
        break;
      }
      if (!v38) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 12;
    if (!v38) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(_OWORD *a1, long long *a2, long long *a3)
{
  result.n128_u32[0] = *((_DWORD *)a2 + 8);
  float v4 = *((float *)a3 + 8);
  if (result.n128_f32[0] >= *((float *)a1 + 8))
  {
    if (v4 < result.n128_f32[0])
    {
      long long v9 = *a2;
      *(_OWORD *)float v20 = a2[1];
      *(_OWORD *)&v20[16] = a2[2];
      long long v10 = *(long long *)((char *)a3 + 28);
      long long v11 = a3[1];
      *a2 = *a3;
      a2[1] = v11;
      *(long long *)((char *)a2 + 28) = v10;
      *a3 = v9;
      a3[1] = *(_OWORD *)v20;
      __n128 result = *(__n128 *)&v20[12];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v20[12];
      result.n128_u32[0] = *((_DWORD *)a2 + 8);
      if (result.n128_f32[0] < *((float *)a1 + 8))
      {
        long long v12 = *a1;
        *(_OWORD *)uint64_t v21 = a1[1];
        *(_OWORD *)&v21[16] = a1[2];
        long long v13 = *(long long *)((char *)a2 + 28);
        long long v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        *(_OWORD *)((char *)a1 + 28) = v13;
        *a2 = v12;
        a2[1] = *(_OWORD *)v21;
        __n128 result = *(__n128 *)&v21[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v21[12];
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f32[0])
    {
      long long v15 = *a1;
      *(_OWORD *)uint64_t v22 = a1[1];
      *(_OWORD *)&int v22[16] = a1[2];
      long long v16 = *(long long *)((char *)a2 + 28);
      long long v17 = a2[1];
      *a1 = *a2;
      a1[1] = v17;
      *(_OWORD *)((char *)a1 + 28) = v16;
      *a2 = v15;
      a2[1] = *(_OWORD *)v22;
      __n128 result = *(__n128 *)&v22[12];
      *(long long *)((char *)a2 + 28) = *(_OWORD *)&v22[12];
      result.n128_u32[0] = *((_DWORD *)a3 + 8);
      if (result.n128_f32[0] >= *((float *)a2 + 8)) {
        return result;
      }
      long long v5 = a2[1];
      long long v6 = *a2;
      *(_DWORD *)float v23 = HIDWORD(v5);
      *(_OWORD *)&v23[4] = a2[2];
      long long v18 = *(long long *)((char *)a3 + 28);
      long long v19 = a3[1];
      *a2 = *a3;
      a2[1] = v19;
      *(long long *)((char *)a2 + 28) = v18;
    }
    else
    {
      long long v5 = a1[1];
      long long v6 = *a1;
      *(_DWORD *)float v23 = HIDWORD(v5);
      *(_OWORD *)&v23[4] = a1[2];
      long long v7 = *(long long *)((char *)a3 + 28);
      long long v8 = a3[1];
      *a1 = *a3;
      a1[1] = v8;
      *(_OWORD *)((char *)a1 + 28) = v7;
    }
    *a3 = v6;
    a3[1] = v5;
    __n128 result = *(__n128 *)v23;
    *(long long *)((char *)a3 + 28) = *(_OWORD *)v23;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(long long *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 4) < *((float *)a1 + 8))
      {
        long long v6 = *a1;
        *(_OWORD *)long long v32 = a1[1];
        *(_OWORD *)&v32[16] = a1[2];
        long long v7 = *(_OWORD *)(a2 - 5);
        long long v8 = *((_OWORD *)a2 - 2);
        *a1 = *((_OWORD *)a2 - 3);
        a1[1] = v8;
        *(long long *)((char *)a1 + 28) = v7;
        *((_OWORD *)a2 - 3) = v6;
        *((_OWORD *)a2 - 2) = *(_OWORD *)v32;
        *(_OWORD *)(a2 - 5) = *(_OWORD *)&v32[12];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, (long long *)a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6, (uint64_t)(a2 - 12));
      return 1;
    case 5uLL:
      long long v19 = a1 + 3;
      float v20 = a1 + 6;
      uint64_t v21 = a1 + 9;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6, (uint64_t)(a1 + 9));
      if (*(a2 - 4) < *((float *)a1 + 44))
      {
        long long v22 = *v21;
        *(_OWORD *)float v34 = a1[10];
        *(_OWORD *)&v34[16] = a1[11];
        long long v23 = *(_OWORD *)(a2 - 5);
        long long v24 = *((_OWORD *)a2 - 2);
        *uint64_t v21 = *((_OWORD *)a2 - 3);
        a1[10] = v24;
        *(long long *)((char *)a1 + 172) = v23;
        *((_OWORD *)a2 - 3) = v22;
        *((_OWORD *)a2 - 2) = *(_OWORD *)v34;
        *(_OWORD *)(a2 - 5) = *(_OWORD *)&v34[12];
        if (*((float *)a1 + 44) < *((float *)a1 + 32))
        {
          long long v25 = *v20;
          *(_OWORD *)float v35 = a1[7];
          *(_OWORD *)&v35[16] = a1[8];
          long long v26 = a1[10];
          *float v20 = *v21;
          a1[7] = v26;
          *(long long *)((char *)a1 + 124) = *(long long *)((char *)a1 + 172);
          *uint64_t v21 = v25;
          a1[10] = *(_OWORD *)v35;
          *(long long *)((char *)a1 + 172) = *(_OWORD *)&v35[12];
          if (*((float *)a1 + 32) < *((float *)a1 + 20))
          {
            long long v27 = *v19;
            *(_OWORD *)long long v36 = a1[4];
            *(_OWORD *)&v36[16] = a1[5];
            long long v28 = a1[7];
            *long long v19 = *v20;
            a1[4] = v28;
            *(long long *)((char *)a1 + 76) = *(long long *)((char *)a1 + 124);
            *float v20 = v27;
            a1[7] = *(_OWORD *)v36;
            *(long long *)((char *)a1 + 124) = *(_OWORD *)&v36[12];
            if (*((float *)a1 + 20) < *((float *)a1 + 8))
            {
              long long v29 = *a1;
              *(_OWORD *)long long v37 = a1[1];
              *(_OWORD *)&v37[16] = a1[2];
              long long v30 = a1[4];
              *a1 = *v19;
              a1[1] = v30;
              *(long long *)((char *)a1 + 28) = *(long long *)((char *)a1 + 76);
              *long long v19 = v29;
              a1[4] = *(_OWORD *)v37;
              *(long long *)((char *)a1 + 76) = *(_OWORD *)&v37[12];
            }
          }
        }
      }
      return 1;
    default:
      long long v9 = (float *)(a1 + 6);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a1 + 3, a1 + 6);
      long long v10 = (float *)(a1 + 9);
      if (a1 + 9 == (long long *)a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = v10[8];
    if (v13 < v9[8])
    {
      long long v31 = *(_OWORD *)v10;
      long long v33 = *((_OWORD *)v10 + 1);
      uint64_t v14 = *(void *)(v10 + 9);
      uint64_t v15 = v11;
      while (1)
      {
        long long v16 = (char *)a1 + v15;
        long long v17 = *(long long *)((char *)a1 + v15 + 112);
        *((_OWORD *)v16 + re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = *(long long *)((char *)a1 + v15 + 96);
        *((_OWORD *)v16 + 1re::VariableStepTimer::setClock((uint64_t)this, 0) = v17;
        *(_OWORD *)(v16 + 172) = *(long long *)((char *)a1 + v15 + 124);
        if (v15 == -96) {
          break;
        }
        v15 -= 48;
        if (v13 >= *((float *)v16 + 20))
        {
          uint64_t v18 = (uint64_t)a1 + v15 + 144;
          goto LABEL_13;
        }
      }
      uint64_t v18 = (uint64_t)a1;
LABEL_13:
      *(_OWORD *)uint64_t v18 = v31;
      *(_OWORD *)(v18 + 16) = v33;
      *(float *)(v18 + 32) = v13;
      *(void *)(v18 + 36) = v14;
      if (++v12 == 8) {
        return v10 + 12 == a2;
      }
    }
    long long v9 = v10;
    v11 += 48;
    v10 += 12;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  __n128 result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, a2, a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 32);
  if (result.n128_f32[0] < *((float *)a3 + 8))
  {
    long long v9 = *a3;
    *(_OWORD *)uint64_t v18 = a3[1];
    *(_OWORD *)&v18[16] = a3[2];
    long long v10 = *(_OWORD *)(a4 + 28);
    long long v11 = *(_OWORD *)(a4 + 16);
    *a3 = *(_OWORD *)a4;
    a3[1] = v11;
    *(long long *)((char *)a3 + 28) = v10;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v18;
    __n128 result = *(__n128 *)&v18[12];
    *(_OWORD *)(a4 + 28) = *(_OWORD *)&v18[12];
    result.n128_u32[0] = *((_DWORD *)a3 + 8);
    if (result.n128_f32[0] < *((float *)a2 + 8))
    {
      long long v12 = *a2;
      *(_OWORD *)long long v19 = a2[1];
      *(_OWORD *)&v19[16] = a2[2];
      long long v13 = *(long long *)((char *)a3 + 28);
      long long v14 = a3[1];
      *a2 = *a3;
      a2[1] = v14;
      *(long long *)((char *)a2 + 28) = v13;
      *a3 = v12;
      a3[1] = *(_OWORD *)v19;
      __n128 result = *(__n128 *)&v19[12];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v19[12];
      result.n128_u32[0] = *((_DWORD *)a2 + 8);
      if (result.n128_f32[0] < *((float *)a1 + 8))
      {
        long long v15 = *a1;
        *(_OWORD *)float v20 = a1[1];
        *(_OWORD *)&v20[16] = a1[2];
        long long v16 = *(long long *)((char *)a2 + 28);
        long long v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        *(long long *)((char *)a1 + 28) = v16;
        *a2 = v15;
        a2[1] = *(_OWORD *)v20;
        __n128 result = *(__n128 *)&v20[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v20[12];
      }
    }
  }
  return result;
}

void re::pathprocessing::PathProcessingErrorCategoryImpl::~PathProcessingErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x237DBCBD0);
}

const char *re::pathprocessing::PathProcessingErrorCategoryImpl::name(re::pathprocessing::PathProcessingErrorCategoryImpl *this)
{
  return "PathProcessing error";
}

void *re::pathprocessing::PathProcessingErrorCategoryImpl::message@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 6) {
    uint64_t v3 = "Unknown PathProcessing error";
  }
  else {
    uint64_t v3 = off_264BE8930[a1];
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

BOOL re::pathprocessing::MathUtils::lexicographicalApproxLess(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = *a2;
  if (*a1 != *a2 && vabds_f32(v2, v3) > 0.0001
    || (BOOL v4 = 0, v5 = a1[1], v6 = a2[1], v5 != v6) && vabds_f32(v5, v6) > 0.0001)
  {
    BOOL v4 = v2 < v3;
    if (v2 == v3) {
      return a1[1] < a2[1];
    }
  }
  return v4;
}

void re::pathprocessing::convertPolylineToGeoMath(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v9 = (v7 - *a1) >> 3;
  std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)a2, v6 + v9);
  std::vector<std::vector<unsigned long>>::resize(a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) + 1);
  uint64_t v10 = a3[1];
  std::vector<unsigned long>::resize(v10 - 24, v9 + 1);
  if (v7 != v8)
  {
    uint64_t v11 = 0;
    if (v9 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v9;
    }
    uint64_t v13 = 24 * v6;
    do
    {
      uint64_t v14 = *a2 + v13;
      *(float64x2_t *)uint64_t v14 = vcvtq_f64_f32(*(float32x2_t *)(*a1 + 8 * v11));
      *(void *)(v14 + 16) = 0;
      *(void *)(*(void *)(v10 - 24) + 8 * v11) = v6 + v11;
      ++v11;
      v13 += 24;
    }
    while (v12 != v11);
  }
  *(void *)(*(void *)(v10 - 16) - 8) = v6;
}

void re::pathprocessing::triangulateIndexed(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  float v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v70 = 0;
  float v71 = 0;
  uint64_t v72 = 0;
  uint64_t v67 = 0;
  unint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)long long __p = 0u;
  long long v42 = 0u;
  LOBYTE(v43) = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  int v54 = 1065353216;
  int v60 = 1065353216;
  memset(v61, 0, sizeof(v61));
  int v62 = 1065353216;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(&v43, (uint64_t)&__p[1]);
  if (__p[1])
  {
    *(void **)&long long v42 = __p[1];
    operator delete(__p[1]);
  }
  re::pathprocessing::convertPolylineToGeoMath(*(uint64_t **)a1, &v67, &v64);
  BOOL v4 = *(uint64_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) >= 2)
  {
    unint64_t v5 = 1;
    uint64_t v6 = 3;
    do
    {
      re::pathprocessing::convertPolylineToGeoMath(&v4[v6], &v67, &v64);
      ++v5;
      BOOL v4 = *(uint64_t **)a1;
      v6 += 3;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  if (v67 != v68)
  {
    LOBYTE(v43) = 0;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(&v43, (uint64_t)&v67);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v61[3], v64, v65, 0xAAAAAAAAAAAAAAABLL * ((v65 - v64) >> 3));
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v61, 0, 0, 0);
    if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43)
      && geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43))
    {
      if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43, 1))
      {
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43, &v73, (uint64_t)&v70);
        uint64_t v7 = v70;
        if (v71 != v70)
        {
          unint64_t v8 = 0;
          unint64_t v9 = (char **)(a2 + 2);
          uint64_t v10 = (char *)a2[1];
          do
          {
            uint64_t v11 = &v7[12 * v8];
            uint64_t v12 = *v9;
            if (v10 >= *v9)
            {
              uint64_t v14 = (char *)*a2;
              uint64_t v15 = (uint64_t)&v10[-*a2] >> 2;
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) >> 62) {
                goto LABEL_68;
              }
              uint64_t v17 = v12 - v14;
              if (v17 >> 1 > v16) {
                unint64_t v16 = v17 >> 1;
              }
              if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v18 = v16;
              }
              if (v18)
              {
                long long v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v18);
                uint64_t v14 = (char *)*a2;
                uint64_t v10 = (char *)a2[1];
              }
              else
              {
                long long v19 = 0;
              }
              float v20 = &v19[4 * v15];
              *(_DWORD *)float v20 = *(_DWORD *)v11;
              uint64_t v13 = v20 + 4;
              while (v10 != v14)
              {
                int v21 = *((_DWORD *)v10 - 1);
                v10 -= 4;
                *((_DWORD *)v20 - 1) = v21;
                v20 -= 4;
              }
              uint64_t v12 = &v19[4 * v18];
              *a2 = v20;
              a2[1] = v13;
              a2[2] = v12;
              if (v14)
              {
                operator delete(v14);
                uint64_t v12 = *v9;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
              uint64_t v13 = v10 + 4;
            }
            a2[1] = v13;
            long long v22 = &v70[12 * v8 + 4];
            if (v13 >= v12)
            {
              long long v24 = (char *)*a2;
              uint64_t v25 = (uint64_t)&v13[-*a2] >> 2;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 62) {
                goto LABEL_68;
              }
              uint64_t v27 = v12 - v24;
              if (v27 >> 1 > v26) {
                unint64_t v26 = v27 >> 1;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v28);
                long long v24 = (char *)*a2;
                uint64_t v13 = (char *)a2[1];
              }
              else
              {
                long long v29 = 0;
              }
              long long v30 = &v29[4 * v25];
              *(_DWORD *)long long v30 = *(_DWORD *)v22;
              long long v23 = v30 + 4;
              while (v13 != v24)
              {
                int v31 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v30 - 1) = v31;
                v30 -= 4;
              }
              uint64_t v12 = &v29[4 * v28];
              *a2 = v30;
              a2[1] = v23;
              a2[2] = v12;
              if (v24)
              {
                operator delete(v24);
                uint64_t v12 = *v9;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = *(_DWORD *)v22;
              long long v23 = v13 + 4;
            }
            a2[1] = v23;
            long long v32 = &v70[12 * v8 + 8];
            if (v23 >= v12)
            {
              long long v33 = (char *)*a2;
              uint64_t v34 = (uint64_t)&v23[-*a2] >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
LABEL_68:
              }
                abort();
              uint64_t v36 = v12 - v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                BOOL v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a2 + 2), v37);
                long long v33 = (char *)*a2;
                long long v23 = (char *)a2[1];
              }
              else
              {
                BOOL v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = *(_DWORD *)v32;
              uint64_t v10 = v39 + 4;
              while (v23 != v33)
              {
                int v40 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *a2 = v39;
              a2[1] = v10;
              a2[2] = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)long long v23 = *(_DWORD *)v32;
              uint64_t v10 = v23 + 4;
            }
            a2[1] = v10;
            ++v8;
            uint64_t v7 = v70;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 2) > v8);
        }
      }
    }
  }
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)&v43);
  int8x16_t v43 = (void **)v63;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v43);
  int8x16_t v43 = (void **)&v64;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v43);
  if (v67)
  {
    unint64_t v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    float v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    uint64_t v74 = v73;
    operator delete(v73);
  }
}

uint64_t re::pathprocessing::LineSegment::rangeOverlaps(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  int v37 = 0;
  int v39 = 0;
  float v36 = a3;
  float v38 = a4;
  float v40 = a5;
  int v41 = 1;
  int v43 = 1;
  float v42 = a6;
  std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(&v36, (float *)&v44, 4, 1);
  float v12 = v38;
  float v13 = v40;
  if (v39 == v41)
  {
LABEL_6:
    if (a1)
    {
      float v15 = 0.0;
      float v16 = 0.0;
      if (v38 != a3)
      {
        float v16 = 0.0;
        if (vabds_f32(a3, v38) > 0.0001)
        {
          float v16 = 1.0;
          if (v38 != a4 && vabds_f32(a4, v38) > 0.0001)
          {
            float v17 = (float)(v38 - a3) / (float)(a4 - a3);
            float v16 = 0.0;
            if (fabsf(v17) >= 0.0001)
            {
              if (fabsf(v17 + -1.0) <= 0.0001 || v17 == 1.0) {
                float v16 = 1.0;
              }
              else {
                float v16 = (float)(v38 - a3) / (float)(a4 - a3);
              }
            }
          }
        }
      }
      uint64_t v19 = *(void *)(a1 + 8);
      *(float *)(a1 + 4 * v1re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = v16;
      if (v13 != a3 && vabds_f32(a3, v13) > 0.0001)
      {
        float v15 = 1.0;
        if (v13 != a4 && vabds_f32(a4, v13) > 0.0001)
        {
          float v20 = (float)(v13 - a3) / (float)(a4 - a3);
          float v15 = 0.0;
          if (fabsf(v20) >= 0.0001)
          {
            float v15 = 1.0;
            if (fabsf(v20 + -1.0) > 0.0001 && v20 != 1.0) {
              float v15 = (float)(v13 - a3) / (float)(a4 - a3);
            }
          }
        }
      }
      *(void *)(a1 + 8) = v19 + 2;
      *(float *)(a1 + 4 * (v19 + 1)) = v15;
    }
    if (!a2) {
      return 1;
    }
    float v22 = 0.0;
    float v23 = 0.0;
    if (v12 != a5)
    {
      float v23 = 0.0;
      if (vabds_f32(a5, v12) > 0.0001)
      {
        float v23 = 1.0;
        if (v12 != a6 && vabds_f32(a6, v12) > 0.0001)
        {
          float v24 = (float)(v12 - a5) / (float)(a6 - a5);
          float v23 = 0.0;
          if (fabsf(v24) >= 0.0001)
          {
            if (fabsf(v24 + -1.0) <= 0.0001 || v24 == 1.0) {
              float v23 = 1.0;
            }
            else {
              float v23 = v24;
            }
          }
        }
      }
    }
    uint64_t v26 = *(void *)(a2 + 8);
    uint64_t v27 = v26 + 1;
    *(float *)(a2 + 4 * v26) = v23;
    uint64_t result = 1;
    if (v13 != a5 && vabds_f32(a5, v13) > 0.0001)
    {
      if (v13 == a6 || vabds_f32(a6, v13) <= 0.0001)
      {
        float v22 = 1.0;
      }
      else
      {
        float v28 = (float)(v13 - a5) / (float)(a6 - a5);
        if (fabsf(v28) >= 0.0001)
        {
          if (fabsf(v28 + -1.0) <= 0.0001 || v28 == 1.0) {
            float v22 = 1.0;
          }
          else {
            float v22 = v28;
          }
        }
      }
    }
    goto LABEL_79;
  }
  if (v38 != v40 && vabds_f32(v38, v40) > 0.0001)
  {
    if (v37 == v39) {
      return 0;
    }
    goto LABEL_6;
  }
  if (a1)
  {
    float v30 = 0.0;
    if (v38 != a3 && vabds_f32(a3, v38) > 0.0001)
    {
      float v30 = 1.0;
      if (v38 != a4 && vabds_f32(a4, v38) > 0.0001)
      {
        float v31 = (float)(v38 - a3) / (float)(a4 - a3);
        float v30 = 0.0;
        if (fabsf(v31) >= 0.0001)
        {
          float v30 = 1.0;
          if (fabsf(v31 + -1.0) > 0.0001 && v31 != 1.0) {
            float v30 = (float)(v38 - a3) / (float)(a4 - a3);
          }
        }
      }
    }
    uint64_t v33 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v33 + 1;
    *(float *)(a1 + 4 * v33) = v30;
  }
  if (a2)
  {
    float v22 = 0.0;
    if (v12 != a5 && vabds_f32(a5, v12) > 0.0001)
    {
      float v22 = 1.0;
      if (v12 != a6 && vabds_f32(a6, v12) > 0.0001)
      {
        float v34 = (float)(v12 - a5) / (float)(a6 - a5);
        float v22 = 0.0;
        if (fabsf(v34) >= 0.0001)
        {
          if (fabsf(v34 + -1.0) <= 0.0001 || v34 == 1.0) {
            float v22 = 1.0;
          }
          else {
            float v22 = v34;
          }
        }
      }
    }
    uint64_t v27 = *(void *)(a2 + 8);
    uint64_t result = 2;
LABEL_79:
    *(void *)(a2 + 8) = v27 + 1;
    *(float *)(a2 + 4 * v27) = v22;
    return result;
  }
  return 2;
}

uint64_t re::pathprocessing::LineSegment::intersect(float32x2_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = a1 + 1;
  float32x2_t v5 = a1[1];
  float32x2_t v6 = *a1;
  float32x2_t v29 = vsub_f32(v5, *a1);
  int32x2_t v7 = (int32x2_t)vsub_f32(*a2, v6);
  unint64_t v8 = a2 + 1;
  int32x2_t v9 = (int32x2_t)vsub_f32(a2[1], v6);
  float32x2_t v10 = vabd_f32(v5, v6);
  unsigned __int8 v11 = vmvn_s8((int8x8_t)vcge_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1))).u8[0];
  float v12 = (const float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  float32x2_t v13 = vld1_dup_f32(v12);
  float32x2_t v14 = vdiv_f32(v29, v13);
  int32x2_t v15 = (int32x2_t)vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32(v7, v9), -v14.f32[1]), (float32x2_t)vzip2_s32(v7, v9), v14.f32[0]);
  float v16 = fabsf(*(float *)v15.i32);
  float v17 = fabsf(*(float *)&v15.i32[1]);
  if (v17 >= 0.0001
    && v16 >= 0.0001
    && (veor_s8((int8x8_t)vdup_lane_s32(v15, 1), (int8x8_t)v15).u32[0] & 0x80000000) == 0)
  {
    return 0;
  }
  uint64_t v19 = v11 & 1;
  if (v16 < 0.0001 && v17 < 0.0001) {
    return re::pathprocessing::LineSegment::rangeOverlaps(a3, a4, a1->f32[v19], v4->f32[v19], a2->f32[v19], v8->f32[v19]);
  }
  BOOL v20 = v16 < 0.0001;
  float v21 = 0.0;
  if (!v20)
  {
    float v21 = 1.0;
    if (v17 >= 0.0001) {
      float v21 = *(float *)v15.i32 / (float)(*(float *)v15.i32 - *(float *)&v15.i32[1]);
    }
  }
  float v22 = (float)((float)((float)(v21 * v8->f32[v19]) + (float)(a2->f32[v19] * (float)(1.0 - v21))) - a1->f32[v19])
      / (float)(v4->f32[v19] - a1->f32[v19]);
  if (v22 < -0.0001) {
    return 0;
  }
  BOOL v23 = v22 == 1.0;
  if (fabsf(v22 + -1.0) <= 0.0001) {
    BOOL v23 = 1;
  }
  if (v22 > 1.0 && !v23) {
    return 0;
  }
  if (a3)
  {
    float v25 = fabsf(v22);
    if (v23) {
      float v22 = 1.0;
    }
    float v26 = 0.0;
    if (v25 >= 0.0001) {
      float v26 = v22;
    }
    uint64_t v27 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v27 + 1;
    *(float *)(a3 + 4 * v27) = v26;
  }
  if (a4)
  {
    uint64_t v28 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v28 + 1;
    *(float *)(a4 + 4 * v28) = v21;
  }
  return 2;
}

float *std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 2) < *(float *)v10)
                {
                  uint64_t v37 = *(void *)v10;
                  *(void *)unint64_t v10 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v37;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v10, (float *)(v10 + 8), a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (void *)a2 - 1);
                break;
              case 5uLL:
                float v38 = (float *)(v10 + 16);
                int v39 = (uint64_t *)(v10 + 24);
                uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v10, (float *)(v10 + 8), (float *)(v10 + 16), (void *)(v10 + 24));
                if (*(a2 - 2) < *(float *)(v10 + 24))
                {
                  uint64_t v40 = *v39;
                  *int v39 = *((void *)a2 - 1);
                  *((void *)a2 - 1) = v40;
                  if (*(float *)v39 < *v38)
                  {
                    uint64_t v41 = *(void *)v38;
                    uint64_t v42 = *v39;
                    *(void *)float v38 = *v39;
                    *int v39 = v41;
                    if (*(float *)(v10 + 8) > *(float *)&v42)
                    {
                      uint64_t v43 = *(void *)(v10 + 8);
                      *(void *)(v10 + 8) = v42;
                      *(void *)(v10 + 16) = v43;
                      if (*(float *)v10 > *(float *)&v42)
                      {
                        uint64_t v44 = *(void *)v10;
                        *(void *)unint64_t v10 = v42;
                        *(void *)(v10 + 8) = v44;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v45 = (float *)(v10 + 8);
            BOOL v47 = (float *)v10 == a2 || v45 == a2;
            if (a4)
            {
              if (!v47)
              {
                uint64_t v48 = 0;
                unint64_t v49 = v10;
                do
                {
                  long long v50 = v45;
                  float v51 = *(float *)(v49 + 8);
                  if (v51 < *(float *)v49)
                  {
                    int v52 = *(_DWORD *)(v49 + 12);
                    uint64_t v53 = v48;
                    while (1)
                    {
                      *(void *)(v10 + v53 + 8) = *(void *)(v10 + v53);
                      if (!v53) {
                        break;
                      }
                      float v54 = *(float *)(v10 + v53 - 8);
                      v53 -= 8;
                      if (v54 <= v51)
                      {
                        uint64_t v55 = v10 + v53 + 8;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v55 = v10;
LABEL_83:
                    *(float *)uint64_t v55 = v51;
                    *(_DWORD *)(v55 + 4) = v52;
                  }
                  long long v45 = v50 + 2;
                  v48 += 8;
                  unint64_t v49 = (unint64_t)v50;
                }
                while (v50 + 2 != a2);
              }
            }
            else if (!v47)
            {
              do
              {
                unint64_t v81 = (unint64_t)v45;
                float v82 = *(float *)(v9 + 8);
                if (v82 < *(float *)v9)
                {
                  int v83 = *(_DWORD *)(v9 + 12);
                  do
                  {
                    float v84 = v45;
                    uint64_t v85 = *((void *)v45 - 1);
                    v45 -= 2;
                    *(void *)float v84 = v85;
                  }
                  while (*(v84 - 4) > v82);
                  float *v45 = v82;
                  *((_DWORD *)v45 + 1) = v83;
                }
                long long v45 = (float *)(v81 + 8);
                unint64_t v9 = v81;
              }
              while ((float *)(v81 + 8) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((float *)v10 != a2)
            {
              int64_t v56 = (v12 - 2) >> 1;
              int64_t v57 = v56;
              do
              {
                int64_t v58 = v57;
                if (v56 >= v57)
                {
                  uint64_t v59 = (2 * v57) | 1;
                  int v60 = (float *)(v10 + 8 * v59);
                  if (2 * v58 + 2 < (uint64_t)v12 && *v60 < v60[2])
                  {
                    v60 += 2;
                    uint64_t v59 = 2 * v58 + 2;
                  }
                  long long v61 = (float *)(v10 + 8 * v58);
                  float v62 = *v61;
                  if (*v60 >= *v61)
                  {
                    int v63 = *((_DWORD *)v61 + 1);
                    do
                    {
                      uint64_t v64 = v61;
                      long long v61 = v60;
                      *(void *)uint64_t v64 = *(void *)v60;
                      if (v56 < v59) {
                        break;
                      }
                      uint64_t v65 = 2 * v59;
                      uint64_t v59 = (2 * v59) | 1;
                      int v60 = (float *)(v10 + 8 * v59);
                      uint64_t v66 = v65 + 2;
                      if (v66 < (uint64_t)v12 && *v60 < v60[2])
                      {
                        v60 += 2;
                        uint64_t v59 = v66;
                      }
                    }
                    while (*v60 >= v62);
                    *long long v61 = v62;
                    *((_DWORD *)v61 + 1) = v63;
                  }
                }
                int64_t v57 = v58 - 1;
              }
              while (v58);
              uint64_t v67 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v68 = 0;
                uint64_t v69 = *(void *)v10;
                uint64_t v70 = (float *)v10;
                do
                {
                  float v71 = v70;
                  v70 += 2 * v68 + 2;
                  uint64_t v72 = 2 * v68;
                  uint64_t v68 = (2 * v68) | 1;
                  uint64_t v73 = v72 + 2;
                  if (v73 < v67 && *v70 < v70[2])
                  {
                    v70 += 2;
                    uint64_t v68 = v73;
                  }
                  *(void *)float v71 = *(void *)v70;
                }
                while (v68 <= (uint64_t)((unint64_t)(v67 - 2) >> 1));
                a2 -= 2;
                if (v70 == a2)
                {
                  *(void *)uint64_t v70 = v69;
                }
                else
                {
                  *(void *)uint64_t v70 = *(void *)a2;
                  *(void *)a2 = v69;
                  uint64_t v74 = (uint64_t)v70 - v10 + 8;
                  if (v74 >= 9)
                  {
                    unint64_t v75 = (((unint64_t)v74 >> 3) - 2) >> 1;
                    float32x2_t v76 = (float *)(v10 + 8 * v75);
                    float v77 = *v70;
                    if (*v76 < *v70)
                    {
                      int v78 = *((_DWORD *)v70 + 1);
                      do
                      {
                        int64_t v79 = v70;
                        uint64_t v70 = v76;
                        *(void *)int64_t v79 = *(void *)v76;
                        if (!v75) {
                          break;
                        }
                        unint64_t v75 = (v75 - 1) >> 1;
                        float32x2_t v76 = (float *)(v10 + 8 * v75);
                      }
                      while (*v76 < v77);
                      float *v70 = v77;
                      *((_DWORD *)v70 + 1) = v78;
                    }
                  }
                }
              }
              while (v67-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          float32x2_t v14 = (float *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)v9, (float *)(v9 + 8 * (v12 >> 1)), a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v9 + 8), v14 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v9 + 16), (float *)(v9 + 8 + 8 * v13), a2 - 6);
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v14 - 2, v14, (float *)(v9 + 8 + 8 * v13));
            uint64_t v15 = *(void *)v9;
            *(void *)unint64_t v9 = *(void *)v14;
            *(void *)float32x2_t v14 = v15;
          }
          else
          {
            uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)(v9 + 8 * (v12 >> 1)), (float *)v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v16 = *(float *)v9;
          if (*(float *)(v9 - 8) < *(float *)v9) {
            goto LABEL_13;
          }
          if (*(a2 - 2) <= v16)
          {
            unint64_t v30 = v9 + 8;
            do
            {
              unint64_t v10 = v30;
              if (v30 >= (unint64_t)a2) {
                break;
              }
              v30 += 8;
            }
            while (*(float *)v10 <= v16);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              float v29 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (v29 <= v16);
          }
          float v31 = a2;
          if (v10 < (unint64_t)a2)
          {
            float v31 = a2;
            do
            {
              float v32 = *(v31 - 2);
              v31 -= 2;
            }
            while (v32 > v16);
          }
          int v33 = *(_DWORD *)(v9 + 4);
          while (v10 < (unint64_t)v31)
          {
            uint64_t v34 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v31;
            *(void *)float v31 = v34;
            do
            {
              float v35 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (v35 <= v16);
            do
            {
              float v36 = *(v31 - 2);
              v31 -= 2;
            }
            while (v36 > v16);
          }
          BOOL v4 = v10 - 8 >= v9;
          BOOL v5 = v10 - 8 == v9;
          if (v10 - 8 != v9) {
            *(void *)unint64_t v9 = *(void *)(v10 - 8);
          }
          a4 = 0;
          *(float *)(v10 - 8) = v16;
          *(_DWORD *)(v10 - 4) = v33;
        }
        float v16 = *(float *)v9;
LABEL_13:
        uint64_t v17 = 0;
        int v18 = *(_DWORD *)(v9 + 4);
        do
        {
          float v19 = *(float *)(v9 + v17 + 8);
          v17 += 8;
        }
        while (v19 < v16);
        unint64_t v20 = v9 + v17;
        float v21 = a2;
        if (v17 == 8)
        {
          float v21 = a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            float v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            float v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v16);
        }
        unint64_t v10 = v9 + v17;
        if (v20 < (unint64_t)v21)
        {
          float v24 = v21;
          do
          {
            uint64_t v25 = *(void *)v10;
            *(void *)unint64_t v10 = *(void *)v24;
            *(void *)float v24 = v25;
            do
            {
              float v26 = *(float *)(v10 + 8);
              v10 += 8;
            }
            while (v26 < v16);
            do
            {
              float v27 = *(v24 - 2);
              v24 -= 2;
            }
            while (v27 >= v16);
          }
          while (v10 < (unint64_t)v24);
        }
        if (v10 - 8 != v9) {
          *(void *)unint64_t v9 = *(void *)(v10 - 8);
        }
        *(float *)(v10 - 8) = v16;
        *(_DWORD *)(v10 - 4) = v18;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_32:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *,false>(v9, v10 - 8, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v9, v10 - 8);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(v10, (uint64_t)a2);
      if (result) {
        break;
      }
      if (!v28) {
        goto LABEL_32;
      }
    }
    a2 = (float *)(v10 - 8);
    if (!v28) {
      continue;
    }
    return result;
  }
}

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(float *result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      uint64_t v6 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v6;
      if (*a2 < *result)
      {
        uint64_t v7 = *(void *)result;
        *(void *)uint64_t result = *(void *)a2;
        *(void *)a2 = v7;
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)result;
    if (v4 >= v3)
    {
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v5;
      if (*a3 >= *(float *)&v5) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
    }
    else
    {
      *(void *)uint64_t result = *(void *)a3;
    }
    *(void *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      float v16 = (float *)(a1 + 16);
      uint64_t v17 = (uint64_t *)(a1 + 24);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a1 + 24));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        uint64_t v18 = *v17;
        *uint64_t v17 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v18;
        if (*(float *)v17 < *v16)
        {
          uint64_t v19 = *(void *)v16;
          uint64_t v20 = *v17;
          *(void *)float v16 = *v17;
          *uint64_t v17 = v19;
          if (*(float *)(a1 + 8) > *(float *)&v20)
          {
            uint64_t v21 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = v20;
            *(void *)(a1 + 16) = v21;
            if (*(float *)a1 > *(float *)&v20)
            {
              uint64_t v22 = *(void *)a1;
              *(void *)a1 = v20;
              *(void *)(a1 + 8) = v22;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = (float *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      uint64_t v15 = a1;
LABEL_13:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    uint64_t v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

float *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(float *a1, float *a2, float *a3, void *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::$_0 &,re::pathprocessing::findOverlapRangeAbsoluteValue(float,float,float,float)::Node *>(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

void CGImageDecoderFinalize(uint64_t a1)
{
  float v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  float v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t __CGImageDecoderTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CGImageDecoderTypeID_id = result;
  return result;
}

const void *CGPerspectiveCommandsDecode(const __CFData *a1)
{
  if (!a1) {
    return 0;
  }
  float v2 = (const void *)CGPerspectiveCommandsCreate();
  if ((CGPerspectiveCommandsDecodeFromData((uint64_t)v2, a1, 0) & 1) == 0 && v2)
  {
    CFRelease(v2);
    return 0;
  }
  return v2;
}

void CGPerspectiveColorCacheRelease(CFTypeRef *a1)
{
  CFRelease(*a1);
  CFRelease(a1[1]);
  CFRelease(a1[2]);
  free(a1);
}

uint64_t CGPerspectiveColorCacheDecodeCGColor(uint64_t a1, CGColorRef *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  CGFloat v30 = NAN;
  uint64_t result = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v30, 8uLL);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(__CFDictionary ***)(a1 + 48);
  CFDictionaryRef v6 = *v5;
  valuePtr.a = v30;
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberCFIndexType, &valuePtr);
  CFDictionaryRef Value = (CGColorRef *)CFDictionaryGetValue(v6, v7);
  CFRelease(v7);
  if (Value)
  {
    *a2 = CGColorRetain(Value[3]);
    return 1;
  }
  CGColorSpaceRef space = 0;
  uint64_t result = DecodeCGColorSpace(a1, &space);
  if (!result) {
    return result;
  }
  unint64_t v28 = 0;
  uint64_t result = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v28, 8uLL);
  if (!result) {
    return result;
  }
  if (v28 < 0x101)
  {
    size_t v11 = 8 * v28;
    int v12 = malloc_type_calloc(8 * v28, 1uLL, 0xF5ACDC3uLL);
    uint64_t result = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), v12, v11);
    if (!result) {
      return result;
    }
    uint64_t v13 = *(void *)(a1 + 16);
    LOBYTE(valuePtr.a) = 0;
    if (!CGPerspectiveDataDecode_bytes(v13, &valuePtr, 1uLL)) {
      return 0;
    }
    if (!LOBYTE(valuePtr.a))
    {
      uint64_t v17 = space;
      CGColorRef v18 = CGColorCreate(space, (const CGFloat *)v12);
      goto LABEL_29;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    LOBYTE(valuePtr.a) = 0;
    if (CGPerspectiveDataDecode_bytes(v14, &valuePtr, 1uLL))
    {
      int a_low = LOBYTE(valuePtr.a);
      CGPatternTiling tiling = kCGPatternTilingNoDistortion;
      float v16 = 0;
      if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &tiling, 4uLL)
        || tiling > kCGPatternTilingConstantSpacing)
      {
        goto LABEL_28;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      if (CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &valuePtr, 0x30uLL))
      {
        if (a_low)
        {
          image.origin.x = 0.0;
          if (DecodeCGImage(a1, (CGImageRef *)&image))
          {
            if (*(void *)&image.origin.x)
            {
              CGAffineTransform matrix = valuePtr;
              float v16 = (CGPattern *)CGPatternCreateWithImage2();
              CGImageRelease(*(CGImageRef *)&image.origin.x);
LABEL_28:
              uint64_t v17 = space;
              CGColorRef v18 = CGColorCreateWithPattern(space, v16, (const CGFloat *)v12);
              CGPatternRelease(v16);
LABEL_29:
              free(v12);
              CGColorSpaceRelease(v17);
              if (v18)
              {
                SetDecodeCacheEntry(*v5, *(uint64_t *)&v30, v18);
                *a2 = v18;
                return 1;
              }
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
                uint64_t v9 = __CGPerspectiveOSLog_log;
                uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                uint64_t v9 = __CGPerspectiveOSLog_log;
                uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!result) {
                  return result;
                }
              }
              LOWORD(valuePtr.a) = 0;
              uint64_t v10 = "Fatal: Failed to create color";
              goto LABEL_11;
            }
            if (__CGPerspectiveOSLog_onceToken != -1)
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              uint64_t v23 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_27;
              }
              goto LABEL_42;
            }
            uint64_t v23 = __CGPerspectiveOSLog_log;
            if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            {
LABEL_42:
              LOWORD(matrix.a) = 0;
              float v24 = "Expected image was missing";
LABEL_50:
              p_CGAffineTransform matrix = &matrix;
              float v26 = v23;
              uint32_t v27 = 2;
LABEL_58:
              _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, v24, (uint8_t *)p_matrix, v27);
            }
LABEL_27:
            float v16 = 0;
            goto LABEL_28;
          }
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            uint64_t v19 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            uint64_t v19 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
          }
          LODWORD(matrix.a) = 136315650;
          *(void *)((char *)&matrix.a + 4) = "Failed to decode image";
          WORD2(matrix.b) = 2080;
          *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveConte"
                                               "xt/CGPerspectiveContext/CGPerspectiveColorCache.c";
          HIWORD(matrix.c) = 1024;
          LODWORD(matrix.d) = 767;
          float v24 = "%s in file %s (line %i)";
        }
        else
        {
          memset(&image, 0, sizeof(image));
          if (CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &image, 0x20uLL))
          {
            CGFloat v32 = 0.0;
            CGFloat v33 = 0.0;
            if (CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v32, 0x10uLL))
            {
              uint64_t v20 = *(void *)(a1 + 16);
              LOBYTE(matrix.a) = 0;
              if (CGPerspectiveDataDecode_bytes(v20, &matrix, 1uLL))
              {
                int v21 = LOBYTE(matrix.a);
                CFTypeRef cf = 0;
                if (CGPerspectiveDataDecode_CFData(*(void *)(a1 + 16), (__CFData **)&cf))
                {
                  uint64_t v22 = (void *)CGPerspectiveCommandsDecode(cf);
                  CFRelease(cf);
                  if (v22)
                  {
                    CGAffineTransform matrix = valuePtr;
                    float v16 = CGPatternCreate(v22, image, &matrix, v32, v33, tiling, v21 != 0, &DecodeCGPattern_callbacks);
                    goto LABEL_28;
                  }
                  if (__CGPerspectiveOSLog_onceToken == -1)
                  {
                    uint64_t v23 = __CGPerspectiveOSLog_log;
                    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_27;
                    }
                  }
                  else
                  {
                    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                    uint64_t v23 = __CGPerspectiveOSLog_log;
                    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_27;
                    }
                  }
                  LOWORD(matrix.a) = 0;
                  float v24 = "Invalid embedded commands";
                  goto LABEL_50;
                }
                if (__CGPerspectiveOSLog_onceToken == -1)
                {
                  uint64_t v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                  uint64_t v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                }
                LODWORD(matrix.a) = 136315650;
                *(void *)((char *)&matrix.a + 4) = "Invalid embedded commands";
                WORD2(matrix.b) = 2080;
                *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiv"
                                                     "eContext/CGPerspectiveContext/CGPerspectiveColorCache.c";
                HIWORD(matrix.c) = 1024;
                LODWORD(matrix.d) = 789;
                float v24 = "%s in file %s (line %i)";
              }
              else
              {
                if (__CGPerspectiveOSLog_onceToken == -1)
                {
                  uint64_t v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                  uint64_t v19 = __CGPerspectiveOSLog_log;
                  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_27;
                  }
                }
                LODWORD(matrix.a) = 136315650;
                *(void *)((char *)&matrix.a + 4) = "Invalid BOOL";
                WORD2(matrix.b) = 2080;
                *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiv"
                                                     "eContext/CGPerspectiveContext/CGPerspectiveColorCache.c";
                HIWORD(matrix.c) = 1024;
                LODWORD(matrix.d) = 786;
                float v24 = "%s in file %s (line %i)";
              }
            }
            else
            {
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
                uint64_t v19 = __CGPerspectiveOSLog_log;
                if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_27;
                }
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                uint64_t v19 = __CGPerspectiveOSLog_log;
                if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_27;
                }
              }
              LODWORD(matrix.a) = 136315650;
              *(void *)((char *)&matrix.a + 4) = "Invalid step";
              WORD2(matrix.b) = 2080;
              *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveC"
                                                   "ontext/CGPerspectiveContext/CGPerspectiveColorCache.c";
              HIWORD(matrix.c) = 1024;
              LODWORD(matrix.d) = 783;
              float v24 = "%s in file %s (line %i)";
            }
          }
          else
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              uint64_t v19 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_27;
              }
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              uint64_t v19 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_27;
              }
            }
            LODWORD(matrix.a) = 136315650;
            *(void *)((char *)&matrix.a + 4) = "Invalid bounds";
            WORD2(matrix.b) = 2080;
            *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveCon"
                                                 "text/CGPerspectiveContext/CGPerspectiveColorCache.c";
            HIWORD(matrix.c) = 1024;
            LODWORD(matrix.d) = 780;
            float v24 = "%s in file %s (line %i)";
          }
        }
      }
      else
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v19 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v19 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_27;
          }
        }
        LODWORD(matrix.a) = 136315650;
        *(void *)((char *)&matrix.a + 4) = "Invalid transform";
        WORD2(matrix.b) = 2080;
        *(void *)((char *)&matrix.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext"
                                             "/CGPerspectiveContext/CGPerspectiveColorCache.c";
        HIWORD(matrix.c) = 1024;
        LODWORD(matrix.d) = 763;
        float v24 = "%s in file %s (line %i)";
      }
      p_CGAffineTransform matrix = &matrix;
    }
    else
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v19 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v19 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_27;
        }
      }
      LODWORD(valuePtr.a) = 136315650;
      *(void *)((char *)&valuePtr.a + 4) = "Invalid flag";
      WORD2(valuePtr.b) = 2080;
      *(void *)((char *)&valuePtr.b + 6) = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext"
                                             "/CGPerspectiveContext/CGPerspectiveColorCache.c";
      HIWORD(valuePtr.c) = 1024;
      LODWORD(valuePtr.d) = 757;
      float v24 = "%s in file %s (line %i)";
      p_CGAffineTransform matrix = &valuePtr;
    }
    float v26 = v19;
    uint32_t v27 = 28;
    goto LABEL_58;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    uint64_t v9 = __CGPerspectiveOSLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_10:
      LOWORD(valuePtr.a) = 0;
      uint64_t v10 = "Negative or large color component count";
LABEL_11:
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&valuePtr, 2u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    uint64_t v9 = __CGPerspectiveOSLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (result) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t DecodeCGColorSpace(uint64_t a1, CGColorSpaceRef *a2)
{
  uint64_t v34 = -1;
  uint64_t result = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v34, 8uLL);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    CFDictionaryRef v6 = *(const __CFDictionary **)(v5 + 8);
    uint64_t valuePtr = v34;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberCFIndexType, &valuePtr);
    CFDictionaryRef Value = (CGColorSpaceRef *)CFDictionaryGetValue(v6, v8);
    CFRelease(v8);
    if (Value)
    {
      *a2 = CGColorSpaceRetain(Value[3]);
      return 1;
    }
    char v33 = 0;
    BOOL v10 = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v33, 1uLL);
    uint64_t result = 0;
    if (v10)
    {
      if (v33 != -1)
      {
        switch(v33)
        {
          case 0:
            size_t v11 = (const __CFString **)MEMORY[0x263F00248];
            goto LABEL_64;
          case 1:
            size_t v11 = (const __CFString **)MEMORY[0x263F00260];
            goto LABEL_64;
          case 2:
            size_t v11 = (const __CFString **)MEMORY[0x263F00240];
            goto LABEL_64;
          case 3:
            size_t v11 = (const __CFString **)MEMORY[0x263F001E8];
            goto LABEL_64;
          case 4:
            size_t v11 = (const __CFString **)MEMORY[0x263F00268];
            goto LABEL_64;
          case 5:
            size_t v11 = (const __CFString **)MEMORY[0x263F001D8];
            goto LABEL_64;
          case 6:
            size_t v11 = (const __CFString **)MEMORY[0x263F002D8];
            goto LABEL_64;
          case 7:
            size_t v11 = (const __CFString **)MEMORY[0x263F00250];
            goto LABEL_64;
          case 8:
            size_t v11 = (const __CFString **)MEMORY[0x263F00270];
            goto LABEL_64;
          case 9:
            size_t v11 = (const __CFString **)MEMORY[0x263F00258];
            goto LABEL_64;
          case 10:
            size_t v11 = (const __CFString **)MEMORY[0x263F001D0];
            goto LABEL_64;
          case 11:
            size_t v11 = (const __CFString **)MEMORY[0x263F00298];
            goto LABEL_64;
          case 12:
            size_t v11 = (const __CFString **)MEMORY[0x263F002A8];
            goto LABEL_64;
          case 13:
            size_t v11 = (const __CFString **)MEMORY[0x263F002A0];
            goto LABEL_64;
          case 14:
            size_t v11 = (const __CFString **)MEMORY[0x263F00278];
            goto LABEL_64;
          case 15:
            size_t v11 = (const __CFString **)MEMORY[0x263F00280];
            goto LABEL_64;
          case 16:
            size_t v11 = (const __CFString **)MEMORY[0x263F002D0];
            goto LABEL_64;
          case 17:
            size_t v11 = (const __CFString **)MEMORY[0x263F001E0];
            goto LABEL_64;
          case 18:
            size_t v11 = (const __CFString **)MEMORY[0x263F00210];
            goto LABEL_64;
          case 19:
            size_t v11 = (const __CFString **)MEMORY[0x263F00228];
            goto LABEL_64;
          case 20:
            size_t v11 = (const __CFString **)MEMORY[0x263F00200];
            goto LABEL_64;
          case 21:
            size_t v11 = (const __CFString **)MEMORY[0x263F00218];
            goto LABEL_64;
          case 22:
            size_t v11 = (const __CFString **)MEMORY[0x263F00290];
            goto LABEL_64;
          case 23:
            size_t v11 = (const __CFString **)MEMORY[0x263F00288];
            goto LABEL_64;
          case 24:
            size_t v11 = (const __CFString **)MEMORY[0x263F001F8];
            goto LABEL_64;
          case 25:
            size_t v11 = (const __CFString **)MEMORY[0x263F001F0];
            goto LABEL_64;
          case 26:
            size_t v11 = (const __CFString **)MEMORY[0x263F00238];
            goto LABEL_64;
          case 27:
            size_t v11 = (const __CFString **)MEMORY[0x263F002C8];
            goto LABEL_64;
          case 28:
            size_t v11 = (const __CFString **)MEMORY[0x263F00230];
            goto LABEL_64;
          case 29:
            size_t v11 = (const __CFString **)MEMORY[0x263F00208];
            goto LABEL_64;
          case 30:
            size_t v11 = (const __CFString **)MEMORY[0x263F002B8];
            goto LABEL_64;
          case 31:
            size_t v11 = (const __CFString **)MEMORY[0x263F00220];
LABEL_64:
            CFStringRef v21 = *v11;
            break;
          default:
            CFStringRef v21 = 0;
            break;
        }
        CGColorSpaceRef v22 = CGColorSpaceCreateWithName(v21);
        *a2 = v22;
        SetDecodeCacheEntry(*(__CFDictionary **)(v5 + 8), v34, v22);
        return 1;
      }
      int v32 = -1;
      CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v32, 4uLL);
      uint64_t valuePtr = 0;
      if (v32 == 6)
      {
        uint64_t v15 = *(void *)(a1 + 16);
        LOBYTE(data) = 0;
        if (!CGPerspectiveDataDecode_bytes(v15, &data, 1uLL)) {
          return 0;
        }
        int v16 = data;
        CFDataRef data = 0;
        if (v16)
        {
          uint64_t result = DecodeCGColorSpace(a1, &data);
          if (!result) {
            return result;
          }
          uint64_t v17 = data;
        }
        else
        {
          uint64_t v17 = 0;
        }
        Patteruint64_t n = CGColorSpaceCreatePattern(v17);
        uint64_t valuePtr = (uint64_t)Pattern;
        CGColorSpaceRelease(v17);
      }
      else if (v32 == 5)
      {
        CFDataRef data = 0;
        if ((DecodeCGColorSpace(a1, &data) & 1) == 0) {
          return 0;
        }
        unsigned int v30 = 0;
        if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v30, 4uLL)) {
          return 0;
        }
        if (v30 >= 0x101)
        {
          if (__CGPerspectiveOSLog_onceToken != -1)
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            int v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              return 0;
            }
            goto LABEL_17;
          }
          int v12 = __CGPerspectiveOSLog_log;
          if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
          {
LABEL_17:
            *(_WORD *)float v29 = 0;
            uint64_t v13 = "Out of bounds color count";
LABEL_18:
            p_CFDataRef data = v29;
LABEL_79:
            _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v13, p_data, 2u);
          }
          return 0;
        }
        uint64_t v23 = data;
        unsigned int NumberOfComponents = CGColorSpaceGetNumberOfComponents(data);
        if (NumberOfComponents >= 0x101uLL)
        {
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            uint64_t v25 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
            {
LABEL_69:
              CGColorSpaceRelease(v23);
              return 0;
            }
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            uint64_t v25 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_69;
            }
          }
          *(_WORD *)float v29 = 0;
          _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "Negative or large color component count", v29, 2u);
          goto LABEL_69;
        }
        size_t v26 = v30 * NumberOfComponents;
        uint32_t v27 = (unsigned __int8 *)malloc_type_calloc(v26, 1uLL, 0xB0CA1E17uLL);
        if (!v27)
        {
          if (__CGPerspectiveOSLog_onceToken == -1)
          {
            int v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              return 0;
            }
          }
          else
          {
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            int v12 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              return 0;
            }
          }
          *(_WORD *)float v29 = 0;
          uint64_t v13 = "Failed to allocate buffer for color table.";
          goto LABEL_18;
        }
        unint64_t v28 = v27;
        if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), v27, v26)) {
          return 0;
        }
        Patteruint64_t n = CGColorSpaceCreateIndexed(v23, v30 - 1, v28);
        uint64_t valuePtr = (uint64_t)Pattern;
        CGColorSpaceRelease(v23);
        free(v28);
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 16);
        LOBYTE(data) = 0;
        if (!CGPerspectiveDataDecode_bytes(v18, &data, 1uLL)) {
          return 0;
        }
        if ((_BYTE)data)
        {
          CFDataRef data = 0;
          uint64_t result = CGPerspectiveDataDecode_CFData(*(void *)(a1 + 16), &data);
          if (!result) {
            return result;
          }
          CFPropertyListRef v19 = CFPropertyListCreateWithData(v7, data, 0, 0, 0);
          CFRelease(data);
          if (v19)
          {
            Patteruint64_t n = CGColorSpaceCreateWithPropertyList(v19);
            uint64_t valuePtr = (uint64_t)Pattern;
            CFRelease(v19);
          }
          else
          {
            Patteruint64_t n = 0;
          }
        }
        else
        {
          uint64_t result = DecodeCGColorSpace(a1, &valuePtr);
          if (!result) {
            return result;
          }
          Patteruint64_t n = (CGColorSpaceRef)valuePtr;
        }
      }
      if (Pattern)
      {
        SetDecodeCacheEntry(*(__CFDictionary **)(v5 + 8), v34, Pattern);
        *a2 = Pattern;
        return 1;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        int v12 = __CGPerspectiveOSLog_log;
        uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (result)
        {
LABEL_78:
          LOWORD(data) = 0;
          uint64_t v13 = "Failed to decode color space";
          p_CFDataRef data = (uint8_t *)&data;
          goto LABEL_79;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        int v12 = __CGPerspectiveOSLog_log;
        uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_78;
        }
      }
    }
  }
  return result;
}

void CacheEntryFinalize(uint64_t a1)
{
  unint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t __CacheEntryTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  _MergedGlobals_505 = result;
  return result;
}

void SetDecodeCacheEntry(__CFDictionary *a1, uint64_t a2, const void *a3)
{
  uint64_t valuePtr = a2;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberCFIndexType, &valuePtr);
  uint64_t v6 = valuePtr;
  if (qword_26AF9F9A8 != -1) {
    dispatch_once(&qword_26AF9F9A8, &__block_literal_global_52);
  }
  Instance = (void *)_CFRuntimeCreateInstance();
  Instance[2] = v6;
  Instance[3] = CFRetain(a3);
  CFDictionarySetValue(a1, v5, Instance);
  CFRelease(Instance);
  CFRelease(v5);
}

void _drawPatternCallback(uint64_t a1, CGContext *a2)
{
}

void _releaseInfoCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

__CFString *CGPerspectiveCommandsCreateDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CGPerspectiveCommandsAppendDebugDesc(Mutable, a1);
  return Mutable;
}

void CGPerspectiveCommandsAppendDebugDesc(__CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v87 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  CFIndex v4 = CFArrayGetCount(*(CFArrayRef *)(v2 + 64));
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  CGColorSpaceRef v7 = CGColorSpaceRetain(*(CGColorSpaceRef *)(v2 + 48));
  CFStringRef v8 = CFCopyDescription(v7);
  CGColorSpaceRelease(v7);
  int v9 = *(_DWORD *)(v2 + 80);
  if (v8) {
    BOOL v10 = (__CFString *)v8;
  }
  else {
    BOOL v10 = @"none";
  }
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  if (v9) {
    size_t v11 = "has deep color content";
  }
  else {
    size_t v11 = "no deep color content";
  }
  long long v81 = 0uLL;
  long long v82 = 0uLL;
  long long v79 = 0uLL;
  long long v80 = 0uLL;
  long long v77 = 0uLL;
  long long v78 = 0uLL;
  long long v75 = 0uLL;
  long long v76 = 0uLL;
  long long v73 = 0uLL;
  long long v74 = 0uLL;
  long long v71 = 0uLL;
  long long v72 = 0uLL;
  long long v69 = 0uLL;
  long long v70 = 0uLL;
  long long v67 = 0uLL;
  long long v68 = 0uLL;
  long long v65 = 0uLL;
  long long v66 = 0uLL;
  long long v63 = 0uLL;
  long long v64 = 0uLL;
  long long v61 = 0uLL;
  long long v62 = 0uLL;
  long long v59 = 0uLL;
  long long v60 = 0uLL;
  long long v57 = 0uLL;
  long long v58 = 0uLL;
  memset(__str, 0, sizeof(__str));
  if ((v9 & 8) != 0)
  {
    snprintf(__str, 0x200uLL, "has pixel format %d", *(_DWORD *)(v2 + 56));
    int v9 = *(_DWORD *)(v2 + 80);
  }
  else
  {
    strcpy(__str, "has no explicit pixel format");
  }
  int v12 = "alpha-only image";
  if ((v9 & 0x10) == 0) {
    int v12 = "not alpha-only";
  }
  uint64_t v13 = "has unsupported content";
  if ((v9 & 2) == 0) {
    uint64_t v13 = "has fully supported content";
  }
  if ((v9 & 4) != 0) {
    uint64_t v14 = "has visible vector content";
  }
  else {
    uint64_t v14 = "no visible vector content";
  }
  CFStringAppendFormat(a1, 0, @"CGPerspectiveCommandsRef %p: %ld commands, %ld resources, canvas size %.2f x %.2f, color space <%@>, %s, %s, %s, %s, %s\n", v2, Count, v4, v5, v6, v10, v11, __str, v12, v13, v14);
  CFRelease(v10);
  CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CFArrayRef *)(v2 + 88));
  if (Copy)
  {
    CFArrayRef v16 = Copy;
    CFIndex v17 = CFArrayGetCount(Copy);
    if (v17 >= 1)
    {
      CFIndex v18 = v17;
      CFStringAppendFormat(a1, 0, @"Errors: (%ld)\n", v17);
      for (CFIndex i = 0; i != v18; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, i);
        CFStringAppendFormat(a1, 0, @"%zu: \"%@\"\n", i, ValueAtIndex);
      }
    }
    CFRelease(v16);
  }
  CFStringAppendFormat(a1, 0, @"Commands: %d total\n\n", Count);
  if (Count >= 1)
  {
    CFIndex v21 = 0;
    uint64_t v54 = v2;
    do
    {
      uint64_t v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 72), v21);
      size_t v26 = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), *v25);
      CFStringAppendFormat(a1, 0, @"Command %ld (resource %ld):\n", v21, *v25);
      uint64_t v27 = *v26;
      unint64_t v28 = "<unknown>";
      if (v27 <= 5) {
        unint64_t v28 = off_264BE8A38[v27];
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", v28);
      PrintCGRect(a1, (uint64_t)"Frame", (CGRect *)(v25 + 1));
      CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f %.2f %.2f %.2f %.2f\n", "Transform", v25[5], v25[6], v25[7], v25[8], v25[9], v25[10]);
      CFStringRef v29 = CFCopyDescription((CFTypeRef)v25[11]);
      if (v29) {
        unsigned int v30 = (__CFString *)v29;
      }
      else {
        unsigned int v30 = @"none";
      }
      CFStringAppendFormat(a1, 0, @"%s: %@\n", "FillColor", v30);
      CFRelease(v30);
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "DrawingMode", PrintCGPathDrawingMode_kCGPathDrawingModeNames[*((int *)v25 + 24)]);
      PrintCGRect(a1, (uint64_t)"ImageRect", (CGRect *)(v25 + 13));
      CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f %.2f %.2f %.2f %.2f\n", "BaseTransform", v25[17], v25[18], v25[19], v25[20], v25[21], v25[22]);
      unsigned int v31 = *((_DWORD *)v25 + 46) + 1;
      int v32 = "<unknown>";
      if (v31 <= 0x1C) {
        int v32 = off_264BE8A68[v31];
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "BlendMode", v32);
      char v33 = (void *)v25[24];
      if (v33)
      {
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.elevation", v33[1]);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.azimuth", v33[2]);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.ambient", v33[3]);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.height", v33[4]);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.radius", v33[5]);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ShadowStyle.saturation", v33[6]);
      }
      else
      {
        CFStringAppend(a1, @"ShadowStyle: none\n");
      }
      CFStringRef v34 = CFCopyDescription((CFTypeRef)v25[25]);
      if (v34) {
        float v35 = (__CFString *)v34;
      }
      else {
        float v35 = @"none";
      }
      CFStringAppendFormat(a1, 0, @"%s: %@\n", "ShadowColor", v35);
      CFRelease(v35);
      uint64_t v36 = v25[26];
      if (v36)
      {
        int v37 = *(_DWORD *)(v36 + 4);
        uint64_t v38 = "kCGFocusRingTintGraphite";
        if (v37 != 1) {
          uint64_t v38 = "<unknown>";
        }
        BOOL v39 = v37 == 0;
        uint64_t v40 = "kCGFocusRingTintBlue";
        if (!v39) {
          uint64_t v40 = v38;
        }
        CFStringAppendFormat(a1, 0, @"FocusStyle.tint: %s\n", v40);
        uint64_t v41 = *(int *)(v36 + 8);
        uint64_t v42 = "<unknown>";
        if (v41 <= 2) {
          uint64_t v42 = off_264BE8B50[v41];
        }
        CFStringAppendFormat(a1, 0, @"FocusStyle.ordering: %s\n", v42);
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "FocusStyle.alpha", *(void *)(v36 + 16));
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "FocusStyle.radius", *(void *)(v36 + 24));
        CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "FocusStyle.threshold", *(void *)(v36 + 32));
        PrintCGRect(a1, (uint64_t)"FocusStyle.bounds", (CGRect *)(v36 + 40));
        CFStringAppendFormat(a1, 0, @"FocusStyle.accumulate: %d\n", *(unsigned int *)(v36 + 72));
      }
      else
      {
        CFStringAppend(a1, @"FocusStyle: none\n");
      }
      CFStringRef v43 = CFCopyDescription((CFTypeRef)v25[27]);
      if (v43) {
        uint64_t v44 = (__CFString *)v43;
      }
      else {
        uint64_t v44 = @"none";
      }
      CFStringAppendFormat(a1, 0, @"%s: %@\n", "FocusColor", v44);
      CFRelease(v44);
      CFStringRef v45 = CFCopyDescription((CFTypeRef)v25[28]);
      if (v45) {
        long long v46 = (__CFString *)v45;
      }
      else {
        long long v46 = @"none";
      }
      CFStringAppendFormat(a1, 0, @"%s: %@\n", "StrokeColor", v46);
      CFRelease(v46);
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "LineWidth", v25[29]);
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "LineWidthThreshold", v25[30]);
      uint64_t v47 = *((int *)v25 + 62);
      uint64_t v48 = "<unknown>";
      if (v47 <= 2) {
        uint64_t v48 = off_264BE8B68[v47];
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "LineJoin", v48);
      uint64_t v49 = *((int *)v25 + 63);
      long long v50 = "<unknown>";
      if (v49 <= 2) {
        long long v50 = off_264BE8B80[v49];
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "LineCap", v50);
      int v52 = (uint64_t *)v25[32];
      uint64_t v51 = v25[33];
      CFStringAppendFormat(a1, 0, @"%s (%zu): ", "LineDashValues", v51);
      for (; v51; --v51)
      {
        uint64_t v53 = *v52++;
        CFStringAppendFormat(a1, 0, @"%.2f ", v53);
      }
      CFStringAppend(a1, @"\n");
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "LineDashPhase", v25[34]);
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "MiterLimit", v25[35]);
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "ContextAlpha", v25[36]);
      CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f\n", "PatternPhase", v25[37], v25[38]);
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "Flatness", v25[39]);
      if (*((unsigned char *)v25 + 320)) {
        CGColorSpaceRef v22 = "true";
      }
      else {
        CGColorSpaceRef v22 = "false";
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "StrokeAdjust", v22);
      if (*((unsigned char *)v25 + 321)) {
        uint64_t v23 = "true";
      }
      else {
        uint64_t v23 = "false";
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ShouldAntialias", v23);
      if (*((unsigned char *)v25 + 322)) {
        float v24 = "true";
      }
      else {
        float v24 = "false";
      }
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ShouldDrawBitmapRuns", v24);
      CFStringAppend(a1, @"Resource:\n\n");
      uint64_t v2 = v54;
      PrintCGPerspectiveResource(a1, v54, (uint64_t)v26);
      CFStringAppend(a1, @"\n");
      ++v21;
    }
    while (v21 != Count);
  }
}

void PrintCGRect(__CFString *a1, uint64_t a2, CGRect *a3)
{
  if (CGRectIsInfinite(*a3))
  {
    CFStringAppendFormat(a1, 0, @"%s: Is Infinite\n", a2);
  }
  else if (CGRectIsNull(*a3))
  {
    CFStringAppendFormat(a1, 0, @"%s: Is Null\n", a2);
  }
  else
  {
    CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f %.2f %.2f\n", a2, *(void *)&a3->origin.x, *(void *)&a3->origin.y, *(void *)&a3->size.width, *(void *)&a3->size.height);
  }
}

void PrintCGPerspectiveResource(__CFString *a1, uint64_t a2, uint64_t a3)
{
  switch(*(_DWORD *)a3)
  {
    case 0:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypePath");
      CFStringRef v5 = CFCopyDescription(*(CFTypeRef *)(a3 + 8));
      CFStringAppendFormat(a1, 0, @"CGPathRef: %@\n", v5);
      goto LABEL_10;
    case 1:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypeClip");
      if (*(unsigned char *)(a3 + 9) == 1) {
        uint64_t v6 = "Pop";
      }
      else {
        uint64_t v6 = "Push";
      }
      CFStringAppendFormat(a1, 0, @"CGPerspectiveClipData (%s)\n", v6);
      unint64_t v7 = *(char *)(a3 + 8);
      if (v7 >= 3) {
        CFStringRef v8 = "<Unknown>";
      }
      else {
        CFStringRef v8 = off_264BE8B98[v7];
      }
      CFStringAppendFormat(a1, 0, @"CGPerspectiveClipType: %s\n", v8);
      int v27 = *(unsigned __int8 *)(a3 + 8);
      if (v27 == 2)
      {
        PrintCGRect(a1, (uint64_t)"Bounds", (CGRect *)(a3 + 72));
        CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f %.2f %.2f %.2f %.2f\n", "Matrix", *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 64));
        CFStringRef v32 = CFCopyDescription(*(CFTypeRef *)(a3 + 104));
        if (v32) {
          char v33 = (__CFString *)v32;
        }
        else {
          char v33 = @"none";
        }
        CFStringAppendFormat(a1, 0, @"%s: %@\n", "BackgroundColor", v33);
        CFRelease(v33);
        CFIndex Length = CFStringGetLength(a1);
        CFStringAppend(a1, @"Soft mask drawing commands:\n");
        CGPerspectiveCommandsAppendDebugDesc(a1, *(void *)(a3 + 16));
        v44.length = CFStringGetLength(a1) + ~Length;
        v44.locatiouint64_t n = Length;
        CFStringFindAndReplace(a1, @"\n", @"\n    ", v44, 0);
      }
      else
      {
        if (v27 == 1)
        {
          CFStringRef v29 = CFCopyDescription(*(CFTypeRef *)(a3 + 16));
          CFStringAppendFormat(a1, 0, @"CGImageRef (mask): %@\n", v29, v39);
          goto LABEL_83;
        }
        if (*(unsigned char *)(a3 + 8)) {
          goto LABEL_84;
        }
        unint64_t v28 = *(const void **)(a3 + 16);
        if (v28)
        {
          CFStringRef v29 = CFCopyDescription(v28);
          CFStringAppendFormat(a1, 0, @"CGPathRef %p: %@\n", *(void *)(a3 + 16), v29);
LABEL_83:
          CFRelease(v29);
          goto LABEL_84;
        }
        CFStringAppend(a1, @"CGPathRef: <Empty Clip Shape>\n");
      }
LABEL_84:
      float v35 = "<unknown>";
      uint64_t v36 = "kCGPerspectiveClipStatePop";
      if (*(unsigned char *)(a3 + 9) != 1) {
        uint64_t v36 = "<unknown>";
      }
      if (*(unsigned char *)(a3 + 9)) {
        int v37 = v36;
      }
      else {
        int v37 = "kCGPerspectiveClipStatePush";
      }
      CFStringAppendFormat(a1, 0, @"CGPerspectiveClipState: %s\n", v37);
      unsigned int v38 = *(_DWORD *)(a3 + 12) + 1;
      if (v38 <= 3) {
        float v35 = off_264BE8BC8[v38];
      }
      CFStringAppendFormat(a1, 0, @"CGClipMode: %s\n", v35, v39);
      return;
    case 2:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypeImage");
      CFStringRef v5 = CFCopyDescription(*(CFTypeRef *)(a3 + 8));
      CFStringAppendFormat(a1, 0, @"CGImageRef: %@\n", v5);
LABEL_10:
      CFRelease(v5);
      return;
    case 3:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypeGradient");
      int v9 = *(CFTypeRef **)(a3 + 8);
      CFStringAppendFormat(a1, 0, @"CGPerspectiveGradient %p\n", v9);
      uint64_t v10 = *(int *)v9;
      if (v10 >= 3) {
        size_t v11 = "<unknown>";
      }
      else {
        size_t v11 = off_264BE8BB0[v10];
      }
      CFStringAppendFormat(a1, 0, @"CGPerspectiveGradientType: %s\n", v11);
      CFStringRef v30 = CFCopyDescription(v9[1]);
      CFStringAppendFormat(a1, 0, @"CGGradientRef: %@\n", v30);
      CFRelease(v30);
      CFTypeRef v31 = v9[3];
      if (*(_DWORD *)v9 > 1u)
      {
        CFStringAppendFormat(a1, 0, @"Origin: (%.2f, %.2f)\n", v9[2], v31);
        CFStringAppendFormat(a1, 0, @"Angle: %.2f\n", v9[4], v42);
      }
      else
      {
        CFStringAppendFormat(a1, 0, @"Start Point: (%.2f, %.2f)\n", v9[2], v31);
        CFStringAppendFormat(a1, 0, @"End Point: (%.2f, %.2f)\n", v9[4], v9[5]);
        CFStringAppendFormat(a1, 0, @"Start Radius: %.2f\n", v9[6]);
        CFStringAppendFormat(a1, 0, @"End Radius: %.2f\n", v9[7]);
        CFStringAppendFormat(a1, 0, @"CGGradientDrawingOptions Bits: %04x\n", *((unsigned int *)v9 + 16), v41);
      }
      return;
    case 4:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypeSubcommands");
      uint64_t v12 = *(void *)(a3 + 16);
      CFStringAppendFormat(a1, 0, @"Subcommands.range.location: %zu\n", *(void *)(a3 + 8));
      CFStringAppendFormat(a1, 0, @"Subcommands.range.length: %zu\n", v12, v40);
      return;
    case 5:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "kCGPerspectiveResourceTypeGlyphs");
      uint64_t v14 = *(void *)(a3 + 8);
      CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f %.2f %.2f %.2f %.2f\n", "Glyphs.transform", *(void *)v14, *(void *)(v14 + 8), *(void *)(v14 + 16), *(void *)(v14 + 24), *(void *)(v14 + 32), *(void *)(v14 + 40));
      CFStringAppendFormat(a1, 0, @"%s: %zu\n", "Glyphs.count", *(void *)(v14 + 48));
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v15 = *(uint64_t **)(v14 + 56);
      CFStringAppendFormat(a1, 0, @"%s (%zu): ", "Glyphs.resourceIndices", v16);
      for (; v16; --v16)
      {
        uint64_t v17 = *v15++;
        CFStringAppendFormat(a1, 0, @"%zu ", v17);
      }
      CFStringAppend(a1, @"\n");
      uint64_t v18 = *(void *)(v14 + 64);
      uint64_t v19 = *(void *)(v14 + 48);
      CFStringAppendFormat(a1, 0, @"%s (%zu): ", "Glyphs.positions", v19);
      if (v19)
      {
        uint64_t v20 = (void *)(v18 + 8);
        do
        {
          CFStringAppendFormat(a1, 0, @"(%.2f %.2f) ", *(v20 - 1), *v20);
          v20 += 2;
          --v19;
        }
        while (v19);
      }
      CFStringAppend(a1, @"\n");
      CFStringAppendFormat(a1, 0, @"%s: %.2f %.2f\n", "Glyphs.subpixelQuantum", *(void *)(v14 + 72), *(void *)(v14 + 80));
      CFStringAppendFormat(a1, 0, @"%s: %.2f\n", "Glyphs.size", *(void *)(v14 + 88));
      unsigned int v21 = *(_DWORD *)(v14 + 96);
      CFStringAppendFormat(a1, 0, @"%s: 0x%08x", "Glyphs.style", v21);
      if (v21)
      {
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontRenderingStyleAntialiasing");
        if ((v21 & 2) == 0)
        {
LABEL_23:
          if ((v21 & 4) == 0) {
            goto LABEL_24;
          }
          goto LABEL_62;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_23;
      }
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontRenderingStyleSmoothing");
      if ((v21 & 4) == 0)
      {
LABEL_24:
        if ((v21 & 8) == 0) {
          goto LABEL_25;
        }
        goto LABEL_63;
      }
LABEL_62:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontRenderingStyleSubpixelPositioning");
      if ((v21 & 8) == 0)
      {
LABEL_25:
        if ((v21 & 0x200) == 0) {
          goto LABEL_26;
        }
        goto LABEL_64;
      }
LABEL_63:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontRenderingStyleSubpixelQuantization");
      if ((v21 & 0x200) == 0)
      {
LABEL_26:
        if ((v21 & 0x10) == 0) {
          goto LABEL_27;
        }
        goto LABEL_65;
      }
LABEL_64:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontRenderingStylePlatformNative");
      if ((v21 & 0x10) == 0)
      {
LABEL_27:
        if ((~v21 & 0x50) != 0) {
          goto LABEL_28;
        }
        goto LABEL_66;
      }
LABEL_65:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleMinimum");
      if ((~v21 & 0x50) != 0)
      {
LABEL_28:
        if ((v21 & 0x20) == 0) {
          goto LABEL_29;
        }
        goto LABEL_67;
      }
LABEL_66:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleExtraLight");
      if ((v21 & 0x20) == 0)
      {
LABEL_29:
        if ((~v21 & 0x30) != 0) {
          goto LABEL_30;
        }
        goto LABEL_68;
      }
LABEL_67:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleLight");
      if ((~v21 & 0x30) != 0)
      {
LABEL_30:
        if ((v21 & 0x40) == 0) {
          goto LABEL_31;
        }
        goto LABEL_69;
      }
LABEL_68:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleMedium");
      if ((v21 & 0x40) == 0)
      {
LABEL_31:
        if ((~v21 & 0x60) != 0) {
          goto LABEL_32;
        }
        goto LABEL_70;
      }
LABEL_69:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleHeavy");
      if ((~v21 & 0x60) != 0)
      {
LABEL_32:
        if ((~v21 & 0x70) != 0) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
LABEL_70:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleProRegular");
      if ((~v21 & 0x70) == 0) {
LABEL_33:
      }
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontSmoothingStyleCustomDilation");
LABEL_34:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleUnfiltered");
      if ((v21 & 0x80) != 0)
      {
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleFilterLight");
        if ((v21 & 0x100) == 0)
        {
LABEL_36:
          if ((~v21 & 0x180) != 0) {
            goto LABEL_37;
          }
          goto LABEL_74;
        }
      }
      else if ((v21 & 0x100) == 0)
      {
        goto LABEL_36;
      }
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleFilterMedium");
      if ((~v21 & 0x180) != 0)
      {
LABEL_37:
        if ((~v21 & 0x480) != 0) {
          goto LABEL_38;
        }
        goto LABEL_75;
      }
LABEL_74:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleFilterHeavy");
      if ((~v21 & 0x480) != 0)
      {
LABEL_38:
        if ((v21 & 0x400) == 0) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
LABEL_75:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleFilteredCustomDilation");
      if ((v21 & 0x400) != 0) {
LABEL_39:
      }
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontAntialiasingStyleUnfilteredCustomDilation");
LABEL_40:
      CFStringAppendFormat(a1, 0, @", %s", "kCGFontSubpixelQuantizationStyleDefault");
      if ((v21 & 0x1000) != 0) {
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontSubpixelQuantizationStyleCustom");
      }
      if ((~v21 & 0x3000) == 0) {
        CFStringAppendFormat(a1, 0, @", %s", "kCGFontSubpixelQuantizationStyleMask");
      }
      CFStringAppend(a1, @"\n");
      CFStringAppend(a1, @"Glyphs:\n\n");
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
      if (*(uint64_t *)(v14 + 48) >= 1)
      {
        CFIndex v23 = Count;
        uint64_t v24 = 0;
        do
        {
          while (1)
          {
            CFIndex v25 = *(void *)(*(void *)(v14 + 56) + 8 * v24);
            CFStringAppendFormat(a1, 0, @"Glyph index %zu:\n", v25);
            if ((v25 & 0x8000000000000000) == 0 && v25 < v23) {
              break;
            }
            CFStringAppend(a1, @"Out of bounds glyph index\n\n");
            if (*(void *)(v14 + 48) <= ++v24) {
              return;
            }
          }
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v25);
          PrintCGPerspectiveResource(a1, a2, ValueAtIndex);
          ++v24;
        }
        while (*(void *)(v14 + 48) > v24);
      }
      return;
    default:
      CFStringAppendFormat(a1, 0, @"%s: %s\n", "ResourceType", "<unknown>");
      return;
  }
}

uint64_t CGPerspectiveCommandsCreate()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (CGPerspectiveCommandsTypeID_onceToken != -1) {
    dispatch_once(&CGPerspectiveCommandsTypeID_onceToken, &__block_literal_global_54);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  long long v2 = *(_OWORD *)(MEMORY[0x263F001A8] + 16);
  *(_OWORD *)(Instance + 16) = *MEMORY[0x263F001A8];
  *(_OWORD *)(Instance + 32) = v2;
  *(void *)(Instance + 64) = CFArrayCreateMutable(v0, 0, 0);
  *(void *)(Instance + 72) = CFArrayCreateMutable(v0, 0, 0);
  *(_DWORD *)(Instance + 8re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
  *(void *)(Instance + 88) = CFArrayCreateMutable(v0, 0, MEMORY[0x263EFFF70]);
  return Instance;
}

char *CGPerspectiveCommandCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0x148uLL, 0xB4DCF097uLL);
  uint64_t v7 = MEMORY[0x263F000D0];
  long long v8 = *MEMORY[0x263F000D0];
  long long v9 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)(v6 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = *MEMORY[0x263F000D0];
  *(_OWORD *)(v6 + 56) = v9;
  long long v10 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v6 + 72) = v10;
  *((void *)v6 + 35) = 0x4024000000000000;
  *((void *)v6 + 36) = 0x3FF0000000000000;
  *(_OWORD *)(v6 + 296) = *MEMORY[0x263F001B0];
  *((void *)v6 + 3re::Event<re::GeometricObjectBase>::~Event((void *)this + 9) = 0;
  *((_WORD *)v6 + 16re::VariableStepTimer::setClock((uint64_t)this, 0) = 256;
  v6[322] = 0;
  *(_OWORD *)(v6 + 136) = v8;
  *(_OWORD *)(v6 + 152) = v9;
  *(_OWORD *)(v6 + 168) = v10;
  *(_OWORD *)(v6 + 232) = xmmword_234416520;
  CGPerspectiveCommandUpdateWithStates((long long *)a1, (uint64_t)v6, a2, a3);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), v6);
  return v6;
}

long long *CGPerspectiveCommandUpdateWithStates(long long *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    goto LABEL_30;
  }
  uint64_t v7 = (uint64_t)result;
  CTM = (long long *)CGGStateGetCTM();
  if (CTM)
  {
    long long v9 = *CTM;
    long long v10 = CTM[1];
    *(_OWORD *)(a2 + 72) = CTM[2];
    *(_OWORD *)(a2 + 56) = v10;
    *(_OWORD *)(a2 + 4re::VariableStepTimer::setClock((uint64_t)this, 0) = v9;
  }
  *(_DWORD *)(a2 + 184) = CGGStateGetCompositeOperation();
  if (!CGGStateGetStyle()) {
    goto LABEL_15;
  }
  int Type = CGStyleGetType();
  if (Type == 2)
  {
    int v27 = *(void **)(a2 + 208);
    if (v27)
    {
      free(v27);
      *(void *)(a2 + 208) = 0;
      CGColorRelease(*(CGColorRef *)(a2 + 216));
      *(void *)(a2 + 216) = 0;
    }
    Data = (_OWORD *)CGStyleGetData();
    CFStringRef v29 = malloc_type_malloc(0x50uLL, 0x1000040CA4B9025uLL);
    *(void *)(a2 + 208) = v29;
    *CFStringRef v29 = *Data;
    long long v30 = Data[4];
    long long v32 = Data[1];
    long long v31 = Data[2];
    v29[3] = Data[3];
    v29[4] = v30;
    v29[1] = v32;
    v29[2] = v31;
    Color = (CGColor *)CGStyleGetColor();
    CFStringRef v34 = CGColorRetain(Color);
    *(void *)(a2 + 216) = v34;
    ColorSpace = CGColorGetColorSpace(v34);
    if (CGColorSpaceIsWideGamutRGB(ColorSpace)) {
      goto LABEL_14;
    }
LABEL_15:
    FillColor = (CGColor *)CGGStateGetFillColor();
    int v37 = CGColorGetColorSpace(FillColor);
    if (!CGColorSpaceIsWideGamutRGB(v37)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (Type == 1)
  {
    uint64_t v18 = *(void **)(a2 + 192);
    if (v18)
    {
      free(v18);
      *(void *)(a2 + 192) = 0;
      CGColorRelease(*(CGColorRef *)(a2 + 200));
      *(void *)(a2 + 20re::VariableStepTimer::setClock((uint64_t)this, 0) = 0;
    }
    uint64_t v19 = CGStyleGetData();
    uint64_t v20 = malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
    *(void *)(a2 + 192) = v20;
    long long v22 = *(_OWORD *)(v19 + 16);
    long long v21 = *(_OWORD *)(v19 + 32);
    long long v23 = *(_OWORD *)v19;
    v20[6] = *(void *)(v19 + 48);
    *((_OWORD *)v20 + 1) = v22;
    *((_OWORD *)v20 + 2) = v21;
    *(_OWORD *)uint64_t v20 = v23;
    uint64_t v24 = (CGColor *)CGStyleGetColor();
    CFIndex v25 = CGColorRetain(v24);
    *(void *)(a2 + 20re::VariableStepTimer::setClock((uint64_t)this, 0) = v25;
    size_t v26 = CGColorGetColorSpace(v25);
    if (!CGColorSpaceIsWideGamutRGB(v26)) {
      goto LABEL_15;
    }
LABEL_14:
    *(_DWORD *)(v7 + 80) |= 1u;
    goto LABEL_15;
  }
  CGPerspectiveCommandsLogError(v7, "Unsupported CGStyleType given: %d", v12, v13, v14, v15, v16, v17, Type);
  FillColor = (CGColor *)CGGStateGetFillColor();
  uint64_t v48 = CGColorGetColorSpace(FillColor);
  if (CGColorSpaceIsWideGamutRGB(v48)) {
LABEL_16:
  }
    *(_DWORD *)(v7 + 80) |= 1u;
LABEL_17:
  unsigned int v38 = *(CGColor **)(a2 + 88);
  if (v38 != FillColor)
  {
    if (v38)
    {
      CFRelease(v38);
      *(void *)(a2 + 88) = 0;
    }
    *(void *)(a2 + 88) = CGColorRetain(FillColor);
  }
  StrokeColor = (CGColor *)CGGStateGetStrokeColor();
  uint64_t v40 = CGColorGetColorSpace(StrokeColor);
  if (CGColorSpaceIsWideGamutRGB(v40)) {
    *(_DWORD *)(v7 + 80) |= 1u;
  }
  uint64_t v41 = *(CGColor **)(a2 + 224);
  if (v41 != StrokeColor)
  {
    if (v41)
    {
      CFRelease(v41);
      *(void *)(a2 + 224) = 0;
    }
    *(void *)(a2 + 224) = CGColorRetain(StrokeColor);
  }
  CGGStateGetAlpha();
  *(void *)(a2 + 288) = v42;
  CGGStateGetPatternPhase();
  *(void *)(a2 + 296) = v43;
  *(void *)(a2 + 304) = v44;
  CGGStateGetFlatness();
  *(void *)(a2 + 312) = v45;
  *(unsigned char *)(a2 + 32re::VariableStepTimer::setClock((uint64_t)this, 0) = CGGStateGetStrokeAdjust();
  *(unsigned char *)(a2 + 321) = CGGStateGetShouldAntialias();
  *(unsigned char *)(a2 + 322) = CGGStateGetShouldDrawBitmapRuns();
  uint64_t v49 = 0;
  __CGGStateGetStrokeParameters(a4, (void *)(a2 + 232), (void *)(a2 + 240), (void *)(a2 + 280), (uint64_t *)&v49, (_DWORD *)(a2 + 252), (_DWORD *)(a2 + 248));
  uint64_t result = v49;
  if (v49)
  {
    uint64_t result = (long long *)CGDashGetPattern();
    if (!result)
    {
      *(void *)(a2 + 256) = 0;
      *(void *)(a2 + 264) = 0;
      return result;
    }
    *(void *)(a2 + 264) = 0;
    uint64_t result = (long long *)malloc_type_malloc(0, 0xF95493D9uLL);
    *(void *)(a2 + 256) = result;
  }
LABEL_30:
  if (a3)
  {
    uint64_t result = (long long *)CGRenderingStateGetBaseCTM();
    if (result)
    {
      long long v46 = *result;
      long long v47 = result[1];
      *(_OWORD *)(a2 + 168) = result[2];
      *(_OWORD *)(a2 + 152) = v47;
      *(_OWORD *)(a2 + 136) = v46;
    }
  }
  return result;
}

void CGPerspectiveCommandsLogError(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 0x8000100u);
  CFStringRef v12 = CFStringCreateWithFormatAndArguments(v10, 0, v11, &a9);
  CFRelease(v11);
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    uint64_t v13 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    uint64_t v13 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = CFStringGetCStringPtr(v12, 0x8000100u);
  _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "CG command serialization failed: %s", (uint8_t *)&buf, 0xCu);
LABEL_3:
  *(_DWORD *)(a1 + 80) |= 2u;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 88), v12);
  if (qword_26AF9F9B8 == -1)
  {
    if (CFSetContainsValue(*(CFSetRef *)_MergedGlobals_506, v12)) {
      goto LABEL_10;
    }
  }
  else
  {
    dispatch_once(&qword_26AF9F9B8, &__block_literal_global_10_2);
    if (CFSetContainsValue(*(CFSetRef *)_MergedGlobals_506, v12)) {
      goto LABEL_10;
    }
  }
  if (qword_26AF9F9B8 != -1) {
    dispatch_once(&qword_26AF9F9B8, &__block_literal_global_10_2);
  }
  CFSetAddValue(*(CFMutableSetRef *)_MergedGlobals_506, v12);
  CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
  uint64_t v15 = "Error";
  if (CStringPtr) {
    uint64_t v15 = CStringPtr;
  }
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 0x40000000;
  uint64_t v17 = __CGPerspectiveCommandsReportMissingFeature_block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_7_2;
  uint64_t v19 = v15;
  analytics_send_event_lazy();
LABEL_10:
  CFRelease(v12);
}

void *CGPerspectiveResourceCreate(uint64_t a1)
{
  long long v2 = malloc_type_calloc(1uLL, 0x70uLL, 0xC66BD634uLL);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 64), v2);
  return v2;
}

void CGPerspectiveCommandsFinalize(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; i != v3; ++i)
    {
      ValueAtIndex = (CGPathRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      uint64_t v6 = ValueAtIndex;
      switch(*(_DWORD *)ValueAtIndex)
      {
        case 0:
          CGPathRelease(ValueAtIndex[1]);
          break;
        case 1:
          int v7 = *((unsigned __int8 *)ValueAtIndex + 8);
          if (v7 == 2)
          {
            CGPathRef v8 = ValueAtIndex[2];
            if (v8) {
              CFRelease(v8);
            }
            CGColorRelease(v6[13]);
          }
          else if (v7 == 1)
          {
            CGImageRelease(ValueAtIndex[2]);
          }
          else if (!*((unsigned char *)ValueAtIndex + 8))
          {
            CGPathRelease(ValueAtIndex[2]);
          }
          break;
        case 2:
          CGImageRelease(ValueAtIndex[1]);
          break;
        case 3:
          CGGradientRelease(*((CGGradientRef *)ValueAtIndex[1] + 1));
          goto LABEL_4;
        case 5:
          free(*((void **)ValueAtIndex[1] + 7));
          free(*((void **)v6[1] + 8));
LABEL_4:
          free(v6[1]);
          break;
        default:
          break;
      }
      free(v6);
    }
  }
  long long v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
  CFAllocatorRef v10 = *(CGColorSpace **)(a1 + 48);
  if (v10)
  {
    CGColorSpaceRelease(v10);
    *(void *)(a1 + re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 48) = 0;
  }
  CFIndex v11 = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (v11 >= 1)
  {
    CFIndex v12 = v11;
    for (CFIndex j = 0; j != v12; ++j)
    {
      uint64_t v14 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), j);
      CGColorRelease(*((CGColorRef *)v14 + 11));
      CGColorRelease(*((CGColorRef *)v14 + 28));
      free(*((void **)v14 + 24));
      CGColorRelease(*((CGColorRef *)v14 + 25));
      free(*((void **)v14 + 26));
      CGColorRelease(*((CGColorRef *)v14 + 27));
      free(*((void **)v14 + 32));
      free(v14);
    }
  }
  uint64_t v15 = *(const void **)(a1 + 72);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v16 = *(const void **)(a1 + 88);
  if (v16)
  {
    CFRelease(v16);
  }
}

uint64_t __CGPerspectiveCommandsTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CGPerspectiveCommandsTypeID_id = result;
  return result;
}

xpc_object_t __CGPerspectiveCommandsReportMissingFeature_block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v2, "Command", *(const char **)(a1 + 32));
  return v2;
}

CFMutableSetRef __SharedTelemetry_block_invoke()
{
  _MergedGlobals_506 = (uint64_t)malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  CFMutableSetRef result = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFFA0]);
  *(void *)_MergedGlobals_506 = result;
  return result;
}

BOOL CGPerspectiveDataDecode_bytes(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  CFIndex Length = CFDataGetLength(*(CFDataRef *)a1);
  v7.locatiouint64_t n = *(void *)(a1 + 8);
  size_t v8 = Length - v7.location;
  if (Length - v7.location < a3)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      CFAllocatorRef v10 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      {
LABEL_6:
        bzero(a2, a3);
        return v8 >= a3;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      CFAllocatorRef v10 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = 134218496;
    uint64_t v13 = v11;
    __int16 v14 = 2048;
    size_t v15 = a3;
    __int16 v16 = 2048;
    size_t v17 = v8;
    _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Out of bounds read, for position %ld; needs %ld but has %ld left",
      (uint8_t *)&v12,
      0x20u);
    goto LABEL_6;
  }
  v7.length = a3;
  CFDataGetBytes(*(CFDataRef *)a1, v7, (UInt8 *)a2);
  *(void *)(a1 + 8) += a3;
  return v8 >= a3;
}

BOOL CGPerspectiveDataDecode_CFData(uint64_t a1, __CFData **a2)
{
  *a2 = 0;
  CFIndex capacity = 0;
  BOOL result = CGPerspectiveDataDecode_bytes(a1, &capacity, 8uLL);
  if (result)
  {
    if (capacity < 0
      || ((uint64_t v5 = *(void *)(a1 + 8), v6 = v5 + capacity, !__OFADD__(v5, capacity)) ? (v7 = 0) : (v7 = 1),
          (CFIndex Length = CFDataGetLength(*(CFDataRef *)a1), (v7 & 1) != 0) || v6 > Length))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        int v12 = __CGPerspectiveOSLog_log;
        BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        int v12 = __CGPerspectiveOSLog_log;
        BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }
      *(_WORD *)long long buf = 0;
      uint64_t v13 = "Failed to decode CFData blob: out of bounds read";
      __int16 v14 = buf;
LABEL_14:
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
    CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], capacity);
    if (Mutable)
    {
      CFAllocatorRef v10 = Mutable;
      BytePtr = CFDataGetBytePtr(*(CFDataRef *)a1);
      CFDataAppendBytes(v10, &BytePtr[*(void *)(a1 + 8)], capacity);
      *a2 = v10;
      *(void *)(a1 + 8) += capacity;
      return 1;
    }
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      int v12 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
LABEL_17:
        __int16 v15 = 0;
        uint64_t v13 = "Failed to allocate CFMutableDataRef";
        __int16 v14 = (uint8_t *)&v15;
        goto LABEL_14;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      int v12 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

void DrawPerspectiveCommands(CGContext *a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v35 = 0;
  cf[1] = 0;
  long long v32 = 0u;
  uint64_t v33 = 0;
  long long v34 = xmmword_234416540;
  cf[0] = (CFTypeRef)0x3FF0000000000000;
  if (theDict)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"OptionOutlineCommands");
    if (Value)
    {
      CFBooleanRef v7 = Value;
      CFTypeID v8 = CFGetTypeID(Value);
      if (v8 == CFBooleanGetTypeID()) {
        LOBYTE(v32) = CFBooleanGetValue(v7) != 0;
      }
    }
    long long v9 = CFDictionaryGetValue(theDict, @"OptionOutlineColor");
    if (v9)
    {
      CFAllocatorRef v10 = v9;
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 == CGColorGetTypeID()) {
        *((void *)&v32 + 1) = v10;
      }
    }
    CFBooleanRef v12 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"OptionHighlightCommands");
    if (v12)
    {
      CFBooleanRef v13 = v12;
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 == CFBooleanGetTypeID()) {
        LOBYTE(v33) = CFBooleanGetValue(v13) != 0;
      }
    }
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"OptionContextScale");
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID()) {
        CFNumberGetValue(v16, kCFNumberCGFloatType, &v34);
      }
    }
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"OptionContentsScale");
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFNumberGetTypeID()) {
        CFNumberGetValue(v19, kCFNumberCGFloatType, (char *)&v34 + 8);
      }
    }
    CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"OptionEnableBifurcation");
    if (v21)
    {
      CFBooleanRef v22 = v21;
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFBooleanGetTypeID()) {
        LOBYTE(v35) = CFBooleanGetValue(v22) != 0;
      }
    }
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"OptionBifurcationScale");
    if (v24)
    {
      CFNumberRef v25 = v24;
      CFTypeID v26 = CFGetTypeID(v24);
      if (v26 == CFNumberGetTypeID()) {
        CFNumberGetValue(v25, kCFNumberCGFloatType, cf);
      }
    }
    int v27 = CFDictionaryGetValue(theDict, @"OptionSignaler");
    if (v27)
    {
      unint64_t v28 = v27;
      CFTypeID v29 = CFGetTypeID(v27);
      CFTypeID v30 = v29;
      if (CGPerspectiveSignalerTypeID_onceToken == -1)
      {
        if (v29 != CGPerspectiveSignalerTypeID_id) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      dispatch_once(&CGPerspectiveSignalerTypeID_onceToken, &__block_literal_global_56);
      if (v30 == CGPerspectiveSignalerTypeID_id)
      {
LABEL_26:
        cf[1] = v28;
        CFRetain(v28);
      }
    }
  }
LABEL_27:
  CGContextGetBaseCTM();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  DrawPerspectiveSubcommands(a1, a2, 0, Count, (uint64_t)&v32);
  CGContextSetBaseCTM();
  if (cf[1]) {
    CFRelease(cf[1]);
  }
}

void DrawPerspectiveSubcommands(CGContext *a1, uint64_t a2, CFIndex a3, uint64_t a4, uint64_t a5)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 72));
  uint64_t v158 = a2;
  CFIndex v157 = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
  if (a4 == -1 || (CFIndex v152 = a3 + a4, a3 + a4 > Count))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      long long v139 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      long long v139 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return;
      }
    }
    LOWORD(transform.a) = 0;
    long long v140 = "Given range was out of bounds";
    goto LABEL_160;
  }
  CFIndex v141 = Count;
  if (a4 < 1) {
    return;
  }
  int v11 = 0;
  double v144 = *(double *)(MEMORY[0x263F001A0] + 8);
  double v145 = *MEMORY[0x263F001A0];
  double v142 = *(double *)(MEMORY[0x263F001A0] + 24);
  double v143 = *(double *)(MEMORY[0x263F001A0] + 16);
  while (2)
  {
    uint64_t v12 = *(void *)(a5 + 56);
    if (v12)
    {
      CFBooleanRef v13 = (os_unfair_lock_s *)(v12 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
      int v14 = *(unsigned __int8 *)(v12 + 20);
      os_unfair_lock_unlock(v13);
      if (v14) {
        return;
      }
    }
    ValueAtIndeCGFloat x = (CFIndex *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 72), a3);
    CFIndex v16 = *ValueAtIndex;
    if (*ValueAtIndex < 0 || v16 >= v157)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      LOWORD(transform.a) = 0;
      long long v140 = "Out of bounds resources access";
      goto LABEL_160;
    }
    uint64_t v17 = (uint64_t)ValueAtIndex;
    CFNumberRef v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 64), v16);
    CFNumberRef v19 = v18;
    int v20 = *(_DWORD *)v18;
    if (*(_DWORD *)v18 != 1)
    {
      CGContextSaveGState(a1);
      if (v20 == 4) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if (v18[9])
    {
      CGContextRestoreGState(a1);
      BOOL v21 = __OFSUB__(v11--, 1);
      if (!v21) {
        goto LABEL_15;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      LOWORD(transform.a) = 0;
LABEL_160:
      _os_log_error_impl(&dword_233120000, v139, OS_LOG_TYPE_ERROR, v140, (uint8_t *)&transform, 2u);
      return;
    }
    CGContextSaveGState(a1);
    BOOL v21 = __OFADD__(v11++, 1);
    if (v21)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        long long v139 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      LOWORD(transform.a) = 0;
      goto LABEL_160;
    }
    int v43 = v19[8];
    if (v43 == 2)
    {
      long long v80 = (const void *)*((void *)v19 + 2);
      memset(&transform, 0, sizeof(transform));
      CGContextGetCTM(&transform, a1);
      memset(&v161, 0, sizeof(v161));
      long long v81 = *(_OWORD *)(v19 + 40);
      *(_OWORD *)&t2.double a = *(_OWORD *)(v19 + 24);
      *(_OWORD *)&t2.double c = v81;
      *(_OWORD *)&t2.tCGFloat x = *(_OWORD *)(v19 + 56);
      CGAffineTransform t1 = transform;
      CGAffineTransformConcat(&v161, &t2, &t1);
      CGAffineTransform t2 = v161;
      if (CGSoftMaskCreate())
      {
        if (v80) {
          CFRetain(v80);
        }
        CGContextSetSoftMask();
        CGSoftMaskRelease();
      }
      goto LABEL_15;
    }
    if (v43 == 1)
    {
      double v83 = *(double *)(v17 + 8);
      double v82 = *(double *)(v17 + 16);
      double v85 = *(double *)(v17 + 24);
      double v84 = *(double *)(v17 + 32);
      long long v86 = *(_OWORD *)(v19 + 24);
      long long v87 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)&transform.double c = *(_OWORD *)(v19 + 40);
      *(_OWORD *)&transform.tCGFloat x = v87;
      *(_OWORD *)&transform.double a = v86;
      long long v88 = (CGImage *)*((void *)v19 + 2);
      if (CGVersionLoad_onceToken == -1)
      {
        long long v89 = (void (*)(CGContext *, CGImage *, CGAffineTransform *, double, double, double, double))__CGContextClipToMaskWithTransformFunc;
        if (__CGContextClipToMaskWithTransformFunc)
        {
LABEL_75:
          v89(a1, v88, &transform, v83, v82, v85, v84);
          goto LABEL_15;
        }
      }
      else
      {
        dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
        long long v89 = (void (*)(CGContext *, CGImage *, CGAffineTransform *, double, double, double, double))__CGContextClipToMaskWithTransformFunc;
        if (__CGContextClipToMaskWithTransformFunc) {
          goto LABEL_75;
        }
      }
      v174.origin.CGFloat x = v83;
      v174.origin.CGFloat y = v82;
      v174.size.width = v85;
      v174.size.height = v84;
      CGContextClipToMask(a1, v174, v88);
      goto LABEL_15;
    }
    if (!v19[8])
    {
      if (*((void *)v19 + 2))
      {
        UpdateGState(a1, v17);
        uint64_t v44 = *((void *)v19 + 2);
        int v45 = *((_DWORD *)v19 + 3);
        if (v45 != 2)
        {
          if (v45 == 1)
          {
            CGContextAddPath(a1, *((CGPathRef *)v19 + 2));
            CGContextEOClip(a1);
          }
          else if (!v45)
          {
            CGContextAddPath(a1, *((CGPathRef *)v19 + 2));
            CGContextClip(a1);
          }
          goto LABEL_15;
        }
        uint64_t GState = CGContextGetGState();
        if (CGVersionLoad_onceToken == -1)
        {
          uint64_t v93 = (void (*)(uint64_t, uint64_t, uint64_t))__CGGStateClipToPathFunc;
          if (!__CGGStateClipToPathFunc) {
            goto LABEL_15;
          }
        }
        else
        {
          dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
          uint64_t v93 = (void (*)(uint64_t, uint64_t, uint64_t))__CGGStateClipToPathFunc;
          if (!__CGGStateClipToPathFunc) {
            goto LABEL_15;
          }
        }
        v93(GState, v44, 2);
        goto LABEL_15;
      }
      v170.origin.CGFloat x = 0.0;
      v170.origin.CGFloat y = 0.0;
      v170.size.width = 0.0;
      v170.size.height = 0.0;
      CGContextClipToRect(a1, v170);
    }
LABEL_15:
    CGContextSaveGState(a1);
LABEL_17:
    long long v22 = *(_OWORD *)(v17 + 56);
    *(_OWORD *)&transform.double a = *(_OWORD *)(v17 + 40);
    *(_OWORD *)&transform.double c = v22;
    *(_OWORD *)&transform.tCGFloat x = *(_OWORD *)(v17 + 72);
    CGContextConcatCTM(a1, &transform);
LABEL_18:
    CGFloat v23 = *(double *)(a5 + 24);
    long long v24 = *(_OWORD *)(v17 + 152);
    *(_OWORD *)&transform.double a = *(_OWORD *)(v17 + 136);
    *(_OWORD *)&transform.double c = v24;
    *(_OWORD *)&transform.tCGFloat x = *(_OWORD *)(v17 + 168);
    CGContextSetBaseCTM();
    CFNumberRef v25 = *(CGColor **)(v17 + 88);
    if (v25 && CGColorGetPattern(v25)
      || (CFTypeID v26 = *(CGColor **)(v17 + 224)) != 0 && CGColorGetPattern(v26)
      || (int v27 = *(CGColor **)(v17 + 200)) != 0 && CGColorGetPattern(v27)
      || (unint64_t v28 = *(CGColor **)(v17 + 216)) != 0 && CGColorGetPattern(v28))
    {
      memset(&transform, 0, sizeof(transform));
      CGContextGetBaseCTM();
      CGAffineTransformMakeScale(&t2, v23, v23);
      CGAffineTransform t1 = transform;
      CGAffineTransformConcat(&v161, &t1, &t2);
      transforuint64_t m = v161;
      CGContextSetBaseCTM();
    }
    CGContextSetCompositeOperation();
    uint64_t v29 = *(void *)(v17 + 192);
    if (v29)
    {
      double v30 = *(double *)(a5 + 24);
      CGStyleCreateShadow();
      uint64_t Data = CGStyleGetData();
      if (Data)
      {
        long long v32 = (double *)Data;
        float v33 = v30;
        double v34 = *(double *)(v29 + 32);
        float v35 = *(double *)(v29 + 16);
        __float2 v36 = __sincosf_stret(v35 * 0.017453);
        float v37 = v34 * v36.__cosval;
        float v38 = v34 * v36.__sinval;
        *(float *)&double v34 = v37 * v33;
        float v39 = v38 * v33;
        v32[5] = v32[5] * v33;
        float v40 = atan2((float)(v38 * v33), (float)(v37 * v33));
        v32[2] = (float)(v40 * 57.296);
        v32[4] = sqrtf((float)(v39 * v39) + (float)(*(float *)&v34 * *(float *)&v34));
      }
      CGStyleGetData();
      CGStyleCreateShadowWithColor();
      CGContextSetStyle();
      CGStyleRelease();
      CGStyleRelease();
    }
    if (*(void *)(v17 + 208))
    {
      float v41 = *(double *)(a5 + 24);
      CGStyleCreateFocusRing();
      uint64_t v42 = CGStyleGetData();
      *(double *)(v42 + 24) = *(double *)(v42 + 24) * v41;
      CGStyleGetData();
      CGStyleCreateFocusRingWithColor();
      CGContextSetStyle();
      CGStyleRelease();
      CGStyleRelease();
    }
    CGContextSetAlpha(a1, *(CGFloat *)(v17 + 288));
    switch(v20)
    {
      case 0:
        DrawPath(a1, v17, *((const CGPath **)v19 + 1));
        goto LABEL_127;
      case 2:
        UpdateGState(a1, v17);
        uint64_t v49 = (CGImage *)*((void *)v19 + 1);
        CGContextDrawImage(a1, *(CGRect *)(v17 + 104), v49);
        if (*(unsigned char *)(a5 + 16))
        {
          CGContextGetGState();
          double Width = (double)CGImageGetWidth(v49);
          double Height = (double)CGImageGetHeight(v49);
          CTM = (long long *)CGGStateGetCTM();
          long long v53 = *CTM;
          long long v54 = CTM[2];
          *(_OWORD *)&transform.double c = CTM[1];
          *(_OWORD *)&transform.tCGFloat x = v54;
          *(_OWORD *)&transform.double a = v53;
          *(void *)&long long v53 = 0;
          uint64_t v55 = 0;
          *(double *)&long long v54 = Width;
          double v56 = Height;
          CGRect v166 = CGRectApplyAffineTransform(*(CGRect *)&v53, &transform);
          if (v166.size.width > Width || v166.size.height > Height)
          {
            CGContextSetRGBFillColor(a1, 1.0, 0.0, 0.0, 0.9);
            v167.origin.CGFloat x = 0.0;
            v167.origin.CGFloat y = 0.0;
            v167.size.width = Width;
            v167.size.height = Height;
            CGContextFillRect(a1, v167);
          }
        }
        goto LABEL_127;
      case 3:
        long long v58 = (int *)*((void *)v19 + 1);
        long long v59 = (CGGradient *)*((void *)v58 + 1);
        int v60 = *v58;
        if (*v58 == 2)
        {
          CGContextDrawConicGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGFloat *)v58 + 4));
          goto LABEL_127;
        }
        if (v60 == 1)
        {
          CGContextDrawRadialGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGFloat *)v58 + 6), *((CGPoint *)v58 + 2), *((CGFloat *)v58 + 7), v58[16]);
          goto LABEL_127;
        }
        if (!v60)
        {
          CGContextDrawLinearGradient(a1, v59, *((CGPoint *)v58 + 1), *((CGPoint *)v58 + 2), v58[16]);
          goto LABEL_127;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v90 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_127;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v90 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_127;
          }
        }
        int v91 = *v58;
        LODWORD(transform.a) = 67109120;
        HIDWORD(transform.a) = v91;
        long long v47 = v90;
        uint64_t v48 = "Unsupported drawing of gradient type %d";
        goto LABEL_81;
      case 4:
        uint64_t v61 = *((void *)v19 + 2);
        if ((v61 & 0x8000000000000000) == 0)
        {
          uint64_t v62 = *((void *)v19 + 1);
          if (v61 + v62 <= v141)
          {
            CGRect v168 = *(CGRect *)(v17 + 8);
            long long v63 = *(_OWORD *)(v17 + 56);
            *(_OWORD *)&transform.double a = *(_OWORD *)(v17 + 40);
            *(_OWORD *)&transform.double c = v63;
            *(_OWORD *)&transform.tCGFloat x = *(_OWORD *)(v17 + 72);
            CGRect v169 = CGRectApplyAffineTransform(v168, &transform);
            CGContextBeginTransparencyLayerWithRect(a1, v169, 0);
            DrawPerspectiveSubcommands(a1, v158, v62, v61, a5);
            CGContextEndTransparencyLayer(a1);
            a3 += v61;
            goto LABEL_127;
          }
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          long long v139 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return;
          }
          goto LABEL_151;
        }
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        long long v139 = __CGPerspectiveOSLog_log;
        if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
        {
LABEL_151:
          LOWORD(transform.a) = 0;
          long long v140 = "Internal inconsistency: out of bounds subcommands end index";
          goto LABEL_160;
        }
        break;
      case 5:
        CFIndex v64 = CFArrayGetCount(*(CFArrayRef *)(v158 + 64));
        if (*(unsigned char *)(a5 + 40))
        {
          double v65 = *(double *)(a5 + 32);
          if (v65 == 0.0) {
            double v65 = 2.0;
          }
          double v66 = v65 / *(double *)(a5 + 48);
        }
        else
        {
          double v66 = 1.0;
        }
        double v146 = v66;
        long long v67 = (long long *)*((void *)v19 + 1);
        memset(&v161, 0, sizeof(v161));
        long long v68 = *v67;
        long long v69 = v67[2];
        *(_OWORD *)&transform.double c = v67[1];
        *(_OWORD *)&transform.tCGFloat x = v69;
        *(_OWORD *)&transform.double a = v68;
        CGAffineTransformScale(&v161, &transform, v66, v66);
        *(float64x2_t *)&v161.tCGFloat x = vmulq_n_f64(*(float64x2_t *)&v161.tx, v146);
        uint64_t QuantizationLevelWithStyle = CGFontGetQuantizationLevelWithStyle();
        double v71 = *((double *)v67 + 11);
        CGAffineTransform t2 = v161;
        CGAffineTransformScale(&transform, &t2, 1.0 / v71, 1.0 / v71);
        CGAffineTransform v161 = transform;
        float32x2_t v147 = (double *)malloc_type_malloc(16 * *((void *)v67 + 6), 0x1000040451B5BE8uLL);
        unint64_t v72 = *((void *)v67 + 8);
        unint64_t v73 = *((void *)v67 + 6);
        double b = v161.b;
        double a = v161.a;
        double c = v161.c;
        double d = v161.d;
        long long v78 = *(_OWORD *)&v161.tx;
        if (CGVersionLoad_onceToken == -1)
        {
          long long v79 = (void (*)(unint64_t, unint64_t, CGAffineTransform *, double *))__CGFontGetGlyphPositionsFunc;
          if (__CGFontGetGlyphPositionsFunc) {
            goto LABEL_68;
          }
        }
        else
        {
          r1double a = v161.c;
          CGFloat v155 = v161.a;
          path1double a = v161.d;
          CGFloat v150 = v161.b;
          dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
          double d = path1a;
          double b = v150;
          double c = r1a;
          double a = v155;
          long long v79 = (void (*)(unint64_t, unint64_t, CGAffineTransform *, double *))__CGFontGetGlyphPositionsFunc;
          if (__CGFontGetGlyphPositionsFunc)
          {
LABEL_68:
            transform.double a = a;
            transform.double b = b;
            transform.double c = c;
            transform.double d = d;
            *(_OWORD *)&transform.tCGFloat x = v78;
            v79(v72, v73, &transform, v147);
            goto LABEL_109;
          }
        }
        if (v73)
        {
          double v94 = *(double *)&v78 + 0.001;
          double v95 = *((double *)&v78 + 1) + 0.001;
          if (v73 >= 5)
          {
            unint64_t v96 = 0;
            unint64_t v97 = (unint64_t)&v147[2 * v73];
            unint64_t v98 = v72 + 16 * v73;
            unint64_t v99 = v98 - 8;
            BOOL v101 = (unint64_t)(v147 + 1) < v98 && v72 + 8 < v97;
            BOOL v102 = v72 >= v97 - 8 || (unint64_t)v147 >= v99;
            if (v102 && !v101)
            {
              uint64_t v103 = v73 & 1;
              if ((v73 & 1) == 0) {
                uint64_t v103 = 2;
              }
              float64x2_t v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v94, 0);
              unint64_t v96 = v73 - v103;
              float64x2_t v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v95, 0);
              unint64_t v106 = v96;
              float32x2_t v107 = (const double *)v72;
              long long v108 = v147;
              do
              {
                float64x2x2_t v164 = vld2q_f64(v107);
                v107 += 4;
                v165.val[0] = vmlaq_n_f64(vmlaq_n_f64(v104, v164.val[0], a), v164.val[1], c);
                v165.val[1] = vmlaq_n_f64(vmlaq_n_f64(v105, v164.val[1], d), v164.val[0], b);
                vst2q_f64(v108, v165);
                v108 += 4;
                v106 -= 2;
              }
              while (v106);
            }
          }
          else
          {
            unint64_t v96 = 0;
          }
          unint64_t v109 = v73 - v96;
          uint64_t v110 = 16 * v96;
          unint64_t v111 = &v147[2 * v96 + 1];
          float v112 = (double *)(v72 + v110);
          do
          {
            double v113 = v112[1];
            *(v111 - 1) = v94 + *v112 * a + v113 * c;
            double v114 = *v112;
            v112 += 2;
            double *v111 = v95 + v113 * d + v114 * b;
            v111 += 2;
            --v109;
          }
          while (v109);
        }
LABEL_109:
        path1 = CGPathCreateMutable();
        CGFloat r1 = v142;
        uint64_t v115 = *((void *)v67 + 6);
        CGFloat y = v144;
        CGFloat v156 = v143;
        CGFloat x = v145;
        if (v115 < 1)
        {
LABEL_119:
          if (*(unsigned char *)(v17 + 322))
          {
            IsEmptCGFloat y = CGPathIsEmpty(path1);
            CGFloat v133 = v156;
            CGFloat v134 = r1;
            if (!IsEmpty)
            {
              DrawPath(a1, v17, path1);
              *(CGRect *)(&v133 - 2) = CGPathGetBoundingBox(path1);
              CGFloat x = v135;
              CGFloat y = v136;
            }
          }
          else
          {
            CGFloat v133 = v156;
            CGFloat v134 = r1;
          }
          *(CGFloat *)(v17 + 8) = x;
          *(CGFloat *)(v17 + 16) = y;
          *(CGFloat *)(v17 + 24) = v133;
          *(CGFloat *)(v17 + 32) = v134;
          goto LABEL_126;
        }
        uint64_t v118 = 0;
        double v119 = (double)(int)QuantizationLevelWithStyle;
        double v120 = (double)SHIDWORD(QuantizationLevelWithStyle);
        double v151 = 1.0 / (double)(int)QuantizationLevelWithStyle;
        double v121 = 1.0 / (double)SHIDWORD(QuantizationLevelWithStyle);
        long long v122 = v147 + 1;
        CGFloat y = v144;
        CGFloat x = v145;
        CGFloat v156 = v143;
        CGFloat r1 = v142;
        double v123 = 1.0 / v146;
        while (2)
        {
          CFIndex v124 = *(void *)(*((void *)v67 + 7) + 8 * v118);
          if (v124 < 0 || v124 >= v64) {
            goto LABEL_113;
          }
          long long v125 = (CGPathRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v158 + 64), v124);
          if (!*(_DWORD *)v125)
          {
            long long v126 = v125;
            double v127 = *(v122 - 1);
            double v128 = floor(v127);
            double v129 = floor(*v122);
            CGFloat v130 = (v128 + (double)(int)((v127 - v128) * v119) * v151) * v123;
            CGFloat v131 = (v129 + (double)(int)((*v122 - v129) * v120) * v121) * v123;
            CGContextSaveGState(a1);
            memset(&transform, 0, sizeof(transform));
            CGAffineTransformMakeTranslation(&transform, v130, v131);
            CGAffineTransform t2 = transform;
            CGContextConcatCTM(a1, &t2);
            if (*(unsigned char *)(v17 + 322))
            {
              CGPathAddPath(path1, &transform, v126[1]);
            }
            else
            {
              DrawPath(a1, v17, v126[1]);
              BoundingBoCGFloat x = CGPathGetBoundingBox(v126[1]);
              CGAffineTransform t2 = transform;
              CGRect v175 = CGRectApplyAffineTransform(BoundingBox, &t2);
              v172.origin.CGFloat x = x;
              v172.origin.CGFloat y = y;
              v172.size.width = v156;
              v172.size.height = r1;
              CGRect v173 = CGRectUnion(v172, v175);
              CGFloat x = v173.origin.x;
              CGFloat y = v173.origin.y;
              CGFloat v156 = v173.size.width;
              CGFloat r1 = v173.size.height;
            }
            CGContextRestoreGState(a1);
            uint64_t v115 = *((void *)v67 + 6);
LABEL_113:
            ++v118;
            v122 += 2;
            if (v118 >= v115) {
              goto LABEL_119;
            }
            continue;
          }
          break;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v137 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_126;
          }
LABEL_137:
          LOWORD(transform.a) = 0;
          _os_log_error_impl(&dword_233120000, v137, OS_LOG_TYPE_ERROR, "Expected path type", (uint8_t *)&transform, 2u);
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v137 = __CGPerspectiveOSLog_log;
          if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_137;
          }
        }
LABEL_126:
        CGPathRelease(path1);
        free(v147);
LABEL_127:
        CGContextRestoreGState(a1);
        if (*(unsigned char *)a5)
        {
          CGContextSaveGState(a1);
          unint64_t v138 = *(CGColor **)(a5 + 8);
          if (v138) {
            CGContextSetStrokeColorWithColor(a1, v138);
          }
          else {
            CGContextSetRGBStrokeColor(a1, 0.0, 0.0, 1.0, 1.0);
          }
          CGContextSetLineWidth(a1, 1.0);
          CGContextSetLineDash(a1, 0.0, 0, 0);
          CGContextStrokeRect(a1, *(CGRect *)(v17 + 8));
          CGContextRestoreGState(a1);
        }
        if (++a3 < v152) {
          continue;
        }
        if (v11 >= 1)
        {
          do
          {
            CGContextRestoreGState(a1);
            --v11;
          }
          while (v11);
        }
        return;
      default:
        if (v20 == 1) {
          goto LABEL_127;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v46 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_127;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v46 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_127;
          }
        }
        LODWORD(transform.a) = 67109120;
        HIDWORD(transform.a) = v20;
        long long v47 = v46;
        uint64_t v48 = "Unsupported drawing of resource type %d";
LABEL_81:
        _os_log_impl(&dword_233120000, v47, OS_LOG_TYPE_DEFAULT, v48, (uint8_t *)&transform, 8u);
        goto LABEL_127;
    }
    break;
  }
}